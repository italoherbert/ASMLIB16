     1                                  
     2                                  %include "lib/trigon.mac"
     3                              <1> 
     4                              <1> %ifndef TRIGON_MAC
     5                              <1> 	%define TRIGON_MAC
     6                              <1> 
     7                              <1> 	%include "lib/trigon.asm"
     8                              <2> 
     9                              <2> %ifndef TRIGON_ASM
    10                              <2> 	%define TRIGON_ASM
    11                              <2> 
    12                              <2> 	%include "lib/system.mac"
    13                              <3>  
    14                              <3> %ifndef SYSTEM_MAC
    15                              <3>  	%define SYSTEM_MAC
    16                              <3>  	
    17                              <3> 	%ifndef TRUE
    18                              <3> 		%define TRUE 01h
    19                              <3> 	%endif
    20                              <3> 	%ifndef FALSE
    21                              <3> 		%define FALSE 00h
    22                              <3> 	%endif
    23                              <3> 	
    24                              <3> %macro vlodsb 3
    25                              <3> 	vlodsb cs, %1, %2, %3
    26                              <3> %endmacro
    27                              <3> 
    28                              <3> %macro vstosb 3
    29                              <3> 	vstosb cs, %1, %2, %3
    30                              <3> %endmacro
    31                              <3> 	 	
    32                              <3> %macro int16toreg 2
    33                              <3> 	int16toreg cs, %1, %2
    34                              <3> %endmacro
    35                              <3> 
    36                              <3> %macro regtoint16 2
    37                              <3> 	regtoint16 %1, cs, %2
    38                              <3> %endmacro
    39                              <3> 
    40                              <3> %macro vstosb 4
    41                              <3> 	push %1
    42                              <3> 	pop ds
    43                              <3> 	mov si,%2
    44                              <3> 	add si,%3
    45                              <3> 	mov byte [si],%4	
    46                              <3> %endmacro
    47                              <3> 
    48                              <3> %macro vlodsb 4
    49                              <3> 	push %1
    50                              <3> 	pop ds
    51                              <3> 	mov si,%2
    52                              <3> 	add si,%3
    53                              <3> 	mov byte %4,[si]	
    54                              <3> %endmacro 	 
    55                              <3> 
    56                              <3> %macro int16toreg 3
    57                              <3> 	push %2
    58                              <3> 	push %1
    59                              <3> 	pop ds
    60                              <3> 	pop si
    61                              <3> 	mov word %3,[si]	
    62                              <3> %endmacro
    63                              <3> 
    64                              <3> %macro regtoint16 3
    65                              <3> 	push %3
    66                              <3> 	push %2
    67                              <3> 	pop ds
    68                              <3> 	pop si
    69                              <3> 	mov word [si],%1	
    70                              <3> %endmacro
    71                              <3> 
    72                              <3> %macro mov32 2
    73                              <3> 	mov32 cs, %1, cs, %2
    74                              <3> %endmacro
    75                              <3> 
    76                              <3> %macro mov16 2
    77                              <3> 	mov16 cs, %1, cs, %2
    78                              <3> %endmacro
    79                              <3> 
    80                              <3> %macro mov32 4
    81                              <3> 	mov ax,%3
    82                              <3> 	mov ds,ax
    83                              <3> 	mov cx,[%4+2]
    84                              <3> 	mov dx,[%4]
    85                              <3> 	mov ax,%1
    86                              <3> 	mov ds,ax
    87                              <3> 	mov [%2+2],cx
    88                              <3> 	mov [%2],dx
    89                              <3> %endmacro
    90                              <3> 
    91                              <3> %macro mov16 4
    92                              <3> 	mov ax,%3
    93                              <3> 	mov ds,ax
    94                              <3> 	mov bx,[%4]
    95                              <3> 	mov ax,%1
    96                              <3> 	mov ds,ax
    97                              <3> 	mov [%2],bx
    98                              <3> %endmacro
    99                              <3>  	 	
   100                              <3> %macro mformat 4
   101                              <3> 	stkopen 8
   102                              <3> 	mov word [ bp + 0 ], %1
   103                              <3> 	mov word [ bp + 2 ], %2
   104                              <3> 	mov word [ bp + 4 ], %3
   105                              <3> 	mov word [ bp + 6 ], %4
   106                              <3> 	call kernel_segment:mformat
   107                              <3> 	stkclose 8
   108                              <3> %endmacro
   109                              <3> 
   110                              <3> %macro malloc 6
   111                              <3> 	stkopen 0Bh
   112                              <3> 	mov word [ bp + 4 ], %3
   113                              <3> 	mov word [ bp + 6 ], %4
   114                              <3> 	mov word [ bp + 8 ], %5	
   115                              <3> 	call kernel_segment:malloc
   116                              <3> 	push sp
   117                              <3> 	pop bp
   118                              <3> 	mov word %1, [ bp ]
   119                              <3> 	mov word %2, [ bp + 2 ]
   120                              <3> 	mov byte %6, [ bp + 0x0A ]
   121                              <3> 	stkclose 0Bh
   122                              <3> %endmacro 	
   123                              <3> 
   124                              <3> %macro laddr 2
   125                              <3> 	laddr %1, %2, %1, %2
   126                              <3> %endmacro
   127                              <3> 
   128                              <3> %macro faddr 2
   129                              <3> 	faddr %1, %2, %1, %2
   130                              <3> %endmacro
   131                              <3>  	
   132                              <3> %macro laddr 4
   133                              <3> 	stkopen 8
   134                              <3> 	mov word [ bp + 4 ], %3
   135                              <3> 	mov word [ bp + 6 ], %4	
   136                              <3> 	call kernel_segment:laddr
   137                              <3> 	push sp
   138                              <3> 	pop bp
   139                              <3> 	mov word %1, [ bp + 0 ]
   140                              <3> 	mov word %2, [ bp + 2 ]	
   141                              <3> 	stkclose 8
   142                              <3> %endmacro
   143                              <3> 
   144                              <3> %macro faddr 4
   145                              <3> 	stkopen 8
   146                              <3> 	mov word [ bp + 4 ], %3
   147                              <3> 	mov word [ bp + 6 ], %4	
   148                              <3> 	call kernel_segment:faddr
   149                              <3> 	push sp
   150                              <3> 	pop bp
   151                              <3> 	mov word %1, [ bp + 0 ]
   152                              <3> 	mov word %2, [ bp + 2 ]	
   153                              <3> 	stkclose 8
   154                              <3> %endmacro	
   155                              <3>  
   156                              <3> 
   157                              <3> %macro stkopen 1		
   158                              <3> 	sub word sp, %1
   159                              <3> 	push sp
   160                              <3> 	pop bp
   161                              <3> %endmacro
   162                              <3> 
   163                              <3> %macro stkclose 1
   164                              <3> 	add word sp, %1
   165                              <3> %endmacro
   166                              <3> 
   167                              <3> %macro stkload 1-* 	
   168                              <3>  	%rep %0
   169                              <3>  	 	%rotate -1
   170                              <3>  		pop %1
   171                              <3>  	%endrep
   172                              <3>  	%rep %0
   173                              <3>  		push %1
   174                              <3>  		%rotate 1
   175                              <3>  	%endrep
   176                              <3> %endmacro
   177                              <3> 
   178                              <3> %macro stkpush 1-* 	
   179                              <3>  	%rep %0
   180                              <3>  		push %1
   181                              <3>  		%rotate 1
   182                              <3>  	%endrep 	
   183                              <3> %endmacro
   184                              <3>  
   185                              <3> %macro stkpop 1-*
   186                              <3>  	%rep %0
   187                              <3>  	 	%rotate -1
   188                              <3>  		pop %1
   189                              <3>  	%endrep 	 	
   190                              <3> %endmacro
   191                              <3> 
   192                              <3> %endif 
   193                              <2> 	%include "lib/math.mac"
   194                              <3> 
   195                              <3> %ifndef MATH_MAC
   196                              <3> 	%define MATH_MAC
   197                              <3> 	
   198                              <3> 	%include "lib/math.asm"
   199                              <4> 
   200                              <4> %ifndef MATH_ASM
   201                              <4> 	%define MATH_ASM
   202                              <4> 
   203                              <4> 	%include "lib/system.mac"
   204                              <5>  
   205                              <5> %ifndef SYSTEM_MAC
   206                              <5>  	%define SYSTEM_MAC
   207                              <5>  	
   208                              <5> 	%ifndef TRUE
   209                              <5> 		%define TRUE 01h
   210                              <5> 	%endif
   211                              <5> 	%ifndef FALSE
   212                              <5> 		%define FALSE 00h
   213                              <5> 	%endif
   214                              <5> 	
   215                              <5> %macro vlodsb 3
   216                              <5> 	vlodsb cs, %1, %2, %3
   217                              <5> %endmacro
   218                              <5> 
   219                              <5> %macro vstosb 3
   220                              <5> 	vstosb cs, %1, %2, %3
   221                              <5> %endmacro
   222                              <5> 	 	
   223                              <5> %macro int16toreg 2
   224                              <5> 	int16toreg cs, %1, %2
   225                              <5> %endmacro
   226                              <5> 
   227                              <5> %macro regtoint16 2
   228                              <5> 	regtoint16 %1, cs, %2
   229                              <5> %endmacro
   230                              <5> 
   231                              <5> %macro vstosb 4
   232                              <5> 	push %1
   233                              <5> 	pop ds
   234                              <5> 	mov si,%2
   235                              <5> 	add si,%3
   236                              <5> 	mov byte [si],%4	
   237                              <5> %endmacro
   238                              <5> 
   239                              <5> %macro vlodsb 4
   240                              <5> 	push %1
   241                              <5> 	pop ds
   242                              <5> 	mov si,%2
   243                              <5> 	add si,%3
   244                              <5> 	mov byte %4,[si]	
   245                              <5> %endmacro 	 
   246                              <5> 
   247                              <5> %macro int16toreg 3
   248                              <5> 	push %2
   249                              <5> 	push %1
   250                              <5> 	pop ds
   251                              <5> 	pop si
   252                              <5> 	mov word %3,[si]	
   253                              <5> %endmacro
   254                              <5> 
   255                              <5> %macro regtoint16 3
   256                              <5> 	push %3
   257                              <5> 	push %2
   258                              <5> 	pop ds
   259                              <5> 	pop si
   260                              <5> 	mov word [si],%1	
   261                              <5> %endmacro
   262                              <5> 
   263                              <5> %macro mov32 2
   264                              <5> 	mov32 cs, %1, cs, %2
   265                              <5> %endmacro
   266                              <5> 
   267                              <5> %macro mov16 2
   268                              <5> 	mov16 cs, %1, cs, %2
   269                              <5> %endmacro
   270                              <5> 
   271                              <5> %macro mov32 4
   272                              <5> 	mov ax,%3
   273                              <5> 	mov ds,ax
   274                              <5> 	mov cx,[%4+2]
   275                              <5> 	mov dx,[%4]
   276                              <5> 	mov ax,%1
   277                              <5> 	mov ds,ax
   278                              <5> 	mov [%2+2],cx
   279                              <5> 	mov [%2],dx
   280                              <5> %endmacro
   281                              <5> 
   282                              <5> %macro mov16 4
   283                              <5> 	mov ax,%3
   284                              <5> 	mov ds,ax
   285                              <5> 	mov bx,[%4]
   286                              <5> 	mov ax,%1
   287                              <5> 	mov ds,ax
   288                              <5> 	mov [%2],bx
   289                              <5> %endmacro
   290                              <5>  	 	
   291                              <5> %macro mformat 4
   292                              <5> 	stkopen 8
   293                              <5> 	mov word [ bp + 0 ], %1
   294                              <5> 	mov word [ bp + 2 ], %2
   295                              <5> 	mov word [ bp + 4 ], %3
   296                              <5> 	mov word [ bp + 6 ], %4
   297                              <5> 	call kernel_segment:mformat
   298                              <5> 	stkclose 8
   299                              <5> %endmacro
   300                              <5> 
   301                              <5> %macro malloc 6
   302                              <5> 	stkopen 0Bh
   303                              <5> 	mov word [ bp + 4 ], %3
   304                              <5> 	mov word [ bp + 6 ], %4
   305                              <5> 	mov word [ bp + 8 ], %5	
   306                              <5> 	call kernel_segment:malloc
   307                              <5> 	push sp
   308                              <5> 	pop bp
   309                              <5> 	mov word %1, [ bp ]
   310                              <5> 	mov word %2, [ bp + 2 ]
   311                              <5> 	mov byte %6, [ bp + 0x0A ]
   312                              <5> 	stkclose 0Bh
   313                              <5> %endmacro 	
   314                              <5> 
   315                              <5> %macro laddr 2
   316                              <5> 	laddr %1, %2, %1, %2
   317                              <5> %endmacro
   318                              <5> 
   319                              <5> %macro faddr 2
   320                              <5> 	faddr %1, %2, %1, %2
   321                              <5> %endmacro
   322                              <5>  	
   323                              <5> %macro laddr 4
   324                              <5> 	stkopen 8
   325                              <5> 	mov word [ bp + 4 ], %3
   326                              <5> 	mov word [ bp + 6 ], %4	
   327                              <5> 	call kernel_segment:laddr
   328                              <5> 	push sp
   329                              <5> 	pop bp
   330                              <5> 	mov word %1, [ bp + 0 ]
   331                              <5> 	mov word %2, [ bp + 2 ]	
   332                              <5> 	stkclose 8
   333                              <5> %endmacro
   334                              <5> 
   335                              <5> %macro faddr 4
   336                              <5> 	stkopen 8
   337                              <5> 	mov word [ bp + 4 ], %3
   338                              <5> 	mov word [ bp + 6 ], %4	
   339                              <5> 	call kernel_segment:faddr
   340                              <5> 	push sp
   341                              <5> 	pop bp
   342                              <5> 	mov word %1, [ bp + 0 ]
   343                              <5> 	mov word %2, [ bp + 2 ]	
   344                              <5> 	stkclose 8
   345                              <5> %endmacro	
   346                              <5>  
   347                              <5> 
   348                              <5> %macro stkopen 1		
   349                              <5> 	sub word sp, %1
   350                              <5> 	push sp
   351                              <5> 	pop bp
   352                              <5> %endmacro
   353                              <5> 
   354                              <5> %macro stkclose 1
   355                              <5> 	add word sp, %1
   356                              <5> %endmacro
   357                              <5> 
   358                              <5> %macro stkload 1-* 	
   359                              <5>  	%rep %0
   360                              <5>  	 	%rotate -1
   361                              <5>  		pop %1
   362                              <5>  	%endrep
   363                              <5>  	%rep %0
   364                              <5>  		push %1
   365                              <5>  		%rotate 1
   366                              <5>  	%endrep
   367                              <5> %endmacro
   368                              <5> 
   369                              <5> %macro stkpush 1-* 	
   370                              <5>  	%rep %0
   371                              <5>  		push %1
   372                              <5>  		%rotate 1
   373                              <5>  	%endrep 	
   374                              <5> %endmacro
   375                              <5>  
   376                              <5> %macro stkpop 1-*
   377                              <5>  	%rep %0
   378                              <5>  	 	%rotate -1
   379                              <5>  		pop %1
   380                              <5>  	%endrep 	 	
   381                              <5> %endmacro
   382                              <5> 
   383                              <5> %endif 
   384                              <4> 
   385                              <4> %macro __int16to32 3
   386                              <4> 	stkopen 0x06
   387                              <4> 	mov word [bp+0],%1
   388                              <4> 	call proc_int16to32
   389                              <4> 	push sp
   390                              <4> 	pop bp
   391                              <4> 	mov word %2, [bp+2]
   392                              <4> 	mov word %3, [bp+4]
   393                              <4> 	stkclose 0x06
   394                              <4> %endmacro
   395                              <4> 
   396                              <4> %macro __int32to16 3
   397                              <4> 	stkopen 0x06
   398                              <4> 	mov word [bp+0], %1
   399                              <4> 	mov word [bp+2], %2
   400                              <4> 	call proc_int32to16
   401                              <4> 	push sp
   402                              <4> 	pop bp
   403                              <4> 	mov word %3, [bp+4]
   404                              <4> 	stkclose 0x06
   405                              <4> %endmacro
   406                              <4> 
   407                              <4> %macro __add32 6
   408                              <4> 	stkopen 0x0C
   409                              <4> 	mov word [bp+0], %1
   410                              <4> 	mov word [bp+2], %2
   411                              <4> 	mov word [bp+4], %3
   412                              <4> 	mov word [bp+6], %4	
   413                              <4> 	call proc_add32
   414                              <4> 	push sp
   415                              <4> 	pop bp
   416                              <4> 	mov word %5, [bp+8]
   417                              <4> 	mov word %6, [bp+0x0A]
   418                              <4> 	stkclose 0x0C
   419                              <4> %endmacro
   420                              <4> 
   421                              <4> %macro __sub32 6
   422                              <4> 	stkopen 0x0C
   423                              <4> 	mov word [bp+0], %1
   424                              <4> 	mov word [bp+2], %2
   425                              <4> 	mov word [bp+4], %3
   426                              <4> 	mov word [bp+6], %4	
   427                              <4> 	call proc_sub32
   428                              <4> 	push sp
   429                              <4> 	pop bp
   430                              <4> 	mov word %5, [bp+8]
   431                              <4> 	mov word %6, [bp+0x0A]
   432                              <4> 	stkclose 0x0C
   433                              <4> %endmacro
   434                              <4> 
   435                              <4> %macro __mul32 6
   436                              <4> 	stkopen 0x0C
   437                              <4> 	mov word [bp+0], %1
   438                              <4> 	mov word [bp+2], %2
   439                              <4> 	mov word [bp+4], %3
   440                              <4> 	mov word [bp+6], %4	
   441                              <4> 	call proc_mul32
   442                              <4> 	push sp
   443                              <4> 	pop bp
   444                              <4> 	mov word %5, [bp+8]
   445                              <4> 	mov word %6, [bp+0x0A]
   446                              <4> 	stkclose 0x0C
   447                              <4> %endmacro
   448                              <4> 
   449                              <4> %macro __div32 9
   450                              <4> 	stkopen 0x11
   451                              <4> 	mov word [bp+0], %1
   452                              <4> 	mov word [bp+2], %2
   453                              <4> 	mov word [bp+4], %3
   454                              <4> 	mov word [bp+6], %4
   455                              <4> 	mov word [bp+8], %5
   456                              <4> 	mov word [bp+0x0A], %6	
   457                              <4> 	call proc_div32
   458                              <4> 	push sp
   459                              <4> 	pop bp
   460                              <4> 	mov word %7, [bp+0x0C]
   461                              <4> 	mov word %8, [bp+0x0E]
   462                              <4> 	mov byte %9, [bp+0x10]
   463                              <4> 	stkclose 0x11
   464                              <4> %endmacro
   465                              <4> 
   466                              <4> %macro __cmp32 5
   467                              <4> 	stkopen 9
   468                              <4> 	mov word [bp+0], %1
   469                              <4> 	mov word [bp+2], %2
   470                              <4> 	mov word [bp+4], %3
   471                              <4> 	mov word [bp+6], %4
   472                              <4> 	call proc_cmp32
   473                              <4> 	push sp
   474                              <4> 	pop bp
   475                              <4> 	mov byte %5, [bp+8]
   476                              <4> 	stkclose 9	
   477                              <4> %endmacro
   478                              <4> 
   479                              <4> %macro __shl32 3
   480                              <4> 	stkopen 5
   481                              <4> 	mov word [bp+0], %1
   482                              <4> 	mov word [bp+2], %2
   483                              <4> 	mov byte [bp+4], %3
   484                              <4> 	call proc_shl32
   485                              <4> 	push sp
   486                              <4> 	pop bp
   487                              <4> 	mov word %1, [bp+0]
   488                              <4> 	mov word %2, [bp+2]
   489                              <4> 	stkclose 5
   490                              <4> %endmacro
   491                              <4> 
   492                              <4> %macro __shr32 3
   493                              <4> 	stkopen 5
   494                              <4> 	mov word [bp+0], %1
   495                              <4> 	mov word [bp+2], %2
   496                              <4> 	mov byte [bp+4], %3
   497                              <4> 	call proc_shr32
   498                              <4> 	push sp
   499                              <4> 	pop bp
   500                              <4> 	mov word %1, [bp+0]
   501                              <4> 	mov word %2, [bp+2]
   502                              <4> 	stkclose 5
   503                              <4> %endmacro
   504                              <4> 
   505                              <4> %macro __lzcount32 3	
   506                              <4> 	push %2		
   507                              <4> 	__lzcount16 %1, cl	
   508                              <4> 	pop ax
   509                              <4> 	cmp cl,4
   510                              <4> 	jb .end
   511                              <4> 		push cx		
   512                              <4> 		__lzcount16 ax, al		
   513                              <4> 		pop cx
   514                              <4> 		add cl,al
   515                              <4> 	.end:	
   516                              <4> 	mov byte %3, cl 
   517                              <4> %endmacro
   518                              <4> 
   519                              <4> %macro __lzcount16 2
   520                              <4> 	stkopen 3
   521                              <4> 	mov word [bp+0], %1
   522                              <4> 	call proc__lzcount16
   523                              <4> 	push sp
   524                              <4> 	pop bp
   525                              <4> 	mov byte %2, [bp+2]	
   526                              <4> 	stkclose 3
   527                              <4> %endmacro
   528                              <4> 
   529                              <4> %macro __lzbitcount32 3	
   530                              <4> 	push %2		
   531                              <4> 	__lzbitcount16 %1, cl
   532                              <4> 	pop ax
   533                              <4> 	cmp cl,16
   534                              <4> 	jb .end
   535                              <4> 		push cx		
   536                              <4> 		__lzbitcount16 ax, al		
   537                              <4> 		pop cx
   538                              <4> 		add cl,al
   539                              <4> 	.end:	
   540                              <4> 	mov byte %3, cl 
   541                              <4> %endmacro
   542                              <4> 		
   543                              <4> %macro __lzbitcount16 2
   544                              <4> 	stkopen 3
   545                              <4> 	mov word [bp+0], %1
   546                              <4> 	call proc__lzbitcount16
   547                              <4> 	push sp
   548                              <4> 	pop bp
   549                              <4> 	mov byte %2, [bp+2]	
   550                              <4> 	stkclose 3
   551                              <4> %endmacro	
   552                              <4> 
   553                              <4> %macro __calc_dividendo1 7
   554                              <4> 	stkopen 0x0D
   555                              <4> 	mov word [bp+0], %1
   556                              <4> 	mov word [bp+2], %2
   557                              <4> 	mov word [bp+4], %3
   558                              <4> 	mov word [bp+6], %4
   559                              <4> 	call proc_calc_dividendo1
   560                              <4> 	push sp
   561                              <4> 	pop bp
   562                              <4> 	mov word %5, [bp+0x08]
   563                              <4> 	mov word %6, [bp+0x0A]
   564                              <4> 	mov byte %7, [bp+0x0C]
   565                              <4> 	stkclose 0x0D
   566                              <4> %endmacro
   567                              <4> 
   568                              <4> %macro __calc__prox_dividendo 5
   569                              <4> 	stkopen 9
   570                              <4> 	mov word [bp+0], %1
   571                              <4> 	mov word [bp+2], %2
   572                              <4> 	mov word [bp+4], %3
   573                              <4> 	mov word [bp+6], %4
   574                              <4> 	mov word [bp+8], %5
   575                              <4> 	call proc_calc_prox_dividendo
   576                              <4> 	push sp
   577                              <4> 	pop bp
   578                              <4> 	mov word %3, [bp+4]
   579                              <4> 	mov word %4, [bp+6]
   580                              <4> 	mov byte %5, [bp+8]
   581                              <4> 	stkclose 9
   582                              <4> %endmacro
   583                              <4> 				
   584                              <4> section .data
   585                              <4> 
   586                              <4> proc_int16to32:
   587 00000000 89E0                <4> 	mov ax,sp
   588 00000002 89C5                <4> 	mov bp,ax
   589                              <4> 	
   590 00000004 8B4602              <4> 	mov ax,[bp+2]
   591 00000007 894606              <4> 	mov [bp+6],ax
   592                              <4> 				
   593 0000000A 250080              <4> 	and ax,0x8000
   594 0000000D 83F800              <4> 	cmp ax,0
   595 00000010 7507                <4> 	jnz .one
   596 00000012 C746040000          <4> 		mov word [bp+4],0			
   597 00000017 EB05                <4> 		jmp .endcmp
   598                              <4> 	.one:				
   599 00000019 C74604FFFF          <4> 		mov word [bp+4],0xFFFF
   600                              <4> 	.endcmp:
   601                              <4> 	
   602 0000001E C3                  <4> 	ret
   603                              <4> 	
   604                              <4> proc_int32to16:
   605 0000001F 89E0                <4> 	mov ax,sp
   606 00000021 89C5                <4> 	mov bp,ax
   607                              <4> 		
   608 00000023 8B4604              <4> 	mov ax,[bp+4]
   609 00000026 25FF7F              <4> 	and ax,0x7FFF
   610 00000029 894606              <4> 	mov [bp+6],ax
   611                              <4> 	
   612 0000002C 8B4602              <4> 	mov ax,[bp+2]
   613 0000002F 250080              <4> 	and ax,0x8000
   614 00000032 014606              <4> 	add [bp+6],ax
   615                              <4> 		
   616 00000035 C3                  <4> 	ret
   617                              <4> 
   618                              <4> proc_setsig:
   619 00000036 89E0                <4> 	mov ax,sp
   620 00000038 89C5                <4> 	mov bp,ax
   621                              <4> 	
   622 0000003A 816602FF7F          <4> 	and word [bp+2],0x7FFF
   623 0000003F 8146020080          <4> 	add word [bp+2],0x8000	
   624                              <4> 	
   625 00000044 C3                  <4> 	ret
   626                              <4> 	
   627                              <4> proc_clrsig:
   628 00000045 89E0                <4> 	mov ax,sp
   629 00000047 89C5                <4> 	mov bp,ax
   630                              <4> 	
   631 00000049 816602FF7F          <4> 	and word [bp+2],0x7FFF
   632                              <4> 
   633 0000004E C3                  <4> 	ret
   634                              <4> 
   635                              <4> proc_idiv32:
   636                              <4> 	stkopen 0x11
   637 0000004F 83EC11              <5>  sub word sp, %1
   638 00000052 54                  <5>  push sp
   639 00000053 5D                  <5>  pop bp
   640 00000054 8B4613              <4> 	mov ax,[bp+0x13]
   641 00000057 25FF7F              <4> 	and ax,0x7FFF
   642 0000005A 894600              <4> 	mov [bp+0],ax
   643 0000005D 8B4615              <4> 	mov ax,[bp+0x15]
   644 00000060 894602              <4> 	mov [bp+2],ax
   645 00000063 8B4617              <4> 	mov ax,[bp+0x17]
   646 00000066 25FF7F              <4> 	and ax,0x7FFF
   647 00000069 894604              <4> 	mov [bp+4],ax
   648 0000006C 8B4619              <4> 	mov ax,[bp+0x19]
   649 0000006F 894606              <4> 	mov [bp+6],ax 
   650 00000072 E8B300              <4> 	call proc_div32
   651 00000075 89E0                <4> 	mov ax,sp
   652 00000077 89C5                <4> 	mov bp,ax
   653 00000079 8B4608              <4> 	mov ax,[bp+8]
   654 0000007C 89461B              <4> 	mov [bp+0x1B], ax
   655 0000007F 8B460A              <4> 	mov ax,[bp+0x0A]
   656 00000082 89461D              <4> 	mov [bp+0x1D], ax
   657 00000085 8B460C              <4> 	mov ax,[bp+0x0C]
   658 00000088 89461F              <4> 	mov [bp+0x1F], ax
   659 0000008B 8B460E              <4> 	mov ax,[bp+0x0E]
   660 0000008E 894621              <4> 	mov [bp+0x21], ax
   661 00000091 8A4610              <4> 	mov al,[bp+0x10]
   662 00000094 884623              <4> 	mov byte [bp+0x23], al
   663                              <4> 	stkclose 0x11
   664 00000097 83C411              <5>  add word sp, %1
   665                              <4> 	
   666 0000009A 54                  <4> 	push sp
   667 0000009B 5D                  <4> 	pop bp
   668                              <4> 		
   669 0000009C 8B4E02              <4> 	mov cx,[bp+2]
   670 0000009F 8B5606              <4> 	mov dx,[bp+6]
   671 000000A2 81E10080            <4> 	and cx,0x8000
   672 000000A6 81E20080            <4> 	and dx,0x8000
   673 000000AA 31D1                <4> 	xor cx,dx
   674                              <4> 	
   675 000000AC 837E0A00            <4> 	cmp word [bp+0x0A],0
   676 000000B0 7506                <4> 	jnz .signal1
   677 000000B2 837E0C00            <4> 	cmp word [bp+0x0C],0
   678 000000B6 7403                <4> 	jz .endsignal1
   679                              <4> 	.signal1:
   680 000000B8 014E0A              <4> 		add word [bp+0x0A],cx
   681                              <4> 	.endsignal1:
   682                              <4> 	
   683 000000BB 837E0E00            <4> 	cmp word [bp+0x0E],0
   684 000000BF 7506                <4> 	jnz .signal2
   685 000000C1 837E1000            <4> 	cmp word [bp+0x10],0
   686 000000C5 7403                <4> 	jz .endsignal2
   687                              <4> 	.signal2:
   688 000000C7 014E0E              <4> 		add word [bp+0x0E],cx	
   689                              <4> 	.endsignal2:
   690                              <4> 		
   691 000000CA C3                  <4> 	ret	
   692                              <4> 
   693                              <4> proc_imul32:		
   694                              <4> 	stkopen 0x0C
   695 000000CB 83EC0C              <5>  sub word sp, %1
   696 000000CE 54                  <5>  push sp
   697 000000CF 5D                  <5>  pop bp
   698 000000D0 8B460E              <4> 	mov ax,[bp+0x0E]
   699 000000D3 25FF7F              <4> 	and ax,0x7FFF
   700 000000D6 894600              <4> 	mov [bp+0],ax
   701 000000D9 8B4610              <4> 	mov ax,[bp+0x10]
   702 000000DC 894602              <4> 	mov [bp+2],ax
   703 000000DF 8B4612              <4> 	mov ax,[bp+0x12]
   704 000000E2 25FF7F              <4> 	and ax,0x7FFF
   705 000000E5 894604              <4> 	mov [bp+4],ax
   706 000000E8 8B4614              <4> 	mov ax,[bp+0x14]
   707 000000EB 894606              <4> 	mov [bp+6],ax 
   708 000000EE E8B901              <4> 	call proc_mul32
   709 000000F1 89E0                <4> 	mov ax,sp
   710 000000F3 89C5                <4> 	mov bp,ax
   711 000000F5 8B4608              <4> 	mov ax,[bp+8]
   712 000000F8 8B5E0A              <4> 	mov bx,[bp+0x0A]
   713                              <4> 	stkclose 0x0C
   714 000000FB 83C40C              <5>  add word sp, %1
   715                              <4> 	
   716 000000FE 89E1                <4> 	mov cx,sp
   717 00000100 89CD                <4> 	mov bp,cx		
   718                              <4> 		
   719 00000102 89460A              <4> 	mov [bp+0x0A],ax
   720 00000105 895E0C              <4> 	mov [bp+0x0C],bx
   721                              <4> 	
   722 00000108 837E0A00            <4> 	cmp word [bp+0x0A],0
   723 0000010C 7506                <4> 	jnz .signal1
   724 0000010E 837E0C00            <4> 	cmp word [bp+0x0C],0
   725 00000112 7413                <4> 	jz .endsignal1
   726                              <4> 	.signal1:
   727 00000114 8B4E02              <4> 		mov cx,[bp+2]
   728 00000117 8B5606              <4> 		mov dx,[bp+6]
   729 0000011A 81E10080            <4> 		and cx,0x8000
   730 0000011E 81E20080            <4> 		and dx,0x8000
   731 00000122 31D1                <4> 		xor cx,dx
   732 00000124 014E0A              <4> 		add word [bp+0x0A],cx
   733                              <4> 	.endsignal1:
   734                              <4> 	
   735 00000127 C3                  <4> 	ret
   736                              <4> 
   737                              <4> proc_div32:
   738 00000128 89E0                <4> 	mov ax,sp
   739 0000012A 89C5                <4> 	mov bp,ax
   740                              <4> 	
   741 0000012C 8B4606              <4> 	mov ax,[bp+6]
   742 0000012F 034608              <4> 	add ax,[bp+8]
   743 00000132 83F800              <4> 	cmp ax,0
   744 00000135 0F846C01            <4> 	jz .divbyzero
   745                              <4> 	
   746 00000139 837E0200            <4> 	cmp word [bp+2], 0
   747 0000013D 7521                <4> 	jnz .div2
   748 0000013F 837E0600            <4> 	cmp word [bp+6], 0
   749 00000143 751B                <4> 	jnz .div2
   750 00000145 31D2                <4> 		xor dx,dx
   751 00000147 8B4604              <4> 		mov ax, [bp+4]
   752 0000014A F77608              <4> 		div word [bp+8]
   753 0000014D C7460A0000          <4> 		mov word [bp+0x0A], 0
   754 00000152 89460C              <4> 		mov word [bp+0x0C], ax
   755 00000155 C7460E0000          <4> 		mov word [bp+0x0E], 0
   756 0000015A 895610              <4> 		mov word [bp+0x10], dx
   757 0000015D E93F01              <4> 		jmp .enddiv
   758                              <4> 	.div2:
   759 00000160 8B4602              <4> 		mov ax,[bp+2]
   760 00000163 3B4606              <4> 		cmp ax,[bp+6]
   761 00000166 0F821F01            <4> 		jb .qzero
   762 0000016A 770A                <4> 		ja .div
   763 0000016C 8B4604              <4> 		mov ax,[bp+4]
   764 0000016F 3B4608              <4> 		cmp ax,[bp+8]
   765 00000172 0F821301            <4> 		jb .qzero
   766                              <4> 		
   767                              <4> 		.div:
   768                              <4> 		
   769 00000176 C7460A0000          <4> 		mov word [bp+0x0A], 0
   770 0000017B C7460C0000          <4> 		mov word [bp+0x0C], 0		
   771 00000180 C7460E0000          <4> 		mov word [bp+0x0E], 0
   772 00000185 C746100000          <4> 		mov word [bp+0x10], 0
   773                              <4> 		
   774 0000018A 8B4602              <4> 		mov ax,[bp+2]
   775 0000018D 8B5E04              <4> 		mov bx,[bp+4]
   776 00000190 8B4E06              <4> 		mov cx,[bp+6]
   777 00000193 8B5608              <4> 		mov dx,[bp+8]		
   778                              <4> 		__calc_dividendo1 ax, bx, cx, dx, ax, bx, cl
   779                              <5>  stkopen 0x0D
   780 00000196 83EC0D              <6>  sub word sp, %1
   781 00000199 54                  <6>  push sp
   782 0000019A 5D                  <6>  pop bp
   783 0000019B 894600              <5>  mov word [bp+0], %1
   784 0000019E 895E02              <5>  mov word [bp+2], %2
   785 000001A1 894E04              <5>  mov word [bp+4], %3
   786 000001A4 895606              <5>  mov word [bp+6], %4
   787 000001A7 E89A02              <5>  call proc_calc_dividendo1
   788 000001AA 54                  <5>  push sp
   789 000001AB 5D                  <5>  pop bp
   790 000001AC 8B4608              <5>  mov word %5, [bp+0x08]
   791 000001AF 8B5E0A              <5>  mov word %6, [bp+0x0A]
   792 000001B2 8A4E0C              <5>  mov byte %7, [bp+0x0C]
   793                              <5>  stkclose 0x0D
   794 000001B5 83C40D              <6>  add word sp, %1
   795                              <4> 
   796 000001B8 89E2                <4> 		mov dx,sp
   797 000001BA 89D5                <4> 		mov bp,dx
   798 000001BC 89460E              <4> 		mov word [bp+0x0E], ax
   799 000001BF 895E10              <4> 		mov word [bp+0x10], bx
   800                              <4> 		
   801 000001C2 51                  <4> 		push cx
   802                              <4> 		.l1:							
   803 000001C3 89E2                <4> 			mov dx,sp
   804 000001C5 89D5                <4> 			mov bp,dx		
   805 000001C7 83C502              <4> 			add bp,2
   806 000001CA 8B460E              <4> 			mov ax, [bp+0x0E]
   807 000001CD 8B5E10              <4> 			mov bx, [bp+0x10]
   808 000001D0 8B4E06              <4> 			mov cx, [bp+6]
   809 000001D3 8B5608              <4> 			mov dx, [bp+8]
   810                              <4> 			__cmp32 ax, bx, cx, dx, cl
   811                              <5>  stkopen 9
   812 000001D6 83EC09              <6>  sub word sp, %1
   813 000001D9 54                  <6>  push sp
   814 000001DA 5D                  <6>  pop bp
   815 000001DB 894600              <5>  mov word [bp+0], %1
   816 000001DE 895E02              <5>  mov word [bp+2], %2
   817 000001E1 894E04              <5>  mov word [bp+4], %3
   818 000001E4 895606              <5>  mov word [bp+6], %4
   819 000001E7 E81F01              <5>  call proc_cmp32
   820 000001EA 54                  <5>  push sp
   821 000001EB 5D                  <5>  pop bp
   822 000001EC 8A4E08              <5>  mov byte %5, [bp+8]
   823                              <5>  stkclose 9
   824 000001EF 83C409              <6>  add word sp, %1
   825                              <4> 			
   826 000001F2 51                  <4> 			push cx
   827 000001F3 89E2                <4> 			mov dx,sp
   828 000001F5 89D5                <4> 			mov bp,dx
   829 000001F7 83C504              <4> 			add bp,4
   830 000001FA 8B460A              <4> 			mov ax,[bp+0x0A]
   831 000001FD 8B5E0C              <4> 			mov bx,[bp+0x0C]
   832 00000200 55                  <4> 			push bp
   833                              <4> 			__shl32 ax, bx, 1
   834                              <5>  stkopen 5
   835 00000201 83EC05              <6>  sub word sp, %1
   836 00000204 54                  <6>  push sp
   837 00000205 5D                  <6>  pop bp
   838 00000206 894600              <5>  mov word [bp+0], %1
   839 00000209 895E02              <5>  mov word [bp+2], %2
   840 0000020C C6460401            <5>  mov byte [bp+4], %3
   841 00000210 E82101              <5>  call proc_shl32
   842 00000213 54                  <5>  push sp
   843 00000214 5D                  <5>  pop bp
   844 00000215 8B4600              <5>  mov word %1, [bp+0]
   845 00000218 8B5E02              <5>  mov word %2, [bp+2]
   846                              <5>  stkclose 5
   847 0000021B 83C405              <6>  add word sp, %1
   848 0000021E 5D                  <4> 			pop bp				
   849 0000021F 59                  <4> 			pop cx	
   850                              <4> 									
   851 00000220 80F900              <4> 			cmp cl,0
   852 00000223 7C12                <4> 			jl .l11
   853 00000225 83C301              <4> 				add bx,1
   854 00000228 83D000              <4> 				adc ax,0	
   855                              <4> 				
   856 0000022B 8B4E06              <4> 				mov cx,[bp+6]
   857 0000022E 8B5608              <4> 				mov dx,[bp+8]
   858 00000231 295610              <4> 				sub [bp+0x10],dx
   859 00000234 194E0E              <4> 				sbb [bp+0x0E],cx							
   860                              <4> 			.l11:							
   861 00000237 89460A              <4> 			mov word [bp+0x0A], ax
   862 0000023A 895E0C              <4> 			mov word [bp+0x0C], bx					
   863                              <4> 					
   864 0000023D 59                  <4> 			pop cx
   865 0000023E 51                  <4> 			push cx												
   866                              <4> 			
   867 0000023F 80F920              <4> 			cmp cl,32
   868 00000242 7342                <4> 			jae .l2
   869                              <4> 						
   870 00000244 59                  <4> 			pop cx
   871                              <4> 			stkopen 9
   872 00000245 83EC09              <5>  sub word sp, %1
   873 00000248 54                  <5>  push sp
   874 00000249 5D                  <5>  pop bp
   875 0000024A 8B460B              <4> 			mov ax,[bp+0x0B]
   876 0000024D 894600              <4> 			mov word [bp+0], ax
   877 00000250 8B460D              <4> 			mov ax,[bp+0x0D]
   878 00000253 894602              <4> 			mov word [bp+2], ax
   879 00000256 8B4617              <4> 			mov ax,[bp+0x17]
   880 00000259 894604              <4> 			mov word [bp+4], ax
   881 0000025C 8B4619              <4> 			mov ax,[bp+0x19]
   882 0000025F 894606              <4> 			mov word [bp+6], ax
   883 00000262 884E08              <4> 			mov byte [bp+8], cl
   884 00000265 E8AD02              <4> 			call proc_calc_prox_dividendo
   885 00000268 89E0                <4> 			mov ax,sp
   886 0000026A 89C5                <4> 			mov bp,ax
   887 0000026C 8B4604              <4> 			mov word ax,[bp+4]
   888 0000026F 8B5E06              <4> 			mov word bx,[bp+6]
   889 00000272 8A4E08              <4> 			mov byte cl,[bp+8] 
   890                              <4> 			stkclose 9
   891 00000275 83C409              <5>  add word sp, %1
   892 00000278 89E2                <4> 			mov dx,sp
   893 0000027A 89D5                <4> 			mov bp,dx
   894 0000027C 89460E              <4> 			mov [bp+0x0E],ax
   895 0000027F 895E10              <4> 			mov [bp+0x10],bx
   896 00000282 51                  <4> 			push cx
   897 00000283 E93DFF              <4> 			jmp .l1
   898                              <4> 		.l2:	
   899 00000286 59                  <4> 		pop cx
   900                              <4> 			
   901 00000287 EB16                <4> 		jmp .enddiv
   902                              <4> 	.qzero:
   903 00000289 C7460A0000          <4> 		mov word [bp+0x0A], 0
   904 0000028E C7460C0000          <4> 		mov word [bp+0x0C], 0
   905 00000293 8B4602              <4> 		mov ax,[bp+2]
   906 00000296 89460E              <4> 		mov word [bp+0x0E], ax
   907 00000299 8B4604              <4> 		mov ax,[bp+4]
   908 0000029C 894610              <4> 		mov word [bp+0x10], ax	
   909                              <4> 	.enddiv:
   910 0000029F C6461200            <4> 		mov byte [bp+0x12], 0
   911 000002A3 EB04                <4> 		jmp .end
   912                              <4> 	.divbyzero:
   913 000002A5 C6461201            <4> 		mov byte [bp+0x12], 1						
   914                              <4> 	.end:		
   915                              <4> 			
   916 000002A9 C3                  <4> 	ret
   917                              <4> 		
   918                              <4> proc_mul32:
   919 000002AA 89E0                <4> 	mov ax,sp
   920 000002AC 89C5                <4> 	mov bp,ax
   921                              <4> 	
   922 000002AE 31D2                <4> 	xor dx,dx
   923 000002B0 8B4604              <4> 	mov ax,[bp+4]
   924 000002B3 F76608              <4> 	mul word [bp+8]
   925                              <4> 	
   926 000002B6 89560A              <4> 	mov word [bp+0x0A], dx
   927 000002B9 89460C              <4> 	mov word [bp+0x0C], ax	
   928                              <4> 	
   929 000002BC 31D2                <4> 	xor dx,dx
   930 000002BE 8B4604              <4> 	mov ax,[bp+4]
   931 000002C1 F76606              <4> 	mul word [bp+6]
   932                              <4> 		
   933 000002C4 01460A              <4> 	add word [bp+0x0A],ax
   934                              <4> 	
   935 000002C7 31D2                <4> 	xor dx,dx
   936 000002C9 8B4602              <4> 	mov ax,[bp+2]
   937 000002CC F76608              <4> 	mul word [bp+8]
   938                              <4> 	
   939 000002CF 01460A              <4> 	add word [bp+0x0A],ax
   940                              <4> 	
   941 000002D2 C3                  <4> 	ret
   942                              <4> 
   943                              <4> proc_add32:
   944 000002D3 89E0                <4> 	mov ax,sp
   945 000002D5 89C5                <4> 	mov bp,ax
   946                              <4> 	
   947 000002D7 8B4602              <4> 	mov ax,[bp+2]
   948 000002DA 8B5E04              <4> 	mov bx,[bp+4]
   949 000002DD 8B4E06              <4> 	mov cx,[bp+6]
   950 000002E0 8B5608              <4> 	mov dx,[bp+8]
   951                              <4> 	
   952 000002E3 01D3                <4> 	add bx,dx
   953 000002E5 11C8                <4> 	adc ax,cx
   954                              <4> 	
   955 000002E7 89460A              <4> 	mov [bp+0x0A],ax
   956 000002EA 895E0C              <4> 	mov [bp+0x0C],bx	
   957                              <4> 	
   958 000002ED C3                  <4> 	ret
   959                              <4> 	
   960                              <4> proc_sub32:
   961 000002EE 89E0                <4> 	mov ax,sp
   962 000002F0 89C5                <4> 	mov bp,ax
   963                              <4> 	
   964 000002F2 8B4602              <4> 	mov ax,[bp+2]
   965 000002F5 8B5E04              <4> 	mov bx,[bp+4]
   966 000002F8 8B4E06              <4> 	mov cx,[bp+6]
   967 000002FB 8B5608              <4> 	mov dx,[bp+8]
   968                              <4> 	
   969 000002FE 29D3                <4> 	sub bx,dx
   970 00000300 19C8                <4> 	sbb ax,cx
   971                              <4> 	
   972 00000302 89460A              <4> 	mov [bp+0x0A],ax
   973 00000305 895E0C              <4> 	mov [bp+0x0C],bx	
   974                              <4> 	
   975 00000308 C3                  <4> 	ret
   976                              <4> 		
   977                              <4> proc_cmp32:
   978 00000309 89E0                <4> 	mov ax,sp
   979 0000030B 89C5                <4> 	mov bp,ax		
   980                              <4> 		
   981 0000030D 8B4602              <4> 	mov ax,[bp+2]
   982 00000310 3B4606              <4> 	cmp word ax,[bp+6]
   983 00000313 7F04                <4> 	jg .above
   984 00000315 7C08                <4> 	jl .below
   985 00000317 740C                <4> 	je .equal
   986                              <4> 	.above:
   987 00000319 C6460A01            <4> 		mov byte [bp+0x0A], 00000001b
   988 0000031D EB14                <4> 		jmp .endcmp
   989                              <4> 	.below:
   990 0000031F C6460A81            <4> 		mov byte [bp+0x0A], 10000001b
   991 00000323 EB0E                <4> 		jmp .endcmp
   992                              <4> 	.equal:
   993 00000325 8B4604              <4> 		mov ax,[bp+4]
   994 00000328 3B4608              <4> 		cmp word ax,[bp+8]
   995 0000032B 7FEC                <4> 		jg .above
   996 0000032D 7CF0                <4> 		jl .below
   997 0000032F C6460A00            <4> 		mov byte [bp+0x0A], 00000000b
   998                              <4> 	.endcmp:		
   999 00000333 C3                  <4> 	ret
  1000                              <4> 
  1001                              <4> proc_shl32:
  1002 00000334 89E0                <4> 	mov ax,sp
  1003 00000336 89C5                <4> 	mov bp,ax
  1004                              <4> 	
  1005 00000338 31C0                <4> 	xor ax,ax
  1006 0000033A 8A4606              <4> 	mov byte al,[bp+6]
  1007 0000033D B310                <4> 	mov bl,10h
  1008 0000033F F6F3                <4> 	div bl
  1009                              <4> 					
  1010 00000341 3C01                <4> 	cmp al,1
  1011 00000343 7204                <4> 	jb .zero
  1012 00000345 7418                <4> 	je .one	
  1013 00000347 EB27                <4> 	jmp .above
  1014                              <4> 	.zero:	
  1015 00000349 B110                <4> 		mov cl,10h
  1016 0000034B 28E1                <4> 		sub cl,ah
  1017 0000034D 8B5E04              <4> 		mov bx,[bp+4]		
  1018 00000350 D3EB                <4> 		shr bx,cl
  1019                              <4> 		
  1020 00000352 88E1                <4> 		mov cl,ah		
  1021 00000354 D36602              <4> 		shl word [bp+2],cl
  1022 00000357 015E02              <4> 		add word [bp+2],bx				
  1023 0000035A D36604              <4> 		shl word [bp+4],cl
  1024 0000035D EB1B                <4> 		jmp .endzo
  1025                              <4> 	.one:
  1026 0000035F 88E1                <4> 		mov cl,ah
  1027 00000361 8B5E04              <4> 		mov bx, [bp+4]				
  1028 00000364 D3E3                <4> 		shl bx, cl 
  1029 00000366 895E02              <4> 		mov word [bp+2], bx
  1030 00000369 C746040000          <4> 		mov word [bp+4], 0
  1031 0000036E EB0A                <4> 		jmp .endzo
  1032                              <4> 	.above:		
  1033 00000370 C746020000          <4> 		mov word [bp+2], 0
  1034 00000375 C746040000          <4> 		mov word [bp+4], 0
  1035                              <4> 	.endzo:	
  1036                              <4> 	
  1037 0000037A C3                  <4> 	ret
  1038                              <4> 	
  1039                              <4> proc_shr32:
  1040 0000037B 89E0                <4> 	mov ax,sp
  1041 0000037D 89C5                <4> 	mov bp,ax
  1042                              <4> 	
  1043 0000037F 31C0                <4> 	xor ax,ax
  1044 00000381 8A4606              <4> 	mov byte al,[bp+6]
  1045 00000384 B310                <4> 	mov bl,10h
  1046 00000386 F6F3                <4> 	div bl
  1047                              <4> 					
  1048 00000388 3C01                <4> 	cmp al,1
  1049 0000038A 7204                <4> 	jb .zero
  1050 0000038C 7418                <4> 	je .one	
  1051 0000038E EB27                <4> 	jmp .above
  1052                              <4> 	.zero:	
  1053 00000390 B110                <4> 		mov cl,10h
  1054 00000392 28E1                <4> 		sub cl,ah		
  1055 00000394 8B5E02              <4> 		mov bx,[bp+2]		
  1056 00000397 D3E3                <4> 		shl bx,cl
  1057                              <4> 		
  1058 00000399 88E1                <4> 		mov cl,ah		
  1059 0000039B D36E02              <4> 		shr word [bp+2],cl
  1060 0000039E D36E04              <4> 		shr word [bp+4],cl
  1061 000003A1 015E04              <4> 		add word [bp+4],bx	
  1062 000003A4 EB1B                <4> 		jmp .endzo
  1063                              <4> 	.one:			
  1064 000003A6 88E1                <4> 		mov cl,ah
  1065 000003A8 8B5E02              <4> 		mov bx,[bp+2]
  1066 000003AB D3EB                <4> 		shr bx,cl
  1067 000003AD C746020000          <4> 		mov word [bp+2],0 
  1068 000003B2 895E04              <4> 		mov word [bp+4],bx
  1069 000003B5 EB0A                <4> 		jmp .endzo
  1070                              <4> 	.above:		
  1071 000003B7 C746020000          <4> 		mov word [bp+2],0
  1072 000003BC C746040000          <4> 		mov word [bp+4],0
  1073                              <4> 	.endzo:		
  1074                              <4> 
  1075 000003C1 C3                  <4> 	ret
  1076                              <4> 	
  1077                              <4> proc__lzcount16:
  1078 000003C2 89E0                <4> 	mov ax,sp
  1079 000003C4 89C5                <4> 	mov bp,ax
  1080                              <4> 	
  1081 000003C6 B100                <4> 	mov cl,0
  1082                              <4> 		
  1083 000003C8 8A6603              <4> 	mov ah, [bp+3]	
  1084 000003CB 80E4F0              <4> 	and ah,0xF0
  1085 000003CE 80FC00              <4> 	cmp ah,0
  1086 000003D1 7529                <4> 	jnz .end
  1087 000003D3 FEC1                <4> 	inc cl
  1088                              <4> 	
  1089 000003D5 8A6603              <4> 	mov ah, [bp+3]
  1090 000003D8 80E40F              <4> 	and ah,0x0F
  1091 000003DB 80FC00              <4> 	cmp ah,0
  1092 000003DE 751C                <4> 	jnz .end
  1093 000003E0 FEC1                <4> 	inc cl
  1094                              <4> 	
  1095 000003E2 8A6602              <4> 	mov ah, [bp+2]
  1096 000003E5 80E4F0              <4> 	and ah,0xF0
  1097 000003E8 80FC00              <4> 	cmp ah,0
  1098 000003EB 750F                <4> 	jnz .end
  1099 000003ED FEC1                <4> 	inc cl
  1100                              <4> 	
  1101 000003EF 8A6602              <4> 	mov ah, [bp+2]
  1102 000003F2 80E40F              <4> 	and ah,0x0F
  1103 000003F5 80FC00              <4> 	cmp ah,0
  1104 000003F8 7502                <4> 	jnz .end
  1105 000003FA FEC1                <4> 	inc cl
  1106                              <4> 		
  1107                              <4> 	.end:
  1108 000003FC 884E04              <4> 	mov byte [bp+4], cl
  1109                              <4> 	
  1110 000003FF C3                  <4> 	ret
  1111                              <4> 
  1112                              <4> proc__lzbitcount16:
  1113 00000400 89E0                <4> 	mov ax,sp
  1114 00000402 89C5                <4> 	mov bp,ax
  1115                              <4> 	
  1116 00000404 8B4602              <4> 	mov word ax,[bp+2]
  1117                              <4> 		
  1118 00000407 B100                <4> 	mov cl,0
  1119                              <4> 	.l1:
  1120 00000409 80F910              <4> 		cmp cl,16
  1121 0000040C 7310                <4> 		jae .l2
  1122                              <4> 		
  1123 0000040E 89C3                <4> 		mov bx,ax
  1124 00000410 D3E3                <4> 		shl bx,cl
  1125 00000412 C1EB0F              <4> 		shr bx,15
  1126                              <4> 		
  1127 00000415 83FB00              <4> 		cmp bx,0
  1128 00000418 7504                <4> 		jnz .l2
  1129                              <4> 		
  1130 0000041A FEC1                <4> 		inc cl		
  1131 0000041C EBEB                <4> 		jmp .l1
  1132                              <4> 	.l2:
  1133                              <4> 	
  1134 0000041E 884E04              <4> 	mov byte [bp+4], cl
  1135                              <4> 	
  1136 00000421 C3                  <4> 	ret
  1137                              <4> 	
  1138                              <4> proc__lzbitcount8:
  1139 00000422 89E0                <4> 	mov ax,sp
  1140 00000424 89C5                <4> 	mov bp,ax
  1141                              <4> 	
  1142 00000426 8A4602              <4> 	mov byte al,[bp+2]
  1143                              <4> 	
  1144 00000429 B100                <4> 	mov cl,0
  1145                              <4> 	.l1:
  1146 0000042B 80F908              <4> 		cmp cl,8
  1147 0000042E 7410                <4> 		je .l2
  1148                              <4> 		
  1149 00000430 88C3                <4> 		mov bl,al
  1150 00000432 D2E3                <4> 		shl bl,cl
  1151 00000434 C0EB07              <4> 		shr bl,7
  1152                              <4> 		
  1153 00000437 80FB00              <4> 		cmp bl,0
  1154 0000043A 7504                <4> 		jnz .l2
  1155                              <4> 		
  1156 0000043C FEC1                <4> 		inc cl		
  1157 0000043E EBEB                <4> 		jmp .l1
  1158                              <4> 	.l2:
  1159                              <4> 	
  1160 00000440 884E03              <4> 	mov byte [bp+3], cl
  1161                              <4> 		
  1162 00000443 C3                  <4> 	ret
  1163                              <4> 	
  1164                              <4> proc_calc_dividendo1:
  1165 00000444 89E0                <4> 	mov ax,sp
  1166 00000446 89C5                <4> 	mov bp,ax
  1167                              <4> 	
  1168 00000448 8B4606              <4> 	mov ax,[bp+6]
  1169 0000044B 8B5E08              <4> 	mov bx,[bp+8]
  1170 0000044E 55                  <4> 	push bp
  1171                              <4> 	__lzbitcount32 ax, bx, cl
  1172 0000044F 53                  <5>  push %2
  1173                              <5>  __lzbitcount16 %1, cl
  1174                              <6>  stkopen 3
  1175 00000450 83EC03              <7>  sub word sp, %1
  1176 00000453 54                  <7>  push sp
  1177 00000454 5D                  <7>  pop bp
  1178 00000455 894600              <6>  mov word [bp+0], %1
  1179 00000458 E8A5FF              <6>  call proc__lzbitcount16
  1180 0000045B 54                  <6>  push sp
  1181 0000045C 5D                  <6>  pop bp
  1182 0000045D 8A4E02              <6>  mov byte %2, [bp+2]
  1183                              <6>  stkclose 3
  1184 00000460 83C403              <7>  add word sp, %1
  1185 00000463 58                  <5>  pop ax
  1186 00000464 80F910              <5>  cmp cl,16
  1187 00000467 7217                <5>  jb .end
  1188 00000469 51                  <5>  push cx
  1189                              <5>  __lzbitcount16 ax, al
  1190                              <6>  stkopen 3
  1191 0000046A 83EC03              <7>  sub word sp, %1
  1192 0000046D 54                  <7>  push sp
  1193 0000046E 5D                  <7>  pop bp
  1194 0000046F 894600              <6>  mov word [bp+0], %1
  1195 00000472 E88BFF              <6>  call proc__lzbitcount16
  1196 00000475 54                  <6>  push sp
  1197 00000476 5D                  <6>  pop bp
  1198 00000477 8A4602              <6>  mov byte %2, [bp+2]
  1199                              <6>  stkclose 3
  1200 0000047A 83C403              <7>  add word sp, %1
  1201 0000047D 59                  <5>  pop cx
  1202 0000047E 00C1                <5>  add cl,al
  1203                              <5>  .end:
  1204 00000480 88C9                <5>  mov byte %3, cl
  1205 00000482 5D                  <4> 	pop bp
  1206 00000483 B320                <4> 	mov bl,32
  1207 00000485 28CB                <4> 	sub bl,cl
  1208 00000487 53                  <4> 	push bx
  1209                              <4> 		
  1210 00000488 8B4602              <4> 	mov ax,[bp+2]
  1211 0000048B 8B5604              <4> 	mov dx,[bp+4]
  1212 0000048E 55                  <4> 	push bp
  1213                              <4> 	__shr32 ax, dx, cl
  1214                              <5>  stkopen 5
  1215 0000048F 83EC05              <6>  sub word sp, %1
  1216 00000492 54                  <6>  push sp
  1217 00000493 5D                  <6>  pop bp
  1218 00000494 894600              <5>  mov word [bp+0], %1
  1219 00000497 895602              <5>  mov word [bp+2], %2
  1220 0000049A 884E04              <5>  mov byte [bp+4], %3
  1221 0000049D E8DBFE              <5>  call proc_shr32
  1222 000004A0 54                  <5>  push sp
  1223 000004A1 5D                  <5>  pop bp
  1224 000004A2 8B4600              <5>  mov word %1, [bp+0]
  1225 000004A5 8B5602              <5>  mov word %2, [bp+2]
  1226                              <5>  stkclose 5
  1227 000004A8 83C405              <6>  add word sp, %1
  1228 000004AB 5D                  <4> 	pop bp
  1229 000004AC 50                  <4> 	push ax
  1230 000004AD 52                  <4> 	push dx	
  1231                              <4> 	
  1232 000004AE 8B4E06              <4> 	mov cx,[bp+6]
  1233 000004B1 8B5E08              <4> 	mov bx,[bp+8]
  1234                              <4> 	
  1235 000004B4 55                  <4> 	push bp
  1236                              <4> 	__cmp32 ax, dx, cx, bx, cl
  1237                              <5>  stkopen 9
  1238 000004B5 83EC09              <6>  sub word sp, %1
  1239 000004B8 54                  <6>  push sp
  1240 000004B9 5D                  <6>  pop bp
  1241 000004BA 894600              <5>  mov word [bp+0], %1
  1242 000004BD 895602              <5>  mov word [bp+2], %2
  1243 000004C0 894E04              <5>  mov word [bp+4], %3
  1244 000004C3 895E06              <5>  mov word [bp+6], %4
  1245 000004C6 E840FE              <5>  call proc_cmp32
  1246 000004C9 54                  <5>  push sp
  1247 000004CA 5D                  <5>  pop bp
  1248 000004CB 8A4E08              <5>  mov byte %5, [bp+8]
  1249                              <5>  stkclose 9
  1250 000004CE 83C409              <6>  add word sp, %1
  1251 000004D1 5D                  <4> 	pop bp
  1252 000004D2 5A                  <4> 	pop dx
  1253 000004D3 58                  <4> 	pop ax
  1254 000004D4 5B                  <4> 	pop bx
  1255                              <4> 		
  1256 000004D5 80F900              <4> 	cmp cl,0
  1257 000004D8 7D2D                <4> 	jge .l1
  1258                              <4> 		stkopen 9
  1259 000004DA 83EC09              <5>  sub word sp, %1
  1260 000004DD 54                  <5>  push sp
  1261 000004DE 5D                  <5>  pop bp
  1262 000004DF 8B4E0B              <4> 		mov cx,[bp+0x0B]
  1263 000004E2 894E00              <4> 		mov word [bp+0], cx
  1264 000004E5 8B4E0D              <4> 		mov cx,[bp+0x0D]
  1265 000004E8 894E02              <4> 		mov word [bp+2], cx
  1266 000004EB 894604              <4> 		mov word [bp+4], ax
  1267 000004EE 895606              <4> 		mov word [bp+6], dx
  1268 000004F1 885E08              <4> 		mov byte [bp+8], bl
  1269 000004F4 E81E00              <4> 		call proc_calc_prox_dividendo
  1270 000004F7 89E0                <4> 		mov ax,sp
  1271 000004F9 89C5                <4> 		mov bp,ax
  1272 000004FB 8B4604              <4> 		mov word ax,[bp+4]
  1273 000004FE 8B5606              <4> 		mov word dx,[bp+6]
  1274 00000501 8A5E08              <4> 		mov byte bl,[bp+8] 
  1275                              <4> 		stkclose 9		 
  1276 00000504 83C409              <5>  add word sp, %1
  1277                              <4> 	.l1:
  1278                              <4> 	
  1279 00000507 89E1                <4> 	mov cx,sp
  1280 00000509 89CD                <4> 	mov bp,cx
  1281 0000050B 89460A              <4> 	mov word [bp+0x0A], ax
  1282 0000050E 89560C              <4> 	mov word [bp+0x0C], dx
  1283 00000511 885E0E              <4> 	mov byte [bp+0x0E], bl	 
  1284                              <4> 	
  1285 00000514 C3                  <4> 	ret
  1286                              <4> 
  1287                              <4> proc_calc_prox_dividendo:
  1288 00000515 89E0                <4> 	mov ax,sp
  1289 00000517 89C5                <4> 	mov bp,ax
  1290                              <4> 	
  1291 00000519 30E4                <4> 	xor ah,ah	
  1292 0000051B 8A460A              <4> 	mov al,[bp+0x0A]
  1293 0000051E B310                <4> 	mov bl,10h
  1294 00000520 F6F3                <4> 	div bl
  1295                              <4> 	
  1296 00000522 3C00                <4> 	cmp al,0
  1297 00000524 7402                <4> 	jz .zero
  1298 00000526 EB05                <4> 	jmp .one
  1299                              <4> 	.zero:
  1300 00000528 8B5E02              <4> 		mov bx,[bp+2]
  1301 0000052B EB03                <4> 		jmp .endcmp
  1302                              <4> 	.one:
  1303 0000052D 8B5E04              <4> 		mov bx,[bp+4]		
  1304                              <4> 	.endcmp:
  1305                              <4> 		
  1306 00000530 88E1                <4> 	mov cl,ah
  1307 00000532 D3E3                <4> 	shl bx,cl
  1308 00000534 C1EB0F              <4> 	shr bx,15
  1309                              <4> 	
  1310 00000537 8B4606              <4> 	mov ax,[bp+6]
  1311 0000053A 8B5608              <4> 	mov dx,[bp+8]
  1312 0000053D 53                  <4> 	push bx
  1313                              <4> 	__shl32 ax, dx, 1
  1314                              <5>  stkopen 5
  1315 0000053E 83EC05              <6>  sub word sp, %1
  1316 00000541 54                  <6>  push sp
  1317 00000542 5D                  <6>  pop bp
  1318 00000543 894600              <5>  mov word [bp+0], %1
  1319 00000546 895602              <5>  mov word [bp+2], %2
  1320 00000549 C6460401            <5>  mov byte [bp+4], %3
  1321 0000054D E8E4FD              <5>  call proc_shl32
  1322 00000550 54                  <5>  push sp
  1323 00000551 5D                  <5>  pop bp
  1324 00000552 8B4600              <5>  mov word %1, [bp+0]
  1325 00000555 8B5602              <5>  mov word %2, [bp+2]
  1326                              <5>  stkclose 5
  1327 00000558 83C405              <6>  add word sp, %1
  1328 0000055B 5B                  <4> 	pop bx
  1329                              <4> 	
  1330 0000055C 01DA                <4> 	add dx,bx
  1331 0000055E 83D000              <4> 	adc ax,0
  1332                              <4> 
  1333 00000561 89E1                <4> 	mov cx,sp
  1334 00000563 89CD                <4> 	mov bp,cx	
  1335 00000565 894606              <4> 	mov [bp+6],ax
  1336 00000568 895608              <4> 	mov [bp+8],dx
  1337                              <4> 	
  1338 0000056B FE460A              <4> 	inc byte [bp+0x0A]
  1339                              <4> 	
  1340 0000056E C3                  <4> 	ret
  1341                              <4> 	
  1342                              <4> %endif
  1343                              <3> 	%include "lib/system.mac"
  1344                              <4>  
  1345                              <4> %ifndef SYSTEM_MAC
  1346                              <4>  	%define SYSTEM_MAC
  1347                              <4>  	
  1348                              <4> 	%ifndef TRUE
  1349                              <4> 		%define TRUE 01h
  1350                              <4> 	%endif
  1351                              <4> 	%ifndef FALSE
  1352                              <4> 		%define FALSE 00h
  1353                              <4> 	%endif
  1354                              <4> 	
  1355                              <4> %macro vlodsb 3
  1356                              <4> 	vlodsb cs, %1, %2, %3
  1357                              <4> %endmacro
  1358                              <4> 
  1359                              <4> %macro vstosb 3
  1360                              <4> 	vstosb cs, %1, %2, %3
  1361                              <4> %endmacro
  1362                              <4> 	 	
  1363                              <4> %macro int16toreg 2
  1364                              <4> 	int16toreg cs, %1, %2
  1365                              <4> %endmacro
  1366                              <4> 
  1367                              <4> %macro regtoint16 2
  1368                              <4> 	regtoint16 %1, cs, %2
  1369                              <4> %endmacro
  1370                              <4> 
  1371                              <4> %macro vstosb 4
  1372                              <4> 	push %1
  1373                              <4> 	pop ds
  1374                              <4> 	mov si,%2
  1375                              <4> 	add si,%3
  1376                              <4> 	mov byte [si],%4	
  1377                              <4> %endmacro
  1378                              <4> 
  1379                              <4> %macro vlodsb 4
  1380                              <4> 	push %1
  1381                              <4> 	pop ds
  1382                              <4> 	mov si,%2
  1383                              <4> 	add si,%3
  1384                              <4> 	mov byte %4,[si]	
  1385                              <4> %endmacro 	 
  1386                              <4> 
  1387                              <4> %macro int16toreg 3
  1388                              <4> 	push %2
  1389                              <4> 	push %1
  1390                              <4> 	pop ds
  1391                              <4> 	pop si
  1392                              <4> 	mov word %3,[si]	
  1393                              <4> %endmacro
  1394                              <4> 
  1395                              <4> %macro regtoint16 3
  1396                              <4> 	push %3
  1397                              <4> 	push %2
  1398                              <4> 	pop ds
  1399                              <4> 	pop si
  1400                              <4> 	mov word [si],%1	
  1401                              <4> %endmacro
  1402                              <4> 
  1403                              <4> %macro mov32 2
  1404                              <4> 	mov32 cs, %1, cs, %2
  1405                              <4> %endmacro
  1406                              <4> 
  1407                              <4> %macro mov16 2
  1408                              <4> 	mov16 cs, %1, cs, %2
  1409                              <4> %endmacro
  1410                              <4> 
  1411                              <4> %macro mov32 4
  1412                              <4> 	mov ax,%3
  1413                              <4> 	mov ds,ax
  1414                              <4> 	mov cx,[%4+2]
  1415                              <4> 	mov dx,[%4]
  1416                              <4> 	mov ax,%1
  1417                              <4> 	mov ds,ax
  1418                              <4> 	mov [%2+2],cx
  1419                              <4> 	mov [%2],dx
  1420                              <4> %endmacro
  1421                              <4> 
  1422                              <4> %macro mov16 4
  1423                              <4> 	mov ax,%3
  1424                              <4> 	mov ds,ax
  1425                              <4> 	mov bx,[%4]
  1426                              <4> 	mov ax,%1
  1427                              <4> 	mov ds,ax
  1428                              <4> 	mov [%2],bx
  1429                              <4> %endmacro
  1430                              <4>  	 	
  1431                              <4> %macro mformat 4
  1432                              <4> 	stkopen 8
  1433                              <4> 	mov word [ bp + 0 ], %1
  1434                              <4> 	mov word [ bp + 2 ], %2
  1435                              <4> 	mov word [ bp + 4 ], %3
  1436                              <4> 	mov word [ bp + 6 ], %4
  1437                              <4> 	call kernel_segment:mformat
  1438                              <4> 	stkclose 8
  1439                              <4> %endmacro
  1440                              <4> 
  1441                              <4> %macro malloc 6
  1442                              <4> 	stkopen 0Bh
  1443                              <4> 	mov word [ bp + 4 ], %3
  1444                              <4> 	mov word [ bp + 6 ], %4
  1445                              <4> 	mov word [ bp + 8 ], %5	
  1446                              <4> 	call kernel_segment:malloc
  1447                              <4> 	push sp
  1448                              <4> 	pop bp
  1449                              <4> 	mov word %1, [ bp ]
  1450                              <4> 	mov word %2, [ bp + 2 ]
  1451                              <4> 	mov byte %6, [ bp + 0x0A ]
  1452                              <4> 	stkclose 0Bh
  1453                              <4> %endmacro 	
  1454                              <4> 
  1455                              <4> %macro laddr 2
  1456                              <4> 	laddr %1, %2, %1, %2
  1457                              <4> %endmacro
  1458                              <4> 
  1459                              <4> %macro faddr 2
  1460                              <4> 	faddr %1, %2, %1, %2
  1461                              <4> %endmacro
  1462                              <4>  	
  1463                              <4> %macro laddr 4
  1464                              <4> 	stkopen 8
  1465                              <4> 	mov word [ bp + 4 ], %3
  1466                              <4> 	mov word [ bp + 6 ], %4	
  1467                              <4> 	call kernel_segment:laddr
  1468                              <4> 	push sp
  1469                              <4> 	pop bp
  1470                              <4> 	mov word %1, [ bp + 0 ]
  1471                              <4> 	mov word %2, [ bp + 2 ]	
  1472                              <4> 	stkclose 8
  1473                              <4> %endmacro
  1474                              <4> 
  1475                              <4> %macro faddr 4
  1476                              <4> 	stkopen 8
  1477                              <4> 	mov word [ bp + 4 ], %3
  1478                              <4> 	mov word [ bp + 6 ], %4	
  1479                              <4> 	call kernel_segment:faddr
  1480                              <4> 	push sp
  1481                              <4> 	pop bp
  1482                              <4> 	mov word %1, [ bp + 0 ]
  1483                              <4> 	mov word %2, [ bp + 2 ]	
  1484                              <4> 	stkclose 8
  1485                              <4> %endmacro	
  1486                              <4>  
  1487                              <4> 
  1488                              <4> %macro stkopen 1		
  1489                              <4> 	sub word sp, %1
  1490                              <4> 	push sp
  1491                              <4> 	pop bp
  1492                              <4> %endmacro
  1493                              <4> 
  1494                              <4> %macro stkclose 1
  1495                              <4> 	add word sp, %1
  1496                              <4> %endmacro
  1497                              <4> 
  1498                              <4> %macro stkload 1-* 	
  1499                              <4>  	%rep %0
  1500                              <4>  	 	%rotate -1
  1501                              <4>  		pop %1
  1502                              <4>  	%endrep
  1503                              <4>  	%rep %0
  1504                              <4>  		push %1
  1505                              <4>  		%rotate 1
  1506                              <4>  	%endrep
  1507                              <4> %endmacro
  1508                              <4> 
  1509                              <4> %macro stkpush 1-* 	
  1510                              <4>  	%rep %0
  1511                              <4>  		push %1
  1512                              <4>  		%rotate 1
  1513                              <4>  	%endrep 	
  1514                              <4> %endmacro
  1515                              <4>  
  1516                              <4> %macro stkpop 1-*
  1517                              <4>  	%rep %0
  1518                              <4>  	 	%rotate -1
  1519                              <4>  		pop %1
  1520                              <4>  	%endrep 	 	
  1521                              <4> %endmacro
  1522                              <4> 
  1523                              <4> %endif 
  1524                              <3> 
  1525                              <3> %macro chgsig 1
  1526                              <3> 	chgsig cs, %1
  1527                              <3> %endmacro
  1528                              <3> 
  1529                              <3> %macro cmp16 3
  1530                              <3> 	cmp16 cs, %1, cs, %2, %3
  1531                              <3> %endmacro
  1532                              <3> 
  1533                              <3> %macro mul16 2
  1534                              <3> 	mul16 cs, %1, cs, %2
  1535                              <3> %endmacro
  1536                              <3> 
  1537                              <3> %macro div16 2
  1538                              <3> 	div16 cs, %1, cs, %2
  1539                              <3> %endmacro
  1540                              <3> 
  1541                              <3> %macro mod16 2
  1542                              <3> 	mod16 cs, %1, cs, %2
  1543                              <3> %endmacro
  1544                              <3> 
  1545                              <3> %macro inc16 1
  1546                              <3> 	inc16 cs, %1
  1547                              <3> %endmacro
  1548                              <3> 
  1549                              <3> %macro dec16 1
  1550                              <3> 	dec16 cs, %1
  1551                              <3> %endmacro
  1552                              <3> 
  1553                              <3> %macro add16 2
  1554                              <3> 	add16 cs, %1, cs, %2
  1555                              <3> %endmacro
  1556                              <3> 
  1557                              <3> %macro sub16 2
  1558                              <3> 	sub16 cs, %1, cs, %2
  1559                              <3> %endmacro
  1560                              <3> 
  1561                              <3> %macro int32to16 2
  1562                              <3> 	int32to16 cs, %1, %2
  1563                              <3> %endmacro
  1564                              <3> 
  1565                              <3> %macro int16to32 2
  1566                              <3> 	int16to32 %1, cs, %2
  1567                              <3> %endmacro
  1568                              <3> 
  1569                              <3> %macro setsig 1
  1570                              <3> 	setsig cs, %1
  1571                              <3> %endmacro
  1572                              <3> 
  1573                              <3> %macro clrsig 1
  1574                              <3> 	clrsig cs, %1
  1575                              <3> %endmacro
  1576                              <3> 
  1577                              <3> %macro idiv32 5
  1578                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  1579                              <3> %endmacro
  1580                              <3> 
  1581                              <3> %macro imul32 3
  1582                              <3> 	imul32 cs, %1, cs, %2, cs, %3
  1583                              <3> %endmacro
  1584                              <3> 
  1585                              <3> %macro div32 5
  1586                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  1587                              <3> %endmacro
  1588                              <3> 
  1589                              <3> %macro mul32 3
  1590                              <3> 	mul32 cs, %1, cs, %2, cs, %3
  1591                              <3> %endmacro
  1592                              <3> 	
  1593                              <3> %macro add32 3
  1594                              <3> 	add32 cs, %1, cs, %2, cs, %3
  1595                              <3> %endmacro
  1596                              <3> 
  1597                              <3> %macro sub32 3
  1598                              <3> 	sub32 cs, %1, cs, %2, cs, %3
  1599                              <3> %endmacro
  1600                              <3> 
  1601                              <3> %macro int32to16 3
  1602                              <3> 	stkopen 0x06
  1603                              <3> 	mov ax,%1
  1604                              <3> 	mov ds,ax
  1605                              <3> 	mov ax,[%2+2]
  1606                              <3> 	mov word [bp+0], ax
  1607                              <3> 	mov ax,[%2]	
  1608                              <3> 	mov word [bp+2], ax
  1609                              <3> 	call proc_int32to16
  1610                              <3> 	mov ax,sp
  1611                              <3> 	mov bp,ax
  1612                              <3> 	mov ax,[bp+4]
  1613                              <3> 	mov word %3, ax	
  1614                              <3> 	stkclose 0x06
  1615                              <3> %endmacro
  1616                              <3> 
  1617                              <3> %macro int16to32 3
  1618                              <3> 	stkopen 0x06
  1619                              <3> 	mov word [bp+0], %1	
  1620                              <3> 	call proc_int16to32
  1621                              <3> 	mov ax,sp
  1622                              <3> 	mov bp,ax
  1623                              <3> 	mov ax,%2
  1624                              <3> 	mov ds,ax
  1625                              <3> 	mov ax,[bp+2]
  1626                              <3> 	mov [%3+2],ax
  1627                              <3> 	mov ax,[bp+4]
  1628                              <3> 	mov [%3],ax	
  1629                              <3> 	stkclose 0x06
  1630                              <3> %endmacro
  1631                              <3> 
  1632                              <3> %macro setsig 2
  1633                              <3> 	stkopen 0x02
  1634                              <3> 	mov ax,%1
  1635                              <3> 	mov ds,ax
  1636                              <3> 	mov ax,[%2+2]
  1637                              <3> 	mov word [bp+0], ax
  1638                              <3> 	call proc_setsig
  1639                              <3> 	mov ax,sp
  1640                              <3> 	mov bp,ax
  1641                              <3> 	mov ax,%1
  1642                              <3> 	mov ds,ax
  1643                              <3> 	mov ax,[bp+0]
  1644                              <3> 	mov word [%2+2], ax
  1645                              <3> 	stkclose 0x02
  1646                              <3> %endmacro
  1647                              <3> 
  1648                              <3> %macro clrsig 2
  1649                              <3> 	stkopen 0x02
  1650                              <3> 	mov ax,%1
  1651                              <3> 	mov ds,ax
  1652                              <3> 	mov ax,[%2+2]
  1653                              <3> 	mov word [bp+0], ax
  1654                              <3> 	call proc_clrsig
  1655                              <3> 	mov ax,sp
  1656                              <3> 	mov bp,ax
  1657                              <3> 	mov ax,%1
  1658                              <3> 	mov ds,ax
  1659                              <3> 	mov ax,[bp+0]
  1660                              <3> 	mov word [%2+2], ax
  1661                              <3> 	stkclose 0x02
  1662                              <3> %endmacro
  1663                              <3> 
  1664                              <3> %macro div32 10
  1665                              <3> 	stkopen 0x11
  1666                              <3> 	mov ax,%1
  1667                              <3> 	mov ds,ax
  1668                              <3> 	mov ax,[%2+2]
  1669                              <3> 	mov word [bp+0], ax
  1670                              <3> 	mov ax,[%2]
  1671                              <3> 	mov word [bp+2], ax
  1672                              <3> 	mov ax,%3
  1673                              <3> 	mov ds,ax
  1674                              <3> 	mov ax,[%4+2]
  1675                              <3> 	mov word [bp+4], ax
  1676                              <3> 	mov ax,[%4]
  1677                              <3> 	mov word [bp+6], ax
  1678                              <3> 	call proc_div32
  1679                              <3> 	mov ax,sp
  1680                              <3> 	mov bp,ax
  1681                              <3> 	mov ax,%5
  1682                              <3> 	mov ds,ax
  1683                              <3> 	mov word ax, [bp+8]
  1684                              <3> 	mov word [%6+2], ax
  1685                              <3> 	mov word ax, [bp+0x0A]
  1686                              <3> 	mov word [%6], ax
  1687                              <3> 	mov ax,%7
  1688                              <3> 	mov ds,ax
  1689                              <3> 	mov word ax,[bp+0x0C]
  1690                              <3> 	mov word [%8+2],ax
  1691                              <3> 	mov word ax,[bp+0x0E]
  1692                              <3> 	mov word [%8],ax
  1693                              <3> 	mov ax,%9
  1694                              <3> 	mov ds,ax
  1695                              <3> 	mov byte al,[bp+0x10]
  1696                              <3> 	mov byte [%10],al
  1697                              <3> 	stkclose 0x11
  1698                              <3> %endmacro
  1699                              <3> 	
  1700                              <3> %macro mul32 6
  1701                              <3> 	stkopen 0x0C
  1702                              <3> 	mov ax,%1
  1703                              <3> 	mov ds,ax
  1704                              <3> 	mov ax,[%2+2]
  1705                              <3> 	mov word [bp+0], ax
  1706                              <3> 	mov ax,[%2]
  1707                              <3> 	mov word [bp+2], ax
  1708                              <3> 	mov ax,%3
  1709                              <3> 	mov ds,ax
  1710                              <3> 	mov ax,[%4+2]
  1711                              <3> 	mov word [bp+4], ax
  1712                              <3> 	mov ax,[%4]
  1713                              <3> 	mov word [bp+6], ax
  1714                              <3> 	call proc_mul32
  1715                              <3> 	mov ax,sp
  1716                              <3> 	mov bp,ax
  1717                              <3> 	mov ax,%5
  1718                              <3> 	mov ds,ax
  1719                              <3> 	mov word ax, [bp+8]
  1720                              <3> 	mov word [%6+2], ax
  1721                              <3> 	mov word ax, [bp+0x0A]
  1722                              <3> 	mov word [%6], ax
  1723                              <3> 	stkclose 0x0C
  1724                              <3> %endmacro	
  1725                              <3> 	
  1726                              <3> %macro add32 6
  1727                              <3> 	stkopen 0x0C
  1728                              <3> 	mov ax,%1
  1729                              <3> 	mov ds,ax
  1730                              <3> 	mov ax,[%2+2]
  1731                              <3> 	mov word [bp+0], ax
  1732                              <3> 	mov ax,[%2]
  1733                              <3> 	mov word [bp+2], ax
  1734                              <3> 	mov ax,%3
  1735                              <3> 	mov ds,ax
  1736                              <3> 	mov ax,[%4+2]
  1737                              <3> 	mov word [bp+4], ax
  1738                              <3> 	mov ax,[%4]
  1739                              <3> 	mov word [bp+6], ax
  1740                              <3> 	call proc_add32
  1741                              <3> 	mov ax,sp
  1742                              <3> 	mov bp,ax
  1743                              <3> 	mov ax,%5
  1744                              <3> 	mov ds,ax
  1745                              <3> 	mov word ax, [bp+8]
  1746                              <3> 	mov word [%6+2], ax
  1747                              <3> 	mov word ax, [bp+0x0A]
  1748                              <3> 	mov word [%6], ax
  1749                              <3> 	stkclose 0x0C
  1750                              <3> %endmacro
  1751                              <3> 
  1752                              <3> %macro sub32 6
  1753                              <3> 	stkopen 0x0C
  1754                              <3> 	mov ax,%1
  1755                              <3> 	mov ds,ax
  1756                              <3> 	mov ax,[%2+2]
  1757                              <3> 	mov word [bp+0], ax
  1758                              <3> 	mov ax,[%2]
  1759                              <3> 	mov word [bp+2], ax
  1760                              <3> 	mov ax,%3
  1761                              <3> 	mov ds,ax
  1762                              <3> 	mov ax,[%4+2]
  1763                              <3> 	mov word [bp+4], ax
  1764                              <3> 	mov ax,[%4]
  1765                              <3> 	mov word [bp+6], ax
  1766                              <3> 	call proc_sub32
  1767                              <3> 	mov ax,sp
  1768                              <3> 	mov bp,ax
  1769                              <3> 	mov ax,%5
  1770                              <3> 	mov ds,ax
  1771                              <3> 	mov word ax, [bp+8]
  1772                              <3> 	mov word [%6+2], ax
  1773                              <3> 	mov word ax, [bp+0x0A]
  1774                              <3> 	mov word [%6], ax
  1775                              <3> 	stkclose 0x0C
  1776                              <3> %endmacro
  1777                              <3> 
  1778                              <3> %macro idiv32 10
  1779                              <3> 	stkopen 0x11
  1780                              <3> 	mov ax,%1
  1781                              <3> 	mov ds,ax
  1782                              <3> 	mov ax,[%2+2]
  1783                              <3> 	mov word [bp+0], ax
  1784                              <3> 	mov ax,[%2]
  1785                              <3> 	mov word [bp+2], ax
  1786                              <3> 	mov ax,%3
  1787                              <3> 	mov ds,ax
  1788                              <3> 	mov ax,[%4+2]
  1789                              <3> 	mov word [bp+4], ax
  1790                              <3> 	mov ax,[%4]
  1791                              <3> 	mov word [bp+6], ax
  1792                              <3> 	call proc_idiv32
  1793                              <3> 	mov ax,sp
  1794                              <3> 	mov bp,ax
  1795                              <3> 	mov ax,%5
  1796                              <3> 	mov ds,ax
  1797                              <3> 	mov word ax, [bp+8]
  1798                              <3> 	mov word [%6+2], ax
  1799                              <3> 	mov word ax, [bp+0x0A]
  1800                              <3> 	mov word [%6], ax
  1801                              <3> 	mov ax,%7
  1802                              <3> 	mov ds,ax
  1803                              <3> 	mov word ax,[bp+0x0C]
  1804                              <3> 	mov word [%8+2],ax
  1805                              <3> 	mov word ax,[bp+0x0E]
  1806                              <3> 	mov word [%8],ax
  1807                              <3> 	mov ax,%9
  1808                              <3> 	mov ds,ax
  1809                              <3> 	mov byte al,[bp+0x10]
  1810                              <3> 	mov byte [%10],al
  1811                              <3> 	stkclose 0x11
  1812                              <3> %endmacro
  1813                              <3> 
  1814                              <3> %macro imul32 6
  1815                              <3> 	stkopen 0x0C
  1816                              <3> 	mov ax,%1
  1817                              <3> 	mov ds,ax
  1818                              <3> 	mov ax,[%2+2]
  1819                              <3> 	mov word [bp+0], ax
  1820                              <3> 	mov ax,[%2]
  1821                              <3> 	mov word [bp+2], ax
  1822                              <3> 	mov ax,%3
  1823                              <3> 	mov ds,ax
  1824                              <3> 	mov ax,[%4+2]
  1825                              <3> 	mov word [bp+4], ax
  1826                              <3> 	mov ax,[%4]
  1827                              <3> 	mov word [bp+6], ax
  1828                              <3> 	call proc_imul32
  1829                              <3> 	mov ax,sp
  1830                              <3> 	mov bp,ax
  1831                              <3> 	mov ax,%5
  1832                              <3> 	mov ds,ax
  1833                              <3> 	mov word ax, [bp+8]
  1834                              <3> 	mov word [%6+2], ax
  1835                              <3> 	mov word ax, [bp+0x0A]
  1836                              <3> 	mov word [%6], ax
  1837                              <3> 	stkclose 0x0C
  1838                              <3> %endmacro
  1839                              <3> 	
  1840                              <3> %macro cmp32 3
  1841                              <3> 	cmp32 cs, %1, cs, %2, %3
  1842                              <3> %endmacro	
  1843                              <3> 	
  1844                              <3> %macro cmp32 5
  1845                              <3> 	stkopen 9
  1846                              <3> 	mov ax,%1
  1847                              <3> 	mov ds,ax
  1848                              <3> 	mov word ax,[%2+2]
  1849                              <3> 	mov word [bp+0], ax
  1850                              <3> 	mov word ax,[%2]
  1851                              <3> 	mov word [bp+2], ax	
  1852                              <3> 	mov ax,%3
  1853                              <3> 	mov ds,ax
  1854                              <3> 	mov word ax,[%4+2]
  1855                              <3> 	mov word [bp+4], ax
  1856                              <3> 	mov word ax,[%4]
  1857                              <3> 	mov word [bp+6], ax	
  1858                              <3> 	call proc_cmp32
  1859                              <3> 	mov ax,sp
  1860                              <3> 	mov bp,ax
  1861                              <3> 	mov al,[bp+8]
  1862                              <3> 	mov byte %5,al
  1863                              <3> 	stkclose 9
  1864                              <3> %endmacro
  1865                              <3> 	
  1866                              <3> %macro shl32 2
  1867                              <3> 	shl32 cs, %1, %2
  1868                              <3> %endmacro	
  1869                              <3> 	
  1870                              <3> %macro shl32 3
  1871                              <3> 	stkopen 5
  1872                              <3> 	mov ax,%1
  1873                              <3> 	mov ds,ax
  1874                              <3> 	mov word ax,[%2+2]
  1875                              <3> 	mov word [bp+0], ax
  1876                              <3> 	mov word ax,[%2]
  1877                              <3> 	mov word [bp+2], ax
  1878                              <3> 	mov byte al, %3
  1879                              <3> 	mov byte [bp+4], al 
  1880                              <3> 	call proc_shl32
  1881                              <3> 	mov ax,sp
  1882                              <3> 	mov bp,ax
  1883                              <3> 	mov ax,%1
  1884                              <3> 	mov ds,ax
  1885                              <3> 	mov ax,[bp+0]
  1886                              <3> 	mov word [%2+2],ax
  1887                              <3> 	mov ax,[bp+2]
  1888                              <3> 	mov word [%2],ax
  1889                              <3> 	stkclose 5
  1890                              <3> %endmacro
  1891                              <3> 
  1892                              <3> 
  1893                              <3> %macro shr32 2
  1894                              <3> 	shr32 cs, %1, %2
  1895                              <3> %endmacro	
  1896                              <3> 	
  1897                              <3> %macro shr32 3
  1898                              <3> 	stkopen 5
  1899                              <3> 	mov ax,%1
  1900                              <3> 	mov ds,ax
  1901                              <3> 	mov word ax,[%2+2]
  1902                              <3> 	mov word [bp+0], ax
  1903                              <3> 	mov word ax,[%2]
  1904                              <3> 	mov word [bp+2], ax
  1905                              <3> 	mov byte al, %3
  1906                              <3> 	mov byte [bp+4], al 
  1907                              <3> 	call proc_shr32
  1908                              <3> 	mov ax,sp
  1909                              <3> 	mov bp,ax
  1910                              <3> 	mov ax,%1
  1911                              <3> 	mov ds,ax
  1912                              <3> 	mov ax,[bp+0]
  1913                              <3> 	mov word [%2+2],ax
  1914                              <3> 	mov ax,[bp+2]
  1915                              <3> 	mov word [%2],ax
  1916                              <3> 	stkclose 5
  1917                              <3> %endmacro
  1918                              <3> 
  1919                              <3> %macro inc16 2
  1920                              <3> 	mov ax,%1
  1921                              <3> 	mov ds,ax
  1922                              <3> 	inc word [%2]
  1923                              <3> %endmacro
  1924                              <3> 
  1925                              <3> %macro dec16 2
  1926                              <3> 	mov ax,%1
  1927                              <3> 	mov ds,ax
  1928                              <3> 	dec word [%2]
  1929                              <3> %endmacro
  1930                              <3> 
  1931                              <3> %macro add16 4	
  1932                              <3> 	mov ax,%3
  1933                              <3> 	mov ds,ax
  1934                              <3> 	mov bx,[%4]	
  1935                              <3> 	mov ax,%1
  1936                              <3> 	mov ds,ax	
  1937                              <3> 	add [%2],bx
  1938                              <3> %endmacro
  1939                              <3> 
  1940                              <3> %macro sub16 4
  1941                              <3> 	mov ax,%3
  1942                              <3> 	mov ds,ax
  1943                              <3> 	mov bx,[%4]
  1944                              <3> 	mov ax,%1
  1945                              <3> 	mov ds,ax
  1946                              <3> 	sub [%2],bx
  1947                              <3> %endmacro
  1948                              <3> 
  1949                              <3> %macro mul16 4
  1950                              <3> 	mov ax,%1
  1951                              <3> 	mov ds,ax
  1952                              <3> 	mov bx,[%2]
  1953                              <3> 	mov ax,%3
  1954                              <3> 	mov ds,ax
  1955                              <3> 	mov cx,[%4]
  1956                              <3> 	
  1957                              <3> 	mov ax,bx
  1958                              <3> 	imul cx
  1959                              <3> 	
  1960                              <3> 	mov dx,%1
  1961                              <3> 	mov ds,dx
  1962                              <3> 	mov [%2],ax
  1963                              <3> %endmacro
  1964                              <3> 
  1965                              <3> %macro div16 4
  1966                              <3> 	mov ax,%1
  1967                              <3> 	mov ds,ax
  1968                              <3> 	mov bx,[%2]
  1969                              <3> 	mov ax,%3
  1970                              <3> 	mov ds,ax
  1971                              <3> 	mov cx,[%4]
  1972                              <3> 	
  1973                              <3> 	xor dx,dx
  1974                              <3> 	mov ax,bx
  1975                              <3> 	idiv cx
  1976                              <3> 	
  1977                              <3> 	mov dx,%1
  1978                              <3> 	mov ds,dx
  1979                              <3> 	mov [%2],ax
  1980                              <3> %endmacro
  1981                              <3> 
  1982                              <3> 
  1983                              <3> %macro mod16 4
  1984                              <3> 	mov ax,%1
  1985                              <3> 	mov ds,ax
  1986                              <3> 	mov bx,[%2]
  1987                              <3> 	mov ax,%3
  1988                              <3> 	mov ds,ax
  1989                              <3> 	mov cx,[%4]
  1990                              <3> 	
  1991                              <3> 	xor dx,dx
  1992                              <3> 	mov ax,bx
  1993                              <3> 	idiv cx
  1994                              <3> 	
  1995                              <3> 	mov bx,%1
  1996                              <3> 	mov ds,bx
  1997                              <3> 	mov [%2],dx
  1998                              <3> %endmacro
  1999                              <3> 
  2000                              <3> %macro cmp16 5
  2001                              <3> 	mov ax,%1
  2002                              <3> 	mov ds,ax
  2003                              <3> 	mov bx,[%2]
  2004                              <3> 	mov ax,%3
  2005                              <3> 	mov ds,ax
  2006                              <3> 	mov	cx,[%4]
  2007                              <3> 	
  2008                              <3> 	cmp bx,cx
  2009                              <3> 	jg %%above
  2010                              <3> 	jl %%below
  2011                              <3> 		mov byte %5, 0
  2012                              <3> 		jmp %%endcmp
  2013                              <3> 	%%above:
  2014                              <3> 		mov byte %5, 1
  2015                              <3> 		jmp %%endcmp
  2016                              <3> 	%%below:
  2017                              <3> 		mov byte %5, -1
  2018                              <3> 	%%endcmp:
  2019                              <3> %endmacro
  2020                              <3> 
  2021                              <3> %macro chgsig 2
  2022                              <3> 	mov ax,%1
  2023                              <3> 	mov ds,ax
  2024                              <3> 	mov ax,[%2]
  2025                              <3> 	mov bx,0xFFFF
  2026                              <3> 	sub bx,ax
  2027                              <3> 	inc bx
  2028                              <3> 	mov [%2],bx
  2029                              <3> %endmacro
  2030                              <3> 	
  2031                              <3> %endif
  2032                              <2> 	%include "lib/float.mac"
  2033                              <3> 
  2034                              <3> %ifndef FLOAT_MAC
  2035                              <3> 	%define FLOAT_MAC
  2036                              <3> 	
  2037                              <3> 	%include "lib/float.asm"
  2038                              <4> 
  2039                              <4> %ifndef FLOAT_ASM
  2040                              <4> 	%define FLOAT_ASM
  2041                              <4> 	
  2042                              <4> 	%include "lib/system.mac"
  2043                              <5>  
  2044                              <5> %ifndef SYSTEM_MAC
  2045                              <5>  	%define SYSTEM_MAC
  2046                              <5>  	
  2047                              <5> 	%ifndef TRUE
  2048                              <5> 		%define TRUE 01h
  2049                              <5> 	%endif
  2050                              <5> 	%ifndef FALSE
  2051                              <5> 		%define FALSE 00h
  2052                              <5> 	%endif
  2053                              <5> 	
  2054                              <5> %macro vlodsb 3
  2055                              <5> 	vlodsb cs, %1, %2, %3
  2056                              <5> %endmacro
  2057                              <5> 
  2058                              <5> %macro vstosb 3
  2059                              <5> 	vstosb cs, %1, %2, %3
  2060                              <5> %endmacro
  2061                              <5> 	 	
  2062                              <5> %macro int16toreg 2
  2063                              <5> 	int16toreg cs, %1, %2
  2064                              <5> %endmacro
  2065                              <5> 
  2066                              <5> %macro regtoint16 2
  2067                              <5> 	regtoint16 %1, cs, %2
  2068                              <5> %endmacro
  2069                              <5> 
  2070                              <5> %macro vstosb 4
  2071                              <5> 	push %1
  2072                              <5> 	pop ds
  2073                              <5> 	mov si,%2
  2074                              <5> 	add si,%3
  2075                              <5> 	mov byte [si],%4	
  2076                              <5> %endmacro
  2077                              <5> 
  2078                              <5> %macro vlodsb 4
  2079                              <5> 	push %1
  2080                              <5> 	pop ds
  2081                              <5> 	mov si,%2
  2082                              <5> 	add si,%3
  2083                              <5> 	mov byte %4,[si]	
  2084                              <5> %endmacro 	 
  2085                              <5> 
  2086                              <5> %macro int16toreg 3
  2087                              <5> 	push %2
  2088                              <5> 	push %1
  2089                              <5> 	pop ds
  2090                              <5> 	pop si
  2091                              <5> 	mov word %3,[si]	
  2092                              <5> %endmacro
  2093                              <5> 
  2094                              <5> %macro regtoint16 3
  2095                              <5> 	push %3
  2096                              <5> 	push %2
  2097                              <5> 	pop ds
  2098                              <5> 	pop si
  2099                              <5> 	mov word [si],%1	
  2100                              <5> %endmacro
  2101                              <5> 
  2102                              <5> %macro mov32 2
  2103                              <5> 	mov32 cs, %1, cs, %2
  2104                              <5> %endmacro
  2105                              <5> 
  2106                              <5> %macro mov16 2
  2107                              <5> 	mov16 cs, %1, cs, %2
  2108                              <5> %endmacro
  2109                              <5> 
  2110                              <5> %macro mov32 4
  2111                              <5> 	mov ax,%3
  2112                              <5> 	mov ds,ax
  2113                              <5> 	mov cx,[%4+2]
  2114                              <5> 	mov dx,[%4]
  2115                              <5> 	mov ax,%1
  2116                              <5> 	mov ds,ax
  2117                              <5> 	mov [%2+2],cx
  2118                              <5> 	mov [%2],dx
  2119                              <5> %endmacro
  2120                              <5> 
  2121                              <5> %macro mov16 4
  2122                              <5> 	mov ax,%3
  2123                              <5> 	mov ds,ax
  2124                              <5> 	mov bx,[%4]
  2125                              <5> 	mov ax,%1
  2126                              <5> 	mov ds,ax
  2127                              <5> 	mov [%2],bx
  2128                              <5> %endmacro
  2129                              <5>  	 	
  2130                              <5> %macro mformat 4
  2131                              <5> 	stkopen 8
  2132                              <5> 	mov word [ bp + 0 ], %1
  2133                              <5> 	mov word [ bp + 2 ], %2
  2134                              <5> 	mov word [ bp + 4 ], %3
  2135                              <5> 	mov word [ bp + 6 ], %4
  2136                              <5> 	call kernel_segment:mformat
  2137                              <5> 	stkclose 8
  2138                              <5> %endmacro
  2139                              <5> 
  2140                              <5> %macro malloc 6
  2141                              <5> 	stkopen 0Bh
  2142                              <5> 	mov word [ bp + 4 ], %3
  2143                              <5> 	mov word [ bp + 6 ], %4
  2144                              <5> 	mov word [ bp + 8 ], %5	
  2145                              <5> 	call kernel_segment:malloc
  2146                              <5> 	push sp
  2147                              <5> 	pop bp
  2148                              <5> 	mov word %1, [ bp ]
  2149                              <5> 	mov word %2, [ bp + 2 ]
  2150                              <5> 	mov byte %6, [ bp + 0x0A ]
  2151                              <5> 	stkclose 0Bh
  2152                              <5> %endmacro 	
  2153                              <5> 
  2154                              <5> %macro laddr 2
  2155                              <5> 	laddr %1, %2, %1, %2
  2156                              <5> %endmacro
  2157                              <5> 
  2158                              <5> %macro faddr 2
  2159                              <5> 	faddr %1, %2, %1, %2
  2160                              <5> %endmacro
  2161                              <5>  	
  2162                              <5> %macro laddr 4
  2163                              <5> 	stkopen 8
  2164                              <5> 	mov word [ bp + 4 ], %3
  2165                              <5> 	mov word [ bp + 6 ], %4	
  2166                              <5> 	call kernel_segment:laddr
  2167                              <5> 	push sp
  2168                              <5> 	pop bp
  2169                              <5> 	mov word %1, [ bp + 0 ]
  2170                              <5> 	mov word %2, [ bp + 2 ]	
  2171                              <5> 	stkclose 8
  2172                              <5> %endmacro
  2173                              <5> 
  2174                              <5> %macro faddr 4
  2175                              <5> 	stkopen 8
  2176                              <5> 	mov word [ bp + 4 ], %3
  2177                              <5> 	mov word [ bp + 6 ], %4	
  2178                              <5> 	call kernel_segment:faddr
  2179                              <5> 	push sp
  2180                              <5> 	pop bp
  2181                              <5> 	mov word %1, [ bp + 0 ]
  2182                              <5> 	mov word %2, [ bp + 2 ]	
  2183                              <5> 	stkclose 8
  2184                              <5> %endmacro	
  2185                              <5>  
  2186                              <5> 
  2187                              <5> %macro stkopen 1		
  2188                              <5> 	sub word sp, %1
  2189                              <5> 	push sp
  2190                              <5> 	pop bp
  2191                              <5> %endmacro
  2192                              <5> 
  2193                              <5> %macro stkclose 1
  2194                              <5> 	add word sp, %1
  2195                              <5> %endmacro
  2196                              <5> 
  2197                              <5> %macro stkload 1-* 	
  2198                              <5>  	%rep %0
  2199                              <5>  	 	%rotate -1
  2200                              <5>  		pop %1
  2201                              <5>  	%endrep
  2202                              <5>  	%rep %0
  2203                              <5>  		push %1
  2204                              <5>  		%rotate 1
  2205                              <5>  	%endrep
  2206                              <5> %endmacro
  2207                              <5> 
  2208                              <5> %macro stkpush 1-* 	
  2209                              <5>  	%rep %0
  2210                              <5>  		push %1
  2211                              <5>  		%rotate 1
  2212                              <5>  	%endrep 	
  2213                              <5> %endmacro
  2214                              <5>  
  2215                              <5> %macro stkpop 1-*
  2216                              <5>  	%rep %0
  2217                              <5>  	 	%rotate -1
  2218                              <5>  		pop %1
  2219                              <5>  	%endrep 	 	
  2220                              <5> %endmacro
  2221                              <5> 
  2222                              <5> %endif 
  2223                              <4> 	%include "lib/math.mac"
  2224                              <5> 
  2225                              <5> %ifndef MATH_MAC
  2226                              <5> 	%define MATH_MAC
  2227                              <5> 	
  2228                              <5> 	%include "lib/math.asm"
  2229                              <5> 	%include "lib/system.mac"
  2230                              <5> 
  2231                              <5> %macro chgsig 1
  2232                              <5> 	chgsig cs, %1
  2233                              <5> %endmacro
  2234                              <5> 
  2235                              <5> %macro cmp16 3
  2236                              <5> 	cmp16 cs, %1, cs, %2, %3
  2237                              <5> %endmacro
  2238                              <5> 
  2239                              <5> %macro mul16 2
  2240                              <5> 	mul16 cs, %1, cs, %2
  2241                              <5> %endmacro
  2242                              <5> 
  2243                              <5> %macro div16 2
  2244                              <5> 	div16 cs, %1, cs, %2
  2245                              <5> %endmacro
  2246                              <5> 
  2247                              <5> %macro mod16 2
  2248                              <5> 	mod16 cs, %1, cs, %2
  2249                              <5> %endmacro
  2250                              <5> 
  2251                              <5> %macro inc16 1
  2252                              <5> 	inc16 cs, %1
  2253                              <5> %endmacro
  2254                              <5> 
  2255                              <5> %macro dec16 1
  2256                              <5> 	dec16 cs, %1
  2257                              <5> %endmacro
  2258                              <5> 
  2259                              <5> %macro add16 2
  2260                              <5> 	add16 cs, %1, cs, %2
  2261                              <5> %endmacro
  2262                              <5> 
  2263                              <5> %macro sub16 2
  2264                              <5> 	sub16 cs, %1, cs, %2
  2265                              <5> %endmacro
  2266                              <5> 
  2267                              <5> %macro int32to16 2
  2268                              <5> 	int32to16 cs, %1, %2
  2269                              <5> %endmacro
  2270                              <5> 
  2271                              <5> %macro int16to32 2
  2272                              <5> 	int16to32 %1, cs, %2
  2273                              <5> %endmacro
  2274                              <5> 
  2275                              <5> %macro setsig 1
  2276                              <5> 	setsig cs, %1
  2277                              <5> %endmacro
  2278                              <5> 
  2279                              <5> %macro clrsig 1
  2280                              <5> 	clrsig cs, %1
  2281                              <5> %endmacro
  2282                              <5> 
  2283                              <5> %macro idiv32 5
  2284                              <5> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2285                              <5> %endmacro
  2286                              <5> 
  2287                              <5> %macro imul32 3
  2288                              <5> 	imul32 cs, %1, cs, %2, cs, %3
  2289                              <5> %endmacro
  2290                              <5> 
  2291                              <5> %macro div32 5
  2292                              <5> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2293                              <5> %endmacro
  2294                              <5> 
  2295                              <5> %macro mul32 3
  2296                              <5> 	mul32 cs, %1, cs, %2, cs, %3
  2297                              <5> %endmacro
  2298                              <5> 	
  2299                              <5> %macro add32 3
  2300                              <5> 	add32 cs, %1, cs, %2, cs, %3
  2301                              <5> %endmacro
  2302                              <5> 
  2303                              <5> %macro sub32 3
  2304                              <5> 	sub32 cs, %1, cs, %2, cs, %3
  2305                              <5> %endmacro
  2306                              <5> 
  2307                              <5> %macro int32to16 3
  2308                              <5> 	stkopen 0x06
  2309                              <5> 	mov ax,%1
  2310                              <5> 	mov ds,ax
  2311                              <5> 	mov ax,[%2+2]
  2312                              <5> 	mov word [bp+0], ax
  2313                              <5> 	mov ax,[%2]	
  2314                              <5> 	mov word [bp+2], ax
  2315                              <5> 	call proc_int32to16
  2316                              <5> 	mov ax,sp
  2317                              <5> 	mov bp,ax
  2318                              <5> 	mov ax,[bp+4]
  2319                              <5> 	mov word %3, ax	
  2320                              <5> 	stkclose 0x06
  2321                              <5> %endmacro
  2322                              <5> 
  2323                              <5> %macro int16to32 3
  2324                              <5> 	stkopen 0x06
  2325                              <5> 	mov word [bp+0], %1	
  2326                              <5> 	call proc_int16to32
  2327                              <5> 	mov ax,sp
  2328                              <5> 	mov bp,ax
  2329                              <5> 	mov ax,%2
  2330                              <5> 	mov ds,ax
  2331                              <5> 	mov ax,[bp+2]
  2332                              <5> 	mov [%3+2],ax
  2333                              <5> 	mov ax,[bp+4]
  2334                              <5> 	mov [%3],ax	
  2335                              <5> 	stkclose 0x06
  2336                              <5> %endmacro
  2337                              <5> 
  2338                              <5> %macro setsig 2
  2339                              <5> 	stkopen 0x02
  2340                              <5> 	mov ax,%1
  2341                              <5> 	mov ds,ax
  2342                              <5> 	mov ax,[%2+2]
  2343                              <5> 	mov word [bp+0], ax
  2344                              <5> 	call proc_setsig
  2345                              <5> 	mov ax,sp
  2346                              <5> 	mov bp,ax
  2347                              <5> 	mov ax,%1
  2348                              <5> 	mov ds,ax
  2349                              <5> 	mov ax,[bp+0]
  2350                              <5> 	mov word [%2+2], ax
  2351                              <5> 	stkclose 0x02
  2352                              <5> %endmacro
  2353                              <5> 
  2354                              <5> %macro clrsig 2
  2355                              <5> 	stkopen 0x02
  2356                              <5> 	mov ax,%1
  2357                              <5> 	mov ds,ax
  2358                              <5> 	mov ax,[%2+2]
  2359                              <5> 	mov word [bp+0], ax
  2360                              <5> 	call proc_clrsig
  2361                              <5> 	mov ax,sp
  2362                              <5> 	mov bp,ax
  2363                              <5> 	mov ax,%1
  2364                              <5> 	mov ds,ax
  2365                              <5> 	mov ax,[bp+0]
  2366                              <5> 	mov word [%2+2], ax
  2367                              <5> 	stkclose 0x02
  2368                              <5> %endmacro
  2369                              <5> 
  2370                              <5> %macro div32 10
  2371                              <5> 	stkopen 0x11
  2372                              <5> 	mov ax,%1
  2373                              <5> 	mov ds,ax
  2374                              <5> 	mov ax,[%2+2]
  2375                              <5> 	mov word [bp+0], ax
  2376                              <5> 	mov ax,[%2]
  2377                              <5> 	mov word [bp+2], ax
  2378                              <5> 	mov ax,%3
  2379                              <5> 	mov ds,ax
  2380                              <5> 	mov ax,[%4+2]
  2381                              <5> 	mov word [bp+4], ax
  2382                              <5> 	mov ax,[%4]
  2383                              <5> 	mov word [bp+6], ax
  2384                              <5> 	call proc_div32
  2385                              <5> 	mov ax,sp
  2386                              <5> 	mov bp,ax
  2387                              <5> 	mov ax,%5
  2388                              <5> 	mov ds,ax
  2389                              <5> 	mov word ax, [bp+8]
  2390                              <5> 	mov word [%6+2], ax
  2391                              <5> 	mov word ax, [bp+0x0A]
  2392                              <5> 	mov word [%6], ax
  2393                              <5> 	mov ax,%7
  2394                              <5> 	mov ds,ax
  2395                              <5> 	mov word ax,[bp+0x0C]
  2396                              <5> 	mov word [%8+2],ax
  2397                              <5> 	mov word ax,[bp+0x0E]
  2398                              <5> 	mov word [%8],ax
  2399                              <5> 	mov ax,%9
  2400                              <5> 	mov ds,ax
  2401                              <5> 	mov byte al,[bp+0x10]
  2402                              <5> 	mov byte [%10],al
  2403                              <5> 	stkclose 0x11
  2404                              <5> %endmacro
  2405                              <5> 	
  2406                              <5> %macro mul32 6
  2407                              <5> 	stkopen 0x0C
  2408                              <5> 	mov ax,%1
  2409                              <5> 	mov ds,ax
  2410                              <5> 	mov ax,[%2+2]
  2411                              <5> 	mov word [bp+0], ax
  2412                              <5> 	mov ax,[%2]
  2413                              <5> 	mov word [bp+2], ax
  2414                              <5> 	mov ax,%3
  2415                              <5> 	mov ds,ax
  2416                              <5> 	mov ax,[%4+2]
  2417                              <5> 	mov word [bp+4], ax
  2418                              <5> 	mov ax,[%4]
  2419                              <5> 	mov word [bp+6], ax
  2420                              <5> 	call proc_mul32
  2421                              <5> 	mov ax,sp
  2422                              <5> 	mov bp,ax
  2423                              <5> 	mov ax,%5
  2424                              <5> 	mov ds,ax
  2425                              <5> 	mov word ax, [bp+8]
  2426                              <5> 	mov word [%6+2], ax
  2427                              <5> 	mov word ax, [bp+0x0A]
  2428                              <5> 	mov word [%6], ax
  2429                              <5> 	stkclose 0x0C
  2430                              <5> %endmacro	
  2431                              <5> 	
  2432                              <5> %macro add32 6
  2433                              <5> 	stkopen 0x0C
  2434                              <5> 	mov ax,%1
  2435                              <5> 	mov ds,ax
  2436                              <5> 	mov ax,[%2+2]
  2437                              <5> 	mov word [bp+0], ax
  2438                              <5> 	mov ax,[%2]
  2439                              <5> 	mov word [bp+2], ax
  2440                              <5> 	mov ax,%3
  2441                              <5> 	mov ds,ax
  2442                              <5> 	mov ax,[%4+2]
  2443                              <5> 	mov word [bp+4], ax
  2444                              <5> 	mov ax,[%4]
  2445                              <5> 	mov word [bp+6], ax
  2446                              <5> 	call proc_add32
  2447                              <5> 	mov ax,sp
  2448                              <5> 	mov bp,ax
  2449                              <5> 	mov ax,%5
  2450                              <5> 	mov ds,ax
  2451                              <5> 	mov word ax, [bp+8]
  2452                              <5> 	mov word [%6+2], ax
  2453                              <5> 	mov word ax, [bp+0x0A]
  2454                              <5> 	mov word [%6], ax
  2455                              <5> 	stkclose 0x0C
  2456                              <5> %endmacro
  2457                              <5> 
  2458                              <5> %macro sub32 6
  2459                              <5> 	stkopen 0x0C
  2460                              <5> 	mov ax,%1
  2461                              <5> 	mov ds,ax
  2462                              <5> 	mov ax,[%2+2]
  2463                              <5> 	mov word [bp+0], ax
  2464                              <5> 	mov ax,[%2]
  2465                              <5> 	mov word [bp+2], ax
  2466                              <5> 	mov ax,%3
  2467                              <5> 	mov ds,ax
  2468                              <5> 	mov ax,[%4+2]
  2469                              <5> 	mov word [bp+4], ax
  2470                              <5> 	mov ax,[%4]
  2471                              <5> 	mov word [bp+6], ax
  2472                              <5> 	call proc_sub32
  2473                              <5> 	mov ax,sp
  2474                              <5> 	mov bp,ax
  2475                              <5> 	mov ax,%5
  2476                              <5> 	mov ds,ax
  2477                              <5> 	mov word ax, [bp+8]
  2478                              <5> 	mov word [%6+2], ax
  2479                              <5> 	mov word ax, [bp+0x0A]
  2480                              <5> 	mov word [%6], ax
  2481                              <5> 	stkclose 0x0C
  2482                              <5> %endmacro
  2483                              <5> 
  2484                              <5> %macro idiv32 10
  2485                              <5> 	stkopen 0x11
  2486                              <5> 	mov ax,%1
  2487                              <5> 	mov ds,ax
  2488                              <5> 	mov ax,[%2+2]
  2489                              <5> 	mov word [bp+0], ax
  2490                              <5> 	mov ax,[%2]
  2491                              <5> 	mov word [bp+2], ax
  2492                              <5> 	mov ax,%3
  2493                              <5> 	mov ds,ax
  2494                              <5> 	mov ax,[%4+2]
  2495                              <5> 	mov word [bp+4], ax
  2496                              <5> 	mov ax,[%4]
  2497                              <5> 	mov word [bp+6], ax
  2498                              <5> 	call proc_idiv32
  2499                              <5> 	mov ax,sp
  2500                              <5> 	mov bp,ax
  2501                              <5> 	mov ax,%5
  2502                              <5> 	mov ds,ax
  2503                              <5> 	mov word ax, [bp+8]
  2504                              <5> 	mov word [%6+2], ax
  2505                              <5> 	mov word ax, [bp+0x0A]
  2506                              <5> 	mov word [%6], ax
  2507                              <5> 	mov ax,%7
  2508                              <5> 	mov ds,ax
  2509                              <5> 	mov word ax,[bp+0x0C]
  2510                              <5> 	mov word [%8+2],ax
  2511                              <5> 	mov word ax,[bp+0x0E]
  2512                              <5> 	mov word [%8],ax
  2513                              <5> 	mov ax,%9
  2514                              <5> 	mov ds,ax
  2515                              <5> 	mov byte al,[bp+0x10]
  2516                              <5> 	mov byte [%10],al
  2517                              <5> 	stkclose 0x11
  2518                              <5> %endmacro
  2519                              <5> 
  2520                              <5> %macro imul32 6
  2521                              <5> 	stkopen 0x0C
  2522                              <5> 	mov ax,%1
  2523                              <5> 	mov ds,ax
  2524                              <5> 	mov ax,[%2+2]
  2525                              <5> 	mov word [bp+0], ax
  2526                              <5> 	mov ax,[%2]
  2527                              <5> 	mov word [bp+2], ax
  2528                              <5> 	mov ax,%3
  2529                              <5> 	mov ds,ax
  2530                              <5> 	mov ax,[%4+2]
  2531                              <5> 	mov word [bp+4], ax
  2532                              <5> 	mov ax,[%4]
  2533                              <5> 	mov word [bp+6], ax
  2534                              <5> 	call proc_imul32
  2535                              <5> 	mov ax,sp
  2536                              <5> 	mov bp,ax
  2537                              <5> 	mov ax,%5
  2538                              <5> 	mov ds,ax
  2539                              <5> 	mov word ax, [bp+8]
  2540                              <5> 	mov word [%6+2], ax
  2541                              <5> 	mov word ax, [bp+0x0A]
  2542                              <5> 	mov word [%6], ax
  2543                              <5> 	stkclose 0x0C
  2544                              <5> %endmacro
  2545                              <5> 	
  2546                              <5> %macro cmp32 3
  2547                              <5> 	cmp32 cs, %1, cs, %2, %3
  2548                              <5> %endmacro	
  2549                              <5> 	
  2550                              <5> %macro cmp32 5
  2551                              <5> 	stkopen 9
  2552                              <5> 	mov ax,%1
  2553                              <5> 	mov ds,ax
  2554                              <5> 	mov word ax,[%2+2]
  2555                              <5> 	mov word [bp+0], ax
  2556                              <5> 	mov word ax,[%2]
  2557                              <5> 	mov word [bp+2], ax	
  2558                              <5> 	mov ax,%3
  2559                              <5> 	mov ds,ax
  2560                              <5> 	mov word ax,[%4+2]
  2561                              <5> 	mov word [bp+4], ax
  2562                              <5> 	mov word ax,[%4]
  2563                              <5> 	mov word [bp+6], ax	
  2564                              <5> 	call proc_cmp32
  2565                              <5> 	mov ax,sp
  2566                              <5> 	mov bp,ax
  2567                              <5> 	mov al,[bp+8]
  2568                              <5> 	mov byte %5,al
  2569                              <5> 	stkclose 9
  2570                              <5> %endmacro
  2571                              <5> 	
  2572                              <5> %macro shl32 2
  2573                              <5> 	shl32 cs, %1, %2
  2574                              <5> %endmacro	
  2575                              <5> 	
  2576                              <5> %macro shl32 3
  2577                              <5> 	stkopen 5
  2578                              <5> 	mov ax,%1
  2579                              <5> 	mov ds,ax
  2580                              <5> 	mov word ax,[%2+2]
  2581                              <5> 	mov word [bp+0], ax
  2582                              <5> 	mov word ax,[%2]
  2583                              <5> 	mov word [bp+2], ax
  2584                              <5> 	mov byte al, %3
  2585                              <5> 	mov byte [bp+4], al 
  2586                              <5> 	call proc_shl32
  2587                              <5> 	mov ax,sp
  2588                              <5> 	mov bp,ax
  2589                              <5> 	mov ax,%1
  2590                              <5> 	mov ds,ax
  2591                              <5> 	mov ax,[bp+0]
  2592                              <5> 	mov word [%2+2],ax
  2593                              <5> 	mov ax,[bp+2]
  2594                              <5> 	mov word [%2],ax
  2595                              <5> 	stkclose 5
  2596                              <5> %endmacro
  2597                              <5> 
  2598                              <5> 
  2599                              <5> %macro shr32 2
  2600                              <5> 	shr32 cs, %1, %2
  2601                              <5> %endmacro	
  2602                              <5> 	
  2603                              <5> %macro shr32 3
  2604                              <5> 	stkopen 5
  2605                              <5> 	mov ax,%1
  2606                              <5> 	mov ds,ax
  2607                              <5> 	mov word ax,[%2+2]
  2608                              <5> 	mov word [bp+0], ax
  2609                              <5> 	mov word ax,[%2]
  2610                              <5> 	mov word [bp+2], ax
  2611                              <5> 	mov byte al, %3
  2612                              <5> 	mov byte [bp+4], al 
  2613                              <5> 	call proc_shr32
  2614                              <5> 	mov ax,sp
  2615                              <5> 	mov bp,ax
  2616                              <5> 	mov ax,%1
  2617                              <5> 	mov ds,ax
  2618                              <5> 	mov ax,[bp+0]
  2619                              <5> 	mov word [%2+2],ax
  2620                              <5> 	mov ax,[bp+2]
  2621                              <5> 	mov word [%2],ax
  2622                              <5> 	stkclose 5
  2623                              <5> %endmacro
  2624                              <5> 
  2625                              <5> %macro inc16 2
  2626                              <5> 	mov ax,%1
  2627                              <5> 	mov ds,ax
  2628                              <5> 	inc word [%2]
  2629                              <5> %endmacro
  2630                              <5> 
  2631                              <5> %macro dec16 2
  2632                              <5> 	mov ax,%1
  2633                              <5> 	mov ds,ax
  2634                              <5> 	dec word [%2]
  2635                              <5> %endmacro
  2636                              <5> 
  2637                              <5> %macro add16 4	
  2638                              <5> 	mov ax,%3
  2639                              <5> 	mov ds,ax
  2640                              <5> 	mov bx,[%4]	
  2641                              <5> 	mov ax,%1
  2642                              <5> 	mov ds,ax	
  2643                              <5> 	add [%2],bx
  2644                              <5> %endmacro
  2645                              <5> 
  2646                              <5> %macro sub16 4
  2647                              <5> 	mov ax,%3
  2648                              <5> 	mov ds,ax
  2649                              <5> 	mov bx,[%4]
  2650                              <5> 	mov ax,%1
  2651                              <5> 	mov ds,ax
  2652                              <5> 	sub [%2],bx
  2653                              <5> %endmacro
  2654                              <5> 
  2655                              <5> %macro mul16 4
  2656                              <5> 	mov ax,%1
  2657                              <5> 	mov ds,ax
  2658                              <5> 	mov bx,[%2]
  2659                              <5> 	mov ax,%3
  2660                              <5> 	mov ds,ax
  2661                              <5> 	mov cx,[%4]
  2662                              <5> 	
  2663                              <5> 	mov ax,bx
  2664                              <5> 	imul cx
  2665                              <5> 	
  2666                              <5> 	mov dx,%1
  2667                              <5> 	mov ds,dx
  2668                              <5> 	mov [%2],ax
  2669                              <5> %endmacro
  2670                              <5> 
  2671                              <5> %macro div16 4
  2672                              <5> 	mov ax,%1
  2673                              <5> 	mov ds,ax
  2674                              <5> 	mov bx,[%2]
  2675                              <5> 	mov ax,%3
  2676                              <5> 	mov ds,ax
  2677                              <5> 	mov cx,[%4]
  2678                              <5> 	
  2679                              <5> 	xor dx,dx
  2680                              <5> 	mov ax,bx
  2681                              <5> 	idiv cx
  2682                              <5> 	
  2683                              <5> 	mov dx,%1
  2684                              <5> 	mov ds,dx
  2685                              <5> 	mov [%2],ax
  2686                              <5> %endmacro
  2687                              <5> 
  2688                              <5> 
  2689                              <5> %macro mod16 4
  2690                              <5> 	mov ax,%1
  2691                              <5> 	mov ds,ax
  2692                              <5> 	mov bx,[%2]
  2693                              <5> 	mov ax,%3
  2694                              <5> 	mov ds,ax
  2695                              <5> 	mov cx,[%4]
  2696                              <5> 	
  2697                              <5> 	xor dx,dx
  2698                              <5> 	mov ax,bx
  2699                              <5> 	idiv cx
  2700                              <5> 	
  2701                              <5> 	mov bx,%1
  2702                              <5> 	mov ds,bx
  2703                              <5> 	mov [%2],dx
  2704                              <5> %endmacro
  2705                              <5> 
  2706                              <5> %macro cmp16 5
  2707                              <5> 	mov ax,%1
  2708                              <5> 	mov ds,ax
  2709                              <5> 	mov bx,[%2]
  2710                              <5> 	mov ax,%3
  2711                              <5> 	mov ds,ax
  2712                              <5> 	mov	cx,[%4]
  2713                              <5> 	
  2714                              <5> 	cmp bx,cx
  2715                              <5> 	jg %%above
  2716                              <5> 	jl %%below
  2717                              <5> 		mov byte %5, 0
  2718                              <5> 		jmp %%endcmp
  2719                              <5> 	%%above:
  2720                              <5> 		mov byte %5, 1
  2721                              <5> 		jmp %%endcmp
  2722                              <5> 	%%below:
  2723                              <5> 		mov byte %5, -1
  2724                              <5> 	%%endcmp:
  2725                              <5> %endmacro
  2726                              <5> 
  2727                              <5> %macro chgsig 2
  2728                              <5> 	mov ax,%1
  2729                              <5> 	mov ds,ax
  2730                              <5> 	mov ax,[%2]
  2731                              <5> 	mov bx,0xFFFF
  2732                              <5> 	sub bx,ax
  2733                              <5> 	inc bx
  2734                              <5> 	mov [%2],bx
  2735                              <5> %endmacro
  2736                              <5> 	
  2737                              <5> %endif
  2738                              <4> 	%include "lib/stdio.mac"
  2739                              <5> 
  2740                              <5> %ifndef STDIO_MAC
  2741                              <5> 	%define STDIO_MAC
  2742                              <5> 	
  2743                              <5> 	%include "lib/stdio.asm"
  2744                              <6> 
  2745                              <6> %ifndef STDIO_ASM
  2746                              <6> 	%define STDIO_ASM
  2747                              <6> 	
  2748                              <6> 	%include "lib/system.mac"
  2749                              <7>  
  2750                              <7> %ifndef SYSTEM_MAC
  2751                              <7>  	%define SYSTEM_MAC
  2752                              <7>  	
  2753                              <7> 	%ifndef TRUE
  2754                              <7> 		%define TRUE 01h
  2755                              <7> 	%endif
  2756                              <7> 	%ifndef FALSE
  2757                              <7> 		%define FALSE 00h
  2758                              <7> 	%endif
  2759                              <7> 	
  2760                              <7> %macro vlodsb 3
  2761                              <7> 	vlodsb cs, %1, %2, %3
  2762                              <7> %endmacro
  2763                              <7> 
  2764                              <7> %macro vstosb 3
  2765                              <7> 	vstosb cs, %1, %2, %3
  2766                              <7> %endmacro
  2767                              <7> 	 	
  2768                              <7> %macro int16toreg 2
  2769                              <7> 	int16toreg cs, %1, %2
  2770                              <7> %endmacro
  2771                              <7> 
  2772                              <7> %macro regtoint16 2
  2773                              <7> 	regtoint16 %1, cs, %2
  2774                              <7> %endmacro
  2775                              <7> 
  2776                              <7> %macro vstosb 4
  2777                              <7> 	push %1
  2778                              <7> 	pop ds
  2779                              <7> 	mov si,%2
  2780                              <7> 	add si,%3
  2781                              <7> 	mov byte [si],%4	
  2782                              <7> %endmacro
  2783                              <7> 
  2784                              <7> %macro vlodsb 4
  2785                              <7> 	push %1
  2786                              <7> 	pop ds
  2787                              <7> 	mov si,%2
  2788                              <7> 	add si,%3
  2789                              <7> 	mov byte %4,[si]	
  2790                              <7> %endmacro 	 
  2791                              <7> 
  2792                              <7> %macro int16toreg 3
  2793                              <7> 	push %2
  2794                              <7> 	push %1
  2795                              <7> 	pop ds
  2796                              <7> 	pop si
  2797                              <7> 	mov word %3,[si]	
  2798                              <7> %endmacro
  2799                              <7> 
  2800                              <7> %macro regtoint16 3
  2801                              <7> 	push %3
  2802                              <7> 	push %2
  2803                              <7> 	pop ds
  2804                              <7> 	pop si
  2805                              <7> 	mov word [si],%1	
  2806                              <7> %endmacro
  2807                              <7> 
  2808                              <7> %macro mov32 2
  2809                              <7> 	mov32 cs, %1, cs, %2
  2810                              <7> %endmacro
  2811                              <7> 
  2812                              <7> %macro mov16 2
  2813                              <7> 	mov16 cs, %1, cs, %2
  2814                              <7> %endmacro
  2815                              <7> 
  2816                              <7> %macro mov32 4
  2817                              <7> 	mov ax,%3
  2818                              <7> 	mov ds,ax
  2819                              <7> 	mov cx,[%4+2]
  2820                              <7> 	mov dx,[%4]
  2821                              <7> 	mov ax,%1
  2822                              <7> 	mov ds,ax
  2823                              <7> 	mov [%2+2],cx
  2824                              <7> 	mov [%2],dx
  2825                              <7> %endmacro
  2826                              <7> 
  2827                              <7> %macro mov16 4
  2828                              <7> 	mov ax,%3
  2829                              <7> 	mov ds,ax
  2830                              <7> 	mov bx,[%4]
  2831                              <7> 	mov ax,%1
  2832                              <7> 	mov ds,ax
  2833                              <7> 	mov [%2],bx
  2834                              <7> %endmacro
  2835                              <7>  	 	
  2836                              <7> %macro mformat 4
  2837                              <7> 	stkopen 8
  2838                              <7> 	mov word [ bp + 0 ], %1
  2839                              <7> 	mov word [ bp + 2 ], %2
  2840                              <7> 	mov word [ bp + 4 ], %3
  2841                              <7> 	mov word [ bp + 6 ], %4
  2842                              <7> 	call kernel_segment:mformat
  2843                              <7> 	stkclose 8
  2844                              <7> %endmacro
  2845                              <7> 
  2846                              <7> %macro malloc 6
  2847                              <7> 	stkopen 0Bh
  2848                              <7> 	mov word [ bp + 4 ], %3
  2849                              <7> 	mov word [ bp + 6 ], %4
  2850                              <7> 	mov word [ bp + 8 ], %5	
  2851                              <7> 	call kernel_segment:malloc
  2852                              <7> 	push sp
  2853                              <7> 	pop bp
  2854                              <7> 	mov word %1, [ bp ]
  2855                              <7> 	mov word %2, [ bp + 2 ]
  2856                              <7> 	mov byte %6, [ bp + 0x0A ]
  2857                              <7> 	stkclose 0Bh
  2858                              <7> %endmacro 	
  2859                              <7> 
  2860                              <7> %macro laddr 2
  2861                              <7> 	laddr %1, %2, %1, %2
  2862                              <7> %endmacro
  2863                              <7> 
  2864                              <7> %macro faddr 2
  2865                              <7> 	faddr %1, %2, %1, %2
  2866                              <7> %endmacro
  2867                              <7>  	
  2868                              <7> %macro laddr 4
  2869                              <7> 	stkopen 8
  2870                              <7> 	mov word [ bp + 4 ], %3
  2871                              <7> 	mov word [ bp + 6 ], %4	
  2872                              <7> 	call kernel_segment:laddr
  2873                              <7> 	push sp
  2874                              <7> 	pop bp
  2875                              <7> 	mov word %1, [ bp + 0 ]
  2876                              <7> 	mov word %2, [ bp + 2 ]	
  2877                              <7> 	stkclose 8
  2878                              <7> %endmacro
  2879                              <7> 
  2880                              <7> %macro faddr 4
  2881                              <7> 	stkopen 8
  2882                              <7> 	mov word [ bp + 4 ], %3
  2883                              <7> 	mov word [ bp + 6 ], %4	
  2884                              <7> 	call kernel_segment:faddr
  2885                              <7> 	push sp
  2886                              <7> 	pop bp
  2887                              <7> 	mov word %1, [ bp + 0 ]
  2888                              <7> 	mov word %2, [ bp + 2 ]	
  2889                              <7> 	stkclose 8
  2890                              <7> %endmacro	
  2891                              <7>  
  2892                              <7> 
  2893                              <7> %macro stkopen 1		
  2894                              <7> 	sub word sp, %1
  2895                              <7> 	push sp
  2896                              <7> 	pop bp
  2897                              <7> %endmacro
  2898                              <7> 
  2899                              <7> %macro stkclose 1
  2900                              <7> 	add word sp, %1
  2901                              <7> %endmacro
  2902                              <7> 
  2903                              <7> %macro stkload 1-* 	
  2904                              <7>  	%rep %0
  2905                              <7>  	 	%rotate -1
  2906                              <7>  		pop %1
  2907                              <7>  	%endrep
  2908                              <7>  	%rep %0
  2909                              <7>  		push %1
  2910                              <7>  		%rotate 1
  2911                              <7>  	%endrep
  2912                              <7> %endmacro
  2913                              <7> 
  2914                              <7> %macro stkpush 1-* 	
  2915                              <7>  	%rep %0
  2916                              <7>  		push %1
  2917                              <7>  		%rotate 1
  2918                              <7>  	%endrep 	
  2919                              <7> %endmacro
  2920                              <7>  
  2921                              <7> %macro stkpop 1-*
  2922                              <7>  	%rep %0
  2923                              <7>  	 	%rotate -1
  2924                              <7>  		pop %1
  2925                              <7>  	%endrep 	 	
  2926                              <7> %endmacro
  2927                              <7> 
  2928                              <7> %endif 
  2929                              <6> 	
  2930                              <6> %macro __prtch 1	
  2931                              <6> 	stkopen 1	
  2932                              <6> 	mov byte [ bp ], %1
  2933                              <6> 	call proc_prtch
  2934                              <6> 	stkclose 1
  2935                              <6> %endmacro
  2936                              <6> 
  2937                              <6> %macro __prtln 0
  2938                              <6> 	call proc_prtln
  2939                              <6> %endmacro	
  2940                              <6> 
  2941                              <6> %macro __prtsubbin8 3
  2942                              <6> 	stkopen 3
  2943                              <6> 	mov byte [bp+0],%1
  2944                              <6> 	mov byte [bp+1],%2
  2945                              <6> 	mov byte [bp+2],%3
  2946                              <6> 	call proc_prtsubbin8
  2947                              <6> 	stkclose 3
  2948                              <6> %endmacro
  2949                              <6> 	
  2950                              <6> section .data
  2951                              <6> 	
  2952                              <6> proc_prtIEEE754:
  2953 0000056F 89E0                <6> 	mov ax,sp
  2954 00000571 89C5                <6> 	mov bp,ax			
  2955 00000573 8B4602              <6> 	mov ax,[bp+2]	
  2956 00000576 50                  <6> 	push ax
  2957 00000577 50                  <6> 	push ax
  2958 00000578 50                  <6> 	push ax
  2959 00000579 50                  <6> 	push ax	
  2960 0000057A 50                  <6> 	push ax
  2961                              <6> 	
  2962                              <6> 	__prtsubbin8 ah,0,1
  2963                              <7>  stkopen 3
  2964 0000057B 83EC03              <8>  sub word sp, %1
  2965 0000057E 54                  <8>  push sp
  2966 0000057F 5D                  <8>  pop bp
  2967 00000580 886600              <7>  mov byte [bp+0],%1
  2968 00000583 C6460100            <7>  mov byte [bp+1],%2
  2969 00000587 C6460201            <7>  mov byte [bp+2],%3
  2970 0000058B E87201              <7>  call proc_prtsubbin8
  2971                              <7>  stkclose 3
  2972 0000058E 83C403              <8>  add word sp, %1
  2973                              <6> 	__prtch 20h
  2974                              <7>  stkopen 1
  2975 00000591 83EC01              <8>  sub word sp, %1
  2976 00000594 54                  <8>  push sp
  2977 00000595 5D                  <8>  pop bp
  2978 00000596 C6460020            <7>  mov byte [ bp ], %1
  2979 0000059A E82004              <7>  call proc_prtch
  2980                              <7>  stkclose 1
  2981 0000059D 83C401              <8>  add word sp, %1
  2982                              <6> 	__prtch 20h
  2983                              <7>  stkopen 1
  2984 000005A0 83EC01              <8>  sub word sp, %1
  2985 000005A3 54                  <8>  push sp
  2986 000005A4 5D                  <8>  pop bp
  2987 000005A5 C6460020            <7>  mov byte [ bp ], %1
  2988 000005A9 E81104              <7>  call proc_prtch
  2989                              <7>  stkclose 1
  2990 000005AC 83C401              <8>  add word sp, %1
  2991 000005AF 58                  <6> 	pop ax
  2992                              <6> 	__prtsubbin8 ah,1,5
  2993                              <7>  stkopen 3
  2994 000005B0 83EC03              <8>  sub word sp, %1
  2995 000005B3 54                  <8>  push sp
  2996 000005B4 5D                  <8>  pop bp
  2997 000005B5 886600              <7>  mov byte [bp+0],%1
  2998 000005B8 C6460101            <7>  mov byte [bp+1],%2
  2999 000005BC C6460205            <7>  mov byte [bp+2],%3
  3000 000005C0 E83D01              <7>  call proc_prtsubbin8
  3001                              <7>  stkclose 3
  3002 000005C3 83C403              <8>  add word sp, %1
  3003 000005C6 58                  <6> 	pop ax
  3004                              <6> 	__prtsubbin8 ah,5,8
  3005                              <7>  stkopen 3
  3006 000005C7 83EC03              <8>  sub word sp, %1
  3007 000005CA 54                  <8>  push sp
  3008 000005CB 5D                  <8>  pop bp
  3009 000005CC 886600              <7>  mov byte [bp+0],%1
  3010 000005CF C6460105            <7>  mov byte [bp+1],%2
  3011 000005D3 C6460208            <7>  mov byte [bp+2],%3
  3012 000005D7 E82601              <7>  call proc_prtsubbin8
  3013                              <7>  stkclose 3
  3014 000005DA 83C403              <8>  add word sp, %1
  3015                              <6> 	
  3016 000005DD 58                  <6> 	pop ax
  3017                              <6> 	__prtsubbin8 al,0,1
  3018                              <7>  stkopen 3
  3019 000005DE 83EC03              <8>  sub word sp, %1
  3020 000005E1 54                  <8>  push sp
  3021 000005E2 5D                  <8>  pop bp
  3022 000005E3 884600              <7>  mov byte [bp+0],%1
  3023 000005E6 C6460100            <7>  mov byte [bp+1],%2
  3024 000005EA C6460201            <7>  mov byte [bp+2],%3
  3025 000005EE E80F01              <7>  call proc_prtsubbin8
  3026                              <7>  stkclose 3
  3027 000005F1 83C403              <8>  add word sp, %1
  3028                              <6> 	__prtch 20h
  3029                              <7>  stkopen 1
  3030 000005F4 83EC01              <8>  sub word sp, %1
  3031 000005F7 54                  <8>  push sp
  3032 000005F8 5D                  <8>  pop bp
  3033 000005F9 C6460020            <7>  mov byte [ bp ], %1
  3034 000005FD E8BD03              <7>  call proc_prtch
  3035                              <7>  stkclose 1
  3036 00000600 83C401              <8>  add word sp, %1
  3037                              <6> 	__prtch 20h
  3038                              <7>  stkopen 1
  3039 00000603 83EC01              <8>  sub word sp, %1
  3040 00000606 54                  <8>  push sp
  3041 00000607 5D                  <8>  pop bp
  3042 00000608 C6460020            <7>  mov byte [ bp ], %1
  3043 0000060C E8AE03              <7>  call proc_prtch
  3044                              <7>  stkclose 1
  3045 0000060F 83C401              <8>  add word sp, %1
  3046 00000612 58                  <6> 	pop ax
  3047                              <6> 	__prtsubbin8 al,1,4
  3048                              <7>  stkopen 3
  3049 00000613 83EC03              <8>  sub word sp, %1
  3050 00000616 54                  <8>  push sp
  3051 00000617 5D                  <8>  pop bp
  3052 00000618 884600              <7>  mov byte [bp+0],%1
  3053 0000061B C6460101            <7>  mov byte [bp+1],%2
  3054 0000061F C6460204            <7>  mov byte [bp+2],%3
  3055 00000623 E8DA00              <7>  call proc_prtsubbin8
  3056                              <7>  stkclose 3
  3057 00000626 83C403              <8>  add word sp, %1
  3058                              <6> 	__prtch 20h
  3059                              <7>  stkopen 1
  3060 00000629 83EC01              <8>  sub word sp, %1
  3061 0000062C 54                  <8>  push sp
  3062 0000062D 5D                  <8>  pop bp
  3063 0000062E C6460020            <7>  mov byte [ bp ], %1
  3064 00000632 E88803              <7>  call proc_prtch
  3065                              <7>  stkclose 1
  3066 00000635 83C401              <8>  add word sp, %1
  3067 00000638 58                  <6> 	pop ax
  3068                              <6> 	__prtsubbin8 al,4,8
  3069                              <7>  stkopen 3
  3070 00000639 83EC03              <8>  sub word sp, %1
  3071 0000063C 54                  <8>  push sp
  3072 0000063D 5D                  <8>  pop bp
  3073 0000063E 884600              <7>  mov byte [bp+0],%1
  3074 00000641 C6460104            <7>  mov byte [bp+1],%2
  3075 00000645 C6460208            <7>  mov byte [bp+2],%3
  3076 00000649 E8B400              <7>  call proc_prtsubbin8
  3077                              <7>  stkclose 3
  3078 0000064C 83C403              <8>  add word sp, %1
  3079                              <6> 	__prtch 20h
  3080                              <7>  stkopen 1
  3081 0000064F 83EC01              <8>  sub word sp, %1
  3082 00000652 54                  <8>  push sp
  3083 00000653 5D                  <8>  pop bp
  3084 00000654 C6460020            <7>  mov byte [ bp ], %1
  3085 00000658 E86203              <7>  call proc_prtch
  3086                              <7>  stkclose 1
  3087 0000065B 83C401              <8>  add word sp, %1
  3088                              <6> 	
  3089 0000065E 89E0                <6> 	mov ax,sp
  3090 00000660 89C5                <6> 	mov bp,ax			
  3091 00000662 8B4604              <6> 	mov ax,[bp+4]
  3092 00000665 50                  <6> 	push ax
  3093 00000666 50                  <6> 	push ax
  3094 00000667 50                  <6> 	push ax
  3095                              <6> 	
  3096                              <6> 	__prtsubbin8 ah,0,4
  3097                              <7>  stkopen 3
  3098 00000668 83EC03              <8>  sub word sp, %1
  3099 0000066B 54                  <8>  push sp
  3100 0000066C 5D                  <8>  pop bp
  3101 0000066D 886600              <7>  mov byte [bp+0],%1
  3102 00000670 C6460100            <7>  mov byte [bp+1],%2
  3103 00000674 C6460204            <7>  mov byte [bp+2],%3
  3104 00000678 E88500              <7>  call proc_prtsubbin8
  3105                              <7>  stkclose 3
  3106 0000067B 83C403              <8>  add word sp, %1
  3107                              <6> 	__prtch 20h
  3108                              <7>  stkopen 1
  3109 0000067E 83EC01              <8>  sub word sp, %1
  3110 00000681 54                  <8>  push sp
  3111 00000682 5D                  <8>  pop bp
  3112 00000683 C6460020            <7>  mov byte [ bp ], %1
  3113 00000687 E83303              <7>  call proc_prtch
  3114                              <7>  stkclose 1
  3115 0000068A 83C401              <8>  add word sp, %1
  3116 0000068D 58                  <6> 	pop ax
  3117                              <6> 	__prtsubbin8 ah,4,8
  3118                              <7>  stkopen 3
  3119 0000068E 83EC03              <8>  sub word sp, %1
  3120 00000691 54                  <8>  push sp
  3121 00000692 5D                  <8>  pop bp
  3122 00000693 886600              <7>  mov byte [bp+0],%1
  3123 00000696 C6460104            <7>  mov byte [bp+1],%2
  3124 0000069A C6460208            <7>  mov byte [bp+2],%3
  3125 0000069E E85F00              <7>  call proc_prtsubbin8
  3126                              <7>  stkclose 3
  3127 000006A1 83C403              <8>  add word sp, %1
  3128                              <6> 	__prtch 20h
  3129                              <7>  stkopen 1
  3130 000006A4 83EC01              <8>  sub word sp, %1
  3131 000006A7 54                  <8>  push sp
  3132 000006A8 5D                  <8>  pop bp
  3133 000006A9 C6460020            <7>  mov byte [ bp ], %1
  3134 000006AD E80D03              <7>  call proc_prtch
  3135                              <7>  stkclose 1
  3136 000006B0 83C401              <8>  add word sp, %1
  3137                              <6> 	
  3138 000006B3 58                  <6> 	pop ax
  3139                              <6> 	__prtsubbin8 al,0,4
  3140                              <7>  stkopen 3
  3141 000006B4 83EC03              <8>  sub word sp, %1
  3142 000006B7 54                  <8>  push sp
  3143 000006B8 5D                  <8>  pop bp
  3144 000006B9 884600              <7>  mov byte [bp+0],%1
  3145 000006BC C6460100            <7>  mov byte [bp+1],%2
  3146 000006C0 C6460204            <7>  mov byte [bp+2],%3
  3147 000006C4 E83900              <7>  call proc_prtsubbin8
  3148                              <7>  stkclose 3
  3149 000006C7 83C403              <8>  add word sp, %1
  3150                              <6> 	__prtch 20h
  3151                              <7>  stkopen 1
  3152 000006CA 83EC01              <8>  sub word sp, %1
  3153 000006CD 54                  <8>  push sp
  3154 000006CE 5D                  <8>  pop bp
  3155 000006CF C6460020            <7>  mov byte [ bp ], %1
  3156 000006D3 E8E702              <7>  call proc_prtch
  3157                              <7>  stkclose 1
  3158 000006D6 83C401              <8>  add word sp, %1
  3159 000006D9 58                  <6> 	pop ax
  3160                              <6> 	__prtsubbin8 al,4,8
  3161                              <7>  stkopen 3
  3162 000006DA 83EC03              <8>  sub word sp, %1
  3163 000006DD 54                  <8>  push sp
  3164 000006DE 5D                  <8>  pop bp
  3165 000006DF 884600              <7>  mov byte [bp+0],%1
  3166 000006E2 C6460104            <7>  mov byte [bp+1],%2
  3167 000006E6 C6460208            <7>  mov byte [bp+2],%3
  3168 000006EA E81300              <7>  call proc_prtsubbin8
  3169                              <7>  stkclose 3
  3170 000006ED 83C403              <8>  add word sp, %1
  3171                              <6> 	__prtch 20h
  3172                              <7>  stkopen 1
  3173 000006F0 83EC01              <8>  sub word sp, %1
  3174 000006F3 54                  <8>  push sp
  3175 000006F4 5D                  <8>  pop bp
  3176 000006F5 C6460020            <7>  mov byte [ bp ], %1
  3177 000006F9 E8C102              <7>  call proc_prtch
  3178                              <7>  stkclose 1
  3179 000006FC 83C401              <8>  add word sp, %1
  3180                              <6> 	
  3181 000006FF C3                  <6> 	ret
  3182                              <6> 	
  3183                              <6> proc_prtsubbin8:
  3184 00000700 89E0                <6> 	mov ax,sp
  3185 00000702 89C5                <6> 	mov bp,ax
  3186                              <6> 	
  3187 00000704 8A4602              <6> 	mov al,[bp+2]
  3188 00000707 50                  <6> 	push ax
  3189                              <6> 	
  3190 00000708 8A4E03              <6> 	mov cl,[bp+3]
  3191 0000070B 8A6E04              <6> 	mov ch,[bp+4]
  3192 0000070E 80FD08              <6> 	cmp ch,8
  3193 00000711 7602                <6> 	jbe .l1	
  3194 00000713 B508                <6> 		mov ch,8
  3195                              <6> 	.l1:		
  3196 00000715 38E9                <6> 		cmp cl,ch		
  3197 00000717 731D                <6> 		jae .l2
  3198                              <6> 		
  3199 00000719 58                  <6> 		pop ax
  3200 0000071A 50                  <6> 		push ax
  3201 0000071B D2E0                <6> 		shl al,cl
  3202 0000071D C0E807              <6> 		shr al,7		
  3203 00000720 0430                <6> 		add al,30h
  3204                              <6> 		
  3205 00000722 51                  <6> 		push cx
  3206                              <6> 		__prtch al
  3207                              <7>  stkopen 1
  3208 00000723 83EC01              <8>  sub word sp, %1
  3209 00000726 54                  <8>  push sp
  3210 00000727 5D                  <8>  pop bp
  3211 00000728 884600              <7>  mov byte [ bp ], %1
  3212 0000072B E88F02              <7>  call proc_prtch
  3213                              <7>  stkclose 1
  3214 0000072E 83C401              <8>  add word sp, %1
  3215 00000731 59                  <6> 		pop cx
  3216                              <6> 		
  3217 00000732 FEC1                <6> 		inc cl
  3218 00000734 EBDF                <6> 		jmp .l1
  3219                              <6> 	.l2:	
  3220 00000736 58                  <6> 	pop ax
  3221                              <6> 	
  3222 00000737 C3                  <6> 	ret
  3223                              <6> 	
  3224                              <6> proc_prtbin16:
  3225 00000738 89E0                <6> 	mov ax,sp
  3226 0000073A 89C5                <6> 	mov bp,ax
  3227                              <6> 		
  3228 0000073C 8A7E04              <6> 	mov bh, [bp+4]
  3229 0000073F B300                <6> 	mov bl,0
  3230 00000741 B201                <6> 	mov dl,TRUE
  3231 00000743 30ED                <6> 	xor ch,ch
  3232 00000745 B102                <6> 	mov cl,2
  3233                              <6> 	.l1:
  3234 00000747 80F900              <6> 		cmp cl,0
  3235 0000074A 744B                <6> 		jz .l2		
  3236                              <6> 		
  3237 0000074C 55                  <6> 		push bp
  3238 0000074D 01CD                <6> 		add bp,cx
  3239 0000074F 45                  <6> 		inc bp
  3240                              <6> 		
  3241 00000750 0A5E00              <6> 		or byte bl, [bp]
  3242 00000753 08FB                <6> 		or byte bl, bh
  3243 00000755 743B                <6> 		jz .prted											
  3244 00000757 53                  <6> 			push bx
  3245 00000758 51                  <6> 			push cx	
  3246 00000759 80FA01              <6> 			cmp dl, TRUE
  3247 0000075C 7402                <6> 			je .first
  3248 0000075E EB10                <6> 			jmp .nfirst
  3249                              <6> 			.first:
  3250 00000760 B200                <6> 				mov dl, FALSE
  3251 00000762 52                  <6> 				push dx
  3252                              <6> 				
  3253 00000763 88FC                <6> 				mov ah, bh
  3254 00000765 8A4600              <6> 				mov byte al, [bp]
  3255 00000768 50                  <6> 				push ax
  3256 00000769 E84000              <6> 				call proc_prtbin8
  3257 0000076C 58                  <6> 				pop ax
  3258                              <6> 							
  3259 0000076D 5A                  <6> 				pop dx
  3260 0000076E EB0C                <6> 				jmp .endfirst
  3261                              <6> 			.nfirst:
  3262 00000770 52                  <6> 				push dx
  3263                              <6> 				
  3264 00000771 B401                <6> 				mov ah, TRUE
  3265 00000773 8A4600              <6> 				mov byte al, [bp]
  3266 00000776 50                  <6> 				push ax
  3267 00000777 E83200              <6> 				call proc_prtbin8
  3268 0000077A 58                  <6> 				pop ax
  3269                              <6> 								
  3270 0000077B 5A                  <6> 				pop dx
  3271                              <6> 			.endfirst:	
  3272 0000077C 59                  <6> 			pop cx
  3273 0000077D 5B                  <6> 			pop bx		
  3274                              <6> 			
  3275 0000077E 80F901              <6> 			cmp cl,1
  3276 00000781 760F                <6> 			jbe .spaceprted
  3277                              <6> 				__prtch 20h
  3278                              <7>  stkopen 1
  3279 00000783 83EC01              <8>  sub word sp, %1
  3280 00000786 54                  <8>  push sp
  3281 00000787 5D                  <8>  pop bp
  3282 00000788 C6460020            <7>  mov byte [ bp ], %1
  3283 0000078C E82E02              <7>  call proc_prtch
  3284                              <7>  stkclose 1
  3285 0000078F 83C401              <8>  add word sp, %1
  3286                              <6> 			.spaceprted:
  3287                              <6> 		.prted:
  3288                              <6> 		
  3289 00000792 5D                  <6> 		pop bp
  3290                              <6> 		
  3291 00000793 FEC9                <6> 		dec cl
  3292 00000795 EBB0                <6> 		jmp .l1
  3293                              <6> 	.l2:
  3294                              <6> 	
  3295 00000797 80FB00              <6> 	cmp bl,0
  3296 0000079A 750F                <6> 	jnz .end
  3297                              <6> 		__prtch 30h
  3298                              <7>  stkopen 1
  3299 0000079C 83EC01              <8>  sub word sp, %1
  3300 0000079F 54                  <8>  push sp
  3301 000007A0 5D                  <8>  pop bp
  3302 000007A1 C6460030            <7>  mov byte [ bp ], %1
  3303 000007A5 E81502              <7>  call proc_prtch
  3304                              <7>  stkclose 1
  3305 000007A8 83C401              <8>  add word sp, %1
  3306                              <6> 	.end:
  3307                              <6> 	
  3308 000007AB C3                  <6> 	ret	
  3309                              <6> 	
  3310                              <6> proc_prtbin8:
  3311 000007AC 89E0                <6> 	mov ax,sp
  3312 000007AE 89C5                <6> 	mov bp,ax
  3313 000007B0 8A4602              <6> 	mov byte al, [bp+2]
  3314 000007B3 3C00                <6> 	cmp al, 0
  3315 000007B5 0F858700            <6> 	jnz .nzero
  3316                              <6> 		__prtch 30h
  3317                              <7>  stkopen 1
  3318 000007B9 83EC01              <8>  sub word sp, %1
  3319 000007BC 54                  <8>  push sp
  3320 000007BD 5D                  <8>  pop bp
  3321 000007BE C6460030            <7>  mov byte [ bp ], %1
  3322 000007C2 E8F801              <7>  call proc_prtch
  3323                              <7>  stkclose 1
  3324 000007C5 83C401              <8>  add word sp, %1
  3325                              <6> 		
  3326 000007C8 89E0                <6> 		mov ax,sp
  3327 000007CA 89C5                <6> 		mov bp,ax
  3328 000007CC 8A4603              <6> 		mov byte al, [bp+3]		
  3329 000007CF 3C00                <6> 		cmp al, FALSE
  3330 000007D1 0F84C500            <6> 		je .end
  3331                              <6> 			__prtch 30h
  3332                              <7>  stkopen 1
  3333 000007D5 83EC01              <8>  sub word sp, %1
  3334 000007D8 54                  <8>  push sp
  3335 000007D9 5D                  <8>  pop bp
  3336 000007DA C6460030            <7>  mov byte [ bp ], %1
  3337 000007DE E8DC01              <7>  call proc_prtch
  3338                              <7>  stkclose 1
  3339 000007E1 83C401              <8>  add word sp, %1
  3340                              <6> 			__prtch 30h
  3341                              <7>  stkopen 1
  3342 000007E4 83EC01              <8>  sub word sp, %1
  3343 000007E7 54                  <8>  push sp
  3344 000007E8 5D                  <8>  pop bp
  3345 000007E9 C6460030            <7>  mov byte [ bp ], %1
  3346 000007ED E8CD01              <7>  call proc_prtch
  3347                              <7>  stkclose 1
  3348 000007F0 83C401              <8>  add word sp, %1
  3349                              <6> 			__prtch 30h
  3350                              <7>  stkopen 1
  3351 000007F3 83EC01              <8>  sub word sp, %1
  3352 000007F6 54                  <8>  push sp
  3353 000007F7 5D                  <8>  pop bp
  3354 000007F8 C6460030            <7>  mov byte [ bp ], %1
  3355 000007FC E8BE01              <7>  call proc_prtch
  3356                              <7>  stkclose 1
  3357 000007FF 83C401              <8>  add word sp, %1
  3358                              <6> 			__prtch 30h
  3359                              <7>  stkopen 1
  3360 00000802 83EC01              <8>  sub word sp, %1
  3361 00000805 54                  <8>  push sp
  3362 00000806 5D                  <8>  pop bp
  3363 00000807 C6460030            <7>  mov byte [ bp ], %1
  3364 0000080B E8AF01              <7>  call proc_prtch
  3365                              <7>  stkclose 1
  3366 0000080E 83C401              <8>  add word sp, %1
  3367                              <6> 			__prtch 30h
  3368                              <7>  stkopen 1
  3369 00000811 83EC01              <8>  sub word sp, %1
  3370 00000814 54                  <8>  push sp
  3371 00000815 5D                  <8>  pop bp
  3372 00000816 C6460030            <7>  mov byte [ bp ], %1
  3373 0000081A E8A001              <7>  call proc_prtch
  3374                              <7>  stkclose 1
  3375 0000081D 83C401              <8>  add word sp, %1
  3376                              <6> 			__prtch 30h
  3377                              <7>  stkopen 1
  3378 00000820 83EC01              <8>  sub word sp, %1
  3379 00000823 54                  <8>  push sp
  3380 00000824 5D                  <8>  pop bp
  3381 00000825 C6460030            <7>  mov byte [ bp ], %1
  3382 00000829 E89101              <7>  call proc_prtch
  3383                              <7>  stkclose 1
  3384 0000082C 83C401              <8>  add word sp, %1
  3385                              <6> 			__prtch 30h
  3386                              <7>  stkopen 1
  3387 0000082F 83EC01              <8>  sub word sp, %1
  3388 00000832 54                  <8>  push sp
  3389 00000833 5D                  <8>  pop bp
  3390 00000834 C6460030            <7>  mov byte [ bp ], %1
  3391 00000838 E88201              <7>  call proc_prtch
  3392                              <7>  stkclose 1
  3393 0000083B 83C401              <8>  add word sp, %1
  3394 0000083E EB5A                <6> 			jmp .end		
  3395                              <6> 	.nzero:
  3396                              <6> 
  3397 00000840 B000                <6> 	mov byte al, FALSE
  3398 00000842 50                  <6> 	push ax
  3399                              <6> 
  3400 00000843 89E0                <6> 	mov ax,sp
  3401 00000845 89C5                <6> 	mov bp,ax
  3402 00000847 8A5E04              <6> 	mov byte bl, [bp+4]
  3403 0000084A B100                <6> 	mov cl,0
  3404                              <6> 	.l1:
  3405 0000084C 80F908              <6> 		cmp cl,8
  3406 0000084F 7348                <6> 		jae .l2
  3407                              <6> 		
  3408 00000851 88C8                <6> 		mov al,cl
  3409                              <6> 		
  3410 00000853 88DA                <6> 		mov dl, bl		
  3411                              <6> 		
  3412                              <6> 		.l1.1:
  3413 00000855 3C00                <6> 			cmp al,0
  3414 00000857 7406                <6> 			jz .l1.2
  3415                              <6> 							
  3416 00000859 D0E2                <6> 			shl dl,1
  3417                              <6> 			
  3418 0000085B FEC8                <6> 			dec al
  3419 0000085D EBF6                <6> 			jmp .l1.1
  3420                              <6> 		.l1.2:
  3421                              <6> 						
  3422 0000085F C0EA07              <6> 		shr dl,7
  3423                              <6> 		
  3424 00000862 89E0                <6> 		mov ax,sp
  3425 00000864 89C5                <6> 		mov bp,ax			
  3426 00000866 8A4605              <6> 		mov byte al, [bp+5]
  3427 00000869 3C01                <6> 		cmp al, TRUE
  3428 0000086B 7413                <6> 		je .endzero		
  3429 0000086D 80FA00              <6> 			cmp dl,0
  3430 00000870 7402                <6> 			jz .zero
  3431 00000872 EB08                <6> 			jmp .notzero
  3432                              <6> 			.zero:
  3433 00000874 58                  <6> 				pop ax
  3434 00000875 50                  <6> 				push ax
  3435 00000876 3C01                <6> 				cmp al, TRUE				
  3436 00000878 7406                <6> 				je .endzero
  3437 0000087A EB19                <6> 				jmp .inc
  3438                              <6> 			.notzero:
  3439 0000087C 58                  <6> 				pop ax
  3440 0000087D B001                <6> 				mov al, TRUE	
  3441 0000087F 50                  <6> 				push ax				
  3442                              <6> 		.endzero:
  3443                              <6> 									
  3444 00000880 80C230              <6> 		add dl,30h
  3445                              <6> 
  3446 00000883 51                  <6> 		push cx
  3447 00000884 52                  <6> 		push dx
  3448                              <6> 		__prtch dl
  3449                              <7>  stkopen 1
  3450 00000885 83EC01              <8>  sub word sp, %1
  3451 00000888 54                  <8>  push sp
  3452 00000889 5D                  <8>  pop bp
  3453 0000088A 885600              <7>  mov byte [ bp ], %1
  3454 0000088D E82D01              <7>  call proc_prtch
  3455                              <7>  stkclose 1
  3456 00000890 83C401              <8>  add word sp, %1
  3457 00000893 5A                  <6> 		pop dx
  3458 00000894 59                  <6> 		pop cx	
  3459                              <6> 
  3460                              <6> 		.inc:
  3461                              <6> 	
  3462 00000895 FEC1                <6> 		inc cl
  3463 00000897 EBB3                <6> 		jmp .l1	
  3464                              <6> 	.l2:
  3465                              <6> 	
  3466 00000899 58                  <6> 	pop ax
  3467                              <6> 	
  3468                              <6> 	.end:
  3469                              <6> 	
  3470 0000089A C3                  <6> 	ret	
  3471                              <6> 
  3472                              <6> proc_prthex16:
  3473 0000089B 89E0                <6> 	mov ax,sp
  3474 0000089D 89C5                <6> 	mov bp,ax
  3475                              <6> 
  3476 0000089F 8A7E04              <6> 	mov byte bh, [bp+4]		
  3477 000008A2 B300                <6> 	mov bl,0	
  3478 000008A4 B201                <6> 	mov dl,TRUE
  3479 000008A6 30ED                <6> 	xor ch,ch
  3480 000008A8 B102                <6> 	mov cl, 2	
  3481                              <6> 	.l1:			
  3482 000008AA 80F900              <6> 		cmp cl,0
  3483 000008AD 7437                <6> 		jz .l2
  3484                              <6> 							
  3485 000008AF 55                  <6> 		push bp		
  3486 000008B0 01CD                <6> 		add bp,cx
  3487 000008B2 45                  <6> 		inc bp		
  3488                              <6> 		
  3489 000008B3 0A5E00              <6> 		or byte bl, [bp]
  3490 000008B6 08FB                <6> 		or byte bl, bh
  3491 000008B8 7427                <6> 		jz .prted							
  3492 000008BA 53                  <6> 			push bx
  3493 000008BB 51                  <6> 			push cx	
  3494 000008BC 80FA01              <6> 			cmp dl, TRUE
  3495 000008BF 7402                <6> 			je .first
  3496 000008C1 EB10                <6> 			jmp .nfirst
  3497                              <6> 			.first:
  3498 000008C3 B200                <6> 				mov dl, FALSE
  3499 000008C5 52                  <6> 				push dx
  3500                              <6> 				
  3501 000008C6 88FC                <6> 				mov ah, bh
  3502 000008C8 8A4600              <6> 				mov byte al, [bp]
  3503 000008CB 50                  <6> 				push ax
  3504 000008CC E82C00              <6> 				call proc_prthex8
  3505 000008CF 58                  <6> 				pop ax
  3506                              <6> 							
  3507 000008D0 5A                  <6> 				pop dx
  3508 000008D1 EB0C                <6> 				jmp .endfirst
  3509                              <6> 			.nfirst:
  3510 000008D3 52                  <6> 				push dx
  3511                              <6> 				
  3512 000008D4 B401                <6> 				mov ah, TRUE
  3513 000008D6 8A4600              <6> 				mov byte al, [bp]
  3514 000008D9 50                  <6> 				push ax
  3515 000008DA E81E00              <6> 				call proc_prthex8
  3516 000008DD 58                  <6> 				pop ax
  3517                              <6> 								
  3518 000008DE 5A                  <6> 				pop dx
  3519                              <6> 			.endfirst:	
  3520 000008DF 59                  <6> 			pop cx
  3521 000008E0 5B                  <6> 			pop bx		
  3522                              <6> 		.prted:
  3523                              <6> 		
  3524 000008E1 5D                  <6> 		pop bp
  3525                              <6> 	
  3526 000008E2 FEC9                <6> 		dec cl
  3527 000008E4 EBC4                <6> 		jmp .l1		
  3528                              <6> 	.l2:
  3529                              <6> 	
  3530 000008E6 80FB00              <6> 	cmp bl,0
  3531 000008E9 750F                <6> 	jnz .end
  3532                              <6> 		__prtch 30h
  3533                              <7>  stkopen 1
  3534 000008EB 83EC01              <8>  sub word sp, %1
  3535 000008EE 54                  <8>  push sp
  3536 000008EF 5D                  <8>  pop bp
  3537 000008F0 C6460030            <7>  mov byte [ bp ], %1
  3538 000008F4 E8C600              <7>  call proc_prtch
  3539                              <7>  stkclose 1
  3540 000008F7 83C401              <8>  add word sp, %1
  3541                              <6> 	.end:
  3542                              <6> 	
  3543 000008FA C3                  <6> 	ret
  3544                              <6> 	
  3545                              <6> proc_prthex8:
  3546 000008FB 89E0                <6> 	mov ax,sp
  3547 000008FD 89C5                <6> 	mov bp,ax
  3548 000008FF 8A4602              <6> 	mov byte al, [bp+2]
  3549 00000902 3C00                <6> 	cmp al, 0
  3550 00000904 752B                <6> 	jnz .nzero
  3551                              <6> 		__prtch 30h
  3552                              <7>  stkopen 1
  3553 00000906 83EC01              <8>  sub word sp, %1
  3554 00000909 54                  <8>  push sp
  3555 0000090A 5D                  <8>  pop bp
  3556 0000090B C6460030            <7>  mov byte [ bp ], %1
  3557 0000090F E8AB00              <7>  call proc_prtch
  3558                              <7>  stkclose 1
  3559 00000912 83C401              <8>  add word sp, %1
  3560                              <6> 		
  3561 00000915 89E0                <6> 		mov ax,sp
  3562 00000917 89C5                <6> 		mov bp,ax
  3563 00000919 8A4603              <6> 		mov byte al, [bp+3]		
  3564 0000091C 3C00                <6> 		cmp al, FALSE
  3565 0000091E 7476                <6> 		je .end
  3566                              <6> 			__prtch 30h
  3567                              <7>  stkopen 1
  3568 00000920 83EC01              <8>  sub word sp, %1
  3569 00000923 54                  <8>  push sp
  3570 00000924 5D                  <8>  pop bp
  3571 00000925 C6460030            <7>  mov byte [ bp ], %1
  3572 00000929 E89100              <7>  call proc_prtch
  3573                              <7>  stkclose 1
  3574 0000092C 83C401              <8>  add word sp, %1
  3575 0000092F EB65                <6> 			jmp .end		
  3576                              <6> 	.nzero:
  3577                              <6> 
  3578 00000931 B000                <6> 	mov byte al, FALSE
  3579 00000933 50                  <6> 	push ax
  3580                              <6> 
  3581 00000934 89E0                <6> 	mov ax,sp
  3582 00000936 89C5                <6> 	mov bp,ax
  3583 00000938 8A5E04              <6> 	mov byte bl, [bp+4]
  3584 0000093B B102                <6> 	mov cl,2
  3585                              <6> 	.l1:
  3586 0000093D 80F900              <6> 		cmp cl,0
  3587 00000940 7453                <6> 		jz .l2
  3588                              <6> 		
  3589 00000942 B002                <6> 		mov al,2
  3590 00000944 28C8                <6> 		sub al,cl
  3591                              <6> 		
  3592 00000946 88DA                <6> 		mov dl, bl	
  3593                              <6> 		
  3594                              <6> 		.l1.1:
  3595 00000948 3C00                <6> 			cmp al,0
  3596 0000094A 7407                <6> 			jz .l1.2
  3597                              <6> 							
  3598 0000094C C0E204              <6> 			shl dl,4
  3599                              <6> 			
  3600 0000094F FEC8                <6> 			dec al
  3601 00000951 EBF5                <6> 			jmp .l1.1
  3602                              <6> 		.l1.2:
  3603                              <6> 						
  3604 00000953 C0EA04              <6> 		shr dl,4
  3605                              <6> 
  3606 00000956 89E0                <6> 		mov ax,sp
  3607 00000958 89C5                <6> 		mov bp,ax			
  3608 0000095A 8A4605              <6> 		mov byte al, [bp+5]
  3609 0000095D 3C01                <6> 		cmp al, TRUE
  3610 0000095F 7413                <6> 		je .endzero		
  3611 00000961 80FA00              <6> 			cmp dl,0
  3612 00000964 7402                <6> 			jz .zero
  3613 00000966 EB08                <6> 			jmp .notzero
  3614                              <6> 			.zero:
  3615 00000968 58                  <6> 				pop ax
  3616 00000969 50                  <6> 				push ax
  3617 0000096A 3C01                <6> 				cmp al, TRUE				
  3618 0000096C 7406                <6> 				je .endzero
  3619 0000096E EB21                <6> 				jmp .dec
  3620                              <6> 			.notzero:
  3621 00000970 58                  <6> 				pop ax
  3622 00000971 B001                <6> 				mov al, TRUE	
  3623 00000973 50                  <6> 				push ax				
  3624                              <6> 		.endzero:
  3625                              <6> 						
  3626 00000974 80FA09              <6> 		cmp dl,9
  3627 00000977 7603                <6> 		jbe .endsumseven  		
  3628 00000979 80C207              <6> 		add dl,7
  3629                              <6> 		.endsumseven:
  3630                              <6> 						
  3631 0000097C 80C230              <6> 		add dl,30h
  3632                              <6> 
  3633 0000097F 51                  <6> 		push cx
  3634 00000980 52                  <6> 		push dx
  3635                              <6> 		__prtch dl
  3636                              <7>  stkopen 1
  3637 00000981 83EC01              <8>  sub word sp, %1
  3638 00000984 54                  <8>  push sp
  3639 00000985 5D                  <8>  pop bp
  3640 00000986 885600              <7>  mov byte [ bp ], %1
  3641 00000989 E83100              <7>  call proc_prtch
  3642                              <7>  stkclose 1
  3643 0000098C 83C401              <8>  add word sp, %1
  3644 0000098F 5A                  <6> 		pop dx
  3645 00000990 59                  <6> 		pop cx	
  3646                              <6> 
  3647                              <6> 		.dec:
  3648                              <6> 	
  3649 00000991 FEC9                <6> 		dec cl
  3650 00000993 EBA8                <6> 		jmp .l1	
  3651                              <6> 	.l2:
  3652                              <6> 	
  3653 00000995 58                  <6> 	pop ax
  3654                              <6> 	
  3655                              <6> 	.end:
  3656                              <6> 	
  3657 00000996 C3                  <6> 	ret
  3658                              <6> 
  3659                              <6> proc_prtstr:
  3660 00000997 89E0                <6> 	mov ax,sp
  3661 00000999 89C5                <6> 	mov bp,ax
  3662                              <6> 	
  3663 0000099B 8B4602              <6> 	mov ax, [bp+2]
  3664 0000099E 8ED8                <6> 	mov ds, ax
  3665 000009A0 8B7604              <6> 	mov si, [bp+4]						
  3666                              <6> 	.loop:
  3667 000009A3 AC                  <6> 		lodsb
  3668 000009A4 3C00                <6> 		cmp al,0h
  3669 000009A6 7414                <6> 		jz .done
  3670                              <6> 		
  3671 000009A8 1E                  <6> 		push ds
  3672 000009A9 56                  <6> 		push si
  3673                              <6> 					
  3674                              <6> 		__prtch al										
  3675                              <7>  stkopen 1
  3676 000009AA 83EC01              <8>  sub word sp, %1
  3677 000009AD 54                  <8>  push sp
  3678 000009AE 5D                  <8>  pop bp
  3679 000009AF 884600              <7>  mov byte [ bp ], %1
  3680 000009B2 E80800              <7>  call proc_prtch
  3681                              <7>  stkclose 1
  3682 000009B5 83C401              <8>  add word sp, %1
  3683                              <6> 									
  3684 000009B8 5E                  <6> 		pop si
  3685 000009B9 1F                  <6> 		pop ds
  3686                              <6> 											
  3687 000009BA EBE7                <6> 		jmp .loop 
  3688                              <6> 	.done:
  3689                              <6> 	
  3690 000009BC C3                  <6> 	ret	
  3691                              <6> 	
  3692                              <6> proc_prtch:
  3693 000009BD 89E0                <6> 	mov ax,sp
  3694 000009BF 89C5                <6> 	mov bp,ax
  3695                              <6> 
  3696 000009C1 8A4602              <6> 	mov al,[bp+2]
  3697 000009C4 B40E                <6> 	mov ah,0Eh
  3698 000009C6 B700                <6> 	mov bh,00h
  3699 000009C8 CD10                <6> 	int 10h	
  3700                              <6> 	
  3701 000009CA C3                  <6> 	ret
  3702                              <6> 
  3703                              <6> proc_prtln:
  3704 000009CB B403                <6> 	mov ah,03h
  3705 000009CD B700                <6> 	mov bh,00h
  3706 000009CF CD10                <6> 	int 10h
  3707                              <6> 	
  3708 000009D1 B402                <6> 	mov ah,02h
  3709 000009D3 FEC6                <6> 	inc dh
  3710 000009D5 B200                <6> 	mov dl,00h
  3711 000009D7 CD10                <6> 	int 10h	
  3712                              <6> 	
  3713 000009D9 C3                  <6> 	ret
  3714                              <6> 	
  3715                              <6> %endif
  3716                              <5>  	%include "lib/system.mac"
  3717                              <6>  
  3718                              <6> %ifndef SYSTEM_MAC
  3719                              <6>  	%define SYSTEM_MAC
  3720                              <6>  	
  3721                              <6> 	%ifndef TRUE
  3722                              <6> 		%define TRUE 01h
  3723                              <6> 	%endif
  3724                              <6> 	%ifndef FALSE
  3725                              <6> 		%define FALSE 00h
  3726                              <6> 	%endif
  3727                              <6> 	
  3728                              <6> %macro vlodsb 3
  3729                              <6> 	vlodsb cs, %1, %2, %3
  3730                              <6> %endmacro
  3731                              <6> 
  3732                              <6> %macro vstosb 3
  3733                              <6> 	vstosb cs, %1, %2, %3
  3734                              <6> %endmacro
  3735                              <6> 	 	
  3736                              <6> %macro int16toreg 2
  3737                              <6> 	int16toreg cs, %1, %2
  3738                              <6> %endmacro
  3739                              <6> 
  3740                              <6> %macro regtoint16 2
  3741                              <6> 	regtoint16 %1, cs, %2
  3742                              <6> %endmacro
  3743                              <6> 
  3744                              <6> %macro vstosb 4
  3745                              <6> 	push %1
  3746                              <6> 	pop ds
  3747                              <6> 	mov si,%2
  3748                              <6> 	add si,%3
  3749                              <6> 	mov byte [si],%4	
  3750                              <6> %endmacro
  3751                              <6> 
  3752                              <6> %macro vlodsb 4
  3753                              <6> 	push %1
  3754                              <6> 	pop ds
  3755                              <6> 	mov si,%2
  3756                              <6> 	add si,%3
  3757                              <6> 	mov byte %4,[si]	
  3758                              <6> %endmacro 	 
  3759                              <6> 
  3760                              <6> %macro int16toreg 3
  3761                              <6> 	push %2
  3762                              <6> 	push %1
  3763                              <6> 	pop ds
  3764                              <6> 	pop si
  3765                              <6> 	mov word %3,[si]	
  3766                              <6> %endmacro
  3767                              <6> 
  3768                              <6> %macro regtoint16 3
  3769                              <6> 	push %3
  3770                              <6> 	push %2
  3771                              <6> 	pop ds
  3772                              <6> 	pop si
  3773                              <6> 	mov word [si],%1	
  3774                              <6> %endmacro
  3775                              <6> 
  3776                              <6> %macro mov32 2
  3777                              <6> 	mov32 cs, %1, cs, %2
  3778                              <6> %endmacro
  3779                              <6> 
  3780                              <6> %macro mov16 2
  3781                              <6> 	mov16 cs, %1, cs, %2
  3782                              <6> %endmacro
  3783                              <6> 
  3784                              <6> %macro mov32 4
  3785                              <6> 	mov ax,%3
  3786                              <6> 	mov ds,ax
  3787                              <6> 	mov cx,[%4+2]
  3788                              <6> 	mov dx,[%4]
  3789                              <6> 	mov ax,%1
  3790                              <6> 	mov ds,ax
  3791                              <6> 	mov [%2+2],cx
  3792                              <6> 	mov [%2],dx
  3793                              <6> %endmacro
  3794                              <6> 
  3795                              <6> %macro mov16 4
  3796                              <6> 	mov ax,%3
  3797                              <6> 	mov ds,ax
  3798                              <6> 	mov bx,[%4]
  3799                              <6> 	mov ax,%1
  3800                              <6> 	mov ds,ax
  3801                              <6> 	mov [%2],bx
  3802                              <6> %endmacro
  3803                              <6>  	 	
  3804                              <6> %macro mformat 4
  3805                              <6> 	stkopen 8
  3806                              <6> 	mov word [ bp + 0 ], %1
  3807                              <6> 	mov word [ bp + 2 ], %2
  3808                              <6> 	mov word [ bp + 4 ], %3
  3809                              <6> 	mov word [ bp + 6 ], %4
  3810                              <6> 	call kernel_segment:mformat
  3811                              <6> 	stkclose 8
  3812                              <6> %endmacro
  3813                              <6> 
  3814                              <6> %macro malloc 6
  3815                              <6> 	stkopen 0Bh
  3816                              <6> 	mov word [ bp + 4 ], %3
  3817                              <6> 	mov word [ bp + 6 ], %4
  3818                              <6> 	mov word [ bp + 8 ], %5	
  3819                              <6> 	call kernel_segment:malloc
  3820                              <6> 	push sp
  3821                              <6> 	pop bp
  3822                              <6> 	mov word %1, [ bp ]
  3823                              <6> 	mov word %2, [ bp + 2 ]
  3824                              <6> 	mov byte %6, [ bp + 0x0A ]
  3825                              <6> 	stkclose 0Bh
  3826                              <6> %endmacro 	
  3827                              <6> 
  3828                              <6> %macro laddr 2
  3829                              <6> 	laddr %1, %2, %1, %2
  3830                              <6> %endmacro
  3831                              <6> 
  3832                              <6> %macro faddr 2
  3833                              <6> 	faddr %1, %2, %1, %2
  3834                              <6> %endmacro
  3835                              <6>  	
  3836                              <6> %macro laddr 4
  3837                              <6> 	stkopen 8
  3838                              <6> 	mov word [ bp + 4 ], %3
  3839                              <6> 	mov word [ bp + 6 ], %4	
  3840                              <6> 	call kernel_segment:laddr
  3841                              <6> 	push sp
  3842                              <6> 	pop bp
  3843                              <6> 	mov word %1, [ bp + 0 ]
  3844                              <6> 	mov word %2, [ bp + 2 ]	
  3845                              <6> 	stkclose 8
  3846                              <6> %endmacro
  3847                              <6> 
  3848                              <6> %macro faddr 4
  3849                              <6> 	stkopen 8
  3850                              <6> 	mov word [ bp + 4 ], %3
  3851                              <6> 	mov word [ bp + 6 ], %4	
  3852                              <6> 	call kernel_segment:faddr
  3853                              <6> 	push sp
  3854                              <6> 	pop bp
  3855                              <6> 	mov word %1, [ bp + 0 ]
  3856                              <6> 	mov word %2, [ bp + 2 ]	
  3857                              <6> 	stkclose 8
  3858                              <6> %endmacro	
  3859                              <6>  
  3860                              <6> 
  3861                              <6> %macro stkopen 1		
  3862                              <6> 	sub word sp, %1
  3863                              <6> 	push sp
  3864                              <6> 	pop bp
  3865                              <6> %endmacro
  3866                              <6> 
  3867                              <6> %macro stkclose 1
  3868                              <6> 	add word sp, %1
  3869                              <6> %endmacro
  3870                              <6> 
  3871                              <6> %macro stkload 1-* 	
  3872                              <6>  	%rep %0
  3873                              <6>  	 	%rotate -1
  3874                              <6>  		pop %1
  3875                              <6>  	%endrep
  3876                              <6>  	%rep %0
  3877                              <6>  		push %1
  3878                              <6>  		%rotate 1
  3879                              <6>  	%endrep
  3880                              <6> %endmacro
  3881                              <6> 
  3882                              <6> %macro stkpush 1-* 	
  3883                              <6>  	%rep %0
  3884                              <6>  		push %1
  3885                              <6>  		%rotate 1
  3886                              <6>  	%endrep 	
  3887                              <6> %endmacro
  3888                              <6>  
  3889                              <6> %macro stkpop 1-*
  3890                              <6>  	%rep %0
  3891                              <6>  	 	%rotate -1
  3892                              <6>  		pop %1
  3893                              <6>  	%endrep 	 	
  3894                              <6> %endmacro
  3895                              <6> 
  3896                              <6> %endif 
  3897                              <5> 
  3898                              <5> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  3899                              <5> %macro printf 1-*	
  3900                              <5> 	%rep %0					
  3901                              <5> 		__printf %1
  3902                              <5> 		%rotate 1		
  3903                              <5> 	%endrep
  3904                              <5> %endmacro	
  3905                              <5> 
  3906                              <5> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  3907                              <5> %macro __printf 1
  3908                              <5> 	section .data
  3909                              <5> 		%%str: db %1,0
  3910                              <5> 	section .text
  3911                              <5> 		prtstr cs, %%str				
  3912                              <5> %endmacro
  3913                              <5> 
  3914                              <5> %macro prtstr 2
  3915                              <5> 	stkopen 4
  3916                              <5> 	mov word [bp], %1
  3917                              <5> 	mov word [bp+2], %2
  3918                              <5> 	call proc_prtstr
  3919                              <5> 	stkclose 4
  3920                              <5> %endmacro
  3921                              <5> 
  3922                              <5> 
  3923                              <5> %macro prtIEEE754 1
  3924                              <5> 	prtIEEE754 cs, %1
  3925                              <5> %endmacro
  3926                              <5> 
  3927                              <5> %macro prtIEEE754 2
  3928                              <5> 	stkopen 4
  3929                              <5> 	mov ax,%1
  3930                              <5> 	mov ds,ax
  3931                              <5> 	mov ax, [%2+2]
  3932                              <5> 	mov word [bp+0], ax
  3933                              <5> 	mov ax, [%2]
  3934                              <5> 	mov word [bp+2], ax
  3935                              <5> 	call proc_prtIEEE754
  3936                              <5> 	stkclose 4
  3937                              <5> %endmacro
  3938                              <5> 
  3939                              <5> %macro prtbool 1	
  3940                              <5> 	cmp byte %1, TRUE
  3941                              <5> 	je .true
  3942                              <5> 	jmp .false
  3943                              <5> 	.true:
  3944                              <5> 		prtf "true"
  3945                              <5> 		jmp .endcmp
  3946                              <5> 	.false:
  3947                              <5> 		prtf "false"
  3948                              <5> 	.endcmp:	
  3949                              <5> %endmacro
  3950                              <5> 
  3951                              <5> %macro prtptr 2-3 TRUE
  3952                              <5> 	stkopen 3
  3953                              <5> 	mov word [ bp + 0 ], %2
  3954                              <5> 	mov byte [ bp + 2 ], %3
  3955                              <5> 	prthex16 %1, %3
  3956                              <5> 	writechar ':'
  3957                              <5> 	push sp
  3958                              <5> 	pop bp
  3959                              <5> 	mov word ax, [ bp + 0 ]
  3960                              <5> 	mov byte bl, [ bp + 2 ]
  3961                              <5> 	prthex16 ax, bl
  3962                              <5> 	stkclose 3
  3963                              <5> %endmacro
  3964                              <5> 
  3965                              <5> %macro prtfptr 2-3 TRUE
  3966                              <5> 	stkopen 3
  3967                              <5> 	mov word [ bp + 0 ], %1
  3968                              <5> 	mov byte [ bp + 2 ], %3
  3969                              <5> 	prthex16 %2, %3
  3970                              <5> 	push sp
  3971                              <5> 	pop bp
  3972                              <5> 	mov word ax, [ bp + 0 ]
  3973                              <5> 	mov byte bl, [ bp + 2 ]
  3974                              <5> 	prthex16 ax, bl
  3975                              <5> 	stkclose 3
  3976                              <5> %endmacro
  3977                              <5> 
  3978                              <5> %macro prtbin32 1
  3979                              <5> 	prtbin32 cs, %1
  3980                              <5> %endmacro
  3981                              <5> 
  3982                              <5> %macro prtbin32 2
  3983                              <5> 	mov ax,%1
  3984                              <5> 	mov ds,ax
  3985                              <5> 	mov word ax,[%2+2]
  3986                              <5> 	prtbin16 ax
  3987                              <5> 	prtch 20h
  3988                              <5> 	mov ax,%1
  3989                              <5> 	mov ds,ax
  3990                              <5> 	mov word ax,[%2]
  3991                              <5> 	prtbin16 ax
  3992                              <5> %endmacro
  3993                              <5> 
  3994                              <5> %macro prthex32 1
  3995                              <5> 	prthex32 cs, %1
  3996                              <5> %endmacro
  3997                              <5> 
  3998                              <5> %macro iprthex32 1
  3999                              <5> 	iprthex32 cs, %1
  4000                              <5> %endmacro
  4001                              <5> 
  4002                              <5> %macro prthex32 2
  4003                              <5> 	mov ax,%1
  4004                              <5> 	mov ds,ax
  4005                              <5> 	mov word ax,[%2+2]
  4006                              <5> 	prthex16 ax	
  4007                              <5> 	mov ax,%1
  4008                              <5> 	mov ds,ax
  4009                              <5> 	mov word ax,[%2]
  4010                              <5> 	prthex16 ax
  4011                              <5> %endmacro
  4012                              <5> 
  4013                              <5> %macro iprthex32 2
  4014                              <5> 	mov ax,%1
  4015                              <5> 	mov ds,ax
  4016                              <5> 	mov word ax,[%2+2]
  4017                              <5> 	mov word bx,ax
  4018                              <5> 	and ax,0x7FFF
  4019                              <5> 	push ax
  4020                              <5> 	and bx,0x8000
  4021                              <5> 	cmp bx,0
  4022                              <5> 	jz %%prt
  4023                              <5> 		prtch '-'		
  4024                              <5> 	%%prt:	
  4025                              <5> 	pop ax
  4026                              <5> 	prthex16 ax
  4027                              <5> 	mov ax,%1
  4028                              <5> 	mov ds,ax
  4029                              <5> 	mov word ax,[%2]
  4030                              <5> 	prthex16 ax	
  4031                              <5> %endmacro
  4032                              <5> 
  4033                              <5> %macro prtsubbin8 3
  4034                              <5> 	__prtsubbin8 %1,%2,%3
  4035                              <5> %endmacro
  4036                              <5> 
  4037                              <5> %macro prtbin16 1
  4038                              <5> 	stkopen 3
  4039                              <5> 	mov word [bp], %1
  4040                              <5> 	mov byte [bp+2], TRUE
  4041                              <5> 	call proc_prtbin16
  4042                              <5> 	stkclose 3
  4043                              <5> %endmacro
  4044                              <5> 
  4045                              <5> %macro prtbin8 1
  4046                              <5> 	stkopen 2
  4047                              <5> 	mov byte [bp], %1
  4048                              <5> 	mov byte [bp+1], TRUE
  4049                              <5> 	call proc_prtbin8
  4050                              <5> 	stkclose 2
  4051                              <5> %endmacro
  4052                              <5> 
  4053                              <5> %macro prthex16 1
  4054                              <5> 	stkopen 3
  4055                              <5> 	mov word [bp], %1
  4056                              <5> 	mov byte [bp+2], TRUE
  4057                              <5> 	call proc_prthex16
  4058                              <5> 	stkclose 3
  4059                              <5> %endmacro
  4060                              <5> 
  4061                              <5> %macro prthex8 1
  4062                              <5> 	stkopen 2
  4063                              <5> 	mov byte [bp], %1
  4064                              <5> 	mov byte [bp+1], TRUE
  4065                              <5> 	call proc_prthex8
  4066                              <5> 	stkclose 2
  4067                              <5> %endmacro
  4068                              <5> 
  4069                              <5> %macro prtch 1
  4070                              <5> 	__prtch %1
  4071                              <5> %endmacro
  4072                              <5> 
  4073                              <5> %macro prtln 0
  4074                              <5> 	__prtln
  4075                              <5> %endmacro	
  4076                              <5> 
  4077                              <5> 
  4078                              <5> %macro prtstk 0
  4079                              <5> 	printf "stack ---> "
  4080                              <5> 	mov ax,sp
  4081                              <5> 	prthex16 ax
  4082                              <5> %endmacro  
  4083                              <5> 
  4084                              <5> %endif
  4085                              <4> 	
  4086                              <4> %macro __fltoint16 3
  4087                              <4> 	stkopen 0x06
  4088                              <4> 	mov word [bp+0],%1
  4089                              <4> 	mov word [bp+2],%2
  4090                              <4> 	call proc_fltoint16
  4091                              <4> 	push sp
  4092                              <4> 	pop bp
  4093                              <4> 	mov word %3,[bp+4]
  4094                              <4> 	stkclose 0x06
  4095                              <4> %endmacro
  4096                              <4> 
  4097                              <4> %macro __flroundtoint16 3
  4098                              <4> 	stkopen 0x06
  4099                              <4> 	mov word [bp+0],%1
  4100                              <4> 	mov word [bp+2],%2
  4101                              <4> 	call proc_flroundtoint16
  4102                              <4> 	push sp
  4103                              <4> 	pop bp
  4104                              <4> 	mov word %3,[bp+4]
  4105                              <4> 	stkclose 0x06
  4106                              <4> %endmacro
  4107                              <4> 
  4108                              <4> %macro __int16tofl 3	
  4109                              <4> 	stkopen 0x06
  4110                              <4> 	mov word [bp+0],%1
  4111                              <4> 	call proc_int16tofl
  4112                              <4> 	push sp
  4113                              <4> 	pop bp
  4114                              <4> 	mov word %2,[bp+2]
  4115                              <4> 	mov word %3,[bp+4]
  4116                              <4> 	stkclose 0x06
  4117                              <4> %endmacro
  4118                              <4> 		
  4119                              <4> %macro __flroundtoint32 4
  4120                              <4> 	stkopen 0x08
  4121                              <4> 	mov word [bp+0],%1
  4122                              <4> 	mov word [bp+2],%2
  4123                              <4> 	call proc_flroundtoint32
  4124                              <4> 	push sp
  4125                              <4> 	pop bp
  4126                              <4> 	mov word %3,[bp+4]
  4127                              <4> 	mov word %4,[bp+6]
  4128                              <4> 	stkclose 0x08
  4129                              <4> %endmacro		
  4130                              <4> 		
  4131                              <4> %macro __fltoint32 4
  4132                              <4> 	stkopen 0x08
  4133                              <4> 	mov word [bp+0],%1
  4134                              <4> 	mov word [bp+2],%2
  4135                              <4> 	call proc_fltoint32
  4136                              <4> 	push sp
  4137                              <4> 	pop bp
  4138                              <4> 	mov word %3,[bp+4]
  4139                              <4> 	mov word %4,[bp+6]
  4140                              <4> 	stkclose 0x08
  4141                              <4> %endmacro
  4142                              <4> 
  4143                              <4> %macro __int32tofl 4
  4144                              <4> 	stkopen 0x08
  4145                              <4> 	mov word [bp+0],%1
  4146                              <4> 	mov word [bp+2],%2
  4147                              <4> 	call proc_int32tofl
  4148                              <4> 	push sp
  4149                              <4> 	pop bp
  4150                              <4> 	mov word %3,[bp+4]
  4151                              <4> 	mov word %4,[bp+6]
  4152                              <4> 	stkclose 0x08
  4153                              <4> %endmacro
  4154                              <4> 
  4155                              <4> %macro __flcmp 5
  4156                              <4> 	stkopen 0x09
  4157                              <4> 	mov word [bp+0],%1
  4158                              <4> 	mov word [bp+2],%2
  4159                              <4> 	mov word [bp+4],%3
  4160                              <4> 	mov word [bp+6],%4
  4161                              <4> 	call proc_flcmp
  4162                              <4> 	push sp
  4163                              <4> 	pop bp
  4164                              <4> 	mov byte %5, [bp+8]
  4165                              <4> 	stkclose 0x09
  4166                              <4> %endmacro
  4167                              <4> 	
  4168                              <4> %macro __flshl 1
  4169                              <4> 	stkopen 0x02
  4170                              <4> 	mov word [bp+0],%1
  4171                              <4> 	call proc_flshl
  4172                              <4> 	push sp
  4173                              <4> 	pop bp
  4174                              <4> 	mov word %1,[bp+0]
  4175                              <4> 	stkclose 0x02
  4176                              <4> %endmacro	
  4177                              <4> 
  4178                              <4> %macro __flshr 1
  4179                              <4> 	stkopen 0x02
  4180                              <4> 	mov word [bp+0],%1
  4181                              <4> 	call proc_flshr
  4182                              <4> 	push sp
  4183                              <4> 	pop bp
  4184                              <4> 	mov word %1,[bp+0]
  4185                              <4> 	stkclose 0x02
  4186                              <4> %endmacro	
  4187                              <4> 	
  4188                              <4> %macro __flinvsig 1
  4189                              <4> 	stkopen 0x02
  4190                              <4> 	mov word [bp+0],%1
  4191                              <4> 	call proc_flinvsig
  4192                              <4> 	push sp
  4193                              <4> 	pop bp
  4194                              <4> 	mov word %1, [bp+0]
  4195                              <4> 	stkclose 0x02
  4196                              <4> %endmacro
  4197                              <4> 
  4198                              <4> %macro __flsetsig 1
  4199                              <4> 	stkopen 0x04
  4200                              <4> 	mov word [bp+0],%1
  4201                              <4> 	mov word [bp+2],0x8000
  4202                              <4> 	call proc_flsetsig
  4203                              <4> 	push sp
  4204                              <4> 	pop bp
  4205                              <4> 	mov word %1, [bp+0]
  4206                              <4> 	stkclose 0x04
  4207                              <4> %endmacro	
  4208                              <4> 
  4209                              <4> %macro __flclearsig 1
  4210                              <4> 	stkopen 0x04
  4211                              <4> 	mov word [bp+0],%1
  4212                              <4> 	mov word [bp+2],0
  4213                              <4> 	call proc_flclrsig
  4214                              <4> 	push sp
  4215                              <4> 	pop bp
  4216                              <4> 	mov word %1, [bp+0]
  4217                              <4> 	stkclose 0x04
  4218                              <4> %endmacro		
  4219                              <4> 	
  4220                              <4> %macro __fladd 6
  4221                              <4> 	stkopen 0x0E
  4222                              <4> 	mov word [bp+0],%1
  4223                              <4> 	mov word [bp+2],%2
  4224                              <4> 	mov word [bp+4],%3
  4225                              <4> 	mov word [bp+6],%4
  4226                              <4> 	mov word [bp+0x0C],0
  4227                              <4> 	call proc_fladdorsub
  4228                              <4> 	push sp
  4229                              <4> 	pop bp
  4230                              <4> 	mov word %5,[bp+8]
  4231                              <4> 	mov word %6,[bp+0x0A]
  4232                              <4> 	stkclose 0x0E
  4233                              <4> %endmacro
  4234                              <4> 
  4235                              <4> %macro __flsub 6
  4236                              <4> 	stkopen 0x0E
  4237                              <4> 	mov word [bp+0],%1
  4238                              <4> 	mov word [bp+2],%2
  4239                              <4> 	mov word [bp+4],%3
  4240                              <4> 	mov word [bp+6],%4
  4241                              <4> 	mov word [bp+0x0C],0x8000
  4242                              <4> 	call proc_fladdorsub
  4243                              <4> 	push sp
  4244                              <4> 	pop bp
  4245                              <4> 	mov word %5,[bp+8]
  4246                              <4> 	mov word %6,[bp+0x0A]
  4247                              <4> 	stkclose 0x0E
  4248                              <4> %endmacro
  4249                              <4> 
  4250                              <4> %macro __flmul 6
  4251                              <4> 	stkopen 0x0E
  4252                              <4> 	mov word [bp+0],%1
  4253                              <4> 	mov word [bp+2],%2
  4254                              <4> 	mov word [bp+4],%3
  4255                              <4> 	mov word [bp+6],%4
  4256                              <4> 	call proc_flmul
  4257                              <4> 	push sp
  4258                              <4> 	pop bp
  4259                              <4> 	mov word %5,[bp+8]
  4260                              <4> 	mov word %6,[bp+0x0A]
  4261                              <4> 	stkclose 0x0E
  4262                              <4> %endmacro
  4263                              <4> 
  4264                              <4> %macro __fldiv 6
  4265                              <4> 	stkopen 0x0E
  4266                              <4> 	mov word [bp+0],%1
  4267                              <4> 	mov word [bp+2],%2
  4268                              <4> 	mov word [bp+4],%3
  4269                              <4> 	mov word [bp+6],%4
  4270                              <4> 	call proc_fldiv
  4271                              <4> 	push sp
  4272                              <4> 	pop bp
  4273                              <4> 	mov word %5,[bp+8]
  4274                              <4> 	mov word %6,[bp+0x0A]
  4275                              <4> 	stkclose 0x0E
  4276                              <4> %endmacro
  4277                              <4> 
  4278                              <4> %macro __validate 7
  4279                              <4> 	stkopen 0x0D
  4280                              <4> 	mov word [bp+0],%1
  4281                              <4> 	mov word [bp+2],%2
  4282                              <4> 	mov word [bp+4],%3
  4283                              <4> 	mov word [bp+6],%4
  4284                              <4> 	call proc__validate
  4285                              <4> 	push sp
  4286                              <4> 	pop bp
  4287                              <4> 	mov word %5,[bp+8]
  4288                              <4> 	mov word %6,[bp+0x0A]
  4289                              <4> 	mov byte %7,[bp+0x0C]
  4290                              <4> 	stkclose 0x0D
  4291                              <4> %endmacro
  4292                              <4> 
  4293                              <4> %macro __div_validate 7
  4294                              <4> 	stkopen 0x0D
  4295                              <4> 	mov word [bp+0],%1
  4296                              <4> 	mov word [bp+2],%2
  4297                              <4> 	mov word [bp+4],%3
  4298                              <4> 	mov word [bp+6],%4
  4299                              <4> 	call proc__div_validate
  4300                              <4> 	push sp
  4301                              <4> 	pop bp
  4302                              <4> 	mov word %5,[bp+8]
  4303                              <4> 	mov word %6,[bp+0x0A]
  4304                              <4> 	mov byte %7,[bp+0x0C]
  4305                              <4> 	stkclose 0x0D
  4306                              <4> %endmacro
  4307                              <4> 
  4308                              <4> %macro __mul_validate 5
  4309                              <4> 	stkopen 0x09
  4310                              <4> 	mov word [bp+0],%1
  4311                              <4> 	mov word [bp+2],%2
  4312                              <4> 	call proc__mul_validate
  4313                              <4> 	push sp
  4314                              <4> 	pop bp
  4315                              <4> 	mov word %3,[bp+4]
  4316                              <4> 	mov word %4,[bp+6]
  4317                              <4> 	mov byte %5,[bp+8]
  4318                              <4> 	stkclose 0x09
  4319                              <4> %endmacro
  4320                              <4> 
  4321                              <4> %macro __addorsub_validate 7
  4322                              <4> 	stkopen 0x0D
  4323                              <4> 	mov word [bp+0],%1
  4324                              <4> 	mov word [bp+2],%2
  4325                              <4> 	mov word [bp+4],%3
  4326                              <4> 	mov word [bp+6],%4
  4327                              <4> 	call proc__addorsub_validate
  4328                              <4> 	push sp
  4329                              <4> 	pop bp
  4330                              <4> 	mov word %5,[bp+8]
  4331                              <4> 	mov word %6,[bp+0x0A]
  4332                              <4> 	mov byte %7,[bp+0x0C]
  4333                              <4> 	stkclose 0x0D
  4334                              <4> %endmacro
  4335                              <4> 
  4336                              <4> %macro __cmp_validate 4
  4337                              <4> 	stkopen 0x06
  4338                              <4> 	mov word [bp+0],%1
  4339                              <4> 	mov word [bp+2],%2
  4340                              <4> 	call proc__cmp_validate
  4341                              <4> 	push sp
  4342                              <4> 	pop bp
  4343                              <4> 	mov byte %3, [bp+4]
  4344                              <4> 	mov byte %4, [bp+5]
  4345                              <4> 	stkclose 0x06
  4346                              <4> %endmacro
  4347                              <4> 
  4348                              <4> %macro __iaddorsub32 7
  4349                              <4> 	stkopen 0x0D
  4350                              <4> 	mov word [bp+0],%1
  4351                              <4> 	mov word [bp+2],%2
  4352                              <4> 	mov word [bp+4],%3
  4353                              <4> 	mov word [bp+6],%4
  4354                              <4> 	mov word [bp+0x0C], %7
  4355                              <4> 	call proc__iaddorsub32
  4356                              <4> 	push sp
  4357                              <4> 	pop bp
  4358                              <4> 	mov word %5,[bp+8]
  4359                              <4> 	mov word %6,[bp+0x0A]
  4360                              <4> 	stkclose 0x0D
  4361                              <4> %endmacro
  4362                              <4> 
  4363                              <4> %macro __fldiv32 6
  4364                              <4> 	stkopen 0x11
  4365                              <4> 	mov word [bp+0],%1
  4366                              <4> 	mov word [bp+2],%2
  4367                              <4> 	mov word [bp+4],%3
  4368                              <4> 	mov word [bp+6],%4
  4369                              <4> 	call proc__fldiv32
  4370                              <4> 	push sp
  4371                              <4> 	pop bp
  4372                              <4> 	mov word %5,[bp+8]
  4373                              <4> 	mov word %6,[bp+0x0A]
  4374                              <4> 	stkclose 0x11
  4375                              <4> %endmacro
  4376                              <4> 
  4377                              <4> %macro __mul32_64 8
  4378                              <4> 	stkopen 0x10
  4379                              <4> 	mov word [bp+0],%1
  4380                              <4> 	mov word [bp+2],%2
  4381                              <4> 	mov word [bp+4],%3
  4382                              <4> 	mov word [bp+6],%4
  4383                              <4> 	call proc__mul32_64
  4384                              <4> 	push sp
  4385                              <4> 	pop bp
  4386                              <4> 	mov word %5,[bp+8]
  4387                              <4> 	mov word %6,[bp+0x0A]
  4388                              <4> 	mov word %7,[bp+0x0C]
  4389                              <4> 	mov word %8,[bp+0x0E]
  4390                              <4> 	stkclose 0x10
  4391                              <4> %endmacro
  4392                              <4> 
  4393                              <4> %macro __normalize 3
  4394                              <4> 	stkopen 0x06
  4395                              <4> 	mov word [bp+0],%1
  4396                              <4> 	mov word [bp+2],%2
  4397                              <4> 	mov word [bp+4],%3
  4398                              <4> 	call proc__normalize
  4399                              <4> 	push sp
  4400                              <4> 	pop bp
  4401                              <4> 	mov word %1,[bp+0]
  4402                              <4> 	mov word %2,[bp+2]
  4403                              <4> 	stkclose 0x06
  4404                              <4> %endmacro
  4405                              <4> 
  4406                              <4> section .data
  4407                              <4> 
  4408                              <4> proc_fltoint16:
  4409 000009DA 89E0                <4> 	mov ax,sp
  4410 000009DC 89C5                <4> 	mov bp,ax
  4411                              <4> 	
  4412 000009DE 8B4602              <4> 	mov ax,[bp+2]
  4413 000009E1 8B5E04              <4> 	mov bx,[bp+4]
  4414                              <4> 	__fltoint32 ax, bx, ax, bx
  4415                              <5>  stkopen 0x08
  4416 000009E4 83EC08              <6>  sub word sp, %1
  4417 000009E7 54                  <6>  push sp
  4418 000009E8 5D                  <6>  pop bp
  4419 000009E9 894600              <5>  mov word [bp+0],%1
  4420 000009EC 895E02              <5>  mov word [bp+2],%2
  4421 000009EF E88601              <5>  call proc_fltoint32
  4422 000009F2 54                  <5>  push sp
  4423 000009F3 5D                  <5>  pop bp
  4424 000009F4 8B4604              <5>  mov word %3,[bp+4]
  4425 000009F7 8B5E06              <5>  mov word %4,[bp+6]
  4426                              <5>  stkclose 0x08
  4427 000009FA 83C408              <6>  add word sp, %1
  4428                              <4> 	__int32to16 ax, bx, cx
  4429                              <5>  stkopen 0x06
  4430 000009FD 83EC06              <6>  sub word sp, %1
  4431 00000A00 54                  <6>  push sp
  4432 00000A01 5D                  <6>  pop bp
  4433 00000A02 894600              <5>  mov word [bp+0], %1
  4434 00000A05 895E02              <5>  mov word [bp+2], %2
  4435 00000A08 E814F6              <5>  call proc_int32to16
  4436 00000A0B 54                  <5>  push sp
  4437 00000A0C 5D                  <5>  pop bp
  4438 00000A0D 8B4E04              <5>  mov word %3, [bp+4]
  4439                              <5>  stkclose 0x06
  4440 00000A10 83C406              <6>  add word sp, %1
  4441                              <4> 	
  4442 00000A13 89E0                <4> 	mov ax,sp
  4443 00000A15 89C5                <4> 	mov bp,ax
  4444 00000A17 894E06              <4> 	mov [bp+6],cx
  4445                              <4> 	
  4446 00000A1A C3                  <4> 	ret
  4447                              <4> 	
  4448                              <4> proc_flroundtoint16:
  4449 00000A1B 89E0                <4> 	mov ax,sp
  4450 00000A1D 89C5                <4> 	mov bp,ax
  4451                              <4> 	
  4452 00000A1F 8B4602              <4> 	mov ax,[bp+2]
  4453 00000A22 8B5E04              <4> 	mov bx,[bp+4]
  4454                              <4> 	__flroundtoint32 ax, bx, ax, bx
  4455                              <5>  stkopen 0x08
  4456 00000A25 83EC08              <6>  sub word sp, %1
  4457 00000A28 54                  <6>  push sp
  4458 00000A29 5D                  <6>  pop bp
  4459 00000A2A 894600              <5>  mov word [bp+0],%1
  4460 00000A2D 895E02              <5>  mov word [bp+2],%2
  4461 00000A30 E86A00              <5>  call proc_flroundtoint32
  4462 00000A33 54                  <5>  push sp
  4463 00000A34 5D                  <5>  pop bp
  4464 00000A35 8B4604              <5>  mov word %3,[bp+4]
  4465 00000A38 8B5E06              <5>  mov word %4,[bp+6]
  4466                              <5>  stkclose 0x08
  4467 00000A3B 83C408              <6>  add word sp, %1
  4468                              <4> 	__int32to16 ax, bx, cx
  4469                              <5>  stkopen 0x06
  4470 00000A3E 83EC06              <6>  sub word sp, %1
  4471 00000A41 54                  <6>  push sp
  4472 00000A42 5D                  <6>  pop bp
  4473 00000A43 894600              <5>  mov word [bp+0], %1
  4474 00000A46 895E02              <5>  mov word [bp+2], %2
  4475 00000A49 E8D3F5              <5>  call proc_int32to16
  4476 00000A4C 54                  <5>  push sp
  4477 00000A4D 5D                  <5>  pop bp
  4478 00000A4E 8B4E04              <5>  mov word %3, [bp+4]
  4479                              <5>  stkclose 0x06
  4480 00000A51 83C406              <6>  add word sp, %1
  4481                              <4> 	
  4482 00000A54 89E0                <4> 	mov ax,sp
  4483 00000A56 89C5                <4> 	mov bp,ax
  4484 00000A58 894E06              <4> 	mov [bp+6],cx
  4485                              <4> 	
  4486 00000A5B C3                  <4> 	ret
  4487                              <4> 	
  4488                              <4> proc_int16tofl:
  4489 00000A5C 89E0                <4> 	mov ax,sp
  4490 00000A5E 89C5                <4> 	mov bp,ax
  4491                              <4> 	
  4492 00000A60 8B4602              <4> 	mov ax,[bp+2]
  4493                              <4> 	__int16to32 ax, ax, bx
  4494                              <5>  stkopen 0x06
  4495 00000A63 83EC06              <6>  sub word sp, %1
  4496 00000A66 54                  <6>  push sp
  4497 00000A67 5D                  <6>  pop bp
  4498 00000A68 894600              <5>  mov word [bp+0],%1
  4499 00000A6B E892F5              <5>  call proc_int16to32
  4500 00000A6E 54                  <5>  push sp
  4501 00000A6F 5D                  <5>  pop bp
  4502 00000A70 8B4602              <5>  mov word %2, [bp+2]
  4503 00000A73 8B5E04              <5>  mov word %3, [bp+4]
  4504                              <5>  stkclose 0x06
  4505 00000A76 83C406              <6>  add word sp, %1
  4506                              <4> 	__int32tofl ax, bx, cx, dx
  4507                              <5>  stkopen 0x08
  4508 00000A79 83EC08              <6>  sub word sp, %1
  4509 00000A7C 54                  <6>  push sp
  4510 00000A7D 5D                  <6>  pop bp
  4511 00000A7E 894600              <5>  mov word [bp+0],%1
  4512 00000A81 895E02              <5>  mov word [bp+2],%2
  4513 00000A84 E87501              <5>  call proc_int32tofl
  4514 00000A87 54                  <5>  push sp
  4515 00000A88 5D                  <5>  pop bp
  4516 00000A89 8B4E04              <5>  mov word %3,[bp+4]
  4517 00000A8C 8B5606              <5>  mov word %4,[bp+6]
  4518                              <5>  stkclose 0x08
  4519 00000A8F 83C408              <6>  add word sp, %1
  4520                              <4> 	
  4521 00000A92 89E0                <4> 	mov ax,sp
  4522 00000A94 89C5                <4> 	mov bp,ax
  4523 00000A96 894E04              <4> 	mov [bp+4],cx
  4524 00000A99 895606              <4> 	mov [bp+6],dx
  4525                              <4> 
  4526 00000A9C C3                  <4> 	ret
  4527                              <4> 
  4528                              <4> proc_flroundtoint32:
  4529 00000A9D 89E0                <4> 	mov ax,sp
  4530 00000A9F 89C5                <4> 	mov bp,ax
  4531                              <4> 
  4532 00000AA1 8B4602              <4> 	mov ax,[bp+2]
  4533 00000AA4 8B5E04              <4> 	mov bx,[bp+4]
  4534                              <4> 		
  4535 00000AA7 25FF7F              <4> 	and ax,0x7FFF	
  4536 00000AAA 09D8                <4> 	or ax,bx
  4537 00000AAC 83F800              <4> 	cmp ax,0
  4538 00000AAF 7532                <4> 	jnz .continue
  4539                              <4> 	.zero:
  4540 00000AB1 C746060000          <4> 		mov word [bp+6],0
  4541 00000AB6 C746080000          <4> 		mov word [bp+8],0
  4542 00000ABB E9B900              <4> 		jmp .done
  4543                              <4> 	.one:
  4544 00000ABE 8B4602              <4> 		mov ax,[bp+2]
  4545 00000AC1 250080              <4> 		and ax,0x8000
  4546 00000AC4 83F800              <4> 		cmp ax,0
  4547 00000AC7 750D                <4> 		jnz .oneneg
  4548 00000AC9 C746060000          <4> 			mov word [bp+6], 0
  4549 00000ACE C746080100          <4> 			mov word [bp+8], 1
  4550 00000AD3 E9A100              <4> 			jmp .done
  4551                              <4> 		.oneneg:
  4552 00000AD6 C74606FFFF          <4> 			mov word [bp+6], 0xFFFF
  4553 00000ADB C74608FFFF          <4> 			mov word [bp+8], 0xFFFF					
  4554 00000AE0 E99400              <4> 			jmp .done
  4555                              <4> 	.continue:
  4556                              <4> 	
  4557 00000AE3 8B4E02              <4> 	mov cx,[bp+2]
  4558 00000AE6 D1E1                <4> 	shl cx,1
  4559 00000AE8 80ED7F              <4> 	sub ch,0x7F
  4560 00000AEB 80FDFF              <4> 	cmp ch,0xFF
  4561 00000AEE 7CC1                <4> 	jl .zero
  4562 00000AF0 74CC                <4> 	je .one	
  4563                              <4> 		
  4564 00000AF2 B117                <4> 	mov cl,23	
  4565 00000AF4 38CD                <4> 	cmp ch,cl
  4566 00000AF6 7302                <4> 	jae .endexp
  4567 00000AF8 28E9                <4> 		sub cl,ch
  4568                              <4> 	.endexp:
  4569                              <4> 	
  4570 00000AFA 8B4602              <4> 	mov ax,[bp+2]
  4571 00000AFD 83E07F              <4> 	and ax,0x007F
  4572 00000B00 0D8000              <4> 	or ax,0x0080
  4573                              <4> 	
  4574 00000B03 8B5E04              <4> 	mov bx,[bp+4]		
  4575                              <4> 	
  4576 00000B06 FEC9                <4> 	dec cl
  4577 00000B08 55                  <4> 	push bp	
  4578                              <4> 	__shr32 ax, bx, cl
  4579                              <5>  stkopen 5
  4580 00000B09 83EC05              <6>  sub word sp, %1
  4581 00000B0C 54                  <6>  push sp
  4582 00000B0D 5D                  <6>  pop bp
  4583 00000B0E 894600              <5>  mov word [bp+0], %1
  4584 00000B11 895E02              <5>  mov word [bp+2], %2
  4585 00000B14 884E04              <5>  mov byte [bp+4], %3
  4586 00000B17 E861F8              <5>  call proc_shr32
  4587 00000B1A 54                  <5>  push sp
  4588 00000B1B 5D                  <5>  pop bp
  4589 00000B1C 8B4600              <5>  mov word %1, [bp+0]
  4590 00000B1F 8B5E02              <5>  mov word %2, [bp+2]
  4591                              <5>  stkclose 5
  4592 00000B22 83C405              <6>  add word sp, %1
  4593 00000B25 5D                  <4> 	pop bp
  4594 00000B26 53                  <4> 	push bx
  4595 00000B27 55                  <4> 	push bp
  4596                              <4> 	__shr32 ax, bx, 1
  4597                              <5>  stkopen 5
  4598 00000B28 83EC05              <6>  sub word sp, %1
  4599 00000B2B 54                  <6>  push sp
  4600 00000B2C 5D                  <6>  pop bp
  4601 00000B2D 894600              <5>  mov word [bp+0], %1
  4602 00000B30 895E02              <5>  mov word [bp+2], %2
  4603 00000B33 C6460401            <5>  mov byte [bp+4], %3
  4604 00000B37 E841F8              <5>  call proc_shr32
  4605 00000B3A 54                  <5>  push sp
  4606 00000B3B 5D                  <5>  pop bp
  4607 00000B3C 8B4600              <5>  mov word %1, [bp+0]
  4608 00000B3F 8B5E02              <5>  mov word %2, [bp+2]
  4609                              <5>  stkclose 5
  4610 00000B42 83C405              <6>  add word sp, %1
  4611 00000B45 5D                  <4> 	pop bp			
  4612                              <4> 	
  4613 00000B46 5A                  <4> 	pop dx
  4614 00000B47 83E201              <4> 	and dx,0x0001
  4615 00000B4A 83FA00              <4> 	cmp dx,0
  4616 00000B4D 7404                <4> 	jz .rounded
  4617 00000B4F 43                  <4> 		inc bx
  4618 00000B50 83D000              <4> 		adc ax,0
  4619                              <4> 	.rounded:
  4620                              <4> 				
  4621 00000B53 8B4E02              <4> 	mov cx,[bp+2]
  4622 00000B56 81E10080            <4> 	and cx,0x8000
  4623 00000B5A 83F900              <4> 	cmp cx,0
  4624 00000B5D 7412                <4> 	jz .endneg			
  4625 00000B5F B9FFFF              <4> 		mov cx,0xFFFF
  4626 00000B62 BAFFFF              <4> 		mov dx,0xFFFF
  4627 00000B65 29DA                <4> 		sub dx,bx
  4628 00000B67 19C1                <4> 		sbb cx,ax						
  4629 00000B69 42                  <4> 		inc dx
  4630 00000B6A 83D100              <4> 		adc cx,0
  4631 00000B6D 89C8                <4> 		mov ax,cx
  4632 00000B6F 89D3                <4> 		mov bx,dx		
  4633                              <4> 	.endneg:			
  4634                              <4> 		 
  4635 00000B71 894606              <4> 	mov [bp+6],ax
  4636 00000B74 895E08              <4> 	mov [bp+8],bx
  4637                              <4> 	
  4638                              <4> 	.done:
  4639                              <4> 	
  4640 00000B77 C3                  <4> 	ret
  4641                              <4> 	
  4642                              <4> proc_fltoint32:
  4643 00000B78 89E0                <4> 	mov ax,sp
  4644 00000B7A 89C5                <4> 	mov bp,ax
  4645                              <4> 
  4646 00000B7C 8B4602              <4> 	mov ax,[bp+2]
  4647 00000B7F 8B5E04              <4> 	mov bx,[bp+4]
  4648                              <4> 		
  4649 00000B82 25FF7F              <4> 	and ax,0x7FFF	
  4650 00000B85 09D8                <4> 	or ax,bx
  4651 00000B87 83F800              <4> 	cmp ax,0
  4652 00000B8A 750C                <4> 	jnz .continue
  4653                              <4> 	.zero:
  4654 00000B8C C746060000          <4> 		mov word [bp+6],0
  4655 00000B91 C746080000          <4> 		mov word [bp+8],0
  4656 00000B96 EB63                <4> 		jmp .done
  4657                              <4> 	.continue:
  4658                              <4> 	
  4659 00000B98 8B4E02              <4> 	mov cx,[bp+2]
  4660 00000B9B D1E1                <4> 	shl cx,1
  4661 00000B9D 80ED7F              <4> 	sub ch,0x7F
  4662 00000BA0 80FD00              <4> 	cmp ch,0
  4663 00000BA3 7CE7                <4> 	jl .zero
  4664                              <4> 		
  4665 00000BA5 B117                <4> 	mov cl,23	
  4666 00000BA7 38CD                <4> 	cmp ch,cl
  4667 00000BA9 7302                <4> 	jae .endexp
  4668 00000BAB 28E9                <4> 		sub cl,ch
  4669                              <4> 	.endexp:
  4670                              <4> 	
  4671 00000BAD 8B4602              <4> 	mov ax,[bp+2]
  4672 00000BB0 83E07F              <4> 	and ax,0x007F
  4673 00000BB3 0D8000              <4> 	or ax,0x0080
  4674                              <4> 	
  4675 00000BB6 8B5E04              <4> 	mov bx,[bp+4]		
  4676                              <4> 	
  4677 00000BB9 55                  <4> 	push bp	
  4678                              <4> 	__shr32 ax, bx, cl
  4679                              <5>  stkopen 5
  4680 00000BBA 83EC05              <6>  sub word sp, %1
  4681 00000BBD 54                  <6>  push sp
  4682 00000BBE 5D                  <6>  pop bp
  4683 00000BBF 894600              <5>  mov word [bp+0], %1
  4684 00000BC2 895E02              <5>  mov word [bp+2], %2
  4685 00000BC5 884E04              <5>  mov byte [bp+4], %3
  4686 00000BC8 E8B0F7              <5>  call proc_shr32
  4687 00000BCB 54                  <5>  push sp
  4688 00000BCC 5D                  <5>  pop bp
  4689 00000BCD 8B4600              <5>  mov word %1, [bp+0]
  4690 00000BD0 8B5E02              <5>  mov word %2, [bp+2]
  4691                              <5>  stkclose 5
  4692 00000BD3 83C405              <6>  add word sp, %1
  4693 00000BD6 5D                  <4> 	pop bp		
  4694                              <4> 					
  4695 00000BD7 8B4E02              <4> 	mov cx,[bp+2]
  4696 00000BDA 81E10080            <4> 	and cx,0x8000
  4697 00000BDE 83F900              <4> 	cmp cx,0
  4698 00000BE1 7412                <4> 	jz .endneg			
  4699 00000BE3 B9FFFF              <4> 		mov cx,0xFFFF
  4700 00000BE6 BAFFFF              <4> 		mov dx,0xFFFF
  4701 00000BE9 29DA                <4> 		sub dx,bx
  4702 00000BEB 19C1                <4> 		sbb cx,ax						
  4703 00000BED 42                  <4> 		inc dx
  4704 00000BEE 83D100              <4> 		adc cx,0
  4705 00000BF1 89C8                <4> 		mov ax,cx
  4706 00000BF3 89D3                <4> 		mov bx,dx		
  4707                              <4> 	.endneg:			
  4708                              <4> 		 
  4709 00000BF5 894606              <4> 	mov [bp+6],ax
  4710 00000BF8 895E08              <4> 	mov [bp+8],bx
  4711                              <4> 	
  4712                              <4> 	.done:
  4713                              <4> 	
  4714 00000BFB C3                  <4> 	ret
  4715                              <4> 			
  4716                              <4> proc_int32tofl:
  4717 00000BFC 89E0                <4> 	mov ax,sp
  4718 00000BFE 89C5                <4> 	mov bp,ax
  4719                              <4> 	
  4720 00000C00 8B4602              <4> 	mov ax,[bp+2]
  4721 00000C03 8B5E04              <4> 	mov bx,[bp+4]
  4722                              <4> 	
  4723 00000C06 89C1                <4> 	mov cx,ax
  4724 00000C08 81E1FF7F            <4> 	and cx,0x7FFF
  4725 00000C0C 09D9                <4> 	or cx,bx
  4726 00000C0E 83F900              <4> 	cmp cx,0
  4727 00000C11 7511                <4> 	jnz .continue
  4728 00000C13 8B4602              <4> 		mov ax,[bp+2]
  4729 00000C16 250080              <4> 		and ax,0x8000
  4730 00000C19 894606              <4> 		mov word [bp+6],ax
  4731 00000C1C C746080000          <4> 		mov word [bp+8],0
  4732 00000C21 E9AE00              <4> 		jmp .done
  4733                              <4> 	.continue:
  4734                              <4> 		
  4735 00000C24 89C1                <4> 	mov cx,ax
  4736 00000C26 81E10080            <4> 	and cx,0x8000
  4737 00000C2A 83F900              <4> 	cmp cx,0
  4738 00000C2D 7412                <4> 	jz .endneg
  4739 00000C2F B9FFFF              <4> 		mov cx,0xFFFF
  4740 00000C32 BAFFFF              <4> 		mov dx,0xFFFF
  4741 00000C35 29DA                <4> 		sub dx,bx
  4742 00000C37 19C1                <4> 		sbb cx,ax
  4743 00000C39 42                  <4> 		inc dx
  4744 00000C3A 83D100              <4> 		adc cx,0
  4745 00000C3D 89C8                <4> 		mov ax,cx
  4746 00000C3F 89D3                <4> 		mov bx,dx
  4747                              <4> 	.endneg:
  4748                              <4> 	
  4749 00000C41 83E07F              <4> 	and ax,0x007F	
  4750                              <4> 	
  4751 00000C44 894606              <4> 	mov [bp+6],ax
  4752 00000C47 895E08              <4> 	mov [bp+8],bx	
  4753                              <4> 		
  4754                              <4> 	__lzbitcount32 ax, bx, ch		
  4755 00000C4A 53                  <5>  push %2
  4756                              <5>  __lzbitcount16 %1, cl
  4757                              <6>  stkopen 3
  4758 00000C4B 83EC03              <7>  sub word sp, %1
  4759 00000C4E 54                  <7>  push sp
  4760 00000C4F 5D                  <7>  pop bp
  4761 00000C50 894600              <6>  mov word [bp+0], %1
  4762 00000C53 E8AAF7              <6>  call proc__lzbitcount16
  4763 00000C56 54                  <6>  push sp
  4764 00000C57 5D                  <6>  pop bp
  4765 00000C58 8A4E02              <6>  mov byte %2, [bp+2]
  4766                              <6>  stkclose 3
  4767 00000C5B 83C403              <7>  add word sp, %1
  4768 00000C5E 58                  <5>  pop ax
  4769 00000C5F 80F910              <5>  cmp cl,16
  4770 00000C62 7217                <5>  jb .end
  4771 00000C64 51                  <5>  push cx
  4772                              <5>  __lzbitcount16 ax, al
  4773                              <6>  stkopen 3
  4774 00000C65 83EC03              <7>  sub word sp, %1
  4775 00000C68 54                  <7>  push sp
  4776 00000C69 5D                  <7>  pop bp
  4777 00000C6A 894600              <6>  mov word [bp+0], %1
  4778 00000C6D E890F7              <6>  call proc__lzbitcount16
  4779 00000C70 54                  <6>  push sp
  4780 00000C71 5D                  <6>  pop bp
  4781 00000C72 8A4602              <6>  mov byte %2, [bp+2]
  4782                              <6>  stkclose 3
  4783 00000C75 83C403              <7>  add word sp, %1
  4784 00000C78 59                  <5>  pop cx
  4785 00000C79 00C1                <5>  add cl,al
  4786                              <5>  .end:
  4787 00000C7B 88CD                <5>  mov byte %3, cl
  4788 00000C7D B120                <4> 	mov cl,32
  4789 00000C7F 28E9                <4> 	sub cl,ch
  4790                              <4> 	
  4791 00000C81 80F918              <4> 	cmp cl,24
  4792 00000C84 732C                <4> 	jae .endmantissa
  4793                              <4> 	
  4794 00000C86 B218                <4> 	mov dl,24
  4795 00000C88 28CA                <4> 	sub dl,cl				
  4796                              <4> 	
  4797 00000C8A 89E0                <4> 	mov ax,sp
  4798 00000C8C 89C5                <4> 	mov bp,ax
  4799 00000C8E 8B4606              <4> 	mov ax,[bp+6]
  4800 00000C91 8B5E08              <4> 	mov bx,[bp+8]
  4801                              <4> 	
  4802 00000C94 51                  <4> 	push cx	
  4803                              <4> 	__shl32 ax, bx, dl	
  4804                              <5>  stkopen 5
  4805 00000C95 83EC05              <6>  sub word sp, %1
  4806 00000C98 54                  <6>  push sp
  4807 00000C99 5D                  <6>  pop bp
  4808 00000C9A 894600              <5>  mov word [bp+0], %1
  4809 00000C9D 895E02              <5>  mov word [bp+2], %2
  4810 00000CA0 885604              <5>  mov byte [bp+4], %3
  4811 00000CA3 E88EF6              <5>  call proc_shl32
  4812 00000CA6 54                  <5>  push sp
  4813 00000CA7 5D                  <5>  pop bp
  4814 00000CA8 8B4600              <5>  mov word %1, [bp+0]
  4815 00000CAB 8B5E02              <5>  mov word %2, [bp+2]
  4816                              <5>  stkclose 5
  4817 00000CAE 83C405              <6>  add word sp, %1
  4818 00000CB1 59                  <4> 	pop cx
  4819                              <4> 	
  4820                              <4> 	.endmantissa:
  4821                              <4> 	
  4822 00000CB2 83E07F              <4> 	and ax,0x007F
  4823                              <4> 		
  4824 00000CB5 80C17E              <4> 	add cl,0x7E
  4825 00000CB8 C1E108              <4> 	shl cx,8
  4826 00000CBB D1E9                <4> 	shr cx,1
  4827 00000CBD 01C8                <4> 	add ax,cx
  4828                              <4> 	
  4829 00000CBF 89E1                <4> 	mov cx,sp
  4830 00000CC1 89CD                <4> 	mov bp,cx
  4831                              <4> 	
  4832 00000CC3 8B4E02              <4> 	mov cx,[bp+2]
  4833 00000CC6 81E10080            <4> 	and cx,0x8000	
  4834 00000CCA 01C8                <4> 	add ax,cx
  4835                              <4> 		
  4836 00000CCC 894606              <4> 	mov [bp+6],ax
  4837 00000CCF 895E08              <4> 	mov [bp+8],bx
  4838                              <4> 	
  4839                              <4> 	.done:		
  4840                              <4> 	
  4841 00000CD2 C3                  <4> 	ret
  4842                              <4> 	
  4843                              <4> proc_flcmp:
  4844 00000CD3 89E0                <4> 	mov ax,sp
  4845 00000CD5 89C5                <4> 	mov bp,ax		
  4846                              <4> 	
  4847 00000CD7 8B4602              <4> 	mov ax,[bp+2]
  4848 00000CDA 8B5E06              <4> 	mov bx,[bp+6]
  4849 00000CDD 55                  <4> 	push bp
  4850                              <4> 	__cmp_validate ax, bx, cl, dl
  4851                              <5>  stkopen 0x06
  4852 00000CDE 83EC06              <6>  sub word sp, %1
  4853 00000CE1 54                  <6>  push sp
  4854 00000CE2 5D                  <6>  pop bp
  4855 00000CE3 894600              <5>  mov word [bp+0],%1
  4856 00000CE6 895E02              <5>  mov word [bp+2],%2
  4857 00000CE9 E84C09              <5>  call proc__cmp_validate
  4858 00000CEC 54                  <5>  push sp
  4859 00000CED 5D                  <5>  pop bp
  4860 00000CEE 8A4E04              <5>  mov byte %3, [bp+4]
  4861 00000CF1 8A5605              <5>  mov byte %4, [bp+5]
  4862                              <5>  stkclose 0x06
  4863 00000CF4 83C406              <6>  add word sp, %1
  4864 00000CF7 5D                  <4> 	pop bp
  4865 00000CF8 80FA00              <4> 	cmp dl,0
  4866 00000CFB 7505                <4> 	jnz .continue
  4867 00000CFD 884E0A              <4> 		mov byte [bp+0x0A], cl
  4868 00000D00 EB5E                <4> 		jmp .done		
  4869                              <4> 	.continue:
  4870                              <4> 			
  4871 00000D02 8B4602              <4> 	mov ax,[bp+2]
  4872 00000D05 8B5E06              <4> 	mov bx,[bp+6]
  4873 00000D08 250080              <4> 	and ax,0x8000
  4874 00000D0B 81E30080            <4> 	and bx,0x8000	
  4875 00000D0F 39D8                <4> 	cmp ax,bx
  4876 00000D11 723C                <4> 	jb .above
  4877 00000D13 773E                <4> 	ja .below
  4878                              <4> 	
  4879 00000D15 8B4602              <4> 	mov ax,[bp+2]
  4880 00000D18 8B5E06              <4> 	mov bx,[bp+6]
  4881 00000D1B D1E0                <4> 	shl ax,1
  4882 00000D1D D1E3                <4> 	shl bx,1
  4883 00000D1F 38FC                <4> 	cmp ah,bh
  4884 00000D21 772C                <4> 	ja .above
  4885 00000D23 722E                <4> 	jb .below
  4886                              <4> 	
  4887 00000D25 8B4602              <4> 	mov ax,[bp+2]
  4888 00000D28 8B5E04              <4> 	mov bx,[bp+4]
  4889 00000D2B 8B4E06              <4> 	mov cx,[bp+6]
  4890 00000D2E 8B5608              <4> 	mov dx,[bp+8]
  4891                              <4> 	
  4892                              <4> 	__cmp32 ax, bx, cx, dx, cl
  4893                              <5>  stkopen 9
  4894 00000D31 83EC09              <6>  sub word sp, %1
  4895 00000D34 54                  <6>  push sp
  4896 00000D35 5D                  <6>  pop bp
  4897 00000D36 894600              <5>  mov word [bp+0], %1
  4898 00000D39 895E02              <5>  mov word [bp+2], %2
  4899 00000D3C 894E04              <5>  mov word [bp+4], %3
  4900 00000D3F 895606              <5>  mov word [bp+6], %4
  4901 00000D42 E8C4F5              <5>  call proc_cmp32
  4902 00000D45 54                  <5>  push sp
  4903 00000D46 5D                  <5>  pop bp
  4904 00000D47 8A4E08              <5>  mov byte %5, [bp+8]
  4905                              <5>  stkclose 9
  4906 00000D4A 83C409              <6>  add word sp, %1
  4907 00000D4D EB0A                <4> 	jmp .endcmp
  4908                              <4> 		
  4909                              <4> 	.above:
  4910 00000D4F B101                <4> 		mov cl, 1
  4911 00000D51 EB06                <4> 		jmp .endcmp
  4912                              <4> 	.below:
  4913 00000D53 B1FF                <4> 		mov cl, -1
  4914 00000D55 EB02                <4> 		jmp .endcmp
  4915                              <4> 	.equal:	
  4916 00000D57 B100                <4> 		mov cl, 0	
  4917                              <4> 	.endcmp:
  4918                              <4> 	
  4919 00000D59 89E0                <4> 	mov ax,sp
  4920 00000D5B 89C5                <4> 	mov bp,ax
  4921 00000D5D 884E0A              <4> 	mov byte [bp+0x0A], cl
  4922                              <4> 	
  4923                              <4> 	.done:
  4924                              <4> 					
  4925 00000D60 C3                  <4> 	ret
  4926                              <4> 
  4927                              <4> proc_flshl:
  4928 00000D61 89E0                <4> 	mov ax,sp
  4929 00000D63 89C5                <4> 	mov bp,ax
  4930                              <4> 	
  4931 00000D65 8B4602              <4> 	mov ax,[bp+2]
  4932 00000D68 25807F              <4> 	and ax,0x7F80
  4933 00000D6B D1E0                <4> 	shl ax,1
  4934 00000D6D FEC4                <4> 	inc ah	
  4935 00000D6F D1E8                <4> 	shr ax,1
  4936                              <4> 	
  4937 00000D71 8B5E02              <4> 	mov bx,[bp+2]
  4938 00000D74 81E37F80            <4> 	and bx,0x807F
  4939 00000D78 01C3                <4> 	add bx,ax
  4940                              <4> 	
  4941 00000D7A 895E02              <4> 	mov [bp+2],bx		
  4942                              <4> 	
  4943 00000D7D C3                  <4> 	ret
  4944                              <4> 
  4945                              <4> proc_flshr:
  4946 00000D7E 89E0                <4> 	mov ax,sp
  4947 00000D80 89C5                <4> 	mov bp,ax
  4948                              <4> 	
  4949 00000D82 8B4602              <4> 	mov ax,[bp+2]
  4950 00000D85 25807F              <4> 	and ax,0x7F80
  4951 00000D88 D1E0                <4> 	shl ax,1
  4952 00000D8A FECC                <4> 	dec ah	
  4953 00000D8C D1E8                <4> 	shr ax,1
  4954                              <4> 	
  4955 00000D8E 8B5E02              <4> 	mov bx,[bp+2]
  4956 00000D91 81E37F80            <4> 	and bx,0x807F
  4957 00000D95 01C3                <4> 	add bx,ax
  4958                              <4> 	
  4959 00000D97 895E02              <4> 	mov [bp+2],bx	
  4960                              <4> 	
  4961 00000D9A C3                  <4> 	ret
  4962                              <4> 
  4963                              <4> proc_fldiv:
  4964 00000D9B 89E0                <4> 	mov ax,sp
  4965 00000D9D 89C5                <4> 	mov bp,ax
  4966                              <4> 				
  4967                              <4> 	; sinal
  4968                              <4> 	
  4969 00000D9F 8B4602              <4> 	mov ax,[bp+2]
  4970 00000DA2 8B5E06              <4> 	mov bx,[bp+6]
  4971 00000DA5 250080              <4> 	and ax,0x8000
  4972 00000DA8 81E30080            <4> 	and bx,0x8000
  4973 00000DAC 31D8                <4> 	xor ax,bx
  4974 00000DAE 89460A              <4> 	mov word [bp+0x0A],ax
  4975                              <4> 		
  4976                              <4> 	; sinal calculado e setado
  4977                              <4> 
  4978                              <4> 	; valores especiais
  4979                              <4> 	
  4980 00000DB1 8B4602              <4> 	mov ax,[bp+2]
  4981 00000DB4 8B5E04              <4> 	mov bx,[bp+4]
  4982 00000DB7 8B4E06              <4> 	mov cx,[bp+6]
  4983 00000DBA 8B5608              <4> 	mov dx,[bp+8]
  4984                              <4> 	__validate ax, bx, cx, dx, ax, bx, cl
  4985                              <5>  stkopen 0x0D
  4986 00000DBD 83EC0D              <6>  sub word sp, %1
  4987 00000DC0 54                  <6>  push sp
  4988 00000DC1 5D                  <6>  pop bp
  4989 00000DC2 894600              <5>  mov word [bp+0],%1
  4990 00000DC5 895E02              <5>  mov word [bp+2],%2
  4991 00000DC8 894E04              <5>  mov word [bp+4],%3
  4992 00000DCB 895606              <5>  mov word [bp+6],%4
  4993 00000DCE E81707              <5>  call proc__validate
  4994 00000DD1 54                  <5>  push sp
  4995 00000DD2 5D                  <5>  pop bp
  4996 00000DD3 8B4608              <5>  mov word %5,[bp+8]
  4997 00000DD6 8B5E0A              <5>  mov word %6,[bp+0x0A]
  4998 00000DD9 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  4999                              <5>  stkclose 0x0D
  5000 00000DDC 83C40D              <6>  add word sp, %1
  5001 00000DDF 80F900              <4> 	cmp cl,0
  5002 00000DE2 750D                <4> 	jnz .continue
  5003 00000DE4 89E2                <4> 		mov dx,sp
  5004 00000DE6 89D5                <4> 		mov bp,dx
  5005 00000DE8 01460A              <4> 		add word [bp+0x0A],ax
  5006 00000DEB 895E0C              <4> 		mov word [bp+0x0C],bx						
  5007 00000DEE E9C800              <4> 		jmp .done	
  5008                              <4> 	.continue:
  5009                              <4> 	
  5010 00000DF1 89E0                <4> 	mov ax,sp
  5011 00000DF3 89C5                <4> 	mov bp,ax
  5012 00000DF5 8B4602              <4> 	mov ax,[bp+2]
  5013 00000DF8 8B5E04              <4> 	mov bx,[bp+4]
  5014 00000DFB 8B4E06              <4> 	mov cx,[bp+6]
  5015 00000DFE 8B5608              <4> 	mov dx,[bp+8]
  5016                              <4> 	__div_validate ax, bx, cx, dx, ax, bx, cl
  5017                              <5>  stkopen 0x0D
  5018 00000E01 83EC0D              <6>  sub word sp, %1
  5019 00000E04 54                  <6>  push sp
  5020 00000E05 5D                  <6>  pop bp
  5021 00000E06 894600              <5>  mov word [bp+0],%1
  5022 00000E09 895E02              <5>  mov word [bp+2],%2
  5023 00000E0C 894E04              <5>  mov word [bp+4],%3
  5024 00000E0F 895606              <5>  mov word [bp+6],%4
  5025 00000E12 E83A07              <5>  call proc__div_validate
  5026 00000E15 54                  <5>  push sp
  5027 00000E16 5D                  <5>  pop bp
  5028 00000E17 8B4608              <5>  mov word %5,[bp+8]
  5029 00000E1A 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5030 00000E1D 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  5031                              <5>  stkclose 0x0D
  5032 00000E20 83C40D              <6>  add word sp, %1
  5033 00000E23 80F900              <4> 	cmp cl,0
  5034 00000E26 750D                <4> 	jnz .continue2
  5035 00000E28 89E2                <4> 		mov dx,sp
  5036 00000E2A 89D5                <4> 		mov bp,dx
  5037 00000E2C 01460A              <4> 		add word [bp+0x0A],ax
  5038 00000E2F 895E0C              <4> 		mov word [bp+0x0C],bx				
  5039 00000E32 E98400              <4> 		jmp .done	
  5040                              <4> 	.continue2:
  5041                              <4> 	; valores especiais tratados
  5042                              <4> 			
  5043                              <4> 	; expoente parcial
  5044                              <4> 
  5045 00000E35 89E0                <4> 	mov ax,sp
  5046 00000E37 89C5                <4> 	mov bp,ax
  5047 00000E39 8B4602              <4> 	mov ax,[bp+2]
  5048 00000E3C 8B5E06              <4> 	mov bx,[bp+6]
  5049 00000E3F 25807F              <4> 	and ax,0x7F80
  5050 00000E42 81E3807F            <4> 	and bx,0x7F80
  5051 00000E46 D1E0                <4> 	shl ax,1
  5052 00000E48 D1E3                <4> 	shl bx,1		
  5053                              <4> 			
  5054 00000E4A 28FC                <4> 	sub ah,bh		
  5055 00000E4C 80C47F              <4> 	add ah,0x7F
  5056                              <4> 	
  5057 00000E4F 50                  <4> 	push ax
  5058                              <4> 		
  5059                              <4> 	; expoente parcial calculado
  5060                              <4> 	
  5061                              <4> 	; mantissa
  5062                              <4> 
  5063 00000E50 8B4602              <4> 	mov ax,[bp+2]
  5064 00000E53 8B5E04              <4> 	mov bx,[bp+4]
  5065 00000E56 8B4E06              <4> 	mov cx,[bp+6]
  5066 00000E59 8B5608              <4> 	mov dx,[bp+8]
  5067 00000E5C 83E07F              <4> 	and ax,0x007F
  5068 00000E5F 83E17F              <4> 	and cx,0x007F
  5069 00000E62 0D8000              <4> 	or ax,0x0080
  5070 00000E65 81C98000            <4> 	or cx,0x0080
  5071                              <4> 	
  5072                              <4> 	__fldiv32 ax, bx, cx, dx, cx, dx
  5073                              <5>  stkopen 0x11
  5074 00000E69 83EC11              <6>  sub word sp, %1
  5075 00000E6C 54                  <6>  push sp
  5076 00000E6D 5D                  <6>  pop bp
  5077 00000E6E 894600              <5>  mov word [bp+0],%1
  5078 00000E71 895E02              <5>  mov word [bp+2],%2
  5079 00000E74 894E04              <5>  mov word [bp+4],%3
  5080 00000E77 895606              <5>  mov word [bp+6],%4
  5081 00000E7A E87505              <5>  call proc__fldiv32
  5082 00000E7D 54                  <5>  push sp
  5083 00000E7E 5D                  <5>  pop bp
  5084 00000E7F 8B4E08              <5>  mov word %5,[bp+8]
  5085 00000E82 8B560A              <5>  mov word %6,[bp+0x0A]
  5086                              <5>  stkclose 0x11
  5087 00000E85 83C411              <6>  add word sp, %1
  5088                              <4> 		
  5089 00000E88 89E0                <4> 	mov ax,sp
  5090 00000E8A 89C5                <4> 	mov bp,ax
  5091 00000E8C 83C502              <4> 	add bp,2
  5092                              <4> 	
  5093 00000E8F 034E0A              <4> 	add cx,[bp+0x0A]
  5094                              <4> 			
  5095 00000E92 58                  <4> 	pop ax	
  5096                              <4> 	__normalize cx, dx, ax
  5097                              <5>  stkopen 0x06
  5098 00000E93 83EC06              <6>  sub word sp, %1
  5099 00000E96 54                  <6>  push sp
  5100 00000E97 5D                  <6>  pop bp
  5101 00000E98 894E00              <5>  mov word [bp+0],%1
  5102 00000E9B 895602              <5>  mov word [bp+2],%2
  5103 00000E9E 894604              <5>  mov word [bp+4],%3
  5104 00000EA1 E8B303              <5>  call proc__normalize
  5105 00000EA4 54                  <5>  push sp
  5106 00000EA5 5D                  <5>  pop bp
  5107 00000EA6 8B4E00              <5>  mov word %1,[bp+0]
  5108 00000EA9 8B5602              <5>  mov word %2,[bp+2]
  5109                              <5>  stkclose 0x06
  5110 00000EAC 83C406              <6>  add word sp, %1
  5111                              <4> 	
  5112 00000EAF 89E0                <4> 	mov ax,sp
  5113 00000EB1 89C5                <4> 	mov bp,ax
  5114 00000EB3 894E0A              <4> 	mov [bp+0x0A],cx
  5115 00000EB6 89560C              <4> 	mov [bp+0x0C],dx
  5116                              <4> 	
  5117                              <4> 	.done:
  5118                              <4> 			
  5119 00000EB9 C3                  <4> 	ret
  5120                              <4> 
  5121                              <4> proc_flmul:
  5122 00000EBA 89E0                <4> 	mov ax,sp
  5123 00000EBC 89C5                <4> 	mov bp,ax
  5124                              <4> 	
  5125                              <4> 	; sinal
  5126                              <4> 	
  5127 00000EBE 8B4602              <4> 	mov ax,[bp+2]
  5128 00000EC1 8B5E06              <4> 	mov bx,[bp+6]
  5129 00000EC4 250080              <4> 	and ax,0x8000
  5130 00000EC7 81E30080            <4> 	and bx,0x8000
  5131 00000ECB 31D8                <4> 	xor ax,bx
  5132 00000ECD 89460A              <4> 	mov word [bp+0x0A],ax
  5133                              <4> 	
  5134                              <4> 	; sinal calculado e setado
  5135                              <4> 
  5136                              <4> 	; valores especiais
  5137                              <4> 
  5138 00000ED0 8B4602              <4> 	mov ax,[bp+2]
  5139 00000ED3 8B5E04              <4> 	mov bx,[bp+4]
  5140 00000ED6 8B4E06              <4> 	mov cx,[bp+6]
  5141 00000ED9 8B5608              <4> 	mov dx,[bp+8]
  5142                              <4> 	__validate ax, bx, cx, dx, ax, bx, cl
  5143                              <5>  stkopen 0x0D
  5144 00000EDC 83EC0D              <6>  sub word sp, %1
  5145 00000EDF 54                  <6>  push sp
  5146 00000EE0 5D                  <6>  pop bp
  5147 00000EE1 894600              <5>  mov word [bp+0],%1
  5148 00000EE4 895E02              <5>  mov word [bp+2],%2
  5149 00000EE7 894E04              <5>  mov word [bp+4],%3
  5150 00000EEA 895606              <5>  mov word [bp+6],%4
  5151 00000EED E8F805              <5>  call proc__validate
  5152 00000EF0 54                  <5>  push sp
  5153 00000EF1 5D                  <5>  pop bp
  5154 00000EF2 8B4608              <5>  mov word %5,[bp+8]
  5155 00000EF5 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5156 00000EF8 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  5157                              <5>  stkclose 0x0D
  5158 00000EFB 83C40D              <6>  add word sp, %1
  5159 00000EFE 80F900              <4> 	cmp cl,0
  5160 00000F01 750D                <4> 	jnz .continue
  5161 00000F03 89E2                <4> 		mov dx,sp
  5162 00000F05 89D5                <4> 		mov bp,dx
  5163 00000F07 01460A              <4> 		add word [bp+0x0A],ax
  5164 00000F0A 895E0C              <4> 		mov word [bp+0x0C],bx						
  5165 00000F0D E95501              <4> 		jmp .done	
  5166                              <4> 	.continue:
  5167                              <4> 
  5168 00000F10 89E0                <4> 	mov ax,sp
  5169 00000F12 89C5                <4> 	mov bp,ax
  5170 00000F14 8B4602              <4> 	mov ax,[bp+2]
  5171 00000F17 8B4E06              <4> 	mov cx,[bp+6]
  5172                              <4> 	__mul_validate ax, cx, ax, bx, cl
  5173                              <5>  stkopen 0x09
  5174 00000F1A 83EC09              <6>  sub word sp, %1
  5175 00000F1D 54                  <6>  push sp
  5176 00000F1E 5D                  <6>  pop bp
  5177 00000F1F 894600              <5>  mov word [bp+0],%1
  5178 00000F22 894E02              <5>  mov word [bp+2],%2
  5179 00000F25 E88106              <5>  call proc__mul_validate
  5180 00000F28 54                  <5>  push sp
  5181 00000F29 5D                  <5>  pop bp
  5182 00000F2A 8B4604              <5>  mov word %3,[bp+4]
  5183 00000F2D 8B5E06              <5>  mov word %4,[bp+6]
  5184 00000F30 8A4E08              <5>  mov byte %5,[bp+8]
  5185                              <5>  stkclose 0x09
  5186 00000F33 83C409              <6>  add word sp, %1
  5187 00000F36 80F900              <4> 	cmp cl,0
  5188 00000F39 750D                <4> 	jnz .continue2
  5189 00000F3B 89E2                <4> 		mov dx,sp
  5190 00000F3D 89D5                <4> 		mov bp,dx
  5191 00000F3F 01460A              <4> 		add word [bp+0x0A],ax
  5192 00000F42 895E0C              <4> 		mov word [bp+0x0C],bx				
  5193 00000F45 E91D01              <4> 		jmp .done	
  5194                              <4> 	.continue2:
  5195                              <4> 	; valores especiais tratados
  5196                              <4> 		
  5197                              <4> 	; expoente parcial
  5198                              <4> 
  5199 00000F48 89E0                <4> 	mov ax,sp
  5200 00000F4A 89C5                <4> 	mov bp,ax
  5201 00000F4C 8B4602              <4> 	mov ax,[bp+2]
  5202 00000F4F 8B5E06              <4> 	mov bx,[bp+6]
  5203 00000F52 25807F              <4> 	and ax,0x7F80
  5204 00000F55 81E3807F            <4> 	and bx,0x7F80
  5205 00000F59 D1E0                <4> 	shl ax,1
  5206 00000F5B D1E3                <4> 	shl bx,1		
  5207                              <4> 			
  5208 00000F5D 80EC7F              <4> 	sub ah,0x7F
  5209 00000F60 80EF7F              <4> 	sub bh,0x7F
  5210                              <4> 				
  5211 00000F63 00FC                <4> 	add ah,bh
  5212 00000F65 80C47F              <4> 	add ah,0x7F
  5213                              <4> 	
  5214 00000F68 50                  <4> 	push ax
  5215                              <4> 	
  5216                              <4> 	; expoente parcial calculado	
  5217                              <4> 	
  5218                              <4> 	; mantissa
  5219                              <4> 	
  5220 00000F69 8B4602              <4> 	mov ax,[bp+2]
  5221 00000F6C 8B5E04              <4> 	mov bx,[bp+4]
  5222 00000F6F 8B4E06              <4> 	mov cx,[bp+6]
  5223 00000F72 8B5608              <4> 	mov dx,[bp+8]	
  5224                              <4> 	
  5225 00000F75 83E07F              <4> 	and ax, 0x007F
  5226 00000F78 83E17F              <4> 	and cx, 0x007F
  5227 00000F7B 0D8000              <4> 	or ax, 0x0080
  5228 00000F7E 81C98000            <4> 	or cx, 0x0080
  5229                              <4> 		
  5230                              <4> 	__mul32_64 ax, bx, cx, dx, ax, bx, cx, dx
  5231                              <5>  stkopen 0x10
  5232 00000F82 83EC10              <6>  sub word sp, %1
  5233 00000F85 54                  <6>  push sp
  5234 00000F86 5D                  <6>  pop bp
  5235 00000F87 894600              <5>  mov word [bp+0],%1
  5236 00000F8A 895E02              <5>  mov word [bp+2],%2
  5237 00000F8D 894E04              <5>  mov word [bp+4],%3
  5238 00000F90 895606              <5>  mov word [bp+6],%4
  5239 00000F93 E81104              <5>  call proc__mul32_64
  5240 00000F96 54                  <5>  push sp
  5241 00000F97 5D                  <5>  pop bp
  5242 00000F98 8B4608              <5>  mov word %5,[bp+8]
  5243 00000F9B 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5244 00000F9E 8B4E0C              <5>  mov word %7,[bp+0x0C]
  5245 00000FA1 8B560E              <5>  mov word %8,[bp+0x0E]
  5246                              <5>  stkclose 0x10
  5247 00000FA4 83C410              <6>  add word sp, %1
  5248                              <4> 	
  5249 00000FA7 51                  <4> 	push cx
  5250                              <4> 	__shl32 ax, bx, 8
  5251                              <5>  stkopen 5
  5252 00000FA8 83EC05              <6>  sub word sp, %1
  5253 00000FAB 54                  <6>  push sp
  5254 00000FAC 5D                  <6>  pop bp
  5255 00000FAD 894600              <5>  mov word [bp+0], %1
  5256 00000FB0 895E02              <5>  mov word [bp+2], %2
  5257 00000FB3 C6460408            <5>  mov byte [bp+4], %3
  5258 00000FB7 E87AF3              <5>  call proc_shl32
  5259 00000FBA 54                  <5>  push sp
  5260 00000FBB 5D                  <5>  pop bp
  5261 00000FBC 8B4600              <5>  mov word %1, [bp+0]
  5262 00000FBF 8B5E02              <5>  mov word %2, [bp+2]
  5263                              <5>  stkclose 5
  5264 00000FC2 83C405              <6>  add word sp, %1
  5265 00000FC5 59                  <4> 	pop cx
  5266 00000FC6 88EB                <4> 	mov bl,ch
  5267                              <4> 								
  5268 00000FC8 50                  <4> 	push ax
  5269 00000FC9 53                  <4> 	push bx
  5270                              <4> 	__lzbitcount32 ax, bx, cl
  5271 00000FCA 53                  <5>  push %2
  5272                              <5>  __lzbitcount16 %1, cl
  5273                              <6>  stkopen 3
  5274 00000FCB 83EC03              <7>  sub word sp, %1
  5275 00000FCE 54                  <7>  push sp
  5276 00000FCF 5D                  <7>  pop bp
  5277 00000FD0 894600              <6>  mov word [bp+0], %1
  5278 00000FD3 E82AF4              <6>  call proc__lzbitcount16
  5279 00000FD6 54                  <6>  push sp
  5280 00000FD7 5D                  <6>  pop bp
  5281 00000FD8 8A4E02              <6>  mov byte %2, [bp+2]
  5282                              <6>  stkclose 3
  5283 00000FDB 83C403              <7>  add word sp, %1
  5284 00000FDE 58                  <5>  pop ax
  5285 00000FDF 80F910              <5>  cmp cl,16
  5286 00000FE2 7217                <5>  jb .end
  5287 00000FE4 51                  <5>  push cx
  5288                              <5>  __lzbitcount16 ax, al
  5289                              <6>  stkopen 3
  5290 00000FE5 83EC03              <7>  sub word sp, %1
  5291 00000FE8 54                  <7>  push sp
  5292 00000FE9 5D                  <7>  pop bp
  5293 00000FEA 894600              <6>  mov word [bp+0], %1
  5294 00000FED E810F4              <6>  call proc__lzbitcount16
  5295 00000FF0 54                  <6>  push sp
  5296 00000FF1 5D                  <6>  pop bp
  5297 00000FF2 8A4602              <6>  mov byte %2, [bp+2]
  5298                              <6>  stkclose 3
  5299 00000FF5 83C403              <7>  add word sp, %1
  5300 00000FF8 59                  <5>  pop cx
  5301 00000FF9 00C1                <5>  add cl,al
  5302                              <5>  .end:
  5303 00000FFB 88C9                <5>  mov byte %3, cl
  5304 00000FFD 5B                  <4> 	pop bx
  5305 00000FFE 58                  <4> 	pop ax
  5306                              <4> 		
  5307 00000FFF 80E908              <4> 	sub cl,8	
  5308 00001002 80F908              <4> 	cmp cl,8
  5309 00001005 7402                <4> 	je .equal
  5310 00001007 7F06                <4> 	jg .great
  5311                              <4> 	.equal:	
  5312 00001009 5A                  <4> 		pop dx
  5313 0000100A FEC6                <4> 		inc dh
  5314 0000100C 52                  <4> 		push dx
  5315 0000100D EB1C                <4> 		jmp .endcmp
  5316                              <4> 	.great:
  5317                              <4> 		__shl32 ax, bx, cl
  5318                              <5>  stkopen 5
  5319 0000100F 83EC05              <6>  sub word sp, %1
  5320 00001012 54                  <6>  push sp
  5321 00001013 5D                  <6>  pop bp
  5322 00001014 894600              <5>  mov word [bp+0], %1
  5323 00001017 895E02              <5>  mov word [bp+2], %2
  5324 0000101A 884E04              <5>  mov byte [bp+4], %3
  5325 0000101D E814F3              <5>  call proc_shl32
  5326 00001020 54                  <5>  push sp
  5327 00001021 5D                  <5>  pop bp
  5328 00001022 8B4600              <5>  mov word %1, [bp+0]
  5329 00001025 8B5E02              <5>  mov word %2, [bp+2]
  5330                              <5>  stkclose 5
  5331 00001028 83C405              <6>  add word sp, %1
  5332                              <4> 	.endcmp:
  5333                              <4> 	
  5334 0000102B 89E1                <4> 	mov cx,sp
  5335 0000102D 89CD                <4> 	mov bp,cx
  5336 0000102F 83C502              <4> 	add bp,2
  5337                              <4> 	
  5338 00001032 01460A              <4> 	add word [bp+0x0A],ax
  5339 00001035 895E0C              <4> 	mov word [bp+0x0C],bx
  5340                              <4> 	
  5341                              <4> 	; mantissa setada e expoente calculado
  5342                              <4> 				
  5343 00001038 8B4E0A              <4> 	mov cx,[bp+0x0A]
  5344 0000103B 8B560C              <4> 	mov dx,[bp+0x0C]
  5345                              <4> 	
  5346 0000103E 58                  <4> 	pop ax						
  5347                              <4> 	__normalize cx, dx, ax	; normaliza, preserva sinal e seta expoente	
  5348                              <5>  stkopen 0x06
  5349 0000103F 83EC06              <6>  sub word sp, %1
  5350 00001042 54                  <6>  push sp
  5351 00001043 5D                  <6>  pop bp
  5352 00001044 894E00              <5>  mov word [bp+0],%1
  5353 00001047 895602              <5>  mov word [bp+2],%2
  5354 0000104A 894604              <5>  mov word [bp+4],%3
  5355 0000104D E80702              <5>  call proc__normalize
  5356 00001050 54                  <5>  push sp
  5357 00001051 5D                  <5>  pop bp
  5358 00001052 8B4E00              <5>  mov word %1,[bp+0]
  5359 00001055 8B5602              <5>  mov word %2,[bp+2]
  5360                              <5>  stkclose 0x06
  5361 00001058 83C406              <6>  add word sp, %1
  5362                              <4> 		
  5363 0000105B 89E0                <4> 	mov ax,sp
  5364 0000105D 89C5                <4> 	mov bp,ax
  5365 0000105F 894E0A              <4> 	mov [bp+0x0A],cx
  5366 00001062 89560C              <4> 	mov [bp+0x0C],dx		
  5367                              <4> 
  5368                              <4> 	.done:
  5369                              <4> 																	
  5370 00001065 C3                  <4> 	ret
  5371                              <4> 	
  5372                              <4> proc_fladdorsub:	
  5373                              <4> 	; valores especiais
  5374 00001066 89E0                <4> 	mov ax,sp
  5375 00001068 89C5                <4> 	mov bp,ax
  5376 0000106A 8B4602              <4> 	mov ax,[bp+2]
  5377 0000106D 8B5E04              <4> 	mov bx,[bp+4]
  5378 00001070 8B4E06              <4> 	mov cx,[bp+6]
  5379 00001073 81E10080            <4> 	and cx,0x8000
  5380 00001077 334E0E              <4> 	xor word cx,[bp+0x0E]	
  5381 0000107A 8B5606              <4> 	mov dx,[bp+6]
  5382 0000107D 81E2FF7F            <4> 	and dx,0x7FFF
  5383 00001081 01D1                <4> 	add cx,dx	
  5384 00001083 8B5608              <4> 	mov dx,[bp+8]
  5385                              <4> 	__validate ax, bx, cx, dx, ax, bx, cl
  5386                              <5>  stkopen 0x0D
  5387 00001086 83EC0D              <6>  sub word sp, %1
  5388 00001089 54                  <6>  push sp
  5389 0000108A 5D                  <6>  pop bp
  5390 0000108B 894600              <5>  mov word [bp+0],%1
  5391 0000108E 895E02              <5>  mov word [bp+2],%2
  5392 00001091 894E04              <5>  mov word [bp+4],%3
  5393 00001094 895606              <5>  mov word [bp+6],%4
  5394 00001097 E84E04              <5>  call proc__validate
  5395 0000109A 54                  <5>  push sp
  5396 0000109B 5D                  <5>  pop bp
  5397 0000109C 8B4608              <5>  mov word %5,[bp+8]
  5398 0000109F 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5399 000010A2 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  5400                              <5>  stkclose 0x0D
  5401 000010A5 83C40D              <6>  add word sp, %1
  5402 000010A8 80F900              <4> 	cmp cl,0
  5403 000010AB 750D                <4> 	jnz .continue
  5404 000010AD 89E2                <4> 		mov dx,sp
  5405 000010AF 89D5                <4> 		mov bp,dx		
  5406 000010B1 89460A              <4> 		mov word [bp+0x0A],ax
  5407 000010B4 895E0C              <4> 		mov word [bp+0x0C],bx										
  5408 000010B7 E99C01              <4> 		jmp .done	
  5409                              <4> 	.continue:
  5410                              <4> 	
  5411 000010BA 89E0                <4> 	mov ax,sp
  5412 000010BC 89C5                <4> 	mov bp,ax
  5413 000010BE 8B4602              <4> 	mov ax,[bp+2]
  5414 000010C1 8B5E04              <4> 	mov bx,[bp+4]
  5415 000010C4 8B4E06              <4> 	mov cx,[bp+6]
  5416 000010C7 81E10080            <4> 	and cx,0x8000
  5417 000010CB 334E0E              <4> 	xor word cx,[bp+0x0E]	
  5418 000010CE 8B5606              <4> 	mov dx,[bp+6]
  5419 000010D1 81E2FF7F            <4> 	and dx,0x7FFF
  5420 000010D5 01D1                <4> 	add cx,dx
  5421 000010D7 8B5608              <4> 	mov dx,[bp+8]
  5422                              <4> 	__addorsub_validate ax, bx, cx, dx, ax, bx, cl
  5423                              <5>  stkopen 0x0D
  5424 000010DA 83EC0D              <6>  sub word sp, %1
  5425 000010DD 54                  <6>  push sp
  5426 000010DE 5D                  <6>  pop bp
  5427 000010DF 894600              <5>  mov word [bp+0],%1
  5428 000010E2 895E02              <5>  mov word [bp+2],%2
  5429 000010E5 894E04              <5>  mov word [bp+4],%3
  5430 000010E8 895606              <5>  mov word [bp+6],%4
  5431 000010EB E8EC04              <5>  call proc__addorsub_validate
  5432 000010EE 54                  <5>  push sp
  5433 000010EF 5D                  <5>  pop bp
  5434 000010F0 8B4608              <5>  mov word %5,[bp+8]
  5435 000010F3 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5436 000010F6 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  5437                              <5>  stkclose 0x0D
  5438 000010F9 83C40D              <6>  add word sp, %1
  5439 000010FC 80F900              <4> 	cmp cl,0
  5440 000010FF 750D                <4> 	jnz .continue2
  5441 00001101 89E2                <4> 		mov dx,sp
  5442 00001103 89D5                <4> 		mov bp,dx					
  5443 00001105 89460A              <4> 		mov word [bp+0x0A],ax
  5444 00001108 895E0C              <4> 		mov word [bp+0x0C],bx
  5445 0000110B E94801              <4> 		jmp .done	
  5446                              <4> 	.continue2:
  5447                              <4> 	
  5448                              <4> 	; valores especiais tratados	
  5449                              <4> 
  5450 0000110E 89E0                <4> 	mov ax,sp
  5451 00001110 89C5                <4> 	mov bp,ax	
  5452 00001112 8B4602              <4> 	mov ax,[bp+2]
  5453 00001115 8B5E06              <4> 	mov bx,[bp+6]
  5454                              <4> 	
  5455 00001118 D1E0                <4> 	shl ax,1
  5456 0000111A D1E3                <4> 	shl bx,1
  5457 0000111C 88E5                <4> 	mov ch,ah	
  5458 0000111E 28FD                <4> 	sub ch,bh	
  5459                              <4> 		
  5460 00001120 80FD00              <4> 	cmp ch,0
  5461 00001123 7402                <4> 	jz .expzero
  5462 00001125 EB1E                <4> 	jmp .expnzero
  5463                              <4> 	.expzero:
  5464 00001127 50                  <4> 		push ax
  5465 00001128 8B4602              <4> 		mov ax,[bp+2]
  5466 0000112B 8B5E04              <4> 		mov bx,[bp+4]
  5467 0000112E 8B4E06              <4> 		mov cx,[bp+6]
  5468 00001131 8B5608              <4> 		mov dx,[bp+8]
  5469 00001134 257F80              <4> 		and ax,0x807F
  5470 00001137 81E17F80            <4> 		and cx,0x807F
  5471 0000113B 0D8000              <4> 		or ax,0x0080
  5472 0000113E 81C98000            <4> 		or cx,0x0080
  5473                              <4> 												
  5474 00001142 E99A00              <4> 		jmp .endexpcmp
  5475                              <4> 	.expnzero:
  5476                              <4> 				
  5477 00001145 80FD00              <4> 		cmp ch,0
  5478 00001148 7F05                <4> 		jg .exp1great
  5479 0000114A 7C49                <4> 		jl .exp1less
  5480 0000114C E99000              <4> 		jmp .endexpcmp
  5481                              <4> 		.exp1great:					
  5482 0000114F 50                  <4> 			push ax
  5483                              <4> 		
  5484 00001150 8B4606              <4> 			mov ax,[bp+6]
  5485 00001153 8B5E08              <4> 			mov bx,[bp+8]
  5486 00001156 83E07F              <4> 			and ax,0x007F
  5487 00001159 0D8000              <4> 			or ax,0x0080
  5488                              <4> 						
  5489 0000115C 55                  <4> 			push bp
  5490                              <4> 			__shr32 ax, bx, ch
  5491                              <5>  stkopen 5
  5492 0000115D 83EC05              <6>  sub word sp, %1
  5493 00001160 54                  <6>  push sp
  5494 00001161 5D                  <6>  pop bp
  5495 00001162 894600              <5>  mov word [bp+0], %1
  5496 00001165 895E02              <5>  mov word [bp+2], %2
  5497 00001168 886E04              <5>  mov byte [bp+4], %3
  5498 0000116B E80DF2              <5>  call proc_shr32
  5499 0000116E 54                  <5>  push sp
  5500 0000116F 5D                  <5>  pop bp
  5501 00001170 8B4600              <5>  mov word %1, [bp+0]
  5502 00001173 8B5E02              <5>  mov word %2, [bp+2]
  5503                              <5>  stkclose 5
  5504 00001176 83C405              <6>  add word sp, %1
  5505 00001179 5D                  <4> 			pop bp		
  5506                              <4> 				
  5507 0000117A 8B5606              <4> 			mov dx,[bp+6]
  5508 0000117D 81E20080            <4> 			and dx,0x8000
  5509 00001181 01D0                <4> 			add ax,dx			
  5510                              <4> 			
  5511 00001183 89C1                <4> 			mov cx,ax
  5512 00001185 89DA                <4> 			mov dx,bx
  5513 00001187 8B4602              <4> 			mov ax,[bp+2]
  5514 0000118A 8B5E04              <4> 			mov bx,[bp+4]										
  5515                              <4> 									
  5516 0000118D 257F80              <4> 			and ax,0x807F
  5517 00001190 0D8000              <4> 			or ax,0x0080
  5518                              <4> 						
  5519 00001193 EB4A                <4> 			jmp .endexp1cmp	
  5520                              <4> 		.exp1less:
  5521 00001195 88E9                <4> 			mov cl,ch
  5522 00001197 B5FF                <4> 			mov ch,0xFF
  5523 00001199 28CD                <4> 			sub ch,cl
  5524 0000119B FEC5                <4> 			inc ch
  5525 0000119D 53                  <4> 			push bx		
  5526                              <4> 		
  5527 0000119E 8B4602              <4> 			mov ax,[bp+2]
  5528 000011A1 8B5E04              <4> 			mov bx,[bp+4]
  5529 000011A4 83E07F              <4> 			and ax,0x007F
  5530 000011A7 0D8000              <4> 			or ax,0x0080
  5531                              <4> 						
  5532 000011AA 55                  <4> 			push bp
  5533                              <4> 			__shr32 ax, bx, ch
  5534                              <5>  stkopen 5
  5535 000011AB 83EC05              <6>  sub word sp, %1
  5536 000011AE 54                  <6>  push sp
  5537 000011AF 5D                  <6>  pop bp
  5538 000011B0 894600              <5>  mov word [bp+0], %1
  5539 000011B3 895E02              <5>  mov word [bp+2], %2
  5540 000011B6 886E04              <5>  mov byte [bp+4], %3
  5541 000011B9 E8BFF1              <5>  call proc_shr32
  5542 000011BC 54                  <5>  push sp
  5543 000011BD 5D                  <5>  pop bp
  5544 000011BE 8B4600              <5>  mov word %1, [bp+0]
  5545 000011C1 8B5E02              <5>  mov word %2, [bp+2]
  5546                              <5>  stkclose 5
  5547 000011C4 83C405              <6>  add word sp, %1
  5548 000011C7 5D                  <4> 			pop bp
  5549                              <4> 								
  5550 000011C8 8B5602              <4> 			mov dx,[bp+2]
  5551 000011CB 81E20080            <4> 			and dx,0x8000
  5552 000011CF 01D0                <4> 			add ax,dx			
  5553                              <4> 			
  5554 000011D1 8B4E06              <4> 			mov cx,[bp+6]
  5555 000011D4 8B5608              <4> 			mov dx,[bp+8]										
  5556                              <4> 									
  5557 000011D7 81E17F80            <4> 			and cx,0x807F
  5558 000011DB 81C98000            <4> 			or cx,0x0080
  5559                              <4> 									
  5560                              <4> 		.endexp1cmp:
  5561                              <4> 		
  5562                              <4> 	.endexpcmp:			
  5563                              <4> 	
  5564 000011DF 837E0E00            <4> 	cmp word [bp+0x0E],0
  5565 000011E3 7526                <4> 	jnz .sub
  5566                              <4> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0
  5567                              <5>  stkopen 0x0D
  5568 000011E5 83EC0D              <6>  sub word sp, %1
  5569 000011E8 54                  <6>  push sp
  5570 000011E9 5D                  <6>  pop bp
  5571 000011EA 894600              <5>  mov word [bp+0],%1
  5572 000011ED 895E02              <5>  mov word [bp+2],%2
  5573 000011F0 894E04              <5>  mov word [bp+4],%3
  5574 000011F3 895606              <5>  mov word [bp+6],%4
  5575 000011F6 C7460C0000          <5>  mov word [bp+0x0C], %7
  5576 000011FB E81201              <5>  call proc__iaddorsub32
  5577 000011FE 54                  <5>  push sp
  5578 000011FF 5D                  <5>  pop bp
  5579 00001200 8B4608              <5>  mov word %5,[bp+8]
  5580 00001203 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5581                              <5>  stkclose 0x0D
  5582 00001206 83C40D              <6>  add word sp, %1
  5583 00001209 EB24                <4> 		jmp .endop
  5584                              <4> 	.sub:
  5585                              <4> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0x8000
  5586                              <5>  stkopen 0x0D
  5587 0000120B 83EC0D              <6>  sub word sp, %1
  5588 0000120E 54                  <6>  push sp
  5589 0000120F 5D                  <6>  pop bp
  5590 00001210 894600              <5>  mov word [bp+0],%1
  5591 00001213 895E02              <5>  mov word [bp+2],%2
  5592 00001216 894E04              <5>  mov word [bp+4],%3
  5593 00001219 895606              <5>  mov word [bp+6],%4
  5594 0000121C C7460C0080          <5>  mov word [bp+0x0C], %7
  5595 00001221 E8EC00              <5>  call proc__iaddorsub32
  5596 00001224 54                  <5>  push sp
  5597 00001225 5D                  <5>  pop bp
  5598 00001226 8B4608              <5>  mov word %5,[bp+8]
  5599 00001229 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5600                              <5>  stkclose 0x0D
  5601 0000122C 83C40D              <6>  add word sp, %1
  5602                              <4> 	.endop:
  5603                              <4> 						
  5604 0000122F 59                  <4> 	pop cx
  5605                              <4> 	
  5606                              <4> 	__normalize ax, bx, cx
  5607                              <5>  stkopen 0x06
  5608 00001230 83EC06              <6>  sub word sp, %1
  5609 00001233 54                  <6>  push sp
  5610 00001234 5D                  <6>  pop bp
  5611 00001235 894600              <5>  mov word [bp+0],%1
  5612 00001238 895E02              <5>  mov word [bp+2],%2
  5613 0000123B 894E04              <5>  mov word [bp+4],%3
  5614 0000123E E81600              <5>  call proc__normalize
  5615 00001241 54                  <5>  push sp
  5616 00001242 5D                  <5>  pop bp
  5617 00001243 8B4600              <5>  mov word %1,[bp+0]
  5618 00001246 8B5E02              <5>  mov word %2,[bp+2]
  5619                              <5>  stkclose 0x06
  5620 00001249 83C406              <6>  add word sp, %1
  5621                              <4> 	
  5622 0000124C 89E1                <4> 	mov cx,sp
  5623 0000124E 89CD                <4> 	mov bp,cx
  5624 00001250 89460A              <4> 	mov word [bp+0x0A],ax
  5625 00001253 895E0C              <4> 	mov word [bp+0x0C],bx
  5626                              <4> 									
  5627                              <4> 	.done:		
  5628                              <4> 							
  5629 00001256 C3                  <4> 	ret
  5630                              <4> 	
  5631                              <4> proc__normalize:
  5632 00001257 89E0                <4> 	mov ax,sp
  5633 00001259 89C5                <4> 	mov bp,ax	
  5634                              <4> 
  5635 0000125B 8B4E02              <4> 	mov cx,[bp+2]	
  5636 0000125E 8B5604              <4> 	mov dx,[bp+4]
  5637 00001261 8B5E06              <4> 	mov bx,[bp+6]
  5638                              <4> 					
  5639 00001264 89C8                <4> 	mov ax,cx
  5640 00001266 250080              <4> 	and ax,0x8000			
  5641 00001269 894602              <4> 	mov [bp+2],ax	
  5642                              <4> 					
  5643 0000126C 81E1FF7F            <4> 	and cx,0x7FFF
  5644                              <4> 			
  5645 00001270 51                  <4> 	push cx
  5646 00001271 52                  <4> 	push dx
  5647 00001272 53                  <4> 	push bx
  5648                              <4> 	__lzbitcount32 cx, dx, al	
  5649 00001273 52                  <5>  push %2
  5650                              <5>  __lzbitcount16 %1, cl
  5651                              <6>  stkopen 3
  5652 00001274 83EC03              <7>  sub word sp, %1
  5653 00001277 54                  <7>  push sp
  5654 00001278 5D                  <7>  pop bp
  5655 00001279 894E00              <6>  mov word [bp+0], %1
  5656 0000127C E881F1              <6>  call proc__lzbitcount16
  5657 0000127F 54                  <6>  push sp
  5658 00001280 5D                  <6>  pop bp
  5659 00001281 8A4E02              <6>  mov byte %2, [bp+2]
  5660                              <6>  stkclose 3
  5661 00001284 83C403              <7>  add word sp, %1
  5662 00001287 58                  <5>  pop ax
  5663 00001288 80F910              <5>  cmp cl,16
  5664 0000128B 7217                <5>  jb .end
  5665 0000128D 51                  <5>  push cx
  5666                              <5>  __lzbitcount16 ax, al
  5667                              <6>  stkopen 3
  5668 0000128E 83EC03              <7>  sub word sp, %1
  5669 00001291 54                  <7>  push sp
  5670 00001292 5D                  <7>  pop bp
  5671 00001293 894600              <6>  mov word [bp+0], %1
  5672 00001296 E867F1              <6>  call proc__lzbitcount16
  5673 00001299 54                  <6>  push sp
  5674 0000129A 5D                  <6>  pop bp
  5675 0000129B 8A4602              <6>  mov byte %2, [bp+2]
  5676                              <6>  stkclose 3
  5677 0000129E 83C403              <7>  add word sp, %1
  5678 000012A1 59                  <5>  pop cx
  5679 000012A2 00C1                <5>  add cl,al
  5680                              <5>  .end:
  5681 000012A4 88C8                <5>  mov byte %3, cl
  5682 000012A6 5B                  <4> 	pop bx
  5683 000012A7 5A                  <4> 	pop dx
  5684 000012A8 59                  <4> 	pop cx								
  5685                              <4> 		
  5686 000012A9 3C08                <4> 	cmp al,8					
  5687 000012AB 7204                <4> 	jb .shr
  5688 000012AD 7728                <4> 	ja .shl
  5689 000012AF EB4A                <4> 	jmp .endshrl
  5690                              <4> 	.shr:			
  5691 000012B1 B408                <4> 		mov ah,0x08
  5692 000012B3 28C4                <4> 		sub ah,al
  5693 000012B5 00E7                <4> 		add bh,ah
  5694 000012B7 53                  <4> 		push bx
  5695                              <4> 		__shr32 cx, dx, ah
  5696                              <5>  stkopen 5
  5697 000012B8 83EC05              <6>  sub word sp, %1
  5698 000012BB 54                  <6>  push sp
  5699 000012BC 5D                  <6>  pop bp
  5700 000012BD 894E00              <5>  mov word [bp+0], %1
  5701 000012C0 895602              <5>  mov word [bp+2], %2
  5702 000012C3 886604              <5>  mov byte [bp+4], %3
  5703 000012C6 E8B2F0              <5>  call proc_shr32
  5704 000012C9 54                  <5>  push sp
  5705 000012CA 5D                  <5>  pop bp
  5706 000012CB 8B4E00              <5>  mov word %1, [bp+0]
  5707 000012CE 8B5602              <5>  mov word %2, [bp+2]
  5708                              <5>  stkclose 5
  5709 000012D1 83C405              <6>  add word sp, %1
  5710 000012D4 5B                  <4> 		pop bx
  5711 000012D5 EB24                <4> 		jmp .endshrl
  5712                              <4> 	.shl:		
  5713 000012D7 B408                <4> 		mov ah,0x08
  5714 000012D9 28E0                <4> 		sub al,ah
  5715 000012DB 28C7                <4> 		sub bh,al			
  5716 000012DD 53                  <4> 		push bx
  5717                              <4> 		__shl32 cx, dx, al
  5718                              <5>  stkopen 5
  5719 000012DE 83EC05              <6>  sub word sp, %1
  5720 000012E1 54                  <6>  push sp
  5721 000012E2 5D                  <6>  pop bp
  5722 000012E3 894E00              <5>  mov word [bp+0], %1
  5723 000012E6 895602              <5>  mov word [bp+2], %2
  5724 000012E9 884604              <5>  mov byte [bp+4], %3
  5725 000012EC E845F0              <5>  call proc_shl32
  5726 000012EF 54                  <5>  push sp
  5727 000012F0 5D                  <5>  pop bp
  5728 000012F1 8B4E00              <5>  mov word %1, [bp+0]
  5729 000012F4 8B5602              <5>  mov word %2, [bp+2]
  5730                              <5>  stkclose 5
  5731 000012F7 83C405              <6>  add word sp, %1
  5732 000012FA 5B                  <4> 		pop bx			
  5733                              <4> 	.endshrl:											
  5734                              <4> 								
  5735 000012FB 30DB                <4> 	xor bl,bl
  5736 000012FD D1EB                <4> 	shr bx,1	
  5737 000012FF 83E17F              <4> 	and cx,0x007F	
  5738                              <4> 		
  5739 00001302 89E0                <4> 	mov ax,sp
  5740 00001304 89C5                <4> 	mov bp,ax
  5741 00001306 015E02              <4> 	add word [bp+2],bx
  5742 00001309 014E02              <4> 	add word [bp+2],cx	
  5743 0000130C 895604              <4> 	mov word [bp+4],dx
  5744                              <4> 	
  5745 0000130F C3                  <4> 	ret
  5746                              <4> 
  5747                              <4> proc__iaddorsub32:
  5748 00001310 89E0                <4> 	mov ax,sp
  5749 00001312 89C5                <4> 	mov bp,ax
  5750                              <4> 	
  5751 00001314 8B4602              <4> 	mov ax,[bp+2]
  5752 00001317 8B5E04              <4> 	mov bx,[bp+4]
  5753 0000131A 8B4E06              <4> 	mov cx,[bp+6]
  5754 0000131D 8B5608              <4> 	mov dx,[bp+8]	
  5755                              <4> 	
  5756 00001320 50                  <4> 	push ax	
  5757 00001321 250080              <4> 	and ax, 0x8000
  5758 00001324 83F800              <4> 	cmp ax,0
  5759 00001327 741B                <4> 	jz .endv1neg
  5760 00001329 58                  <4> 		pop ax
  5761 0000132A 51                  <4> 		push cx
  5762 0000132B 52                  <4> 		push dx
  5763                              <4> 		
  5764 0000132C B9FFFF              <4> 		mov cx,0xFFFF
  5765 0000132F BAFFFF              <4> 		mov dx,0xFFFF
  5766 00001332 25FF7F              <4> 		and ax,0x7FFF
  5767 00001335 29DA                <4> 		sub dx,bx
  5768 00001337 19C1                <4> 		sbb cx,ax
  5769 00001339 42                  <4> 		inc dx
  5770 0000133A 83D100              <4> 		adc cx,0
  5771 0000133D 89C8                <4> 		mov ax,cx
  5772 0000133F 89D3                <4> 		mov bx,dx
  5773                              <4> 		
  5774 00001341 5A                  <4> 		pop dx
  5775 00001342 59                  <4> 		pop cx
  5776 00001343 50                  <4> 		push ax	
  5777                              <4> 	.endv1neg:		
  5778 00001344 58                  <4> 	pop ax	
  5779                              <4> 		
  5780 00001345 51                  <4> 	push cx
  5781 00001346 81E10080            <4> 	and cx,0x8000
  5782 0000134A 83F900              <4> 	cmp cx,0
  5783 0000134D 741C                <4> 	jz .endv2neg
  5784 0000134F 59                  <4> 		pop cx
  5785 00001350 50                  <4> 		push ax
  5786 00001351 53                  <4> 		push bx
  5787                              <4> 		
  5788 00001352 B8FFFF              <4> 		mov ax,0xFFFF
  5789 00001355 BBFFFF              <4> 		mov bx,0xFFFF
  5790 00001358 81E1FF7F            <4> 		and cx,0x7FFF
  5791 0000135C 29D3                <4> 		sub bx,dx
  5792 0000135E 19C8                <4> 		sbb ax,cx
  5793 00001360 43                  <4> 		inc bx
  5794 00001361 83D000              <4> 		adc ax,0
  5795 00001364 89C1                <4> 		mov cx,ax
  5796 00001366 89DA                <4> 		mov dx,bx
  5797                              <4> 		
  5798 00001368 5B                  <4> 		pop bx
  5799 00001369 58                  <4> 		pop ax
  5800 0000136A 51                  <4> 		push cx
  5801                              <4> 	.endv2neg:	
  5802 0000136B 59                  <4> 	pop cx
  5803                              <4> 					
  5804 0000136C 837E0E00            <4> 	cmp word [bp+0x0E],0
  5805 00001370 7506                <4> 	jnz .sub
  5806 00001372 01D3                <4> 		add bx, dx
  5807 00001374 11C8                <4> 		adc ax, cx				
  5808 00001376 EB04                <4> 		jmp .endop
  5809                              <4> 	.sub:
  5810 00001378 29D3                <4> 		sub bx, dx
  5811 0000137A 19C8                <4> 		sbb ax, cx
  5812                              <4> 	.endop:
  5813                              <4> 	
  5814 0000137C 89C1                <4> 	mov cx,ax
  5815 0000137E 81E10080            <4> 	and cx,0x8000
  5816 00001382 83F900              <4> 	cmp cx,0
  5817 00001385 7415                <4> 	jz .endresneg
  5818 00001387 B9FFFF              <4> 		mov cx,0xFFFF
  5819 0000138A BAFFFF              <4> 		mov dx,0xFFFF
  5820 0000138D 29DA                <4> 		sub dx,bx
  5821 0000138F 19C1                <4> 		sbb cx,ax
  5822 00001391 42                  <4> 		inc dx
  5823 00001392 83D100              <4> 		adc cx,0
  5824 00001395 89C8                <4> 		mov ax,cx
  5825 00001397 89D3                <4> 		mov bx,dx
  5826                              <4> 		
  5827 00001399 050080              <4> 		add ax,0x8000
  5828                              <4> 	.endresneg:
  5829                              <4> 	
  5830 0000139C 89E1                <4> 	mov cx,sp
  5831 0000139E 89CD                <4> 	mov bp,cx
  5832 000013A0 89460A              <4> 	mov [bp+0x0A], ax
  5833 000013A3 895E0C              <4> 	mov [bp+0x0C], bx
  5834                              <4> 	
  5835 000013A6 C3                  <4> 	ret	
  5836                              <4> 	
  5837                              <4> proc__mul32_64:
  5838 000013A7 89E0                <4> 	mov ax,sp
  5839 000013A9 89C5                <4> 	mov bp,ax
  5840                              <4> 		
  5841 000013AB 31D2                <4> 	xor dx,dx
  5842 000013AD 8B4604              <4> 	mov ax,[bp+4]
  5843 000013B0 F76608              <4> 	mul word [bp+8]
  5844                              <4> 	
  5845 000013B3 C7460A0000          <4> 	mov word [bp+0x0A], 0
  5846 000013B8 C7460C0000          <4> 	mov word [bp+0x0C], 0
  5847 000013BD 89560E              <4> 	mov word [bp+0x0E], dx
  5848 000013C0 894610              <4> 	mov word [bp+0x10], ax
  5849                              <4> 		
  5850 000013C3 31D2                <4> 	xor dx,dx
  5851 000013C5 8B4604              <4> 	mov ax,[bp+4]
  5852 000013C8 F76606              <4> 	mul word [bp+6]
  5853                              <4> 	
  5854 000013CB 01460E              <4> 	add [bp+0x0E],ax
  5855 000013CE 11560C              <4> 	adc [bp+0x0C],dx
  5856 000013D1 83560A00            <4> 	adc word [bp+0x0A],0
  5857                              <4> 	
  5858 000013D5 31D2                <4> 	xor dx,dx
  5859 000013D7 8B4602              <4> 	mov ax,[bp+2]
  5860 000013DA F76608              <4> 	mul word [bp+8]
  5861                              <4> 	
  5862 000013DD 01460E              <4> 	add [bp+0x0E],ax
  5863 000013E0 11560C              <4> 	adc [bp+0x0C],dx
  5864                              <4> 	
  5865 000013E3 31D2                <4> 	xor dx,dx
  5866 000013E5 8B4602              <4> 	mov ax,[bp+2]
  5867 000013E8 F76606              <4> 	mul word [bp+6]
  5868                              <4> 	
  5869 000013EB 01460C              <4> 	add [bp+0x0C],ax
  5870 000013EE 11560A              <4> 	adc [bp+0x0A],dx
  5871                              <4> 	
  5872 000013F1 C3                  <4> 	ret
  5873                              <4> 	
  5874                              <4> proc__fldiv32:
  5875 000013F2 89E0                <4> 	mov ax,sp
  5876 000013F4 89C5                <4> 	mov bp,ax
  5877                              <4> 	
  5878 000013F6 8B4602              <4> 	mov ax,[bp+2]
  5879 000013F9 8B5E04              <4> 	mov bx,[bp+4]
  5880 000013FC C7460A0000          <4> 	mov word [bp+0x0A],0
  5881 00001401 C7460C0000          <4> 	mov word [bp+0x0C],0
  5882                              <4> 	
  5883 00001406 B118                <4> 	mov cl,24
  5884                              <4> 	.l1:
  5885 00001408 80F900              <4> 		cmp cl,0
  5886 0000140B 0F84AC00            <4> 		jz .l2
  5887 0000140F 51                  <4> 		push cx
  5888                              <4> 		
  5889 00001410 8B4E0A              <4> 		mov cx,[bp+0x0A]
  5890 00001413 8B560C              <4> 		mov dx,[bp+0x0C]
  5891 00001416 55                  <4> 		push bp
  5892 00001417 50                  <4> 		push ax
  5893 00001418 53                  <4> 		push bx
  5894                              <4> 		__shl32 cx, dx, 1
  5895                              <5>  stkopen 5
  5896 00001419 83EC05              <6>  sub word sp, %1
  5897 0000141C 54                  <6>  push sp
  5898 0000141D 5D                  <6>  pop bp
  5899 0000141E 894E00              <5>  mov word [bp+0], %1
  5900 00001421 895602              <5>  mov word [bp+2], %2
  5901 00001424 C6460401            <5>  mov byte [bp+4], %3
  5902 00001428 E809EF              <5>  call proc_shl32
  5903 0000142B 54                  <5>  push sp
  5904 0000142C 5D                  <5>  pop bp
  5905 0000142D 8B4E00              <5>  mov word %1, [bp+0]
  5906 00001430 8B5602              <5>  mov word %2, [bp+2]
  5907                              <5>  stkclose 5
  5908 00001433 83C405              <6>  add word sp, %1
  5909 00001436 5B                  <4> 		pop bx
  5910 00001437 58                  <4> 		pop ax
  5911 00001438 5D                  <4> 		pop bp
  5912 00001439 894E0A              <4> 		mov [bp+0x0A],cx
  5913 0000143C 89560C              <4> 		mov [bp+0x0C],dx
  5914                              <4> 				
  5915 0000143F 8B4E06              <4> 		mov cx,[bp+6]
  5916 00001442 8B5608              <4> 		mov dx,[bp+8]
  5917 00001445 50                  <4> 		push ax
  5918 00001446 53                  <4> 		push bx
  5919 00001447 55                  <4> 		push bp
  5920                              <4> 		__cmp32 ax, bx, cx, dx, dl
  5921                              <5>  stkopen 9
  5922 00001448 83EC09              <6>  sub word sp, %1
  5923 0000144B 54                  <6>  push sp
  5924 0000144C 5D                  <6>  pop bp
  5925 0000144D 894600              <5>  mov word [bp+0], %1
  5926 00001450 895E02              <5>  mov word [bp+2], %2
  5927 00001453 894E04              <5>  mov word [bp+4], %3
  5928 00001456 895606              <5>  mov word [bp+6], %4
  5929 00001459 E8ADEE              <5>  call proc_cmp32
  5930 0000145C 54                  <5>  push sp
  5931 0000145D 5D                  <5>  pop bp
  5932 0000145E 8A5608              <5>  mov byte %5, [bp+8]
  5933                              <5>  stkclose 9
  5934 00001461 83C409              <6>  add word sp, %1
  5935 00001464 5D                  <4> 		pop bp
  5936 00001465 5B                  <4> 		pop bx
  5937 00001466 58                  <4> 		pop ax				
  5938                              <4> 		
  5939 00001467 80FA00              <4> 		cmp dl,0
  5940 0000146A 7C2A                <4> 		jl .endsub
  5941 0000146C 8B4E06              <4> 			mov cx,[bp+6]
  5942 0000146F 8B5608              <4> 			mov dx,[bp+8]
  5943 00001472 55                  <4> 			push bp									
  5944                              <4> 			__sub32 ax, bx, cx, dx, ax, bx						
  5945                              <5>  stkopen 0x0C
  5946 00001473 83EC0C              <6>  sub word sp, %1
  5947 00001476 54                  <6>  push sp
  5948 00001477 5D                  <6>  pop bp
  5949 00001478 894600              <5>  mov word [bp+0], %1
  5950 0000147B 895E02              <5>  mov word [bp+2], %2
  5951 0000147E 894E04              <5>  mov word [bp+4], %3
  5952 00001481 895606              <5>  mov word [bp+6], %4
  5953 00001484 E867EE              <5>  call proc_sub32
  5954 00001487 54                  <5>  push sp
  5955 00001488 5D                  <5>  pop bp
  5956 00001489 8B4608              <5>  mov word %5, [bp+8]
  5957 0000148C 8B5E0A              <5>  mov word %6, [bp+0x0A]
  5958                              <5>  stkclose 0x0C
  5959 0000148F 83C40C              <6>  add word sp, %1
  5960 00001492 5D                  <4> 			pop bp			
  5961 00001493 FF460C              <4> 			inc word [bp+0x0C]			
  5962                              <4> 		.endsub:
  5963                              <4> 				
  5964 00001496 55                  <4> 		push bp
  5965                              <4> 		__shl32 ax, bx, 1
  5966                              <5>  stkopen 5
  5967 00001497 83EC05              <6>  sub word sp, %1
  5968 0000149A 54                  <6>  push sp
  5969 0000149B 5D                  <6>  pop bp
  5970 0000149C 894600              <5>  mov word [bp+0], %1
  5971 0000149F 895E02              <5>  mov word [bp+2], %2
  5972 000014A2 C6460401            <5>  mov byte [bp+4], %3
  5973 000014A6 E88BEE              <5>  call proc_shl32
  5974 000014A9 54                  <5>  push sp
  5975 000014AA 5D                  <5>  pop bp
  5976 000014AB 8B4600              <5>  mov word %1, [bp+0]
  5977 000014AE 8B5E02              <5>  mov word %2, [bp+2]
  5978                              <5>  stkclose 5
  5979 000014B1 83C405              <6>  add word sp, %1
  5980 000014B4 5D                  <4> 		pop bp
  5981                              <4> 		
  5982 000014B5 59                  <4> 		pop cx
  5983 000014B6 FEC9                <4> 		dec cl
  5984 000014B8 E94DFF              <4> 		jmp .l1
  5985                              <4> 	.l2:
  5986                              <4> 	
  5987 000014BB C3                  <4> 	ret
  5988                              <4> 
  5989                              <4> 
  5990                              <4> proc_flinvsig:
  5991 000014BC 89E0                <4> 	mov ax,sp
  5992 000014BE 89C5                <4> 	mov bp,ax
  5993                              <4> 	
  5994 000014C0 8B4602              <4> 	mov ax,[bp+2]	
  5995 000014C3 89C1                <4> 	mov cx,ax	
  5996 000014C5 83C900              <4> 	or cx, 0x0000
  5997 000014C8 F7D1                <4> 	not cx
  5998 000014CA 81E10080            <4> 	and cx,0x8000								
  5999 000014CE 25FF7F              <4> 	and ax,0x7FFF			
  6000 000014D1 01C8                <4> 	add ax,cx	
  6001 000014D3 894602              <4> 	mov word [bp+2],ax
  6002                              <4> 	
  6003 000014D6 C3                  <4> 	ret
  6004                              <4> 
  6005                              <4> proc_flsetsig:
  6006 000014D7 89E0                <4> 	mov ax,sp
  6007 000014D9 89C5                <4> 	mov bp,ax
  6008                              <4> 
  6009 000014DB 8B4602              <4> 	mov ax,[bp+2]
  6010 000014DE 25FF7F              <4> 	and ax,0x7FFF
  6011 000014E1 034604              <4> 	add ax,[bp+4]
  6012 000014E4 894602              <4> 	mov [bp+2],ax
  6013                              <4> 				
  6014 000014E7 C3                  <4> 	ret
  6015                              <4> 
  6016                              <4> proc__validate:
  6017 000014E8 89E0                <4> 	mov ax,sp
  6018 000014EA 89C5                <4> 	mov bp,ax
  6019                              <4> 	
  6020 000014EC 8B4602              <4> 	mov ax,[bp+2]
  6021 000014EF 25FF7F              <4> 	and ax,0x7FFF
  6022 000014F2 3DFF7F              <4> 	cmp ax,0x7FFF
  6023 000014F5 750A                <4> 	jne .isnumber1
  6024                              <4> 
  6025 000014F7 8B4604              <4> 	mov ax,[bp+4]
  6026 000014FA 83F8FF              <4> 	cmp ax,0xFFFF
  6027 000014FD 7502                <4> 	jnz .isnumber1
  6028                              <4> 	
  6029 000014FF EB37                <4> 	jmp .NaN
  6030                              <4> 	
  6031                              <4> 	.isnumber1:
  6032                              <4> 	
  6033 00001501 8B4606              <4> 	mov ax,[bp+6]
  6034 00001504 25FF7F              <4> 	and ax,0x7FFF
  6035 00001507 3DFF7F              <4> 	cmp ax,0x7FFF
  6036 0000150A 750A                <4> 	jne .isnumber2
  6037                              <4> 
  6038 0000150C 8B4608              <4> 	mov ax,[bp+8]
  6039 0000150F 83F8FF              <4> 	cmp ax,0xFFFF
  6040 00001512 7502                <4> 	jnz .isnumber2
  6041                              <4> 	
  6042 00001514 EB22                <4> 	jmp .NaN
  6043                              <4> 	
  6044                              <4> 	.isnumber2:
  6045                              <4> 	
  6046 00001516 8B4602              <4> 	mov ax,[bp+2]
  6047 00001519 D1E0                <4> 	shl ax,1
  6048 0000151B 80FCFF              <4> 	cmp ah,0xFF
  6049 0000151E 740C                <4> 	je .infinity
  6050                              <4> 
  6051 00001520 8B5E06              <4> 	mov bx,[bp+6]
  6052 00001523 D1E3                <4> 	shl bx,1
  6053 00001525 80FFFF              <4> 	cmp bh,0xFF
  6054 00001528 7402                <4> 	je .infinity			
  6055                              <4> 	
  6056 0000152A EB18                <4> 	jmp .ok	
  6057                              <4> 	
  6058                              <4> 	.infinity:		
  6059 0000152C C7460A807F          <4> 		mov word [bp+0x0A],0x7F80
  6060 00001531 C7460C0000          <4> 		mov word [bp+0x0C],0
  6061 00001536 EB12                <4> 		jmp .done
  6062                              <4> 	.NaN:
  6063 00001538 C7460AFF7F          <4> 		mov word [bp+0x0A],0x7FFF
  6064 0000153D C7460CFFFF          <4> 		mov word [bp+0x0C],0xFFFF
  6065 00001542 EB06                <4> 		jmp .done
  6066                              <4> 			
  6067                              <4> 	.ok:
  6068 00001544 C6460E01            <4> 		mov byte [bp+0x0E],1
  6069 00001548 EB04                <4> 		jmp .end
  6070                              <4> 	.done:
  6071 0000154A C6460E00            <4> 		mov byte [bp+0x0E],0		
  6072                              <4> 	.end:
  6073                              <4> 	
  6074 0000154E C3                  <4> 	ret
  6075                              <4> 
  6076                              <4> proc__div_validate:
  6077 0000154F 89E0                <4> 	mov ax,sp
  6078 00001551 89C5                <4> 	mov bp,ax
  6079                              <4> 	
  6080 00001553 8B4602              <4> 	mov ax,[bp+2]
  6081 00001556 8B5E06              <4> 	mov bx,[bp+6]
  6082 00001559 D1E0                <4> 	shl ax,1
  6083 0000155B D1E3                <4> 	shl bx,1
  6084 0000155D 08FC                <4> 	or ah,bh
  6085 0000155F 80FC00              <4> 	cmp ah,0
  6086 00001562 7422                <4> 	jz .NaN
  6087                              <4> 	
  6088 00001564 8B4602              <4> 	mov ax,[bp+2]
  6089 00001567 D1E0                <4> 	shl ax,1
  6090 00001569 80FC00              <4> 	cmp ah,0
  6091 0000156C 7424                <4> 	jz .zero
  6092 0000156E 8B5E06              <4> 	mov bx,[bp+6]
  6093 00001571 D1E3                <4> 	shl bx,1
  6094 00001573 80FF00              <4> 	cmp bh,0	
  6095 00001576 7402                <4> 	jz .infinity		
  6096                              <4> 		
  6097 00001578 EB24                <4> 	jmp .ok
  6098                              <4> 	
  6099                              <4> 	.infinity:		
  6100 0000157A C7460A807F          <4> 		mov word [bp+0x0A],0x7F80
  6101 0000157F C7460C0000          <4> 		mov word [bp+0x0C],0
  6102 00001584 EB1E                <4> 		jmp .done
  6103                              <4> 	.NaN:
  6104 00001586 C7460AFF7F          <4> 		mov word [bp+0x0A],0x7FFF
  6105 0000158B C7460CFFFF          <4> 		mov word [bp+0x0C],0xFFFF
  6106 00001590 EB12                <4> 		jmp .done
  6107                              <4> 	.zero:
  6108 00001592 C7460A0000          <4> 		mov word [bp+0x0A],0
  6109 00001597 C7460C0000          <4> 		mov word [bp+0x0C],0
  6110 0000159C EB06                <4> 		jmp .done	
  6111                              <4> 			
  6112                              <4> 	.ok:
  6113 0000159E C6460E01            <4> 		mov byte [bp+0x0E],1
  6114 000015A2 EB04                <4> 		jmp .end
  6115                              <4> 	.done:	
  6116 000015A4 C6460E00            <4> 		mov byte [bp+0x0E],0
  6117                              <4> 	.end:	
  6118                              <4> 		
  6119 000015A8 C3                  <4> 	ret
  6120                              <4> 	
  6121                              <4> proc__mul_validate:
  6122 000015A9 89E0                <4> 	mov ax,sp
  6123 000015AB 89C5                <4> 	mov bp,ax
  6124                              <4> 	
  6125 000015AD 8B4602              <4> 	mov ax,[bp+2]
  6126 000015B0 D1E0                <4> 	shl ax,1	
  6127 000015B2 80FC00              <4> 	cmp ah,0	
  6128 000015B5 740C                <4> 	jz .zero		
  6129                              <4> 
  6130 000015B7 8B5E04              <4> 	mov bx,[bp+4]
  6131 000015BA D1E3                <4> 	shl bx,1
  6132 000015BC 80FF00              <4> 	cmp bh,0
  6133 000015BF 7402                <4> 	jz .zero
  6134                              <4> 			
  6135 000015C1 EB0C                <4> 	jmp .ok
  6136                              <4> 	
  6137                              <4> 	.zero:		
  6138 000015C3 C746060000          <4> 		mov word [bp+6],0
  6139 000015C8 C746080000          <4> 		mov word [bp+8],0
  6140 000015CD EB06                <4> 		jmp .done
  6141                              <4> 			
  6142                              <4> 	.ok:
  6143 000015CF C6460A01            <4> 		mov byte [bp+0x0A],1
  6144 000015D3 EB04                <4> 		jmp .end
  6145                              <4> 	.done:	
  6146 000015D5 C6460A00            <4> 		mov byte [bp+0x0A],0
  6147                              <4> 	.end:	
  6148                              <4> 		
  6149 000015D9 C3                  <4> 	ret
  6150                              <4> 	
  6151                              <4> proc__addorsub_validate:
  6152 000015DA 89E0                <4> 	mov ax,sp
  6153 000015DC 89C5                <4> 	mov bp,ax
  6154                              <4> 	
  6155 000015DE 8B4602              <4> 	mov ax,[bp+2]
  6156 000015E1 8B5E06              <4> 	mov bx,[bp+6]	
  6157 000015E4 D1E0                <4> 	shl ax,1
  6158 000015E6 D1E3                <4> 	shl bx,1
  6159 000015E8 08FC                <4> 	or ah,bh
  6160 000015EA 80FC00              <4> 	cmp ah,0
  6161 000015ED 7416                <4> 	jz .zero
  6162                              <4> 	
  6163 000015EF 8B4602              <4> 	mov ax,[bp+2]
  6164 000015F2 D1E0                <4> 	shl ax,1
  6165 000015F4 80FC00              <4> 	cmp ah,0		
  6166 000015F7 7426                <4> 	jz .value2
  6167                              <4> 	
  6168 000015F9 8B4606              <4> 	mov ax,[bp+6]
  6169 000015FC D1E0                <4> 	shl ax,1
  6170 000015FE 80FC00              <4> 	cmp ah,0
  6171 00001601 740E                <4> 	jz .value1	
  6172                              <4> 		
  6173 00001603 EB28                <4> 	jmp .ok
  6174                              <4> 	
  6175                              <4> 	.zero:		
  6176 00001605 C7460A0000          <4> 		mov word [bp+0x0A],0
  6177 0000160A C7460C0000          <4> 		mov word [bp+0x0C],0
  6178 0000160F EB22                <4> 		jmp .done
  6179                              <4> 	.value1:
  6180 00001611 8B4602              <4> 		mov ax,[bp+2]
  6181 00001614 8B5E04              <4> 		mov bx,[bp+4]
  6182 00001617 89460A              <4> 		mov word [bp+0x0A],ax
  6183 0000161A 895E0C              <4> 		mov word [bp+0x0C],bx		
  6184 0000161D EB14                <4> 		jmp .done
  6185                              <4> 	.value2:		
  6186 0000161F 8B4606              <4> 		mov ax,[bp+6]
  6187 00001622 8B5E08              <4> 		mov bx,[bp+8]
  6188 00001625 89460A              <4> 		mov word [bp+0x0A],ax
  6189 00001628 895E0C              <4> 		mov word [bp+0x0C],bx
  6190 0000162B EB06                <4> 		jmp .done
  6191                              <4> 			
  6192                              <4> 	.ok:
  6193 0000162D C6460E01            <4> 		mov byte [bp+0x0E],1
  6194 00001631 EB04                <4> 		jmp .end
  6195                              <4> 	.done:	
  6196 00001633 C6460E00            <4> 		mov byte [bp+0x0E],0
  6197                              <4> 	.end:	
  6198                              <4> 		
  6199 00001637 C3                  <4> 	ret
  6200                              <4> 	
  6201                              <4> 
  6202                              <4> proc__cmp_validate:
  6203 00001638 89E0                <4> 	mov ax,sp
  6204 0000163A 89C5                <4> 	mov bp,ax
  6205                              <4> 	
  6206 0000163C 8B4602              <4> 	mov ax,[bp+2]
  6207 0000163F 8B5E04              <4> 	mov bx,[bp+4]
  6208 00001642 D1E0                <4> 	shl ax,1
  6209 00001644 D1E3                <4> 	shl bx,1
  6210                              <4> 	
  6211 00001646 88E5                <4> 	mov ch,ah
  6212 00001648 30FD                <4> 	xor ch,bh
  6213 0000164A 80FD00              <4> 	cmp ch,0
  6214 0000164D 743A                <4> 	jz .ok
  6215                              <4> 		
  6216 0000164F 80FC00              <4> 	cmp ah,0
  6217 00001652 7407                <4> 	jz .zerov1
  6218                              <4> 	
  6219 00001654 80FF00              <4> 	cmp bh,0
  6220 00001657 7419                <4> 	jz .zerov2	
  6221                              <4> 			
  6222 00001659 EB2E                <4> 	jmp .ok
  6223                              <4> 	
  6224                              <4> 	.zerov1:
  6225 0000165B 8B4604              <4> 		mov ax,[bp+4]
  6226 0000165E 250080              <4> 		and ax,0x8000
  6227 00001661 83F800              <4> 		cmp ax,0
  6228 00001664 7506                <4> 		jnz .neg1
  6229 00001666 C64606FF            <4> 			mov byte [bp+6],-1
  6230 0000166A EB04                <4> 			jmp .endcmp1
  6231                              <4> 		.neg1:
  6232 0000166C C6460601            <4> 			mov byte [bp+6], 1
  6233                              <4> 		.endcmp1:
  6234 00001670 EB1D                <4> 		jmp .done
  6235                              <4> 	.zerov2:		
  6236 00001672 8B4602              <4> 		mov ax,[bp+2]
  6237 00001675 250080              <4> 		and ax,0x8000
  6238 00001678 83F800              <4> 		cmp ax,0
  6239 0000167B 7506                <4> 		jnz .neg2
  6240 0000167D C6460601            <4> 			mov byte [bp+6], 1
  6241 00001681 EB04                <4> 			jmp .endcmp2
  6242                              <4> 		.neg2:
  6243 00001683 C64606FF            <4> 			mov byte [bp+6],-1
  6244                              <4> 		.endcmp2:
  6245 00001687 EB06                <4> 		jmp .done	
  6246                              <4> 			
  6247                              <4> 	.ok:
  6248 00001689 C6460701            <4> 		mov byte [bp+7],1
  6249 0000168D EB04                <4> 		jmp .end
  6250                              <4> 	.done:	
  6251 0000168F C6460700            <4> 		mov byte [bp+7],0
  6252                              <4> 	.end:	
  6253                              <4> 		
  6254 00001693 C3                  <4> 	ret
  6255                              <4> 	
  6256                              <4> %endif
  6257                              <3> 
  6258                              <3> %macro flinvsig 1
  6259                              <3> 	flinvsig cs, %1
  6260                              <3> %endmacro
  6261                              <3> 
  6262                              <3> %macro flsetsig 1
  6263                              <3> 	flsetsig cs, %1
  6264                              <3> %endmacro
  6265                              <3> 
  6266                              <3> %macro flclrsig 1
  6267                              <3> 	flclrsig cs, %1
  6268                              <3> %endmacro
  6269                              <3> 
  6270                              <3> %macro flroundtoint16 2
  6271                              <3> 	flroundtoint16 cs, %1, cs, %2
  6272                              <3> %endmacro
  6273                              <3> 
  6274                              <3> %macro flroundtoint32 1
  6275                              <3> 	flroundtoint32 %1, %1
  6276                              <3> %endmacro
  6277                              <3> 
  6278                              <3> %macro flroundtoint32 2
  6279                              <3> 	flroundtoint32 cs, %1, cs, %2
  6280                              <3> %endmacro
  6281                              <3> 
  6282                              <3> %macro int16tofl 2
  6283                              <3> 	int16tofl cs, %1, cs, %2
  6284                              <3> %endmacro
  6285                              <3> 
  6286                              <3> %macro fltoint16 2
  6287                              <3> 	fltoint16 cs, %1, cs, %2
  6288                              <3> %endmacro
  6289                              <3> 
  6290                              <3> %macro fltoint32 1
  6291                              <3> 	fltoint32 %1, %1
  6292                              <3> %endmacro
  6293                              <3> 
  6294                              <3> %macro fltoint32 2
  6295                              <3> 	fltoint32 cs, %1, cs, %2
  6296                              <3> %endmacro
  6297                              <3> 
  6298                              <3> %macro int32tofl 1
  6299                              <3> 	int32tofl %1, %1
  6300                              <3> %endmacro
  6301                              <3> 
  6302                              <3> %macro int32tofl 2
  6303                              <3> 	int32tofl cs, %1, cs, %2
  6304                              <3> %endmacro
  6305                              <3> 
  6306                              <3> %macro flcmp 3
  6307                              <3> 	flcmp cs, %1, cs, %2, %3
  6308                              <3> %endmacro
  6309                              <3> 
  6310                              <3> %macro flshl 1
  6311                              <3> 	flshl cs, %1
  6312                              <3> %endmacro
  6313                              <3> 
  6314                              <3> %macro flshr 1
  6315                              <3> 	flshr cs, %1
  6316                              <3> %endmacro
  6317                              <3> 
  6318                              <3> %macro fladd 3
  6319                              <3> 	fladd cs, %1, cs, %2, cs, %3
  6320                              <3> %endmacro
  6321                              <3> 
  6322                              <3> %macro flsub 3
  6323                              <3> 	flsub cs, %1, cs, %2, cs, %3
  6324                              <3> %endmacro	
  6325                              <3> 
  6326                              <3> %macro flmul 3
  6327                              <3> 	flmul cs, %1, cs, %2, cs, %3
  6328                              <3> %endmacro
  6329                              <3> 
  6330                              <3> %macro fldiv 3
  6331                              <3> 	fldiv cs, %1, cs, %2, cs, %3
  6332                              <3> %endmacro	
  6333                              <3> 
  6334                              <3> %macro fladd 6
  6335                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  6336                              <3> %endmacro
  6337                              <3> 
  6338                              <3> %macro flsub 6
  6339                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  6340                              <3> %endmacro
  6341                              <3> 
  6342                              <3> %macro flroundtoint16 4
  6343                              <3> 	stkopen 0x06
  6344                              <3> 	mov ax,%1
  6345                              <3> 	mov ds,ax
  6346                              <3> 	mov ax,[%2+2]
  6347                              <3> 	mov [bp+0],ax
  6348                              <3> 	mov ax,[%2]
  6349                              <3> 	mov [bp+2],ax	
  6350                              <3> 	call proc_flroundtoint16
  6351                              <3> 	mov ax,sp
  6352                              <3> 	mov bp,ax
  6353                              <3> 	mov ax,%3
  6354                              <3> 	mov ds,ax
  6355                              <3> 	mov ax,[bp+4]
  6356                              <3> 	mov [%4],ax
  6357                              <3> 	stkclose 0x06
  6358                              <3> %endmacro
  6359                              <3> 
  6360                              <3> %macro flroundtoint32 4
  6361                              <3> 	stkopen 0x08
  6362                              <3> 	mov ax,%1
  6363                              <3> 	mov ds,ax
  6364                              <3> 	mov ax,[%2+2]
  6365                              <3> 	mov [bp+0],ax
  6366                              <3> 	mov ax,[%2]
  6367                              <3> 	mov [bp+2],ax	
  6368                              <3> 	call proc_flroundtoint32
  6369                              <3> 	mov ax,sp
  6370                              <3> 	mov bp,ax
  6371                              <3> 	mov ax,%3
  6372                              <3> 	mov ds,ax
  6373                              <3> 	mov ax,[bp+4]
  6374                              <3> 	mov [%4+2],ax
  6375                              <3> 	mov ax,[bp+6]
  6376                              <3> 	mov [%4],ax
  6377                              <3> 	stkclose 0x08
  6378                              <3> %endmacro
  6379                              <3> 
  6380                              <3> %macro fltoint16 4
  6381                              <3> 	stkopen 0x06
  6382                              <3> 	mov ax,%1
  6383                              <3> 	mov ds,ax
  6384                              <3> 	mov ax,[%2+2]
  6385                              <3> 	mov [bp+0],ax
  6386                              <3> 	mov ax,[%2]
  6387                              <3> 	mov [bp+2],ax	
  6388                              <3> 	call proc_fltoint16
  6389                              <3> 	mov ax,sp
  6390                              <3> 	mov bp,ax
  6391                              <3> 	mov ax,%3
  6392                              <3> 	mov ds,ax
  6393                              <3> 	mov ax,[bp+4]
  6394                              <3> 	mov [%4],ax
  6395                              <3> 	stkclose 0x06
  6396                              <3> %endmacro
  6397                              <3> 
  6398                              <3> %macro int16tofl 4	
  6399                              <3> 	stkopen 0x06
  6400                              <3> 	mov ax,%1
  6401                              <3> 	mov ds,ax
  6402                              <3> 	mov ax,[%2]
  6403                              <3> 	mov [bp+0],ax	
  6404                              <3> 	call proc_int16tofl
  6405                              <3> 	mov ax,sp
  6406                              <3> 	mov bp,ax
  6407                              <3> 	mov ax,%3
  6408                              <3> 	mov ds,ax
  6409                              <3> 	mov ax,[bp+2]
  6410                              <3> 	mov [%4+2],ax
  6411                              <3> 	mov ax,[bp+4]
  6412                              <3> 	mov [%4],ax
  6413                              <3> 	stkclose 0x06
  6414                              <3> %endmacro
  6415                              <3> 
  6416                              <3> %macro fltoint32 4
  6417                              <3> 	stkopen 0x08
  6418                              <3> 	mov ax,%1
  6419                              <3> 	mov ds,ax
  6420                              <3> 	mov ax,[%2+2]
  6421                              <3> 	mov [bp+0],ax
  6422                              <3> 	mov ax,[%2]
  6423                              <3> 	mov [bp+2],ax	
  6424                              <3> 	call proc_fltoint32
  6425                              <3> 	mov ax,sp
  6426                              <3> 	mov bp,ax
  6427                              <3> 	mov ax,%3
  6428                              <3> 	mov ds,ax
  6429                              <3> 	mov ax,[bp+4]
  6430                              <3> 	mov [%4+2],ax
  6431                              <3> 	mov ax,[bp+6]
  6432                              <3> 	mov [%4],ax
  6433                              <3> 	stkclose 0x08
  6434                              <3> %endmacro
  6435                              <3> 
  6436                              <3> %macro int32tofl 4
  6437                              <3> 	stkopen 0x08
  6438                              <3> 	mov ax,%1
  6439                              <3> 	mov ds,ax
  6440                              <3> 	mov ax,[%2+2]
  6441                              <3> 	mov [bp+0],ax
  6442                              <3> 	mov ax,[%2]
  6443                              <3> 	mov [bp+2],ax	
  6444                              <3> 	call proc_int32tofl
  6445                              <3> 	mov ax,sp
  6446                              <3> 	mov bp,ax
  6447                              <3> 	mov ax,%3
  6448                              <3> 	mov ds,ax
  6449                              <3> 	mov ax,[bp+4]
  6450                              <3> 	mov [%4+2],ax
  6451                              <3> 	mov ax,[bp+6]
  6452                              <3> 	mov [%4],ax
  6453                              <3> 	stkclose 0x08
  6454                              <3> %endmacro
  6455                              <3> 
  6456                              <3> %macro flinvsig 2
  6457                              <3> 	stkopen 0x02
  6458                              <3> 	mov ax,%1
  6459                              <3> 	mov ds,ax
  6460                              <3> 	mov ax,[%2+2]
  6461                              <3> 	mov word [bp+0], ax
  6462                              <3> 	call proc_flinvsig
  6463                              <3> 	push sp
  6464                              <3> 	pop bp
  6465                              <3> 	mov ax,[bp+0]
  6466                              <3> 	mov word [%2+2],ax
  6467                              <3> 	stkclose 0x02
  6468                              <3> %endmacro
  6469                              <3> 
  6470                              <3> %macro flsetsig 2
  6471                              <3> 	stkopen 0x04
  6472                              <3> 	mov ax,%1
  6473                              <3> 	mov ds,ax
  6474                              <3> 	mov ax,[%2+2]
  6475                              <3> 	mov word [bp+0], ax
  6476                              <3> 	mov word [bp+2], 0x8000
  6477                              <3> 	call proc_flsetsig
  6478                              <3> 	push sp
  6479                              <3> 	pop bp
  6480                              <3> 	mov ax,[bp+0]
  6481                              <3> 	mov word [%2+2],ax
  6482                              <3> 	stkclose 0x04	
  6483                              <3> %endmacro
  6484                              <3> 
  6485                              <3> %macro flclrsig 2
  6486                              <3> 	stkopen 0x04
  6487                              <3> 	mov ax,%1
  6488                              <3> 	mov ds,ax
  6489                              <3> 	mov ax,[%2+2]
  6490                              <3> 	mov word [bp+0], ax
  6491                              <3> 	mov word [bp+2], 0x0000
  6492                              <3> 	call proc_flsetsig
  6493                              <3> 	push sp
  6494                              <3> 	pop bp
  6495                              <3> 	mov ax,[bp+0]
  6496                              <3> 	mov word [%2+2],ax
  6497                              <3> 	stkclose 0x04	
  6498                              <3> %endmacro
  6499                              <3> 
  6500                              <3> %macro flcmp 5	
  6501                              <3> 	stkopen 0x09
  6502                              <3> 	mov ax,%1
  6503                              <3> 	mov ds,ax
  6504                              <3> 	mov ax,[%2+2]
  6505                              <3> 	mov [bp+0],ax
  6506                              <3> 	mov ax,[%2]
  6507                              <3> 	mov [bp+2],ax
  6508                              <3> 	mov ax,%3
  6509                              <3> 	mov ds,ax
  6510                              <3> 	mov ax,[%4+2]
  6511                              <3> 	mov [bp+4],ax
  6512                              <3> 	mov ax,[%4]
  6513                              <3> 	mov [bp+6],ax
  6514                              <3> 	call proc_flcmp
  6515                              <3> 	mov ax,sp
  6516                              <3> 	mov bp,ax
  6517                              <3> 	mov byte %5,[bp+8]
  6518                              <3> 	stkclose 0x09
  6519                              <3> %endmacro
  6520                              <3> 
  6521                              <3> %macro flshl 2	
  6522                              <3> 	stkopen 0x02
  6523                              <3> 	mov ax,%1
  6524                              <3> 	mov ds,ax
  6525                              <3> 	mov ax,[%2+2]
  6526                              <3> 	mov [bp+0],ax
  6527                              <3> 	call proc_flshl
  6528                              <3> 	mov ax,sp
  6529                              <3> 	mov bp,ax
  6530                              <3> 	mov ax,%1
  6531                              <3> 	mov ds,ax
  6532                              <3> 	mov ax,[bp+0]
  6533                              <3> 	mov [%2+2],ax
  6534                              <3> 	stkclose 0x02
  6535                              <3> %endmacro
  6536                              <3> 
  6537                              <3> %macro flshr 2	
  6538                              <3> 	stkopen 0x02
  6539                              <3> 	mov ax,%1
  6540                              <3> 	mov ds,ax
  6541                              <3> 	mov ax,[%2+2]
  6542                              <3> 	mov [bp+0],ax
  6543                              <3> 	call proc_flshr
  6544                              <3> 	mov ax,sp
  6545                              <3> 	mov bp,ax
  6546                              <3> 	mov ax,%1
  6547                              <3> 	mov ds,ax
  6548                              <3> 	mov ax,[bp+0]
  6549                              <3> 	mov [%2+2],ax
  6550                              <3> 	stkclose 0x02
  6551                              <3> %endmacro
  6552                              <3> 
  6553                              <3> %macro fldiv 6	
  6554                              <3> 	stkopen 0x0C
  6555                              <3> 	mov ax,%1
  6556                              <3> 	mov ds,ax
  6557                              <3> 	mov ax,[%2+2]
  6558                              <3> 	mov [bp+0],ax
  6559                              <3> 	mov ax,[%2]
  6560                              <3> 	mov [bp+2],ax
  6561                              <3> 	mov ax,%3
  6562                              <3> 	mov ds,ax
  6563                              <3> 	mov ax,[%4+2]
  6564                              <3> 	mov [bp+4],ax
  6565                              <3> 	mov ax,[%4]
  6566                              <3> 	mov [bp+6],ax
  6567                              <3> 	call proc_fldiv
  6568                              <3> 	mov ax,sp
  6569                              <3> 	mov bp,ax
  6570                              <3> 	mov ax,%5
  6571                              <3> 	mov ds,ax
  6572                              <3> 	mov ax,[bp+8]
  6573                              <3> 	mov [%6+2],ax
  6574                              <3> 	mov ax,[bp+0x0A]
  6575                              <3> 	mov [%6],ax
  6576                              <3> 	stkclose 0x0C
  6577                              <3> %endmacro
  6578                              <3> 
  6579                              <3> %macro flmul 6	
  6580                              <3> 	stkopen 0x0C
  6581                              <3> 	mov ax,%1
  6582                              <3> 	mov ds,ax
  6583                              <3> 	mov ax,[%2+2]
  6584                              <3> 	mov [bp+0],ax
  6585                              <3> 	mov ax,[%2]
  6586                              <3> 	mov [bp+2],ax
  6587                              <3> 	mov ax,%3
  6588                              <3> 	mov ds,ax
  6589                              <3> 	mov ax,[%4+2]
  6590                              <3> 	mov [bp+4],ax
  6591                              <3> 	mov ax,[%4]
  6592                              <3> 	mov [bp+6],ax
  6593                              <3> 	call proc_flmul
  6594                              <3> 	mov ax,sp
  6595                              <3> 	mov bp,ax
  6596                              <3> 	mov ax,%5
  6597                              <3> 	mov ds,ax
  6598                              <3> 	mov ax,[bp+8]
  6599                              <3> 	mov [%6+2],ax
  6600                              <3> 	mov ax,[bp+0x0A]
  6601                              <3> 	mov [%6],ax
  6602                              <3> 	stkclose 0x0C
  6603                              <3> %endmacro
  6604                              <3> 	
  6605                              <3> %macro fladdorsub 7
  6606                              <3> 	stkopen 0x0E
  6607                              <3> 	mov ax,%1
  6608                              <3> 	mov ds,ax
  6609                              <3> 	mov ax,[%2+2]
  6610                              <3> 	mov [bp+0],ax
  6611                              <3> 	mov ax,[%2]
  6612                              <3> 	mov [bp+2],ax
  6613                              <3> 	mov ax,%3
  6614                              <3> 	mov ds,ax
  6615                              <3> 	mov ax,[%4+2]
  6616                              <3> 	mov [bp+4],ax
  6617                              <3> 	mov ax,[%4]
  6618                              <3> 	mov [bp+6],ax
  6619                              <3> 	mov word [bp+0x0C], %7
  6620                              <3> 	call proc_fladdorsub
  6621                              <3> 	mov ax,sp
  6622                              <3> 	mov bp,ax
  6623                              <3> 	mov ax,%5
  6624                              <3> 	mov ds,ax
  6625                              <3> 	mov ax,[bp+8]
  6626                              <3> 	mov [%6+2],ax
  6627                              <3> 	mov ax,[bp+0x0A]
  6628                              <3> 	mov [%6],ax
  6629                              <3> 	stkclose 0x0E
  6630                              <3> %endmacro
  6631                              <3> 	
  6632                              <3> %endif
  6633                              <2> 
  6634                              <2> %macro __sin 4
  6635                              <2> 	__sinorcos %1, %2, %3, %4, 1
  6636                              <2> %endmacro
  6637                              <2> 
  6638                              <2> %macro __cos 4
  6639                              <2> 	__sinorcos %1, %2, %3, %4, 0
  6640                              <2> %endmacro
  6641                              <2> 
  6642                              <2> %macro __sin0x90 4
  6643                              <2> 	__sinorcos0x90 %1, %2, %3, %4, 1
  6644                              <2> %endmacro
  6645                              <2> 
  6646                              <2> %macro __cos0x90 4
  6647                              <2> 	__sinorcos0x90 %1, %2, %3, %4, 0
  6648                              <2> %endmacro
  6649                              <2> 
  6650                              <2> %macro __to0x360 4
  6651                              <2> 	stkopen 0x04
  6652                              <2> 	mov word [bp+0],%1
  6653                              <2> 	mov word [bp+2],%2	
  6654                              <2> 	call proc_to0x360
  6655                              <2> 	push sp
  6656                              <2> 	pop bp
  6657                              <2> 	mov word %3,[bp+4]
  6658                              <2> 	mov word %4,[bp+6]
  6659                              <2> 	stkclose 0x04
  6660                              <2> %endmacro
  6661                              <2> 
  6662                              <2> %macro __toradians 4
  6663                              <2> 	stkopen 0x08
  6664                              <2> 	mov word [bp+0],%1
  6665                              <2> 	mov word [bp+2],%2
  6666                              <2> 	call proc_toradians
  6667                              <2> 	push sp
  6668                              <2> 	pop bp
  6669                              <2> 	mov word %3, [bp+4]
  6670                              <2> 	mov word %4, [bp+6]
  6671                              <2> 	stkclose 0x08
  6672                              <2> %endmacro
  6673                              <2> 
  6674                              <2> %macro __todegrees 4
  6675                              <2> 	stkopen 0x08
  6676                              <2> 	mov word [bp+0],%1
  6677                              <2> 	mov word [bp+2],%2
  6678                              <2> 	call proc_todegrees
  6679                              <2> 	push sp
  6680                              <2> 	pop bp
  6681                              <2> 	mov word %3, [bp+4]
  6682                              <2> 	mov word %4, [bp+6]
  6683                              <2> 	stkclose 0x08
  6684                              <2> %endmacro
  6685                              <2> 
  6686                              <2> %macro __atan 4
  6687                              <2> 	stkopen 0x08
  6688                              <2> 	mov word [bp+0],%1
  6689                              <2> 	mov word [bp+2],%2	
  6690                              <2> 	call proc_atan
  6691                              <2> 	push sp
  6692                              <2> 	pop bp
  6693                              <2> 	mov word %3,[bp+4]
  6694                              <2> 	mov word %4,[bp+6]
  6695                              <2> 	stkclose 0x08
  6696                              <2> %endmacro
  6697                              <2> 
  6698                              <2> %macro __sinorcos 5
  6699                              <2> 	stkopen 0x09
  6700                              <2> 	mov word [bp+0],%1
  6701                              <2> 	mov word [bp+2],%2	
  6702                              <2> 	mov byte [bp+8],%5
  6703                              <2> 	call proc_sinorcos
  6704                              <2> 	push sp
  6705                              <2> 	pop bp
  6706                              <2> 	mov word %3,[bp+4]
  6707                              <2> 	mov word %4,[bp+6]
  6708                              <2> 	stkclose 0x09
  6709                              <2> %endmacro
  6710                              <2> 
  6711                              <2> %macro __sinorcos0x90 5
  6712                              <2> 	stkopen 0x09
  6713                              <2> 	mov word [bp+0],%1
  6714                              <2> 	mov word [bp+2],%2
  6715                              <2> 	mov byte [bp+8],%5
  6716                              <2> 	call proc_sinorcos0x90
  6717                              <2> 	push sp
  6718                              <2> 	pop bp
  6719                              <2> 	mov word %3,[bp+4]
  6720                              <2> 	mov word %4,[bp+6]
  6721                              <2> 	stkclose 0x09
  6722                              <2> %endmacro
  6723                              <2> 
  6724                              <2> %macro __sinnorm 3
  6725                              <2> 	stkopen 0x06
  6726                              <2> 	mov word [bp+0],%1
  6727                              <2> 	mov word [bp+2],%2
  6728                              <2> 	call proc__sinnorm
  6729                              <2> 	push sp
  6730                              <2> 	pop bp
  6731                              <2> 	mov word %1,[bp+0]
  6732                              <2> 	mov word %2,[bp+2]
  6733                              <2> 	mov word %3,[bp+4]
  6734                              <2> 	stkclose 0x06
  6735                              <2> %endmacro
  6736                              <2> 
  6737                              <2> %macro __cosnorm 3
  6738                              <2> 	stkopen 0x06
  6739                              <2> 	mov word [bp+0],%1
  6740                              <2> 	mov word [bp+2],%2
  6741                              <2> 	call proc__cosnorm
  6742                              <2> 	push sp
  6743                              <2> 	pop bp
  6744                              <2> 	mov word %1,[bp+0]
  6745                              <2> 	mov word %2,[bp+2]
  6746                              <2> 	mov word %3,[bp+4]
  6747                              <2> 	stkclose 0x06
  6748                              <2> %endmacro
  6749                              <2> 
  6750                              <2> %macro __norm_factors 5
  6751                              <2> 	stkopen 0x0A
  6752                              <2> 	mov word [bp+0],%1
  6753                              <2> 	mov word [bp+2],%2
  6754                              <2> 	call proc__norm_factors
  6755                              <2> 	push sp
  6756                              <2> 	pop bp
  6757                              <2> 	mov word %3,[bp+4]
  6758                              <2> 	mov word %4,[bp+6]
  6759                              <2> 	mov word %5,[bp+8]
  6760                              <2> 	stkclose 0x0A
  6761                              <2> %endmacro
  6762                              <2> 
  6763                              <2> %macro __fat16 2
  6764                              <2> 	stkopen 0x04
  6765                              <2> 	mov word [bp+0],%1
  6766                              <2> 	call proc__fat16
  6767                              <2> 	push sp
  6768                              <2> 	pop bp
  6769                              <2> 	mov word %2, [bp+2]
  6770                              <2> 	stkclose 0x04
  6771                              <2> %endmacro
  6772                              <2> 
  6773                              <2> %macro __pow16 3
  6774                              <2> 	stkopen 0x06
  6775                              <2> 	mov word [bp+0],%1
  6776                              <2> 	mov word [bp+2],%2
  6777                              <2> 	call proc__pow16
  6778                              <2> 	push sp
  6779                              <2> 	pop bp
  6780                              <2> 	mov word %3, [bp+4]
  6781                              <2> 	stkclose 0x06
  6782                              <2> %endmacro
  6783                              <2> 	
  6784                              <2> section .data
  6785 00001694 DB0F4940            <2> 	PI: dd 0x40490FDB
  6786 00001698 00003443            <2> 	__180dg: dd 0x43340000
  6787                              <2> 
  6788                              <2> proc_to0x360:
  6789 0000169C 89E0                <2> 	mov ax,sp
  6790 0000169E 89C5                <2> 	mov bp,ax
  6791                              <2> 	
  6792 000016A0 8B4602              <2> 	mov ax,[bp+2]
  6793 000016A3 8B5E04              <2> 	mov bx,[bp+4]
  6794 000016A6 25FF7F              <2> 	and ax,0x7FFF
  6795                              <2> 	
  6796 000016A9 B9C940              <2> 	mov cx,0x40C9	; 2*PI (alta)
  6797 000016AC BADB0F              <2> 	mov dx,0x0FDB	; 2*PI (baixa)		
  6798                              <2> 		
  6799 000016AF 55                  <2> 	push bp
  6800                              <2> 	__fldiv ax, bx, cx, dx, cx, dx
  6801                              <3>  stkopen 0x0E
  6802 000016B0 83EC0E              <4>  sub word sp, %1
  6803 000016B3 54                  <4>  push sp
  6804 000016B4 5D                  <4>  pop bp
  6805 000016B5 894600              <3>  mov word [bp+0],%1
  6806 000016B8 895E02              <3>  mov word [bp+2],%2
  6807 000016BB 894E04              <3>  mov word [bp+4],%3
  6808 000016BE 895606              <3>  mov word [bp+6],%4
  6809 000016C1 E8D7F6              <3>  call proc_fldiv
  6810 000016C4 54                  <3>  push sp
  6811 000016C5 5D                  <3>  pop bp
  6812 000016C6 8B4E08              <3>  mov word %5,[bp+8]
  6813 000016C9 8B560A              <3>  mov word %6,[bp+0x0A]
  6814                              <3>  stkclose 0x0E
  6815 000016CC 83C40E              <4>  add word sp, %1
  6816                              <2> 	__fltoint32 cx, dx, cx, dx
  6817                              <3>  stkopen 0x08
  6818 000016CF 83EC08              <4>  sub word sp, %1
  6819 000016D2 54                  <4>  push sp
  6820 000016D3 5D                  <4>  pop bp
  6821 000016D4 894E00              <3>  mov word [bp+0],%1
  6822 000016D7 895602              <3>  mov word [bp+2],%2
  6823 000016DA E89BF4              <3>  call proc_fltoint32
  6824 000016DD 54                  <3>  push sp
  6825 000016DE 5D                  <3>  pop bp
  6826 000016DF 8B4E04              <3>  mov word %3,[bp+4]
  6827 000016E2 8B5606              <3>  mov word %4,[bp+6]
  6828                              <3>  stkclose 0x08
  6829 000016E5 83C408              <4>  add word sp, %1
  6830                              <2> 	__int32tofl cx, dx, cx, dx
  6831                              <3>  stkopen 0x08
  6832 000016E8 83EC08              <4>  sub word sp, %1
  6833 000016EB 54                  <4>  push sp
  6834 000016EC 5D                  <4>  pop bp
  6835 000016ED 894E00              <3>  mov word [bp+0],%1
  6836 000016F0 895602              <3>  mov word [bp+2],%2
  6837 000016F3 E806F5              <3>  call proc_int32tofl
  6838 000016F6 54                  <3>  push sp
  6839 000016F7 5D                  <3>  pop bp
  6840 000016F8 8B4E04              <3>  mov word %3,[bp+4]
  6841 000016FB 8B5606              <3>  mov word %4,[bp+6]
  6842                              <3>  stkclose 0x08
  6843 000016FE 83C408              <4>  add word sp, %1
  6844 00001701 5D                  <2> 	pop bp
  6845                              <2> 		
  6846 00001702 B8C940              <2> 	mov ax,0x40C9	; 2*PI (alta)
  6847 00001705 BBDB0F              <2> 	mov bx,0x0FDB	; 2*PI (baixa)
  6848 00001708 55                  <2> 	push bp
  6849                              <2> 	__flmul ax, bx, cx, dx, cx, dx
  6850                              <3>  stkopen 0x0E
  6851 00001709 83EC0E              <4>  sub word sp, %1
  6852 0000170C 54                  <4>  push sp
  6853 0000170D 5D                  <4>  pop bp
  6854 0000170E 894600              <3>  mov word [bp+0],%1
  6855 00001711 895E02              <3>  mov word [bp+2],%2
  6856 00001714 894E04              <3>  mov word [bp+4],%3
  6857 00001717 895606              <3>  mov word [bp+6],%4
  6858 0000171A E89DF7              <3>  call proc_flmul
  6859 0000171D 54                  <3>  push sp
  6860 0000171E 5D                  <3>  pop bp
  6861 0000171F 8B4E08              <3>  mov word %5,[bp+8]
  6862 00001722 8B560A              <3>  mov word %6,[bp+0x0A]
  6863                              <3>  stkclose 0x0E
  6864 00001725 83C40E              <4>  add word sp, %1
  6865 00001728 5D                  <2> 	pop bp				
  6866                              <2> 		
  6867 00001729 8B4602              <2> 	mov ax,[bp+2]
  6868 0000172C 8B5E04              <2> 	mov bx,[bp+4]		
  6869 0000172F 25FF7F              <2> 	and ax,0x7FFF		
  6870 00001732 55                  <2> 	push bp	
  6871                              <2> 	__flsub ax, bx, cx, dx, ax, bx
  6872                              <3>  stkopen 0x0E
  6873 00001733 83EC0E              <4>  sub word sp, %1
  6874 00001736 54                  <4>  push sp
  6875 00001737 5D                  <4>  pop bp
  6876 00001738 894600              <3>  mov word [bp+0],%1
  6877 0000173B 895E02              <3>  mov word [bp+2],%2
  6878 0000173E 894E04              <3>  mov word [bp+4],%3
  6879 00001741 895606              <3>  mov word [bp+6],%4
  6880 00001744 C7460C0080          <3>  mov word [bp+0x0C],0x8000
  6881 00001749 E81AF9              <3>  call proc_fladdorsub
  6882 0000174C 54                  <3>  push sp
  6883 0000174D 5D                  <3>  pop bp
  6884 0000174E 8B4608              <3>  mov word %5,[bp+8]
  6885 00001751 8B5E0A              <3>  mov word %6,[bp+0x0A]
  6886                              <3>  stkclose 0x0E
  6887 00001754 83C40E              <4>  add word sp, %1
  6888 00001757 5D                  <2> 	pop bp	
  6889                              <2> 	
  6890 00001758 8B4E02              <2> 	mov cx,[bp+2]
  6891 0000175B 81E10080            <2> 	and cx,0x8000
  6892 0000175F 83F900              <2> 	cmp cx,0
  6893 00001762 742C                <2> 	jz .endneg
  6894 00001764 B9C940              <2> 		mov cx,0x40C9	; 2*PI (alta)
  6895 00001767 BADB0F              <2> 		mov dx,0x0FDB	; 2*PI (baixa)
  6896 0000176A 55                  <2> 		push bp		
  6897                              <2> 		__flsub cx, dx, ax, bx, ax, bx		
  6898                              <3>  stkopen 0x0E
  6899 0000176B 83EC0E              <4>  sub word sp, %1
  6900 0000176E 54                  <4>  push sp
  6901 0000176F 5D                  <4>  pop bp
  6902 00001770 894E00              <3>  mov word [bp+0],%1
  6903 00001773 895602              <3>  mov word [bp+2],%2
  6904 00001776 894604              <3>  mov word [bp+4],%3
  6905 00001779 895E06              <3>  mov word [bp+6],%4
  6906 0000177C C7460C0080          <3>  mov word [bp+0x0C],0x8000
  6907 00001781 E8E2F8              <3>  call proc_fladdorsub
  6908 00001784 54                  <3>  push sp
  6909 00001785 5D                  <3>  pop bp
  6910 00001786 8B4608              <3>  mov word %5,[bp+8]
  6911 00001789 8B5E0A              <3>  mov word %6,[bp+0x0A]
  6912                              <3>  stkclose 0x0E
  6913 0000178C 83C40E              <4>  add word sp, %1
  6914 0000178F 5D                  <2> 		pop bp	
  6915                              <2> 	.endneg:	
  6916                              <2> 	
  6917 00001790 894606              <2> 	mov [bp+6],ax
  6918 00001793 895E08              <2> 	mov [bp+8],bx	
  6919                              <2> 							
  6920 00001796 C3                  <2> 	ret
  6921                              <2> 	
  6922                              <2> proc_toradians:
  6923 00001797 89E0                <2> 	mov ax,sp
  6924 00001799 89C5                <2> 	mov bp,ax
  6925                              <2> 	
  6926 0000179B 8B4602              <2> 	mov ax,[bp+2]
  6927 0000179E 8B5E04              <2> 	mov bx,[bp+4]		
  6928 000017A1 B94940              <2> 	mov cx,0x4049
  6929 000017A4 BADB0F              <2> 	mov dx,0x0FDB
  6930                              <2> 	__flmul ax, bx, cx, dx, ax, bx
  6931                              <3>  stkopen 0x0E
  6932 000017A7 83EC0E              <4>  sub word sp, %1
  6933 000017AA 54                  <4>  push sp
  6934 000017AB 5D                  <4>  pop bp
  6935 000017AC 894600              <3>  mov word [bp+0],%1
  6936 000017AF 895E02              <3>  mov word [bp+2],%2
  6937 000017B2 894E04              <3>  mov word [bp+4],%3
  6938 000017B5 895606              <3>  mov word [bp+6],%4
  6939 000017B8 E8FFF6              <3>  call proc_flmul
  6940 000017BB 54                  <3>  push sp
  6941 000017BC 5D                  <3>  pop bp
  6942 000017BD 8B4608              <3>  mov word %5,[bp+8]
  6943 000017C0 8B5E0A              <3>  mov word %6,[bp+0x0A]
  6944                              <3>  stkclose 0x0E
  6945 000017C3 83C40E              <4>  add word sp, %1
  6946 000017C6 B93443              <2> 	mov cx,0x4334
  6947 000017C9 BA0000              <2> 	mov dx,0x0000	
  6948                              <2> 	__fldiv ax, bx, cx, cx, ax, bx
  6949                              <3>  stkopen 0x0E
  6950 000017CC 83EC0E              <4>  sub word sp, %1
  6951 000017CF 54                  <4>  push sp
  6952 000017D0 5D                  <4>  pop bp
  6953 000017D1 894600              <3>  mov word [bp+0],%1
  6954 000017D4 895E02              <3>  mov word [bp+2],%2
  6955 000017D7 894E04              <3>  mov word [bp+4],%3
  6956 000017DA 894E06              <3>  mov word [bp+6],%4
  6957 000017DD E8BBF5              <3>  call proc_fldiv
  6958 000017E0 54                  <3>  push sp
  6959 000017E1 5D                  <3>  pop bp
  6960 000017E2 8B4608              <3>  mov word %5,[bp+8]
  6961 000017E5 8B5E0A              <3>  mov word %6,[bp+0x0A]
  6962                              <3>  stkclose 0x0E
  6963 000017E8 83C40E              <4>  add word sp, %1
  6964                              <2> 	
  6965 000017EB 89E1                <2> 	mov cx,sp
  6966 000017ED 89CD                <2> 	mov bp,cx
  6967 000017EF 894606              <2> 	mov [bp+6],ax
  6968 000017F2 895E08              <2> 	mov [bp+8],bx
  6969                              <2> 	
  6970 000017F5 C3                  <2> 	ret
  6971                              <2> 	
  6972                              <2> proc_todegrees:
  6973 000017F6 89E0                <2> 	mov ax,sp
  6974 000017F8 89C5                <2> 	mov bp,ax
  6975                              <2> 	
  6976 000017FA 8B4602              <2> 	mov ax,[bp+2]
  6977 000017FD 8B5E04              <2> 	mov bx,[bp+4]		
  6978 00001800 B93443              <2> 	mov cx,0x4334
  6979 00001803 BA0000              <2> 	mov dx,0x0000
  6980                              <2> 	__flmul ax, bx, cx, dx, ax, bx		
  6981                              <3>  stkopen 0x0E
  6982 00001806 83EC0E              <4>  sub word sp, %1
  6983 00001809 54                  <4>  push sp
  6984 0000180A 5D                  <4>  pop bp
  6985 0000180B 894600              <3>  mov word [bp+0],%1
  6986 0000180E 895E02              <3>  mov word [bp+2],%2
  6987 00001811 894E04              <3>  mov word [bp+4],%3
  6988 00001814 895606              <3>  mov word [bp+6],%4
  6989 00001817 E8A0F6              <3>  call proc_flmul
  6990 0000181A 54                  <3>  push sp
  6991 0000181B 5D                  <3>  pop bp
  6992 0000181C 8B4608              <3>  mov word %5,[bp+8]
  6993 0000181F 8B5E0A              <3>  mov word %6,[bp+0x0A]
  6994                              <3>  stkclose 0x0E
  6995 00001822 83C40E              <4>  add word sp, %1
  6996 00001825 B94940              <2> 	mov cx,0x4049
  6997 00001828 BADB0F              <2> 	mov dx,0x0FDB	
  6998                              <2> 	__fldiv ax, bx, cx, cx, ax, bx
  6999                              <3>  stkopen 0x0E
  7000 0000182B 83EC0E              <4>  sub word sp, %1
  7001 0000182E 54                  <4>  push sp
  7002 0000182F 5D                  <4>  pop bp
  7003 00001830 894600              <3>  mov word [bp+0],%1
  7004 00001833 895E02              <3>  mov word [bp+2],%2
  7005 00001836 894E04              <3>  mov word [bp+4],%3
  7006 00001839 894E06              <3>  mov word [bp+6],%4
  7007 0000183C E85CF5              <3>  call proc_fldiv
  7008 0000183F 54                  <3>  push sp
  7009 00001840 5D                  <3>  pop bp
  7010 00001841 8B4608              <3>  mov word %5,[bp+8]
  7011 00001844 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7012                              <3>  stkclose 0x0E
  7013 00001847 83C40E              <4>  add word sp, %1
  7014                              <2> 	
  7015 0000184A 89E1                <2> 	mov cx,sp
  7016 0000184C 89CD                <2> 	mov bp,cx
  7017 0000184E 894606              <2> 	mov [bp+6],ax
  7018 00001851 895E08              <2> 	mov [bp+8],bx
  7019                              <2> 	
  7020 00001854 C3                  <2> 	ret
  7021                              <2> 
  7022                              <2> proc_sinorcos:
  7023 00001855 89E0                <2> 	mov ax,sp
  7024 00001857 89C5                <2> 	mov bp,ax
  7025                              <2> 	
  7026 00001859 8B4602              <2> 	mov ax,[bp+2]
  7027 0000185C 8B5E04              <2> 	mov bx,[bp+4]
  7028 0000185F 807E0A00            <2> 	cmp byte [bp+0x0A],0
  7029 00001863 741E                <2> 	jz .normcos
  7030                              <2> 		__sinnorm ax, bx, cx
  7031                              <3>  stkopen 0x06
  7032 00001865 83EC06              <4>  sub word sp, %1
  7033 00001868 54                  <4>  push sp
  7034 00001869 5D                  <4>  pop bp
  7035 0000186A 894600              <3>  mov word [bp+0],%1
  7036 0000186D 895E02              <3>  mov word [bp+2],%2
  7037 00001870 E82303              <3>  call proc__sinnorm
  7038 00001873 54                  <3>  push sp
  7039 00001874 5D                  <3>  pop bp
  7040 00001875 8B4600              <3>  mov word %1,[bp+0]
  7041 00001878 8B5E02              <3>  mov word %2,[bp+2]
  7042 0000187B 8B4E04              <3>  mov word %3,[bp+4]
  7043                              <3>  stkclose 0x06
  7044 0000187E 83C406              <4>  add word sp, %1
  7045 00001881 EB1C                <2> 		jmp .endnorm
  7046                              <2> 	.normcos:
  7047                              <2> 		__cosnorm ax, bx, cx	
  7048                              <3>  stkopen 0x06
  7049 00001883 83EC06              <4>  sub word sp, %1
  7050 00001886 54                  <4>  push sp
  7051 00001887 5D                  <4>  pop bp
  7052 00001888 894600              <3>  mov word [bp+0],%1
  7053 0000188B 895E02              <3>  mov word [bp+2],%2
  7054 0000188E E8AB03              <3>  call proc__cosnorm
  7055 00001891 54                  <3>  push sp
  7056 00001892 5D                  <3>  pop bp
  7057 00001893 8B4600              <3>  mov word %1,[bp+0]
  7058 00001896 8B5E02              <3>  mov word %2,[bp+2]
  7059 00001899 8B4E04              <3>  mov word %3,[bp+4]
  7060                              <3>  stkclose 0x06
  7061 0000189C 83C406              <4>  add word sp, %1
  7062                              <2> 	.endnorm:
  7063                              <2> 	
  7064 0000189F 51                  <2> 	push cx
  7065                              <2> 	
  7066 000018A0 89E1                <2> 	mov cx,sp
  7067 000018A2 89CD                <2> 	mov bp,cx
  7068 000018A4 83C502              <2> 	add bp,2
  7069 000018A7 8A4E0A              <2> 	mov cl,[bp+0x0A]	
  7070                              <2> 	__sinorcos0x90 ax, bx, ax, bx, cl
  7071                              <3>  stkopen 0x09
  7072 000018AA 83EC09              <4>  sub word sp, %1
  7073 000018AD 54                  <4>  push sp
  7074 000018AE 5D                  <4>  pop bp
  7075 000018AF 894600              <3>  mov word [bp+0],%1
  7076 000018B2 895E02              <3>  mov word [bp+2],%2
  7077 000018B5 884E08              <3>  mov byte [bp+8],%5
  7078 000018B8 E82C00              <3>  call proc_sinorcos0x90
  7079 000018BB 54                  <3>  push sp
  7080 000018BC 5D                  <3>  pop bp
  7081 000018BD 8B4604              <3>  mov word %3,[bp+4]
  7082 000018C0 8B5E06              <3>  mov word %4,[bp+6]
  7083                              <3>  stkclose 0x09
  7084 000018C3 83C409              <4>  add word sp, %1
  7085 000018C6 89E1                <2> 	mov cx,sp
  7086 000018C8 89CD                <2> 	mov bp,cx
  7087 000018CA 83C502              <2> 	add bp,2	
  7088 000018CD 894606              <2> 	mov [bp+6],ax
  7089 000018D0 895E08              <2> 	mov [bp+8],bx
  7090                              <2> 			
  7091 000018D3 59                  <2> 	pop cx
  7092                              <2> 		
  7093 000018D4 89E2                <2> 	mov dx,sp
  7094 000018D6 89D5                <2> 	mov bp,dx
  7095                              <2> 		
  7096 000018D8 81F90080            <2> 	cmp cx,0x8000
  7097 000018DC 7405                <2> 	je .one
  7098 000018DE 214E06              <2> 		and word [bp+6],cx
  7099 000018E1 EB03                <2> 		jmp .endcmp
  7100                              <2> 	.one:
  7101 000018E3 094E06              <2> 		or word [bp+6],cx	
  7102                              <2> 	.endcmp:
  7103                              <2> 	
  7104 000018E6 C3                  <2> 	ret
  7105                              <2> 	
  7106                              <2> proc_sinorcos0x90:
  7107 000018E7 89E1                <2> 	mov cx,sp
  7108 000018E9 89CD                <2> 	mov bp,cx
  7109                              <2> 
  7110 000018EB C746060000          <2> 	mov word [bp+6],0
  7111 000018F0 C746080000          <2> 	mov word [bp+8],0		
  7112                              <2> 	
  7113 000018F5 B90000              <2> 	mov cx,0
  7114                              <2> 	.l1:
  7115 000018F8 83F903              <2> 		cmp cx,0x03
  7116 000018FB 0F877301            <2> 		ja .l2		
  7117 000018FF 51                  <2> 		push cx
  7118                              <2> 		
  7119 00001900 83E101              <2> 		and cx,0x0001
  7120 00001903 83F900              <2> 		cmp cx,0
  7121 00001906 7505                <2> 		jnz .neg
  7122 00001908 B80100              <2> 			mov ax,0x0001
  7123 0000190B EB03                <2> 			jmp .endneg
  7124                              <2> 		.neg:
  7125 0000190D B8FFFF              <2> 			mov ax,0xFFFF
  7126                              <2> 		.endneg:
  7127                              <2> 				
  7128 00001910 59                  <2> 		pop cx
  7129 00001911 51                  <2> 		push cx
  7130 00001912 50                  <2> 		push ax
  7131                              <2> 		
  7132 00001913 BA0000              <2> 		mov dx,0
  7133 00001916 B80200              <2> 		mov ax,2
  7134 00001919 F7E1                <2> 		mul cx
  7135                              <2> 		
  7136 0000191B 89E2                <2> 		mov dx,sp
  7137 0000191D 89D5                <2> 		mov bp,dx
  7138 0000191F 83C504              <2> 		add bp,4		
  7139 00001922 807E0A00            <2> 		cmp byte [bp+0x0A],0
  7140 00001926 7401                <2> 		jz .incremented
  7141 00001928 40                  <2> 			inc ax
  7142                              <2> 		.incremented:
  7143                              <2> 						
  7144                              <2> 		__fat16 ax, dx
  7145                              <3>  stkopen 0x04
  7146 00001929 83EC04              <4>  sub word sp, %1
  7147 0000192C 54                  <4>  push sp
  7148 0000192D 5D                  <4>  pop bp
  7149 0000192E 894600              <3>  mov word [bp+0],%1
  7150 00001931 E82302              <3>  call proc__fat16
  7151 00001934 54                  <3>  push sp
  7152 00001935 5D                  <3>  pop bp
  7153 00001936 8B5602              <3>  mov word %2, [bp+2]
  7154                              <3>  stkclose 0x04
  7155 00001939 83C404              <4>  add word sp, %1
  7156                              <2> 						
  7157 0000193C 58                  <2> 		pop ax
  7158 0000193D 52                  <2> 		push dx	
  7159                              <2> 		__int16to32 ax, cx, dx						
  7160                              <3>  stkopen 0x06
  7161 0000193E 83EC06              <4>  sub word sp, %1
  7162 00001941 54                  <4>  push sp
  7163 00001942 5D                  <4>  pop bp
  7164 00001943 894600              <3>  mov word [bp+0],%1
  7165 00001946 E8B7E6              <3>  call proc_int16to32
  7166 00001949 54                  <3>  push sp
  7167 0000194A 5D                  <3>  pop bp
  7168 0000194B 8B4E02              <3>  mov word %2, [bp+2]
  7169 0000194E 8B5604              <3>  mov word %3, [bp+4]
  7170                              <3>  stkclose 0x06
  7171 00001951 83C406              <4>  add word sp, %1
  7172                              <2> 		__int32tofl cx, dx, ax, bx
  7173                              <3>  stkopen 0x08
  7174 00001954 83EC08              <4>  sub word sp, %1
  7175 00001957 54                  <4>  push sp
  7176 00001958 5D                  <4>  pop bp
  7177 00001959 894E00              <3>  mov word [bp+0],%1
  7178 0000195C 895602              <3>  mov word [bp+2],%2
  7179 0000195F E89AF2              <3>  call proc_int32tofl
  7180 00001962 54                  <3>  push sp
  7181 00001963 5D                  <3>  pop bp
  7182 00001964 8B4604              <3>  mov word %3,[bp+4]
  7183 00001967 8B5E06              <3>  mov word %4,[bp+6]
  7184                              <3>  stkclose 0x08
  7185 0000196A 83C408              <4>  add word sp, %1
  7186                              <2> 		
  7187 0000196D 59                  <2> 		pop cx
  7188 0000196E 50                  <2> 		push ax
  7189 0000196F 53                  <2> 		push bx		
  7190                              <2> 		__int16to32 cx, ax, bx
  7191                              <3>  stkopen 0x06
  7192 00001970 83EC06              <4>  sub word sp, %1
  7193 00001973 54                  <4>  push sp
  7194 00001974 5D                  <4>  pop bp
  7195 00001975 894E00              <3>  mov word [bp+0],%1
  7196 00001978 E885E6              <3>  call proc_int16to32
  7197 0000197B 54                  <3>  push sp
  7198 0000197C 5D                  <3>  pop bp
  7199 0000197D 8B4602              <3>  mov word %2, [bp+2]
  7200 00001980 8B5E04              <3>  mov word %3, [bp+4]
  7201                              <3>  stkclose 0x06
  7202 00001983 83C406              <4>  add word sp, %1
  7203                              <2> 		__int32tofl ax, bx, cx, dx
  7204                              <3>  stkopen 0x08
  7205 00001986 83EC08              <4>  sub word sp, %1
  7206 00001989 54                  <4>  push sp
  7207 0000198A 5D                  <4>  pop bp
  7208 0000198B 894600              <3>  mov word [bp+0],%1
  7209 0000198E 895E02              <3>  mov word [bp+2],%2
  7210 00001991 E868F2              <3>  call proc_int32tofl
  7211 00001994 54                  <3>  push sp
  7212 00001995 5D                  <3>  pop bp
  7213 00001996 8B4E04              <3>  mov word %3,[bp+4]
  7214 00001999 8B5606              <3>  mov word %4,[bp+6]
  7215                              <3>  stkclose 0x08
  7216 0000199C 83C408              <4>  add word sp, %1
  7217                              <2> 		
  7218 0000199F 5B                  <2> 		pop bx
  7219 000019A0 58                  <2> 		pop ax
  7220                              <2> 		
  7221                              <2> 		__fldiv ax, bx, cx, dx, ax, bx
  7222                              <3>  stkopen 0x0E
  7223 000019A1 83EC0E              <4>  sub word sp, %1
  7224 000019A4 54                  <4>  push sp
  7225 000019A5 5D                  <4>  pop bp
  7226 000019A6 894600              <3>  mov word [bp+0],%1
  7227 000019A9 895E02              <3>  mov word [bp+2],%2
  7228 000019AC 894E04              <3>  mov word [bp+4],%3
  7229 000019AF 895606              <3>  mov word [bp+6],%4
  7230 000019B2 E8E6F3              <3>  call proc_fldiv
  7231 000019B5 54                  <3>  push sp
  7232 000019B6 5D                  <3>  pop bp
  7233 000019B7 8B4608              <3>  mov word %5,[bp+8]
  7234 000019BA 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7235                              <3>  stkclose 0x0E
  7236 000019BD 83C40E              <4>  add word sp, %1
  7237                              <2> 						
  7238 000019C0 59                  <2> 		pop cx
  7239 000019C1 51                  <2> 		push cx
  7240 000019C2 50                  <2> 		push ax
  7241 000019C3 53                  <2> 		push bx
  7242                              <2> 		
  7243 000019C4 89E0                <2> 		mov ax,sp
  7244 000019C6 89C5                <2> 		mov bp,ax
  7245 000019C8 83C506              <2> 		add bp,6
  7246                              <2> 		
  7247 000019CB BA0000              <2> 		mov dx,0
  7248 000019CE B80200              <2> 		mov ax,2
  7249 000019D1 F7E1                <2> 		mul cx
  7250                              <2> 				
  7251 000019D3 807E0A00            <2> 		cmp byte [bp+0x0A],0
  7252 000019D7 7401                <2> 		jz .incremented2
  7253 000019D9 40                  <2> 			inc ax
  7254                              <2> 		.incremented2:
  7255                              <2> 				
  7256 000019DA 89C1                <2> 		mov cx,ax														
  7257                              <2> 		
  7258 000019DC B8803F              <2> 		mov ax,0x3F80
  7259 000019DF BB0000              <2> 		mov bx,0
  7260                              <2> 		
  7261                              <2> 		.l1.1:
  7262 000019E2 83F900              <2> 			cmp cx,0
  7263 000019E5 742C                <2> 			jz .l1.2
  7264 000019E7 51                  <2> 			push cx
  7265                              <2> 			
  7266 000019E8 8B4E02              <2> 			mov cx,[bp+2]
  7267 000019EB 8B5604              <2> 			mov dx,[bp+4]
  7268 000019EE 55                  <2> 			push bp	
  7269                              <2> 			__flmul ax, bx, cx, dx, ax, bx
  7270                              <3>  stkopen 0x0E
  7271 000019EF 83EC0E              <4>  sub word sp, %1
  7272 000019F2 54                  <4>  push sp
  7273 000019F3 5D                  <4>  pop bp
  7274 000019F4 894600              <3>  mov word [bp+0],%1
  7275 000019F7 895E02              <3>  mov word [bp+2],%2
  7276 000019FA 894E04              <3>  mov word [bp+4],%3
  7277 000019FD 895606              <3>  mov word [bp+6],%4
  7278 00001A00 E8B7F4              <3>  call proc_flmul
  7279 00001A03 54                  <3>  push sp
  7280 00001A04 5D                  <3>  pop bp
  7281 00001A05 8B4608              <3>  mov word %5,[bp+8]
  7282 00001A08 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7283                              <3>  stkclose 0x0E
  7284 00001A0B 83C40E              <4>  add word sp, %1
  7285 00001A0E 5D                  <2> 			pop bp	
  7286                              <2> 							
  7287 00001A0F 59                  <2> 			pop cx
  7288 00001A10 49                  <2> 			dec cx
  7289 00001A11 EBCF                <2> 			jmp .l1.1
  7290                              <2> 		.l1.2: 
  7291                              <2> 					
  7292 00001A13 5A                  <2> 		pop dx
  7293 00001A14 59                  <2> 		pop cx
  7294                              <2> 		
  7295                              <2> 		__flmul ax, bx, cx, dx, ax, bx
  7296                              <3>  stkopen 0x0E
  7297 00001A15 83EC0E              <4>  sub word sp, %1
  7298 00001A18 54                  <4>  push sp
  7299 00001A19 5D                  <4>  pop bp
  7300 00001A1A 894600              <3>  mov word [bp+0],%1
  7301 00001A1D 895E02              <3>  mov word [bp+2],%2
  7302 00001A20 894E04              <3>  mov word [bp+4],%3
  7303 00001A23 895606              <3>  mov word [bp+6],%4
  7304 00001A26 E891F4              <3>  call proc_flmul
  7305 00001A29 54                  <3>  push sp
  7306 00001A2A 5D                  <3>  pop bp
  7307 00001A2B 8B4608              <3>  mov word %5,[bp+8]
  7308 00001A2E 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7309                              <3>  stkclose 0x0E
  7310 00001A31 83C40E              <4>  add word sp, %1
  7311                              <2> 						
  7312 00001A34 89E1                <2> 		mov cx,sp
  7313 00001A36 89CD                <2> 		mov bp,cx
  7314 00001A38 83C502              <2> 		add bp,2
  7315                              <2> 		
  7316 00001A3B 8B4E06              <2> 		mov cx,[bp+6]
  7317 00001A3E 8B5608              <2> 		mov dx,[bp+8]
  7318 00001A41 55                  <2> 		push bp
  7319                              <2> 		__fladd ax, bx, cx, dx, ax, bx		
  7320                              <3>  stkopen 0x0E
  7321 00001A42 83EC0E              <4>  sub word sp, %1
  7322 00001A45 54                  <4>  push sp
  7323 00001A46 5D                  <4>  pop bp
  7324 00001A47 894600              <3>  mov word [bp+0],%1
  7325 00001A4A 895E02              <3>  mov word [bp+2],%2
  7326 00001A4D 894E04              <3>  mov word [bp+4],%3
  7327 00001A50 895606              <3>  mov word [bp+6],%4
  7328 00001A53 C7460C0000          <3>  mov word [bp+0x0C],0
  7329 00001A58 E80BF6              <3>  call proc_fladdorsub
  7330 00001A5B 54                  <3>  push sp
  7331 00001A5C 5D                  <3>  pop bp
  7332 00001A5D 8B4608              <3>  mov word %5,[bp+8]
  7333 00001A60 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7334                              <3>  stkclose 0x0E
  7335 00001A63 83C40E              <4>  add word sp, %1
  7336 00001A66 5D                  <2> 		pop bp			
  7337 00001A67 894606              <2> 		mov [bp+6],ax
  7338 00001A6A 895E08              <2> 		mov [bp+8],bx
  7339                              <2> 				
  7340 00001A6D 59                  <2> 		pop cx
  7341 00001A6E 41                  <2> 		inc cx
  7342 00001A6F E986FE              <2> 		jmp .l1
  7343                              <2> 	.l2:			
  7344                              <2> 	
  7345 00001A72 C3                  <2> 	ret
  7346                              <2> 	
  7347                              <2> 
  7348                              <2> proc_atan:
  7349 00001A73 89E0                <2> 	mov ax,sp
  7350 00001A75 89C5                <2> 	mov bp,ax 
  7351                              <2> 
  7352 00001A77 C746060000          <2> 	mov word [bp+6],0
  7353 00001A7C C746080000          <2> 	mov word [bp+8],0		
  7354                              <2> 	
  7355 00001A81 B90000              <2> 	mov cx,0
  7356                              <2> 	.l1:
  7357 00001A84 83F903              <2> 		cmp cx,0x03
  7358 00001A87 0F87CB00            <2> 		ja .l2		
  7359 00001A8B 51                  <2> 		push cx
  7360                              <2> 		
  7361 00001A8C D1E1                <2> 		shl cx,1
  7362 00001A8E 41                  <2> 		inc cx
  7363 00001A8F 51                  <2> 		push cx
  7364                              <2> 								
  7365 00001A90 B8803F              <2> 		mov ax,0x3F80	; 1.0 (alta)
  7366 00001A93 BB0000              <2> 		mov bx,0x0000	; 1.0 (baixa)				
  7367                              <2> 		.l1.1:
  7368 00001A96 83F900              <2> 			cmp cx,0
  7369 00001A99 742C                <2> 			jz .l1.2
  7370 00001A9B 51                  <2> 			push cx
  7371                              <2> 			
  7372 00001A9C 8B4E02              <2> 			mov cx,[bp+2]
  7373 00001A9F 8B5604              <2> 			mov dx,[bp+4]
  7374 00001AA2 55                  <2> 			push bp	
  7375                              <2> 			__flmul ax, bx, cx, dx, ax, bx
  7376                              <3>  stkopen 0x0E
  7377 00001AA3 83EC0E              <4>  sub word sp, %1
  7378 00001AA6 54                  <4>  push sp
  7379 00001AA7 5D                  <4>  pop bp
  7380 00001AA8 894600              <3>  mov word [bp+0],%1
  7381 00001AAB 895E02              <3>  mov word [bp+2],%2
  7382 00001AAE 894E04              <3>  mov word [bp+4],%3
  7383 00001AB1 895606              <3>  mov word [bp+6],%4
  7384 00001AB4 E803F4              <3>  call proc_flmul
  7385 00001AB7 54                  <3>  push sp
  7386 00001AB8 5D                  <3>  pop bp
  7387 00001AB9 8B4608              <3>  mov word %5,[bp+8]
  7388 00001ABC 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7389                              <3>  stkclose 0x0E
  7390 00001ABF 83C40E              <4>  add word sp, %1
  7391 00001AC2 5D                  <2> 			pop bp	
  7392                              <2> 							
  7393 00001AC3 59                  <2> 			pop cx
  7394 00001AC4 49                  <2> 			dec cx
  7395 00001AC5 EBCF                <2> 			jmp .l1.1
  7396                              <2> 		.l1.2:			
  7397                              <2> 		
  7398 00001AC7 59                  <2> 		pop cx	
  7399 00001AC8 50                  <2> 		push ax
  7400 00001AC9 53                  <2> 		push bx
  7401                              <2> 				
  7402 00001ACA 55                  <2> 		push bp
  7403                              <2> 		__int16tofl cx, cx, dx
  7404                              <3>  stkopen 0x06
  7405 00001ACB 83EC06              <4>  sub word sp, %1
  7406 00001ACE 54                  <4>  push sp
  7407 00001ACF 5D                  <4>  pop bp
  7408 00001AD0 894E00              <3>  mov word [bp+0],%1
  7409 00001AD3 E886EF              <3>  call proc_int16tofl
  7410 00001AD6 54                  <3>  push sp
  7411 00001AD7 5D                  <3>  pop bp
  7412 00001AD8 8B4E02              <3>  mov word %2,[bp+2]
  7413 00001ADB 8B5604              <3>  mov word %3,[bp+4]
  7414                              <3>  stkclose 0x06
  7415 00001ADE 83C406              <4>  add word sp, %1
  7416 00001AE1 5D                  <2> 		pop bp
  7417                              <2> 		
  7418 00001AE2 5B                  <2> 		pop bx
  7419 00001AE3 58                  <2> 		pop ax
  7420                              <2> 		
  7421 00001AE4 55                  <2> 		push bp	
  7422                              <2> 		__fldiv ax, bx, cx, dx, ax, bx
  7423                              <3>  stkopen 0x0E
  7424 00001AE5 83EC0E              <4>  sub word sp, %1
  7425 00001AE8 54                  <4>  push sp
  7426 00001AE9 5D                  <4>  pop bp
  7427 00001AEA 894600              <3>  mov word [bp+0],%1
  7428 00001AED 895E02              <3>  mov word [bp+2],%2
  7429 00001AF0 894E04              <3>  mov word [bp+4],%3
  7430 00001AF3 895606              <3>  mov word [bp+6],%4
  7431 00001AF6 E8A2F2              <3>  call proc_fldiv
  7432 00001AF9 54                  <3>  push sp
  7433 00001AFA 5D                  <3>  pop bp
  7434 00001AFB 8B4608              <3>  mov word %5,[bp+8]
  7435 00001AFE 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7436                              <3>  stkclose 0x0E
  7437 00001B01 83C40E              <4>  add word sp, %1
  7438 00001B04 5D                  <2> 		pop bp
  7439                              <2> 				
  7440 00001B05 59                  <2> 		pop cx
  7441 00001B06 51                  <2> 		push cx		
  7442 00001B07 83E101              <2> 		and cx,0x0001
  7443 00001B0A 83F900              <2> 		cmp cx,0
  7444 00001B0D 7410                <2> 		jz .endneg
  7445 00001B0F 89C1                <2> 			mov cx,ax	
  7446 00001B11 83C900              <2> 			or cx, 0x0000
  7447 00001B14 F7D1                <2> 			not cx
  7448 00001B16 81E10080            <2> 			and cx,0x8000								
  7449 00001B1A 25FF7F              <2> 			and ax,0x7FFF			
  7450 00001B1D 01C8                <2> 			add ax,cx
  7451                              <2> 		.endneg:
  7452                              <2> 				
  7453 00001B1F 8B4E06              <2> 		mov cx,[bp+6]
  7454 00001B22 8B5608              <2> 		mov dx,[bp+8]
  7455 00001B25 55                  <2> 		push bp		
  7456                              <2> 		__fladd ax, bx, cx, dx, ax, bx
  7457                              <3>  stkopen 0x0E
  7458 00001B26 83EC0E              <4>  sub word sp, %1
  7459 00001B29 54                  <4>  push sp
  7460 00001B2A 5D                  <4>  pop bp
  7461 00001B2B 894600              <3>  mov word [bp+0],%1
  7462 00001B2E 895E02              <3>  mov word [bp+2],%2
  7463 00001B31 894E04              <3>  mov word [bp+4],%3
  7464 00001B34 895606              <3>  mov word [bp+6],%4
  7465 00001B37 C7460C0000          <3>  mov word [bp+0x0C],0
  7466 00001B3C E827F5              <3>  call proc_fladdorsub
  7467 00001B3F 54                  <3>  push sp
  7468 00001B40 5D                  <3>  pop bp
  7469 00001B41 8B4608              <3>  mov word %5,[bp+8]
  7470 00001B44 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7471                              <3>  stkclose 0x0E
  7472 00001B47 83C40E              <4>  add word sp, %1
  7473 00001B4A 5D                  <2> 		pop bp
  7474 00001B4B 894606              <2> 		mov [bp+6], ax
  7475 00001B4E 895E08              <2> 		mov [bp+8], bx
  7476                              <2> 				
  7477 00001B51 59                  <2> 		pop cx
  7478 00001B52 41                  <2> 		inc cx
  7479 00001B53 E92EFF              <2> 		jmp .l1
  7480                              <2> 	.l2:
  7481                              <2> 		
  7482 00001B56 C3                  <2> 	ret
  7483                              <2> 	
  7484                              <2> proc__fat16:
  7485 00001B57 89E0                <2> 	mov ax,sp
  7486 00001B59 89C5                <2> 	mov bp,ax
  7487                              <2> 	
  7488 00001B5B B90100              <2> 	mov cx,1
  7489 00001B5E C746040100          <2> 	mov word [bp+4], 1
  7490                              <2> 	.l1:
  7491 00001B63 3B4E02              <2> 		cmp word cx,[bp+2]
  7492 00001B66 770D                <2> 		ja .l2
  7493                              <2> 		
  7494 00001B68 31D2                <2> 		xor dx,dx
  7495 00001B6A 8B4604              <2> 		mov ax,[bp+4]
  7496 00001B6D F7E9                <2> 		imul cx
  7497                              <2> 		
  7498 00001B6F 894604              <2> 		mov [bp+4],ax
  7499                              <2> 		
  7500 00001B72 41                  <2> 		inc cx
  7501 00001B73 EBEE                <2> 		jmp .l1
  7502                              <2> 	.l2:
  7503                              <2> 	
  7504 00001B75 C3                  <2> 	ret
  7505                              <2> 		
  7506                              <2> proc__pow16:
  7507 00001B76 89E0                <2> 	mov ax,sp
  7508 00001B78 89C5                <2> 	mov bp,ax
  7509                              <2> 	
  7510 00001B7A 8B4E04              <2> 	mov cx,[bp+4]
  7511 00001B7D C746060100          <2> 	mov word [bp+6], 1	
  7512                              <2> 	.l1:
  7513 00001B82 83F900              <2> 		cmp cx,0
  7514 00001B85 740E                <2> 		jz .l2
  7515                              <2> 		
  7516 00001B87 31D2                <2> 		xor dx,dx
  7517 00001B89 8B4602              <2> 		mov ax,[bp+2]
  7518 00001B8C F76E06              <2> 		imul word [bp+6]
  7519                              <2> 		
  7520 00001B8F 894606              <2> 		mov [bp+6],ax
  7521                              <2> 		
  7522 00001B92 49                  <2> 		dec cx
  7523 00001B93 EBED                <2> 		jmp .l1
  7524                              <2> 	.l2:
  7525                              <2> 		
  7526 00001B95 C3                  <2> 	ret
  7527                              <2> 	
  7528                              <2> proc__sinnorm:
  7529 00001B96 89E0                <2> 	mov ax,sp
  7530 00001B98 89C5                <2> 	mov bp,ax
  7531                              <2> 	
  7532 00001B9A 8B4602              <2> 	mov ax,[bp+2]
  7533 00001B9D 8B5E04              <2> 	mov bx,[bp+4]
  7534                              <2> 	
  7535                              <2> 	__norm_factors ax, bx, ax, bx, cx
  7536                              <3>  stkopen 0x0A
  7537 00001BA0 83EC0A              <4>  sub word sp, %1
  7538 00001BA3 54                  <4>  push sp
  7539 00001BA4 5D                  <4>  pop bp
  7540 00001BA5 894600              <3>  mov word [bp+0],%1
  7541 00001BA8 895E02              <3>  mov word [bp+2],%2
  7542 00001BAB E83601              <3>  call proc__norm_factors
  7543 00001BAE 54                  <3>  push sp
  7544 00001BAF 5D                  <3>  pop bp
  7545 00001BB0 8B4604              <3>  mov word %3,[bp+4]
  7546 00001BB3 8B5E06              <3>  mov word %4,[bp+6]
  7547 00001BB6 8B4E08              <3>  mov word %5,[bp+8]
  7548                              <3>  stkclose 0x0A
  7549 00001BB9 83C40A              <4>  add word sp, %1
  7550                              <2> 
  7551 00001BBC 51                  <2> 	push cx	; factor (phi/PI)
  7552                              <2> 		
  7553 00001BBD B9C93F              <2> 	mov cx,0x3FC9 ; PI/2 (high)
  7554 00001BC0 BADB0F              <2> 	mov dx,0x0FDB ; PI/2 (low)
  7555                              <2> 	
  7556 00001BC3 50                  <2> 	push ax
  7557 00001BC4 53                  <2> 	push bx
  7558                              <2> 	__cmp32 ax, bx, cx, dx, cl
  7559                              <3>  stkopen 9
  7560 00001BC5 83EC09              <4>  sub word sp, %1
  7561 00001BC8 54                  <4>  push sp
  7562 00001BC9 5D                  <4>  pop bp
  7563 00001BCA 894600              <3>  mov word [bp+0], %1
  7564 00001BCD 895E02              <3>  mov word [bp+2], %2
  7565 00001BD0 894E04              <3>  mov word [bp+4], %3
  7566 00001BD3 895606              <3>  mov word [bp+6], %4
  7567 00001BD6 E830E7              <3>  call proc_cmp32
  7568 00001BD9 54                  <3>  push sp
  7569 00001BDA 5D                  <3>  pop bp
  7570 00001BDB 8A4E08              <3>  mov byte %5, [bp+8]
  7571                              <3>  stkclose 9
  7572 00001BDE 83C409              <4>  add word sp, %1
  7573 00001BE1 5B                  <2> 	pop bx
  7574 00001BE2 58                  <2> 	pop ax
  7575 00001BE3 80F900              <2> 	cmp cl,0
  7576 00001BE6 7E2A                <2> 	jle .l1
  7577 00001BE8 B94940              <2> 		mov cx,0x4049 ; PI (high)
  7578 00001BEB BADB0F              <2> 		mov dx,0x0FDB ; PI (low)
  7579                              <2> 		__flsub cx, dx, ax, bx, ax, bx				
  7580                              <3>  stkopen 0x0E
  7581 00001BEE 83EC0E              <4>  sub word sp, %1
  7582 00001BF1 54                  <4>  push sp
  7583 00001BF2 5D                  <4>  pop bp
  7584 00001BF3 894E00              <3>  mov word [bp+0],%1
  7585 00001BF6 895602              <3>  mov word [bp+2],%2
  7586 00001BF9 894604              <3>  mov word [bp+4],%3
  7587 00001BFC 895E06              <3>  mov word [bp+6],%4
  7588 00001BFF C7460C0080          <3>  mov word [bp+0x0C],0x8000
  7589 00001C04 E85FF4              <3>  call proc_fladdorsub
  7590 00001C07 54                  <3>  push sp
  7591 00001C08 5D                  <3>  pop bp
  7592 00001C09 8B4608              <3>  mov word %5,[bp+8]
  7593 00001C0C 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7594                              <3>  stkclose 0x0E
  7595 00001C0F 83C40E              <4>  add word sp, %1
  7596                              <2> 	.l1:
  7597                              <2> 				
  7598 00001C12 59                  <2> 	pop cx
  7599                              <2> 
  7600 00001C13 89E2                <2> 	mov dx,sp
  7601 00001C15 89D5                <2> 	mov bp,dx
  7602 00001C17 8B5602              <2> 	mov dx,[bp+2]
  7603 00001C1A 81E20080            <2> 	and dx,0x8000
  7604                              <2> 		
  7605 00001C1E 83FA00              <2> 	cmp dx,0
  7606 00001C21 7D01                <2> 	jge .l2
  7607 00001C23 41                  <2> 		inc cx		
  7608                              <2> 	.l2:	
  7609                              <2> 			
  7610 00001C24 BAFF7F              <2> 	mov dx,0x7FFF
  7611 00001C27 83E101              <2> 	and cx,0x0001
  7612 00001C2A 83F900              <2> 	cmp cx,0
  7613 00001C2D 7403                <2> 	jz .l3
  7614 00001C2F BA0080              <2> 		mov dx,0x8000
  7615                              <2> 	.l3:
  7616                              <2> 					
  7617 00001C32 894602              <2> 	mov [bp+2],ax
  7618 00001C35 895E04              <2> 	mov [bp+4],bx
  7619 00001C38 895606              <2> 	mov [bp+6],dx
  7620                              <2> 	
  7621 00001C3B C3                  <2> 	ret	
  7622                              <2> 	
  7623                              <2> proc__cosnorm:
  7624 00001C3C 89E0                <2> 	mov ax,sp
  7625 00001C3E 89C5                <2> 	mov bp,ax
  7626                              <2> 	
  7627 00001C40 8B4602              <2> 	mov ax,[bp+2]
  7628 00001C43 8B5E04              <2> 	mov bx,[bp+4]
  7629                              <2> 	
  7630                              <2> 	__norm_factors ax, bx, ax, bx, cx
  7631                              <3>  stkopen 0x0A
  7632 00001C46 83EC0A              <4>  sub word sp, %1
  7633 00001C49 54                  <4>  push sp
  7634 00001C4A 5D                  <4>  pop bp
  7635 00001C4B 894600              <3>  mov word [bp+0],%1
  7636 00001C4E 895E02              <3>  mov word [bp+2],%2
  7637 00001C51 E89000              <3>  call proc__norm_factors
  7638 00001C54 54                  <3>  push sp
  7639 00001C55 5D                  <3>  pop bp
  7640 00001C56 8B4604              <3>  mov word %3,[bp+4]
  7641 00001C59 8B5E06              <3>  mov word %4,[bp+6]
  7642 00001C5C 8B4E08              <3>  mov word %5,[bp+8]
  7643                              <3>  stkclose 0x0A
  7644 00001C5F 83C40A              <4>  add word sp, %1
  7645                              <2> 
  7646 00001C62 51                  <2> 	push cx		; fator2 (phi/PI)
  7647                              <2> 	
  7648 00001C63 B9C93F              <2> 	mov cx,0x3FC9 ; PI/2 (high)
  7649 00001C66 BADB0F              <2> 	mov dx,0x0FDB ; PI/2 (low)
  7650                              <2> 		
  7651 00001C69 50                  <2> 	push ax
  7652 00001C6A 53                  <2> 	push bx
  7653                              <2> 	__cmp32 ax, bx, cx, dx, cl
  7654                              <3>  stkopen 9
  7655 00001C6B 83EC09              <4>  sub word sp, %1
  7656 00001C6E 54                  <4>  push sp
  7657 00001C6F 5D                  <4>  pop bp
  7658 00001C70 894600              <3>  mov word [bp+0], %1
  7659 00001C73 895E02              <3>  mov word [bp+2], %2
  7660 00001C76 894E04              <3>  mov word [bp+4], %3
  7661 00001C79 895606              <3>  mov word [bp+6], %4
  7662 00001C7C E88AE6              <3>  call proc_cmp32
  7663 00001C7F 54                  <3>  push sp
  7664 00001C80 5D                  <3>  pop bp
  7665 00001C81 8A4E08              <3>  mov byte %5, [bp+8]
  7666                              <3>  stkclose 9
  7667 00001C84 83C409              <4>  add word sp, %1
  7668 00001C87 5B                  <2> 	pop bx
  7669 00001C88 58                  <2> 	pop ax
  7670                              <2> 		
  7671 00001C89 51                  <2> 	push cx
  7672 00001C8A 80F900              <2> 	cmp cl,0
  7673 00001C8D 7E2A                <2> 	jle .l1
  7674 00001C8F B94940              <2> 		mov cx,0x4049 ; PI (high)
  7675 00001C92 BADB0F              <2> 		mov dx,0x0FDB ; PI (low)
  7676                              <2> 		__flsub cx, dx, ax, bx, ax, bx	
  7677                              <3>  stkopen 0x0E
  7678 00001C95 83EC0E              <4>  sub word sp, %1
  7679 00001C98 54                  <4>  push sp
  7680 00001C99 5D                  <4>  pop bp
  7681 00001C9A 894E00              <3>  mov word [bp+0],%1
  7682 00001C9D 895602              <3>  mov word [bp+2],%2
  7683 00001CA0 894604              <3>  mov word [bp+4],%3
  7684 00001CA3 895E06              <3>  mov word [bp+6],%4
  7685 00001CA6 C7460C0080          <3>  mov word [bp+0x0C],0x8000
  7686 00001CAB E8B8F3              <3>  call proc_fladdorsub
  7687 00001CAE 54                  <3>  push sp
  7688 00001CAF 5D                  <3>  pop bp
  7689 00001CB0 8B4608              <3>  mov word %5,[bp+8]
  7690 00001CB3 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7691                              <3>  stkclose 0x0E
  7692 00001CB6 83C40E              <4>  add word sp, %1
  7693                              <2> 	.l1:
  7694                              <2> 						
  7695 00001CB9 59                  <2> 	pop cx	; quadrante2 (true, false)
  7696 00001CBA 5A                  <2> 	pop dx	; fator2 (phi/PI)
  7697                              <2> 
  7698 00001CBB 54                  <2> 	push sp
  7699 00001CBC 5D                  <2> 	pop bp		
  7700 00001CBD 894602              <2> 	mov [bp+2],ax	
  7701 00001CC0 895E04              <2> 	mov [bp+4],bx
  7702                              <2> 	
  7703 00001CC3 B8FF7F              <2> 	mov ax,0x7FFF
  7704                              <2> 	
  7705 00001CC6 83E201              <2> 	and dx,0x0001
  7706 00001CC9 83FA00              <2> 	cmp dx,0
  7707 00001CCC 750A                <2> 	jnz .fimpar
  7708 00001CCE 80F900              <2> 		cmp cl,0
  7709 00001CD1 7C0D                <2> 		jl .endf		
  7710 00001CD3 B80080              <2> 			mov ax,0x8000			
  7711 00001CD6 EB08                <2> 		jmp .endf
  7712                              <2> 	.fimpar:		
  7713 00001CD8 80F900              <2> 		cmp cl,0
  7714 00001CDB 7D03                <2> 		jge .endf
  7715 00001CDD B80080              <2> 			mov ax,0x8000
  7716                              <2> 	.endf:		
  7717                              <2> 						
  7718 00001CE0 894606              <2> 	mov word [bp+6],ax
  7719                              <2> 	
  7720 00001CE3 C3                  <2> 	ret
  7721                              <2> 	
  7722                              <2> proc__norm_factors: ; f1=(phi%PI) --> float 32bits, f2=(phi/PI) --> int 16bits
  7723 00001CE4 89E0                <2> 	mov ax,sp
  7724 00001CE6 89C5                <2> 	mov bp,ax
  7725                              <2> 	
  7726 00001CE8 8B4602              <2> 	mov ax,[bp+2]
  7727 00001CEB 8B5E04              <2> 	mov bx,[bp+4]	
  7728 00001CEE 25FF7F              <2> 	and ax,0x7FFF
  7729                              <2> 		
  7730 00001CF1 B94940              <2> 	mov cx,0x4049 ; PI (high)
  7731 00001CF4 BADB0F              <2> 	mov dx,0x0FDB ; PI (low)
  7732                              <2> 
  7733 00001CF7 55                  <2> 	push bp
  7734                              <2> 	__fldiv ax, bx, cx, dx, ax, bx		
  7735                              <3>  stkopen 0x0E
  7736 00001CF8 83EC0E              <4>  sub word sp, %1
  7737 00001CFB 54                  <4>  push sp
  7738 00001CFC 5D                  <4>  pop bp
  7739 00001CFD 894600              <3>  mov word [bp+0],%1
  7740 00001D00 895E02              <3>  mov word [bp+2],%2
  7741 00001D03 894E04              <3>  mov word [bp+4],%3
  7742 00001D06 895606              <3>  mov word [bp+6],%4
  7743 00001D09 E88FF0              <3>  call proc_fldiv
  7744 00001D0C 54                  <3>  push sp
  7745 00001D0D 5D                  <3>  pop bp
  7746 00001D0E 8B4608              <3>  mov word %5,[bp+8]
  7747 00001D11 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7748                              <3>  stkclose 0x0E
  7749 00001D14 83C40E              <4>  add word sp, %1
  7750                              <2> 	__fltoint16 ax, bx, ax
  7751                              <3>  stkopen 0x06
  7752 00001D17 83EC06              <4>  sub word sp, %1
  7753 00001D1A 54                  <4>  push sp
  7754 00001D1B 5D                  <4>  pop bp
  7755 00001D1C 894600              <3>  mov word [bp+0],%1
  7756 00001D1F 895E02              <3>  mov word [bp+2],%2
  7757 00001D22 E8B5EC              <3>  call proc_fltoint16
  7758 00001D25 54                  <3>  push sp
  7759 00001D26 5D                  <3>  pop bp
  7760 00001D27 8B4604              <3>  mov word %3,[bp+4]
  7761                              <3>  stkclose 0x06
  7762 00001D2A 83C406              <4>  add word sp, %1
  7763 00001D2D 5D                  <2> 	pop bp
  7764                              <2> 		
  7765 00001D2E 50                  <2> 	push ax		; fator
  7766                              <2> 		
  7767 00001D2F 55                  <2> 	push bp
  7768                              <2> 	__int16tofl	ax, ax, bx	
  7769                              <3>  stkopen 0x06
  7770 00001D30 83EC06              <4>  sub word sp, %1
  7771 00001D33 54                  <4>  push sp
  7772 00001D34 5D                  <4>  pop bp
  7773 00001D35 894600              <3>  mov word [bp+0],%1
  7774 00001D38 E821ED              <3>  call proc_int16tofl
  7775 00001D3B 54                  <3>  push sp
  7776 00001D3C 5D                  <3>  pop bp
  7777 00001D3D 8B4602              <3>  mov word %2,[bp+2]
  7778 00001D40 8B5E04              <3>  mov word %3,[bp+4]
  7779                              <3>  stkclose 0x06
  7780 00001D43 83C406              <4>  add word sp, %1
  7781                              <2> 	
  7782 00001D46 B94940              <2> 	mov cx,0x4049 ; PI (high)
  7783 00001D49 BADB0F              <2> 	mov dx,0x0FDB ; PI (low)
  7784                              <2> 	__flmul ax, bx, cx, dx, ax, bx		
  7785                              <3>  stkopen 0x0E
  7786 00001D4C 83EC0E              <4>  sub word sp, %1
  7787 00001D4F 54                  <4>  push sp
  7788 00001D50 5D                  <4>  pop bp
  7789 00001D51 894600              <3>  mov word [bp+0],%1
  7790 00001D54 895E02              <3>  mov word [bp+2],%2
  7791 00001D57 894E04              <3>  mov word [bp+4],%3
  7792 00001D5A 895606              <3>  mov word [bp+6],%4
  7793 00001D5D E85AF1              <3>  call proc_flmul
  7794 00001D60 54                  <3>  push sp
  7795 00001D61 5D                  <3>  pop bp
  7796 00001D62 8B4608              <3>  mov word %5,[bp+8]
  7797 00001D65 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7798                              <3>  stkclose 0x0E
  7799 00001D68 83C40E              <4>  add word sp, %1
  7800 00001D6B 5D                  <2> 	pop bp
  7801                              <2> 	
  7802 00001D6C 8B4E02              <2> 	mov cx,[bp+2]
  7803 00001D6F 8B5604              <2> 	mov dx,[bp+4]
  7804 00001D72 81E1FF7F            <2> 	and cx,0x7FFF
  7805                              <2> 		
  7806                              <2> 	__flsub cx, dx, ax, bx, ax, bx 			; theta -> ax bx
  7807                              <3>  stkopen 0x0E
  7808 00001D76 83EC0E              <4>  sub word sp, %1
  7809 00001D79 54                  <4>  push sp
  7810 00001D7A 5D                  <4>  pop bp
  7811 00001D7B 894E00              <3>  mov word [bp+0],%1
  7812 00001D7E 895602              <3>  mov word [bp+2],%2
  7813 00001D81 894604              <3>  mov word [bp+4],%3
  7814 00001D84 895E06              <3>  mov word [bp+6],%4
  7815 00001D87 C7460C0080          <3>  mov word [bp+0x0C],0x8000
  7816 00001D8C E8D7F2              <3>  call proc_fladdorsub
  7817 00001D8F 54                  <3>  push sp
  7818 00001D90 5D                  <3>  pop bp
  7819 00001D91 8B4608              <3>  mov word %5,[bp+8]
  7820 00001D94 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7821                              <3>  stkclose 0x0E
  7822 00001D97 83C40E              <4>  add word sp, %1
  7823                              <2> 	
  7824 00001D9A 59                  <2> 	pop cx				
  7825                              <2> 		
  7826 00001D9B 89E2                <2> 	mov dx,sp
  7827 00001D9D 89D5                <2> 	mov bp,dx	
  7828 00001D9F 894606              <2> 	mov [bp+6],ax
  7829 00001DA2 895E08              <2> 	mov [bp+8],bx
  7830 00001DA5 894E0A              <2> 	mov [bp+0x0A],cx
  7831                              <2> 		
  7832 00001DA8 C3                  <2> 	ret
  7833                              <2> 	
  7834                              <2> %endif
  7835                              <1> 	
  7836                              <1> %macro to0x360 1
  7837                              <1> 	to0x360 %1, %1
  7838                              <1> %endmacro
  7839                              <1> 
  7840                              <1> %macro to0x360 2
  7841                              <1> 	to0x360 cs, %1, cs, %2
  7842                              <1> %endmacro
  7843                              <1> 
  7844                              <1> %macro toradians 1
  7845                              <1> 	toradians %1, %1
  7846                              <1> %endmacro
  7847                              <1> 
  7848                              <1> %macro todegrees 1
  7849                              <1> 	todegrees %1, %1
  7850                              <1> %endmacro
  7851                              <1> 
  7852                              <1> %macro toradians 2
  7853                              <1> 	toradians cs, %1, cs, %2
  7854                              <1> %endmacro
  7855                              <1> 	
  7856                              <1> %macro todegrees 2
  7857                              <1> 	todegrees cs, %1, cs, %2
  7858                              <1> %endmacro	
  7859                              <1> 	
  7860                              <1> %macro atan 1
  7861                              <1> 	atan %1, %1
  7862                              <1> %endmacro	
  7863                              <1> 	
  7864                              <1> %macro atan 2
  7865                              <1> 	atan cs, %1, cs, %2
  7866                              <1> %endmacro	
  7867                              <1> 	
  7868                              <1> %macro sin 1
  7869                              <1> 	sin %1, %1
  7870                              <1> %endmacro	
  7871                              <1> 	
  7872                              <1> %macro sin 2
  7873                              <1> 	sin cs, %1, cs, %2
  7874                              <1> %endmacro
  7875                              <1> 
  7876                              <1> %macro cos 1
  7877                              <1> 	cos %1, %1
  7878                              <1> %endmacro	
  7879                              <1> 	
  7880                              <1> %macro cos 2
  7881                              <1> 	cos cs, %1, cs, %2
  7882                              <1> %endmacro		
  7883                              <1> 	
  7884                              <1> %macro sin 4
  7885                              <1> 	sinorcos %1, %2, %3, %4, 1
  7886                              <1> %endmacro
  7887                              <1> 
  7888                              <1> %macro cos 4
  7889                              <1> 	sinorcos %1, %2, %3, %4, 0
  7890                              <1> %endmacro
  7891                              <1> 
  7892                              <1> %macro to0x360 4
  7893                              <1> 	stkopen 0x08
  7894                              <1> 	mov ax,%1
  7895                              <1> 	mov ds,ax
  7896                              <1> 	mov ax,[%2+2]
  7897                              <1> 	mov [bp+0],ax
  7898                              <1> 	mov ax,[%2]
  7899                              <1> 	mov [bp+2],ax
  7900                              <1> 	call proc_to0x360
  7901                              <1> 	mov ax,sp
  7902                              <1> 	mov bp,ax
  7903                              <1> 	mov ax,%3
  7904                              <1> 	mov ds,ax
  7905                              <1> 	mov ax,[bp+4]
  7906                              <1> 	mov [%4+2],ax
  7907                              <1> 	mov ax,[bp+6]
  7908                              <1> 	mov [%4],ax
  7909                              <1> 	stkclose 0x08
  7910                              <1> %endmacro	
  7911                              <1> 
  7912                              <1> %macro toradians 4
  7913                              <1> 	stkopen 0x08
  7914                              <1> 	mov ax,%1
  7915                              <1> 	mov ds,ax
  7916                              <1> 	mov ax,[%2+2]
  7917                              <1> 	mov [bp+0],ax
  7918                              <1> 	mov ax,[%2]
  7919                              <1> 	mov [bp+2],ax
  7920                              <1> 	call proc_toradians
  7921                              <1> 	mov ax,sp
  7922                              <1> 	mov bp,ax
  7923                              <1> 	mov ax,%3
  7924                              <1> 	mov ds,ax
  7925                              <1> 	mov ax,[bp+4]
  7926                              <1> 	mov [%4+2],ax
  7927                              <1> 	mov ax,[bp+6]
  7928                              <1> 	mov [%4],ax
  7929                              <1> 	stkclose 0x08
  7930                              <1> %endmacro	
  7931                              <1> 
  7932                              <1> %macro todegrees 4
  7933                              <1> 	stkopen 0x08
  7934                              <1> 	mov ax,%1
  7935                              <1> 	mov ds,ax
  7936                              <1> 	mov ax,[%2+2]
  7937                              <1> 	mov [bp+0],ax
  7938                              <1> 	mov ax,[%2]
  7939                              <1> 	mov [bp+2],ax
  7940                              <1> 	call proc_todegrees
  7941                              <1> 	mov ax,sp
  7942                              <1> 	mov bp,ax
  7943                              <1> 	mov ax,%3
  7944                              <1> 	mov ds,ax
  7945                              <1> 	mov ax,[bp+4]
  7946                              <1> 	mov [%4+2],ax
  7947                              <1> 	mov ax,[bp+6]
  7948                              <1> 	mov [%4],ax
  7949                              <1> 	stkclose 0x08
  7950                              <1> %endmacro	
  7951                              <1> 
  7952                              <1> %macro atan 4
  7953                              <1> 	stkopen 0x08
  7954                              <1> 	mov ax,%1
  7955                              <1> 	mov ds,ax
  7956                              <1> 	mov ax,[%2+2]
  7957                              <1> 	mov [bp+0],ax
  7958                              <1> 	mov ax,[%2]
  7959                              <1> 	mov [bp+2],ax
  7960                              <1> 	call proc_atan
  7961                              <1> 	mov ax,sp
  7962                              <1> 	mov bp,ax
  7963                              <1> 	mov ax,%3
  7964                              <1> 	mov ds,ax
  7965                              <1> 	mov ax,[bp+4]
  7966                              <1> 	mov [%4+2],ax
  7967                              <1> 	mov ax,[bp+6]
  7968                              <1> 	mov [%4],ax
  7969                              <1> 	stkclose 0x08
  7970                              <1> %endmacro
  7971                              <1> 	
  7972                              <1> %macro sinorcos 5
  7973                              <1> 	stkopen 0x09
  7974                              <1> 	mov ax,%1
  7975                              <1> 	mov ds,ax
  7976                              <1> 	mov ax,[%2+2]
  7977                              <1> 	mov [bp+0],ax
  7978                              <1> 	mov ax,[%2]
  7979                              <1> 	mov [bp+2],ax
  7980                              <1> 	mov byte [bp+8],%5	
  7981                              <1> 	call proc_sinorcos
  7982                              <1> 	mov ax,sp
  7983                              <1> 	mov bp,ax
  7984                              <1> 	mov ax,%3
  7985                              <1> 	mov ds,ax
  7986                              <1> 	mov ax,[bp+4]
  7987                              <1> 	mov [%4+2],ax
  7988                              <1> 	mov ax,[bp+6]
  7989                              <1> 	mov [%4],ax
  7990                              <1> 	stkclose 0x09
  7991                              <1> %endmacro
  7992                              <1> 	
  7993                              <1> %endif
  7994                                  %include "lib/stdio.mac"
  7995                              <1> 
  7996                              <1> %ifndef STDIO_MAC
  7997                              <1> 	%define STDIO_MAC
  7998                              <1> 	
  7999                              <1> 	%include "lib/stdio.asm"
  8000                              <1>  	%include "lib/system.mac"
  8001                              <1> 
  8002                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  8003                              <1> %macro printf 1-*	
  8004                              <1> 	%rep %0					
  8005                              <1> 		__printf %1
  8006                              <1> 		%rotate 1		
  8007                              <1> 	%endrep
  8008                              <1> %endmacro	
  8009                              <1> 
  8010                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  8011                              <1> %macro __printf 1
  8012                              <1> 	section .data
  8013                              <1> 		%%str: db %1,0
  8014                              <1> 	section .text
  8015                              <1> 		prtstr cs, %%str				
  8016                              <1> %endmacro
  8017                              <1> 
  8018                              <1> %macro prtstr 2
  8019                              <1> 	stkopen 4
  8020                              <1> 	mov word [bp], %1
  8021                              <1> 	mov word [bp+2], %2
  8022                              <1> 	call proc_prtstr
  8023                              <1> 	stkclose 4
  8024                              <1> %endmacro
  8025                              <1> 
  8026                              <1> 
  8027                              <1> %macro prtIEEE754 1
  8028                              <1> 	prtIEEE754 cs, %1
  8029                              <1> %endmacro
  8030                              <1> 
  8031                              <1> %macro prtIEEE754 2
  8032                              <1> 	stkopen 4
  8033                              <1> 	mov ax,%1
  8034                              <1> 	mov ds,ax
  8035                              <1> 	mov ax, [%2+2]
  8036                              <1> 	mov word [bp+0], ax
  8037                              <1> 	mov ax, [%2]
  8038                              <1> 	mov word [bp+2], ax
  8039                              <1> 	call proc_prtIEEE754
  8040                              <1> 	stkclose 4
  8041                              <1> %endmacro
  8042                              <1> 
  8043                              <1> %macro prtbool 1	
  8044                              <1> 	cmp byte %1, TRUE
  8045                              <1> 	je .true
  8046                              <1> 	jmp .false
  8047                              <1> 	.true:
  8048                              <1> 		prtf "true"
  8049                              <1> 		jmp .endcmp
  8050                              <1> 	.false:
  8051                              <1> 		prtf "false"
  8052                              <1> 	.endcmp:	
  8053                              <1> %endmacro
  8054                              <1> 
  8055                              <1> %macro prtptr 2-3 TRUE
  8056                              <1> 	stkopen 3
  8057                              <1> 	mov word [ bp + 0 ], %2
  8058                              <1> 	mov byte [ bp + 2 ], %3
  8059                              <1> 	prthex16 %1, %3
  8060                              <1> 	writechar ':'
  8061                              <1> 	push sp
  8062                              <1> 	pop bp
  8063                              <1> 	mov word ax, [ bp + 0 ]
  8064                              <1> 	mov byte bl, [ bp + 2 ]
  8065                              <1> 	prthex16 ax, bl
  8066                              <1> 	stkclose 3
  8067                              <1> %endmacro
  8068                              <1> 
  8069                              <1> %macro prtfptr 2-3 TRUE
  8070                              <1> 	stkopen 3
  8071                              <1> 	mov word [ bp + 0 ], %1
  8072                              <1> 	mov byte [ bp + 2 ], %3
  8073                              <1> 	prthex16 %2, %3
  8074                              <1> 	push sp
  8075                              <1> 	pop bp
  8076                              <1> 	mov word ax, [ bp + 0 ]
  8077                              <1> 	mov byte bl, [ bp + 2 ]
  8078                              <1> 	prthex16 ax, bl
  8079                              <1> 	stkclose 3
  8080                              <1> %endmacro
  8081                              <1> 
  8082                              <1> %macro prtbin32 1
  8083                              <1> 	prtbin32 cs, %1
  8084                              <1> %endmacro
  8085                              <1> 
  8086                              <1> %macro prtbin32 2
  8087                              <1> 	mov ax,%1
  8088                              <1> 	mov ds,ax
  8089                              <1> 	mov word ax,[%2+2]
  8090                              <1> 	prtbin16 ax
  8091                              <1> 	prtch 20h
  8092                              <1> 	mov ax,%1
  8093                              <1> 	mov ds,ax
  8094                              <1> 	mov word ax,[%2]
  8095                              <1> 	prtbin16 ax
  8096                              <1> %endmacro
  8097                              <1> 
  8098                              <1> %macro prthex32 1
  8099                              <1> 	prthex32 cs, %1
  8100                              <1> %endmacro
  8101                              <1> 
  8102                              <1> %macro iprthex32 1
  8103                              <1> 	iprthex32 cs, %1
  8104                              <1> %endmacro
  8105                              <1> 
  8106                              <1> %macro prthex32 2
  8107                              <1> 	mov ax,%1
  8108                              <1> 	mov ds,ax
  8109                              <1> 	mov word ax,[%2+2]
  8110                              <1> 	prthex16 ax	
  8111                              <1> 	mov ax,%1
  8112                              <1> 	mov ds,ax
  8113                              <1> 	mov word ax,[%2]
  8114                              <1> 	prthex16 ax
  8115                              <1> %endmacro
  8116                              <1> 
  8117                              <1> %macro iprthex32 2
  8118                              <1> 	mov ax,%1
  8119                              <1> 	mov ds,ax
  8120                              <1> 	mov word ax,[%2+2]
  8121                              <1> 	mov word bx,ax
  8122                              <1> 	and ax,0x7FFF
  8123                              <1> 	push ax
  8124                              <1> 	and bx,0x8000
  8125                              <1> 	cmp bx,0
  8126                              <1> 	jz %%prt
  8127                              <1> 		prtch '-'		
  8128                              <1> 	%%prt:	
  8129                              <1> 	pop ax
  8130                              <1> 	prthex16 ax
  8131                              <1> 	mov ax,%1
  8132                              <1> 	mov ds,ax
  8133                              <1> 	mov word ax,[%2]
  8134                              <1> 	prthex16 ax	
  8135                              <1> %endmacro
  8136                              <1> 
  8137                              <1> %macro prtsubbin8 3
  8138                              <1> 	__prtsubbin8 %1,%2,%3
  8139                              <1> %endmacro
  8140                              <1> 
  8141                              <1> %macro prtbin16 1
  8142                              <1> 	stkopen 3
  8143                              <1> 	mov word [bp], %1
  8144                              <1> 	mov byte [bp+2], TRUE
  8145                              <1> 	call proc_prtbin16
  8146                              <1> 	stkclose 3
  8147                              <1> %endmacro
  8148                              <1> 
  8149                              <1> %macro prtbin8 1
  8150                              <1> 	stkopen 2
  8151                              <1> 	mov byte [bp], %1
  8152                              <1> 	mov byte [bp+1], TRUE
  8153                              <1> 	call proc_prtbin8
  8154                              <1> 	stkclose 2
  8155                              <1> %endmacro
  8156                              <1> 
  8157                              <1> %macro prthex16 1
  8158                              <1> 	stkopen 3
  8159                              <1> 	mov word [bp], %1
  8160                              <1> 	mov byte [bp+2], TRUE
  8161                              <1> 	call proc_prthex16
  8162                              <1> 	stkclose 3
  8163                              <1> %endmacro
  8164                              <1> 
  8165                              <1> %macro prthex8 1
  8166                              <1> 	stkopen 2
  8167                              <1> 	mov byte [bp], %1
  8168                              <1> 	mov byte [bp+1], TRUE
  8169                              <1> 	call proc_prthex8
  8170                              <1> 	stkclose 2
  8171                              <1> %endmacro
  8172                              <1> 
  8173                              <1> %macro prtch 1
  8174                              <1> 	__prtch %1
  8175                              <1> %endmacro
  8176                              <1> 
  8177                              <1> %macro prtln 0
  8178                              <1> 	__prtln
  8179                              <1> %endmacro	
  8180                              <1> 
  8181                              <1> 
  8182                              <1> %macro prtstk 0
  8183                              <1> 	printf "stack ---> "
  8184                              <1> 	mov ax,sp
  8185                              <1> 	prthex16 ax
  8186                              <1> %endmacro  
  8187                              <1> 
  8188                              <1> %endif
  8189                                  
  8190                                  section .data
  8191 00001DA9 000020C2                	a: dd -40.0
  8192 00001DAD 0000                    	ang: dw 0
  8193                                  section .text
  8194                                  	global _start
  8195                                  
  8196                                  _start:		
  8197                                  	toradians a
  8198                              <1>  toradians %1, %1
  8199                              <2>  toradians cs, %1, cs, %2
  8200                              <3>  stkopen 0x08
  8201 00000000 83EC08              <4>  sub word sp, %1
  8202 00000003 54                  <4>  push sp
  8203 00000004 5D                  <4>  pop bp
  8204 00000005 8CC8                <3>  mov ax,%1
  8205 00000007 8ED8                <3>  mov ds,ax
  8206 00000009 A1[AB1D]            <3>  mov ax,[%2+2]
  8207 0000000C 894600              <3>  mov [bp+0],ax
  8208 0000000F A1[A91D]            <3>  mov ax,[%2]
  8209 00000012 894602              <3>  mov [bp+2],ax
  8210 00000015 E8(9717)            <3>  call proc_toradians
  8211 00000018 89E0                <3>  mov ax,sp
  8212 0000001A 89C5                <3>  mov bp,ax
  8213 0000001C 8CC8                <3>  mov ax,%3
  8214 0000001E 8ED8                <3>  mov ds,ax
  8215 00000020 8B4604              <3>  mov ax,[bp+4]
  8216 00000023 A3[AB1D]            <3>  mov [%4+2],ax
  8217 00000026 8B4606              <3>  mov ax,[bp+6]
  8218 00000029 A3[A91D]            <3>  mov [%4],ax
  8219                              <3>  stkclose 0x08
  8220 0000002C 83C408              <4>  add word sp, %1
  8221                                  	to0x360 a
  8222                              <1>  to0x360 %1, %1
  8223                              <2>  to0x360 cs, %1, cs, %2
  8224                              <3>  stkopen 0x08
  8225 0000002F 83EC08              <4>  sub word sp, %1
  8226 00000032 54                  <4>  push sp
  8227 00000033 5D                  <4>  pop bp
  8228 00000034 8CC8                <3>  mov ax,%1
  8229 00000036 8ED8                <3>  mov ds,ax
  8230 00000038 A1[AB1D]            <3>  mov ax,[%2+2]
  8231 0000003B 894600              <3>  mov [bp+0],ax
  8232 0000003E A1[A91D]            <3>  mov ax,[%2]
  8233 00000041 894602              <3>  mov [bp+2],ax
  8234 00000044 E8(9C16)            <3>  call proc_to0x360
  8235 00000047 89E0                <3>  mov ax,sp
  8236 00000049 89C5                <3>  mov bp,ax
  8237 0000004B 8CC8                <3>  mov ax,%3
  8238 0000004D 8ED8                <3>  mov ds,ax
  8239 0000004F 8B4604              <3>  mov ax,[bp+4]
  8240 00000052 A3[AB1D]            <3>  mov [%4+2],ax
  8241 00000055 8B4606              <3>  mov ax,[bp+6]
  8242 00000058 A3[A91D]            <3>  mov [%4],ax
  8243                              <3>  stkclose 0x08
  8244 0000005B 83C408              <4>  add word sp, %1
  8245                                  	
  8246                                  	prthex32 a
  8247                              <1>  prthex32 cs, %1
  8248 0000005E 8CC8                <2>  mov ax,%1
  8249 00000060 8ED8                <2>  mov ds,ax
  8250 00000062 A1[AB1D]            <2>  mov word ax,[%2+2]
  8251                              <2>  prthex16 ax
  8252                              <3>  stkopen 3
  8253 00000065 83EC03              <4>  sub word sp, %1
  8254 00000068 54                  <4>  push sp
  8255 00000069 5D                  <4>  pop bp
  8256 0000006A 894600              <3>  mov word [bp], %1
  8257 0000006D C6460201            <3>  mov byte [bp+2], TRUE
  8258 00000071 E8(9B08)            <3>  call proc_prthex16
  8259                              <3>  stkclose 3
  8260 00000074 83C403              <4>  add word sp, %1
  8261 00000077 8CC8                <2>  mov ax,%1
  8262 00000079 8ED8                <2>  mov ds,ax
  8263 0000007B A1[A91D]            <2>  mov word ax,[%2]
  8264                              <2>  prthex16 ax
  8265                              <3>  stkopen 3
  8266 0000007E 83EC03              <4>  sub word sp, %1
  8267 00000081 54                  <4>  push sp
  8268 00000082 5D                  <4>  pop bp
  8269 00000083 894600              <3>  mov word [bp], %1
  8270 00000086 C6460201            <3>  mov byte [bp+2], TRUE
  8271 0000008A E8(9B08)            <3>  call proc_prthex16
  8272                              <3>  stkclose 3
  8273 0000008D 83C403              <4>  add word sp, %1
  8274                                  	prtln
  8275                              <1>  __prtln
  8276 00000090 E8(CB09)            <2>  call proc_prtln
  8277                                  		
  8278                                  	todegrees a
  8279                              <1>  todegrees %1, %1
  8280                              <2>  todegrees cs, %1, cs, %2
  8281                              <3>  stkopen 0x08
  8282 00000093 83EC08              <4>  sub word sp, %1
  8283 00000096 54                  <4>  push sp
  8284 00000097 5D                  <4>  pop bp
  8285 00000098 8CC8                <3>  mov ax,%1
  8286 0000009A 8ED8                <3>  mov ds,ax
  8287 0000009C A1[AB1D]            <3>  mov ax,[%2+2]
  8288 0000009F 894600              <3>  mov [bp+0],ax
  8289 000000A2 A1[A91D]            <3>  mov ax,[%2]
  8290 000000A5 894602              <3>  mov [bp+2],ax
  8291 000000A8 E8(F617)            <3>  call proc_todegrees
  8292 000000AB 89E0                <3>  mov ax,sp
  8293 000000AD 89C5                <3>  mov bp,ax
  8294 000000AF 8CC8                <3>  mov ax,%3
  8295 000000B1 8ED8                <3>  mov ds,ax
  8296 000000B3 8B4604              <3>  mov ax,[bp+4]
  8297 000000B6 A3[AB1D]            <3>  mov [%4+2],ax
  8298 000000B9 8B4606              <3>  mov ax,[bp+6]
  8299 000000BC A3[A91D]            <3>  mov [%4],ax
  8300                              <3>  stkclose 0x08
  8301 000000BF 83C408              <4>  add word sp, %1
  8302                                  	flroundtoint16 a, ang
  8303                              <1>  flroundtoint16 cs, %1, cs, %2
  8304                              <2>  stkopen 0x06
  8305 000000C2 83EC06              <3>  sub word sp, %1
  8306 000000C5 54                  <3>  push sp
  8307 000000C6 5D                  <3>  pop bp
  8308 000000C7 8CC8                <2>  mov ax,%1
  8309 000000C9 8ED8                <2>  mov ds,ax
  8310 000000CB A1[AB1D]            <2>  mov ax,[%2+2]
  8311 000000CE 894600              <2>  mov [bp+0],ax
  8312 000000D1 A1[A91D]            <2>  mov ax,[%2]
  8313 000000D4 894602              <2>  mov [bp+2],ax
  8314 000000D7 E8(1B0A)            <2>  call proc_flroundtoint16
  8315 000000DA 89E0                <2>  mov ax,sp
  8316 000000DC 89C5                <2>  mov bp,ax
  8317 000000DE 8CC8                <2>  mov ax,%3
  8318 000000E0 8ED8                <2>  mov ds,ax
  8319 000000E2 8B4604              <2>  mov ax,[bp+4]
  8320 000000E5 A3[AD1D]            <2>  mov [%4],ax
  8321                              <2>  stkclose 0x06
  8322 000000E8 83C406              <3>  add word sp, %1
  8323                                  	
  8324                                  	int16toreg ang, ax
  8325                              <1>  int16toreg cs, %1, %2
  8326 000000EB 68[AD1D]            <2>  push %2
  8327 000000EE 0E                  <2>  push %1
  8328 000000EF 1F                  <2>  pop ds
  8329 000000F0 5E                  <2>  pop si
  8330 000000F1 8B04                <2>  mov word %3,[si]
  8331                                  	prthex16 ax
  8332                              <1>  stkopen 3
  8333 000000F3 83EC03              <2>  sub word sp, %1
  8334 000000F6 54                  <2>  push sp
  8335 000000F7 5D                  <2>  pop bp
  8336 000000F8 894600              <1>  mov word [bp], %1
  8337 000000FB C6460201            <1>  mov byte [bp+2], TRUE
  8338 000000FF E8(9B08)            <1>  call proc_prthex16
  8339                              <1>  stkclose 3
  8340 00000102 83C403              <2>  add word sp, %1
  8341                                  	
  8342 00000105 EBFE                    	jmp $	
  8343                                  	

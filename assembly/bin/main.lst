     1                                  
     2                                  %include "lib/system.mac"
     3                              <1>  
     4                              <1> %ifndef SYSTEM_MAC
     5                              <1>  	%define SYSTEM_MAC
     6                              <1>  	
     7                              <1> 	%ifndef TRUE
     8                              <1> 		%define TRUE 01h
     9                              <1> 	%endif
    10                              <1> 	%ifndef FALSE
    11                              <1> 		%define FALSE 00h
    12                              <1> 	%endif 	
    13                              <1>  	
    14                              <1>  	%include "lib/kernel.asmh"
    15                              <2> %ifndef KERNEL_ASMH
    16                              <2> 	%define KERNEL_ASMH
    17                              <2> 
    18                              <2> section .data
    19                              <2> 
    20                              <2> 	kernel_segment: equ 0x50
    21                              <2> 
    22                              <2> 	mformat: equ 0x144
    23                              <2> 	malloc: equ 0x175
    24                              <2> 	laddr: equ 0x1EB
    25                              <2> 	faddr: equ 0x201
    26                              <2> 
    27                              <2> %endif
    28                              <1>  	 	
    29                              <1> %macro mformat 4
    30                              <1> 	stkopen 8
    31                              <1> 	mov word [ bp + 0 ], %1
    32                              <1> 	mov word [ bp + 2 ], %2
    33                              <1> 	mov word [ bp + 4 ], %3
    34                              <1> 	mov word [ bp + 6 ], %4
    35                              <1> 	call kernel_segment:mformat
    36                              <1> 	stkclose 8
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> %macro malloc 6
    40                              <1> 	stkopen 0Bh
    41                              <1> 	mov word [ bp + 4 ], %3
    42                              <1> 	mov word [ bp + 6 ], %4
    43                              <1> 	mov word [ bp + 8 ], %5	
    44                              <1> 	call kernel_segment:malloc
    45                              <1> 	push sp
    46                              <1> 	pop bp
    47                              <1> 	mov word %1, [ bp ]
    48                              <1> 	mov word %2, [ bp + 2 ]
    49                              <1> 	mov byte %6, [ bp + 0x0A ]
    50                              <1> 	stkclose 0Bh
    51                              <1> %endmacro 	
    52                              <1> 
    53                              <1> %macro laddr 2
    54                              <1> 	laddr %1, %2, %1, %2
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro faddr 2
    58                              <1> 	faddr %1, %2, %1, %2
    59                              <1> %endmacro
    60                              <1>  	
    61                              <1> %macro laddr 4
    62                              <1> 	stkopen 8
    63                              <1> 	mov word [ bp + 4 ], %3
    64                              <1> 	mov word [ bp + 6 ], %4	
    65                              <1> 	call kernel_segment:laddr
    66                              <1> 	push sp
    67                              <1> 	pop bp
    68                              <1> 	mov word %1, [ bp + 0 ]
    69                              <1> 	mov word %2, [ bp + 2 ]	
    70                              <1> 	stkclose 8
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro faddr 4
    74                              <1> 	stkopen 8
    75                              <1> 	mov word [ bp + 4 ], %3
    76                              <1> 	mov word [ bp + 6 ], %4	
    77                              <1> 	call kernel_segment:faddr
    78                              <1> 	push sp
    79                              <1> 	pop bp
    80                              <1> 	mov word %1, [ bp + 0 ]
    81                              <1> 	mov word %2, [ bp + 2 ]	
    82                              <1> 	stkclose 8
    83                              <1> %endmacro	
    84                              <1>  
    85                              <1> 
    86                              <1> %macro stkopen 1		
    87                              <1> 	sub word sp, %1
    88                              <1> 	push sp
    89                              <1> 	pop bp
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> %macro stkclose 1
    93                              <1> 	add word sp, %1
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> %macro stkload 1-* 	
    97                              <1>  	%rep %0
    98                              <1>  	 	%rotate -1
    99                              <1>  		pop %1
   100                              <1>  	%endrep
   101                              <1>  	%rep %0
   102                              <1>  		push %1
   103                              <1>  		%rotate 1
   104                              <1>  	%endrep
   105                              <1> %endmacro
   106                              <1> 
   107                              <1> %macro stkpush 1-* 	
   108                              <1>  	%rep %0
   109                              <1>  		push %1
   110                              <1>  		%rotate 1
   111                              <1>  	%endrep 	
   112                              <1> %endmacro
   113                              <1>  
   114                              <1> %macro stkpop 1-*
   115                              <1>  	%rep %0
   116                              <1>  	 	%rotate -1
   117                              <1>  		pop %1
   118                              <1>  	%endrep 	 	
   119                              <1> %endmacro
   120                              <1> 
   121                              <1> %macro toreg16 3
   122                              <1> 	push %1
   123                              <1> 	pop ds
   124                              <1> 	mov word %3, [%2]
   125                              <1> %endmacro
   126                              <1> 
   127                              <1> %macro toreg8 3
   128                              <1> 	push %1
   129                              <1> 	pop ds
   130                              <1> 	mov byte %3, [%2]
   131                              <1> %endmacro
   132                              <1> 
   133                              <1> %macro tovar16 3
   134                              <1> 	push %1
   135                              <1> 	pop ds
   136                              <1> 	mov word [%2], %3
   137                              <1> %endmacro
   138                              <1> 
   139                              <1> %macro tovar8 3
   140                              <1> 	push %1
   141                              <1> 	pop ds
   142                              <1> 	mov byte [%2], %3
   143                              <1> %endmacro 
   144                              <1>  	
   145                              <1> %endif 
   146                                  %include "lib/stdio.mac"
   147                              <1> 
   148                              <1> %ifndef STDIO_MAC
   149                              <1> 	%define STDIO_MAC
   150                              <1> 	
   151                              <1> 	%include "lib/stdio.asm"
   152                              <2> 
   153                              <2> %ifndef STDIO_ASM
   154                              <2> 	%define STDIO_ASM
   155                              <2> 	
   156                              <2> 	%include "lib/system.mac"
   157                              <3>  
   158                              <3> %ifndef SYSTEM_MAC
   159                              <3>  	%define SYSTEM_MAC
   160                              <3>  	
   161                              <3> 	%ifndef TRUE
   162                              <3> 		%define TRUE 01h
   163                              <3> 	%endif
   164                              <3> 	%ifndef FALSE
   165                              <3> 		%define FALSE 00h
   166                              <3> 	%endif 	
   167                              <3>  	
   168                              <3>  	%include "lib/kernel.asmh"
   169                              <3>  	 	
   170                              <3> %macro mformat 4
   171                              <3> 	stkopen 8
   172                              <3> 	mov word [ bp + 0 ], %1
   173                              <3> 	mov word [ bp + 2 ], %2
   174                              <3> 	mov word [ bp + 4 ], %3
   175                              <3> 	mov word [ bp + 6 ], %4
   176                              <3> 	call kernel_segment:mformat
   177                              <3> 	stkclose 8
   178                              <3> %endmacro
   179                              <3> 
   180                              <3> %macro malloc 6
   181                              <3> 	stkopen 0Bh
   182                              <3> 	mov word [ bp + 4 ], %3
   183                              <3> 	mov word [ bp + 6 ], %4
   184                              <3> 	mov word [ bp + 8 ], %5	
   185                              <3> 	call kernel_segment:malloc
   186                              <3> 	push sp
   187                              <3> 	pop bp
   188                              <3> 	mov word %1, [ bp ]
   189                              <3> 	mov word %2, [ bp + 2 ]
   190                              <3> 	mov byte %6, [ bp + 0x0A ]
   191                              <3> 	stkclose 0Bh
   192                              <3> %endmacro 	
   193                              <3> 
   194                              <3> %macro laddr 2
   195                              <3> 	laddr %1, %2, %1, %2
   196                              <3> %endmacro
   197                              <3> 
   198                              <3> %macro faddr 2
   199                              <3> 	faddr %1, %2, %1, %2
   200                              <3> %endmacro
   201                              <3>  	
   202                              <3> %macro laddr 4
   203                              <3> 	stkopen 8
   204                              <3> 	mov word [ bp + 4 ], %3
   205                              <3> 	mov word [ bp + 6 ], %4	
   206                              <3> 	call kernel_segment:laddr
   207                              <3> 	push sp
   208                              <3> 	pop bp
   209                              <3> 	mov word %1, [ bp + 0 ]
   210                              <3> 	mov word %2, [ bp + 2 ]	
   211                              <3> 	stkclose 8
   212                              <3> %endmacro
   213                              <3> 
   214                              <3> %macro faddr 4
   215                              <3> 	stkopen 8
   216                              <3> 	mov word [ bp + 4 ], %3
   217                              <3> 	mov word [ bp + 6 ], %4	
   218                              <3> 	call kernel_segment:faddr
   219                              <3> 	push sp
   220                              <3> 	pop bp
   221                              <3> 	mov word %1, [ bp + 0 ]
   222                              <3> 	mov word %2, [ bp + 2 ]	
   223                              <3> 	stkclose 8
   224                              <3> %endmacro	
   225                              <3>  
   226                              <3> 
   227                              <3> %macro stkopen 1		
   228                              <3> 	sub word sp, %1
   229                              <3> 	push sp
   230                              <3> 	pop bp
   231                              <3> %endmacro
   232                              <3> 
   233                              <3> %macro stkclose 1
   234                              <3> 	add word sp, %1
   235                              <3> %endmacro
   236                              <3> 
   237                              <3> %macro stkload 1-* 	
   238                              <3>  	%rep %0
   239                              <3>  	 	%rotate -1
   240                              <3>  		pop %1
   241                              <3>  	%endrep
   242                              <3>  	%rep %0
   243                              <3>  		push %1
   244                              <3>  		%rotate 1
   245                              <3>  	%endrep
   246                              <3> %endmacro
   247                              <3> 
   248                              <3> %macro stkpush 1-* 	
   249                              <3>  	%rep %0
   250                              <3>  		push %1
   251                              <3>  		%rotate 1
   252                              <3>  	%endrep 	
   253                              <3> %endmacro
   254                              <3>  
   255                              <3> %macro stkpop 1-*
   256                              <3>  	%rep %0
   257                              <3>  	 	%rotate -1
   258                              <3>  		pop %1
   259                              <3>  	%endrep 	 	
   260                              <3> %endmacro
   261                              <3> 
   262                              <3> %macro toreg16 3
   263                              <3> 	push %1
   264                              <3> 	pop ds
   265                              <3> 	mov word %3, [%2]
   266                              <3> %endmacro
   267                              <3> 
   268                              <3> %macro toreg8 3
   269                              <3> 	push %1
   270                              <3> 	pop ds
   271                              <3> 	mov byte %3, [%2]
   272                              <3> %endmacro
   273                              <3> 
   274                              <3> %macro tovar16 3
   275                              <3> 	push %1
   276                              <3> 	pop ds
   277                              <3> 	mov word [%2], %3
   278                              <3> %endmacro
   279                              <3> 
   280                              <3> %macro tovar8 3
   281                              <3> 	push %1
   282                              <3> 	pop ds
   283                              <3> 	mov byte [%2], %3
   284                              <3> %endmacro 
   285                              <3>  	
   286                              <3> %endif 
   287                              <2> 	
   288                              <2> %macro __prtch 1	
   289                              <2> 	stkopen 1	
   290                              <2> 	mov byte [ bp ], %1
   291                              <2> 	call proc_prtch
   292                              <2> 	stkclose 1
   293                              <2> %endmacro
   294                              <2> 
   295                              <2> %macro __prtln 0
   296                              <2> 	call proc_prtln
   297                              <2> %endmacro	
   298                              <2> 
   299                              <2> %macro __prtsubbin8 3
   300                              <2> 	stkopen 3
   301                              <2> 	mov byte [bp+0],%1
   302                              <2> 	mov byte [bp+1],%2
   303                              <2> 	mov byte [bp+2],%3
   304                              <2> 	call proc_prtsubbin8
   305                              <2> 	stkclose 3
   306                              <2> %endmacro
   307                              <2> 	
   308                              <2> section .data
   309                              <2> 	
   310                              <2> proc_prtIEEE754:
   311 00000000 89E0                <2> 	mov ax,sp
   312 00000002 89C5                <2> 	mov bp,ax			
   313 00000004 8B4602              <2> 	mov ax,[bp+2]	
   314 00000007 50                  <2> 	push ax
   315 00000008 50                  <2> 	push ax
   316 00000009 50                  <2> 	push ax
   317 0000000A 50                  <2> 	push ax	
   318 0000000B 50                  <2> 	push ax
   319                              <2> 	
   320                              <2> 	__prtsubbin8 ah,0,1
   321                              <3>  stkopen 3
   322 0000000C 83EC03              <4>  sub word sp, %1
   323 0000000F 54                  <4>  push sp
   324 00000010 5D                  <4>  pop bp
   325 00000011 886600              <3>  mov byte [bp+0],%1
   326 00000014 C6460100            <3>  mov byte [bp+1],%2
   327 00000018 C6460201            <3>  mov byte [bp+2],%3
   328 0000001C E87201              <3>  call proc_prtsubbin8
   329                              <3>  stkclose 3
   330 0000001F 83C403              <4>  add word sp, %1
   331                              <2> 	__prtch 20h
   332                              <3>  stkopen 1
   333 00000022 83EC01              <4>  sub word sp, %1
   334 00000025 54                  <4>  push sp
   335 00000026 5D                  <4>  pop bp
   336 00000027 C6460020            <3>  mov byte [ bp ], %1
   337 0000002B E82004              <3>  call proc_prtch
   338                              <3>  stkclose 1
   339 0000002E 83C401              <4>  add word sp, %1
   340                              <2> 	__prtch 20h
   341                              <3>  stkopen 1
   342 00000031 83EC01              <4>  sub word sp, %1
   343 00000034 54                  <4>  push sp
   344 00000035 5D                  <4>  pop bp
   345 00000036 C6460020            <3>  mov byte [ bp ], %1
   346 0000003A E81104              <3>  call proc_prtch
   347                              <3>  stkclose 1
   348 0000003D 83C401              <4>  add word sp, %1
   349 00000040 58                  <2> 	pop ax
   350                              <2> 	__prtsubbin8 ah,1,5
   351                              <3>  stkopen 3
   352 00000041 83EC03              <4>  sub word sp, %1
   353 00000044 54                  <4>  push sp
   354 00000045 5D                  <4>  pop bp
   355 00000046 886600              <3>  mov byte [bp+0],%1
   356 00000049 C6460101            <3>  mov byte [bp+1],%2
   357 0000004D C6460205            <3>  mov byte [bp+2],%3
   358 00000051 E83D01              <3>  call proc_prtsubbin8
   359                              <3>  stkclose 3
   360 00000054 83C403              <4>  add word sp, %1
   361 00000057 58                  <2> 	pop ax
   362                              <2> 	__prtsubbin8 ah,5,8
   363                              <3>  stkopen 3
   364 00000058 83EC03              <4>  sub word sp, %1
   365 0000005B 54                  <4>  push sp
   366 0000005C 5D                  <4>  pop bp
   367 0000005D 886600              <3>  mov byte [bp+0],%1
   368 00000060 C6460105            <3>  mov byte [bp+1],%2
   369 00000064 C6460208            <3>  mov byte [bp+2],%3
   370 00000068 E82601              <3>  call proc_prtsubbin8
   371                              <3>  stkclose 3
   372 0000006B 83C403              <4>  add word sp, %1
   373                              <2> 	
   374 0000006E 58                  <2> 	pop ax
   375                              <2> 	__prtsubbin8 al,0,1
   376                              <3>  stkopen 3
   377 0000006F 83EC03              <4>  sub word sp, %1
   378 00000072 54                  <4>  push sp
   379 00000073 5D                  <4>  pop bp
   380 00000074 884600              <3>  mov byte [bp+0],%1
   381 00000077 C6460100            <3>  mov byte [bp+1],%2
   382 0000007B C6460201            <3>  mov byte [bp+2],%3
   383 0000007F E80F01              <3>  call proc_prtsubbin8
   384                              <3>  stkclose 3
   385 00000082 83C403              <4>  add word sp, %1
   386                              <2> 	__prtch 20h
   387                              <3>  stkopen 1
   388 00000085 83EC01              <4>  sub word sp, %1
   389 00000088 54                  <4>  push sp
   390 00000089 5D                  <4>  pop bp
   391 0000008A C6460020            <3>  mov byte [ bp ], %1
   392 0000008E E8BD03              <3>  call proc_prtch
   393                              <3>  stkclose 1
   394 00000091 83C401              <4>  add word sp, %1
   395                              <2> 	__prtch 20h
   396                              <3>  stkopen 1
   397 00000094 83EC01              <4>  sub word sp, %1
   398 00000097 54                  <4>  push sp
   399 00000098 5D                  <4>  pop bp
   400 00000099 C6460020            <3>  mov byte [ bp ], %1
   401 0000009D E8AE03              <3>  call proc_prtch
   402                              <3>  stkclose 1
   403 000000A0 83C401              <4>  add word sp, %1
   404 000000A3 58                  <2> 	pop ax
   405                              <2> 	__prtsubbin8 al,1,4
   406                              <3>  stkopen 3
   407 000000A4 83EC03              <4>  sub word sp, %1
   408 000000A7 54                  <4>  push sp
   409 000000A8 5D                  <4>  pop bp
   410 000000A9 884600              <3>  mov byte [bp+0],%1
   411 000000AC C6460101            <3>  mov byte [bp+1],%2
   412 000000B0 C6460204            <3>  mov byte [bp+2],%3
   413 000000B4 E8DA00              <3>  call proc_prtsubbin8
   414                              <3>  stkclose 3
   415 000000B7 83C403              <4>  add word sp, %1
   416                              <2> 	__prtch 20h
   417                              <3>  stkopen 1
   418 000000BA 83EC01              <4>  sub word sp, %1
   419 000000BD 54                  <4>  push sp
   420 000000BE 5D                  <4>  pop bp
   421 000000BF C6460020            <3>  mov byte [ bp ], %1
   422 000000C3 E88803              <3>  call proc_prtch
   423                              <3>  stkclose 1
   424 000000C6 83C401              <4>  add word sp, %1
   425 000000C9 58                  <2> 	pop ax
   426                              <2> 	__prtsubbin8 al,4,8
   427                              <3>  stkopen 3
   428 000000CA 83EC03              <4>  sub word sp, %1
   429 000000CD 54                  <4>  push sp
   430 000000CE 5D                  <4>  pop bp
   431 000000CF 884600              <3>  mov byte [bp+0],%1
   432 000000D2 C6460104            <3>  mov byte [bp+1],%2
   433 000000D6 C6460208            <3>  mov byte [bp+2],%3
   434 000000DA E8B400              <3>  call proc_prtsubbin8
   435                              <3>  stkclose 3
   436 000000DD 83C403              <4>  add word sp, %1
   437                              <2> 	__prtch 20h
   438                              <3>  stkopen 1
   439 000000E0 83EC01              <4>  sub word sp, %1
   440 000000E3 54                  <4>  push sp
   441 000000E4 5D                  <4>  pop bp
   442 000000E5 C6460020            <3>  mov byte [ bp ], %1
   443 000000E9 E86203              <3>  call proc_prtch
   444                              <3>  stkclose 1
   445 000000EC 83C401              <4>  add word sp, %1
   446                              <2> 	
   447 000000EF 89E0                <2> 	mov ax,sp
   448 000000F1 89C5                <2> 	mov bp,ax			
   449 000000F3 8B4604              <2> 	mov ax,[bp+4]
   450 000000F6 50                  <2> 	push ax
   451 000000F7 50                  <2> 	push ax
   452 000000F8 50                  <2> 	push ax
   453                              <2> 	
   454                              <2> 	__prtsubbin8 ah,0,4
   455                              <3>  stkopen 3
   456 000000F9 83EC03              <4>  sub word sp, %1
   457 000000FC 54                  <4>  push sp
   458 000000FD 5D                  <4>  pop bp
   459 000000FE 886600              <3>  mov byte [bp+0],%1
   460 00000101 C6460100            <3>  mov byte [bp+1],%2
   461 00000105 C6460204            <3>  mov byte [bp+2],%3
   462 00000109 E88500              <3>  call proc_prtsubbin8
   463                              <3>  stkclose 3
   464 0000010C 83C403              <4>  add word sp, %1
   465                              <2> 	__prtch 20h
   466                              <3>  stkopen 1
   467 0000010F 83EC01              <4>  sub word sp, %1
   468 00000112 54                  <4>  push sp
   469 00000113 5D                  <4>  pop bp
   470 00000114 C6460020            <3>  mov byte [ bp ], %1
   471 00000118 E83303              <3>  call proc_prtch
   472                              <3>  stkclose 1
   473 0000011B 83C401              <4>  add word sp, %1
   474 0000011E 58                  <2> 	pop ax
   475                              <2> 	__prtsubbin8 ah,4,8
   476                              <3>  stkopen 3
   477 0000011F 83EC03              <4>  sub word sp, %1
   478 00000122 54                  <4>  push sp
   479 00000123 5D                  <4>  pop bp
   480 00000124 886600              <3>  mov byte [bp+0],%1
   481 00000127 C6460104            <3>  mov byte [bp+1],%2
   482 0000012B C6460208            <3>  mov byte [bp+2],%3
   483 0000012F E85F00              <3>  call proc_prtsubbin8
   484                              <3>  stkclose 3
   485 00000132 83C403              <4>  add word sp, %1
   486                              <2> 	__prtch 20h
   487                              <3>  stkopen 1
   488 00000135 83EC01              <4>  sub word sp, %1
   489 00000138 54                  <4>  push sp
   490 00000139 5D                  <4>  pop bp
   491 0000013A C6460020            <3>  mov byte [ bp ], %1
   492 0000013E E80D03              <3>  call proc_prtch
   493                              <3>  stkclose 1
   494 00000141 83C401              <4>  add word sp, %1
   495                              <2> 	
   496 00000144 58                  <2> 	pop ax
   497                              <2> 	__prtsubbin8 al,0,4
   498                              <3>  stkopen 3
   499 00000145 83EC03              <4>  sub word sp, %1
   500 00000148 54                  <4>  push sp
   501 00000149 5D                  <4>  pop bp
   502 0000014A 884600              <3>  mov byte [bp+0],%1
   503 0000014D C6460100            <3>  mov byte [bp+1],%2
   504 00000151 C6460204            <3>  mov byte [bp+2],%3
   505 00000155 E83900              <3>  call proc_prtsubbin8
   506                              <3>  stkclose 3
   507 00000158 83C403              <4>  add word sp, %1
   508                              <2> 	__prtch 20h
   509                              <3>  stkopen 1
   510 0000015B 83EC01              <4>  sub word sp, %1
   511 0000015E 54                  <4>  push sp
   512 0000015F 5D                  <4>  pop bp
   513 00000160 C6460020            <3>  mov byte [ bp ], %1
   514 00000164 E8E702              <3>  call proc_prtch
   515                              <3>  stkclose 1
   516 00000167 83C401              <4>  add word sp, %1
   517 0000016A 58                  <2> 	pop ax
   518                              <2> 	__prtsubbin8 al,4,8
   519                              <3>  stkopen 3
   520 0000016B 83EC03              <4>  sub word sp, %1
   521 0000016E 54                  <4>  push sp
   522 0000016F 5D                  <4>  pop bp
   523 00000170 884600              <3>  mov byte [bp+0],%1
   524 00000173 C6460104            <3>  mov byte [bp+1],%2
   525 00000177 C6460208            <3>  mov byte [bp+2],%3
   526 0000017B E81300              <3>  call proc_prtsubbin8
   527                              <3>  stkclose 3
   528 0000017E 83C403              <4>  add word sp, %1
   529                              <2> 	__prtch 20h
   530                              <3>  stkopen 1
   531 00000181 83EC01              <4>  sub word sp, %1
   532 00000184 54                  <4>  push sp
   533 00000185 5D                  <4>  pop bp
   534 00000186 C6460020            <3>  mov byte [ bp ], %1
   535 0000018A E8C102              <3>  call proc_prtch
   536                              <3>  stkclose 1
   537 0000018D 83C401              <4>  add word sp, %1
   538                              <2> 	
   539 00000190 C3                  <2> 	ret
   540                              <2> 	
   541                              <2> proc_prtsubbin8:
   542 00000191 89E0                <2> 	mov ax,sp
   543 00000193 89C5                <2> 	mov bp,ax
   544                              <2> 	
   545 00000195 8A4602              <2> 	mov al,[bp+2]
   546 00000198 50                  <2> 	push ax
   547                              <2> 	
   548 00000199 8A4E03              <2> 	mov cl,[bp+3]
   549 0000019C 8A6E04              <2> 	mov ch,[bp+4]
   550 0000019F 80FD08              <2> 	cmp ch,8
   551 000001A2 7602                <2> 	jbe .l1	
   552 000001A4 B508                <2> 		mov ch,8
   553                              <2> 	.l1:		
   554 000001A6 38E9                <2> 		cmp cl,ch		
   555 000001A8 731D                <2> 		jae .l2
   556                              <2> 		
   557 000001AA 58                  <2> 		pop ax
   558 000001AB 50                  <2> 		push ax
   559 000001AC D2E0                <2> 		shl al,cl
   560 000001AE C0E807              <2> 		shr al,7		
   561 000001B1 0430                <2> 		add al,30h
   562                              <2> 		
   563 000001B3 51                  <2> 		push cx
   564                              <2> 		__prtch al
   565                              <3>  stkopen 1
   566 000001B4 83EC01              <4>  sub word sp, %1
   567 000001B7 54                  <4>  push sp
   568 000001B8 5D                  <4>  pop bp
   569 000001B9 884600              <3>  mov byte [ bp ], %1
   570 000001BC E88F02              <3>  call proc_prtch
   571                              <3>  stkclose 1
   572 000001BF 83C401              <4>  add word sp, %1
   573 000001C2 59                  <2> 		pop cx
   574                              <2> 		
   575 000001C3 FEC1                <2> 		inc cl
   576 000001C5 EBDF                <2> 		jmp .l1
   577                              <2> 	.l2:	
   578 000001C7 58                  <2> 	pop ax
   579                              <2> 	
   580 000001C8 C3                  <2> 	ret
   581                              <2> 	
   582                              <2> proc_prtbin16:
   583 000001C9 89E0                <2> 	mov ax,sp
   584 000001CB 89C5                <2> 	mov bp,ax
   585                              <2> 		
   586 000001CD 8A7E04              <2> 	mov bh, [bp+4]
   587 000001D0 B300                <2> 	mov bl,0
   588 000001D2 B201                <2> 	mov dl,TRUE
   589 000001D4 30ED                <2> 	xor ch,ch
   590 000001D6 B102                <2> 	mov cl,2
   591                              <2> 	.l1:
   592 000001D8 80F900              <2> 		cmp cl,0
   593 000001DB 744B                <2> 		jz .l2		
   594                              <2> 		
   595 000001DD 55                  <2> 		push bp
   596 000001DE 01CD                <2> 		add bp,cx
   597 000001E0 45                  <2> 		inc bp
   598                              <2> 		
   599 000001E1 0A5E00              <2> 		or byte bl, [bp]
   600 000001E4 08FB                <2> 		or byte bl, bh
   601 000001E6 743B                <2> 		jz .prted											
   602 000001E8 53                  <2> 			push bx
   603 000001E9 51                  <2> 			push cx	
   604 000001EA 80FA01              <2> 			cmp dl, TRUE
   605 000001ED 7402                <2> 			je .first
   606 000001EF EB10                <2> 			jmp .nfirst
   607                              <2> 			.first:
   608 000001F1 B200                <2> 				mov dl, FALSE
   609 000001F3 52                  <2> 				push dx
   610                              <2> 				
   611 000001F4 88FC                <2> 				mov ah, bh
   612 000001F6 8A4600              <2> 				mov byte al, [bp]
   613 000001F9 50                  <2> 				push ax
   614 000001FA E84000              <2> 				call proc_prtbin8
   615 000001FD 58                  <2> 				pop ax
   616                              <2> 							
   617 000001FE 5A                  <2> 				pop dx
   618 000001FF EB0C                <2> 				jmp .endfirst
   619                              <2> 			.nfirst:
   620 00000201 52                  <2> 				push dx
   621                              <2> 				
   622 00000202 B401                <2> 				mov ah, TRUE
   623 00000204 8A4600              <2> 				mov byte al, [bp]
   624 00000207 50                  <2> 				push ax
   625 00000208 E83200              <2> 				call proc_prtbin8
   626 0000020B 58                  <2> 				pop ax
   627                              <2> 								
   628 0000020C 5A                  <2> 				pop dx
   629                              <2> 			.endfirst:	
   630 0000020D 59                  <2> 			pop cx
   631 0000020E 5B                  <2> 			pop bx		
   632                              <2> 			
   633 0000020F 80F901              <2> 			cmp cl,1
   634 00000212 760F                <2> 			jbe .spaceprted
   635                              <2> 				__prtch 20h
   636                              <3>  stkopen 1
   637 00000214 83EC01              <4>  sub word sp, %1
   638 00000217 54                  <4>  push sp
   639 00000218 5D                  <4>  pop bp
   640 00000219 C6460020            <3>  mov byte [ bp ], %1
   641 0000021D E82E02              <3>  call proc_prtch
   642                              <3>  stkclose 1
   643 00000220 83C401              <4>  add word sp, %1
   644                              <2> 			.spaceprted:
   645                              <2> 		.prted:
   646                              <2> 		
   647 00000223 5D                  <2> 		pop bp
   648                              <2> 		
   649 00000224 FEC9                <2> 		dec cl
   650 00000226 EBB0                <2> 		jmp .l1
   651                              <2> 	.l2:
   652                              <2> 	
   653 00000228 80FB00              <2> 	cmp bl,0
   654 0000022B 750F                <2> 	jnz .end
   655                              <2> 		__prtch 30h
   656                              <3>  stkopen 1
   657 0000022D 83EC01              <4>  sub word sp, %1
   658 00000230 54                  <4>  push sp
   659 00000231 5D                  <4>  pop bp
   660 00000232 C6460030            <3>  mov byte [ bp ], %1
   661 00000236 E81502              <3>  call proc_prtch
   662                              <3>  stkclose 1
   663 00000239 83C401              <4>  add word sp, %1
   664                              <2> 	.end:
   665                              <2> 	
   666 0000023C C3                  <2> 	ret	
   667                              <2> 	
   668                              <2> proc_prtbin8:
   669 0000023D 89E0                <2> 	mov ax,sp
   670 0000023F 89C5                <2> 	mov bp,ax
   671 00000241 8A4602              <2> 	mov byte al, [bp+2]
   672 00000244 3C00                <2> 	cmp al, 0
   673 00000246 0F858700            <2> 	jnz .nzero
   674                              <2> 		__prtch 30h
   675                              <3>  stkopen 1
   676 0000024A 83EC01              <4>  sub word sp, %1
   677 0000024D 54                  <4>  push sp
   678 0000024E 5D                  <4>  pop bp
   679 0000024F C6460030            <3>  mov byte [ bp ], %1
   680 00000253 E8F801              <3>  call proc_prtch
   681                              <3>  stkclose 1
   682 00000256 83C401              <4>  add word sp, %1
   683                              <2> 		
   684 00000259 89E0                <2> 		mov ax,sp
   685 0000025B 89C5                <2> 		mov bp,ax
   686 0000025D 8A4603              <2> 		mov byte al, [bp+3]		
   687 00000260 3C00                <2> 		cmp al, FALSE
   688 00000262 0F84C500            <2> 		je .end
   689                              <2> 			__prtch 30h
   690                              <3>  stkopen 1
   691 00000266 83EC01              <4>  sub word sp, %1
   692 00000269 54                  <4>  push sp
   693 0000026A 5D                  <4>  pop bp
   694 0000026B C6460030            <3>  mov byte [ bp ], %1
   695 0000026F E8DC01              <3>  call proc_prtch
   696                              <3>  stkclose 1
   697 00000272 83C401              <4>  add word sp, %1
   698                              <2> 			__prtch 30h
   699                              <3>  stkopen 1
   700 00000275 83EC01              <4>  sub word sp, %1
   701 00000278 54                  <4>  push sp
   702 00000279 5D                  <4>  pop bp
   703 0000027A C6460030            <3>  mov byte [ bp ], %1
   704 0000027E E8CD01              <3>  call proc_prtch
   705                              <3>  stkclose 1
   706 00000281 83C401              <4>  add word sp, %1
   707                              <2> 			__prtch 30h
   708                              <3>  stkopen 1
   709 00000284 83EC01              <4>  sub word sp, %1
   710 00000287 54                  <4>  push sp
   711 00000288 5D                  <4>  pop bp
   712 00000289 C6460030            <3>  mov byte [ bp ], %1
   713 0000028D E8BE01              <3>  call proc_prtch
   714                              <3>  stkclose 1
   715 00000290 83C401              <4>  add word sp, %1
   716                              <2> 			__prtch 30h
   717                              <3>  stkopen 1
   718 00000293 83EC01              <4>  sub word sp, %1
   719 00000296 54                  <4>  push sp
   720 00000297 5D                  <4>  pop bp
   721 00000298 C6460030            <3>  mov byte [ bp ], %1
   722 0000029C E8AF01              <3>  call proc_prtch
   723                              <3>  stkclose 1
   724 0000029F 83C401              <4>  add word sp, %1
   725                              <2> 			__prtch 30h
   726                              <3>  stkopen 1
   727 000002A2 83EC01              <4>  sub word sp, %1
   728 000002A5 54                  <4>  push sp
   729 000002A6 5D                  <4>  pop bp
   730 000002A7 C6460030            <3>  mov byte [ bp ], %1
   731 000002AB E8A001              <3>  call proc_prtch
   732                              <3>  stkclose 1
   733 000002AE 83C401              <4>  add word sp, %1
   734                              <2> 			__prtch 30h
   735                              <3>  stkopen 1
   736 000002B1 83EC01              <4>  sub word sp, %1
   737 000002B4 54                  <4>  push sp
   738 000002B5 5D                  <4>  pop bp
   739 000002B6 C6460030            <3>  mov byte [ bp ], %1
   740 000002BA E89101              <3>  call proc_prtch
   741                              <3>  stkclose 1
   742 000002BD 83C401              <4>  add word sp, %1
   743                              <2> 			__prtch 30h
   744                              <3>  stkopen 1
   745 000002C0 83EC01              <4>  sub word sp, %1
   746 000002C3 54                  <4>  push sp
   747 000002C4 5D                  <4>  pop bp
   748 000002C5 C6460030            <3>  mov byte [ bp ], %1
   749 000002C9 E88201              <3>  call proc_prtch
   750                              <3>  stkclose 1
   751 000002CC 83C401              <4>  add word sp, %1
   752 000002CF EB5A                <2> 			jmp .end		
   753                              <2> 	.nzero:
   754                              <2> 
   755 000002D1 B000                <2> 	mov byte al, FALSE
   756 000002D3 50                  <2> 	push ax
   757                              <2> 
   758 000002D4 89E0                <2> 	mov ax,sp
   759 000002D6 89C5                <2> 	mov bp,ax
   760 000002D8 8A5E04              <2> 	mov byte bl, [bp+4]
   761 000002DB B100                <2> 	mov cl,0
   762                              <2> 	.l1:
   763 000002DD 80F908              <2> 		cmp cl,8
   764 000002E0 7348                <2> 		jae .l2
   765                              <2> 		
   766 000002E2 88C8                <2> 		mov al,cl
   767                              <2> 		
   768 000002E4 88DA                <2> 		mov dl, bl		
   769                              <2> 		
   770                              <2> 		.l1.1:
   771 000002E6 3C00                <2> 			cmp al,0
   772 000002E8 7406                <2> 			jz .l1.2
   773                              <2> 							
   774 000002EA D0E2                <2> 			shl dl,1
   775                              <2> 			
   776 000002EC FEC8                <2> 			dec al
   777 000002EE EBF6                <2> 			jmp .l1.1
   778                              <2> 		.l1.2:
   779                              <2> 						
   780 000002F0 C0EA07              <2> 		shr dl,7
   781                              <2> 		
   782 000002F3 89E0                <2> 		mov ax,sp
   783 000002F5 89C5                <2> 		mov bp,ax			
   784 000002F7 8A4605              <2> 		mov byte al, [bp+5]
   785 000002FA 3C01                <2> 		cmp al, TRUE
   786 000002FC 7413                <2> 		je .endzero		
   787 000002FE 80FA00              <2> 			cmp dl,0
   788 00000301 7402                <2> 			jz .zero
   789 00000303 EB08                <2> 			jmp .notzero
   790                              <2> 			.zero:
   791 00000305 58                  <2> 				pop ax
   792 00000306 50                  <2> 				push ax
   793 00000307 3C01                <2> 				cmp al, TRUE				
   794 00000309 7406                <2> 				je .endzero
   795 0000030B EB19                <2> 				jmp .inc
   796                              <2> 			.notzero:
   797 0000030D 58                  <2> 				pop ax
   798 0000030E B001                <2> 				mov al, TRUE	
   799 00000310 50                  <2> 				push ax				
   800                              <2> 		.endzero:
   801                              <2> 									
   802 00000311 80C230              <2> 		add dl,30h
   803                              <2> 
   804 00000314 51                  <2> 		push cx
   805 00000315 52                  <2> 		push dx
   806                              <2> 		__prtch dl
   807                              <3>  stkopen 1
   808 00000316 83EC01              <4>  sub word sp, %1
   809 00000319 54                  <4>  push sp
   810 0000031A 5D                  <4>  pop bp
   811 0000031B 885600              <3>  mov byte [ bp ], %1
   812 0000031E E82D01              <3>  call proc_prtch
   813                              <3>  stkclose 1
   814 00000321 83C401              <4>  add word sp, %1
   815 00000324 5A                  <2> 		pop dx
   816 00000325 59                  <2> 		pop cx	
   817                              <2> 
   818                              <2> 		.inc:
   819                              <2> 	
   820 00000326 FEC1                <2> 		inc cl
   821 00000328 EBB3                <2> 		jmp .l1	
   822                              <2> 	.l2:
   823                              <2> 	
   824 0000032A 58                  <2> 	pop ax
   825                              <2> 	
   826                              <2> 	.end:
   827                              <2> 	
   828 0000032B C3                  <2> 	ret	
   829                              <2> 
   830                              <2> proc_prthex16:
   831 0000032C 89E0                <2> 	mov ax,sp
   832 0000032E 89C5                <2> 	mov bp,ax
   833                              <2> 
   834 00000330 8A7E04              <2> 	mov byte bh, [bp+4]		
   835 00000333 B300                <2> 	mov bl,0	
   836 00000335 B201                <2> 	mov dl,TRUE
   837 00000337 30ED                <2> 	xor ch,ch
   838 00000339 B102                <2> 	mov cl, 2	
   839                              <2> 	.l1:			
   840 0000033B 80F900              <2> 		cmp cl,0
   841 0000033E 7437                <2> 		jz .l2
   842                              <2> 							
   843 00000340 55                  <2> 		push bp		
   844 00000341 01CD                <2> 		add bp,cx
   845 00000343 45                  <2> 		inc bp		
   846                              <2> 		
   847 00000344 0A5E00              <2> 		or byte bl, [bp]
   848 00000347 08FB                <2> 		or byte bl, bh
   849 00000349 7427                <2> 		jz .prted							
   850 0000034B 53                  <2> 			push bx
   851 0000034C 51                  <2> 			push cx	
   852 0000034D 80FA01              <2> 			cmp dl, TRUE
   853 00000350 7402                <2> 			je .first
   854 00000352 EB10                <2> 			jmp .nfirst
   855                              <2> 			.first:
   856 00000354 B200                <2> 				mov dl, FALSE
   857 00000356 52                  <2> 				push dx
   858                              <2> 				
   859 00000357 88FC                <2> 				mov ah, bh
   860 00000359 8A4600              <2> 				mov byte al, [bp]
   861 0000035C 50                  <2> 				push ax
   862 0000035D E82C00              <2> 				call proc_prthex8
   863 00000360 58                  <2> 				pop ax
   864                              <2> 							
   865 00000361 5A                  <2> 				pop dx
   866 00000362 EB0C                <2> 				jmp .endfirst
   867                              <2> 			.nfirst:
   868 00000364 52                  <2> 				push dx
   869                              <2> 				
   870 00000365 B401                <2> 				mov ah, TRUE
   871 00000367 8A4600              <2> 				mov byte al, [bp]
   872 0000036A 50                  <2> 				push ax
   873 0000036B E81E00              <2> 				call proc_prthex8
   874 0000036E 58                  <2> 				pop ax
   875                              <2> 								
   876 0000036F 5A                  <2> 				pop dx
   877                              <2> 			.endfirst:	
   878 00000370 59                  <2> 			pop cx
   879 00000371 5B                  <2> 			pop bx		
   880                              <2> 		.prted:
   881                              <2> 		
   882 00000372 5D                  <2> 		pop bp
   883                              <2> 	
   884 00000373 FEC9                <2> 		dec cl
   885 00000375 EBC4                <2> 		jmp .l1		
   886                              <2> 	.l2:
   887                              <2> 	
   888 00000377 80FB00              <2> 	cmp bl,0
   889 0000037A 750F                <2> 	jnz .end
   890                              <2> 		__prtch 30h
   891                              <3>  stkopen 1
   892 0000037C 83EC01              <4>  sub word sp, %1
   893 0000037F 54                  <4>  push sp
   894 00000380 5D                  <4>  pop bp
   895 00000381 C6460030            <3>  mov byte [ bp ], %1
   896 00000385 E8C600              <3>  call proc_prtch
   897                              <3>  stkclose 1
   898 00000388 83C401              <4>  add word sp, %1
   899                              <2> 	.end:
   900                              <2> 	
   901 0000038B C3                  <2> 	ret
   902                              <2> 	
   903                              <2> proc_prthex8:
   904 0000038C 89E0                <2> 	mov ax,sp
   905 0000038E 89C5                <2> 	mov bp,ax
   906 00000390 8A4602              <2> 	mov byte al, [bp+2]
   907 00000393 3C00                <2> 	cmp al, 0
   908 00000395 752B                <2> 	jnz .nzero
   909                              <2> 		__prtch 30h
   910                              <3>  stkopen 1
   911 00000397 83EC01              <4>  sub word sp, %1
   912 0000039A 54                  <4>  push sp
   913 0000039B 5D                  <4>  pop bp
   914 0000039C C6460030            <3>  mov byte [ bp ], %1
   915 000003A0 E8AB00              <3>  call proc_prtch
   916                              <3>  stkclose 1
   917 000003A3 83C401              <4>  add word sp, %1
   918                              <2> 		
   919 000003A6 89E0                <2> 		mov ax,sp
   920 000003A8 89C5                <2> 		mov bp,ax
   921 000003AA 8A4603              <2> 		mov byte al, [bp+3]		
   922 000003AD 3C00                <2> 		cmp al, FALSE
   923 000003AF 7476                <2> 		je .end
   924                              <2> 			__prtch 30h
   925                              <3>  stkopen 1
   926 000003B1 83EC01              <4>  sub word sp, %1
   927 000003B4 54                  <4>  push sp
   928 000003B5 5D                  <4>  pop bp
   929 000003B6 C6460030            <3>  mov byte [ bp ], %1
   930 000003BA E89100              <3>  call proc_prtch
   931                              <3>  stkclose 1
   932 000003BD 83C401              <4>  add word sp, %1
   933 000003C0 EB65                <2> 			jmp .end		
   934                              <2> 	.nzero:
   935                              <2> 
   936 000003C2 B000                <2> 	mov byte al, FALSE
   937 000003C4 50                  <2> 	push ax
   938                              <2> 
   939 000003C5 89E0                <2> 	mov ax,sp
   940 000003C7 89C5                <2> 	mov bp,ax
   941 000003C9 8A5E04              <2> 	mov byte bl, [bp+4]
   942 000003CC B102                <2> 	mov cl,2
   943                              <2> 	.l1:
   944 000003CE 80F900              <2> 		cmp cl,0
   945 000003D1 7453                <2> 		jz .l2
   946                              <2> 		
   947 000003D3 B002                <2> 		mov al,2
   948 000003D5 28C8                <2> 		sub al,cl
   949                              <2> 		
   950 000003D7 88DA                <2> 		mov dl, bl	
   951                              <2> 		
   952                              <2> 		.l1.1:
   953 000003D9 3C00                <2> 			cmp al,0
   954 000003DB 7407                <2> 			jz .l1.2
   955                              <2> 							
   956 000003DD C0E204              <2> 			shl dl,4
   957                              <2> 			
   958 000003E0 FEC8                <2> 			dec al
   959 000003E2 EBF5                <2> 			jmp .l1.1
   960                              <2> 		.l1.2:
   961                              <2> 						
   962 000003E4 C0EA04              <2> 		shr dl,4
   963                              <2> 
   964 000003E7 89E0                <2> 		mov ax,sp
   965 000003E9 89C5                <2> 		mov bp,ax			
   966 000003EB 8A4605              <2> 		mov byte al, [bp+5]
   967 000003EE 3C01                <2> 		cmp al, TRUE
   968 000003F0 7413                <2> 		je .endzero		
   969 000003F2 80FA00              <2> 			cmp dl,0
   970 000003F5 7402                <2> 			jz .zero
   971 000003F7 EB08                <2> 			jmp .notzero
   972                              <2> 			.zero:
   973 000003F9 58                  <2> 				pop ax
   974 000003FA 50                  <2> 				push ax
   975 000003FB 3C01                <2> 				cmp al, TRUE				
   976 000003FD 7406                <2> 				je .endzero
   977 000003FF EB21                <2> 				jmp .dec
   978                              <2> 			.notzero:
   979 00000401 58                  <2> 				pop ax
   980 00000402 B001                <2> 				mov al, TRUE	
   981 00000404 50                  <2> 				push ax				
   982                              <2> 		.endzero:
   983                              <2> 						
   984 00000405 80FA09              <2> 		cmp dl,9
   985 00000408 7603                <2> 		jbe .endsumseven  		
   986 0000040A 80C207              <2> 		add dl,7
   987                              <2> 		.endsumseven:
   988                              <2> 						
   989 0000040D 80C230              <2> 		add dl,30h
   990                              <2> 
   991 00000410 51                  <2> 		push cx
   992 00000411 52                  <2> 		push dx
   993                              <2> 		__prtch dl
   994                              <3>  stkopen 1
   995 00000412 83EC01              <4>  sub word sp, %1
   996 00000415 54                  <4>  push sp
   997 00000416 5D                  <4>  pop bp
   998 00000417 885600              <3>  mov byte [ bp ], %1
   999 0000041A E83100              <3>  call proc_prtch
  1000                              <3>  stkclose 1
  1001 0000041D 83C401              <4>  add word sp, %1
  1002 00000420 5A                  <2> 		pop dx
  1003 00000421 59                  <2> 		pop cx	
  1004                              <2> 
  1005                              <2> 		.dec:
  1006                              <2> 	
  1007 00000422 FEC9                <2> 		dec cl
  1008 00000424 EBA8                <2> 		jmp .l1	
  1009                              <2> 	.l2:
  1010                              <2> 	
  1011 00000426 58                  <2> 	pop ax
  1012                              <2> 	
  1013                              <2> 	.end:
  1014                              <2> 	
  1015 00000427 C3                  <2> 	ret
  1016                              <2> 
  1017                              <2> proc_prtstr:
  1018 00000428 89E0                <2> 	mov ax,sp
  1019 0000042A 89C5                <2> 	mov bp,ax
  1020                              <2> 	
  1021 0000042C 8B4602              <2> 	mov ax, [bp+2]
  1022 0000042F 8ED8                <2> 	mov ds, ax
  1023 00000431 8B7604              <2> 	mov si, [bp+4]						
  1024                              <2> 	.loop:
  1025 00000434 AC                  <2> 		lodsb
  1026 00000435 3C00                <2> 		cmp al,0h
  1027 00000437 7414                <2> 		jz .done
  1028                              <2> 		
  1029 00000439 1E                  <2> 		push ds
  1030 0000043A 56                  <2> 		push si
  1031                              <2> 					
  1032                              <2> 		__prtch al										
  1033                              <3>  stkopen 1
  1034 0000043B 83EC01              <4>  sub word sp, %1
  1035 0000043E 54                  <4>  push sp
  1036 0000043F 5D                  <4>  pop bp
  1037 00000440 884600              <3>  mov byte [ bp ], %1
  1038 00000443 E80800              <3>  call proc_prtch
  1039                              <3>  stkclose 1
  1040 00000446 83C401              <4>  add word sp, %1
  1041                              <2> 									
  1042 00000449 5E                  <2> 		pop si
  1043 0000044A 1F                  <2> 		pop ds
  1044                              <2> 											
  1045 0000044B EBE7                <2> 		jmp .loop 
  1046                              <2> 	.done:
  1047                              <2> 	
  1048 0000044D C3                  <2> 	ret	
  1049                              <2> 	
  1050                              <2> proc_prtch:
  1051 0000044E 89E0                <2> 	mov ax,sp
  1052 00000450 89C5                <2> 	mov bp,ax
  1053                              <2> 
  1054 00000452 8A4602              <2> 	mov al,[bp+2]
  1055 00000455 B40E                <2> 	mov ah,0Eh
  1056 00000457 B700                <2> 	mov bh,00h
  1057 00000459 CD10                <2> 	int 10h	
  1058                              <2> 	
  1059 0000045B C3                  <2> 	ret
  1060                              <2> 
  1061                              <2> proc_prtln:
  1062 0000045C B403                <2> 	mov ah,03h
  1063 0000045E B700                <2> 	mov bh,00h
  1064 00000460 CD10                <2> 	int 10h
  1065                              <2> 	
  1066 00000462 B402                <2> 	mov ah,02h
  1067 00000464 FEC6                <2> 	inc dh
  1068 00000466 B200                <2> 	mov dl,00h
  1069 00000468 CD10                <2> 	int 10h	
  1070                              <2> 	
  1071 0000046A C3                  <2> 	ret
  1072                              <2> 	
  1073                              <2> %endif
  1074                              <1>  	%include "lib/system.mac"
  1075                              <2>  
  1076                              <2> %ifndef SYSTEM_MAC
  1077                              <2>  	%define SYSTEM_MAC
  1078                              <2>  	
  1079                              <2> 	%ifndef TRUE
  1080                              <2> 		%define TRUE 01h
  1081                              <2> 	%endif
  1082                              <2> 	%ifndef FALSE
  1083                              <2> 		%define FALSE 00h
  1084                              <2> 	%endif 	
  1085                              <2>  	
  1086                              <2>  	%include "lib/kernel.asmh"
  1087                              <2>  	 	
  1088                              <2> %macro mformat 4
  1089                              <2> 	stkopen 8
  1090                              <2> 	mov word [ bp + 0 ], %1
  1091                              <2> 	mov word [ bp + 2 ], %2
  1092                              <2> 	mov word [ bp + 4 ], %3
  1093                              <2> 	mov word [ bp + 6 ], %4
  1094                              <2> 	call kernel_segment:mformat
  1095                              <2> 	stkclose 8
  1096                              <2> %endmacro
  1097                              <2> 
  1098                              <2> %macro malloc 6
  1099                              <2> 	stkopen 0Bh
  1100                              <2> 	mov word [ bp + 4 ], %3
  1101                              <2> 	mov word [ bp + 6 ], %4
  1102                              <2> 	mov word [ bp + 8 ], %5	
  1103                              <2> 	call kernel_segment:malloc
  1104                              <2> 	push sp
  1105                              <2> 	pop bp
  1106                              <2> 	mov word %1, [ bp ]
  1107                              <2> 	mov word %2, [ bp + 2 ]
  1108                              <2> 	mov byte %6, [ bp + 0x0A ]
  1109                              <2> 	stkclose 0Bh
  1110                              <2> %endmacro 	
  1111                              <2> 
  1112                              <2> %macro laddr 2
  1113                              <2> 	laddr %1, %2, %1, %2
  1114                              <2> %endmacro
  1115                              <2> 
  1116                              <2> %macro faddr 2
  1117                              <2> 	faddr %1, %2, %1, %2
  1118                              <2> %endmacro
  1119                              <2>  	
  1120                              <2> %macro laddr 4
  1121                              <2> 	stkopen 8
  1122                              <2> 	mov word [ bp + 4 ], %3
  1123                              <2> 	mov word [ bp + 6 ], %4	
  1124                              <2> 	call kernel_segment:laddr
  1125                              <2> 	push sp
  1126                              <2> 	pop bp
  1127                              <2> 	mov word %1, [ bp + 0 ]
  1128                              <2> 	mov word %2, [ bp + 2 ]	
  1129                              <2> 	stkclose 8
  1130                              <2> %endmacro
  1131                              <2> 
  1132                              <2> %macro faddr 4
  1133                              <2> 	stkopen 8
  1134                              <2> 	mov word [ bp + 4 ], %3
  1135                              <2> 	mov word [ bp + 6 ], %4	
  1136                              <2> 	call kernel_segment:faddr
  1137                              <2> 	push sp
  1138                              <2> 	pop bp
  1139                              <2> 	mov word %1, [ bp + 0 ]
  1140                              <2> 	mov word %2, [ bp + 2 ]	
  1141                              <2> 	stkclose 8
  1142                              <2> %endmacro	
  1143                              <2>  
  1144                              <2> 
  1145                              <2> %macro stkopen 1		
  1146                              <2> 	sub word sp, %1
  1147                              <2> 	push sp
  1148                              <2> 	pop bp
  1149                              <2> %endmacro
  1150                              <2> 
  1151                              <2> %macro stkclose 1
  1152                              <2> 	add word sp, %1
  1153                              <2> %endmacro
  1154                              <2> 
  1155                              <2> %macro stkload 1-* 	
  1156                              <2>  	%rep %0
  1157                              <2>  	 	%rotate -1
  1158                              <2>  		pop %1
  1159                              <2>  	%endrep
  1160                              <2>  	%rep %0
  1161                              <2>  		push %1
  1162                              <2>  		%rotate 1
  1163                              <2>  	%endrep
  1164                              <2> %endmacro
  1165                              <2> 
  1166                              <2> %macro stkpush 1-* 	
  1167                              <2>  	%rep %0
  1168                              <2>  		push %1
  1169                              <2>  		%rotate 1
  1170                              <2>  	%endrep 	
  1171                              <2> %endmacro
  1172                              <2>  
  1173                              <2> %macro stkpop 1-*
  1174                              <2>  	%rep %0
  1175                              <2>  	 	%rotate -1
  1176                              <2>  		pop %1
  1177                              <2>  	%endrep 	 	
  1178                              <2> %endmacro
  1179                              <2> 
  1180                              <2> %macro toreg16 3
  1181                              <2> 	push %1
  1182                              <2> 	pop ds
  1183                              <2> 	mov word %3, [%2]
  1184                              <2> %endmacro
  1185                              <2> 
  1186                              <2> %macro toreg8 3
  1187                              <2> 	push %1
  1188                              <2> 	pop ds
  1189                              <2> 	mov byte %3, [%2]
  1190                              <2> %endmacro
  1191                              <2> 
  1192                              <2> %macro tovar16 3
  1193                              <2> 	push %1
  1194                              <2> 	pop ds
  1195                              <2> 	mov word [%2], %3
  1196                              <2> %endmacro
  1197                              <2> 
  1198                              <2> %macro tovar8 3
  1199                              <2> 	push %1
  1200                              <2> 	pop ds
  1201                              <2> 	mov byte [%2], %3
  1202                              <2> %endmacro 
  1203                              <2>  	
  1204                              <2> %endif 
  1205                              <1> 
  1206                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1207                              <1> %macro printf 1-*	
  1208                              <1> 	%rep %0					
  1209                              <1> 		__printf %1
  1210                              <1> 		%rotate 1		
  1211                              <1> 	%endrep
  1212                              <1> %endmacro	
  1213                              <1> 
  1214                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1215                              <1> %macro __printf 1
  1216                              <1> 	section .data
  1217                              <1> 		%%str: db %1,0
  1218                              <1> 	section .text
  1219                              <1> 		prtstr cs, %%str				
  1220                              <1> %endmacro
  1221                              <1> 
  1222                              <1> %macro prtstr 2
  1223                              <1> 	stkopen 4
  1224                              <1> 	mov word [bp], %1
  1225                              <1> 	mov word [bp+2], %2
  1226                              <1> 	call proc_prtstr
  1227                              <1> 	stkclose 4
  1228                              <1> %endmacro
  1229                              <1> 
  1230                              <1> 
  1231                              <1> %macro prtIEEE754 1
  1232                              <1> 	prtIEEE754 cs, %1
  1233                              <1> %endmacro
  1234                              <1> 
  1235                              <1> %macro prtIEEE754 2
  1236                              <1> 	stkopen 4
  1237                              <1> 	mov ax,%1
  1238                              <1> 	mov ds,ax
  1239                              <1> 	mov ax, [%2+2]
  1240                              <1> 	mov word [bp+0], ax
  1241                              <1> 	mov ax, [%2]
  1242                              <1> 	mov word [bp+2], ax
  1243                              <1> 	call proc_prtIEEE754
  1244                              <1> 	stkclose 4
  1245                              <1> %endmacro
  1246                              <1> 
  1247                              <1> %macro prtbool 1	
  1248                              <1> 	cmp byte %1, TRUE
  1249                              <1> 	je .true
  1250                              <1> 	jmp .false
  1251                              <1> 	.true:
  1252                              <1> 		prtf "true"
  1253                              <1> 		jmp .endcmp
  1254                              <1> 	.false:
  1255                              <1> 		prtf "false"
  1256                              <1> 	.endcmp:	
  1257                              <1> %endmacro
  1258                              <1> 
  1259                              <1> %macro prtptr 2-3 TRUE
  1260                              <1> 	stkopen 3
  1261                              <1> 	mov word [ bp + 0 ], %2
  1262                              <1> 	mov byte [ bp + 2 ], %3
  1263                              <1> 	prthex16 %1, %3
  1264                              <1> 	writechar ':'
  1265                              <1> 	push sp
  1266                              <1> 	pop bp
  1267                              <1> 	mov word ax, [ bp + 0 ]
  1268                              <1> 	mov byte bl, [ bp + 2 ]
  1269                              <1> 	prthex16 ax, bl
  1270                              <1> 	stkclose 3
  1271                              <1> %endmacro
  1272                              <1> 
  1273                              <1> %macro prtfptr 2-3 TRUE
  1274                              <1> 	stkopen 3
  1275                              <1> 	mov word [ bp + 0 ], %1
  1276                              <1> 	mov byte [ bp + 2 ], %3
  1277                              <1> 	prthex16 %2, %3
  1278                              <1> 	push sp
  1279                              <1> 	pop bp
  1280                              <1> 	mov word ax, [ bp + 0 ]
  1281                              <1> 	mov byte bl, [ bp + 2 ]
  1282                              <1> 	prthex16 ax, bl
  1283                              <1> 	stkclose 3
  1284                              <1> %endmacro
  1285                              <1> 
  1286                              <1> %macro prtbin32 1
  1287                              <1> 	prtbin32 cs, %1
  1288                              <1> %endmacro
  1289                              <1> 
  1290                              <1> %macro prtbin32 2
  1291                              <1> 	mov ax,%1
  1292                              <1> 	mov ds,ax
  1293                              <1> 	mov word ax,[%2+2]
  1294                              <1> 	prtbin16 ax
  1295                              <1> 	prtch 20h
  1296                              <1> 	mov ax,%1
  1297                              <1> 	mov ds,ax
  1298                              <1> 	mov word ax,[%2]
  1299                              <1> 	prtbin16 ax
  1300                              <1> %endmacro
  1301                              <1> 
  1302                              <1> %macro prthex32 1
  1303                              <1> 	prthex32 cs, %1
  1304                              <1> %endmacro
  1305                              <1> 
  1306                              <1> %macro prthex32 2
  1307                              <1> 	mov ax,%1
  1308                              <1> 	mov ds,ax
  1309                              <1> 	mov word ax,[%2+2]
  1310                              <1> 	prthex16 ax	
  1311                              <1> 	mov ax,%1
  1312                              <1> 	mov ds,ax
  1313                              <1> 	mov word ax,[%2]
  1314                              <1> 	prthex16 ax
  1315                              <1> %endmacro
  1316                              <1> 
  1317                              <1> %macro prtsubbin8 3
  1318                              <1> 	__prtsubbin8 %1,%2,%3
  1319                              <1> %endmacro
  1320                              <1> 
  1321                              <1> %macro prtbin16 1
  1322                              <1> 	stkopen 3
  1323                              <1> 	mov word [bp], %1
  1324                              <1> 	mov byte [bp+2], TRUE
  1325                              <1> 	call proc_prtbin16
  1326                              <1> 	stkclose 3
  1327                              <1> %endmacro
  1328                              <1> 
  1329                              <1> %macro prtbin8 1
  1330                              <1> 	stkopen 2
  1331                              <1> 	mov byte [bp], %1
  1332                              <1> 	mov byte [bp+1], TRUE
  1333                              <1> 	call proc_prtbin8
  1334                              <1> 	stkclose 2
  1335                              <1> %endmacro
  1336                              <1> 
  1337                              <1> %macro prthex16 1
  1338                              <1> 	stkopen 3
  1339                              <1> 	mov word [bp], %1
  1340                              <1> 	mov byte [bp+2], TRUE
  1341                              <1> 	call proc_prthex16
  1342                              <1> 	stkclose 3
  1343                              <1> %endmacro
  1344                              <1> 
  1345                              <1> %macro prthex8 1
  1346                              <1> 	stkopen 2
  1347                              <1> 	mov byte [bp], %1
  1348                              <1> 	mov byte [bp+1], TRUE
  1349                              <1> 	call proc_prthex8
  1350                              <1> 	stkclose 2
  1351                              <1> %endmacro
  1352                              <1> 
  1353                              <1> %macro prtch 1
  1354                              <1> 	__prtch %1
  1355                              <1> %endmacro
  1356                              <1> 
  1357                              <1> %macro prtln 0
  1358                              <1> 	__prtln
  1359                              <1> %endmacro	
  1360                              <1> 
  1361                              <1> 
  1362                              <1> %macro prtstk 0
  1363                              <1> 	printf "stack ---> "
  1364                              <1> 	mov ax,sp
  1365                              <1> 	prthex16 ax
  1366                              <1> %endmacro  
  1367                              <1> 
  1368                              <1> %endif
  1369                                  %include "lib/math.mac"
  1370                              <1> 
  1371                              <1> %ifndef MATH_MAC
  1372                              <1> 	%define MATH_MAC
  1373                              <1> 	
  1374                              <1> 	%include "lib/math.asm"
  1375                              <2> 
  1376                              <2> %ifndef MATH_ASM
  1377                              <2> 	%define MATH_ASM
  1378                              <2> 
  1379                              <2> %macro __cmp32 5
  1380                              <2> 	stkopen 9
  1381                              <2> 	mov word [bp+0], %1
  1382                              <2> 	mov word [bp+2], %2
  1383                              <2> 	mov word [bp+4], %3
  1384                              <2> 	mov word [bp+6], %4
  1385                              <2> 	call proc_cmp32
  1386                              <2> 	push sp
  1387                              <2> 	pop bp
  1388                              <2> 	mov byte %5, [bp+8]
  1389                              <2> 	stkclose 9	
  1390                              <2> %endmacro
  1391                              <2> 
  1392                              <2> %macro __shl32 3
  1393                              <2> 	stkopen 5
  1394                              <2> 	mov word [bp+0], %1
  1395                              <2> 	mov word [bp+2], %2
  1396                              <2> 	mov byte [bp+4], %3
  1397                              <2> 	call proc_shl32
  1398                              <2> 	push sp
  1399                              <2> 	pop bp
  1400                              <2> 	mov word %1, [bp+0]
  1401                              <2> 	mov word %2, [bp+2]
  1402                              <2> 	stkclose 5
  1403                              <2> %endmacro
  1404                              <2> 
  1405                              <2> %macro __shr32 3
  1406                              <2> 	stkopen 5
  1407                              <2> 	mov word [bp+0], %1
  1408                              <2> 	mov word [bp+2], %2
  1409                              <2> 	mov byte [bp+4], %3
  1410                              <2> 	call proc_shr32
  1411                              <2> 	push sp
  1412                              <2> 	pop bp
  1413                              <2> 	mov word %1, [bp+0]
  1414                              <2> 	mov word %2, [bp+2]
  1415                              <2> 	stkclose 5
  1416                              <2> %endmacro
  1417                              <2> 
  1418                              <2> %macro __lzbitcount32 3	
  1419                              <2> 	push %2		
  1420                              <2> 	__lzbitcount16 %1, cl
  1421                              <2> 	pop ax
  1422                              <2> 	push cx		
  1423                              <2> 	__lzbitcount16 ax, al		
  1424                              <2> 	pop cx
  1425                              <2> 	add cl,al	
  1426                              <2> 	mov %3, cl 
  1427                              <2> %endmacro
  1428                              <2> 		
  1429                              <2> %macro __lzbitcount16 2
  1430                              <2> 	stkopen 3
  1431                              <2> 	mov word [bp+0], %1
  1432                              <2> 	call proc_lzbitcount16
  1433                              <2> 	push sp
  1434                              <2> 	pop bp
  1435                              <2> 	mov byte %2, [bp+2]	
  1436                              <2> 	stkclose 3
  1437                              <2> %endmacro	
  1438                              <2> 
  1439                              <2> %macro __calc_dividendo1 7
  1440                              <2> 	stkopen 0x0D
  1441                              <2> 	mov word [bp+0], %1
  1442                              <2> 	mov word [bp+2], %2
  1443                              <2> 	mov word [bp+4], %3
  1444                              <2> 	mov word [bp+6], %4
  1445                              <2> 	call proc_calc_dividendo1
  1446                              <2> 	push sp
  1447                              <2> 	pop bp
  1448                              <2> 	mov word %5, [bp+0x08]
  1449                              <2> 	mov word %6, [bp+0x0A]
  1450                              <2> 	mov byte %7, [bp+0x0C]
  1451                              <2> 	stkclose 0x0D
  1452                              <2> %endmacro
  1453                              <2> 
  1454                              <2> %macro __calc__prox_dividendo 5
  1455                              <2> 	stkopen 9
  1456                              <2> 	mov word [bp+0], %1
  1457                              <2> 	mov word [bp+2], %2
  1458                              <2> 	mov word [bp+4], %3
  1459                              <2> 	mov word [bp+6], %4
  1460                              <2> 	mov word [bp+8], %5
  1461                              <2> 	call proc_calc_prox_dividendo
  1462                              <2> 	push sp
  1463                              <2> 	pop bp
  1464                              <2> 	mov word %3, [bp+4]
  1465                              <2> 	mov word %4, [bp+6]
  1466                              <2> 	mov byte %5, [bp+8]
  1467                              <2> 	stkclose 9
  1468                              <2> %endmacro
  1469                              <2> 				
  1470                              <2> section .data
  1471                              <2> 
  1472                              <2> proc_div32:
  1473 0000046B 89E0                <2> 	mov ax,sp
  1474 0000046D 89C5                <2> 	mov bp,ax
  1475                              <2> 	
  1476 0000046F 8B4606              <2> 	mov ax,[bp+6]
  1477 00000472 034608              <2> 	add ax,[bp+8]
  1478 00000475 83F800              <2> 	cmp ax,0
  1479 00000478 0F846C01            <2> 	jz .divbyzero
  1480                              <2> 	
  1481 0000047C 837E0200            <2> 	cmp word [bp+2], 0
  1482 00000480 7521                <2> 	jnz .div2
  1483 00000482 837E0600            <2> 	cmp word [bp+6], 0
  1484 00000486 751B                <2> 	jnz .div2
  1485 00000488 31D2                <2> 		xor dx,dx
  1486 0000048A 8B4604              <2> 		mov ax, [bp+4]
  1487 0000048D F77608              <2> 		div word [bp+8]
  1488 00000490 C7460A0000          <2> 		mov word [bp+0x0A], 0
  1489 00000495 89460C              <2> 		mov word [bp+0x0C], ax
  1490 00000498 C7460E0000          <2> 		mov word [bp+0x0E], 0
  1491 0000049D 895610              <2> 		mov word [bp+0x10], dx
  1492 000004A0 E93F01              <2> 		jmp .enddiv
  1493                              <2> 	.div2:
  1494 000004A3 8B4602              <2> 		mov ax,[bp+2]
  1495 000004A6 3B4606              <2> 		cmp ax,[bp+6]
  1496 000004A9 0F821F01            <2> 		jb .qzero
  1497 000004AD 770A                <2> 		ja .div
  1498 000004AF 8B4604              <2> 		mov ax,[bp+4]
  1499 000004B2 3B4608              <2> 		cmp ax,[bp+8]
  1500 000004B5 0F821301            <2> 		jb .qzero
  1501                              <2> 		
  1502                              <2> 		.div:
  1503                              <2> 		
  1504 000004B9 C7460A0000          <2> 		mov word [bp+0x0A], 0
  1505 000004BE C7460C0000          <2> 		mov word [bp+0x0C], 0		
  1506 000004C3 C7460E0000          <2> 		mov word [bp+0x0E], 0
  1507 000004C8 C746100000          <2> 		mov word [bp+0x10], 0
  1508                              <2> 		
  1509 000004CD 8B4602              <2> 		mov ax,[bp+2]
  1510 000004D0 8B5E04              <2> 		mov bx,[bp+4]
  1511 000004D3 8B4E06              <2> 		mov cx,[bp+6]
  1512 000004D6 8B5608              <2> 		mov dx,[bp+8]		
  1513                              <2> 		__calc_dividendo1 ax, bx, cx, dx, ax, bx, cl
  1514                              <3>  stkopen 0x0D
  1515 000004D9 83EC0D              <4>  sub word sp, %1
  1516 000004DC 54                  <4>  push sp
  1517 000004DD 5D                  <4>  pop bp
  1518 000004DE 894600              <3>  mov word [bp+0], %1
  1519 000004E1 895E02              <3>  mov word [bp+2], %2
  1520 000004E4 894E04              <3>  mov word [bp+4], %3
  1521 000004E7 895606              <3>  mov word [bp+6], %4
  1522 000004EA E85C02              <3>  call proc_calc_dividendo1
  1523 000004ED 54                  <3>  push sp
  1524 000004EE 5D                  <3>  pop bp
  1525 000004EF 8B4608              <3>  mov word %5, [bp+0x08]
  1526 000004F2 8B5E0A              <3>  mov word %6, [bp+0x0A]
  1527 000004F5 8A4E0C              <3>  mov byte %7, [bp+0x0C]
  1528                              <3>  stkclose 0x0D
  1529 000004F8 83C40D              <4>  add word sp, %1
  1530                              <2> 
  1531 000004FB 89E2                <2> 		mov dx,sp
  1532 000004FD 89D5                <2> 		mov bp,dx
  1533 000004FF 89460E              <2> 		mov word [bp+0x0E], ax
  1534 00000502 895E10              <2> 		mov word [bp+0x10], bx
  1535                              <2> 		
  1536 00000505 51                  <2> 		push cx
  1537                              <2> 		.l1:							
  1538 00000506 89E2                <2> 			mov dx,sp
  1539 00000508 89D5                <2> 			mov bp,dx		
  1540 0000050A 83C502              <2> 			add bp,2
  1541 0000050D 8B460E              <2> 			mov ax, [bp+0x0E]
  1542 00000510 8B5E10              <2> 			mov bx, [bp+0x10]
  1543 00000513 8B4E06              <2> 			mov cx, [bp+6]
  1544 00000516 8B5608              <2> 			mov dx, [bp+8]
  1545                              <2> 			__cmp32 ax, bx, cx, dx, cl
  1546                              <3>  stkopen 9
  1547 00000519 83EC09              <4>  sub word sp, %1
  1548 0000051C 54                  <4>  push sp
  1549 0000051D 5D                  <4>  pop bp
  1550 0000051E 894600              <3>  mov word [bp+0], %1
  1551 00000521 895E02              <3>  mov word [bp+2], %2
  1552 00000524 894E04              <3>  mov word [bp+4], %3
  1553 00000527 895606              <3>  mov word [bp+6], %4
  1554 0000052A E81F01              <3>  call proc_cmp32
  1555 0000052D 54                  <3>  push sp
  1556 0000052E 5D                  <3>  pop bp
  1557 0000052F 8A4E08              <3>  mov byte %5, [bp+8]
  1558                              <3>  stkclose 9
  1559 00000532 83C409              <4>  add word sp, %1
  1560                              <2> 			
  1561 00000535 51                  <2> 			push cx
  1562 00000536 89E2                <2> 			mov dx,sp
  1563 00000538 89D5                <2> 			mov bp,dx
  1564 0000053A 83C504              <2> 			add bp,4
  1565 0000053D 8B460A              <2> 			mov ax,[bp+0x0A]
  1566 00000540 8B5E0C              <2> 			mov bx,[bp+0x0C]
  1567 00000543 55                  <2> 			push bp
  1568                              <2> 			__shl32 ax, bx, 1
  1569                              <3>  stkopen 5
  1570 00000544 83EC05              <4>  sub word sp, %1
  1571 00000547 54                  <4>  push sp
  1572 00000548 5D                  <4>  pop bp
  1573 00000549 894600              <3>  mov word [bp+0], %1
  1574 0000054C 895E02              <3>  mov word [bp+2], %2
  1575 0000054F C6460401            <3>  mov byte [bp+4], %3
  1576 00000553 E82101              <3>  call proc_shl32
  1577 00000556 54                  <3>  push sp
  1578 00000557 5D                  <3>  pop bp
  1579 00000558 8B4600              <3>  mov word %1, [bp+0]
  1580 0000055B 8B5E02              <3>  mov word %2, [bp+2]
  1581                              <3>  stkclose 5
  1582 0000055E 83C405              <4>  add word sp, %1
  1583 00000561 5D                  <2> 			pop bp				
  1584 00000562 59                  <2> 			pop cx	
  1585                              <2> 									
  1586 00000563 80F900              <2> 			cmp cl,0
  1587 00000566 7C12                <2> 			jl .l11
  1588 00000568 83C301              <2> 				add bx,1
  1589 0000056B 83D000              <2> 				adc ax,0	
  1590                              <2> 				
  1591 0000056E 8B4E06              <2> 				mov cx,[bp+6]
  1592 00000571 8B5608              <2> 				mov dx,[bp+8]
  1593 00000574 295610              <2> 				sub [bp+0x10],dx
  1594 00000577 194E0E              <2> 				sbb [bp+0x0E],cx							
  1595                              <2> 			.l11:							
  1596 0000057A 89460A              <2> 			mov word [bp+0x0A], ax
  1597 0000057D 895E0C              <2> 			mov word [bp+0x0C], bx					
  1598                              <2> 					
  1599 00000580 59                  <2> 			pop cx
  1600 00000581 51                  <2> 			push cx												
  1601                              <2> 			
  1602 00000582 80F920              <2> 			cmp cl,32
  1603 00000585 7342                <2> 			jae .l2
  1604                              <2> 						
  1605 00000587 59                  <2> 			pop cx
  1606                              <2> 			stkopen 9
  1607 00000588 83EC09              <3>  sub word sp, %1
  1608 0000058B 54                  <3>  push sp
  1609 0000058C 5D                  <3>  pop bp
  1610 0000058D 8B460B              <2> 			mov ax,[bp+0x0B]
  1611 00000590 894600              <2> 			mov word [bp+0], ax
  1612 00000593 8B460D              <2> 			mov ax,[bp+0x0D]
  1613 00000596 894602              <2> 			mov word [bp+2], ax
  1614 00000599 8B4617              <2> 			mov ax,[bp+0x17]
  1615 0000059C 894604              <2> 			mov word [bp+4], ax
  1616 0000059F 8B4619              <2> 			mov ax,[bp+0x19]
  1617 000005A2 894606              <2> 			mov word [bp+6], ax
  1618 000005A5 884E08              <2> 			mov byte [bp+8], cl
  1619 000005A8 E86A02              <2> 			call proc_calc_prox_dividendo
  1620 000005AB 89E0                <2> 			mov ax,sp
  1621 000005AD 89C5                <2> 			mov bp,ax
  1622 000005AF 8B4604              <2> 			mov word ax,[bp+4]
  1623 000005B2 8B5E06              <2> 			mov word bx,[bp+6]
  1624 000005B5 8A4E08              <2> 			mov byte cl,[bp+8] 
  1625                              <2> 			stkclose 9
  1626 000005B8 83C409              <3>  add word sp, %1
  1627 000005BB 89E2                <2> 			mov dx,sp
  1628 000005BD 89D5                <2> 			mov bp,dx
  1629 000005BF 89460E              <2> 			mov [bp+0x0E],ax
  1630 000005C2 895E10              <2> 			mov [bp+0x10],bx
  1631 000005C5 51                  <2> 			push cx
  1632 000005C6 E93DFF              <2> 			jmp .l1
  1633                              <2> 		.l2:	
  1634 000005C9 59                  <2> 		pop cx
  1635                              <2> 			
  1636 000005CA EB16                <2> 		jmp .enddiv
  1637                              <2> 	.qzero:
  1638 000005CC C7460A0000          <2> 		mov word [bp+0x0A], 0
  1639 000005D1 C7460C0000          <2> 		mov word [bp+0x0C], 0
  1640 000005D6 8B4602              <2> 		mov ax,[bp+2]
  1641 000005D9 89460E              <2> 		mov word [bp+0x0E], ax
  1642 000005DC 8B4604              <2> 		mov ax,[bp+4]
  1643 000005DF 894610              <2> 		mov word [bp+0x10], ax	
  1644                              <2> 	.enddiv:
  1645 000005E2 C6461200            <2> 		mov byte [bp+0x12], 0
  1646 000005E6 EB04                <2> 		jmp .end
  1647                              <2> 	.divbyzero:
  1648 000005E8 C6461201            <2> 		mov byte [bp+0x12], 1						
  1649                              <2> 	.end:		
  1650                              <2> 			
  1651 000005EC C3                  <2> 	ret
  1652                              <2> 		
  1653                              <2> proc_mul32:
  1654 000005ED 89E0                <2> 	mov ax,sp
  1655 000005EF 89C5                <2> 	mov bp,ax
  1656                              <2> 	
  1657 000005F1 31D2                <2> 	xor dx,dx
  1658 000005F3 8B4604              <2> 	mov ax,[bp+4]
  1659 000005F6 F76608              <2> 	mul word [bp+8]
  1660                              <2> 	
  1661 000005F9 89560A              <2> 	mov word [bp+0x0A], dx
  1662 000005FC 89460C              <2> 	mov word [bp+0x0C], ax	
  1663                              <2> 	
  1664 000005FF 31D2                <2> 	xor dx,dx
  1665 00000601 8B4604              <2> 	mov ax,[bp+4]
  1666 00000604 F76606              <2> 	mul word [bp+6]
  1667                              <2> 		
  1668 00000607 01460A              <2> 	add word [bp+0x0A],ax
  1669                              <2> 	
  1670 0000060A 31D2                <2> 	xor dx,dx
  1671 0000060C 8B4602              <2> 	mov ax,[bp+2]
  1672 0000060F F76608              <2> 	mul word [bp+8]
  1673                              <2> 	
  1674 00000612 01460A              <2> 	add word [bp+0x0A],ax
  1675                              <2> 	
  1676 00000615 C3                  <2> 	ret
  1677                              <2> 
  1678                              <2> proc_add32:
  1679 00000616 89E0                <2> 	mov ax,sp
  1680 00000618 89C5                <2> 	mov bp,ax
  1681                              <2> 	
  1682 0000061A 8B4602              <2> 	mov ax,[bp+2]
  1683 0000061D 8B5E04              <2> 	mov bx,[bp+4]
  1684 00000620 8B4E06              <2> 	mov cx,[bp+6]
  1685 00000623 8B5608              <2> 	mov dx,[bp+8]
  1686                              <2> 	
  1687 00000626 01D3                <2> 	add bx,dx
  1688 00000628 11C8                <2> 	adc ax,cx
  1689                              <2> 	
  1690 0000062A 89460A              <2> 	mov [bp+0x0A],ax
  1691 0000062D 895E0C              <2> 	mov [bp+0x0C],bx	
  1692                              <2> 	
  1693 00000630 C3                  <2> 	ret
  1694                              <2> 	
  1695                              <2> proc_sub32:
  1696 00000631 89E0                <2> 	mov ax,sp
  1697 00000633 89C5                <2> 	mov bp,ax
  1698                              <2> 	
  1699 00000635 8B4602              <2> 	mov ax,[bp+2]
  1700 00000638 8B5E04              <2> 	mov bx,[bp+4]
  1701 0000063B 8B4E06              <2> 	mov cx,[bp+6]
  1702 0000063E 8B5608              <2> 	mov dx,[bp+8]
  1703                              <2> 	
  1704 00000641 29D3                <2> 	sub bx,dx
  1705 00000643 19C8                <2> 	sbb ax,cx
  1706                              <2> 	
  1707 00000645 89460A              <2> 	mov [bp+0x0A],ax
  1708 00000648 895E0C              <2> 	mov [bp+0x0C],bx	
  1709                              <2> 	
  1710 0000064B C3                  <2> 	ret
  1711                              <2> 	
  1712                              <2> proc_cmp32:
  1713 0000064C 89E0                <2> 	mov ax,sp
  1714 0000064E 89C5                <2> 	mov bp,ax		
  1715                              <2> 		
  1716 00000650 8B4602              <2> 	mov ax,[bp+2]
  1717 00000653 3B4606              <2> 	cmp word ax,[bp+6]
  1718 00000656 7F04                <2> 	jg .above
  1719 00000658 7C08                <2> 	jl .below
  1720 0000065A 740C                <2> 	je .equal
  1721                              <2> 	.above:
  1722 0000065C C6460A01            <2> 		mov byte [bp+0x0A], 00000001b
  1723 00000660 EB14                <2> 		jmp .endcmp
  1724                              <2> 	.below:
  1725 00000662 C6460A81            <2> 		mov byte [bp+0x0A], 10000001b
  1726 00000666 EB0E                <2> 		jmp .endcmp
  1727                              <2> 	.equal:
  1728 00000668 8B4604              <2> 		mov ax,[bp+4]
  1729 0000066B 3B4608              <2> 		cmp word ax,[bp+8]
  1730 0000066E 7FEC                <2> 		jg .above
  1731 00000670 7CF0                <2> 		jl .below
  1732 00000672 C6460A00            <2> 		mov byte [bp+0x0A], 00000000b
  1733                              <2> 	.endcmp:		
  1734 00000676 C3                  <2> 	ret
  1735                              <2> 
  1736                              <2> proc_shl32:
  1737 00000677 89E0                <2> 	mov ax,sp
  1738 00000679 89C5                <2> 	mov bp,ax
  1739                              <2> 	
  1740 0000067B 31C0                <2> 	xor ax,ax
  1741 0000067D 8A4606              <2> 	mov byte al,[bp+6]
  1742 00000680 B310                <2> 	mov bl,10h
  1743 00000682 F6F3                <2> 	div bl
  1744                              <2> 					
  1745 00000684 3C01                <2> 	cmp al,1
  1746 00000686 7204                <2> 	jb .zero
  1747 00000688 7418                <2> 	je .one	
  1748 0000068A EB27                <2> 	jmp .above
  1749                              <2> 	.zero:	
  1750 0000068C B110                <2> 		mov cl,10h
  1751 0000068E 28E1                <2> 		sub cl,ah
  1752 00000690 8B5E04              <2> 		mov bx,[bp+4]		
  1753 00000693 D3EB                <2> 		shr bx,cl
  1754                              <2> 		
  1755 00000695 88E1                <2> 		mov cl,ah		
  1756 00000697 D36602              <2> 		shl word [bp+2],cl
  1757 0000069A 015E02              <2> 		add word [bp+2],bx				
  1758 0000069D D36604              <2> 		shl word [bp+4],cl
  1759 000006A0 EB1B                <2> 		jmp .endzo
  1760                              <2> 	.one:
  1761 000006A2 88E1                <2> 		mov cl,ah
  1762 000006A4 8B5E04              <2> 		mov bx, [bp+4]				
  1763 000006A7 D3E3                <2> 		shl bx, cl 
  1764 000006A9 895E02              <2> 		mov word [bp+2], bx
  1765 000006AC C746040000          <2> 		mov word [bp+4], 0
  1766 000006B1 EB0A                <2> 		jmp .endzo
  1767                              <2> 	.above:		
  1768 000006B3 C746020000          <2> 		mov word [bp+2], 0
  1769 000006B8 C746040000          <2> 		mov word [bp+4], 0
  1770                              <2> 	.endzo:	
  1771                              <2> 	
  1772 000006BD C3                  <2> 	ret
  1773                              <2> 	
  1774                              <2> proc_shr32:
  1775 000006BE 89E0                <2> 	mov ax,sp
  1776 000006C0 89C5                <2> 	mov bp,ax
  1777                              <2> 	
  1778 000006C2 31C0                <2> 	xor ax,ax
  1779 000006C4 8A4606              <2> 	mov byte al,[bp+6]
  1780 000006C7 B310                <2> 	mov bl,10h
  1781 000006C9 F6F3                <2> 	div bl
  1782                              <2> 					
  1783 000006CB 3C01                <2> 	cmp al,1
  1784 000006CD 7204                <2> 	jb .zero
  1785 000006CF 7418                <2> 	je .one	
  1786 000006D1 EB27                <2> 	jmp .above
  1787                              <2> 	.zero:	
  1788 000006D3 B110                <2> 		mov cl,10h
  1789 000006D5 28E1                <2> 		sub cl,ah		
  1790 000006D7 8B5E02              <2> 		mov bx,[bp+2]		
  1791 000006DA D3E3                <2> 		shl bx,cl
  1792                              <2> 		
  1793 000006DC 88E1                <2> 		mov cl,ah		
  1794 000006DE D36E02              <2> 		shr word [bp+2],cl
  1795 000006E1 D36E04              <2> 		shr word [bp+4],cl
  1796 000006E4 015E04              <2> 		add word [bp+4],bx	
  1797 000006E7 EB1B                <2> 		jmp .endzo
  1798                              <2> 	.one:			
  1799 000006E9 88E1                <2> 		mov cl,ah
  1800 000006EB 8B5E02              <2> 		mov bx,[bp+2]
  1801 000006EE D3EB                <2> 		shr bx,cl
  1802 000006F0 C746020000          <2> 		mov word [bp+2],0 
  1803 000006F5 895E04              <2> 		mov word [bp+4],bx
  1804 000006F8 EB0A                <2> 		jmp .endzo
  1805                              <2> 	.above:		
  1806 000006FA C746020000          <2> 		mov word [bp+2],0
  1807 000006FF C746040000          <2> 		mov word [bp+4],0
  1808                              <2> 	.endzo:		
  1809                              <2> 
  1810 00000704 C3                  <2> 	ret
  1811                              <2> 
  1812                              <2> proc_lzbitcount16:
  1813 00000705 89E0                <2> 	mov ax,sp
  1814 00000707 89C5                <2> 	mov bp,ax
  1815                              <2> 	
  1816 00000709 8B4602              <2> 	mov word ax,[bp+2]
  1817                              <2> 		
  1818 0000070C B100                <2> 	mov cl,0
  1819                              <2> 	.l1:
  1820 0000070E 80F910              <2> 		cmp cl,16
  1821 00000711 7310                <2> 		jae .l2
  1822                              <2> 		
  1823 00000713 89C3                <2> 		mov bx,ax
  1824 00000715 D3E3                <2> 		shl bx,cl
  1825 00000717 C1EB0F              <2> 		shr bx,15
  1826                              <2> 		
  1827 0000071A 83FB00              <2> 		cmp bx,0
  1828 0000071D 7504                <2> 		jnz .l2
  1829                              <2> 		
  1830 0000071F FEC1                <2> 		inc cl		
  1831 00000721 EBEB                <2> 		jmp .l1
  1832                              <2> 	.l2:
  1833                              <2> 	
  1834 00000723 884E04              <2> 	mov byte [bp+4], cl
  1835                              <2> 	
  1836 00000726 C3                  <2> 	ret
  1837                              <2> 	
  1838                              <2> proc_lzbitcount8:
  1839 00000727 89E0                <2> 	mov ax,sp
  1840 00000729 89C5                <2> 	mov bp,ax
  1841                              <2> 	
  1842 0000072B 8A4602              <2> 	mov byte al,[bp+2]
  1843                              <2> 	
  1844 0000072E B100                <2> 	mov cl,0
  1845                              <2> 	.l1:
  1846 00000730 80F908              <2> 		cmp cl,8
  1847 00000733 7410                <2> 		je .l2
  1848                              <2> 		
  1849 00000735 88C3                <2> 		mov bl,al
  1850 00000737 D2E3                <2> 		shl bl,cl
  1851 00000739 C0EB07              <2> 		shr bl,7
  1852                              <2> 		
  1853 0000073C 80FB00              <2> 		cmp bl,0
  1854 0000073F 7504                <2> 		jnz .l2
  1855                              <2> 		
  1856 00000741 FEC1                <2> 		inc cl		
  1857 00000743 EBEB                <2> 		jmp .l1
  1858                              <2> 	.l2:
  1859                              <2> 	
  1860 00000745 884E03              <2> 	mov byte [bp+3], cl
  1861                              <2> 		
  1862 00000748 C3                  <2> 	ret
  1863                              <2> 	
  1864                              <2> proc_calc_dividendo1:
  1865 00000749 89E0                <2> 	mov ax,sp
  1866 0000074B 89C5                <2> 	mov bp,ax
  1867                              <2> 	
  1868 0000074D 8B4606              <2> 	mov ax,[bp+6]
  1869 00000750 8B5E08              <2> 	mov bx,[bp+8]
  1870 00000753 55                  <2> 	push bp
  1871                              <2> 	__lzbitcount32 ax, bx, cl
  1872 00000754 53                  <3>  push %2
  1873                              <3>  __lzbitcount16 %1, cl
  1874                              <4>  stkopen 3
  1875 00000755 83EC03              <5>  sub word sp, %1
  1876 00000758 54                  <5>  push sp
  1877 00000759 5D                  <5>  pop bp
  1878 0000075A 894600              <4>  mov word [bp+0], %1
  1879 0000075D E8A5FF              <4>  call proc_lzbitcount16
  1880 00000760 54                  <4>  push sp
  1881 00000761 5D                  <4>  pop bp
  1882 00000762 8A4E02              <4>  mov byte %2, [bp+2]
  1883                              <4>  stkclose 3
  1884 00000765 83C403              <5>  add word sp, %1
  1885 00000768 58                  <3>  pop ax
  1886 00000769 51                  <3>  push cx
  1887                              <3>  __lzbitcount16 ax, al
  1888                              <4>  stkopen 3
  1889 0000076A 83EC03              <5>  sub word sp, %1
  1890 0000076D 54                  <5>  push sp
  1891 0000076E 5D                  <5>  pop bp
  1892 0000076F 894600              <4>  mov word [bp+0], %1
  1893 00000772 E890FF              <4>  call proc_lzbitcount16
  1894 00000775 54                  <4>  push sp
  1895 00000776 5D                  <4>  pop bp
  1896 00000777 8A4602              <4>  mov byte %2, [bp+2]
  1897                              <4>  stkclose 3
  1898 0000077A 83C403              <5>  add word sp, %1
  1899 0000077D 59                  <3>  pop cx
  1900 0000077E 00C1                <3>  add cl,al
  1901 00000780 88C9                <3>  mov %3, cl
  1902 00000782 5D                  <2> 	pop bp
  1903 00000783 B320                <2> 	mov bl,32
  1904 00000785 28CB                <2> 	sub bl,cl
  1905 00000787 53                  <2> 	push bx
  1906                              <2> 		
  1907 00000788 8B4602              <2> 	mov ax,[bp+2]
  1908 0000078B 8B5604              <2> 	mov dx,[bp+4]
  1909 0000078E 55                  <2> 	push bp
  1910                              <2> 	__shr32 ax, dx, cl
  1911                              <3>  stkopen 5
  1912 0000078F 83EC05              <4>  sub word sp, %1
  1913 00000792 54                  <4>  push sp
  1914 00000793 5D                  <4>  pop bp
  1915 00000794 894600              <3>  mov word [bp+0], %1
  1916 00000797 895602              <3>  mov word [bp+2], %2
  1917 0000079A 884E04              <3>  mov byte [bp+4], %3
  1918 0000079D E81EFF              <3>  call proc_shr32
  1919 000007A0 54                  <3>  push sp
  1920 000007A1 5D                  <3>  pop bp
  1921 000007A2 8B4600              <3>  mov word %1, [bp+0]
  1922 000007A5 8B5602              <3>  mov word %2, [bp+2]
  1923                              <3>  stkclose 5
  1924 000007A8 83C405              <4>  add word sp, %1
  1925 000007AB 5D                  <2> 	pop bp
  1926 000007AC 50                  <2> 	push ax
  1927 000007AD 52                  <2> 	push dx	
  1928                              <2> 	
  1929 000007AE 8B4E06              <2> 	mov cx,[bp+6]
  1930 000007B1 8B5E08              <2> 	mov bx,[bp+8]
  1931                              <2> 	
  1932 000007B4 55                  <2> 	push bp
  1933                              <2> 	__cmp32 ax, dx, cx, bx, cl
  1934                              <3>  stkopen 9
  1935 000007B5 83EC09              <4>  sub word sp, %1
  1936 000007B8 54                  <4>  push sp
  1937 000007B9 5D                  <4>  pop bp
  1938 000007BA 894600              <3>  mov word [bp+0], %1
  1939 000007BD 895602              <3>  mov word [bp+2], %2
  1940 000007C0 894E04              <3>  mov word [bp+4], %3
  1941 000007C3 895E06              <3>  mov word [bp+6], %4
  1942 000007C6 E883FE              <3>  call proc_cmp32
  1943 000007C9 54                  <3>  push sp
  1944 000007CA 5D                  <3>  pop bp
  1945 000007CB 8A4E08              <3>  mov byte %5, [bp+8]
  1946                              <3>  stkclose 9
  1947 000007CE 83C409              <4>  add word sp, %1
  1948 000007D1 5D                  <2> 	pop bp
  1949 000007D2 5A                  <2> 	pop dx
  1950 000007D3 58                  <2> 	pop ax
  1951 000007D4 5B                  <2> 	pop bx
  1952                              <2> 		
  1953 000007D5 80F900              <2> 	cmp cl,0
  1954 000007D8 7D2D                <2> 	jge .l1
  1955                              <2> 		stkopen 9
  1956 000007DA 83EC09              <3>  sub word sp, %1
  1957 000007DD 54                  <3>  push sp
  1958 000007DE 5D                  <3>  pop bp
  1959 000007DF 8B4E0B              <2> 		mov cx,[bp+0x0B]
  1960 000007E2 894E00              <2> 		mov word [bp+0], cx
  1961 000007E5 8B4E0D              <2> 		mov cx,[bp+0x0D]
  1962 000007E8 894E02              <2> 		mov word [bp+2], cx
  1963 000007EB 894604              <2> 		mov word [bp+4], ax
  1964 000007EE 895606              <2> 		mov word [bp+6], dx
  1965 000007F1 885E08              <2> 		mov byte [bp+8], bl
  1966 000007F4 E81E00              <2> 		call proc_calc_prox_dividendo
  1967 000007F7 89E0                <2> 		mov ax,sp
  1968 000007F9 89C5                <2> 		mov bp,ax
  1969 000007FB 8B4604              <2> 		mov word ax,[bp+4]
  1970 000007FE 8B5606              <2> 		mov word dx,[bp+6]
  1971 00000801 8A5E08              <2> 		mov byte bl,[bp+8] 
  1972                              <2> 		stkclose 9		 
  1973 00000804 83C409              <3>  add word sp, %1
  1974                              <2> 	.l1:
  1975                              <2> 	
  1976 00000807 89E1                <2> 	mov cx,sp
  1977 00000809 89CD                <2> 	mov bp,cx
  1978 0000080B 89460A              <2> 	mov word [bp+0x0A], ax
  1979 0000080E 89560C              <2> 	mov word [bp+0x0C], dx
  1980 00000811 885E0E              <2> 	mov byte [bp+0x0E], bl	 
  1981                              <2> 	
  1982 00000814 C3                  <2> 	ret
  1983                              <2> 
  1984                              <2> proc_calc_prox_dividendo:
  1985 00000815 89E0                <2> 	mov ax,sp
  1986 00000817 89C5                <2> 	mov bp,ax
  1987                              <2> 	
  1988 00000819 30E4                <2> 	xor ah,ah	
  1989 0000081B 8A460A              <2> 	mov al,[bp+0x0A]
  1990 0000081E B310                <2> 	mov bl,10h
  1991 00000820 F6F3                <2> 	div bl
  1992                              <2> 	
  1993 00000822 3C00                <2> 	cmp al,0
  1994 00000824 7402                <2> 	jz .zero
  1995 00000826 EB05                <2> 	jmp .one
  1996                              <2> 	.zero:
  1997 00000828 8B5E02              <2> 		mov bx,[bp+2]
  1998 0000082B EB03                <2> 		jmp .endcmp
  1999                              <2> 	.one:
  2000 0000082D 8B5E04              <2> 		mov bx,[bp+4]		
  2001                              <2> 	.endcmp:
  2002                              <2> 		
  2003 00000830 88E1                <2> 	mov cl,ah
  2004 00000832 D3E3                <2> 	shl bx,cl
  2005 00000834 C1EB0F              <2> 	shr bx,15
  2006                              <2> 	
  2007 00000837 8B4606              <2> 	mov ax,[bp+6]
  2008 0000083A 8B5608              <2> 	mov dx,[bp+8]
  2009 0000083D 53                  <2> 	push bx
  2010                              <2> 	__shl32 ax, dx, 1
  2011                              <3>  stkopen 5
  2012 0000083E 83EC05              <4>  sub word sp, %1
  2013 00000841 54                  <4>  push sp
  2014 00000842 5D                  <4>  pop bp
  2015 00000843 894600              <3>  mov word [bp+0], %1
  2016 00000846 895602              <3>  mov word [bp+2], %2
  2017 00000849 C6460401            <3>  mov byte [bp+4], %3
  2018 0000084D E827FE              <3>  call proc_shl32
  2019 00000850 54                  <3>  push sp
  2020 00000851 5D                  <3>  pop bp
  2021 00000852 8B4600              <3>  mov word %1, [bp+0]
  2022 00000855 8B5602              <3>  mov word %2, [bp+2]
  2023                              <3>  stkclose 5
  2024 00000858 83C405              <4>  add word sp, %1
  2025 0000085B 5B                  <2> 	pop bx
  2026                              <2> 	
  2027 0000085C 01DA                <2> 	add dx,bx
  2028 0000085E 83D000              <2> 	adc ax,0
  2029                              <2> 
  2030 00000861 89E1                <2> 	mov cx,sp
  2031 00000863 89CD                <2> 	mov bp,cx	
  2032 00000865 894606              <2> 	mov [bp+6],ax
  2033 00000868 895608              <2> 	mov [bp+8],dx
  2034                              <2> 	
  2035 0000086B FE460A              <2> 	inc byte [bp+0x0A]
  2036                              <2> 	
  2037 0000086E C3                  <2> 	ret
  2038                              <2> 	
  2039                              <2> %endif
  2040                              <1> 	%include "lib/system.mac"
  2041                              <2>  
  2042                              <2> %ifndef SYSTEM_MAC
  2043                              <2>  	%define SYSTEM_MAC
  2044                              <2>  	
  2045                              <2> 	%ifndef TRUE
  2046                              <2> 		%define TRUE 01h
  2047                              <2> 	%endif
  2048                              <2> 	%ifndef FALSE
  2049                              <2> 		%define FALSE 00h
  2050                              <2> 	%endif 	
  2051                              <2>  	
  2052                              <2>  	%include "lib/kernel.asmh"
  2053                              <2>  	 	
  2054                              <2> %macro mformat 4
  2055                              <2> 	stkopen 8
  2056                              <2> 	mov word [ bp + 0 ], %1
  2057                              <2> 	mov word [ bp + 2 ], %2
  2058                              <2> 	mov word [ bp + 4 ], %3
  2059                              <2> 	mov word [ bp + 6 ], %4
  2060                              <2> 	call kernel_segment:mformat
  2061                              <2> 	stkclose 8
  2062                              <2> %endmacro
  2063                              <2> 
  2064                              <2> %macro malloc 6
  2065                              <2> 	stkopen 0Bh
  2066                              <2> 	mov word [ bp + 4 ], %3
  2067                              <2> 	mov word [ bp + 6 ], %4
  2068                              <2> 	mov word [ bp + 8 ], %5	
  2069                              <2> 	call kernel_segment:malloc
  2070                              <2> 	push sp
  2071                              <2> 	pop bp
  2072                              <2> 	mov word %1, [ bp ]
  2073                              <2> 	mov word %2, [ bp + 2 ]
  2074                              <2> 	mov byte %6, [ bp + 0x0A ]
  2075                              <2> 	stkclose 0Bh
  2076                              <2> %endmacro 	
  2077                              <2> 
  2078                              <2> %macro laddr 2
  2079                              <2> 	laddr %1, %2, %1, %2
  2080                              <2> %endmacro
  2081                              <2> 
  2082                              <2> %macro faddr 2
  2083                              <2> 	faddr %1, %2, %1, %2
  2084                              <2> %endmacro
  2085                              <2>  	
  2086                              <2> %macro laddr 4
  2087                              <2> 	stkopen 8
  2088                              <2> 	mov word [ bp + 4 ], %3
  2089                              <2> 	mov word [ bp + 6 ], %4	
  2090                              <2> 	call kernel_segment:laddr
  2091                              <2> 	push sp
  2092                              <2> 	pop bp
  2093                              <2> 	mov word %1, [ bp + 0 ]
  2094                              <2> 	mov word %2, [ bp + 2 ]	
  2095                              <2> 	stkclose 8
  2096                              <2> %endmacro
  2097                              <2> 
  2098                              <2> %macro faddr 4
  2099                              <2> 	stkopen 8
  2100                              <2> 	mov word [ bp + 4 ], %3
  2101                              <2> 	mov word [ bp + 6 ], %4	
  2102                              <2> 	call kernel_segment:faddr
  2103                              <2> 	push sp
  2104                              <2> 	pop bp
  2105                              <2> 	mov word %1, [ bp + 0 ]
  2106                              <2> 	mov word %2, [ bp + 2 ]	
  2107                              <2> 	stkclose 8
  2108                              <2> %endmacro	
  2109                              <2>  
  2110                              <2> 
  2111                              <2> %macro stkopen 1		
  2112                              <2> 	sub word sp, %1
  2113                              <2> 	push sp
  2114                              <2> 	pop bp
  2115                              <2> %endmacro
  2116                              <2> 
  2117                              <2> %macro stkclose 1
  2118                              <2> 	add word sp, %1
  2119                              <2> %endmacro
  2120                              <2> 
  2121                              <2> %macro stkload 1-* 	
  2122                              <2>  	%rep %0
  2123                              <2>  	 	%rotate -1
  2124                              <2>  		pop %1
  2125                              <2>  	%endrep
  2126                              <2>  	%rep %0
  2127                              <2>  		push %1
  2128                              <2>  		%rotate 1
  2129                              <2>  	%endrep
  2130                              <2> %endmacro
  2131                              <2> 
  2132                              <2> %macro stkpush 1-* 	
  2133                              <2>  	%rep %0
  2134                              <2>  		push %1
  2135                              <2>  		%rotate 1
  2136                              <2>  	%endrep 	
  2137                              <2> %endmacro
  2138                              <2>  
  2139                              <2> %macro stkpop 1-*
  2140                              <2>  	%rep %0
  2141                              <2>  	 	%rotate -1
  2142                              <2>  		pop %1
  2143                              <2>  	%endrep 	 	
  2144                              <2> %endmacro
  2145                              <2> 
  2146                              <2> %macro toreg16 3
  2147                              <2> 	push %1
  2148                              <2> 	pop ds
  2149                              <2> 	mov word %3, [%2]
  2150                              <2> %endmacro
  2151                              <2> 
  2152                              <2> %macro toreg8 3
  2153                              <2> 	push %1
  2154                              <2> 	pop ds
  2155                              <2> 	mov byte %3, [%2]
  2156                              <2> %endmacro
  2157                              <2> 
  2158                              <2> %macro tovar16 3
  2159                              <2> 	push %1
  2160                              <2> 	pop ds
  2161                              <2> 	mov word [%2], %3
  2162                              <2> %endmacro
  2163                              <2> 
  2164                              <2> %macro tovar8 3
  2165                              <2> 	push %1
  2166                              <2> 	pop ds
  2167                              <2> 	mov byte [%2], %3
  2168                              <2> %endmacro 
  2169                              <2>  	
  2170                              <2> %endif 
  2171                              <1> 
  2172                              <1> %macro div32 5
  2173                              <1> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2174                              <1> %endmacro
  2175                              <1> 
  2176                              <1> %macro mul32 3
  2177                              <1> 	mul32 cs, %1, cs, %2, cs, %3
  2178                              <1> %endmacro
  2179                              <1> 	
  2180                              <1> %macro add32 3
  2181                              <1> 	add32 cs, %1, cs, %2, cs, %3
  2182                              <1> %endmacro
  2183                              <1> 
  2184                              <1> %macro sub32 3
  2185                              <1> 	sub32 cs, %1, cs, %2, cs, %3
  2186                              <1> %endmacro
  2187                              <1> 
  2188                              <1> %macro div32 10
  2189                              <1> 	stkopen 0x11
  2190                              <1> 	mov ax,%1
  2191                              <1> 	mov ds,ax
  2192                              <1> 	mov ax,[%2+2]
  2193                              <1> 	mov word [bp+0], ax
  2194                              <1> 	mov ax,[%2]
  2195                              <1> 	mov word [bp+2], ax
  2196                              <1> 	mov ax,%3
  2197                              <1> 	mov ds,ax
  2198                              <1> 	mov ax,[%4+2]
  2199                              <1> 	mov word [bp+4], ax
  2200                              <1> 	mov ax,[%4]
  2201                              <1> 	mov word [bp+6], ax
  2202                              <1> 	call proc_div32
  2203                              <1> 	mov ax,sp
  2204                              <1> 	mov bp,ax
  2205                              <1> 	mov ax,%5
  2206                              <1> 	mov ds,ax
  2207                              <1> 	mov word ax, [bp+8]
  2208                              <1> 	mov word [%6+2], ax
  2209                              <1> 	mov word ax, [bp+0x0A]
  2210                              <1> 	mov word [%6], ax
  2211                              <1> 	mov ax,%7
  2212                              <1> 	mov ds,ax
  2213                              <1> 	mov word ax,[bp+0x0C]
  2214                              <1> 	mov word [%8+2],ax
  2215                              <1> 	mov word ax,[bp+0x0E]
  2216                              <1> 	mov word [%8],ax
  2217                              <1> 	mov ax,%9
  2218                              <1> 	mov ds,ax
  2219                              <1> 	mov byte al,[bp+0x10]
  2220                              <1> 	mov byte [%10],al
  2221                              <1> 	stkclose 0x11
  2222                              <1> %endmacro
  2223                              <1> 	
  2224                              <1> %macro mul32 6
  2225                              <1> 	stkopen 0x0C
  2226                              <1> 	mov ax,%1
  2227                              <1> 	mov ds,ax
  2228                              <1> 	mov ax,[%2+2]
  2229                              <1> 	mov word [bp+0], ax
  2230                              <1> 	mov ax,[%2]
  2231                              <1> 	mov word [bp+2], ax
  2232                              <1> 	mov ax,%3
  2233                              <1> 	mov ds,ax
  2234                              <1> 	mov ax,[%4+2]
  2235                              <1> 	mov word [bp+4], ax
  2236                              <1> 	mov ax,[%4]
  2237                              <1> 	mov word [bp+6], ax
  2238                              <1> 	call proc_mul32
  2239                              <1> 	mov ax,sp
  2240                              <1> 	mov bp,ax
  2241                              <1> 	mov ax,%5
  2242                              <1> 	mov ds,ax
  2243                              <1> 	mov word ax, [bp+8]
  2244                              <1> 	mov word [%6+2], ax
  2245                              <1> 	mov word ax, [bp+0x0A]
  2246                              <1> 	mov word [%6], ax
  2247                              <1> 	stkclose 0x0C
  2248                              <1> %endmacro	
  2249                              <1> 	
  2250                              <1> %macro add32 6
  2251                              <1> 	stkopen 0x0C
  2252                              <1> 	mov ax,%1
  2253                              <1> 	mov ds,ax
  2254                              <1> 	mov ax,[%2+2]
  2255                              <1> 	mov word [bp+0], ax
  2256                              <1> 	mov ax,[%2]
  2257                              <1> 	mov word [bp+2], ax
  2258                              <1> 	mov ax,%3
  2259                              <1> 	mov ds,ax
  2260                              <1> 	mov ax,[%4+2]
  2261                              <1> 	mov word [bp+4], ax
  2262                              <1> 	mov ax,[%4]
  2263                              <1> 	mov word [bp+6], ax
  2264                              <1> 	call proc_add32
  2265                              <1> 	mov ax,sp
  2266                              <1> 	mov bp,ax
  2267                              <1> 	mov ax,%5
  2268                              <1> 	mov ds,ax
  2269                              <1> 	mov word ax, [bp+8]
  2270                              <1> 	mov word [%6+2], ax
  2271                              <1> 	mov word ax, [bp+0x0A]
  2272                              <1> 	mov word [%6], ax
  2273                              <1> 	stkclose 0x0C
  2274                              <1> %endmacro
  2275                              <1> 
  2276                              <1> %macro sub32 6
  2277                              <1> 	stkopen 0x0C
  2278                              <1> 	mov ax,%1
  2279                              <1> 	mov ds,ax
  2280                              <1> 	mov ax,[%2+2]
  2281                              <1> 	mov word [bp+0], ax
  2282                              <1> 	mov ax,[%2]
  2283                              <1> 	mov word [bp+2], ax
  2284                              <1> 	mov ax,%3
  2285                              <1> 	mov ds,ax
  2286                              <1> 	mov ax,[%4+2]
  2287                              <1> 	mov word [bp+4], ax
  2288                              <1> 	mov ax,[%4]
  2289                              <1> 	mov word [bp+6], ax
  2290                              <1> 	call proc_sub32
  2291                              <1> 	mov ax,sp
  2292                              <1> 	mov bp,ax
  2293                              <1> 	mov ax,%5
  2294                              <1> 	mov ds,ax
  2295                              <1> 	mov word ax, [bp+8]
  2296                              <1> 	mov word [%6+2], ax
  2297                              <1> 	mov word ax, [bp+0x0A]
  2298                              <1> 	mov word [%6], ax
  2299                              <1> 	stkclose 0x0C
  2300                              <1> %endmacro	
  2301                              <1> 	
  2302                              <1> %macro cmp32 3
  2303                              <1> 	cmp32 cs, %1, cs, %2, %3
  2304                              <1> %endmacro	
  2305                              <1> 	
  2306                              <1> %macro cmp32 5
  2307                              <1> 	stkopen 9
  2308                              <1> 	mov ax,%1
  2309                              <1> 	mov ds,ax
  2310                              <1> 	mov word ax,[%2+2]
  2311                              <1> 	mov word [bp+0], ax
  2312                              <1> 	mov word ax,[%2]
  2313                              <1> 	mov word [bp+2], ax	
  2314                              <1> 	mov ax,%3
  2315                              <1> 	mov ds,ax
  2316                              <1> 	mov word ax,[%4+2]
  2317                              <1> 	mov word [bp+4], ax
  2318                              <1> 	mov word ax,[%4]
  2319                              <1> 	mov word [bp+6], ax	
  2320                              <1> 	call proc_cmp32
  2321                              <1> 	mov ax,sp
  2322                              <1> 	mov bp,ax
  2323                              <1> 	mov al,[bp+8]
  2324                              <1> 	mov byte %5,al
  2325                              <1> 	stkclose 9
  2326                              <1> %endmacro
  2327                              <1> 	
  2328                              <1> %macro shl32 2
  2329                              <1> 	shl32 cs, %1, %2
  2330                              <1> %endmacro	
  2331                              <1> 	
  2332                              <1> %macro shl32 3
  2333                              <1> 	stkopen 5
  2334                              <1> 	mov ax,%1
  2335                              <1> 	mov ds,ax
  2336                              <1> 	mov word ax,[%2+2]
  2337                              <1> 	mov word [bp+0], ax
  2338                              <1> 	mov word ax,[%2]
  2339                              <1> 	mov word [bp+2], ax
  2340                              <1> 	mov byte al, %3
  2341                              <1> 	mov byte [bp+4], al 
  2342                              <1> 	call proc_shl32
  2343                              <1> 	mov ax,sp
  2344                              <1> 	mov bp,ax
  2345                              <1> 	mov ax,%1
  2346                              <1> 	mov ds,ax
  2347                              <1> 	mov ax,[bp+0]
  2348                              <1> 	mov word [%2+2],ax
  2349                              <1> 	mov ax,[bp+2]
  2350                              <1> 	mov word [%2],ax
  2351                              <1> 	stkclose 5
  2352                              <1> %endmacro
  2353                              <1> 
  2354                              <1> 
  2355                              <1> %macro shr32 2
  2356                              <1> 	shr32 cs, %1, %2
  2357                              <1> %endmacro	
  2358                              <1> 	
  2359                              <1> %macro shr32 3
  2360                              <1> 	stkopen 5
  2361                              <1> 	mov ax,%1
  2362                              <1> 	mov ds,ax
  2363                              <1> 	mov word ax,[%2+2]
  2364                              <1> 	mov word [bp+0], ax
  2365                              <1> 	mov word ax,[%2]
  2366                              <1> 	mov word [bp+2], ax
  2367                              <1> 	mov byte al, %3
  2368                              <1> 	mov byte [bp+4], al 
  2369                              <1> 	call proc_shr32
  2370                              <1> 	mov ax,sp
  2371                              <1> 	mov bp,ax
  2372                              <1> 	mov ax,%1
  2373                              <1> 	mov ds,ax
  2374                              <1> 	mov ax,[bp+0]
  2375                              <1> 	mov word [%2+2],ax
  2376                              <1> 	mov ax,[bp+2]
  2377                              <1> 	mov word [%2],ax
  2378                              <1> 	stkclose 5
  2379                              <1> %endmacro
  2380                              <1> 	
  2381                              <1> %endif
  2382                                  		
  2383                                  section .data
  2384 0000086F ED90F87D                	n1: dd 0x7df890ed
  2385 00000873 7C9F3000                	n2: dd 0x00309f7C
  2386 00000877 00000000                	n3: dd 0
  2387 0000087B 00000000                	n4: dd 0
  2388 0000087F 00                      	err: db 0		
  2389                                  		
  2390                                  section .text
  2391                                  	global _start
  2392                                  	
  2393                                  _start:		
  2394                                  	prtstk
  2395                              <1>  printf "stack ---> "
  2396                              <2>  %rep %0
  2397                              <2>  __printf %1
  2398                              <2>  %rotate 1
  2399                              <2>  %endrep
  2400                              <3>  __printf %1
  2401                              <4>  section .data
  2402 00000880 737461636B202D2D2D- <4>  %%str: db %1,0
  2403 00000889 3E2000              <4>
  2404                              <4>  section .text
  2405                              <4>  prtstr cs, %%str
  2406                              <5>  stkopen 4
  2407 00000000 83EC04              <6>  sub word sp, %1
  2408 00000003 54                  <6>  push sp
  2409 00000004 5D                  <6>  pop bp
  2410 00000005 8C4E00              <5>  mov word [bp], %1
  2411 00000008 C74602[8008]        <5>  mov word [bp+2], %2
  2412 0000000D E8(2804)            <5>  call proc_prtstr
  2413                              <5>  stkclose 4
  2414 00000010 83C404              <6>  add word sp, %1
  2415                              <3>  %rotate 1
  2416 00000013 89E0                <1>  mov ax,sp
  2417                              <1>  prthex16 ax
  2418                              <2>  stkopen 3
  2419 00000015 83EC03              <3>  sub word sp, %1
  2420 00000018 54                  <3>  push sp
  2421 00000019 5D                  <3>  pop bp
  2422 0000001A 894600              <2>  mov word [bp], %1
  2423 0000001D C6460201            <2>  mov byte [bp+2], TRUE
  2424 00000021 E8(2C03)            <2>  call proc_prthex16
  2425                              <2>  stkclose 3
  2426 00000024 83C403              <3>  add word sp, %1
  2427                                  	prtln
  2428                              <1>  __prtln
  2429 00000027 E8(5C04)            <2>  call proc_prtln
  2430                                  	prtln
  2431                              <1>  __prtln
  2432 0000002A E8(5C04)            <2>  call proc_prtln
  2433                                  		
  2434                                  	div32 n1, n2, n3, n4, err
  2435                              <1>  div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2436                              <2>  stkopen 0x11
  2437 0000002D 83EC11              <3>  sub word sp, %1
  2438 00000030 54                  <3>  push sp
  2439 00000031 5D                  <3>  pop bp
  2440 00000032 8CC8                <2>  mov ax,%1
  2441 00000034 8ED8                <2>  mov ds,ax
  2442 00000036 A1[7108]            <2>  mov ax,[%2+2]
  2443 00000039 894600              <2>  mov word [bp+0], ax
  2444 0000003C A1[6F08]            <2>  mov ax,[%2]
  2445 0000003F 894602              <2>  mov word [bp+2], ax
  2446 00000042 8CC8                <2>  mov ax,%3
  2447 00000044 8ED8                <2>  mov ds,ax
  2448 00000046 A1[7508]            <2>  mov ax,[%4+2]
  2449 00000049 894604              <2>  mov word [bp+4], ax
  2450 0000004C A1[7308]            <2>  mov ax,[%4]
  2451 0000004F 894606              <2>  mov word [bp+6], ax
  2452 00000052 E8(6B04)            <2>  call proc_div32
  2453 00000055 89E0                <2>  mov ax,sp
  2454 00000057 89C5                <2>  mov bp,ax
  2455 00000059 8CC8                <2>  mov ax,%5
  2456 0000005B 8ED8                <2>  mov ds,ax
  2457 0000005D 8B4608              <2>  mov word ax, [bp+8]
  2458 00000060 A3[7908]            <2>  mov word [%6+2], ax
  2459 00000063 8B460A              <2>  mov word ax, [bp+0x0A]
  2460 00000066 A3[7708]            <2>  mov word [%6], ax
  2461 00000069 8CC8                <2>  mov ax,%7
  2462 0000006B 8ED8                <2>  mov ds,ax
  2463 0000006D 8B460C              <2>  mov word ax,[bp+0x0C]
  2464 00000070 A3[7D08]            <2>  mov word [%8+2],ax
  2465 00000073 8B460E              <2>  mov word ax,[bp+0x0E]
  2466 00000076 A3[7B08]            <2>  mov word [%8],ax
  2467 00000079 8CC8                <2>  mov ax,%9
  2468 0000007B 8ED8                <2>  mov ds,ax
  2469 0000007D 8A4610              <2>  mov byte al,[bp+0x10]
  2470 00000080 A2[7F08]            <2>  mov byte [%10],al
  2471                              <2>  stkclose 0x11
  2472 00000083 83C411              <3>  add word sp, %1
  2473                                  	
  2474                                  	prtbin32 n1
  2475                              <1>  prtbin32 cs, %1
  2476 00000086 8CC8                <2>  mov ax,%1
  2477 00000088 8ED8                <2>  mov ds,ax
  2478 0000008A A1[7108]            <2>  mov word ax,[%2+2]
  2479                              <2>  prtbin16 ax
  2480                              <3>  stkopen 3
  2481 0000008D 83EC03              <4>  sub word sp, %1
  2482 00000090 54                  <4>  push sp
  2483 00000091 5D                  <4>  pop bp
  2484 00000092 894600              <3>  mov word [bp], %1
  2485 00000095 C6460201            <3>  mov byte [bp+2], TRUE
  2486 00000099 E8(C901)            <3>  call proc_prtbin16
  2487                              <3>  stkclose 3
  2488 0000009C 83C403              <4>  add word sp, %1
  2489                              <2>  prtch 20h
  2490                              <3>  __prtch %1
  2491                              <4>  stkopen 1
  2492 0000009F 83EC01              <5>  sub word sp, %1
  2493 000000A2 54                  <5>  push sp
  2494 000000A3 5D                  <5>  pop bp
  2495 000000A4 C6460020            <4>  mov byte [ bp ], %1
  2496 000000A8 E8(4E04)            <4>  call proc_prtch
  2497                              <4>  stkclose 1
  2498 000000AB 83C401              <5>  add word sp, %1
  2499 000000AE 8CC8                <2>  mov ax,%1
  2500 000000B0 8ED8                <2>  mov ds,ax
  2501 000000B2 A1[6F08]            <2>  mov word ax,[%2]
  2502                              <2>  prtbin16 ax
  2503                              <3>  stkopen 3
  2504 000000B5 83EC03              <4>  sub word sp, %1
  2505 000000B8 54                  <4>  push sp
  2506 000000B9 5D                  <4>  pop bp
  2507 000000BA 894600              <3>  mov word [bp], %1
  2508 000000BD C6460201            <3>  mov byte [bp+2], TRUE
  2509 000000C1 E8(C901)            <3>  call proc_prtbin16
  2510                              <3>  stkclose 3
  2511 000000C4 83C403              <4>  add word sp, %1
  2512                                  	prtln
  2513                              <1>  __prtln
  2514 000000C7 E8(5C04)            <2>  call proc_prtln
  2515                                  	prtbin32 n2
  2516                              <1>  prtbin32 cs, %1
  2517 000000CA 8CC8                <2>  mov ax,%1
  2518 000000CC 8ED8                <2>  mov ds,ax
  2519 000000CE A1[7508]            <2>  mov word ax,[%2+2]
  2520                              <2>  prtbin16 ax
  2521                              <3>  stkopen 3
  2522 000000D1 83EC03              <4>  sub word sp, %1
  2523 000000D4 54                  <4>  push sp
  2524 000000D5 5D                  <4>  pop bp
  2525 000000D6 894600              <3>  mov word [bp], %1
  2526 000000D9 C6460201            <3>  mov byte [bp+2], TRUE
  2527 000000DD E8(C901)            <3>  call proc_prtbin16
  2528                              <3>  stkclose 3
  2529 000000E0 83C403              <4>  add word sp, %1
  2530                              <2>  prtch 20h
  2531                              <3>  __prtch %1
  2532                              <4>  stkopen 1
  2533 000000E3 83EC01              <5>  sub word sp, %1
  2534 000000E6 54                  <5>  push sp
  2535 000000E7 5D                  <5>  pop bp
  2536 000000E8 C6460020            <4>  mov byte [ bp ], %1
  2537 000000EC E8(4E04)            <4>  call proc_prtch
  2538                              <4>  stkclose 1
  2539 000000EF 83C401              <5>  add word sp, %1
  2540 000000F2 8CC8                <2>  mov ax,%1
  2541 000000F4 8ED8                <2>  mov ds,ax
  2542 000000F6 A1[7308]            <2>  mov word ax,[%2]
  2543                              <2>  prtbin16 ax
  2544                              <3>  stkopen 3
  2545 000000F9 83EC03              <4>  sub word sp, %1
  2546 000000FC 54                  <4>  push sp
  2547 000000FD 5D                  <4>  pop bp
  2548 000000FE 894600              <3>  mov word [bp], %1
  2549 00000101 C6460201            <3>  mov byte [bp+2], TRUE
  2550 00000105 E8(C901)            <3>  call proc_prtbin16
  2551                              <3>  stkclose 3
  2552 00000108 83C403              <4>  add word sp, %1
  2553                                  	prtln
  2554                              <1>  __prtln
  2555 0000010B E8(5C04)            <2>  call proc_prtln
  2556                                  	prtbin32 n3	
  2557                              <1>  prtbin32 cs, %1
  2558 0000010E 8CC8                <2>  mov ax,%1
  2559 00000110 8ED8                <2>  mov ds,ax
  2560 00000112 A1[7908]            <2>  mov word ax,[%2+2]
  2561                              <2>  prtbin16 ax
  2562                              <3>  stkopen 3
  2563 00000115 83EC03              <4>  sub word sp, %1
  2564 00000118 54                  <4>  push sp
  2565 00000119 5D                  <4>  pop bp
  2566 0000011A 894600              <3>  mov word [bp], %1
  2567 0000011D C6460201            <3>  mov byte [bp+2], TRUE
  2568 00000121 E8(C901)            <3>  call proc_prtbin16
  2569                              <3>  stkclose 3
  2570 00000124 83C403              <4>  add word sp, %1
  2571                              <2>  prtch 20h
  2572                              <3>  __prtch %1
  2573                              <4>  stkopen 1
  2574 00000127 83EC01              <5>  sub word sp, %1
  2575 0000012A 54                  <5>  push sp
  2576 0000012B 5D                  <5>  pop bp
  2577 0000012C C6460020            <4>  mov byte [ bp ], %1
  2578 00000130 E8(4E04)            <4>  call proc_prtch
  2579                              <4>  stkclose 1
  2580 00000133 83C401              <5>  add word sp, %1
  2581 00000136 8CC8                <2>  mov ax,%1
  2582 00000138 8ED8                <2>  mov ds,ax
  2583 0000013A A1[7708]            <2>  mov word ax,[%2]
  2584                              <2>  prtbin16 ax
  2585                              <3>  stkopen 3
  2586 0000013D 83EC03              <4>  sub word sp, %1
  2587 00000140 54                  <4>  push sp
  2588 00000141 5D                  <4>  pop bp
  2589 00000142 894600              <3>  mov word [bp], %1
  2590 00000145 C6460201            <3>  mov byte [bp+2], TRUE
  2591 00000149 E8(C901)            <3>  call proc_prtbin16
  2592                              <3>  stkclose 3
  2593 0000014C 83C403              <4>  add word sp, %1
  2594                                  	prtch 20h
  2595                              <1>  __prtch %1
  2596                              <2>  stkopen 1
  2597 0000014F 83EC01              <3>  sub word sp, %1
  2598 00000152 54                  <3>  push sp
  2599 00000153 5D                  <3>  pop bp
  2600 00000154 C6460020            <2>  mov byte [ bp ], %1
  2601 00000158 E8(4E04)            <2>  call proc_prtch
  2602                              <2>  stkclose 1
  2603 0000015B 83C401              <3>  add word sp, %1
  2604                                  	prtbin32 n4
  2605                              <1>  prtbin32 cs, %1
  2606 0000015E 8CC8                <2>  mov ax,%1
  2607 00000160 8ED8                <2>  mov ds,ax
  2608 00000162 A1[7D08]            <2>  mov word ax,[%2+2]
  2609                              <2>  prtbin16 ax
  2610                              <3>  stkopen 3
  2611 00000165 83EC03              <4>  sub word sp, %1
  2612 00000168 54                  <4>  push sp
  2613 00000169 5D                  <4>  pop bp
  2614 0000016A 894600              <3>  mov word [bp], %1
  2615 0000016D C6460201            <3>  mov byte [bp+2], TRUE
  2616 00000171 E8(C901)            <3>  call proc_prtbin16
  2617                              <3>  stkclose 3
  2618 00000174 83C403              <4>  add word sp, %1
  2619                              <2>  prtch 20h
  2620                              <3>  __prtch %1
  2621                              <4>  stkopen 1
  2622 00000177 83EC01              <5>  sub word sp, %1
  2623 0000017A 54                  <5>  push sp
  2624 0000017B 5D                  <5>  pop bp
  2625 0000017C C6460020            <4>  mov byte [ bp ], %1
  2626 00000180 E8(4E04)            <4>  call proc_prtch
  2627                              <4>  stkclose 1
  2628 00000183 83C401              <5>  add word sp, %1
  2629 00000186 8CC8                <2>  mov ax,%1
  2630 00000188 8ED8                <2>  mov ds,ax
  2631 0000018A A1[7B08]            <2>  mov word ax,[%2]
  2632                              <2>  prtbin16 ax
  2633                              <3>  stkopen 3
  2634 0000018D 83EC03              <4>  sub word sp, %1
  2635 00000190 54                  <4>  push sp
  2636 00000191 5D                  <4>  pop bp
  2637 00000192 894600              <3>  mov word [bp], %1
  2638 00000195 C6460201            <3>  mov byte [bp+2], TRUE
  2639 00000199 E8(C901)            <3>  call proc_prtbin16
  2640                              <3>  stkclose 3
  2641 0000019C 83C403              <4>  add word sp, %1
  2642                                  	prtln
  2643                              <1>  __prtln
  2644 0000019F E8(5C04)            <2>  call proc_prtln
  2645                                  	prtln
  2646                              <1>  __prtln
  2647 000001A2 E8(5C04)            <2>  call proc_prtln
  2648                                  	
  2649                                  	prthex32 n1
  2650                              <1>  prthex32 cs, %1
  2651 000001A5 8CC8                <2>  mov ax,%1
  2652 000001A7 8ED8                <2>  mov ds,ax
  2653 000001A9 A1[7108]            <2>  mov word ax,[%2+2]
  2654                              <2>  prthex16 ax
  2655                              <3>  stkopen 3
  2656 000001AC 83EC03              <4>  sub word sp, %1
  2657 000001AF 54                  <4>  push sp
  2658 000001B0 5D                  <4>  pop bp
  2659 000001B1 894600              <3>  mov word [bp], %1
  2660 000001B4 C6460201            <3>  mov byte [bp+2], TRUE
  2661 000001B8 E8(2C03)            <3>  call proc_prthex16
  2662                              <3>  stkclose 3
  2663 000001BB 83C403              <4>  add word sp, %1
  2664 000001BE 8CC8                <2>  mov ax,%1
  2665 000001C0 8ED8                <2>  mov ds,ax
  2666 000001C2 A1[6F08]            <2>  mov word ax,[%2]
  2667                              <2>  prthex16 ax
  2668                              <3>  stkopen 3
  2669 000001C5 83EC03              <4>  sub word sp, %1
  2670 000001C8 54                  <4>  push sp
  2671 000001C9 5D                  <4>  pop bp
  2672 000001CA 894600              <3>  mov word [bp], %1
  2673 000001CD C6460201            <3>  mov byte [bp+2], TRUE
  2674 000001D1 E8(2C03)            <3>  call proc_prthex16
  2675                              <3>  stkclose 3
  2676 000001D4 83C403              <4>  add word sp, %1
  2677                                  	prtln
  2678                              <1>  __prtln
  2679 000001D7 E8(5C04)            <2>  call proc_prtln
  2680                                  	prthex32 n2
  2681                              <1>  prthex32 cs, %1
  2682 000001DA 8CC8                <2>  mov ax,%1
  2683 000001DC 8ED8                <2>  mov ds,ax
  2684 000001DE A1[7508]            <2>  mov word ax,[%2+2]
  2685                              <2>  prthex16 ax
  2686                              <3>  stkopen 3
  2687 000001E1 83EC03              <4>  sub word sp, %1
  2688 000001E4 54                  <4>  push sp
  2689 000001E5 5D                  <4>  pop bp
  2690 000001E6 894600              <3>  mov word [bp], %1
  2691 000001E9 C6460201            <3>  mov byte [bp+2], TRUE
  2692 000001ED E8(2C03)            <3>  call proc_prthex16
  2693                              <3>  stkclose 3
  2694 000001F0 83C403              <4>  add word sp, %1
  2695 000001F3 8CC8                <2>  mov ax,%1
  2696 000001F5 8ED8                <2>  mov ds,ax
  2697 000001F7 A1[7308]            <2>  mov word ax,[%2]
  2698                              <2>  prthex16 ax
  2699                              <3>  stkopen 3
  2700 000001FA 83EC03              <4>  sub word sp, %1
  2701 000001FD 54                  <4>  push sp
  2702 000001FE 5D                  <4>  pop bp
  2703 000001FF 894600              <3>  mov word [bp], %1
  2704 00000202 C6460201            <3>  mov byte [bp+2], TRUE
  2705 00000206 E8(2C03)            <3>  call proc_prthex16
  2706                              <3>  stkclose 3
  2707 00000209 83C403              <4>  add word sp, %1
  2708                                  	prtln
  2709                              <1>  __prtln
  2710 0000020C E8(5C04)            <2>  call proc_prtln
  2711                                  	prthex32 n3	
  2712                              <1>  prthex32 cs, %1
  2713 0000020F 8CC8                <2>  mov ax,%1
  2714 00000211 8ED8                <2>  mov ds,ax
  2715 00000213 A1[7908]            <2>  mov word ax,[%2+2]
  2716                              <2>  prthex16 ax
  2717                              <3>  stkopen 3
  2718 00000216 83EC03              <4>  sub word sp, %1
  2719 00000219 54                  <4>  push sp
  2720 0000021A 5D                  <4>  pop bp
  2721 0000021B 894600              <3>  mov word [bp], %1
  2722 0000021E C6460201            <3>  mov byte [bp+2], TRUE
  2723 00000222 E8(2C03)            <3>  call proc_prthex16
  2724                              <3>  stkclose 3
  2725 00000225 83C403              <4>  add word sp, %1
  2726 00000228 8CC8                <2>  mov ax,%1
  2727 0000022A 8ED8                <2>  mov ds,ax
  2728 0000022C A1[7708]            <2>  mov word ax,[%2]
  2729                              <2>  prthex16 ax
  2730                              <3>  stkopen 3
  2731 0000022F 83EC03              <4>  sub word sp, %1
  2732 00000232 54                  <4>  push sp
  2733 00000233 5D                  <4>  pop bp
  2734 00000234 894600              <3>  mov word [bp], %1
  2735 00000237 C6460201            <3>  mov byte [bp+2], TRUE
  2736 0000023B E8(2C03)            <3>  call proc_prthex16
  2737                              <3>  stkclose 3
  2738 0000023E 83C403              <4>  add word sp, %1
  2739                                  	prtch 20h
  2740                              <1>  __prtch %1
  2741                              <2>  stkopen 1
  2742 00000241 83EC01              <3>  sub word sp, %1
  2743 00000244 54                  <3>  push sp
  2744 00000245 5D                  <3>  pop bp
  2745 00000246 C6460020            <2>  mov byte [ bp ], %1
  2746 0000024A E8(4E04)            <2>  call proc_prtch
  2747                              <2>  stkclose 1
  2748 0000024D 83C401              <3>  add word sp, %1
  2749                                  	prthex32 n4
  2750                              <1>  prthex32 cs, %1
  2751 00000250 8CC8                <2>  mov ax,%1
  2752 00000252 8ED8                <2>  mov ds,ax
  2753 00000254 A1[7D08]            <2>  mov word ax,[%2+2]
  2754                              <2>  prthex16 ax
  2755                              <3>  stkopen 3
  2756 00000257 83EC03              <4>  sub word sp, %1
  2757 0000025A 54                  <4>  push sp
  2758 0000025B 5D                  <4>  pop bp
  2759 0000025C 894600              <3>  mov word [bp], %1
  2760 0000025F C6460201            <3>  mov byte [bp+2], TRUE
  2761 00000263 E8(2C03)            <3>  call proc_prthex16
  2762                              <3>  stkclose 3
  2763 00000266 83C403              <4>  add word sp, %1
  2764 00000269 8CC8                <2>  mov ax,%1
  2765 0000026B 8ED8                <2>  mov ds,ax
  2766 0000026D A1[7B08]            <2>  mov word ax,[%2]
  2767                              <2>  prthex16 ax
  2768                              <3>  stkopen 3
  2769 00000270 83EC03              <4>  sub word sp, %1
  2770 00000273 54                  <4>  push sp
  2771 00000274 5D                  <4>  pop bp
  2772 00000275 894600              <3>  mov word [bp], %1
  2773 00000278 C6460201            <3>  mov byte [bp+2], TRUE
  2774 0000027C E8(2C03)            <3>  call proc_prthex16
  2775                              <3>  stkclose 3
  2776 0000027F 83C403              <4>  add word sp, %1
  2777                                  	prtln
  2778                              <1>  __prtln
  2779 00000282 E8(5C04)            <2>  call proc_prtln
  2780 00000285 8CC8                    	mov ax,cs
  2781 00000287 8ED8                    	mov ds,ax
  2782 00000289 A0[7F08]                	mov al,[err]
  2783                                  	prthex8 al			
  2784                              <1>  stkopen 2
  2785 0000028C 83EC02              <2>  sub word sp, %1
  2786 0000028F 54                  <2>  push sp
  2787 00000290 5D                  <2>  pop bp
  2788 00000291 884600              <1>  mov byte [bp], %1
  2789 00000294 C6460101            <1>  mov byte [bp+1], TRUE
  2790 00000298 E8(8C03)            <1>  call proc_prthex8
  2791                              <1>  stkclose 2
  2792 0000029B 83C402              <2>  add word sp, %1
  2793                                  		
  2794                                  	prtln
  2795                              <1>  __prtln
  2796 0000029E E8(5C04)            <2>  call proc_prtln
  2797                                  	prtln
  2798                              <1>  __prtln
  2799 000002A1 E8(5C04)            <2>  call proc_prtln
  2800                                  	prtstk			
  2801                              <1>  printf "stack ---> "
  2802                              <2>  %rep %0
  2803                              <2>  __printf %1
  2804                              <2>  %rotate 1
  2805                              <2>  %endrep
  2806                              <3>  __printf %1
  2807                              <4>  section .data
  2808 0000088C 737461636B202D2D2D- <4>  %%str: db %1,0
  2809 00000895 3E2000              <4>
  2810                              <4>  section .text
  2811                              <4>  prtstr cs, %%str
  2812                              <5>  stkopen 4
  2813 000002A4 83EC04              <6>  sub word sp, %1
  2814 000002A7 54                  <6>  push sp
  2815 000002A8 5D                  <6>  pop bp
  2816 000002A9 8C4E00              <5>  mov word [bp], %1
  2817 000002AC C74602[8C08]        <5>  mov word [bp+2], %2
  2818 000002B1 E8(2804)            <5>  call proc_prtstr
  2819                              <5>  stkclose 4
  2820 000002B4 83C404              <6>  add word sp, %1
  2821                              <3>  %rotate 1
  2822 000002B7 89E0                <1>  mov ax,sp
  2823                              <1>  prthex16 ax
  2824                              <2>  stkopen 3
  2825 000002B9 83EC03              <3>  sub word sp, %1
  2826 000002BC 54                  <3>  push sp
  2827 000002BD 5D                  <3>  pop bp
  2828 000002BE 894600              <2>  mov word [bp], %1
  2829 000002C1 C6460201            <2>  mov byte [bp+2], TRUE
  2830 000002C5 E8(2C03)            <2>  call proc_prthex16
  2831                              <2>  stkclose 3
  2832 000002C8 83C403              <3>  add word sp, %1
  2833                                  	
  2834 000002CB EBFE                    	jmp $		

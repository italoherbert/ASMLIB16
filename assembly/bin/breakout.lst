     1                                  %include "lib/gmode/g0x13.mac"
     2                              <1> 
     3                              <1> %ifndef G0x13_MAC
     4                              <1> 	%define G0x13_MAC	
     5                              <1> 	
     6                              <1> 	%include "lib/gmode/g0x13.asm"	
     7                              <2> 
     8                              <2> %ifndef G0x13_ASM
     9                              <2> 	%define G0x13_ASM
    10                              <2> 
    11                              <2> 	%include "lib/system.mac"
    12                              <3>  
    13                              <3> %ifndef SYSTEM_MAC
    14                              <3>  	%define SYSTEM_MAC
    15                              <3>  	
    16                              <3> 	%ifndef TRUE
    17                              <3> 		%define TRUE 01h
    18                              <3> 	%endif
    19                              <3> 	%ifndef FALSE
    20                              <3> 		%define FALSE 00h
    21                              <3> 	%endif
    22                              <3> 	
    23                              <3> %macro vlodsb 3
    24                              <3> 	vlodsb cs, %1, %2, %3
    25                              <3> %endmacro
    26                              <3> 
    27                              <3> %macro vstosb 3
    28                              <3> 	vstosb cs, %1, %2, %3
    29                              <3> %endmacro
    30                              <3> 	 	
    31                              <3> %macro int16toreg 2
    32                              <3> 	int16toreg cs, %1, %2
    33                              <3> %endmacro
    34                              <3> 
    35                              <3> %macro regtoint16 2
    36                              <3> 	regtoint16 %1, cs, %2
    37                              <3> %endmacro
    38                              <3> 
    39                              <3> %macro vstosb 4
    40                              <3> 	push %1
    41                              <3> 	pop ds
    42                              <3> 	mov si,%2
    43                              <3> 	add si,%3
    44                              <3> 	mov byte [si],%4	
    45                              <3> %endmacro
    46                              <3> 
    47                              <3> %macro vlodsb 4
    48                              <3> 	push %1
    49                              <3> 	pop ds
    50                              <3> 	mov si,%2
    51                              <3> 	add si,%3
    52                              <3> 	mov byte %4,[si]	
    53                              <3> %endmacro 	 
    54                              <3> 
    55                              <3> %macro int16toreg 3
    56                              <3> 	push %2
    57                              <3> 	push %1
    58                              <3> 	pop ds
    59                              <3> 	pop si
    60                              <3> 	mov word %3,[si]	
    61                              <3> %endmacro
    62                              <3> 
    63                              <3> %macro regtoint16 3
    64                              <3> 	push %3
    65                              <3> 	push %2
    66                              <3> 	pop ds
    67                              <3> 	pop si
    68                              <3> 	mov word [si],%1	
    69                              <3> %endmacro
    70                              <3> 
    71                              <3> %macro mov32 2
    72                              <3> 	mov32 cs, %1, cs, %2
    73                              <3> %endmacro
    74                              <3> 
    75                              <3> %macro mov16 2
    76                              <3> 	mov16 cs, %1, cs, %2
    77                              <3> %endmacro
    78                              <3> 
    79                              <3> %macro mov32 4
    80                              <3> 	mov ax,%3
    81                              <3> 	mov ds,ax
    82                              <3> 	mov cx,[%4+2]
    83                              <3> 	mov dx,[%4]
    84                              <3> 	mov ax,%1
    85                              <3> 	mov ds,ax
    86                              <3> 	mov [%2+2],cx
    87                              <3> 	mov [%2],dx
    88                              <3> %endmacro
    89                              <3> 
    90                              <3> %macro mov16 4
    91                              <3> 	mov ax,%3
    92                              <3> 	mov ds,ax
    93                              <3> 	mov bx,[%4]
    94                              <3> 	mov ax,%1
    95                              <3> 	mov ds,ax
    96                              <3> 	mov [%2],bx
    97                              <3> %endmacro
    98                              <3>  	 	
    99                              <3> %macro mformat 4
   100                              <3> 	stkopen 8
   101                              <3> 	mov word [ bp + 0 ], %1
   102                              <3> 	mov word [ bp + 2 ], %2
   103                              <3> 	mov word [ bp + 4 ], %3
   104                              <3> 	mov word [ bp + 6 ], %4
   105                              <3> 	call kernel_segment:mformat
   106                              <3> 	stkclose 8
   107                              <3> %endmacro
   108                              <3> 
   109                              <3> %macro malloc 6
   110                              <3> 	stkopen 0Bh
   111                              <3> 	mov word [ bp + 4 ], %3
   112                              <3> 	mov word [ bp + 6 ], %4
   113                              <3> 	mov word [ bp + 8 ], %5	
   114                              <3> 	call kernel_segment:malloc
   115                              <3> 	push sp
   116                              <3> 	pop bp
   117                              <3> 	mov word %1, [ bp ]
   118                              <3> 	mov word %2, [ bp + 2 ]
   119                              <3> 	mov byte %6, [ bp + 0x0A ]
   120                              <3> 	stkclose 0Bh
   121                              <3> %endmacro 	
   122                              <3> 
   123                              <3> %macro laddr 2
   124                              <3> 	laddr %1, %2, %1, %2
   125                              <3> %endmacro
   126                              <3> 
   127                              <3> %macro faddr 2
   128                              <3> 	faddr %1, %2, %1, %2
   129                              <3> %endmacro
   130                              <3>  	
   131                              <3> %macro laddr 4
   132                              <3> 	stkopen 8
   133                              <3> 	mov word [ bp + 4 ], %3
   134                              <3> 	mov word [ bp + 6 ], %4	
   135                              <3> 	call kernel_segment:laddr
   136                              <3> 	push sp
   137                              <3> 	pop bp
   138                              <3> 	mov word %1, [ bp + 0 ]
   139                              <3> 	mov word %2, [ bp + 2 ]	
   140                              <3> 	stkclose 8
   141                              <3> %endmacro
   142                              <3> 
   143                              <3> %macro faddr 4
   144                              <3> 	stkopen 8
   145                              <3> 	mov word [ bp + 4 ], %3
   146                              <3> 	mov word [ bp + 6 ], %4	
   147                              <3> 	call kernel_segment:faddr
   148                              <3> 	push sp
   149                              <3> 	pop bp
   150                              <3> 	mov word %1, [ bp + 0 ]
   151                              <3> 	mov word %2, [ bp + 2 ]	
   152                              <3> 	stkclose 8
   153                              <3> %endmacro	
   154                              <3>  
   155                              <3> 
   156                              <3> %macro stkopen 1		
   157                              <3> 	sub word sp, %1
   158                              <3> 	push sp
   159                              <3> 	pop bp
   160                              <3> %endmacro
   161                              <3> 
   162                              <3> %macro stkclose 1
   163                              <3> 	add word sp, %1
   164                              <3> %endmacro
   165                              <3> 
   166                              <3> %macro stkload 1-* 	
   167                              <3>  	%rep %0
   168                              <3>  	 	%rotate -1
   169                              <3>  		pop %1
   170                              <3>  	%endrep
   171                              <3>  	%rep %0
   172                              <3>  		push %1
   173                              <3>  		%rotate 1
   174                              <3>  	%endrep
   175                              <3> %endmacro
   176                              <3> 
   177                              <3> %macro stkpush 1-* 	
   178                              <3>  	%rep %0
   179                              <3>  		push %1
   180                              <3>  		%rotate 1
   181                              <3>  	%endrep 	
   182                              <3> %endmacro
   183                              <3>  
   184                              <3> %macro stkpop 1-*
   185                              <3>  	%rep %0
   186                              <3>  	 	%rotate -1
   187                              <3>  		pop %1
   188                              <3>  	%endrep 	 	
   189                              <3> %endmacro
   190                              <3> 
   191                              <3> %macro delay 1
   192                              <3> 	delay cs, %1
   193                              <3> %endmacro
   194                              <3> 
   195                              <3> %macro delay 2
   196                              <3> 	mov ax,%1
   197                              <3> 	mov ds,ax
   198                              <3> 	
   199                              <3> 	mov ah,86h
   200                              <3> 	mov cx,[%2+2]
   201                              <3> 	mov dx,[%2]
   202                              <3> 	int 15h	
   203                              <3> %endmacro
   204                              <3> 
   205                              <3> %endif 
   206                              <2> 	
   207                              <2> %macro __width 1
   208                              <2> 	stkopen 0x02
   209                              <2> 	call proc_width
   210                              <2> 	push sp
   211                              <2> 	pop bp
   212                              <2> 	mov word %1, [bp+2]
   213                              <2> 	stkclose 0x02	
   214                              <2> %endmacro
   215                              <2> 
   216                              <2> %macro __height 1
   217                              <2> 	stkopen 0x02
   218                              <2> 	call proc_height
   219                              <2> 	push sp
   220                              <2> 	pop bp
   221                              <2> 	mov word %1, [bp+2]
   222                              <2> 	stkclose 0x02	
   223                              <2> %endmacro
   224                              <2> 
   225                              <2> %macro __setpx 3
   226                              <2> 	stkopen 0x05
   227                              <2> 	mov word [bp+0],%1
   228                              <2> 	mov word [bp+2],%2
   229                              <2> 	mov byte [bp+4],%3
   230                              <2> 	call proc_setpx	
   231                              <2> 	stkclose 0x05
   232                              <2> %endmacro				
   233                              <2> 				
   234                              <2> section .data
   235                              <2> 
   236                              <2> proc_initgraph:
   237 00000000 89E0                <2> 	mov ax,sp
   238 00000002 89C5                <2> 	mov bp,ax
   239                              <2> 	
   240 00000004 B400                <2> 	mov ah,00h
   241 00000006 B013                <2> 	mov al,13h
   242 00000008 CD10                <2> 	int 10h
   243                              <2> 	
   244 0000000A C3                  <2> 	ret
   245                              <2> 	
   246                              <2> proc_closegraph:
   247 0000000B B400                <2> 	mov ah,00h
   248 0000000D B003                <2> 	mov al,03h
   249 0000000F CD10                <2> 	int 10h
   250                              <2> 	
   251 00000011 C3                  <2> 	ret
   252                              <2> 	
   253                              <2> proc_width:
   254 00000012 89E0                <2> 	mov ax,sp
   255 00000014 89C5                <2> 	mov bp,ax
   256 00000016 C746024001          <2> 	mov word [bp+2],320
   257                              <2> 	
   258 0000001B C3                  <2> 	ret	
   259                              <2> 
   260                              <2> proc_height:
   261 0000001C 89E0                <2> 	mov ax,sp
   262 0000001E 89C5                <2> 	mov bp,ax
   263 00000020 C74602C800          <2> 	mov word [bp+2],200
   264                              <2> 			
   265 00000025 C3                  <2> 	ret
   266                              <2> 	
   267                              <2> 
   268                              <2> proc_repaint:
   269 00000026 B80090              <2> 	mov ax,0x9000
   270 00000029 8ED8                <2> 	mov ds,ax
   271 0000002B BE0000              <2> 	mov si,0
   272                              <2> 
   273 0000002E B800A0              <2> 	mov ax,0xA000
   274 00000031 8EC0                <2> 	mov es,ax
   275 00000033 BF0000              <2> 	mov di,0	
   276                              <2> 	
   277 00000036 B90000              <2> 	mov cx,0
   278                              <2> 	.l1:
   279 00000039 81F900FA            <2> 		cmp cx,64000
   280 0000003D 7307                <2> 		jae .l2
   281 0000003F 51                  <2> 		push cx
   282                              <2> 				
   283 00000040 AC                  <2> 		lodsb
   284 00000041 AA                  <2> 		stosb
   285                              <2> 		
   286 00000042 59                  <2> 		pop cx
   287 00000043 41                  <2> 		inc cx
   288 00000044 EBF3                <2> 		jmp .l1
   289                              <2> 	.l2:
   290                              <2> 					
   291 00000046 C3                  <2> 	ret
   292                              <2> 
   293                              <2> proc_setpx:
   294 00000047 89E0                <2> 	mov ax,sp
   295 00000049 89C5                <2> 	mov bp,ax
   296                              <2> 	
   297 0000004B 8B4E02              <2> 	mov cx,[bp+2]
   298 0000004E 8B5604              <2> 	mov dx,[bp+4]
   299 00000051 8B4604              <2> 	mov ax,[bp+4]
   300                              <2> 		
   301 00000054 D1E2                <2> 	shl dx,1		
   302 00000056 C1E003              <2> 	shl ax,3		
   303 00000059 01C2                <2> 	add dx,ax			
   304 0000005B C1E205              <2> 	shl dx,5
   305                              <2> 			 	
   306 0000005E 01D1                <2> 	add cx,dx
   307                              <2> 		
   308 00000060 B80090              <2> 	mov ax,0x9000	
   309 00000063 8ED8                <2> 	mov ds,ax
   310 00000065 89CE                <2> 	mov si,cx
   311 00000067 8A4606              <2> 	mov al,[bp+6]
   312 0000006A 8804                <2> 	mov byte [si],al
   313                              <2> 	
   314 0000006C C3                  <2> 	ret
   315                              <2> 	
   316                              <2> %endif
   317                              <1> 		
   318                              <1> %macro initgraph 0		
   319                              <1> 	call proc_initgraph
   320                              <1> %endmacro
   321                              <1> 
   322                              <1> %macro closegraph 0
   323                              <1> 	call proc_closegraph
   324                              <1> %endmacro
   325                              <1> 
   326                              <1> %macro repaint 0
   327                              <1> 	call proc_repaint
   328                              <1> %endmacro
   329                              <1> 
   330                              <1> %macro width 2
   331                              <1> 	stkopen 0x02
   332                              <1> 	call proc_width
   333                              <1> 	mov ax,sp
   334                              <1> 	mov bp,ax
   335                              <1> 	mov ax,%1
   336                              <1> 	mov ds,ax
   337                              <1> 	mov ax,[bp+2]
   338                              <1> 	mov word [%2],ax	
   339                              <1> 	stkclose 0x02
   340                              <1> %endmacro
   341                              <1> 
   342                              <1> %macro height 2
   343                              <1> 	stkopen 0x02
   344                              <1> 	call proc_height
   345                              <1> 	mov ax,sp
   346                              <1> 	mov bp,ax
   347                              <1> 	mov ax,%1
   348                              <1> 	mov ds,ax
   349                              <1> 	mov ax,[bp+2]
   350                              <1> 	mov word [%2],ax	
   351                              <1> 	stkclose 0x02
   352                              <1> %endmacro		
   353                              <1> 		
   354                              <1> %endif
   355                                  
   356                                  %include "src/lib/game.mac"
   357                              <1> %ifndef GAME_MAC
   358                              <1> 	%define GAME_MAC
   359                              <1> 			
   360                              <1> 	%include "lib/system.mac"
   361                              <2>  
   362                              <2> %ifndef SYSTEM_MAC
   363                              <2>  	%define SYSTEM_MAC
   364                              <2>  	
   365                              <2> 	%ifndef TRUE
   366                              <2> 		%define TRUE 01h
   367                              <2> 	%endif
   368                              <2> 	%ifndef FALSE
   369                              <2> 		%define FALSE 00h
   370                              <2> 	%endif
   371                              <2> 	
   372                              <2> %macro vlodsb 3
   373                              <2> 	vlodsb cs, %1, %2, %3
   374                              <2> %endmacro
   375                              <2> 
   376                              <2> %macro vstosb 3
   377                              <2> 	vstosb cs, %1, %2, %3
   378                              <2> %endmacro
   379                              <2> 	 	
   380                              <2> %macro int16toreg 2
   381                              <2> 	int16toreg cs, %1, %2
   382                              <2> %endmacro
   383                              <2> 
   384                              <2> %macro regtoint16 2
   385                              <2> 	regtoint16 %1, cs, %2
   386                              <2> %endmacro
   387                              <2> 
   388                              <2> %macro vstosb 4
   389                              <2> 	push %1
   390                              <2> 	pop ds
   391                              <2> 	mov si,%2
   392                              <2> 	add si,%3
   393                              <2> 	mov byte [si],%4	
   394                              <2> %endmacro
   395                              <2> 
   396                              <2> %macro vlodsb 4
   397                              <2> 	push %1
   398                              <2> 	pop ds
   399                              <2> 	mov si,%2
   400                              <2> 	add si,%3
   401                              <2> 	mov byte %4,[si]	
   402                              <2> %endmacro 	 
   403                              <2> 
   404                              <2> %macro int16toreg 3
   405                              <2> 	push %2
   406                              <2> 	push %1
   407                              <2> 	pop ds
   408                              <2> 	pop si
   409                              <2> 	mov word %3,[si]	
   410                              <2> %endmacro
   411                              <2> 
   412                              <2> %macro regtoint16 3
   413                              <2> 	push %3
   414                              <2> 	push %2
   415                              <2> 	pop ds
   416                              <2> 	pop si
   417                              <2> 	mov word [si],%1	
   418                              <2> %endmacro
   419                              <2> 
   420                              <2> %macro mov32 2
   421                              <2> 	mov32 cs, %1, cs, %2
   422                              <2> %endmacro
   423                              <2> 
   424                              <2> %macro mov16 2
   425                              <2> 	mov16 cs, %1, cs, %2
   426                              <2> %endmacro
   427                              <2> 
   428                              <2> %macro mov32 4
   429                              <2> 	mov ax,%3
   430                              <2> 	mov ds,ax
   431                              <2> 	mov cx,[%4+2]
   432                              <2> 	mov dx,[%4]
   433                              <2> 	mov ax,%1
   434                              <2> 	mov ds,ax
   435                              <2> 	mov [%2+2],cx
   436                              <2> 	mov [%2],dx
   437                              <2> %endmacro
   438                              <2> 
   439                              <2> %macro mov16 4
   440                              <2> 	mov ax,%3
   441                              <2> 	mov ds,ax
   442                              <2> 	mov bx,[%4]
   443                              <2> 	mov ax,%1
   444                              <2> 	mov ds,ax
   445                              <2> 	mov [%2],bx
   446                              <2> %endmacro
   447                              <2>  	 	
   448                              <2> %macro mformat 4
   449                              <2> 	stkopen 8
   450                              <2> 	mov word [ bp + 0 ], %1
   451                              <2> 	mov word [ bp + 2 ], %2
   452                              <2> 	mov word [ bp + 4 ], %3
   453                              <2> 	mov word [ bp + 6 ], %4
   454                              <2> 	call kernel_segment:mformat
   455                              <2> 	stkclose 8
   456                              <2> %endmacro
   457                              <2> 
   458                              <2> %macro malloc 6
   459                              <2> 	stkopen 0Bh
   460                              <2> 	mov word [ bp + 4 ], %3
   461                              <2> 	mov word [ bp + 6 ], %4
   462                              <2> 	mov word [ bp + 8 ], %5	
   463                              <2> 	call kernel_segment:malloc
   464                              <2> 	push sp
   465                              <2> 	pop bp
   466                              <2> 	mov word %1, [ bp ]
   467                              <2> 	mov word %2, [ bp + 2 ]
   468                              <2> 	mov byte %6, [ bp + 0x0A ]
   469                              <2> 	stkclose 0Bh
   470                              <2> %endmacro 	
   471                              <2> 
   472                              <2> %macro laddr 2
   473                              <2> 	laddr %1, %2, %1, %2
   474                              <2> %endmacro
   475                              <2> 
   476                              <2> %macro faddr 2
   477                              <2> 	faddr %1, %2, %1, %2
   478                              <2> %endmacro
   479                              <2>  	
   480                              <2> %macro laddr 4
   481                              <2> 	stkopen 8
   482                              <2> 	mov word [ bp + 4 ], %3
   483                              <2> 	mov word [ bp + 6 ], %4	
   484                              <2> 	call kernel_segment:laddr
   485                              <2> 	push sp
   486                              <2> 	pop bp
   487                              <2> 	mov word %1, [ bp + 0 ]
   488                              <2> 	mov word %2, [ bp + 2 ]	
   489                              <2> 	stkclose 8
   490                              <2> %endmacro
   491                              <2> 
   492                              <2> %macro faddr 4
   493                              <2> 	stkopen 8
   494                              <2> 	mov word [ bp + 4 ], %3
   495                              <2> 	mov word [ bp + 6 ], %4	
   496                              <2> 	call kernel_segment:faddr
   497                              <2> 	push sp
   498                              <2> 	pop bp
   499                              <2> 	mov word %1, [ bp + 0 ]
   500                              <2> 	mov word %2, [ bp + 2 ]	
   501                              <2> 	stkclose 8
   502                              <2> %endmacro	
   503                              <2>  
   504                              <2> 
   505                              <2> %macro stkopen 1		
   506                              <2> 	sub word sp, %1
   507                              <2> 	push sp
   508                              <2> 	pop bp
   509                              <2> %endmacro
   510                              <2> 
   511                              <2> %macro stkclose 1
   512                              <2> 	add word sp, %1
   513                              <2> %endmacro
   514                              <2> 
   515                              <2> %macro stkload 1-* 	
   516                              <2>  	%rep %0
   517                              <2>  	 	%rotate -1
   518                              <2>  		pop %1
   519                              <2>  	%endrep
   520                              <2>  	%rep %0
   521                              <2>  		push %1
   522                              <2>  		%rotate 1
   523                              <2>  	%endrep
   524                              <2> %endmacro
   525                              <2> 
   526                              <2> %macro stkpush 1-* 	
   527                              <2>  	%rep %0
   528                              <2>  		push %1
   529                              <2>  		%rotate 1
   530                              <2>  	%endrep 	
   531                              <2> %endmacro
   532                              <2>  
   533                              <2> %macro stkpop 1-*
   534                              <2>  	%rep %0
   535                              <2>  	 	%rotate -1
   536                              <2>  		pop %1
   537                              <2>  	%endrep 	 	
   538                              <2> %endmacro
   539                              <2> 
   540                              <2> %macro delay 1
   541                              <2> 	delay cs, %1
   542                              <2> %endmacro
   543                              <2> 
   544                              <2> %macro delay 2
   545                              <2> 	mov ax,%1
   546                              <2> 	mov ds,ax
   547                              <2> 	
   548                              <2> 	mov ah,86h
   549                              <2> 	mov cx,[%2+2]
   550                              <2> 	mov dx,[%2]
   551                              <2> 	int 15h	
   552                              <2> %endmacro
   553                              <2> 
   554                              <2> %endif 
   555                              <1> 	%include "lib/math.mac"
   556                              <2> 
   557                              <2> %ifndef MATH_MAC
   558                              <2> 	%define MATH_MAC
   559                              <2> 	
   560                              <2> 	%include "lib/math.asm"
   561                              <3> 
   562                              <3> %ifndef MATH_ASM
   563                              <3> 	%define MATH_ASM
   564                              <3> 
   565                              <3> 	%include "lib/system.mac"
   566                              <4>  
   567                              <4> %ifndef SYSTEM_MAC
   568                              <4>  	%define SYSTEM_MAC
   569                              <4>  	
   570                              <4> 	%ifndef TRUE
   571                              <4> 		%define TRUE 01h
   572                              <4> 	%endif
   573                              <4> 	%ifndef FALSE
   574                              <4> 		%define FALSE 00h
   575                              <4> 	%endif
   576                              <4> 	
   577                              <4> %macro vlodsb 3
   578                              <4> 	vlodsb cs, %1, %2, %3
   579                              <4> %endmacro
   580                              <4> 
   581                              <4> %macro vstosb 3
   582                              <4> 	vstosb cs, %1, %2, %3
   583                              <4> %endmacro
   584                              <4> 	 	
   585                              <4> %macro int16toreg 2
   586                              <4> 	int16toreg cs, %1, %2
   587                              <4> %endmacro
   588                              <4> 
   589                              <4> %macro regtoint16 2
   590                              <4> 	regtoint16 %1, cs, %2
   591                              <4> %endmacro
   592                              <4> 
   593                              <4> %macro vstosb 4
   594                              <4> 	push %1
   595                              <4> 	pop ds
   596                              <4> 	mov si,%2
   597                              <4> 	add si,%3
   598                              <4> 	mov byte [si],%4	
   599                              <4> %endmacro
   600                              <4> 
   601                              <4> %macro vlodsb 4
   602                              <4> 	push %1
   603                              <4> 	pop ds
   604                              <4> 	mov si,%2
   605                              <4> 	add si,%3
   606                              <4> 	mov byte %4,[si]	
   607                              <4> %endmacro 	 
   608                              <4> 
   609                              <4> %macro int16toreg 3
   610                              <4> 	push %2
   611                              <4> 	push %1
   612                              <4> 	pop ds
   613                              <4> 	pop si
   614                              <4> 	mov word %3,[si]	
   615                              <4> %endmacro
   616                              <4> 
   617                              <4> %macro regtoint16 3
   618                              <4> 	push %3
   619                              <4> 	push %2
   620                              <4> 	pop ds
   621                              <4> 	pop si
   622                              <4> 	mov word [si],%1	
   623                              <4> %endmacro
   624                              <4> 
   625                              <4> %macro mov32 2
   626                              <4> 	mov32 cs, %1, cs, %2
   627                              <4> %endmacro
   628                              <4> 
   629                              <4> %macro mov16 2
   630                              <4> 	mov16 cs, %1, cs, %2
   631                              <4> %endmacro
   632                              <4> 
   633                              <4> %macro mov32 4
   634                              <4> 	mov ax,%3
   635                              <4> 	mov ds,ax
   636                              <4> 	mov cx,[%4+2]
   637                              <4> 	mov dx,[%4]
   638                              <4> 	mov ax,%1
   639                              <4> 	mov ds,ax
   640                              <4> 	mov [%2+2],cx
   641                              <4> 	mov [%2],dx
   642                              <4> %endmacro
   643                              <4> 
   644                              <4> %macro mov16 4
   645                              <4> 	mov ax,%3
   646                              <4> 	mov ds,ax
   647                              <4> 	mov bx,[%4]
   648                              <4> 	mov ax,%1
   649                              <4> 	mov ds,ax
   650                              <4> 	mov [%2],bx
   651                              <4> %endmacro
   652                              <4>  	 	
   653                              <4> %macro mformat 4
   654                              <4> 	stkopen 8
   655                              <4> 	mov word [ bp + 0 ], %1
   656                              <4> 	mov word [ bp + 2 ], %2
   657                              <4> 	mov word [ bp + 4 ], %3
   658                              <4> 	mov word [ bp + 6 ], %4
   659                              <4> 	call kernel_segment:mformat
   660                              <4> 	stkclose 8
   661                              <4> %endmacro
   662                              <4> 
   663                              <4> %macro malloc 6
   664                              <4> 	stkopen 0Bh
   665                              <4> 	mov word [ bp + 4 ], %3
   666                              <4> 	mov word [ bp + 6 ], %4
   667                              <4> 	mov word [ bp + 8 ], %5	
   668                              <4> 	call kernel_segment:malloc
   669                              <4> 	push sp
   670                              <4> 	pop bp
   671                              <4> 	mov word %1, [ bp ]
   672                              <4> 	mov word %2, [ bp + 2 ]
   673                              <4> 	mov byte %6, [ bp + 0x0A ]
   674                              <4> 	stkclose 0Bh
   675                              <4> %endmacro 	
   676                              <4> 
   677                              <4> %macro laddr 2
   678                              <4> 	laddr %1, %2, %1, %2
   679                              <4> %endmacro
   680                              <4> 
   681                              <4> %macro faddr 2
   682                              <4> 	faddr %1, %2, %1, %2
   683                              <4> %endmacro
   684                              <4>  	
   685                              <4> %macro laddr 4
   686                              <4> 	stkopen 8
   687                              <4> 	mov word [ bp + 4 ], %3
   688                              <4> 	mov word [ bp + 6 ], %4	
   689                              <4> 	call kernel_segment:laddr
   690                              <4> 	push sp
   691                              <4> 	pop bp
   692                              <4> 	mov word %1, [ bp + 0 ]
   693                              <4> 	mov word %2, [ bp + 2 ]	
   694                              <4> 	stkclose 8
   695                              <4> %endmacro
   696                              <4> 
   697                              <4> %macro faddr 4
   698                              <4> 	stkopen 8
   699                              <4> 	mov word [ bp + 4 ], %3
   700                              <4> 	mov word [ bp + 6 ], %4	
   701                              <4> 	call kernel_segment:faddr
   702                              <4> 	push sp
   703                              <4> 	pop bp
   704                              <4> 	mov word %1, [ bp + 0 ]
   705                              <4> 	mov word %2, [ bp + 2 ]	
   706                              <4> 	stkclose 8
   707                              <4> %endmacro	
   708                              <4>  
   709                              <4> 
   710                              <4> %macro stkopen 1		
   711                              <4> 	sub word sp, %1
   712                              <4> 	push sp
   713                              <4> 	pop bp
   714                              <4> %endmacro
   715                              <4> 
   716                              <4> %macro stkclose 1
   717                              <4> 	add word sp, %1
   718                              <4> %endmacro
   719                              <4> 
   720                              <4> %macro stkload 1-* 	
   721                              <4>  	%rep %0
   722                              <4>  	 	%rotate -1
   723                              <4>  		pop %1
   724                              <4>  	%endrep
   725                              <4>  	%rep %0
   726                              <4>  		push %1
   727                              <4>  		%rotate 1
   728                              <4>  	%endrep
   729                              <4> %endmacro
   730                              <4> 
   731                              <4> %macro stkpush 1-* 	
   732                              <4>  	%rep %0
   733                              <4>  		push %1
   734                              <4>  		%rotate 1
   735                              <4>  	%endrep 	
   736                              <4> %endmacro
   737                              <4>  
   738                              <4> %macro stkpop 1-*
   739                              <4>  	%rep %0
   740                              <4>  	 	%rotate -1
   741                              <4>  		pop %1
   742                              <4>  	%endrep 	 	
   743                              <4> %endmacro
   744                              <4> 
   745                              <4> %macro delay 1
   746                              <4> 	delay cs, %1
   747                              <4> %endmacro
   748                              <4> 
   749                              <4> %macro delay 2
   750                              <4> 	mov ax,%1
   751                              <4> 	mov ds,ax
   752                              <4> 	
   753                              <4> 	mov ah,86h
   754                              <4> 	mov cx,[%2+2]
   755                              <4> 	mov dx,[%2]
   756                              <4> 	int 15h	
   757                              <4> %endmacro
   758                              <4> 
   759                              <4> %endif 
   760                              <3> 
   761                              <3> %macro __int16to32 3
   762                              <3> 	stkopen 0x06
   763                              <3> 	mov word [bp+0],%1
   764                              <3> 	call proc_int16to32
   765                              <3> 	push sp
   766                              <3> 	pop bp
   767                              <3> 	mov word %2, [bp+2]
   768                              <3> 	mov word %3, [bp+4]
   769                              <3> 	stkclose 0x06
   770                              <3> %endmacro
   771                              <3> 
   772                              <3> %macro __int32to16 3
   773                              <3> 	stkopen 0x06
   774                              <3> 	mov word [bp+0], %1
   775                              <3> 	mov word [bp+2], %2
   776                              <3> 	call proc_int32to16
   777                              <3> 	push sp
   778                              <3> 	pop bp
   779                              <3> 	mov word %3, [bp+4]
   780                              <3> 	stkclose 0x06
   781                              <3> %endmacro
   782                              <3> 
   783                              <3> %macro __add32 6
   784                              <3> 	stkopen 0x0C
   785                              <3> 	mov word [bp+0], %1
   786                              <3> 	mov word [bp+2], %2
   787                              <3> 	mov word [bp+4], %3
   788                              <3> 	mov word [bp+6], %4	
   789                              <3> 	call proc_add32
   790                              <3> 	push sp
   791                              <3> 	pop bp
   792                              <3> 	mov word %5, [bp+8]
   793                              <3> 	mov word %6, [bp+0x0A]
   794                              <3> 	stkclose 0x0C
   795                              <3> %endmacro
   796                              <3> 
   797                              <3> %macro __sub32 6
   798                              <3> 	stkopen 0x0C
   799                              <3> 	mov word [bp+0], %1
   800                              <3> 	mov word [bp+2], %2
   801                              <3> 	mov word [bp+4], %3
   802                              <3> 	mov word [bp+6], %4	
   803                              <3> 	call proc_sub32
   804                              <3> 	push sp
   805                              <3> 	pop bp
   806                              <3> 	mov word %5, [bp+8]
   807                              <3> 	mov word %6, [bp+0x0A]
   808                              <3> 	stkclose 0x0C
   809                              <3> %endmacro
   810                              <3> 
   811                              <3> %macro __mul32 6
   812                              <3> 	stkopen 0x0C
   813                              <3> 	mov word [bp+0], %1
   814                              <3> 	mov word [bp+2], %2
   815                              <3> 	mov word [bp+4], %3
   816                              <3> 	mov word [bp+6], %4	
   817                              <3> 	call proc_mul32
   818                              <3> 	push sp
   819                              <3> 	pop bp
   820                              <3> 	mov word %5, [bp+8]
   821                              <3> 	mov word %6, [bp+0x0A]
   822                              <3> 	stkclose 0x0C
   823                              <3> %endmacro
   824                              <3> 
   825                              <3> %macro __div32 9
   826                              <3> 	stkopen 0x11
   827                              <3> 	mov word [bp+0], %1
   828                              <3> 	mov word [bp+2], %2
   829                              <3> 	mov word [bp+4], %3
   830                              <3> 	mov word [bp+6], %4
   831                              <3> 	mov word [bp+8], %5
   832                              <3> 	mov word [bp+0x0A], %6	
   833                              <3> 	call proc_div32
   834                              <3> 	push sp
   835                              <3> 	pop bp
   836                              <3> 	mov word %7, [bp+0x0C]
   837                              <3> 	mov word %8, [bp+0x0E]
   838                              <3> 	mov byte %9, [bp+0x10]
   839                              <3> 	stkclose 0x11
   840                              <3> %endmacro
   841                              <3> 
   842                              <3> %macro __cmp32 5
   843                              <3> 	stkopen 9
   844                              <3> 	mov word [bp+0], %1
   845                              <3> 	mov word [bp+2], %2
   846                              <3> 	mov word [bp+4], %3
   847                              <3> 	mov word [bp+6], %4
   848                              <3> 	call proc_cmp32
   849                              <3> 	push sp
   850                              <3> 	pop bp
   851                              <3> 	mov byte %5, [bp+8]
   852                              <3> 	stkclose 9	
   853                              <3> %endmacro
   854                              <3> 
   855                              <3> %macro __shl32 3
   856                              <3> 	stkopen 5
   857                              <3> 	mov word [bp+0], %1
   858                              <3> 	mov word [bp+2], %2
   859                              <3> 	mov byte [bp+4], %3
   860                              <3> 	call proc_shl32
   861                              <3> 	push sp
   862                              <3> 	pop bp
   863                              <3> 	mov word %1, [bp+0]
   864                              <3> 	mov word %2, [bp+2]
   865                              <3> 	stkclose 5
   866                              <3> %endmacro
   867                              <3> 
   868                              <3> %macro __shr32 3
   869                              <3> 	stkopen 5
   870                              <3> 	mov word [bp+0], %1
   871                              <3> 	mov word [bp+2], %2
   872                              <3> 	mov byte [bp+4], %3
   873                              <3> 	call proc_shr32
   874                              <3> 	push sp
   875                              <3> 	pop bp
   876                              <3> 	mov word %1, [bp+0]
   877                              <3> 	mov word %2, [bp+2]
   878                              <3> 	stkclose 5
   879                              <3> %endmacro
   880                              <3> 
   881                              <3> %macro __lzcount32 3	
   882                              <3> 	push %2		
   883                              <3> 	__lzcount16 %1, cl	
   884                              <3> 	pop ax
   885                              <3> 	cmp cl,4
   886                              <3> 	jb .end
   887                              <3> 		push cx		
   888                              <3> 		__lzcount16 ax, al		
   889                              <3> 		pop cx
   890                              <3> 		add cl,al
   891                              <3> 	.end:	
   892                              <3> 	mov byte %3, cl 
   893                              <3> %endmacro
   894                              <3> 
   895                              <3> %macro __lzcount16 2
   896                              <3> 	stkopen 3
   897                              <3> 	mov word [bp+0], %1
   898                              <3> 	call proc__lzcount16
   899                              <3> 	push sp
   900                              <3> 	pop bp
   901                              <3> 	mov byte %2, [bp+2]	
   902                              <3> 	stkclose 3
   903                              <3> %endmacro
   904                              <3> 
   905                              <3> %macro __lzbitcount32 3	
   906                              <3> 	push %2		
   907                              <3> 	__lzbitcount16 %1, cl
   908                              <3> 	pop ax
   909                              <3> 	cmp cl,16
   910                              <3> 	jb .end
   911                              <3> 		push cx		
   912                              <3> 		__lzbitcount16 ax, al		
   913                              <3> 		pop cx
   914                              <3> 		add cl,al
   915                              <3> 	.end:	
   916                              <3> 	mov byte %3, cl 
   917                              <3> %endmacro
   918                              <3> 		
   919                              <3> %macro __lzbitcount16 2
   920                              <3> 	stkopen 3
   921                              <3> 	mov word [bp+0], %1
   922                              <3> 	call proc__lzbitcount16
   923                              <3> 	push sp
   924                              <3> 	pop bp
   925                              <3> 	mov byte %2, [bp+2]	
   926                              <3> 	stkclose 3
   927                              <3> %endmacro	
   928                              <3> 
   929                              <3> %macro __calc_dividendo1 7
   930                              <3> 	stkopen 0x0D
   931                              <3> 	mov word [bp+0], %1
   932                              <3> 	mov word [bp+2], %2
   933                              <3> 	mov word [bp+4], %3
   934                              <3> 	mov word [bp+6], %4
   935                              <3> 	call proc_calc_dividendo1
   936                              <3> 	push sp
   937                              <3> 	pop bp
   938                              <3> 	mov word %5, [bp+0x08]
   939                              <3> 	mov word %6, [bp+0x0A]
   940                              <3> 	mov byte %7, [bp+0x0C]
   941                              <3> 	stkclose 0x0D
   942                              <3> %endmacro
   943                              <3> 
   944                              <3> %macro __calc__prox_dividendo 5
   945                              <3> 	stkopen 9
   946                              <3> 	mov word [bp+0], %1
   947                              <3> 	mov word [bp+2], %2
   948                              <3> 	mov word [bp+4], %3
   949                              <3> 	mov word [bp+6], %4
   950                              <3> 	mov word [bp+8], %5
   951                              <3> 	call proc_calc_prox_dividendo
   952                              <3> 	push sp
   953                              <3> 	pop bp
   954                              <3> 	mov word %3, [bp+4]
   955                              <3> 	mov word %4, [bp+6]
   956                              <3> 	mov byte %5, [bp+8]
   957                              <3> 	stkclose 9
   958                              <3> %endmacro
   959                              <3> 				
   960                              <3> section .data
   961                              <3> 
   962                              <3> proc_int16to32:
   963 0000006D 89E0                <3> 	mov ax,sp
   964 0000006F 89C5                <3> 	mov bp,ax
   965                              <3> 	
   966 00000071 8B4602              <3> 	mov ax,[bp+2]
   967 00000074 894606              <3> 	mov [bp+6],ax
   968                              <3> 				
   969 00000077 250080              <3> 	and ax,0x8000
   970 0000007A 83F800              <3> 	cmp ax,0
   971 0000007D 7507                <3> 	jnz .one
   972 0000007F C746040000          <3> 		mov word [bp+4],0			
   973 00000084 EB05                <3> 		jmp .endcmp
   974                              <3> 	.one:				
   975 00000086 C74604FFFF          <3> 		mov word [bp+4],0xFFFF
   976                              <3> 	.endcmp:
   977                              <3> 	
   978 0000008B C3                  <3> 	ret
   979                              <3> 	
   980                              <3> proc_int32to16:
   981 0000008C 89E0                <3> 	mov ax,sp
   982 0000008E 89C5                <3> 	mov bp,ax
   983                              <3> 		
   984 00000090 8B4604              <3> 	mov ax,[bp+4]
   985 00000093 25FF7F              <3> 	and ax,0x7FFF
   986 00000096 894606              <3> 	mov [bp+6],ax
   987                              <3> 	
   988 00000099 8B4602              <3> 	mov ax,[bp+2]
   989 0000009C 250080              <3> 	and ax,0x8000
   990 0000009F 014606              <3> 	add [bp+6],ax
   991                              <3> 		
   992 000000A2 C3                  <3> 	ret
   993                              <3> 
   994                              <3> proc_idiv32:
   995                              <3> 	stkopen 0x11
   996 000000A3 83EC11              <4>  sub word sp, %1
   997 000000A6 54                  <4>  push sp
   998 000000A7 5D                  <4>  pop bp
   999 000000A8 8B4613              <3> 	mov ax,[bp+0x13]
  1000 000000AB 25FF7F              <3> 	and ax,0x7FFF
  1001 000000AE 894600              <3> 	mov [bp+0],ax
  1002 000000B1 8B4615              <3> 	mov ax,[bp+0x15]
  1003 000000B4 894602              <3> 	mov [bp+2],ax
  1004 000000B7 8B4617              <3> 	mov ax,[bp+0x17]
  1005 000000BA 25FF7F              <3> 	and ax,0x7FFF
  1006 000000BD 894604              <3> 	mov [bp+4],ax
  1007 000000C0 8B4619              <3> 	mov ax,[bp+0x19]
  1008 000000C3 894606              <3> 	mov [bp+6],ax 
  1009 000000C6 E8B300              <3> 	call proc_div32
  1010 000000C9 89E0                <3> 	mov ax,sp
  1011 000000CB 89C5                <3> 	mov bp,ax
  1012 000000CD 8B4608              <3> 	mov ax,[bp+8]
  1013 000000D0 89461B              <3> 	mov [bp+0x1B], ax
  1014 000000D3 8B460A              <3> 	mov ax,[bp+0x0A]
  1015 000000D6 89461D              <3> 	mov [bp+0x1D], ax
  1016 000000D9 8B460C              <3> 	mov ax,[bp+0x0C]
  1017 000000DC 89461F              <3> 	mov [bp+0x1F], ax
  1018 000000DF 8B460E              <3> 	mov ax,[bp+0x0E]
  1019 000000E2 894621              <3> 	mov [bp+0x21], ax
  1020 000000E5 8A4610              <3> 	mov al,[bp+0x10]
  1021 000000E8 884623              <3> 	mov byte [bp+0x23], al
  1022                              <3> 	stkclose 0x11
  1023 000000EB 83C411              <4>  add word sp, %1
  1024                              <3> 	
  1025 000000EE 54                  <3> 	push sp
  1026 000000EF 5D                  <3> 	pop bp
  1027                              <3> 		
  1028 000000F0 8B4E02              <3> 	mov cx,[bp+2]
  1029 000000F3 8B5606              <3> 	mov dx,[bp+6]
  1030 000000F6 81E10080            <3> 	and cx,0x8000
  1031 000000FA 81E20080            <3> 	and dx,0x8000
  1032 000000FE 31D1                <3> 	xor cx,dx
  1033                              <3> 	
  1034 00000100 837E0A00            <3> 	cmp word [bp+0x0A],0
  1035 00000104 7506                <3> 	jnz .signal1
  1036 00000106 837E0C00            <3> 	cmp word [bp+0x0C],0
  1037 0000010A 7403                <3> 	jz .endsignal1
  1038                              <3> 	.signal1:
  1039 0000010C 014E0A              <3> 		add word [bp+0x0A],cx
  1040                              <3> 	.endsignal1:
  1041                              <3> 	
  1042 0000010F 837E0E00            <3> 	cmp word [bp+0x0E],0
  1043 00000113 7506                <3> 	jnz .signal2
  1044 00000115 837E1000            <3> 	cmp word [bp+0x10],0
  1045 00000119 7403                <3> 	jz .endsignal2
  1046                              <3> 	.signal2:
  1047 0000011B 014E0E              <3> 		add word [bp+0x0E],cx	
  1048                              <3> 	.endsignal2:
  1049                              <3> 		
  1050 0000011E C3                  <3> 	ret	
  1051                              <3> 
  1052                              <3> proc_imul32:		
  1053                              <3> 	stkopen 0x0C
  1054 0000011F 83EC0C              <4>  sub word sp, %1
  1055 00000122 54                  <4>  push sp
  1056 00000123 5D                  <4>  pop bp
  1057 00000124 8B460E              <3> 	mov ax,[bp+0x0E]
  1058 00000127 25FF7F              <3> 	and ax,0x7FFF
  1059 0000012A 894600              <3> 	mov [bp+0],ax
  1060 0000012D 8B4610              <3> 	mov ax,[bp+0x10]
  1061 00000130 894602              <3> 	mov [bp+2],ax
  1062 00000133 8B4612              <3> 	mov ax,[bp+0x12]
  1063 00000136 25FF7F              <3> 	and ax,0x7FFF
  1064 00000139 894604              <3> 	mov [bp+4],ax
  1065 0000013C 8B4614              <3> 	mov ax,[bp+0x14]
  1066 0000013F 894606              <3> 	mov [bp+6],ax 
  1067 00000142 E8B901              <3> 	call proc_mul32
  1068 00000145 89E0                <3> 	mov ax,sp
  1069 00000147 89C5                <3> 	mov bp,ax
  1070 00000149 8B4608              <3> 	mov ax,[bp+8]
  1071 0000014C 8B5E0A              <3> 	mov bx,[bp+0x0A]
  1072                              <3> 	stkclose 0x0C
  1073 0000014F 83C40C              <4>  add word sp, %1
  1074                              <3> 	
  1075 00000152 89E1                <3> 	mov cx,sp
  1076 00000154 89CD                <3> 	mov bp,cx		
  1077                              <3> 		
  1078 00000156 89460A              <3> 	mov [bp+0x0A],ax
  1079 00000159 895E0C              <3> 	mov [bp+0x0C],bx
  1080                              <3> 	
  1081 0000015C 837E0A00            <3> 	cmp word [bp+0x0A],0
  1082 00000160 7506                <3> 	jnz .signal1
  1083 00000162 837E0C00            <3> 	cmp word [bp+0x0C],0
  1084 00000166 7413                <3> 	jz .endsignal1
  1085                              <3> 	.signal1:
  1086 00000168 8B4E02              <3> 		mov cx,[bp+2]
  1087 0000016B 8B5606              <3> 		mov dx,[bp+6]
  1088 0000016E 81E10080            <3> 		and cx,0x8000
  1089 00000172 81E20080            <3> 		and dx,0x8000
  1090 00000176 31D1                <3> 		xor cx,dx
  1091 00000178 014E0A              <3> 		add word [bp+0x0A],cx
  1092                              <3> 	.endsignal1:
  1093                              <3> 	
  1094 0000017B C3                  <3> 	ret
  1095                              <3> 
  1096                              <3> proc_div32:
  1097 0000017C 89E0                <3> 	mov ax,sp
  1098 0000017E 89C5                <3> 	mov bp,ax
  1099                              <3> 	
  1100 00000180 8B4606              <3> 	mov ax,[bp+6]
  1101 00000183 034608              <3> 	add ax,[bp+8]
  1102 00000186 83F800              <3> 	cmp ax,0
  1103 00000189 0F846C01            <3> 	jz .divbyzero
  1104                              <3> 	
  1105 0000018D 837E0200            <3> 	cmp word [bp+2], 0
  1106 00000191 7521                <3> 	jnz .div2
  1107 00000193 837E0600            <3> 	cmp word [bp+6], 0
  1108 00000197 751B                <3> 	jnz .div2
  1109 00000199 31D2                <3> 		xor dx,dx
  1110 0000019B 8B4604              <3> 		mov ax, [bp+4]
  1111 0000019E F77608              <3> 		div word [bp+8]
  1112 000001A1 C7460A0000          <3> 		mov word [bp+0x0A], 0
  1113 000001A6 89460C              <3> 		mov word [bp+0x0C], ax
  1114 000001A9 C7460E0000          <3> 		mov word [bp+0x0E], 0
  1115 000001AE 895610              <3> 		mov word [bp+0x10], dx
  1116 000001B1 E93F01              <3> 		jmp .enddiv
  1117                              <3> 	.div2:
  1118 000001B4 8B4602              <3> 		mov ax,[bp+2]
  1119 000001B7 3B4606              <3> 		cmp ax,[bp+6]
  1120 000001BA 0F821F01            <3> 		jb .qzero
  1121 000001BE 770A                <3> 		ja .div
  1122 000001C0 8B4604              <3> 		mov ax,[bp+4]
  1123 000001C3 3B4608              <3> 		cmp ax,[bp+8]
  1124 000001C6 0F821301            <3> 		jb .qzero
  1125                              <3> 		
  1126                              <3> 		.div:
  1127                              <3> 		
  1128 000001CA C7460A0000          <3> 		mov word [bp+0x0A], 0
  1129 000001CF C7460C0000          <3> 		mov word [bp+0x0C], 0		
  1130 000001D4 C7460E0000          <3> 		mov word [bp+0x0E], 0
  1131 000001D9 C746100000          <3> 		mov word [bp+0x10], 0
  1132                              <3> 		
  1133 000001DE 8B4602              <3> 		mov ax,[bp+2]
  1134 000001E1 8B5E04              <3> 		mov bx,[bp+4]
  1135 000001E4 8B4E06              <3> 		mov cx,[bp+6]
  1136 000001E7 8B5608              <3> 		mov dx,[bp+8]		
  1137                              <3> 		__calc_dividendo1 ax, bx, cx, dx, ax, bx, cl
  1138                              <4>  stkopen 0x0D
  1139 000001EA 83EC0D              <5>  sub word sp, %1
  1140 000001ED 54                  <5>  push sp
  1141 000001EE 5D                  <5>  pop bp
  1142 000001EF 894600              <4>  mov word [bp+0], %1
  1143 000001F2 895E02              <4>  mov word [bp+2], %2
  1144 000001F5 894E04              <4>  mov word [bp+4], %3
  1145 000001F8 895606              <4>  mov word [bp+6], %4
  1146 000001FB E89A02              <4>  call proc_calc_dividendo1
  1147 000001FE 54                  <4>  push sp
  1148 000001FF 5D                  <4>  pop bp
  1149 00000200 8B4608              <4>  mov word %5, [bp+0x08]
  1150 00000203 8B5E0A              <4>  mov word %6, [bp+0x0A]
  1151 00000206 8A4E0C              <4>  mov byte %7, [bp+0x0C]
  1152                              <4>  stkclose 0x0D
  1153 00000209 83C40D              <5>  add word sp, %1
  1154                              <3> 
  1155 0000020C 89E2                <3> 		mov dx,sp
  1156 0000020E 89D5                <3> 		mov bp,dx
  1157 00000210 89460E              <3> 		mov word [bp+0x0E], ax
  1158 00000213 895E10              <3> 		mov word [bp+0x10], bx
  1159                              <3> 		
  1160 00000216 51                  <3> 		push cx
  1161                              <3> 		.l1:							
  1162 00000217 89E2                <3> 			mov dx,sp
  1163 00000219 89D5                <3> 			mov bp,dx		
  1164 0000021B 83C502              <3> 			add bp,2
  1165 0000021E 8B460E              <3> 			mov ax, [bp+0x0E]
  1166 00000221 8B5E10              <3> 			mov bx, [bp+0x10]
  1167 00000224 8B4E06              <3> 			mov cx, [bp+6]
  1168 00000227 8B5608              <3> 			mov dx, [bp+8]
  1169                              <3> 			__cmp32 ax, bx, cx, dx, cl
  1170                              <4>  stkopen 9
  1171 0000022A 83EC09              <5>  sub word sp, %1
  1172 0000022D 54                  <5>  push sp
  1173 0000022E 5D                  <5>  pop bp
  1174 0000022F 894600              <4>  mov word [bp+0], %1
  1175 00000232 895E02              <4>  mov word [bp+2], %2
  1176 00000235 894E04              <4>  mov word [bp+4], %3
  1177 00000238 895606              <4>  mov word [bp+6], %4
  1178 0000023B E81F01              <4>  call proc_cmp32
  1179 0000023E 54                  <4>  push sp
  1180 0000023F 5D                  <4>  pop bp
  1181 00000240 8A4E08              <4>  mov byte %5, [bp+8]
  1182                              <4>  stkclose 9
  1183 00000243 83C409              <5>  add word sp, %1
  1184                              <3> 			
  1185 00000246 51                  <3> 			push cx
  1186 00000247 89E2                <3> 			mov dx,sp
  1187 00000249 89D5                <3> 			mov bp,dx
  1188 0000024B 83C504              <3> 			add bp,4
  1189 0000024E 8B460A              <3> 			mov ax,[bp+0x0A]
  1190 00000251 8B5E0C              <3> 			mov bx,[bp+0x0C]
  1191 00000254 55                  <3> 			push bp
  1192                              <3> 			__shl32 ax, bx, 1
  1193                              <4>  stkopen 5
  1194 00000255 83EC05              <5>  sub word sp, %1
  1195 00000258 54                  <5>  push sp
  1196 00000259 5D                  <5>  pop bp
  1197 0000025A 894600              <4>  mov word [bp+0], %1
  1198 0000025D 895E02              <4>  mov word [bp+2], %2
  1199 00000260 C6460401            <4>  mov byte [bp+4], %3
  1200 00000264 E82101              <4>  call proc_shl32
  1201 00000267 54                  <4>  push sp
  1202 00000268 5D                  <4>  pop bp
  1203 00000269 8B4600              <4>  mov word %1, [bp+0]
  1204 0000026C 8B5E02              <4>  mov word %2, [bp+2]
  1205                              <4>  stkclose 5
  1206 0000026F 83C405              <5>  add word sp, %1
  1207 00000272 5D                  <3> 			pop bp				
  1208 00000273 59                  <3> 			pop cx	
  1209                              <3> 									
  1210 00000274 80F900              <3> 			cmp cl,0
  1211 00000277 7C12                <3> 			jl .l11
  1212 00000279 83C301              <3> 				add bx,1
  1213 0000027C 83D000              <3> 				adc ax,0	
  1214                              <3> 				
  1215 0000027F 8B4E06              <3> 				mov cx,[bp+6]
  1216 00000282 8B5608              <3> 				mov dx,[bp+8]
  1217 00000285 295610              <3> 				sub [bp+0x10],dx
  1218 00000288 194E0E              <3> 				sbb [bp+0x0E],cx							
  1219                              <3> 			.l11:							
  1220 0000028B 89460A              <3> 			mov word [bp+0x0A], ax
  1221 0000028E 895E0C              <3> 			mov word [bp+0x0C], bx					
  1222                              <3> 					
  1223 00000291 59                  <3> 			pop cx
  1224 00000292 51                  <3> 			push cx												
  1225                              <3> 			
  1226 00000293 80F920              <3> 			cmp cl,32
  1227 00000296 7342                <3> 			jae .l2
  1228                              <3> 						
  1229 00000298 59                  <3> 			pop cx
  1230                              <3> 			stkopen 9
  1231 00000299 83EC09              <4>  sub word sp, %1
  1232 0000029C 54                  <4>  push sp
  1233 0000029D 5D                  <4>  pop bp
  1234 0000029E 8B460B              <3> 			mov ax,[bp+0x0B]
  1235 000002A1 894600              <3> 			mov word [bp+0], ax
  1236 000002A4 8B460D              <3> 			mov ax,[bp+0x0D]
  1237 000002A7 894602              <3> 			mov word [bp+2], ax
  1238 000002AA 8B4617              <3> 			mov ax,[bp+0x17]
  1239 000002AD 894604              <3> 			mov word [bp+4], ax
  1240 000002B0 8B4619              <3> 			mov ax,[bp+0x19]
  1241 000002B3 894606              <3> 			mov word [bp+6], ax
  1242 000002B6 884E08              <3> 			mov byte [bp+8], cl
  1243 000002B9 E8AD02              <3> 			call proc_calc_prox_dividendo
  1244 000002BC 89E0                <3> 			mov ax,sp
  1245 000002BE 89C5                <3> 			mov bp,ax
  1246 000002C0 8B4604              <3> 			mov word ax,[bp+4]
  1247 000002C3 8B5E06              <3> 			mov word bx,[bp+6]
  1248 000002C6 8A4E08              <3> 			mov byte cl,[bp+8] 
  1249                              <3> 			stkclose 9
  1250 000002C9 83C409              <4>  add word sp, %1
  1251 000002CC 89E2                <3> 			mov dx,sp
  1252 000002CE 89D5                <3> 			mov bp,dx
  1253 000002D0 89460E              <3> 			mov [bp+0x0E],ax
  1254 000002D3 895E10              <3> 			mov [bp+0x10],bx
  1255 000002D6 51                  <3> 			push cx
  1256 000002D7 E93DFF              <3> 			jmp .l1
  1257                              <3> 		.l2:	
  1258 000002DA 59                  <3> 		pop cx
  1259                              <3> 			
  1260 000002DB EB16                <3> 		jmp .enddiv
  1261                              <3> 	.qzero:
  1262 000002DD C7460A0000          <3> 		mov word [bp+0x0A], 0
  1263 000002E2 C7460C0000          <3> 		mov word [bp+0x0C], 0
  1264 000002E7 8B4602              <3> 		mov ax,[bp+2]
  1265 000002EA 89460E              <3> 		mov word [bp+0x0E], ax
  1266 000002ED 8B4604              <3> 		mov ax,[bp+4]
  1267 000002F0 894610              <3> 		mov word [bp+0x10], ax	
  1268                              <3> 	.enddiv:
  1269 000002F3 C6461200            <3> 		mov byte [bp+0x12], 0
  1270 000002F7 EB04                <3> 		jmp .end
  1271                              <3> 	.divbyzero:
  1272 000002F9 C6461201            <3> 		mov byte [bp+0x12], 1						
  1273                              <3> 	.end:		
  1274                              <3> 			
  1275 000002FD C3                  <3> 	ret
  1276                              <3> 		
  1277                              <3> proc_mul32:
  1278 000002FE 89E0                <3> 	mov ax,sp
  1279 00000300 89C5                <3> 	mov bp,ax
  1280                              <3> 	
  1281 00000302 31D2                <3> 	xor dx,dx
  1282 00000304 8B4604              <3> 	mov ax,[bp+4]
  1283 00000307 F76608              <3> 	mul word [bp+8]
  1284                              <3> 	
  1285 0000030A 89560A              <3> 	mov word [bp+0x0A], dx
  1286 0000030D 89460C              <3> 	mov word [bp+0x0C], ax	
  1287                              <3> 	
  1288 00000310 31D2                <3> 	xor dx,dx
  1289 00000312 8B4604              <3> 	mov ax,[bp+4]
  1290 00000315 F76606              <3> 	mul word [bp+6]
  1291                              <3> 		
  1292 00000318 01460A              <3> 	add word [bp+0x0A],ax
  1293                              <3> 	
  1294 0000031B 31D2                <3> 	xor dx,dx
  1295 0000031D 8B4602              <3> 	mov ax,[bp+2]
  1296 00000320 F76608              <3> 	mul word [bp+8]
  1297                              <3> 	
  1298 00000323 01460A              <3> 	add word [bp+0x0A],ax
  1299                              <3> 	
  1300 00000326 C3                  <3> 	ret
  1301                              <3> 
  1302                              <3> proc_add32:
  1303 00000327 89E0                <3> 	mov ax,sp
  1304 00000329 89C5                <3> 	mov bp,ax
  1305                              <3> 	
  1306 0000032B 8B4602              <3> 	mov ax,[bp+2]
  1307 0000032E 8B5E04              <3> 	mov bx,[bp+4]
  1308 00000331 8B4E06              <3> 	mov cx,[bp+6]
  1309 00000334 8B5608              <3> 	mov dx,[bp+8]
  1310                              <3> 	
  1311 00000337 01D3                <3> 	add bx,dx
  1312 00000339 11C8                <3> 	adc ax,cx
  1313                              <3> 	
  1314 0000033B 89460A              <3> 	mov [bp+0x0A],ax
  1315 0000033E 895E0C              <3> 	mov [bp+0x0C],bx	
  1316                              <3> 	
  1317 00000341 C3                  <3> 	ret
  1318                              <3> 	
  1319                              <3> proc_sub32:
  1320 00000342 89E0                <3> 	mov ax,sp
  1321 00000344 89C5                <3> 	mov bp,ax
  1322                              <3> 	
  1323 00000346 8B4602              <3> 	mov ax,[bp+2]
  1324 00000349 8B5E04              <3> 	mov bx,[bp+4]
  1325 0000034C 8B4E06              <3> 	mov cx,[bp+6]
  1326 0000034F 8B5608              <3> 	mov dx,[bp+8]
  1327                              <3> 	
  1328 00000352 29D3                <3> 	sub bx,dx
  1329 00000354 19C8                <3> 	sbb ax,cx
  1330                              <3> 	
  1331 00000356 89460A              <3> 	mov [bp+0x0A],ax
  1332 00000359 895E0C              <3> 	mov [bp+0x0C],bx	
  1333                              <3> 	
  1334 0000035C C3                  <3> 	ret
  1335                              <3> 		
  1336                              <3> proc_cmp32:
  1337 0000035D 89E0                <3> 	mov ax,sp
  1338 0000035F 89C5                <3> 	mov bp,ax		
  1339                              <3> 		
  1340 00000361 8B4602              <3> 	mov ax,[bp+2]
  1341 00000364 3B4606              <3> 	cmp word ax,[bp+6]
  1342 00000367 7F04                <3> 	jg .above
  1343 00000369 7C08                <3> 	jl .below
  1344 0000036B 740C                <3> 	je .equal
  1345                              <3> 	.above:
  1346 0000036D C6460A01            <3> 		mov byte [bp+0x0A], 00000001b
  1347 00000371 EB14                <3> 		jmp .endcmp
  1348                              <3> 	.below:
  1349 00000373 C6460A81            <3> 		mov byte [bp+0x0A], 10000001b
  1350 00000377 EB0E                <3> 		jmp .endcmp
  1351                              <3> 	.equal:
  1352 00000379 8B4604              <3> 		mov ax,[bp+4]
  1353 0000037C 3B4608              <3> 		cmp word ax,[bp+8]
  1354 0000037F 7FEC                <3> 		jg .above
  1355 00000381 7CF0                <3> 		jl .below
  1356 00000383 C6460A00            <3> 		mov byte [bp+0x0A], 00000000b
  1357                              <3> 	.endcmp:		
  1358 00000387 C3                  <3> 	ret
  1359                              <3> 
  1360                              <3> proc_shl32:
  1361 00000388 89E0                <3> 	mov ax,sp
  1362 0000038A 89C5                <3> 	mov bp,ax
  1363                              <3> 	
  1364 0000038C 31C0                <3> 	xor ax,ax
  1365 0000038E 8A4606              <3> 	mov byte al,[bp+6]
  1366 00000391 B310                <3> 	mov bl,10h
  1367 00000393 F6F3                <3> 	div bl
  1368                              <3> 					
  1369 00000395 3C01                <3> 	cmp al,1
  1370 00000397 7204                <3> 	jb .zero
  1371 00000399 7418                <3> 	je .one	
  1372 0000039B EB27                <3> 	jmp .above
  1373                              <3> 	.zero:	
  1374 0000039D B110                <3> 		mov cl,10h
  1375 0000039F 28E1                <3> 		sub cl,ah
  1376 000003A1 8B5E04              <3> 		mov bx,[bp+4]		
  1377 000003A4 D3EB                <3> 		shr bx,cl
  1378                              <3> 		
  1379 000003A6 88E1                <3> 		mov cl,ah		
  1380 000003A8 D36602              <3> 		shl word [bp+2],cl
  1381 000003AB 015E02              <3> 		add word [bp+2],bx				
  1382 000003AE D36604              <3> 		shl word [bp+4],cl
  1383 000003B1 EB1B                <3> 		jmp .endzo
  1384                              <3> 	.one:
  1385 000003B3 88E1                <3> 		mov cl,ah
  1386 000003B5 8B5E04              <3> 		mov bx, [bp+4]				
  1387 000003B8 D3E3                <3> 		shl bx, cl 
  1388 000003BA 895E02              <3> 		mov word [bp+2], bx
  1389 000003BD C746040000          <3> 		mov word [bp+4], 0
  1390 000003C2 EB0A                <3> 		jmp .endzo
  1391                              <3> 	.above:		
  1392 000003C4 C746020000          <3> 		mov word [bp+2], 0
  1393 000003C9 C746040000          <3> 		mov word [bp+4], 0
  1394                              <3> 	.endzo:	
  1395                              <3> 	
  1396 000003CE C3                  <3> 	ret
  1397                              <3> 	
  1398                              <3> proc_shr32:
  1399 000003CF 89E0                <3> 	mov ax,sp
  1400 000003D1 89C5                <3> 	mov bp,ax
  1401                              <3> 	
  1402 000003D3 31C0                <3> 	xor ax,ax
  1403 000003D5 8A4606              <3> 	mov byte al,[bp+6]
  1404 000003D8 B310                <3> 	mov bl,10h
  1405 000003DA F6F3                <3> 	div bl
  1406                              <3> 					
  1407 000003DC 3C01                <3> 	cmp al,1
  1408 000003DE 7204                <3> 	jb .zero
  1409 000003E0 7418                <3> 	je .one	
  1410 000003E2 EB27                <3> 	jmp .above
  1411                              <3> 	.zero:	
  1412 000003E4 B110                <3> 		mov cl,10h
  1413 000003E6 28E1                <3> 		sub cl,ah		
  1414 000003E8 8B5E02              <3> 		mov bx,[bp+2]		
  1415 000003EB D3E3                <3> 		shl bx,cl
  1416                              <3> 		
  1417 000003ED 88E1                <3> 		mov cl,ah		
  1418 000003EF D36E02              <3> 		shr word [bp+2],cl
  1419 000003F2 D36E04              <3> 		shr word [bp+4],cl
  1420 000003F5 015E04              <3> 		add word [bp+4],bx	
  1421 000003F8 EB1B                <3> 		jmp .endzo
  1422                              <3> 	.one:			
  1423 000003FA 88E1                <3> 		mov cl,ah
  1424 000003FC 8B5E02              <3> 		mov bx,[bp+2]
  1425 000003FF D3EB                <3> 		shr bx,cl
  1426 00000401 C746020000          <3> 		mov word [bp+2],0 
  1427 00000406 895E04              <3> 		mov word [bp+4],bx
  1428 00000409 EB0A                <3> 		jmp .endzo
  1429                              <3> 	.above:		
  1430 0000040B C746020000          <3> 		mov word [bp+2],0
  1431 00000410 C746040000          <3> 		mov word [bp+4],0
  1432                              <3> 	.endzo:		
  1433                              <3> 
  1434 00000415 C3                  <3> 	ret
  1435                              <3> 	
  1436                              <3> proc__lzcount16:
  1437 00000416 89E0                <3> 	mov ax,sp
  1438 00000418 89C5                <3> 	mov bp,ax
  1439                              <3> 	
  1440 0000041A B100                <3> 	mov cl,0
  1441                              <3> 		
  1442 0000041C 8A6603              <3> 	mov ah, [bp+3]	
  1443 0000041F 80E4F0              <3> 	and ah,0xF0
  1444 00000422 80FC00              <3> 	cmp ah,0
  1445 00000425 7529                <3> 	jnz .end
  1446 00000427 FEC1                <3> 	inc cl
  1447                              <3> 	
  1448 00000429 8A6603              <3> 	mov ah, [bp+3]
  1449 0000042C 80E40F              <3> 	and ah,0x0F
  1450 0000042F 80FC00              <3> 	cmp ah,0
  1451 00000432 751C                <3> 	jnz .end
  1452 00000434 FEC1                <3> 	inc cl
  1453                              <3> 	
  1454 00000436 8A6602              <3> 	mov ah, [bp+2]
  1455 00000439 80E4F0              <3> 	and ah,0xF0
  1456 0000043C 80FC00              <3> 	cmp ah,0
  1457 0000043F 750F                <3> 	jnz .end
  1458 00000441 FEC1                <3> 	inc cl
  1459                              <3> 	
  1460 00000443 8A6602              <3> 	mov ah, [bp+2]
  1461 00000446 80E40F              <3> 	and ah,0x0F
  1462 00000449 80FC00              <3> 	cmp ah,0
  1463 0000044C 7502                <3> 	jnz .end
  1464 0000044E FEC1                <3> 	inc cl
  1465                              <3> 		
  1466                              <3> 	.end:
  1467 00000450 884E04              <3> 	mov byte [bp+4], cl
  1468                              <3> 	
  1469 00000453 C3                  <3> 	ret
  1470                              <3> 
  1471                              <3> proc__lzbitcount16:
  1472 00000454 89E0                <3> 	mov ax,sp
  1473 00000456 89C5                <3> 	mov bp,ax
  1474                              <3> 	
  1475 00000458 8B4602              <3> 	mov word ax,[bp+2]
  1476                              <3> 		
  1477 0000045B B100                <3> 	mov cl,0
  1478                              <3> 	.l1:
  1479 0000045D 80F910              <3> 		cmp cl,16
  1480 00000460 7310                <3> 		jae .l2
  1481                              <3> 		
  1482 00000462 89C3                <3> 		mov bx,ax
  1483 00000464 D3E3                <3> 		shl bx,cl
  1484 00000466 C1EB0F              <3> 		shr bx,15
  1485                              <3> 		
  1486 00000469 83FB00              <3> 		cmp bx,0
  1487 0000046C 7504                <3> 		jnz .l2
  1488                              <3> 		
  1489 0000046E FEC1                <3> 		inc cl		
  1490 00000470 EBEB                <3> 		jmp .l1
  1491                              <3> 	.l2:
  1492                              <3> 	
  1493 00000472 884E04              <3> 	mov byte [bp+4], cl
  1494                              <3> 	
  1495 00000475 C3                  <3> 	ret
  1496                              <3> 	
  1497                              <3> proc__lzbitcount8:
  1498 00000476 89E0                <3> 	mov ax,sp
  1499 00000478 89C5                <3> 	mov bp,ax
  1500                              <3> 	
  1501 0000047A 8A4602              <3> 	mov byte al,[bp+2]
  1502                              <3> 	
  1503 0000047D B100                <3> 	mov cl,0
  1504                              <3> 	.l1:
  1505 0000047F 80F908              <3> 		cmp cl,8
  1506 00000482 7410                <3> 		je .l2
  1507                              <3> 		
  1508 00000484 88C3                <3> 		mov bl,al
  1509 00000486 D2E3                <3> 		shl bl,cl
  1510 00000488 C0EB07              <3> 		shr bl,7
  1511                              <3> 		
  1512 0000048B 80FB00              <3> 		cmp bl,0
  1513 0000048E 7504                <3> 		jnz .l2
  1514                              <3> 		
  1515 00000490 FEC1                <3> 		inc cl		
  1516 00000492 EBEB                <3> 		jmp .l1
  1517                              <3> 	.l2:
  1518                              <3> 	
  1519 00000494 884E03              <3> 	mov byte [bp+3], cl
  1520                              <3> 		
  1521 00000497 C3                  <3> 	ret
  1522                              <3> 	
  1523                              <3> proc_calc_dividendo1:
  1524 00000498 89E0                <3> 	mov ax,sp
  1525 0000049A 89C5                <3> 	mov bp,ax
  1526                              <3> 	
  1527 0000049C 8B4606              <3> 	mov ax,[bp+6]
  1528 0000049F 8B5E08              <3> 	mov bx,[bp+8]
  1529 000004A2 55                  <3> 	push bp
  1530                              <3> 	__lzbitcount32 ax, bx, cl
  1531 000004A3 53                  <4>  push %2
  1532                              <4>  __lzbitcount16 %1, cl
  1533                              <5>  stkopen 3
  1534 000004A4 83EC03              <6>  sub word sp, %1
  1535 000004A7 54                  <6>  push sp
  1536 000004A8 5D                  <6>  pop bp
  1537 000004A9 894600              <5>  mov word [bp+0], %1
  1538 000004AC E8A5FF              <5>  call proc__lzbitcount16
  1539 000004AF 54                  <5>  push sp
  1540 000004B0 5D                  <5>  pop bp
  1541 000004B1 8A4E02              <5>  mov byte %2, [bp+2]
  1542                              <5>  stkclose 3
  1543 000004B4 83C403              <6>  add word sp, %1
  1544 000004B7 58                  <4>  pop ax
  1545 000004B8 80F910              <4>  cmp cl,16
  1546 000004BB 7217                <4>  jb .end
  1547 000004BD 51                  <4>  push cx
  1548                              <4>  __lzbitcount16 ax, al
  1549                              <5>  stkopen 3
  1550 000004BE 83EC03              <6>  sub word sp, %1
  1551 000004C1 54                  <6>  push sp
  1552 000004C2 5D                  <6>  pop bp
  1553 000004C3 894600              <5>  mov word [bp+0], %1
  1554 000004C6 E88BFF              <5>  call proc__lzbitcount16
  1555 000004C9 54                  <5>  push sp
  1556 000004CA 5D                  <5>  pop bp
  1557 000004CB 8A4602              <5>  mov byte %2, [bp+2]
  1558                              <5>  stkclose 3
  1559 000004CE 83C403              <6>  add word sp, %1
  1560 000004D1 59                  <4>  pop cx
  1561 000004D2 00C1                <4>  add cl,al
  1562                              <4>  .end:
  1563 000004D4 88C9                <4>  mov byte %3, cl
  1564 000004D6 5D                  <3> 	pop bp
  1565 000004D7 B320                <3> 	mov bl,32
  1566 000004D9 28CB                <3> 	sub bl,cl
  1567 000004DB 53                  <3> 	push bx
  1568                              <3> 		
  1569 000004DC 8B4602              <3> 	mov ax,[bp+2]
  1570 000004DF 8B5604              <3> 	mov dx,[bp+4]
  1571 000004E2 55                  <3> 	push bp
  1572                              <3> 	__shr32 ax, dx, cl
  1573                              <4>  stkopen 5
  1574 000004E3 83EC05              <5>  sub word sp, %1
  1575 000004E6 54                  <5>  push sp
  1576 000004E7 5D                  <5>  pop bp
  1577 000004E8 894600              <4>  mov word [bp+0], %1
  1578 000004EB 895602              <4>  mov word [bp+2], %2
  1579 000004EE 884E04              <4>  mov byte [bp+4], %3
  1580 000004F1 E8DBFE              <4>  call proc_shr32
  1581 000004F4 54                  <4>  push sp
  1582 000004F5 5D                  <4>  pop bp
  1583 000004F6 8B4600              <4>  mov word %1, [bp+0]
  1584 000004F9 8B5602              <4>  mov word %2, [bp+2]
  1585                              <4>  stkclose 5
  1586 000004FC 83C405              <5>  add word sp, %1
  1587 000004FF 5D                  <3> 	pop bp
  1588 00000500 50                  <3> 	push ax
  1589 00000501 52                  <3> 	push dx	
  1590                              <3> 	
  1591 00000502 8B4E06              <3> 	mov cx,[bp+6]
  1592 00000505 8B5E08              <3> 	mov bx,[bp+8]
  1593                              <3> 	
  1594 00000508 55                  <3> 	push bp
  1595                              <3> 	__cmp32 ax, dx, cx, bx, cl
  1596                              <4>  stkopen 9
  1597 00000509 83EC09              <5>  sub word sp, %1
  1598 0000050C 54                  <5>  push sp
  1599 0000050D 5D                  <5>  pop bp
  1600 0000050E 894600              <4>  mov word [bp+0], %1
  1601 00000511 895602              <4>  mov word [bp+2], %2
  1602 00000514 894E04              <4>  mov word [bp+4], %3
  1603 00000517 895E06              <4>  mov word [bp+6], %4
  1604 0000051A E840FE              <4>  call proc_cmp32
  1605 0000051D 54                  <4>  push sp
  1606 0000051E 5D                  <4>  pop bp
  1607 0000051F 8A4E08              <4>  mov byte %5, [bp+8]
  1608                              <4>  stkclose 9
  1609 00000522 83C409              <5>  add word sp, %1
  1610 00000525 5D                  <3> 	pop bp
  1611 00000526 5A                  <3> 	pop dx
  1612 00000527 58                  <3> 	pop ax
  1613 00000528 5B                  <3> 	pop bx
  1614                              <3> 		
  1615 00000529 80F900              <3> 	cmp cl,0
  1616 0000052C 7D2D                <3> 	jge .l1
  1617                              <3> 		stkopen 9
  1618 0000052E 83EC09              <4>  sub word sp, %1
  1619 00000531 54                  <4>  push sp
  1620 00000532 5D                  <4>  pop bp
  1621 00000533 8B4E0B              <3> 		mov cx,[bp+0x0B]
  1622 00000536 894E00              <3> 		mov word [bp+0], cx
  1623 00000539 8B4E0D              <3> 		mov cx,[bp+0x0D]
  1624 0000053C 894E02              <3> 		mov word [bp+2], cx
  1625 0000053F 894604              <3> 		mov word [bp+4], ax
  1626 00000542 895606              <3> 		mov word [bp+6], dx
  1627 00000545 885E08              <3> 		mov byte [bp+8], bl
  1628 00000548 E81E00              <3> 		call proc_calc_prox_dividendo
  1629 0000054B 89E0                <3> 		mov ax,sp
  1630 0000054D 89C5                <3> 		mov bp,ax
  1631 0000054F 8B4604              <3> 		mov word ax,[bp+4]
  1632 00000552 8B5606              <3> 		mov word dx,[bp+6]
  1633 00000555 8A5E08              <3> 		mov byte bl,[bp+8] 
  1634                              <3> 		stkclose 9		 
  1635 00000558 83C409              <4>  add word sp, %1
  1636                              <3> 	.l1:
  1637                              <3> 	
  1638 0000055B 89E1                <3> 	mov cx,sp
  1639 0000055D 89CD                <3> 	mov bp,cx
  1640 0000055F 89460A              <3> 	mov word [bp+0x0A], ax
  1641 00000562 89560C              <3> 	mov word [bp+0x0C], dx
  1642 00000565 885E0E              <3> 	mov byte [bp+0x0E], bl	 
  1643                              <3> 	
  1644 00000568 C3                  <3> 	ret
  1645                              <3> 
  1646                              <3> proc_calc_prox_dividendo:
  1647 00000569 89E0                <3> 	mov ax,sp
  1648 0000056B 89C5                <3> 	mov bp,ax
  1649                              <3> 	
  1650 0000056D 30E4                <3> 	xor ah,ah	
  1651 0000056F 8A460A              <3> 	mov al,[bp+0x0A]
  1652 00000572 B310                <3> 	mov bl,10h
  1653 00000574 F6F3                <3> 	div bl
  1654                              <3> 	
  1655 00000576 3C00                <3> 	cmp al,0
  1656 00000578 7402                <3> 	jz .zero
  1657 0000057A EB05                <3> 	jmp .one
  1658                              <3> 	.zero:
  1659 0000057C 8B5E02              <3> 		mov bx,[bp+2]
  1660 0000057F EB03                <3> 		jmp .endcmp
  1661                              <3> 	.one:
  1662 00000581 8B5E04              <3> 		mov bx,[bp+4]		
  1663                              <3> 	.endcmp:
  1664                              <3> 		
  1665 00000584 88E1                <3> 	mov cl,ah
  1666 00000586 D3E3                <3> 	shl bx,cl
  1667 00000588 C1EB0F              <3> 	shr bx,15
  1668                              <3> 	
  1669 0000058B 8B4606              <3> 	mov ax,[bp+6]
  1670 0000058E 8B5608              <3> 	mov dx,[bp+8]
  1671 00000591 53                  <3> 	push bx
  1672                              <3> 	__shl32 ax, dx, 1
  1673                              <4>  stkopen 5
  1674 00000592 83EC05              <5>  sub word sp, %1
  1675 00000595 54                  <5>  push sp
  1676 00000596 5D                  <5>  pop bp
  1677 00000597 894600              <4>  mov word [bp+0], %1
  1678 0000059A 895602              <4>  mov word [bp+2], %2
  1679 0000059D C6460401            <4>  mov byte [bp+4], %3
  1680 000005A1 E8E4FD              <4>  call proc_shl32
  1681 000005A4 54                  <4>  push sp
  1682 000005A5 5D                  <4>  pop bp
  1683 000005A6 8B4600              <4>  mov word %1, [bp+0]
  1684 000005A9 8B5602              <4>  mov word %2, [bp+2]
  1685                              <4>  stkclose 5
  1686 000005AC 83C405              <5>  add word sp, %1
  1687 000005AF 5B                  <3> 	pop bx
  1688                              <3> 	
  1689 000005B0 01DA                <3> 	add dx,bx
  1690 000005B2 83D000              <3> 	adc ax,0
  1691                              <3> 
  1692 000005B5 89E1                <3> 	mov cx,sp
  1693 000005B7 89CD                <3> 	mov bp,cx	
  1694 000005B9 894606              <3> 	mov [bp+6],ax
  1695 000005BC 895608              <3> 	mov [bp+8],dx
  1696                              <3> 	
  1697 000005BF FE460A              <3> 	inc byte [bp+0x0A]
  1698                              <3> 	
  1699 000005C2 C3                  <3> 	ret
  1700                              <3> 	
  1701                              <3> %endif
  1702                              <2> 	%include "lib/system.mac"
  1703                              <3>  
  1704                              <3> %ifndef SYSTEM_MAC
  1705                              <3>  	%define SYSTEM_MAC
  1706                              <3>  	
  1707                              <3> 	%ifndef TRUE
  1708                              <3> 		%define TRUE 01h
  1709                              <3> 	%endif
  1710                              <3> 	%ifndef FALSE
  1711                              <3> 		%define FALSE 00h
  1712                              <3> 	%endif
  1713                              <3> 	
  1714                              <3> %macro vlodsb 3
  1715                              <3> 	vlodsb cs, %1, %2, %3
  1716                              <3> %endmacro
  1717                              <3> 
  1718                              <3> %macro vstosb 3
  1719                              <3> 	vstosb cs, %1, %2, %3
  1720                              <3> %endmacro
  1721                              <3> 	 	
  1722                              <3> %macro int16toreg 2
  1723                              <3> 	int16toreg cs, %1, %2
  1724                              <3> %endmacro
  1725                              <3> 
  1726                              <3> %macro regtoint16 2
  1727                              <3> 	regtoint16 %1, cs, %2
  1728                              <3> %endmacro
  1729                              <3> 
  1730                              <3> %macro vstosb 4
  1731                              <3> 	push %1
  1732                              <3> 	pop ds
  1733                              <3> 	mov si,%2
  1734                              <3> 	add si,%3
  1735                              <3> 	mov byte [si],%4	
  1736                              <3> %endmacro
  1737                              <3> 
  1738                              <3> %macro vlodsb 4
  1739                              <3> 	push %1
  1740                              <3> 	pop ds
  1741                              <3> 	mov si,%2
  1742                              <3> 	add si,%3
  1743                              <3> 	mov byte %4,[si]	
  1744                              <3> %endmacro 	 
  1745                              <3> 
  1746                              <3> %macro int16toreg 3
  1747                              <3> 	push %2
  1748                              <3> 	push %1
  1749                              <3> 	pop ds
  1750                              <3> 	pop si
  1751                              <3> 	mov word %3,[si]	
  1752                              <3> %endmacro
  1753                              <3> 
  1754                              <3> %macro regtoint16 3
  1755                              <3> 	push %3
  1756                              <3> 	push %2
  1757                              <3> 	pop ds
  1758                              <3> 	pop si
  1759                              <3> 	mov word [si],%1	
  1760                              <3> %endmacro
  1761                              <3> 
  1762                              <3> %macro mov32 2
  1763                              <3> 	mov32 cs, %1, cs, %2
  1764                              <3> %endmacro
  1765                              <3> 
  1766                              <3> %macro mov16 2
  1767                              <3> 	mov16 cs, %1, cs, %2
  1768                              <3> %endmacro
  1769                              <3> 
  1770                              <3> %macro mov32 4
  1771                              <3> 	mov ax,%3
  1772                              <3> 	mov ds,ax
  1773                              <3> 	mov cx,[%4+2]
  1774                              <3> 	mov dx,[%4]
  1775                              <3> 	mov ax,%1
  1776                              <3> 	mov ds,ax
  1777                              <3> 	mov [%2+2],cx
  1778                              <3> 	mov [%2],dx
  1779                              <3> %endmacro
  1780                              <3> 
  1781                              <3> %macro mov16 4
  1782                              <3> 	mov ax,%3
  1783                              <3> 	mov ds,ax
  1784                              <3> 	mov bx,[%4]
  1785                              <3> 	mov ax,%1
  1786                              <3> 	mov ds,ax
  1787                              <3> 	mov [%2],bx
  1788                              <3> %endmacro
  1789                              <3>  	 	
  1790                              <3> %macro mformat 4
  1791                              <3> 	stkopen 8
  1792                              <3> 	mov word [ bp + 0 ], %1
  1793                              <3> 	mov word [ bp + 2 ], %2
  1794                              <3> 	mov word [ bp + 4 ], %3
  1795                              <3> 	mov word [ bp + 6 ], %4
  1796                              <3> 	call kernel_segment:mformat
  1797                              <3> 	stkclose 8
  1798                              <3> %endmacro
  1799                              <3> 
  1800                              <3> %macro malloc 6
  1801                              <3> 	stkopen 0Bh
  1802                              <3> 	mov word [ bp + 4 ], %3
  1803                              <3> 	mov word [ bp + 6 ], %4
  1804                              <3> 	mov word [ bp + 8 ], %5	
  1805                              <3> 	call kernel_segment:malloc
  1806                              <3> 	push sp
  1807                              <3> 	pop bp
  1808                              <3> 	mov word %1, [ bp ]
  1809                              <3> 	mov word %2, [ bp + 2 ]
  1810                              <3> 	mov byte %6, [ bp + 0x0A ]
  1811                              <3> 	stkclose 0Bh
  1812                              <3> %endmacro 	
  1813                              <3> 
  1814                              <3> %macro laddr 2
  1815                              <3> 	laddr %1, %2, %1, %2
  1816                              <3> %endmacro
  1817                              <3> 
  1818                              <3> %macro faddr 2
  1819                              <3> 	faddr %1, %2, %1, %2
  1820                              <3> %endmacro
  1821                              <3>  	
  1822                              <3> %macro laddr 4
  1823                              <3> 	stkopen 8
  1824                              <3> 	mov word [ bp + 4 ], %3
  1825                              <3> 	mov word [ bp + 6 ], %4	
  1826                              <3> 	call kernel_segment:laddr
  1827                              <3> 	push sp
  1828                              <3> 	pop bp
  1829                              <3> 	mov word %1, [ bp + 0 ]
  1830                              <3> 	mov word %2, [ bp + 2 ]	
  1831                              <3> 	stkclose 8
  1832                              <3> %endmacro
  1833                              <3> 
  1834                              <3> %macro faddr 4
  1835                              <3> 	stkopen 8
  1836                              <3> 	mov word [ bp + 4 ], %3
  1837                              <3> 	mov word [ bp + 6 ], %4	
  1838                              <3> 	call kernel_segment:faddr
  1839                              <3> 	push sp
  1840                              <3> 	pop bp
  1841                              <3> 	mov word %1, [ bp + 0 ]
  1842                              <3> 	mov word %2, [ bp + 2 ]	
  1843                              <3> 	stkclose 8
  1844                              <3> %endmacro	
  1845                              <3>  
  1846                              <3> 
  1847                              <3> %macro stkopen 1		
  1848                              <3> 	sub word sp, %1
  1849                              <3> 	push sp
  1850                              <3> 	pop bp
  1851                              <3> %endmacro
  1852                              <3> 
  1853                              <3> %macro stkclose 1
  1854                              <3> 	add word sp, %1
  1855                              <3> %endmacro
  1856                              <3> 
  1857                              <3> %macro stkload 1-* 	
  1858                              <3>  	%rep %0
  1859                              <3>  	 	%rotate -1
  1860                              <3>  		pop %1
  1861                              <3>  	%endrep
  1862                              <3>  	%rep %0
  1863                              <3>  		push %1
  1864                              <3>  		%rotate 1
  1865                              <3>  	%endrep
  1866                              <3> %endmacro
  1867                              <3> 
  1868                              <3> %macro stkpush 1-* 	
  1869                              <3>  	%rep %0
  1870                              <3>  		push %1
  1871                              <3>  		%rotate 1
  1872                              <3>  	%endrep 	
  1873                              <3> %endmacro
  1874                              <3>  
  1875                              <3> %macro stkpop 1-*
  1876                              <3>  	%rep %0
  1877                              <3>  	 	%rotate -1
  1878                              <3>  		pop %1
  1879                              <3>  	%endrep 	 	
  1880                              <3> %endmacro
  1881                              <3> 
  1882                              <3> %macro delay 1
  1883                              <3> 	delay cs, %1
  1884                              <3> %endmacro
  1885                              <3> 
  1886                              <3> %macro delay 2
  1887                              <3> 	mov ax,%1
  1888                              <3> 	mov ds,ax
  1889                              <3> 	
  1890                              <3> 	mov ah,86h
  1891                              <3> 	mov cx,[%2+2]
  1892                              <3> 	mov dx,[%2]
  1893                              <3> 	int 15h	
  1894                              <3> %endmacro
  1895                              <3> 
  1896                              <3> %endif 
  1897                              <2> 
  1898                              <2> %macro chgsig 1
  1899                              <2> 	chgsig cs, %1
  1900                              <2> %endmacro
  1901                              <2> 
  1902                              <2> %macro cmp16 3
  1903                              <2> 	cmp16 cs, %1, cs, %2, %3
  1904                              <2> %endmacro
  1905                              <2> 
  1906                              <2> %macro mul16 2
  1907                              <2> 	mul16 cs, %1, cs, %2
  1908                              <2> %endmacro
  1909                              <2> 
  1910                              <2> %macro div16 2
  1911                              <2> 	div16 cs, %1, cs, %2
  1912                              <2> %endmacro
  1913                              <2> 
  1914                              <2> %macro mod16 2
  1915                              <2> 	mod16 cs, %1, cs, %2
  1916                              <2> %endmacro
  1917                              <2> 
  1918                              <2> %macro inc16 1
  1919                              <2> 	inc16 cs, %1
  1920                              <2> %endmacro
  1921                              <2> 
  1922                              <2> %macro dec16 1
  1923                              <2> 	dec16 cs, %1
  1924                              <2> %endmacro
  1925                              <2> 
  1926                              <2> %macro add16 2
  1927                              <2> 	add16 cs, %1, cs, %2
  1928                              <2> %endmacro
  1929                              <2> 
  1930                              <2> %macro sub16 2
  1931                              <2> 	sub16 cs, %1, cs, %2
  1932                              <2> %endmacro
  1933                              <2> 
  1934                              <2> %macro int32to16 2
  1935                              <2> 	int32to16 cs, %1, %2
  1936                              <2> %endmacro
  1937                              <2> 
  1938                              <2> %macro int16to32 2
  1939                              <2> 	int16to32 %1, cs, %2
  1940                              <2> %endmacro
  1941                              <2> 
  1942                              <2> %macro idiv32 5
  1943                              <2> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  1944                              <2> %endmacro
  1945                              <2> 
  1946                              <2> %macro imul32 3
  1947                              <2> 	imul32 cs, %1, cs, %2, cs, %3
  1948                              <2> %endmacro
  1949                              <2> 
  1950                              <2> %macro div32 5
  1951                              <2> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  1952                              <2> %endmacro
  1953                              <2> 
  1954                              <2> %macro mul32 3
  1955                              <2> 	mul32 cs, %1, cs, %2, cs, %3
  1956                              <2> %endmacro
  1957                              <2> 	
  1958                              <2> %macro add32 3
  1959                              <2> 	add32 cs, %1, cs, %2, cs, %3
  1960                              <2> %endmacro
  1961                              <2> 
  1962                              <2> %macro sub32 3
  1963                              <2> 	sub32 cs, %1, cs, %2, cs, %3
  1964                              <2> %endmacro
  1965                              <2> 
  1966                              <2> %macro int32to16 3
  1967                              <2> 	stkopen 0x06
  1968                              <2> 	mov ax,%1
  1969                              <2> 	mov ds,ax
  1970                              <2> 	mov ax,[%2+2]
  1971                              <2> 	mov word [bp+0], ax
  1972                              <2> 	mov ax,[%2]	
  1973                              <2> 	mov word [bp+2], ax
  1974                              <2> 	call proc_int32to16
  1975                              <2> 	mov ax,sp
  1976                              <2> 	mov bp,ax
  1977                              <2> 	mov ax,[bp+4]
  1978                              <2> 	mov word %3, ax	
  1979                              <2> 	stkclose 0x06
  1980                              <2> %endmacro
  1981                              <2> 
  1982                              <2> %macro int16to32 3
  1983                              <2> 	stkopen 0x06
  1984                              <2> 	mov word [bp+0], %1	
  1985                              <2> 	call proc_int16to32
  1986                              <2> 	mov ax,sp
  1987                              <2> 	mov bp,ax
  1988                              <2> 	mov ax,%2
  1989                              <2> 	mov ds,ax
  1990                              <2> 	mov ax,[bp+2]
  1991                              <2> 	mov [%3+2],ax
  1992                              <2> 	mov ax,[bp+4]
  1993                              <2> 	mov [%3],ax	
  1994                              <2> 	stkclose 0x06
  1995                              <2> %endmacro
  1996                              <2> 
  1997                              <2> %macro div32 10
  1998                              <2> 	stkopen 0x11
  1999                              <2> 	mov ax,%1
  2000                              <2> 	mov ds,ax
  2001                              <2> 	mov ax,[%2+2]
  2002                              <2> 	mov word [bp+0], ax
  2003                              <2> 	mov ax,[%2]
  2004                              <2> 	mov word [bp+2], ax
  2005                              <2> 	mov ax,%3
  2006                              <2> 	mov ds,ax
  2007                              <2> 	mov ax,[%4+2]
  2008                              <2> 	mov word [bp+4], ax
  2009                              <2> 	mov ax,[%4]
  2010                              <2> 	mov word [bp+6], ax
  2011                              <2> 	call proc_div32
  2012                              <2> 	mov ax,sp
  2013                              <2> 	mov bp,ax
  2014                              <2> 	mov ax,%5
  2015                              <2> 	mov ds,ax
  2016                              <2> 	mov word ax, [bp+8]
  2017                              <2> 	mov word [%6+2], ax
  2018                              <2> 	mov word ax, [bp+0x0A]
  2019                              <2> 	mov word [%6], ax
  2020                              <2> 	mov ax,%7
  2021                              <2> 	mov ds,ax
  2022                              <2> 	mov word ax,[bp+0x0C]
  2023                              <2> 	mov word [%8+2],ax
  2024                              <2> 	mov word ax,[bp+0x0E]
  2025                              <2> 	mov word [%8],ax
  2026                              <2> 	mov ax,%9
  2027                              <2> 	mov ds,ax
  2028                              <2> 	mov byte al,[bp+0x10]
  2029                              <2> 	mov byte [%10],al
  2030                              <2> 	stkclose 0x11
  2031                              <2> %endmacro
  2032                              <2> 	
  2033                              <2> %macro mul32 6
  2034                              <2> 	stkopen 0x0C
  2035                              <2> 	mov ax,%1
  2036                              <2> 	mov ds,ax
  2037                              <2> 	mov ax,[%2+2]
  2038                              <2> 	mov word [bp+0], ax
  2039                              <2> 	mov ax,[%2]
  2040                              <2> 	mov word [bp+2], ax
  2041                              <2> 	mov ax,%3
  2042                              <2> 	mov ds,ax
  2043                              <2> 	mov ax,[%4+2]
  2044                              <2> 	mov word [bp+4], ax
  2045                              <2> 	mov ax,[%4]
  2046                              <2> 	mov word [bp+6], ax
  2047                              <2> 	call proc_mul32
  2048                              <2> 	mov ax,sp
  2049                              <2> 	mov bp,ax
  2050                              <2> 	mov ax,%5
  2051                              <2> 	mov ds,ax
  2052                              <2> 	mov word ax, [bp+8]
  2053                              <2> 	mov word [%6+2], ax
  2054                              <2> 	mov word ax, [bp+0x0A]
  2055                              <2> 	mov word [%6], ax
  2056                              <2> 	stkclose 0x0C
  2057                              <2> %endmacro	
  2058                              <2> 	
  2059                              <2> %macro add32 6
  2060                              <2> 	stkopen 0x0C
  2061                              <2> 	mov ax,%1
  2062                              <2> 	mov ds,ax
  2063                              <2> 	mov ax,[%2+2]
  2064                              <2> 	mov word [bp+0], ax
  2065                              <2> 	mov ax,[%2]
  2066                              <2> 	mov word [bp+2], ax
  2067                              <2> 	mov ax,%3
  2068                              <2> 	mov ds,ax
  2069                              <2> 	mov ax,[%4+2]
  2070                              <2> 	mov word [bp+4], ax
  2071                              <2> 	mov ax,[%4]
  2072                              <2> 	mov word [bp+6], ax
  2073                              <2> 	call proc_add32
  2074                              <2> 	mov ax,sp
  2075                              <2> 	mov bp,ax
  2076                              <2> 	mov ax,%5
  2077                              <2> 	mov ds,ax
  2078                              <2> 	mov word ax, [bp+8]
  2079                              <2> 	mov word [%6+2], ax
  2080                              <2> 	mov word ax, [bp+0x0A]
  2081                              <2> 	mov word [%6], ax
  2082                              <2> 	stkclose 0x0C
  2083                              <2> %endmacro
  2084                              <2> 
  2085                              <2> %macro sub32 6
  2086                              <2> 	stkopen 0x0C
  2087                              <2> 	mov ax,%1
  2088                              <2> 	mov ds,ax
  2089                              <2> 	mov ax,[%2+2]
  2090                              <2> 	mov word [bp+0], ax
  2091                              <2> 	mov ax,[%2]
  2092                              <2> 	mov word [bp+2], ax
  2093                              <2> 	mov ax,%3
  2094                              <2> 	mov ds,ax
  2095                              <2> 	mov ax,[%4+2]
  2096                              <2> 	mov word [bp+4], ax
  2097                              <2> 	mov ax,[%4]
  2098                              <2> 	mov word [bp+6], ax
  2099                              <2> 	call proc_sub32
  2100                              <2> 	mov ax,sp
  2101                              <2> 	mov bp,ax
  2102                              <2> 	mov ax,%5
  2103                              <2> 	mov ds,ax
  2104                              <2> 	mov word ax, [bp+8]
  2105                              <2> 	mov word [%6+2], ax
  2106                              <2> 	mov word ax, [bp+0x0A]
  2107                              <2> 	mov word [%6], ax
  2108                              <2> 	stkclose 0x0C
  2109                              <2> %endmacro
  2110                              <2> 
  2111                              <2> %macro idiv32 10
  2112                              <2> 	stkopen 0x11
  2113                              <2> 	mov ax,%1
  2114                              <2> 	mov ds,ax
  2115                              <2> 	mov ax,[%2+2]
  2116                              <2> 	mov word [bp+0], ax
  2117                              <2> 	mov ax,[%2]
  2118                              <2> 	mov word [bp+2], ax
  2119                              <2> 	mov ax,%3
  2120                              <2> 	mov ds,ax
  2121                              <2> 	mov ax,[%4+2]
  2122                              <2> 	mov word [bp+4], ax
  2123                              <2> 	mov ax,[%4]
  2124                              <2> 	mov word [bp+6], ax
  2125                              <2> 	call proc_idiv32
  2126                              <2> 	mov ax,sp
  2127                              <2> 	mov bp,ax
  2128                              <2> 	mov ax,%5
  2129                              <2> 	mov ds,ax
  2130                              <2> 	mov word ax, [bp+8]
  2131                              <2> 	mov word [%6+2], ax
  2132                              <2> 	mov word ax, [bp+0x0A]
  2133                              <2> 	mov word [%6], ax
  2134                              <2> 	mov ax,%7
  2135                              <2> 	mov ds,ax
  2136                              <2> 	mov word ax,[bp+0x0C]
  2137                              <2> 	mov word [%8+2],ax
  2138                              <2> 	mov word ax,[bp+0x0E]
  2139                              <2> 	mov word [%8],ax
  2140                              <2> 	mov ax,%9
  2141                              <2> 	mov ds,ax
  2142                              <2> 	mov byte al,[bp+0x10]
  2143                              <2> 	mov byte [%10],al
  2144                              <2> 	stkclose 0x11
  2145                              <2> %endmacro
  2146                              <2> 
  2147                              <2> %macro imul32 6
  2148                              <2> 	stkopen 0x0C
  2149                              <2> 	mov ax,%1
  2150                              <2> 	mov ds,ax
  2151                              <2> 	mov ax,[%2+2]
  2152                              <2> 	mov word [bp+0], ax
  2153                              <2> 	mov ax,[%2]
  2154                              <2> 	mov word [bp+2], ax
  2155                              <2> 	mov ax,%3
  2156                              <2> 	mov ds,ax
  2157                              <2> 	mov ax,[%4+2]
  2158                              <2> 	mov word [bp+4], ax
  2159                              <2> 	mov ax,[%4]
  2160                              <2> 	mov word [bp+6], ax
  2161                              <2> 	call proc_imul32
  2162                              <2> 	mov ax,sp
  2163                              <2> 	mov bp,ax
  2164                              <2> 	mov ax,%5
  2165                              <2> 	mov ds,ax
  2166                              <2> 	mov word ax, [bp+8]
  2167                              <2> 	mov word [%6+2], ax
  2168                              <2> 	mov word ax, [bp+0x0A]
  2169                              <2> 	mov word [%6], ax
  2170                              <2> 	stkclose 0x0C
  2171                              <2> %endmacro
  2172                              <2> 	
  2173                              <2> %macro cmp32 3
  2174                              <2> 	cmp32 cs, %1, cs, %2, %3
  2175                              <2> %endmacro	
  2176                              <2> 	
  2177                              <2> %macro cmp32 5
  2178                              <2> 	stkopen 9
  2179                              <2> 	mov ax,%1
  2180                              <2> 	mov ds,ax
  2181                              <2> 	mov word ax,[%2+2]
  2182                              <2> 	mov word [bp+0], ax
  2183                              <2> 	mov word ax,[%2]
  2184                              <2> 	mov word [bp+2], ax	
  2185                              <2> 	mov ax,%3
  2186                              <2> 	mov ds,ax
  2187                              <2> 	mov word ax,[%4+2]
  2188                              <2> 	mov word [bp+4], ax
  2189                              <2> 	mov word ax,[%4]
  2190                              <2> 	mov word [bp+6], ax	
  2191                              <2> 	call proc_cmp32
  2192                              <2> 	mov ax,sp
  2193                              <2> 	mov bp,ax
  2194                              <2> 	mov al,[bp+8]
  2195                              <2> 	mov byte %5,al
  2196                              <2> 	stkclose 9
  2197                              <2> %endmacro
  2198                              <2> 	
  2199                              <2> %macro shl32 2
  2200                              <2> 	shl32 cs, %1, %2
  2201                              <2> %endmacro	
  2202                              <2> 	
  2203                              <2> %macro shl32 3
  2204                              <2> 	stkopen 5
  2205                              <2> 	mov ax,%1
  2206                              <2> 	mov ds,ax
  2207                              <2> 	mov word ax,[%2+2]
  2208                              <2> 	mov word [bp+0], ax
  2209                              <2> 	mov word ax,[%2]
  2210                              <2> 	mov word [bp+2], ax
  2211                              <2> 	mov byte al, %3
  2212                              <2> 	mov byte [bp+4], al 
  2213                              <2> 	call proc_shl32
  2214                              <2> 	mov ax,sp
  2215                              <2> 	mov bp,ax
  2216                              <2> 	mov ax,%1
  2217                              <2> 	mov ds,ax
  2218                              <2> 	mov ax,[bp+0]
  2219                              <2> 	mov word [%2+2],ax
  2220                              <2> 	mov ax,[bp+2]
  2221                              <2> 	mov word [%2],ax
  2222                              <2> 	stkclose 5
  2223                              <2> %endmacro
  2224                              <2> 
  2225                              <2> 
  2226                              <2> %macro shr32 2
  2227                              <2> 	shr32 cs, %1, %2
  2228                              <2> %endmacro	
  2229                              <2> 	
  2230                              <2> %macro shr32 3
  2231                              <2> 	stkopen 5
  2232                              <2> 	mov ax,%1
  2233                              <2> 	mov ds,ax
  2234                              <2> 	mov word ax,[%2+2]
  2235                              <2> 	mov word [bp+0], ax
  2236                              <2> 	mov word ax,[%2]
  2237                              <2> 	mov word [bp+2], ax
  2238                              <2> 	mov byte al, %3
  2239                              <2> 	mov byte [bp+4], al 
  2240                              <2> 	call proc_shr32
  2241                              <2> 	mov ax,sp
  2242                              <2> 	mov bp,ax
  2243                              <2> 	mov ax,%1
  2244                              <2> 	mov ds,ax
  2245                              <2> 	mov ax,[bp+0]
  2246                              <2> 	mov word [%2+2],ax
  2247                              <2> 	mov ax,[bp+2]
  2248                              <2> 	mov word [%2],ax
  2249                              <2> 	stkclose 5
  2250                              <2> %endmacro
  2251                              <2> 
  2252                              <2> %macro inc16 2
  2253                              <2> 	mov ax,%1
  2254                              <2> 	mov ds,ax
  2255                              <2> 	inc word [%2]
  2256                              <2> %endmacro
  2257                              <2> 
  2258                              <2> %macro dec16 2
  2259                              <2> 	mov ax,%1
  2260                              <2> 	mov ds,ax
  2261                              <2> 	dec word [%2]
  2262                              <2> %endmacro
  2263                              <2> 
  2264                              <2> %macro add16 4	
  2265                              <2> 	mov ax,%3
  2266                              <2> 	mov ds,ax
  2267                              <2> 	mov bx,[%4]	
  2268                              <2> 	mov ax,%1
  2269                              <2> 	mov ds,ax	
  2270                              <2> 	add [%2],bx
  2271                              <2> %endmacro
  2272                              <2> 
  2273                              <2> %macro sub16 4
  2274                              <2> 	mov ax,%3
  2275                              <2> 	mov ds,ax
  2276                              <2> 	mov bx,[%4]
  2277                              <2> 	mov ax,%1
  2278                              <2> 	mov ds,ax
  2279                              <2> 	sub [%2],bx
  2280                              <2> %endmacro
  2281                              <2> 
  2282                              <2> %macro mul16 4
  2283                              <2> 	mov ax,%1
  2284                              <2> 	mov ds,ax
  2285                              <2> 	mov bx,[%2]
  2286                              <2> 	mov ax,%3
  2287                              <2> 	mov ds,ax
  2288                              <2> 	mov cx,[%4]
  2289                              <2> 	
  2290                              <2> 	mov ax,bx
  2291                              <2> 	imul cx
  2292                              <2> 	
  2293                              <2> 	mov dx,%1
  2294                              <2> 	mov ds,dx
  2295                              <2> 	mov [%2],ax
  2296                              <2> %endmacro
  2297                              <2> 
  2298                              <2> %macro div16 4
  2299                              <2> 	mov ax,%1
  2300                              <2> 	mov ds,ax
  2301                              <2> 	mov bx,[%2]
  2302                              <2> 	mov ax,%3
  2303                              <2> 	mov ds,ax
  2304                              <2> 	mov cx,[%4]
  2305                              <2> 	
  2306                              <2> 	xor dx,dx
  2307                              <2> 	mov ax,bx
  2308                              <2> 	idiv cx
  2309                              <2> 	
  2310                              <2> 	mov dx,%1
  2311                              <2> 	mov ds,dx
  2312                              <2> 	mov [%2],ax
  2313                              <2> %endmacro
  2314                              <2> 
  2315                              <2> 
  2316                              <2> %macro mod16 4
  2317                              <2> 	mov ax,%1
  2318                              <2> 	mov ds,ax
  2319                              <2> 	mov bx,[%2]
  2320                              <2> 	mov ax,%3
  2321                              <2> 	mov ds,ax
  2322                              <2> 	mov cx,[%4]
  2323                              <2> 	
  2324                              <2> 	xor dx,dx
  2325                              <2> 	mov ax,bx
  2326                              <2> 	idiv cx
  2327                              <2> 	
  2328                              <2> 	mov bx,%1
  2329                              <2> 	mov ds,bx
  2330                              <2> 	mov [%2],dx
  2331                              <2> %endmacro
  2332                              <2> 
  2333                              <2> %macro cmp16 5
  2334                              <2> 	mov ax,%1
  2335                              <2> 	mov ds,ax
  2336                              <2> 	mov bx,[%2]
  2337                              <2> 	mov ax,%3
  2338                              <2> 	mov ds,ax
  2339                              <2> 	mov	cx,[%4]
  2340                              <2> 	
  2341                              <2> 	cmp bx,cx
  2342                              <2> 	jg %%above
  2343                              <2> 	jl %%below
  2344                              <2> 		mov byte %5, 0
  2345                              <2> 		jmp %%endcmp
  2346                              <2> 	%%above:
  2347                              <2> 		mov byte %5, 1
  2348                              <2> 		jmp %%endcmp
  2349                              <2> 	%%below:
  2350                              <2> 		mov byte %5, -1
  2351                              <2> 	%%endcmp:
  2352                              <2> %endmacro
  2353                              <2> 
  2354                              <2> %macro chgsig 2
  2355                              <2> 	mov ax,%1
  2356                              <2> 	mov ds,ax
  2357                              <2> 	mov ax,[%2]
  2358                              <2> 	mov bx,0xFFFF
  2359                              <2> 	sub bx,ax
  2360                              <2> 	inc bx
  2361                              <2> 	mov [%2],bx
  2362                              <2> %endmacro
  2363                              <2> 	
  2364                              <2> %endif
  2365                              <1> 	%include "lib/float.mac"
  2366                              <2> 
  2367                              <2> %ifndef FLOAT_MAC
  2368                              <2> 	%define FLOAT_MAC
  2369                              <2> 	
  2370                              <2> 	%include "lib/float.asm"	
  2371                              <3> 
  2372                              <3> %ifndef FLOAT_ASM
  2373                              <3> 	%define FLOAT_ASM
  2374                              <3> 	
  2375                              <3> 	%include "lib/system.mac"
  2376                              <4>  
  2377                              <4> %ifndef SYSTEM_MAC
  2378                              <4>  	%define SYSTEM_MAC
  2379                              <4>  	
  2380                              <4> 	%ifndef TRUE
  2381                              <4> 		%define TRUE 01h
  2382                              <4> 	%endif
  2383                              <4> 	%ifndef FALSE
  2384                              <4> 		%define FALSE 00h
  2385                              <4> 	%endif
  2386                              <4> 	
  2387                              <4> %macro vlodsb 3
  2388                              <4> 	vlodsb cs, %1, %2, %3
  2389                              <4> %endmacro
  2390                              <4> 
  2391                              <4> %macro vstosb 3
  2392                              <4> 	vstosb cs, %1, %2, %3
  2393                              <4> %endmacro
  2394                              <4> 	 	
  2395                              <4> %macro int16toreg 2
  2396                              <4> 	int16toreg cs, %1, %2
  2397                              <4> %endmacro
  2398                              <4> 
  2399                              <4> %macro regtoint16 2
  2400                              <4> 	regtoint16 %1, cs, %2
  2401                              <4> %endmacro
  2402                              <4> 
  2403                              <4> %macro vstosb 4
  2404                              <4> 	push %1
  2405                              <4> 	pop ds
  2406                              <4> 	mov si,%2
  2407                              <4> 	add si,%3
  2408                              <4> 	mov byte [si],%4	
  2409                              <4> %endmacro
  2410                              <4> 
  2411                              <4> %macro vlodsb 4
  2412                              <4> 	push %1
  2413                              <4> 	pop ds
  2414                              <4> 	mov si,%2
  2415                              <4> 	add si,%3
  2416                              <4> 	mov byte %4,[si]	
  2417                              <4> %endmacro 	 
  2418                              <4> 
  2419                              <4> %macro int16toreg 3
  2420                              <4> 	push %2
  2421                              <4> 	push %1
  2422                              <4> 	pop ds
  2423                              <4> 	pop si
  2424                              <4> 	mov word %3,[si]	
  2425                              <4> %endmacro
  2426                              <4> 
  2427                              <4> %macro regtoint16 3
  2428                              <4> 	push %3
  2429                              <4> 	push %2
  2430                              <4> 	pop ds
  2431                              <4> 	pop si
  2432                              <4> 	mov word [si],%1	
  2433                              <4> %endmacro
  2434                              <4> 
  2435                              <4> %macro mov32 2
  2436                              <4> 	mov32 cs, %1, cs, %2
  2437                              <4> %endmacro
  2438                              <4> 
  2439                              <4> %macro mov16 2
  2440                              <4> 	mov16 cs, %1, cs, %2
  2441                              <4> %endmacro
  2442                              <4> 
  2443                              <4> %macro mov32 4
  2444                              <4> 	mov ax,%3
  2445                              <4> 	mov ds,ax
  2446                              <4> 	mov cx,[%4+2]
  2447                              <4> 	mov dx,[%4]
  2448                              <4> 	mov ax,%1
  2449                              <4> 	mov ds,ax
  2450                              <4> 	mov [%2+2],cx
  2451                              <4> 	mov [%2],dx
  2452                              <4> %endmacro
  2453                              <4> 
  2454                              <4> %macro mov16 4
  2455                              <4> 	mov ax,%3
  2456                              <4> 	mov ds,ax
  2457                              <4> 	mov bx,[%4]
  2458                              <4> 	mov ax,%1
  2459                              <4> 	mov ds,ax
  2460                              <4> 	mov [%2],bx
  2461                              <4> %endmacro
  2462                              <4>  	 	
  2463                              <4> %macro mformat 4
  2464                              <4> 	stkopen 8
  2465                              <4> 	mov word [ bp + 0 ], %1
  2466                              <4> 	mov word [ bp + 2 ], %2
  2467                              <4> 	mov word [ bp + 4 ], %3
  2468                              <4> 	mov word [ bp + 6 ], %4
  2469                              <4> 	call kernel_segment:mformat
  2470                              <4> 	stkclose 8
  2471                              <4> %endmacro
  2472                              <4> 
  2473                              <4> %macro malloc 6
  2474                              <4> 	stkopen 0Bh
  2475                              <4> 	mov word [ bp + 4 ], %3
  2476                              <4> 	mov word [ bp + 6 ], %4
  2477                              <4> 	mov word [ bp + 8 ], %5	
  2478                              <4> 	call kernel_segment:malloc
  2479                              <4> 	push sp
  2480                              <4> 	pop bp
  2481                              <4> 	mov word %1, [ bp ]
  2482                              <4> 	mov word %2, [ bp + 2 ]
  2483                              <4> 	mov byte %6, [ bp + 0x0A ]
  2484                              <4> 	stkclose 0Bh
  2485                              <4> %endmacro 	
  2486                              <4> 
  2487                              <4> %macro laddr 2
  2488                              <4> 	laddr %1, %2, %1, %2
  2489                              <4> %endmacro
  2490                              <4> 
  2491                              <4> %macro faddr 2
  2492                              <4> 	faddr %1, %2, %1, %2
  2493                              <4> %endmacro
  2494                              <4>  	
  2495                              <4> %macro laddr 4
  2496                              <4> 	stkopen 8
  2497                              <4> 	mov word [ bp + 4 ], %3
  2498                              <4> 	mov word [ bp + 6 ], %4	
  2499                              <4> 	call kernel_segment:laddr
  2500                              <4> 	push sp
  2501                              <4> 	pop bp
  2502                              <4> 	mov word %1, [ bp + 0 ]
  2503                              <4> 	mov word %2, [ bp + 2 ]	
  2504                              <4> 	stkclose 8
  2505                              <4> %endmacro
  2506                              <4> 
  2507                              <4> %macro faddr 4
  2508                              <4> 	stkopen 8
  2509                              <4> 	mov word [ bp + 4 ], %3
  2510                              <4> 	mov word [ bp + 6 ], %4	
  2511                              <4> 	call kernel_segment:faddr
  2512                              <4> 	push sp
  2513                              <4> 	pop bp
  2514                              <4> 	mov word %1, [ bp + 0 ]
  2515                              <4> 	mov word %2, [ bp + 2 ]	
  2516                              <4> 	stkclose 8
  2517                              <4> %endmacro	
  2518                              <4>  
  2519                              <4> 
  2520                              <4> %macro stkopen 1		
  2521                              <4> 	sub word sp, %1
  2522                              <4> 	push sp
  2523                              <4> 	pop bp
  2524                              <4> %endmacro
  2525                              <4> 
  2526                              <4> %macro stkclose 1
  2527                              <4> 	add word sp, %1
  2528                              <4> %endmacro
  2529                              <4> 
  2530                              <4> %macro stkload 1-* 	
  2531                              <4>  	%rep %0
  2532                              <4>  	 	%rotate -1
  2533                              <4>  		pop %1
  2534                              <4>  	%endrep
  2535                              <4>  	%rep %0
  2536                              <4>  		push %1
  2537                              <4>  		%rotate 1
  2538                              <4>  	%endrep
  2539                              <4> %endmacro
  2540                              <4> 
  2541                              <4> %macro stkpush 1-* 	
  2542                              <4>  	%rep %0
  2543                              <4>  		push %1
  2544                              <4>  		%rotate 1
  2545                              <4>  	%endrep 	
  2546                              <4> %endmacro
  2547                              <4>  
  2548                              <4> %macro stkpop 1-*
  2549                              <4>  	%rep %0
  2550                              <4>  	 	%rotate -1
  2551                              <4>  		pop %1
  2552                              <4>  	%endrep 	 	
  2553                              <4> %endmacro
  2554                              <4> 
  2555                              <4> %macro delay 1
  2556                              <4> 	delay cs, %1
  2557                              <4> %endmacro
  2558                              <4> 
  2559                              <4> %macro delay 2
  2560                              <4> 	mov ax,%1
  2561                              <4> 	mov ds,ax
  2562                              <4> 	
  2563                              <4> 	mov ah,86h
  2564                              <4> 	mov cx,[%2+2]
  2565                              <4> 	mov dx,[%2]
  2566                              <4> 	int 15h	
  2567                              <4> %endmacro
  2568                              <4> 
  2569                              <4> %endif 
  2570                              <3> 	%include "lib/math.mac"
  2571                              <4> 
  2572                              <4> %ifndef MATH_MAC
  2573                              <4> 	%define MATH_MAC
  2574                              <4> 	
  2575                              <4> 	%include "lib/math.asm"
  2576                              <4> 	%include "lib/system.mac"
  2577                              <4> 
  2578                              <4> %macro chgsig 1
  2579                              <4> 	chgsig cs, %1
  2580                              <4> %endmacro
  2581                              <4> 
  2582                              <4> %macro cmp16 3
  2583                              <4> 	cmp16 cs, %1, cs, %2, %3
  2584                              <4> %endmacro
  2585                              <4> 
  2586                              <4> %macro mul16 2
  2587                              <4> 	mul16 cs, %1, cs, %2
  2588                              <4> %endmacro
  2589                              <4> 
  2590                              <4> %macro div16 2
  2591                              <4> 	div16 cs, %1, cs, %2
  2592                              <4> %endmacro
  2593                              <4> 
  2594                              <4> %macro mod16 2
  2595                              <4> 	mod16 cs, %1, cs, %2
  2596                              <4> %endmacro
  2597                              <4> 
  2598                              <4> %macro inc16 1
  2599                              <4> 	inc16 cs, %1
  2600                              <4> %endmacro
  2601                              <4> 
  2602                              <4> %macro dec16 1
  2603                              <4> 	dec16 cs, %1
  2604                              <4> %endmacro
  2605                              <4> 
  2606                              <4> %macro add16 2
  2607                              <4> 	add16 cs, %1, cs, %2
  2608                              <4> %endmacro
  2609                              <4> 
  2610                              <4> %macro sub16 2
  2611                              <4> 	sub16 cs, %1, cs, %2
  2612                              <4> %endmacro
  2613                              <4> 
  2614                              <4> %macro int32to16 2
  2615                              <4> 	int32to16 cs, %1, %2
  2616                              <4> %endmacro
  2617                              <4> 
  2618                              <4> %macro int16to32 2
  2619                              <4> 	int16to32 %1, cs, %2
  2620                              <4> %endmacro
  2621                              <4> 
  2622                              <4> %macro idiv32 5
  2623                              <4> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2624                              <4> %endmacro
  2625                              <4> 
  2626                              <4> %macro imul32 3
  2627                              <4> 	imul32 cs, %1, cs, %2, cs, %3
  2628                              <4> %endmacro
  2629                              <4> 
  2630                              <4> %macro div32 5
  2631                              <4> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2632                              <4> %endmacro
  2633                              <4> 
  2634                              <4> %macro mul32 3
  2635                              <4> 	mul32 cs, %1, cs, %2, cs, %3
  2636                              <4> %endmacro
  2637                              <4> 	
  2638                              <4> %macro add32 3
  2639                              <4> 	add32 cs, %1, cs, %2, cs, %3
  2640                              <4> %endmacro
  2641                              <4> 
  2642                              <4> %macro sub32 3
  2643                              <4> 	sub32 cs, %1, cs, %2, cs, %3
  2644                              <4> %endmacro
  2645                              <4> 
  2646                              <4> %macro int32to16 3
  2647                              <4> 	stkopen 0x06
  2648                              <4> 	mov ax,%1
  2649                              <4> 	mov ds,ax
  2650                              <4> 	mov ax,[%2+2]
  2651                              <4> 	mov word [bp+0], ax
  2652                              <4> 	mov ax,[%2]	
  2653                              <4> 	mov word [bp+2], ax
  2654                              <4> 	call proc_int32to16
  2655                              <4> 	mov ax,sp
  2656                              <4> 	mov bp,ax
  2657                              <4> 	mov ax,[bp+4]
  2658                              <4> 	mov word %3, ax	
  2659                              <4> 	stkclose 0x06
  2660                              <4> %endmacro
  2661                              <4> 
  2662                              <4> %macro int16to32 3
  2663                              <4> 	stkopen 0x06
  2664                              <4> 	mov word [bp+0], %1	
  2665                              <4> 	call proc_int16to32
  2666                              <4> 	mov ax,sp
  2667                              <4> 	mov bp,ax
  2668                              <4> 	mov ax,%2
  2669                              <4> 	mov ds,ax
  2670                              <4> 	mov ax,[bp+2]
  2671                              <4> 	mov [%3+2],ax
  2672                              <4> 	mov ax,[bp+4]
  2673                              <4> 	mov [%3],ax	
  2674                              <4> 	stkclose 0x06
  2675                              <4> %endmacro
  2676                              <4> 
  2677                              <4> %macro div32 10
  2678                              <4> 	stkopen 0x11
  2679                              <4> 	mov ax,%1
  2680                              <4> 	mov ds,ax
  2681                              <4> 	mov ax,[%2+2]
  2682                              <4> 	mov word [bp+0], ax
  2683                              <4> 	mov ax,[%2]
  2684                              <4> 	mov word [bp+2], ax
  2685                              <4> 	mov ax,%3
  2686                              <4> 	mov ds,ax
  2687                              <4> 	mov ax,[%4+2]
  2688                              <4> 	mov word [bp+4], ax
  2689                              <4> 	mov ax,[%4]
  2690                              <4> 	mov word [bp+6], ax
  2691                              <4> 	call proc_div32
  2692                              <4> 	mov ax,sp
  2693                              <4> 	mov bp,ax
  2694                              <4> 	mov ax,%5
  2695                              <4> 	mov ds,ax
  2696                              <4> 	mov word ax, [bp+8]
  2697                              <4> 	mov word [%6+2], ax
  2698                              <4> 	mov word ax, [bp+0x0A]
  2699                              <4> 	mov word [%6], ax
  2700                              <4> 	mov ax,%7
  2701                              <4> 	mov ds,ax
  2702                              <4> 	mov word ax,[bp+0x0C]
  2703                              <4> 	mov word [%8+2],ax
  2704                              <4> 	mov word ax,[bp+0x0E]
  2705                              <4> 	mov word [%8],ax
  2706                              <4> 	mov ax,%9
  2707                              <4> 	mov ds,ax
  2708                              <4> 	mov byte al,[bp+0x10]
  2709                              <4> 	mov byte [%10],al
  2710                              <4> 	stkclose 0x11
  2711                              <4> %endmacro
  2712                              <4> 	
  2713                              <4> %macro mul32 6
  2714                              <4> 	stkopen 0x0C
  2715                              <4> 	mov ax,%1
  2716                              <4> 	mov ds,ax
  2717                              <4> 	mov ax,[%2+2]
  2718                              <4> 	mov word [bp+0], ax
  2719                              <4> 	mov ax,[%2]
  2720                              <4> 	mov word [bp+2], ax
  2721                              <4> 	mov ax,%3
  2722                              <4> 	mov ds,ax
  2723                              <4> 	mov ax,[%4+2]
  2724                              <4> 	mov word [bp+4], ax
  2725                              <4> 	mov ax,[%4]
  2726                              <4> 	mov word [bp+6], ax
  2727                              <4> 	call proc_mul32
  2728                              <4> 	mov ax,sp
  2729                              <4> 	mov bp,ax
  2730                              <4> 	mov ax,%5
  2731                              <4> 	mov ds,ax
  2732                              <4> 	mov word ax, [bp+8]
  2733                              <4> 	mov word [%6+2], ax
  2734                              <4> 	mov word ax, [bp+0x0A]
  2735                              <4> 	mov word [%6], ax
  2736                              <4> 	stkclose 0x0C
  2737                              <4> %endmacro	
  2738                              <4> 	
  2739                              <4> %macro add32 6
  2740                              <4> 	stkopen 0x0C
  2741                              <4> 	mov ax,%1
  2742                              <4> 	mov ds,ax
  2743                              <4> 	mov ax,[%2+2]
  2744                              <4> 	mov word [bp+0], ax
  2745                              <4> 	mov ax,[%2]
  2746                              <4> 	mov word [bp+2], ax
  2747                              <4> 	mov ax,%3
  2748                              <4> 	mov ds,ax
  2749                              <4> 	mov ax,[%4+2]
  2750                              <4> 	mov word [bp+4], ax
  2751                              <4> 	mov ax,[%4]
  2752                              <4> 	mov word [bp+6], ax
  2753                              <4> 	call proc_add32
  2754                              <4> 	mov ax,sp
  2755                              <4> 	mov bp,ax
  2756                              <4> 	mov ax,%5
  2757                              <4> 	mov ds,ax
  2758                              <4> 	mov word ax, [bp+8]
  2759                              <4> 	mov word [%6+2], ax
  2760                              <4> 	mov word ax, [bp+0x0A]
  2761                              <4> 	mov word [%6], ax
  2762                              <4> 	stkclose 0x0C
  2763                              <4> %endmacro
  2764                              <4> 
  2765                              <4> %macro sub32 6
  2766                              <4> 	stkopen 0x0C
  2767                              <4> 	mov ax,%1
  2768                              <4> 	mov ds,ax
  2769                              <4> 	mov ax,[%2+2]
  2770                              <4> 	mov word [bp+0], ax
  2771                              <4> 	mov ax,[%2]
  2772                              <4> 	mov word [bp+2], ax
  2773                              <4> 	mov ax,%3
  2774                              <4> 	mov ds,ax
  2775                              <4> 	mov ax,[%4+2]
  2776                              <4> 	mov word [bp+4], ax
  2777                              <4> 	mov ax,[%4]
  2778                              <4> 	mov word [bp+6], ax
  2779                              <4> 	call proc_sub32
  2780                              <4> 	mov ax,sp
  2781                              <4> 	mov bp,ax
  2782                              <4> 	mov ax,%5
  2783                              <4> 	mov ds,ax
  2784                              <4> 	mov word ax, [bp+8]
  2785                              <4> 	mov word [%6+2], ax
  2786                              <4> 	mov word ax, [bp+0x0A]
  2787                              <4> 	mov word [%6], ax
  2788                              <4> 	stkclose 0x0C
  2789                              <4> %endmacro
  2790                              <4> 
  2791                              <4> %macro idiv32 10
  2792                              <4> 	stkopen 0x11
  2793                              <4> 	mov ax,%1
  2794                              <4> 	mov ds,ax
  2795                              <4> 	mov ax,[%2+2]
  2796                              <4> 	mov word [bp+0], ax
  2797                              <4> 	mov ax,[%2]
  2798                              <4> 	mov word [bp+2], ax
  2799                              <4> 	mov ax,%3
  2800                              <4> 	mov ds,ax
  2801                              <4> 	mov ax,[%4+2]
  2802                              <4> 	mov word [bp+4], ax
  2803                              <4> 	mov ax,[%4]
  2804                              <4> 	mov word [bp+6], ax
  2805                              <4> 	call proc_idiv32
  2806                              <4> 	mov ax,sp
  2807                              <4> 	mov bp,ax
  2808                              <4> 	mov ax,%5
  2809                              <4> 	mov ds,ax
  2810                              <4> 	mov word ax, [bp+8]
  2811                              <4> 	mov word [%6+2], ax
  2812                              <4> 	mov word ax, [bp+0x0A]
  2813                              <4> 	mov word [%6], ax
  2814                              <4> 	mov ax,%7
  2815                              <4> 	mov ds,ax
  2816                              <4> 	mov word ax,[bp+0x0C]
  2817                              <4> 	mov word [%8+2],ax
  2818                              <4> 	mov word ax,[bp+0x0E]
  2819                              <4> 	mov word [%8],ax
  2820                              <4> 	mov ax,%9
  2821                              <4> 	mov ds,ax
  2822                              <4> 	mov byte al,[bp+0x10]
  2823                              <4> 	mov byte [%10],al
  2824                              <4> 	stkclose 0x11
  2825                              <4> %endmacro
  2826                              <4> 
  2827                              <4> %macro imul32 6
  2828                              <4> 	stkopen 0x0C
  2829                              <4> 	mov ax,%1
  2830                              <4> 	mov ds,ax
  2831                              <4> 	mov ax,[%2+2]
  2832                              <4> 	mov word [bp+0], ax
  2833                              <4> 	mov ax,[%2]
  2834                              <4> 	mov word [bp+2], ax
  2835                              <4> 	mov ax,%3
  2836                              <4> 	mov ds,ax
  2837                              <4> 	mov ax,[%4+2]
  2838                              <4> 	mov word [bp+4], ax
  2839                              <4> 	mov ax,[%4]
  2840                              <4> 	mov word [bp+6], ax
  2841                              <4> 	call proc_imul32
  2842                              <4> 	mov ax,sp
  2843                              <4> 	mov bp,ax
  2844                              <4> 	mov ax,%5
  2845                              <4> 	mov ds,ax
  2846                              <4> 	mov word ax, [bp+8]
  2847                              <4> 	mov word [%6+2], ax
  2848                              <4> 	mov word ax, [bp+0x0A]
  2849                              <4> 	mov word [%6], ax
  2850                              <4> 	stkclose 0x0C
  2851                              <4> %endmacro
  2852                              <4> 	
  2853                              <4> %macro cmp32 3
  2854                              <4> 	cmp32 cs, %1, cs, %2, %3
  2855                              <4> %endmacro	
  2856                              <4> 	
  2857                              <4> %macro cmp32 5
  2858                              <4> 	stkopen 9
  2859                              <4> 	mov ax,%1
  2860                              <4> 	mov ds,ax
  2861                              <4> 	mov word ax,[%2+2]
  2862                              <4> 	mov word [bp+0], ax
  2863                              <4> 	mov word ax,[%2]
  2864                              <4> 	mov word [bp+2], ax	
  2865                              <4> 	mov ax,%3
  2866                              <4> 	mov ds,ax
  2867                              <4> 	mov word ax,[%4+2]
  2868                              <4> 	mov word [bp+4], ax
  2869                              <4> 	mov word ax,[%4]
  2870                              <4> 	mov word [bp+6], ax	
  2871                              <4> 	call proc_cmp32
  2872                              <4> 	mov ax,sp
  2873                              <4> 	mov bp,ax
  2874                              <4> 	mov al,[bp+8]
  2875                              <4> 	mov byte %5,al
  2876                              <4> 	stkclose 9
  2877                              <4> %endmacro
  2878                              <4> 	
  2879                              <4> %macro shl32 2
  2880                              <4> 	shl32 cs, %1, %2
  2881                              <4> %endmacro	
  2882                              <4> 	
  2883                              <4> %macro shl32 3
  2884                              <4> 	stkopen 5
  2885                              <4> 	mov ax,%1
  2886                              <4> 	mov ds,ax
  2887                              <4> 	mov word ax,[%2+2]
  2888                              <4> 	mov word [bp+0], ax
  2889                              <4> 	mov word ax,[%2]
  2890                              <4> 	mov word [bp+2], ax
  2891                              <4> 	mov byte al, %3
  2892                              <4> 	mov byte [bp+4], al 
  2893                              <4> 	call proc_shl32
  2894                              <4> 	mov ax,sp
  2895                              <4> 	mov bp,ax
  2896                              <4> 	mov ax,%1
  2897                              <4> 	mov ds,ax
  2898                              <4> 	mov ax,[bp+0]
  2899                              <4> 	mov word [%2+2],ax
  2900                              <4> 	mov ax,[bp+2]
  2901                              <4> 	mov word [%2],ax
  2902                              <4> 	stkclose 5
  2903                              <4> %endmacro
  2904                              <4> 
  2905                              <4> 
  2906                              <4> %macro shr32 2
  2907                              <4> 	shr32 cs, %1, %2
  2908                              <4> %endmacro	
  2909                              <4> 	
  2910                              <4> %macro shr32 3
  2911                              <4> 	stkopen 5
  2912                              <4> 	mov ax,%1
  2913                              <4> 	mov ds,ax
  2914                              <4> 	mov word ax,[%2+2]
  2915                              <4> 	mov word [bp+0], ax
  2916                              <4> 	mov word ax,[%2]
  2917                              <4> 	mov word [bp+2], ax
  2918                              <4> 	mov byte al, %3
  2919                              <4> 	mov byte [bp+4], al 
  2920                              <4> 	call proc_shr32
  2921                              <4> 	mov ax,sp
  2922                              <4> 	mov bp,ax
  2923                              <4> 	mov ax,%1
  2924                              <4> 	mov ds,ax
  2925                              <4> 	mov ax,[bp+0]
  2926                              <4> 	mov word [%2+2],ax
  2927                              <4> 	mov ax,[bp+2]
  2928                              <4> 	mov word [%2],ax
  2929                              <4> 	stkclose 5
  2930                              <4> %endmacro
  2931                              <4> 
  2932                              <4> %macro inc16 2
  2933                              <4> 	mov ax,%1
  2934                              <4> 	mov ds,ax
  2935                              <4> 	inc word [%2]
  2936                              <4> %endmacro
  2937                              <4> 
  2938                              <4> %macro dec16 2
  2939                              <4> 	mov ax,%1
  2940                              <4> 	mov ds,ax
  2941                              <4> 	dec word [%2]
  2942                              <4> %endmacro
  2943                              <4> 
  2944                              <4> %macro add16 4	
  2945                              <4> 	mov ax,%3
  2946                              <4> 	mov ds,ax
  2947                              <4> 	mov bx,[%4]	
  2948                              <4> 	mov ax,%1
  2949                              <4> 	mov ds,ax	
  2950                              <4> 	add [%2],bx
  2951                              <4> %endmacro
  2952                              <4> 
  2953                              <4> %macro sub16 4
  2954                              <4> 	mov ax,%3
  2955                              <4> 	mov ds,ax
  2956                              <4> 	mov bx,[%4]
  2957                              <4> 	mov ax,%1
  2958                              <4> 	mov ds,ax
  2959                              <4> 	sub [%2],bx
  2960                              <4> %endmacro
  2961                              <4> 
  2962                              <4> %macro mul16 4
  2963                              <4> 	mov ax,%1
  2964                              <4> 	mov ds,ax
  2965                              <4> 	mov bx,[%2]
  2966                              <4> 	mov ax,%3
  2967                              <4> 	mov ds,ax
  2968                              <4> 	mov cx,[%4]
  2969                              <4> 	
  2970                              <4> 	mov ax,bx
  2971                              <4> 	imul cx
  2972                              <4> 	
  2973                              <4> 	mov dx,%1
  2974                              <4> 	mov ds,dx
  2975                              <4> 	mov [%2],ax
  2976                              <4> %endmacro
  2977                              <4> 
  2978                              <4> %macro div16 4
  2979                              <4> 	mov ax,%1
  2980                              <4> 	mov ds,ax
  2981                              <4> 	mov bx,[%2]
  2982                              <4> 	mov ax,%3
  2983                              <4> 	mov ds,ax
  2984                              <4> 	mov cx,[%4]
  2985                              <4> 	
  2986                              <4> 	xor dx,dx
  2987                              <4> 	mov ax,bx
  2988                              <4> 	idiv cx
  2989                              <4> 	
  2990                              <4> 	mov dx,%1
  2991                              <4> 	mov ds,dx
  2992                              <4> 	mov [%2],ax
  2993                              <4> %endmacro
  2994                              <4> 
  2995                              <4> 
  2996                              <4> %macro mod16 4
  2997                              <4> 	mov ax,%1
  2998                              <4> 	mov ds,ax
  2999                              <4> 	mov bx,[%2]
  3000                              <4> 	mov ax,%3
  3001                              <4> 	mov ds,ax
  3002                              <4> 	mov cx,[%4]
  3003                              <4> 	
  3004                              <4> 	xor dx,dx
  3005                              <4> 	mov ax,bx
  3006                              <4> 	idiv cx
  3007                              <4> 	
  3008                              <4> 	mov bx,%1
  3009                              <4> 	mov ds,bx
  3010                              <4> 	mov [%2],dx
  3011                              <4> %endmacro
  3012                              <4> 
  3013                              <4> %macro cmp16 5
  3014                              <4> 	mov ax,%1
  3015                              <4> 	mov ds,ax
  3016                              <4> 	mov bx,[%2]
  3017                              <4> 	mov ax,%3
  3018                              <4> 	mov ds,ax
  3019                              <4> 	mov	cx,[%4]
  3020                              <4> 	
  3021                              <4> 	cmp bx,cx
  3022                              <4> 	jg %%above
  3023                              <4> 	jl %%below
  3024                              <4> 		mov byte %5, 0
  3025                              <4> 		jmp %%endcmp
  3026                              <4> 	%%above:
  3027                              <4> 		mov byte %5, 1
  3028                              <4> 		jmp %%endcmp
  3029                              <4> 	%%below:
  3030                              <4> 		mov byte %5, -1
  3031                              <4> 	%%endcmp:
  3032                              <4> %endmacro
  3033                              <4> 
  3034                              <4> %macro chgsig 2
  3035                              <4> 	mov ax,%1
  3036                              <4> 	mov ds,ax
  3037                              <4> 	mov ax,[%2]
  3038                              <4> 	mov bx,0xFFFF
  3039                              <4> 	sub bx,ax
  3040                              <4> 	inc bx
  3041                              <4> 	mov [%2],bx
  3042                              <4> %endmacro
  3043                              <4> 	
  3044                              <4> %endif
  3045                              <3> 	
  3046                              <3> %macro __fltoint16 3
  3047                              <3> 	stkopen 0x06
  3048                              <3> 	mov word [bp+0],%1
  3049                              <3> 	mov word [bp+2],%2
  3050                              <3> 	call proc_fltoint16
  3051                              <3> 	push sp
  3052                              <3> 	pop bp
  3053                              <3> 	mov word %3,[bp+4]
  3054                              <3> 	stkclose 0x06
  3055                              <3> %endmacro
  3056                              <3> 
  3057                              <3> %macro __flroundtoint16 3
  3058                              <3> 	stkopen 0x06
  3059                              <3> 	mov word [bp+0],%1
  3060                              <3> 	mov word [bp+2],%2
  3061                              <3> 	call proc_flroundtoint16
  3062                              <3> 	push sp
  3063                              <3> 	pop bp
  3064                              <3> 	mov word %3,[bp+4]
  3065                              <3> 	stkclose 0x06
  3066                              <3> %endmacro
  3067                              <3> 
  3068                              <3> %macro __int16tofl 3	
  3069                              <3> 	stkopen 0x06
  3070                              <3> 	mov word [bp+0],%1
  3071                              <3> 	call proc_int16tofl
  3072                              <3> 	push sp
  3073                              <3> 	pop bp
  3074                              <3> 	mov word %2,[bp+2]
  3075                              <3> 	mov word %3,[bp+4]
  3076                              <3> 	stkclose 0x06
  3077                              <3> %endmacro
  3078                              <3> 		
  3079                              <3> %macro __flroundtoint32 4
  3080                              <3> 	stkopen 0x08
  3081                              <3> 	mov word [bp+0],%1
  3082                              <3> 	mov word [bp+2],%2
  3083                              <3> 	call proc_flroundtoint32
  3084                              <3> 	push sp
  3085                              <3> 	pop bp
  3086                              <3> 	mov word %3,[bp+4]
  3087                              <3> 	mov word %4,[bp+6]
  3088                              <3> 	stkclose 0x08
  3089                              <3> %endmacro		
  3090                              <3> 		
  3091                              <3> %macro __fltoint32 4
  3092                              <3> 	stkopen 0x08
  3093                              <3> 	mov word [bp+0],%1
  3094                              <3> 	mov word [bp+2],%2
  3095                              <3> 	call proc_fltoint32
  3096                              <3> 	push sp
  3097                              <3> 	pop bp
  3098                              <3> 	mov word %3,[bp+4]
  3099                              <3> 	mov word %4,[bp+6]
  3100                              <3> 	stkclose 0x08
  3101                              <3> %endmacro
  3102                              <3> 
  3103                              <3> %macro __int32tofl 4
  3104                              <3> 	stkopen 0x08
  3105                              <3> 	mov word [bp+0],%1
  3106                              <3> 	mov word [bp+2],%2
  3107                              <3> 	call proc_int32tofl
  3108                              <3> 	push sp
  3109                              <3> 	pop bp
  3110                              <3> 	mov word %3,[bp+4]
  3111                              <3> 	mov word %4,[bp+6]
  3112                              <3> 	stkclose 0x08
  3113                              <3> %endmacro
  3114                              <3> 
  3115                              <3> %macro __flcmp 5
  3116                              <3> 	stkopen 0x09
  3117                              <3> 	mov word [bp+0],%1
  3118                              <3> 	mov word [bp+2],%2
  3119                              <3> 	mov word [bp+4],%3
  3120                              <3> 	mov word [bp+6],%4
  3121                              <3> 	call proc_flcmp
  3122                              <3> 	push sp
  3123                              <3> 	pop bp
  3124                              <3> 	mov byte %5, [bp+8]
  3125                              <3> 	stkclose 0x09
  3126                              <3> %endmacro
  3127                              <3> 	
  3128                              <3> %macro __flshl 2
  3129                              <3> 	stkopen 0x03
  3130                              <3> 	mov word [bp+0],%1
  3131                              <3> 	mov byte [bp+2],%2
  3132                              <3> 	call proc_flshl
  3133                              <3> 	push sp
  3134                              <3> 	pop bp
  3135                              <3> 	mov word %1,[bp+0]
  3136                              <3> 	stkclose 0x03
  3137                              <3> %endmacro	
  3138                              <3> 
  3139                              <3> %macro __flshr 2
  3140                              <3> 	stkopen 0x03
  3141                              <3> 	mov word [bp+0],%1
  3142                              <3> 	mov byte [bp+2],%2
  3143                              <3> 	call proc_flshr
  3144                              <3> 	push sp
  3145                              <3> 	pop bp
  3146                              <3> 	mov word %1,[bp+0]
  3147                              <3> 	stkclose 0x03
  3148                              <3> %endmacro	
  3149                              <3> 	
  3150                              <3> %macro __flinvsig 1
  3151                              <3> 	stkopen 0x02
  3152                              <3> 	mov word [bp+0],%1
  3153                              <3> 	call proc_flinvsig
  3154                              <3> 	push sp
  3155                              <3> 	pop bp
  3156                              <3> 	mov word %1, [bp+0]
  3157                              <3> 	stkclose 0x02
  3158                              <3> %endmacro
  3159                              <3> 
  3160                              <3> %macro __flsetsig 1
  3161                              <3> 	stkopen 0x04
  3162                              <3> 	mov word [bp+0],%1
  3163                              <3> 	mov word [bp+2],0x8000
  3164                              <3> 	call proc_flsetsig
  3165                              <3> 	push sp
  3166                              <3> 	pop bp
  3167                              <3> 	mov word %1, [bp+0]
  3168                              <3> 	stkclose 0x04
  3169                              <3> %endmacro	
  3170                              <3> 
  3171                              <3> %macro __flclearsig 1
  3172                              <3> 	stkopen 0x04
  3173                              <3> 	mov word [bp+0],%1
  3174                              <3> 	mov word [bp+2],0
  3175                              <3> 	call proc_flclrsig
  3176                              <3> 	push sp
  3177                              <3> 	pop bp
  3178                              <3> 	mov word %1, [bp+0]
  3179                              <3> 	stkclose 0x04
  3180                              <3> %endmacro		
  3181                              <3> 	
  3182                              <3> %macro __fladd 6
  3183                              <3> 	stkopen 0x0E
  3184                              <3> 	mov word [bp+0],%1
  3185                              <3> 	mov word [bp+2],%2
  3186                              <3> 	mov word [bp+4],%3
  3187                              <3> 	mov word [bp+6],%4
  3188                              <3> 	mov word [bp+0x0C],0
  3189                              <3> 	call proc_fladdorsub
  3190                              <3> 	push sp
  3191                              <3> 	pop bp
  3192                              <3> 	mov word %5,[bp+8]
  3193                              <3> 	mov word %6,[bp+0x0A]
  3194                              <3> 	stkclose 0x0E
  3195                              <3> %endmacro
  3196                              <3> 
  3197                              <3> %macro __flsub 6
  3198                              <3> 	stkopen 0x0E
  3199                              <3> 	mov word [bp+0],%1
  3200                              <3> 	mov word [bp+2],%2
  3201                              <3> 	mov word [bp+4],%3
  3202                              <3> 	mov word [bp+6],%4
  3203                              <3> 	mov word [bp+0x0C],0x8000
  3204                              <3> 	call proc_fladdorsub
  3205                              <3> 	push sp
  3206                              <3> 	pop bp
  3207                              <3> 	mov word %5,[bp+8]
  3208                              <3> 	mov word %6,[bp+0x0A]
  3209                              <3> 	stkclose 0x0E
  3210                              <3> %endmacro
  3211                              <3> 
  3212                              <3> %macro __flmul 6
  3213                              <3> 	stkopen 0x0E
  3214                              <3> 	mov word [bp+0],%1
  3215                              <3> 	mov word [bp+2],%2
  3216                              <3> 	mov word [bp+4],%3
  3217                              <3> 	mov word [bp+6],%4
  3218                              <3> 	call proc_flmul
  3219                              <3> 	push sp
  3220                              <3> 	pop bp
  3221                              <3> 	mov word %5,[bp+8]
  3222                              <3> 	mov word %6,[bp+0x0A]
  3223                              <3> 	stkclose 0x0E
  3224                              <3> %endmacro
  3225                              <3> 
  3226                              <3> %macro __fldiv 6
  3227                              <3> 	stkopen 0x0E
  3228                              <3> 	mov word [bp+0],%1
  3229                              <3> 	mov word [bp+2],%2
  3230                              <3> 	mov word [bp+4],%3
  3231                              <3> 	mov word [bp+6],%4
  3232                              <3> 	call proc_fldiv
  3233                              <3> 	push sp
  3234                              <3> 	pop bp
  3235                              <3> 	mov word %5,[bp+8]
  3236                              <3> 	mov word %6,[bp+0x0A]
  3237                              <3> 	stkclose 0x0E
  3238                              <3> %endmacro
  3239                              <3> 
  3240                              <3> %macro __validate 7
  3241                              <3> 	stkopen 0x0D
  3242                              <3> 	mov word [bp+0],%1
  3243                              <3> 	mov word [bp+2],%2
  3244                              <3> 	mov word [bp+4],%3
  3245                              <3> 	mov word [bp+6],%4
  3246                              <3> 	call proc__validate
  3247                              <3> 	push sp
  3248                              <3> 	pop bp
  3249                              <3> 	mov word %5,[bp+8]
  3250                              <3> 	mov word %6,[bp+0x0A]
  3251                              <3> 	mov byte %7,[bp+0x0C]
  3252                              <3> 	stkclose 0x0D
  3253                              <3> %endmacro
  3254                              <3> 
  3255                              <3> %macro __div_validate 7
  3256                              <3> 	stkopen 0x0D
  3257                              <3> 	mov word [bp+0],%1
  3258                              <3> 	mov word [bp+2],%2
  3259                              <3> 	mov word [bp+4],%3
  3260                              <3> 	mov word [bp+6],%4
  3261                              <3> 	call proc__div_validate
  3262                              <3> 	push sp
  3263                              <3> 	pop bp
  3264                              <3> 	mov word %5,[bp+8]
  3265                              <3> 	mov word %6,[bp+0x0A]
  3266                              <3> 	mov byte %7,[bp+0x0C]
  3267                              <3> 	stkclose 0x0D
  3268                              <3> %endmacro
  3269                              <3> 
  3270                              <3> %macro __mul_validate 5
  3271                              <3> 	stkopen 0x09
  3272                              <3> 	mov word [bp+0],%1
  3273                              <3> 	mov word [bp+2],%2
  3274                              <3> 	call proc__mul_validate
  3275                              <3> 	push sp
  3276                              <3> 	pop bp
  3277                              <3> 	mov word %3,[bp+4]
  3278                              <3> 	mov word %4,[bp+6]
  3279                              <3> 	mov byte %5,[bp+8]
  3280                              <3> 	stkclose 0x09
  3281                              <3> %endmacro
  3282                              <3> 
  3283                              <3> %macro __addorsub_validate 7
  3284                              <3> 	stkopen 0x0D
  3285                              <3> 	mov word [bp+0],%1
  3286                              <3> 	mov word [bp+2],%2
  3287                              <3> 	mov word [bp+4],%3
  3288                              <3> 	mov word [bp+6],%4
  3289                              <3> 	call proc__addorsub_validate
  3290                              <3> 	push sp
  3291                              <3> 	pop bp
  3292                              <3> 	mov word %5,[bp+8]
  3293                              <3> 	mov word %6,[bp+0x0A]
  3294                              <3> 	mov byte %7,[bp+0x0C]
  3295                              <3> 	stkclose 0x0D
  3296                              <3> %endmacro
  3297                              <3> 
  3298                              <3> %macro __cmp_validate 4
  3299                              <3> 	stkopen 0x06
  3300                              <3> 	mov word [bp+0],%1
  3301                              <3> 	mov word [bp+2],%2
  3302                              <3> 	call proc__cmp_validate
  3303                              <3> 	push sp
  3304                              <3> 	pop bp
  3305                              <3> 	mov byte %3, [bp+4]
  3306                              <3> 	mov byte %4, [bp+5]
  3307                              <3> 	stkclose 0x06
  3308                              <3> %endmacro
  3309                              <3> 
  3310                              <3> %macro __iaddorsub32 7
  3311                              <3> 	stkopen 0x0D
  3312                              <3> 	mov word [bp+0],%1
  3313                              <3> 	mov word [bp+2],%2
  3314                              <3> 	mov word [bp+4],%3
  3315                              <3> 	mov word [bp+6],%4
  3316                              <3> 	mov word [bp+0x0C], %7
  3317                              <3> 	call proc__iaddorsub32
  3318                              <3> 	push sp
  3319                              <3> 	pop bp
  3320                              <3> 	mov word %5,[bp+8]
  3321                              <3> 	mov word %6,[bp+0x0A]
  3322                              <3> 	stkclose 0x0D
  3323                              <3> %endmacro
  3324                              <3> 
  3325                              <3> %macro __fldiv32 6
  3326                              <3> 	stkopen 0x11
  3327                              <3> 	mov word [bp+0],%1
  3328                              <3> 	mov word [bp+2],%2
  3329                              <3> 	mov word [bp+4],%3
  3330                              <3> 	mov word [bp+6],%4
  3331                              <3> 	call proc__fldiv32
  3332                              <3> 	push sp
  3333                              <3> 	pop bp
  3334                              <3> 	mov word %5,[bp+8]
  3335                              <3> 	mov word %6,[bp+0x0A]
  3336                              <3> 	stkclose 0x11
  3337                              <3> %endmacro
  3338                              <3> 
  3339                              <3> %macro __mul32_64 8
  3340                              <3> 	stkopen 0x10
  3341                              <3> 	mov word [bp+0],%1
  3342                              <3> 	mov word [bp+2],%2
  3343                              <3> 	mov word [bp+4],%3
  3344                              <3> 	mov word [bp+6],%4
  3345                              <3> 	call proc__mul32_64
  3346                              <3> 	push sp
  3347                              <3> 	pop bp
  3348                              <3> 	mov word %5,[bp+8]
  3349                              <3> 	mov word %6,[bp+0x0A]
  3350                              <3> 	mov word %7,[bp+0x0C]
  3351                              <3> 	mov word %8,[bp+0x0E]
  3352                              <3> 	stkclose 0x10
  3353                              <3> %endmacro
  3354                              <3> 
  3355                              <3> %macro __normalize 3
  3356                              <3> 	stkopen 0x06
  3357                              <3> 	mov word [bp+0],%1
  3358                              <3> 	mov word [bp+2],%2
  3359                              <3> 	mov word [bp+4],%3
  3360                              <3> 	call proc__normalize
  3361                              <3> 	push sp
  3362                              <3> 	pop bp
  3363                              <3> 	mov word %1,[bp+0]
  3364                              <3> 	mov word %2,[bp+2]
  3365                              <3> 	stkclose 0x06
  3366                              <3> %endmacro
  3367                              <3> 
  3368                              <3> section .data
  3369                              <3> 
  3370                              <3> proc_fltoint16:
  3371 000005C3 89E0                <3> 	mov ax,sp
  3372 000005C5 89C5                <3> 	mov bp,ax
  3373                              <3> 	
  3374 000005C7 8B4602              <3> 	mov ax,[bp+2]
  3375 000005CA 8B5E04              <3> 	mov bx,[bp+4]
  3376                              <3> 	__fltoint32 ax, bx, ax, bx
  3377                              <4>  stkopen 0x08
  3378 000005CD 83EC08              <5>  sub word sp, %1
  3379 000005D0 54                  <5>  push sp
  3380 000005D1 5D                  <5>  pop bp
  3381 000005D2 894600              <4>  mov word [bp+0],%1
  3382 000005D5 895E02              <4>  mov word [bp+2],%2
  3383 000005D8 E88601              <4>  call proc_fltoint32
  3384 000005DB 54                  <4>  push sp
  3385 000005DC 5D                  <4>  pop bp
  3386 000005DD 8B4604              <4>  mov word %3,[bp+4]
  3387 000005E0 8B5E06              <4>  mov word %4,[bp+6]
  3388                              <4>  stkclose 0x08
  3389 000005E3 83C408              <5>  add word sp, %1
  3390                              <3> 	__int32to16 ax, bx, cx
  3391                              <4>  stkopen 0x06
  3392 000005E6 83EC06              <5>  sub word sp, %1
  3393 000005E9 54                  <5>  push sp
  3394 000005EA 5D                  <5>  pop bp
  3395 000005EB 894600              <4>  mov word [bp+0], %1
  3396 000005EE 895E02              <4>  mov word [bp+2], %2
  3397 000005F1 E898FA              <4>  call proc_int32to16
  3398 000005F4 54                  <4>  push sp
  3399 000005F5 5D                  <4>  pop bp
  3400 000005F6 8B4E04              <4>  mov word %3, [bp+4]
  3401                              <4>  stkclose 0x06
  3402 000005F9 83C406              <5>  add word sp, %1
  3403                              <3> 	
  3404 000005FC 89E0                <3> 	mov ax,sp
  3405 000005FE 89C5                <3> 	mov bp,ax
  3406 00000600 894E06              <3> 	mov [bp+6],cx
  3407                              <3> 	
  3408 00000603 C3                  <3> 	ret
  3409                              <3> 	
  3410                              <3> proc_flroundtoint16:
  3411 00000604 89E0                <3> 	mov ax,sp
  3412 00000606 89C5                <3> 	mov bp,ax
  3413                              <3> 	
  3414 00000608 8B4602              <3> 	mov ax,[bp+2]
  3415 0000060B 8B5E04              <3> 	mov bx,[bp+4]
  3416                              <3> 	__flroundtoint32 ax, bx, ax, bx
  3417                              <4>  stkopen 0x08
  3418 0000060E 83EC08              <5>  sub word sp, %1
  3419 00000611 54                  <5>  push sp
  3420 00000612 5D                  <5>  pop bp
  3421 00000613 894600              <4>  mov word [bp+0],%1
  3422 00000616 895E02              <4>  mov word [bp+2],%2
  3423 00000619 E86A00              <4>  call proc_flroundtoint32
  3424 0000061C 54                  <4>  push sp
  3425 0000061D 5D                  <4>  pop bp
  3426 0000061E 8B4604              <4>  mov word %3,[bp+4]
  3427 00000621 8B5E06              <4>  mov word %4,[bp+6]
  3428                              <4>  stkclose 0x08
  3429 00000624 83C408              <5>  add word sp, %1
  3430                              <3> 	__int32to16 ax, bx, cx
  3431                              <4>  stkopen 0x06
  3432 00000627 83EC06              <5>  sub word sp, %1
  3433 0000062A 54                  <5>  push sp
  3434 0000062B 5D                  <5>  pop bp
  3435 0000062C 894600              <4>  mov word [bp+0], %1
  3436 0000062F 895E02              <4>  mov word [bp+2], %2
  3437 00000632 E857FA              <4>  call proc_int32to16
  3438 00000635 54                  <4>  push sp
  3439 00000636 5D                  <4>  pop bp
  3440 00000637 8B4E04              <4>  mov word %3, [bp+4]
  3441                              <4>  stkclose 0x06
  3442 0000063A 83C406              <5>  add word sp, %1
  3443                              <3> 	
  3444 0000063D 89E0                <3> 	mov ax,sp
  3445 0000063F 89C5                <3> 	mov bp,ax
  3446 00000641 894E06              <3> 	mov [bp+6],cx
  3447                              <3> 	
  3448 00000644 C3                  <3> 	ret
  3449                              <3> 	
  3450                              <3> proc_int16tofl:
  3451 00000645 89E0                <3> 	mov ax,sp
  3452 00000647 89C5                <3> 	mov bp,ax
  3453                              <3> 	
  3454 00000649 8B4602              <3> 	mov ax,[bp+2]
  3455                              <3> 	__int16to32 ax, ax, bx
  3456                              <4>  stkopen 0x06
  3457 0000064C 83EC06              <5>  sub word sp, %1
  3458 0000064F 54                  <5>  push sp
  3459 00000650 5D                  <5>  pop bp
  3460 00000651 894600              <4>  mov word [bp+0],%1
  3461 00000654 E816FA              <4>  call proc_int16to32
  3462 00000657 54                  <4>  push sp
  3463 00000658 5D                  <4>  pop bp
  3464 00000659 8B4602              <4>  mov word %2, [bp+2]
  3465 0000065C 8B5E04              <4>  mov word %3, [bp+4]
  3466                              <4>  stkclose 0x06
  3467 0000065F 83C406              <5>  add word sp, %1
  3468                              <3> 	__int32tofl ax, bx, cx, dx
  3469                              <4>  stkopen 0x08
  3470 00000662 83EC08              <5>  sub word sp, %1
  3471 00000665 54                  <5>  push sp
  3472 00000666 5D                  <5>  pop bp
  3473 00000667 894600              <4>  mov word [bp+0],%1
  3474 0000066A 895E02              <4>  mov word [bp+2],%2
  3475 0000066D E87501              <4>  call proc_int32tofl
  3476 00000670 54                  <4>  push sp
  3477 00000671 5D                  <4>  pop bp
  3478 00000672 8B4E04              <4>  mov word %3,[bp+4]
  3479 00000675 8B5606              <4>  mov word %4,[bp+6]
  3480                              <4>  stkclose 0x08
  3481 00000678 83C408              <5>  add word sp, %1
  3482                              <3> 	
  3483 0000067B 89E0                <3> 	mov ax,sp
  3484 0000067D 89C5                <3> 	mov bp,ax
  3485 0000067F 894E04              <3> 	mov [bp+4],cx
  3486 00000682 895606              <3> 	mov [bp+6],dx
  3487                              <3> 
  3488 00000685 C3                  <3> 	ret
  3489                              <3> 
  3490                              <3> proc_flroundtoint32:
  3491 00000686 89E0                <3> 	mov ax,sp
  3492 00000688 89C5                <3> 	mov bp,ax
  3493                              <3> 
  3494 0000068A 8B4602              <3> 	mov ax,[bp+2]
  3495 0000068D 8B5E04              <3> 	mov bx,[bp+4]
  3496                              <3> 		
  3497 00000690 25FF7F              <3> 	and ax,0x7FFF	
  3498 00000693 09D8                <3> 	or ax,bx
  3499 00000695 83F800              <3> 	cmp ax,0
  3500 00000698 7532                <3> 	jnz .continue
  3501                              <3> 	.zero:
  3502 0000069A C746060000          <3> 		mov word [bp+6],0
  3503 0000069F C746080000          <3> 		mov word [bp+8],0
  3504 000006A4 E9B900              <3> 		jmp .done
  3505                              <3> 	.one:
  3506 000006A7 8B4602              <3> 		mov ax,[bp+2]
  3507 000006AA 250080              <3> 		and ax,0x8000
  3508 000006AD 83F800              <3> 		cmp ax,0
  3509 000006B0 750D                <3> 		jnz .oneneg
  3510 000006B2 C746060000          <3> 			mov word [bp+6], 0
  3511 000006B7 C746080100          <3> 			mov word [bp+8], 1
  3512 000006BC E9A100              <3> 			jmp .done
  3513                              <3> 		.oneneg:
  3514 000006BF C74606FFFF          <3> 			mov word [bp+6], 0xFFFF
  3515 000006C4 C74608FFFF          <3> 			mov word [bp+8], 0xFFFF					
  3516 000006C9 E99400              <3> 			jmp .done
  3517                              <3> 	.continue:
  3518                              <3> 	
  3519 000006CC 8B4E02              <3> 	mov cx,[bp+2]
  3520 000006CF D1E1                <3> 	shl cx,1
  3521 000006D1 80ED7F              <3> 	sub ch,0x7F
  3522 000006D4 80FDFF              <3> 	cmp ch,0xFF
  3523 000006D7 7CC1                <3> 	jl .zero
  3524 000006D9 74CC                <3> 	je .one	
  3525                              <3> 		
  3526 000006DB B117                <3> 	mov cl,23	
  3527 000006DD 38CD                <3> 	cmp ch,cl
  3528 000006DF 7302                <3> 	jae .endexp
  3529 000006E1 28E9                <3> 		sub cl,ch
  3530                              <3> 	.endexp:
  3531                              <3> 	
  3532 000006E3 8B4602              <3> 	mov ax,[bp+2]
  3533 000006E6 83E07F              <3> 	and ax,0x007F
  3534 000006E9 0D8000              <3> 	or ax,0x0080
  3535                              <3> 	
  3536 000006EC 8B5E04              <3> 	mov bx,[bp+4]		
  3537                              <3> 	
  3538 000006EF FEC9                <3> 	dec cl
  3539 000006F1 55                  <3> 	push bp	
  3540                              <3> 	__shr32 ax, bx, cl
  3541                              <4>  stkopen 5
  3542 000006F2 83EC05              <5>  sub word sp, %1
  3543 000006F5 54                  <5>  push sp
  3544 000006F6 5D                  <5>  pop bp
  3545 000006F7 894600              <4>  mov word [bp+0], %1
  3546 000006FA 895E02              <4>  mov word [bp+2], %2
  3547 000006FD 884E04              <4>  mov byte [bp+4], %3
  3548 00000700 E8CCFC              <4>  call proc_shr32
  3549 00000703 54                  <4>  push sp
  3550 00000704 5D                  <4>  pop bp
  3551 00000705 8B4600              <4>  mov word %1, [bp+0]
  3552 00000708 8B5E02              <4>  mov word %2, [bp+2]
  3553                              <4>  stkclose 5
  3554 0000070B 83C405              <5>  add word sp, %1
  3555 0000070E 5D                  <3> 	pop bp
  3556 0000070F 53                  <3> 	push bx
  3557 00000710 55                  <3> 	push bp
  3558                              <3> 	__shr32 ax, bx, 1
  3559                              <4>  stkopen 5
  3560 00000711 83EC05              <5>  sub word sp, %1
  3561 00000714 54                  <5>  push sp
  3562 00000715 5D                  <5>  pop bp
  3563 00000716 894600              <4>  mov word [bp+0], %1
  3564 00000719 895E02              <4>  mov word [bp+2], %2
  3565 0000071C C6460401            <4>  mov byte [bp+4], %3
  3566 00000720 E8ACFC              <4>  call proc_shr32
  3567 00000723 54                  <4>  push sp
  3568 00000724 5D                  <4>  pop bp
  3569 00000725 8B4600              <4>  mov word %1, [bp+0]
  3570 00000728 8B5E02              <4>  mov word %2, [bp+2]
  3571                              <4>  stkclose 5
  3572 0000072B 83C405              <5>  add word sp, %1
  3573 0000072E 5D                  <3> 	pop bp			
  3574                              <3> 	
  3575 0000072F 5A                  <3> 	pop dx
  3576 00000730 83E201              <3> 	and dx,0x0001
  3577 00000733 83FA00              <3> 	cmp dx,0
  3578 00000736 7404                <3> 	jz .rounded
  3579 00000738 43                  <3> 		inc bx
  3580 00000739 83D000              <3> 		adc ax,0
  3581                              <3> 	.rounded:
  3582                              <3> 				
  3583 0000073C 8B4E02              <3> 	mov cx,[bp+2]
  3584 0000073F 81E10080            <3> 	and cx,0x8000
  3585 00000743 83F900              <3> 	cmp cx,0
  3586 00000746 7412                <3> 	jz .endneg			
  3587 00000748 B9FFFF              <3> 		mov cx,0xFFFF
  3588 0000074B BAFFFF              <3> 		mov dx,0xFFFF
  3589 0000074E 29DA                <3> 		sub dx,bx
  3590 00000750 19C1                <3> 		sbb cx,ax						
  3591 00000752 42                  <3> 		inc dx
  3592 00000753 83D100              <3> 		adc cx,0
  3593 00000756 89C8                <3> 		mov ax,cx
  3594 00000758 89D3                <3> 		mov bx,dx		
  3595                              <3> 	.endneg:			
  3596                              <3> 		 
  3597 0000075A 894606              <3> 	mov [bp+6],ax
  3598 0000075D 895E08              <3> 	mov [bp+8],bx
  3599                              <3> 	
  3600                              <3> 	.done:
  3601                              <3> 	
  3602 00000760 C3                  <3> 	ret
  3603                              <3> 	
  3604                              <3> proc_fltoint32:
  3605 00000761 89E0                <3> 	mov ax,sp
  3606 00000763 89C5                <3> 	mov bp,ax
  3607                              <3> 
  3608 00000765 8B4602              <3> 	mov ax,[bp+2]
  3609 00000768 8B5E04              <3> 	mov bx,[bp+4]
  3610                              <3> 		
  3611 0000076B 25FF7F              <3> 	and ax,0x7FFF	
  3612 0000076E 09D8                <3> 	or ax,bx
  3613 00000770 83F800              <3> 	cmp ax,0
  3614 00000773 750C                <3> 	jnz .continue
  3615                              <3> 	.zero:
  3616 00000775 C746060000          <3> 		mov word [bp+6],0
  3617 0000077A C746080000          <3> 		mov word [bp+8],0
  3618 0000077F EB63                <3> 		jmp .done
  3619                              <3> 	.continue:
  3620                              <3> 	
  3621 00000781 8B4E02              <3> 	mov cx,[bp+2]
  3622 00000784 D1E1                <3> 	shl cx,1
  3623 00000786 80ED7F              <3> 	sub ch,0x7F
  3624 00000789 80FD00              <3> 	cmp ch,0
  3625 0000078C 7CE7                <3> 	jl .zero
  3626                              <3> 		
  3627 0000078E B117                <3> 	mov cl,23	
  3628 00000790 38CD                <3> 	cmp ch,cl
  3629 00000792 7302                <3> 	jae .endexp
  3630 00000794 28E9                <3> 		sub cl,ch
  3631                              <3> 	.endexp:
  3632                              <3> 	
  3633 00000796 8B4602              <3> 	mov ax,[bp+2]
  3634 00000799 83E07F              <3> 	and ax,0x007F
  3635 0000079C 0D8000              <3> 	or ax,0x0080
  3636                              <3> 	
  3637 0000079F 8B5E04              <3> 	mov bx,[bp+4]		
  3638                              <3> 	
  3639 000007A2 55                  <3> 	push bp	
  3640                              <3> 	__shr32 ax, bx, cl
  3641                              <4>  stkopen 5
  3642 000007A3 83EC05              <5>  sub word sp, %1
  3643 000007A6 54                  <5>  push sp
  3644 000007A7 5D                  <5>  pop bp
  3645 000007A8 894600              <4>  mov word [bp+0], %1
  3646 000007AB 895E02              <4>  mov word [bp+2], %2
  3647 000007AE 884E04              <4>  mov byte [bp+4], %3
  3648 000007B1 E81BFC              <4>  call proc_shr32
  3649 000007B4 54                  <4>  push sp
  3650 000007B5 5D                  <4>  pop bp
  3651 000007B6 8B4600              <4>  mov word %1, [bp+0]
  3652 000007B9 8B5E02              <4>  mov word %2, [bp+2]
  3653                              <4>  stkclose 5
  3654 000007BC 83C405              <5>  add word sp, %1
  3655 000007BF 5D                  <3> 	pop bp		
  3656                              <3> 					
  3657 000007C0 8B4E02              <3> 	mov cx,[bp+2]
  3658 000007C3 81E10080            <3> 	and cx,0x8000
  3659 000007C7 83F900              <3> 	cmp cx,0
  3660 000007CA 7412                <3> 	jz .endneg			
  3661 000007CC B9FFFF              <3> 		mov cx,0xFFFF
  3662 000007CF BAFFFF              <3> 		mov dx,0xFFFF
  3663 000007D2 29DA                <3> 		sub dx,bx
  3664 000007D4 19C1                <3> 		sbb cx,ax						
  3665 000007D6 42                  <3> 		inc dx
  3666 000007D7 83D100              <3> 		adc cx,0
  3667 000007DA 89C8                <3> 		mov ax,cx
  3668 000007DC 89D3                <3> 		mov bx,dx		
  3669                              <3> 	.endneg:			
  3670                              <3> 		 
  3671 000007DE 894606              <3> 	mov [bp+6],ax
  3672 000007E1 895E08              <3> 	mov [bp+8],bx
  3673                              <3> 	
  3674                              <3> 	.done:
  3675                              <3> 	
  3676 000007E4 C3                  <3> 	ret
  3677                              <3> 			
  3678                              <3> proc_int32tofl:
  3679 000007E5 89E0                <3> 	mov ax,sp
  3680 000007E7 89C5                <3> 	mov bp,ax
  3681                              <3> 	
  3682 000007E9 8B4602              <3> 	mov ax,[bp+2]
  3683 000007EC 8B5E04              <3> 	mov bx,[bp+4]
  3684                              <3> 	
  3685 000007EF 89C1                <3> 	mov cx,ax
  3686 000007F1 81E1FF7F            <3> 	and cx,0x7FFF
  3687 000007F5 09D9                <3> 	or cx,bx
  3688 000007F7 83F900              <3> 	cmp cx,0
  3689 000007FA 7511                <3> 	jnz .continue
  3690 000007FC 8B4602              <3> 		mov ax,[bp+2]
  3691 000007FF 250080              <3> 		and ax,0x8000
  3692 00000802 894606              <3> 		mov word [bp+6],ax
  3693 00000805 C746080000          <3> 		mov word [bp+8],0
  3694 0000080A E9AE00              <3> 		jmp .done
  3695                              <3> 	.continue:
  3696                              <3> 		
  3697 0000080D 89C1                <3> 	mov cx,ax
  3698 0000080F 81E10080            <3> 	and cx,0x8000
  3699 00000813 83F900              <3> 	cmp cx,0
  3700 00000816 7412                <3> 	jz .endneg
  3701 00000818 B9FFFF              <3> 		mov cx,0xFFFF
  3702 0000081B BAFFFF              <3> 		mov dx,0xFFFF
  3703 0000081E 29DA                <3> 		sub dx,bx
  3704 00000820 19C1                <3> 		sbb cx,ax
  3705 00000822 42                  <3> 		inc dx
  3706 00000823 83D100              <3> 		adc cx,0
  3707 00000826 89C8                <3> 		mov ax,cx
  3708 00000828 89D3                <3> 		mov bx,dx
  3709                              <3> 	.endneg:
  3710                              <3> 	
  3711 0000082A 83E07F              <3> 	and ax,0x007F	
  3712                              <3> 	
  3713 0000082D 894606              <3> 	mov [bp+6],ax
  3714 00000830 895E08              <3> 	mov [bp+8],bx	
  3715                              <3> 		
  3716                              <3> 	__lzbitcount32 ax, bx, ch		
  3717 00000833 53                  <4>  push %2
  3718                              <4>  __lzbitcount16 %1, cl
  3719                              <5>  stkopen 3
  3720 00000834 83EC03              <6>  sub word sp, %1
  3721 00000837 54                  <6>  push sp
  3722 00000838 5D                  <6>  pop bp
  3723 00000839 894600              <5>  mov word [bp+0], %1
  3724 0000083C E815FC              <5>  call proc__lzbitcount16
  3725 0000083F 54                  <5>  push sp
  3726 00000840 5D                  <5>  pop bp
  3727 00000841 8A4E02              <5>  mov byte %2, [bp+2]
  3728                              <5>  stkclose 3
  3729 00000844 83C403              <6>  add word sp, %1
  3730 00000847 58                  <4>  pop ax
  3731 00000848 80F910              <4>  cmp cl,16
  3732 0000084B 7217                <4>  jb .end
  3733 0000084D 51                  <4>  push cx
  3734                              <4>  __lzbitcount16 ax, al
  3735                              <5>  stkopen 3
  3736 0000084E 83EC03              <6>  sub word sp, %1
  3737 00000851 54                  <6>  push sp
  3738 00000852 5D                  <6>  pop bp
  3739 00000853 894600              <5>  mov word [bp+0], %1
  3740 00000856 E8FBFB              <5>  call proc__lzbitcount16
  3741 00000859 54                  <5>  push sp
  3742 0000085A 5D                  <5>  pop bp
  3743 0000085B 8A4602              <5>  mov byte %2, [bp+2]
  3744                              <5>  stkclose 3
  3745 0000085E 83C403              <6>  add word sp, %1
  3746 00000861 59                  <4>  pop cx
  3747 00000862 00C1                <4>  add cl,al
  3748                              <4>  .end:
  3749 00000864 88CD                <4>  mov byte %3, cl
  3750 00000866 B120                <3> 	mov cl,32
  3751 00000868 28E9                <3> 	sub cl,ch
  3752                              <3> 	
  3753 0000086A 80F918              <3> 	cmp cl,24
  3754 0000086D 732C                <3> 	jae .endmantissa
  3755                              <3> 	
  3756 0000086F B218                <3> 	mov dl,24
  3757 00000871 28CA                <3> 	sub dl,cl				
  3758                              <3> 	
  3759 00000873 89E0                <3> 	mov ax,sp
  3760 00000875 89C5                <3> 	mov bp,ax
  3761 00000877 8B4606              <3> 	mov ax,[bp+6]
  3762 0000087A 8B5E08              <3> 	mov bx,[bp+8]
  3763                              <3> 	
  3764 0000087D 51                  <3> 	push cx	
  3765                              <3> 	__shl32 ax, bx, dl	
  3766                              <4>  stkopen 5
  3767 0000087E 83EC05              <5>  sub word sp, %1
  3768 00000881 54                  <5>  push sp
  3769 00000882 5D                  <5>  pop bp
  3770 00000883 894600              <4>  mov word [bp+0], %1
  3771 00000886 895E02              <4>  mov word [bp+2], %2
  3772 00000889 885604              <4>  mov byte [bp+4], %3
  3773 0000088C E8F9FA              <4>  call proc_shl32
  3774 0000088F 54                  <4>  push sp
  3775 00000890 5D                  <4>  pop bp
  3776 00000891 8B4600              <4>  mov word %1, [bp+0]
  3777 00000894 8B5E02              <4>  mov word %2, [bp+2]
  3778                              <4>  stkclose 5
  3779 00000897 83C405              <5>  add word sp, %1
  3780 0000089A 59                  <3> 	pop cx
  3781                              <3> 	
  3782                              <3> 	.endmantissa:
  3783                              <3> 	
  3784 0000089B 83E07F              <3> 	and ax,0x007F
  3785                              <3> 		
  3786 0000089E 80C17E              <3> 	add cl,0x7E
  3787 000008A1 C1E108              <3> 	shl cx,8
  3788 000008A4 D1E9                <3> 	shr cx,1
  3789 000008A6 01C8                <3> 	add ax,cx
  3790                              <3> 	
  3791 000008A8 89E1                <3> 	mov cx,sp
  3792 000008AA 89CD                <3> 	mov bp,cx
  3793                              <3> 	
  3794 000008AC 8B4E02              <3> 	mov cx,[bp+2]
  3795 000008AF 81E10080            <3> 	and cx,0x8000	
  3796 000008B3 01C8                <3> 	add ax,cx
  3797                              <3> 		
  3798 000008B5 894606              <3> 	mov [bp+6],ax
  3799 000008B8 895E08              <3> 	mov [bp+8],bx
  3800                              <3> 	
  3801                              <3> 	.done:		
  3802                              <3> 	
  3803 000008BB C3                  <3> 	ret
  3804                              <3> 	
  3805                              <3> proc_flcmp:
  3806 000008BC 89E0                <3> 	mov ax,sp
  3807 000008BE 89C5                <3> 	mov bp,ax		
  3808                              <3> 	
  3809 000008C0 8B4602              <3> 	mov ax,[bp+2]
  3810 000008C3 8B5E06              <3> 	mov bx,[bp+6]
  3811 000008C6 55                  <3> 	push bp
  3812                              <3> 	__cmp_validate ax, bx, cl, dl
  3813                              <4>  stkopen 0x06
  3814 000008C7 83EC06              <5>  sub word sp, %1
  3815 000008CA 54                  <5>  push sp
  3816 000008CB 5D                  <5>  pop bp
  3817 000008CC 894600              <4>  mov word [bp+0],%1
  3818 000008CF 895E02              <4>  mov word [bp+2],%2
  3819 000008D2 E85C09              <4>  call proc__cmp_validate
  3820 000008D5 54                  <4>  push sp
  3821 000008D6 5D                  <4>  pop bp
  3822 000008D7 8A4E04              <4>  mov byte %3, [bp+4]
  3823 000008DA 8A5605              <4>  mov byte %4, [bp+5]
  3824                              <4>  stkclose 0x06
  3825 000008DD 83C406              <5>  add word sp, %1
  3826 000008E0 5D                  <3> 	pop bp
  3827 000008E1 80FA00              <3> 	cmp dl,0
  3828 000008E4 7505                <3> 	jnz .continue
  3829 000008E6 884E0A              <3> 		mov byte [bp+0x0A], cl
  3830 000008E9 EB5E                <3> 		jmp .done		
  3831                              <3> 	.continue:
  3832                              <3> 			
  3833 000008EB 8B4602              <3> 	mov ax,[bp+2]
  3834 000008EE 8B5E06              <3> 	mov bx,[bp+6]
  3835 000008F1 250080              <3> 	and ax,0x8000
  3836 000008F4 81E30080            <3> 	and bx,0x8000	
  3837 000008F8 39D8                <3> 	cmp ax,bx
  3838 000008FA 723C                <3> 	jb .above
  3839 000008FC 773E                <3> 	ja .below
  3840                              <3> 	
  3841 000008FE 8B4602              <3> 	mov ax,[bp+2]
  3842 00000901 8B5E06              <3> 	mov bx,[bp+6]
  3843 00000904 D1E0                <3> 	shl ax,1
  3844 00000906 D1E3                <3> 	shl bx,1
  3845 00000908 38FC                <3> 	cmp ah,bh
  3846 0000090A 772C                <3> 	ja .above
  3847 0000090C 722E                <3> 	jb .below
  3848                              <3> 	
  3849 0000090E 8B4602              <3> 	mov ax,[bp+2]
  3850 00000911 8B5E04              <3> 	mov bx,[bp+4]
  3851 00000914 8B4E06              <3> 	mov cx,[bp+6]
  3852 00000917 8B5608              <3> 	mov dx,[bp+8]
  3853                              <3> 	
  3854                              <3> 	__cmp32 ax, bx, cx, dx, cl
  3855                              <4>  stkopen 9
  3856 0000091A 83EC09              <5>  sub word sp, %1
  3857 0000091D 54                  <5>  push sp
  3858 0000091E 5D                  <5>  pop bp
  3859 0000091F 894600              <4>  mov word [bp+0], %1
  3860 00000922 895E02              <4>  mov word [bp+2], %2
  3861 00000925 894E04              <4>  mov word [bp+4], %3
  3862 00000928 895606              <4>  mov word [bp+6], %4
  3863 0000092B E82FFA              <4>  call proc_cmp32
  3864 0000092E 54                  <4>  push sp
  3865 0000092F 5D                  <4>  pop bp
  3866 00000930 8A4E08              <4>  mov byte %5, [bp+8]
  3867                              <4>  stkclose 9
  3868 00000933 83C409              <5>  add word sp, %1
  3869 00000936 EB0A                <3> 	jmp .endcmp
  3870                              <3> 		
  3871                              <3> 	.above:
  3872 00000938 B101                <3> 		mov cl, 1
  3873 0000093A EB06                <3> 		jmp .endcmp
  3874                              <3> 	.below:
  3875 0000093C B1FF                <3> 		mov cl, -1
  3876 0000093E EB02                <3> 		jmp .endcmp
  3877                              <3> 	.equal:	
  3878 00000940 B100                <3> 		mov cl, 0	
  3879                              <3> 	.endcmp:
  3880                              <3> 	
  3881 00000942 89E0                <3> 	mov ax,sp
  3882 00000944 89C5                <3> 	mov bp,ax
  3883 00000946 884E0A              <3> 	mov byte [bp+0x0A], cl
  3884                              <3> 	
  3885                              <3> 	.done:
  3886                              <3> 					
  3887 00000949 C3                  <3> 	ret
  3888                              <3> 
  3889                              <3> proc_flshl:
  3890 0000094A 89E0                <3> 	mov ax,sp
  3891 0000094C 89C5                <3> 	mov bp,ax
  3892                              <3> 	
  3893 0000094E 8B4602              <3> 	mov ax,[bp+2]
  3894 00000951 25807F              <3> 	and ax,0x7F80
  3895 00000954 D1E0                <3> 	shl ax,1
  3896 00000956 026604              <3> 	add ah, [bp+4]	
  3897 00000959 D1E8                <3> 	shr ax,1
  3898                              <3> 	
  3899 0000095B 8B5E02              <3> 	mov bx,[bp+2]
  3900 0000095E 81E37F80            <3> 	and bx,0x807F
  3901 00000962 01C3                <3> 	add bx,ax
  3902                              <3> 	
  3903 00000964 895E02              <3> 	mov [bp+2],bx		
  3904                              <3> 	
  3905 00000967 C3                  <3> 	ret
  3906                              <3> 
  3907                              <3> proc_flshr:
  3908 00000968 89E0                <3> 	mov ax,sp
  3909 0000096A 89C5                <3> 	mov bp,ax
  3910                              <3> 	
  3911 0000096C 8B4602              <3> 	mov ax,[bp+2]
  3912 0000096F 25807F              <3> 	and ax,0x7F80
  3913 00000972 D1E0                <3> 	shl ax,1
  3914 00000974 2A6604              <3> 	sub ah, [bp+4]	
  3915 00000977 D1E8                <3> 	shr ax,1
  3916                              <3> 	
  3917 00000979 8B5E02              <3> 	mov bx,[bp+2]
  3918 0000097C 81E37F80            <3> 	and bx,0x807F
  3919 00000980 01C3                <3> 	add bx,ax
  3920                              <3> 	
  3921 00000982 895E02              <3> 	mov [bp+2],bx	
  3922                              <3> 	
  3923 00000985 C3                  <3> 	ret
  3924                              <3> 
  3925                              <3> proc_fldiv:
  3926 00000986 89E0                <3> 	mov ax,sp
  3927 00000988 89C5                <3> 	mov bp,ax
  3928                              <3> 				
  3929                              <3> 	; sinal
  3930                              <3> 	
  3931 0000098A 8B4602              <3> 	mov ax,[bp+2]
  3932 0000098D 8B5E06              <3> 	mov bx,[bp+6]
  3933 00000990 250080              <3> 	and ax,0x8000
  3934 00000993 81E30080            <3> 	and bx,0x8000
  3935 00000997 31D8                <3> 	xor ax,bx
  3936 00000999 89460A              <3> 	mov word [bp+0x0A],ax
  3937                              <3> 		
  3938                              <3> 	; sinal calculado e setado
  3939                              <3> 
  3940                              <3> 	; valores especiais
  3941                              <3> 	
  3942 0000099C 8B4602              <3> 	mov ax,[bp+2]
  3943 0000099F 8B5E04              <3> 	mov bx,[bp+4]
  3944 000009A2 8B4E06              <3> 	mov cx,[bp+6]
  3945 000009A5 8B5608              <3> 	mov dx,[bp+8]
  3946                              <3> 	__validate ax, bx, cx, dx, ax, bx, cl
  3947                              <4>  stkopen 0x0D
  3948 000009A8 83EC0D              <5>  sub word sp, %1
  3949 000009AB 54                  <5>  push sp
  3950 000009AC 5D                  <5>  pop bp
  3951 000009AD 894600              <4>  mov word [bp+0],%1
  3952 000009B0 895E02              <4>  mov word [bp+2],%2
  3953 000009B3 894E04              <4>  mov word [bp+4],%3
  3954 000009B6 895606              <4>  mov word [bp+6],%4
  3955 000009B9 E82507              <4>  call proc__validate
  3956 000009BC 54                  <4>  push sp
  3957 000009BD 5D                  <4>  pop bp
  3958 000009BE 8B4608              <4>  mov word %5,[bp+8]
  3959 000009C1 8B5E0A              <4>  mov word %6,[bp+0x0A]
  3960 000009C4 8A4E0C              <4>  mov byte %7,[bp+0x0C]
  3961                              <4>  stkclose 0x0D
  3962 000009C7 83C40D              <5>  add word sp, %1
  3963 000009CA 80F900              <3> 	cmp cl,0
  3964 000009CD 750D                <3> 	jnz .continue
  3965 000009CF 89E2                <3> 		mov dx,sp
  3966 000009D1 89D5                <3> 		mov bp,dx
  3967 000009D3 01460A              <3> 		add word [bp+0x0A],ax
  3968 000009D6 895E0C              <3> 		mov word [bp+0x0C],bx						
  3969 000009D9 E9C800              <3> 		jmp .done	
  3970                              <3> 	.continue:
  3971                              <3> 	
  3972 000009DC 89E0                <3> 	mov ax,sp
  3973 000009DE 89C5                <3> 	mov bp,ax
  3974 000009E0 8B4602              <3> 	mov ax,[bp+2]
  3975 000009E3 8B5E04              <3> 	mov bx,[bp+4]
  3976 000009E6 8B4E06              <3> 	mov cx,[bp+6]
  3977 000009E9 8B5608              <3> 	mov dx,[bp+8]
  3978                              <3> 	__div_validate ax, bx, cx, dx, ax, bx, cl
  3979                              <4>  stkopen 0x0D
  3980 000009EC 83EC0D              <5>  sub word sp, %1
  3981 000009EF 54                  <5>  push sp
  3982 000009F0 5D                  <5>  pop bp
  3983 000009F1 894600              <4>  mov word [bp+0],%1
  3984 000009F4 895E02              <4>  mov word [bp+2],%2
  3985 000009F7 894E04              <4>  mov word [bp+4],%3
  3986 000009FA 895606              <4>  mov word [bp+6],%4
  3987 000009FD E84807              <4>  call proc__div_validate
  3988 00000A00 54                  <4>  push sp
  3989 00000A01 5D                  <4>  pop bp
  3990 00000A02 8B4608              <4>  mov word %5,[bp+8]
  3991 00000A05 8B5E0A              <4>  mov word %6,[bp+0x0A]
  3992 00000A08 8A4E0C              <4>  mov byte %7,[bp+0x0C]
  3993                              <4>  stkclose 0x0D
  3994 00000A0B 83C40D              <5>  add word sp, %1
  3995 00000A0E 80F900              <3> 	cmp cl,0
  3996 00000A11 750D                <3> 	jnz .continue2
  3997 00000A13 89E2                <3> 		mov dx,sp
  3998 00000A15 89D5                <3> 		mov bp,dx
  3999 00000A17 01460A              <3> 		add word [bp+0x0A],ax
  4000 00000A1A 895E0C              <3> 		mov word [bp+0x0C],bx				
  4001 00000A1D E98400              <3> 		jmp .done	
  4002                              <3> 	.continue2:
  4003                              <3> 	; valores especiais tratados
  4004                              <3> 			
  4005                              <3> 	; expoente parcial
  4006                              <3> 
  4007 00000A20 89E0                <3> 	mov ax,sp
  4008 00000A22 89C5                <3> 	mov bp,ax
  4009 00000A24 8B4602              <3> 	mov ax,[bp+2]
  4010 00000A27 8B5E06              <3> 	mov bx,[bp+6]
  4011 00000A2A 25807F              <3> 	and ax,0x7F80
  4012 00000A2D 81E3807F            <3> 	and bx,0x7F80
  4013 00000A31 D1E0                <3> 	shl ax,1
  4014 00000A33 D1E3                <3> 	shl bx,1		
  4015                              <3> 			
  4016 00000A35 28FC                <3> 	sub ah,bh		
  4017 00000A37 80C47F              <3> 	add ah,0x7F
  4018                              <3> 	
  4019 00000A3A 50                  <3> 	push ax
  4020                              <3> 		
  4021                              <3> 	; expoente parcial calculado
  4022                              <3> 	
  4023                              <3> 	; mantissa
  4024                              <3> 
  4025 00000A3B 8B4602              <3> 	mov ax,[bp+2]
  4026 00000A3E 8B5E04              <3> 	mov bx,[bp+4]
  4027 00000A41 8B4E06              <3> 	mov cx,[bp+6]
  4028 00000A44 8B5608              <3> 	mov dx,[bp+8]
  4029 00000A47 83E07F              <3> 	and ax,0x007F
  4030 00000A4A 83E17F              <3> 	and cx,0x007F
  4031 00000A4D 0D8000              <3> 	or ax,0x0080
  4032 00000A50 81C98000            <3> 	or cx,0x0080
  4033                              <3> 	
  4034                              <3> 	__fldiv32 ax, bx, cx, dx, cx, dx
  4035                              <4>  stkopen 0x11
  4036 00000A54 83EC11              <5>  sub word sp, %1
  4037 00000A57 54                  <5>  push sp
  4038 00000A58 5D                  <5>  pop bp
  4039 00000A59 894600              <4>  mov word [bp+0],%1
  4040 00000A5C 895E02              <4>  mov word [bp+2],%2
  4041 00000A5F 894E04              <4>  mov word [bp+4],%3
  4042 00000A62 895606              <4>  mov word [bp+6],%4
  4043 00000A65 E87505              <4>  call proc__fldiv32
  4044 00000A68 54                  <4>  push sp
  4045 00000A69 5D                  <4>  pop bp
  4046 00000A6A 8B4E08              <4>  mov word %5,[bp+8]
  4047 00000A6D 8B560A              <4>  mov word %6,[bp+0x0A]
  4048                              <4>  stkclose 0x11
  4049 00000A70 83C411              <5>  add word sp, %1
  4050                              <3> 		
  4051 00000A73 89E0                <3> 	mov ax,sp
  4052 00000A75 89C5                <3> 	mov bp,ax
  4053 00000A77 83C502              <3> 	add bp,2
  4054                              <3> 	
  4055 00000A7A 034E0A              <3> 	add cx,[bp+0x0A]
  4056                              <3> 			
  4057 00000A7D 58                  <3> 	pop ax	
  4058                              <3> 	__normalize cx, dx, ax
  4059                              <4>  stkopen 0x06
  4060 00000A7E 83EC06              <5>  sub word sp, %1
  4061 00000A81 54                  <5>  push sp
  4062 00000A82 5D                  <5>  pop bp
  4063 00000A83 894E00              <4>  mov word [bp+0],%1
  4064 00000A86 895602              <4>  mov word [bp+2],%2
  4065 00000A89 894604              <4>  mov word [bp+4],%3
  4066 00000A8C E8B303              <4>  call proc__normalize
  4067 00000A8F 54                  <4>  push sp
  4068 00000A90 5D                  <4>  pop bp
  4069 00000A91 8B4E00              <4>  mov word %1,[bp+0]
  4070 00000A94 8B5602              <4>  mov word %2,[bp+2]
  4071                              <4>  stkclose 0x06
  4072 00000A97 83C406              <5>  add word sp, %1
  4073                              <3> 	
  4074 00000A9A 89E0                <3> 	mov ax,sp
  4075 00000A9C 89C5                <3> 	mov bp,ax
  4076 00000A9E 894E0A              <3> 	mov [bp+0x0A],cx
  4077 00000AA1 89560C              <3> 	mov [bp+0x0C],dx
  4078                              <3> 	
  4079                              <3> 	.done:
  4080                              <3> 			
  4081 00000AA4 C3                  <3> 	ret
  4082                              <3> 
  4083                              <3> proc_flmul:
  4084 00000AA5 89E0                <3> 	mov ax,sp
  4085 00000AA7 89C5                <3> 	mov bp,ax
  4086                              <3> 	
  4087                              <3> 	; sinal
  4088                              <3> 	
  4089 00000AA9 8B4602              <3> 	mov ax,[bp+2]
  4090 00000AAC 8B5E06              <3> 	mov bx,[bp+6]
  4091 00000AAF 250080              <3> 	and ax,0x8000
  4092 00000AB2 81E30080            <3> 	and bx,0x8000
  4093 00000AB6 31D8                <3> 	xor ax,bx
  4094 00000AB8 89460A              <3> 	mov word [bp+0x0A],ax
  4095                              <3> 	
  4096                              <3> 	; sinal calculado e setado
  4097                              <3> 
  4098                              <3> 	; valores especiais
  4099                              <3> 
  4100 00000ABB 8B4602              <3> 	mov ax,[bp+2]
  4101 00000ABE 8B5E04              <3> 	mov bx,[bp+4]
  4102 00000AC1 8B4E06              <3> 	mov cx,[bp+6]
  4103 00000AC4 8B5608              <3> 	mov dx,[bp+8]
  4104                              <3> 	__validate ax, bx, cx, dx, ax, bx, cl
  4105                              <4>  stkopen 0x0D
  4106 00000AC7 83EC0D              <5>  sub word sp, %1
  4107 00000ACA 54                  <5>  push sp
  4108 00000ACB 5D                  <5>  pop bp
  4109 00000ACC 894600              <4>  mov word [bp+0],%1
  4110 00000ACF 895E02              <4>  mov word [bp+2],%2
  4111 00000AD2 894E04              <4>  mov word [bp+4],%3
  4112 00000AD5 895606              <4>  mov word [bp+6],%4
  4113 00000AD8 E80606              <4>  call proc__validate
  4114 00000ADB 54                  <4>  push sp
  4115 00000ADC 5D                  <4>  pop bp
  4116 00000ADD 8B4608              <4>  mov word %5,[bp+8]
  4117 00000AE0 8B5E0A              <4>  mov word %6,[bp+0x0A]
  4118 00000AE3 8A4E0C              <4>  mov byte %7,[bp+0x0C]
  4119                              <4>  stkclose 0x0D
  4120 00000AE6 83C40D              <5>  add word sp, %1
  4121 00000AE9 80F900              <3> 	cmp cl,0
  4122 00000AEC 750D                <3> 	jnz .continue
  4123 00000AEE 89E2                <3> 		mov dx,sp
  4124 00000AF0 89D5                <3> 		mov bp,dx
  4125 00000AF2 01460A              <3> 		add word [bp+0x0A],ax
  4126 00000AF5 895E0C              <3> 		mov word [bp+0x0C],bx						
  4127 00000AF8 E95501              <3> 		jmp .done	
  4128                              <3> 	.continue:
  4129                              <3> 
  4130 00000AFB 89E0                <3> 	mov ax,sp
  4131 00000AFD 89C5                <3> 	mov bp,ax
  4132 00000AFF 8B4602              <3> 	mov ax,[bp+2]
  4133 00000B02 8B4E06              <3> 	mov cx,[bp+6]
  4134                              <3> 	__mul_validate ax, cx, ax, bx, cl
  4135                              <4>  stkopen 0x09
  4136 00000B05 83EC09              <5>  sub word sp, %1
  4137 00000B08 54                  <5>  push sp
  4138 00000B09 5D                  <5>  pop bp
  4139 00000B0A 894600              <4>  mov word [bp+0],%1
  4140 00000B0D 894E02              <4>  mov word [bp+2],%2
  4141 00000B10 E88F06              <4>  call proc__mul_validate
  4142 00000B13 54                  <4>  push sp
  4143 00000B14 5D                  <4>  pop bp
  4144 00000B15 8B4604              <4>  mov word %3,[bp+4]
  4145 00000B18 8B5E06              <4>  mov word %4,[bp+6]
  4146 00000B1B 8A4E08              <4>  mov byte %5,[bp+8]
  4147                              <4>  stkclose 0x09
  4148 00000B1E 83C409              <5>  add word sp, %1
  4149 00000B21 80F900              <3> 	cmp cl,0
  4150 00000B24 750D                <3> 	jnz .continue2
  4151 00000B26 89E2                <3> 		mov dx,sp
  4152 00000B28 89D5                <3> 		mov bp,dx
  4153 00000B2A 01460A              <3> 		add word [bp+0x0A],ax
  4154 00000B2D 895E0C              <3> 		mov word [bp+0x0C],bx				
  4155 00000B30 E91D01              <3> 		jmp .done	
  4156                              <3> 	.continue2:
  4157                              <3> 	; valores especiais tratados
  4158                              <3> 		
  4159                              <3> 	; expoente parcial
  4160                              <3> 
  4161 00000B33 89E0                <3> 	mov ax,sp
  4162 00000B35 89C5                <3> 	mov bp,ax
  4163 00000B37 8B4602              <3> 	mov ax,[bp+2]
  4164 00000B3A 8B5E06              <3> 	mov bx,[bp+6]
  4165 00000B3D 25807F              <3> 	and ax,0x7F80
  4166 00000B40 81E3807F            <3> 	and bx,0x7F80
  4167 00000B44 D1E0                <3> 	shl ax,1
  4168 00000B46 D1E3                <3> 	shl bx,1		
  4169                              <3> 			
  4170 00000B48 80EC7F              <3> 	sub ah,0x7F
  4171 00000B4B 80EF7F              <3> 	sub bh,0x7F
  4172                              <3> 				
  4173 00000B4E 00FC                <3> 	add ah,bh
  4174 00000B50 80C47F              <3> 	add ah,0x7F
  4175                              <3> 	
  4176 00000B53 50                  <3> 	push ax
  4177                              <3> 	
  4178                              <3> 	; expoente parcial calculado	
  4179                              <3> 	
  4180                              <3> 	; mantissa
  4181                              <3> 	
  4182 00000B54 8B4602              <3> 	mov ax,[bp+2]
  4183 00000B57 8B5E04              <3> 	mov bx,[bp+4]
  4184 00000B5A 8B4E06              <3> 	mov cx,[bp+6]
  4185 00000B5D 8B5608              <3> 	mov dx,[bp+8]	
  4186                              <3> 	
  4187 00000B60 83E07F              <3> 	and ax, 0x007F
  4188 00000B63 83E17F              <3> 	and cx, 0x007F
  4189 00000B66 0D8000              <3> 	or ax, 0x0080
  4190 00000B69 81C98000            <3> 	or cx, 0x0080
  4191                              <3> 		
  4192                              <3> 	__mul32_64 ax, bx, cx, dx, ax, bx, cx, dx
  4193                              <4>  stkopen 0x10
  4194 00000B6D 83EC10              <5>  sub word sp, %1
  4195 00000B70 54                  <5>  push sp
  4196 00000B71 5D                  <5>  pop bp
  4197 00000B72 894600              <4>  mov word [bp+0],%1
  4198 00000B75 895E02              <4>  mov word [bp+2],%2
  4199 00000B78 894E04              <4>  mov word [bp+4],%3
  4200 00000B7B 895606              <4>  mov word [bp+6],%4
  4201 00000B7E E81104              <4>  call proc__mul32_64
  4202 00000B81 54                  <4>  push sp
  4203 00000B82 5D                  <4>  pop bp
  4204 00000B83 8B4608              <4>  mov word %5,[bp+8]
  4205 00000B86 8B5E0A              <4>  mov word %6,[bp+0x0A]
  4206 00000B89 8B4E0C              <4>  mov word %7,[bp+0x0C]
  4207 00000B8C 8B560E              <4>  mov word %8,[bp+0x0E]
  4208                              <4>  stkclose 0x10
  4209 00000B8F 83C410              <5>  add word sp, %1
  4210                              <3> 	
  4211 00000B92 51                  <3> 	push cx
  4212                              <3> 	__shl32 ax, bx, 8
  4213                              <4>  stkopen 5
  4214 00000B93 83EC05              <5>  sub word sp, %1
  4215 00000B96 54                  <5>  push sp
  4216 00000B97 5D                  <5>  pop bp
  4217 00000B98 894600              <4>  mov word [bp+0], %1
  4218 00000B9B 895E02              <4>  mov word [bp+2], %2
  4219 00000B9E C6460408            <4>  mov byte [bp+4], %3
  4220 00000BA2 E8E3F7              <4>  call proc_shl32
  4221 00000BA5 54                  <4>  push sp
  4222 00000BA6 5D                  <4>  pop bp
  4223 00000BA7 8B4600              <4>  mov word %1, [bp+0]
  4224 00000BAA 8B5E02              <4>  mov word %2, [bp+2]
  4225                              <4>  stkclose 5
  4226 00000BAD 83C405              <5>  add word sp, %1
  4227 00000BB0 59                  <3> 	pop cx
  4228 00000BB1 88EB                <3> 	mov bl,ch
  4229                              <3> 								
  4230 00000BB3 50                  <3> 	push ax
  4231 00000BB4 53                  <3> 	push bx
  4232                              <3> 	__lzbitcount32 ax, bx, cl
  4233 00000BB5 53                  <4>  push %2
  4234                              <4>  __lzbitcount16 %1, cl
  4235                              <5>  stkopen 3
  4236 00000BB6 83EC03              <6>  sub word sp, %1
  4237 00000BB9 54                  <6>  push sp
  4238 00000BBA 5D                  <6>  pop bp
  4239 00000BBB 894600              <5>  mov word [bp+0], %1
  4240 00000BBE E893F8              <5>  call proc__lzbitcount16
  4241 00000BC1 54                  <5>  push sp
  4242 00000BC2 5D                  <5>  pop bp
  4243 00000BC3 8A4E02              <5>  mov byte %2, [bp+2]
  4244                              <5>  stkclose 3
  4245 00000BC6 83C403              <6>  add word sp, %1
  4246 00000BC9 58                  <4>  pop ax
  4247 00000BCA 80F910              <4>  cmp cl,16
  4248 00000BCD 7217                <4>  jb .end
  4249 00000BCF 51                  <4>  push cx
  4250                              <4>  __lzbitcount16 ax, al
  4251                              <5>  stkopen 3
  4252 00000BD0 83EC03              <6>  sub word sp, %1
  4253 00000BD3 54                  <6>  push sp
  4254 00000BD4 5D                  <6>  pop bp
  4255 00000BD5 894600              <5>  mov word [bp+0], %1
  4256 00000BD8 E879F8              <5>  call proc__lzbitcount16
  4257 00000BDB 54                  <5>  push sp
  4258 00000BDC 5D                  <5>  pop bp
  4259 00000BDD 8A4602              <5>  mov byte %2, [bp+2]
  4260                              <5>  stkclose 3
  4261 00000BE0 83C403              <6>  add word sp, %1
  4262 00000BE3 59                  <4>  pop cx
  4263 00000BE4 00C1                <4>  add cl,al
  4264                              <4>  .end:
  4265 00000BE6 88C9                <4>  mov byte %3, cl
  4266 00000BE8 5B                  <3> 	pop bx
  4267 00000BE9 58                  <3> 	pop ax
  4268                              <3> 		
  4269 00000BEA 80E908              <3> 	sub cl,8	
  4270 00000BED 80F908              <3> 	cmp cl,8
  4271 00000BF0 7402                <3> 	je .equal
  4272 00000BF2 7F06                <3> 	jg .great
  4273                              <3> 	.equal:	
  4274 00000BF4 5A                  <3> 		pop dx
  4275 00000BF5 FEC6                <3> 		inc dh
  4276 00000BF7 52                  <3> 		push dx
  4277 00000BF8 EB1C                <3> 		jmp .endcmp
  4278                              <3> 	.great:
  4279                              <3> 		__shl32 ax, bx, cl
  4280                              <4>  stkopen 5
  4281 00000BFA 83EC05              <5>  sub word sp, %1
  4282 00000BFD 54                  <5>  push sp
  4283 00000BFE 5D                  <5>  pop bp
  4284 00000BFF 894600              <4>  mov word [bp+0], %1
  4285 00000C02 895E02              <4>  mov word [bp+2], %2
  4286 00000C05 884E04              <4>  mov byte [bp+4], %3
  4287 00000C08 E87DF7              <4>  call proc_shl32
  4288 00000C0B 54                  <4>  push sp
  4289 00000C0C 5D                  <4>  pop bp
  4290 00000C0D 8B4600              <4>  mov word %1, [bp+0]
  4291 00000C10 8B5E02              <4>  mov word %2, [bp+2]
  4292                              <4>  stkclose 5
  4293 00000C13 83C405              <5>  add word sp, %1
  4294                              <3> 	.endcmp:
  4295                              <3> 	
  4296 00000C16 89E1                <3> 	mov cx,sp
  4297 00000C18 89CD                <3> 	mov bp,cx
  4298 00000C1A 83C502              <3> 	add bp,2
  4299                              <3> 	
  4300 00000C1D 01460A              <3> 	add word [bp+0x0A],ax
  4301 00000C20 895E0C              <3> 	mov word [bp+0x0C],bx
  4302                              <3> 	
  4303                              <3> 	; mantissa setada e expoente calculado
  4304                              <3> 				
  4305 00000C23 8B4E0A              <3> 	mov cx,[bp+0x0A]
  4306 00000C26 8B560C              <3> 	mov dx,[bp+0x0C]
  4307                              <3> 	
  4308 00000C29 58                  <3> 	pop ax						
  4309                              <3> 	__normalize cx, dx, ax	; normaliza, preserva sinal e seta expoente	
  4310                              <4>  stkopen 0x06
  4311 00000C2A 83EC06              <5>  sub word sp, %1
  4312 00000C2D 54                  <5>  push sp
  4313 00000C2E 5D                  <5>  pop bp
  4314 00000C2F 894E00              <4>  mov word [bp+0],%1
  4315 00000C32 895602              <4>  mov word [bp+2],%2
  4316 00000C35 894604              <4>  mov word [bp+4],%3
  4317 00000C38 E80702              <4>  call proc__normalize
  4318 00000C3B 54                  <4>  push sp
  4319 00000C3C 5D                  <4>  pop bp
  4320 00000C3D 8B4E00              <4>  mov word %1,[bp+0]
  4321 00000C40 8B5602              <4>  mov word %2,[bp+2]
  4322                              <4>  stkclose 0x06
  4323 00000C43 83C406              <5>  add word sp, %1
  4324                              <3> 		
  4325 00000C46 89E0                <3> 	mov ax,sp
  4326 00000C48 89C5                <3> 	mov bp,ax
  4327 00000C4A 894E0A              <3> 	mov [bp+0x0A],cx
  4328 00000C4D 89560C              <3> 	mov [bp+0x0C],dx		
  4329                              <3> 
  4330                              <3> 	.done:
  4331                              <3> 																	
  4332 00000C50 C3                  <3> 	ret
  4333                              <3> 	
  4334                              <3> proc_fladdorsub:	
  4335                              <3> 	; valores especiais
  4336 00000C51 89E0                <3> 	mov ax,sp
  4337 00000C53 89C5                <3> 	mov bp,ax
  4338 00000C55 8B4602              <3> 	mov ax,[bp+2]
  4339 00000C58 8B5E04              <3> 	mov bx,[bp+4]
  4340 00000C5B 8B4E06              <3> 	mov cx,[bp+6]
  4341 00000C5E 81E10080            <3> 	and cx,0x8000
  4342 00000C62 334E0E              <3> 	xor word cx,[bp+0x0E]	
  4343 00000C65 8B5606              <3> 	mov dx,[bp+6]
  4344 00000C68 81E2FF7F            <3> 	and dx,0x7FFF
  4345 00000C6C 01D1                <3> 	add cx,dx	
  4346 00000C6E 8B5608              <3> 	mov dx,[bp+8]
  4347                              <3> 	__validate ax, bx, cx, dx, ax, bx, cl
  4348                              <4>  stkopen 0x0D
  4349 00000C71 83EC0D              <5>  sub word sp, %1
  4350 00000C74 54                  <5>  push sp
  4351 00000C75 5D                  <5>  pop bp
  4352 00000C76 894600              <4>  mov word [bp+0],%1
  4353 00000C79 895E02              <4>  mov word [bp+2],%2
  4354 00000C7C 894E04              <4>  mov word [bp+4],%3
  4355 00000C7F 895606              <4>  mov word [bp+6],%4
  4356 00000C82 E85C04              <4>  call proc__validate
  4357 00000C85 54                  <4>  push sp
  4358 00000C86 5D                  <4>  pop bp
  4359 00000C87 8B4608              <4>  mov word %5,[bp+8]
  4360 00000C8A 8B5E0A              <4>  mov word %6,[bp+0x0A]
  4361 00000C8D 8A4E0C              <4>  mov byte %7,[bp+0x0C]
  4362                              <4>  stkclose 0x0D
  4363 00000C90 83C40D              <5>  add word sp, %1
  4364 00000C93 80F900              <3> 	cmp cl,0
  4365 00000C96 750D                <3> 	jnz .continue
  4366 00000C98 89E2                <3> 		mov dx,sp
  4367 00000C9A 89D5                <3> 		mov bp,dx		
  4368 00000C9C 89460A              <3> 		mov word [bp+0x0A],ax
  4369 00000C9F 895E0C              <3> 		mov word [bp+0x0C],bx										
  4370 00000CA2 E99C01              <3> 		jmp .done	
  4371                              <3> 	.continue:
  4372                              <3> 	
  4373 00000CA5 89E0                <3> 	mov ax,sp
  4374 00000CA7 89C5                <3> 	mov bp,ax
  4375 00000CA9 8B4602              <3> 	mov ax,[bp+2]
  4376 00000CAC 8B5E04              <3> 	mov bx,[bp+4]
  4377 00000CAF 8B4E06              <3> 	mov cx,[bp+6]
  4378 00000CB2 81E10080            <3> 	and cx,0x8000
  4379 00000CB6 334E0E              <3> 	xor word cx,[bp+0x0E]	
  4380 00000CB9 8B5606              <3> 	mov dx,[bp+6]
  4381 00000CBC 81E2FF7F            <3> 	and dx,0x7FFF
  4382 00000CC0 01D1                <3> 	add cx,dx
  4383 00000CC2 8B5608              <3> 	mov dx,[bp+8]
  4384                              <3> 	__addorsub_validate ax, bx, cx, dx, ax, bx, cl
  4385                              <4>  stkopen 0x0D
  4386 00000CC5 83EC0D              <5>  sub word sp, %1
  4387 00000CC8 54                  <5>  push sp
  4388 00000CC9 5D                  <5>  pop bp
  4389 00000CCA 894600              <4>  mov word [bp+0],%1
  4390 00000CCD 895E02              <4>  mov word [bp+2],%2
  4391 00000CD0 894E04              <4>  mov word [bp+4],%3
  4392 00000CD3 895606              <4>  mov word [bp+6],%4
  4393 00000CD6 E8FA04              <4>  call proc__addorsub_validate
  4394 00000CD9 54                  <4>  push sp
  4395 00000CDA 5D                  <4>  pop bp
  4396 00000CDB 8B4608              <4>  mov word %5,[bp+8]
  4397 00000CDE 8B5E0A              <4>  mov word %6,[bp+0x0A]
  4398 00000CE1 8A4E0C              <4>  mov byte %7,[bp+0x0C]
  4399                              <4>  stkclose 0x0D
  4400 00000CE4 83C40D              <5>  add word sp, %1
  4401 00000CE7 80F900              <3> 	cmp cl,0
  4402 00000CEA 750D                <3> 	jnz .continue2
  4403 00000CEC 89E2                <3> 		mov dx,sp
  4404 00000CEE 89D5                <3> 		mov bp,dx					
  4405 00000CF0 89460A              <3> 		mov word [bp+0x0A],ax
  4406 00000CF3 895E0C              <3> 		mov word [bp+0x0C],bx
  4407 00000CF6 E94801              <3> 		jmp .done	
  4408                              <3> 	.continue2:
  4409                              <3> 	
  4410                              <3> 	; valores especiais tratados	
  4411                              <3> 
  4412 00000CF9 89E0                <3> 	mov ax,sp
  4413 00000CFB 89C5                <3> 	mov bp,ax	
  4414 00000CFD 8B4602              <3> 	mov ax,[bp+2]
  4415 00000D00 8B5E06              <3> 	mov bx,[bp+6]
  4416                              <3> 	
  4417 00000D03 D1E0                <3> 	shl ax,1
  4418 00000D05 D1E3                <3> 	shl bx,1
  4419 00000D07 88E5                <3> 	mov ch,ah	
  4420 00000D09 28FD                <3> 	sub ch,bh	
  4421                              <3> 		
  4422 00000D0B 80FD00              <3> 	cmp ch,0
  4423 00000D0E 7402                <3> 	jz .expzero
  4424 00000D10 EB1E                <3> 	jmp .expnzero
  4425                              <3> 	.expzero:
  4426 00000D12 50                  <3> 		push ax
  4427 00000D13 8B4602              <3> 		mov ax,[bp+2]
  4428 00000D16 8B5E04              <3> 		mov bx,[bp+4]
  4429 00000D19 8B4E06              <3> 		mov cx,[bp+6]
  4430 00000D1C 8B5608              <3> 		mov dx,[bp+8]
  4431 00000D1F 257F80              <3> 		and ax,0x807F
  4432 00000D22 81E17F80            <3> 		and cx,0x807F
  4433 00000D26 0D8000              <3> 		or ax,0x0080
  4434 00000D29 81C98000            <3> 		or cx,0x0080
  4435                              <3> 												
  4436 00000D2D E99A00              <3> 		jmp .endexpcmp
  4437                              <3> 	.expnzero:
  4438                              <3> 				
  4439 00000D30 80FD00              <3> 		cmp ch,0
  4440 00000D33 7F05                <3> 		jg .exp1great
  4441 00000D35 7C49                <3> 		jl .exp1less
  4442 00000D37 E99000              <3> 		jmp .endexpcmp
  4443                              <3> 		.exp1great:					
  4444 00000D3A 50                  <3> 			push ax
  4445                              <3> 		
  4446 00000D3B 8B4606              <3> 			mov ax,[bp+6]
  4447 00000D3E 8B5E08              <3> 			mov bx,[bp+8]
  4448 00000D41 83E07F              <3> 			and ax,0x007F
  4449 00000D44 0D8000              <3> 			or ax,0x0080
  4450                              <3> 						
  4451 00000D47 55                  <3> 			push bp
  4452                              <3> 			__shr32 ax, bx, ch
  4453                              <4>  stkopen 5
  4454 00000D48 83EC05              <5>  sub word sp, %1
  4455 00000D4B 54                  <5>  push sp
  4456 00000D4C 5D                  <5>  pop bp
  4457 00000D4D 894600              <4>  mov word [bp+0], %1
  4458 00000D50 895E02              <4>  mov word [bp+2], %2
  4459 00000D53 886E04              <4>  mov byte [bp+4], %3
  4460 00000D56 E876F6              <4>  call proc_shr32
  4461 00000D59 54                  <4>  push sp
  4462 00000D5A 5D                  <4>  pop bp
  4463 00000D5B 8B4600              <4>  mov word %1, [bp+0]
  4464 00000D5E 8B5E02              <4>  mov word %2, [bp+2]
  4465                              <4>  stkclose 5
  4466 00000D61 83C405              <5>  add word sp, %1
  4467 00000D64 5D                  <3> 			pop bp		
  4468                              <3> 				
  4469 00000D65 8B5606              <3> 			mov dx,[bp+6]
  4470 00000D68 81E20080            <3> 			and dx,0x8000
  4471 00000D6C 01D0                <3> 			add ax,dx			
  4472                              <3> 			
  4473 00000D6E 89C1                <3> 			mov cx,ax
  4474 00000D70 89DA                <3> 			mov dx,bx
  4475 00000D72 8B4602              <3> 			mov ax,[bp+2]
  4476 00000D75 8B5E04              <3> 			mov bx,[bp+4]										
  4477                              <3> 									
  4478 00000D78 257F80              <3> 			and ax,0x807F
  4479 00000D7B 0D8000              <3> 			or ax,0x0080
  4480                              <3> 						
  4481 00000D7E EB4A                <3> 			jmp .endexp1cmp	
  4482                              <3> 		.exp1less:
  4483 00000D80 88E9                <3> 			mov cl,ch
  4484 00000D82 B5FF                <3> 			mov ch,0xFF
  4485 00000D84 28CD                <3> 			sub ch,cl
  4486 00000D86 FEC5                <3> 			inc ch
  4487 00000D88 53                  <3> 			push bx		
  4488                              <3> 		
  4489 00000D89 8B4602              <3> 			mov ax,[bp+2]
  4490 00000D8C 8B5E04              <3> 			mov bx,[bp+4]
  4491 00000D8F 83E07F              <3> 			and ax,0x007F
  4492 00000D92 0D8000              <3> 			or ax,0x0080
  4493                              <3> 						
  4494 00000D95 55                  <3> 			push bp
  4495                              <3> 			__shr32 ax, bx, ch
  4496                              <4>  stkopen 5
  4497 00000D96 83EC05              <5>  sub word sp, %1
  4498 00000D99 54                  <5>  push sp
  4499 00000D9A 5D                  <5>  pop bp
  4500 00000D9B 894600              <4>  mov word [bp+0], %1
  4501 00000D9E 895E02              <4>  mov word [bp+2], %2
  4502 00000DA1 886E04              <4>  mov byte [bp+4], %3
  4503 00000DA4 E828F6              <4>  call proc_shr32
  4504 00000DA7 54                  <4>  push sp
  4505 00000DA8 5D                  <4>  pop bp
  4506 00000DA9 8B4600              <4>  mov word %1, [bp+0]
  4507 00000DAC 8B5E02              <4>  mov word %2, [bp+2]
  4508                              <4>  stkclose 5
  4509 00000DAF 83C405              <5>  add word sp, %1
  4510 00000DB2 5D                  <3> 			pop bp
  4511                              <3> 								
  4512 00000DB3 8B5602              <3> 			mov dx,[bp+2]
  4513 00000DB6 81E20080            <3> 			and dx,0x8000
  4514 00000DBA 01D0                <3> 			add ax,dx			
  4515                              <3> 			
  4516 00000DBC 8B4E06              <3> 			mov cx,[bp+6]
  4517 00000DBF 8B5608              <3> 			mov dx,[bp+8]										
  4518                              <3> 									
  4519 00000DC2 81E17F80            <3> 			and cx,0x807F
  4520 00000DC6 81C98000            <3> 			or cx,0x0080
  4521                              <3> 									
  4522                              <3> 		.endexp1cmp:
  4523                              <3> 		
  4524                              <3> 	.endexpcmp:			
  4525                              <3> 	
  4526 00000DCA 837E0E00            <3> 	cmp word [bp+0x0E],0
  4527 00000DCE 7526                <3> 	jnz .sub
  4528                              <3> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0
  4529                              <4>  stkopen 0x0D
  4530 00000DD0 83EC0D              <5>  sub word sp, %1
  4531 00000DD3 54                  <5>  push sp
  4532 00000DD4 5D                  <5>  pop bp
  4533 00000DD5 894600              <4>  mov word [bp+0],%1
  4534 00000DD8 895E02              <4>  mov word [bp+2],%2
  4535 00000DDB 894E04              <4>  mov word [bp+4],%3
  4536 00000DDE 895606              <4>  mov word [bp+6],%4
  4537 00000DE1 C7460C0000          <4>  mov word [bp+0x0C], %7
  4538 00000DE6 E81201              <4>  call proc__iaddorsub32
  4539 00000DE9 54                  <4>  push sp
  4540 00000DEA 5D                  <4>  pop bp
  4541 00000DEB 8B4608              <4>  mov word %5,[bp+8]
  4542 00000DEE 8B5E0A              <4>  mov word %6,[bp+0x0A]
  4543                              <4>  stkclose 0x0D
  4544 00000DF1 83C40D              <5>  add word sp, %1
  4545 00000DF4 EB24                <3> 		jmp .endop
  4546                              <3> 	.sub:
  4547                              <3> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0x8000
  4548                              <4>  stkopen 0x0D
  4549 00000DF6 83EC0D              <5>  sub word sp, %1
  4550 00000DF9 54                  <5>  push sp
  4551 00000DFA 5D                  <5>  pop bp
  4552 00000DFB 894600              <4>  mov word [bp+0],%1
  4553 00000DFE 895E02              <4>  mov word [bp+2],%2
  4554 00000E01 894E04              <4>  mov word [bp+4],%3
  4555 00000E04 895606              <4>  mov word [bp+6],%4
  4556 00000E07 C7460C0080          <4>  mov word [bp+0x0C], %7
  4557 00000E0C E8EC00              <4>  call proc__iaddorsub32
  4558 00000E0F 54                  <4>  push sp
  4559 00000E10 5D                  <4>  pop bp
  4560 00000E11 8B4608              <4>  mov word %5,[bp+8]
  4561 00000E14 8B5E0A              <4>  mov word %6,[bp+0x0A]
  4562                              <4>  stkclose 0x0D
  4563 00000E17 83C40D              <5>  add word sp, %1
  4564                              <3> 	.endop:
  4565                              <3> 						
  4566 00000E1A 59                  <3> 	pop cx
  4567                              <3> 	
  4568                              <3> 	__normalize ax, bx, cx
  4569                              <4>  stkopen 0x06
  4570 00000E1B 83EC06              <5>  sub word sp, %1
  4571 00000E1E 54                  <5>  push sp
  4572 00000E1F 5D                  <5>  pop bp
  4573 00000E20 894600              <4>  mov word [bp+0],%1
  4574 00000E23 895E02              <4>  mov word [bp+2],%2
  4575 00000E26 894E04              <4>  mov word [bp+4],%3
  4576 00000E29 E81600              <4>  call proc__normalize
  4577 00000E2C 54                  <4>  push sp
  4578 00000E2D 5D                  <4>  pop bp
  4579 00000E2E 8B4600              <4>  mov word %1,[bp+0]
  4580 00000E31 8B5E02              <4>  mov word %2,[bp+2]
  4581                              <4>  stkclose 0x06
  4582 00000E34 83C406              <5>  add word sp, %1
  4583                              <3> 	
  4584 00000E37 89E1                <3> 	mov cx,sp
  4585 00000E39 89CD                <3> 	mov bp,cx
  4586 00000E3B 89460A              <3> 	mov word [bp+0x0A],ax
  4587 00000E3E 895E0C              <3> 	mov word [bp+0x0C],bx
  4588                              <3> 									
  4589                              <3> 	.done:		
  4590                              <3> 							
  4591 00000E41 C3                  <3> 	ret
  4592                              <3> 	
  4593                              <3> proc__normalize:
  4594 00000E42 89E0                <3> 	mov ax,sp
  4595 00000E44 89C5                <3> 	mov bp,ax	
  4596                              <3> 
  4597 00000E46 8B4E02              <3> 	mov cx,[bp+2]	
  4598 00000E49 8B5604              <3> 	mov dx,[bp+4]
  4599 00000E4C 8B5E06              <3> 	mov bx,[bp+6]
  4600                              <3> 					
  4601 00000E4F 89C8                <3> 	mov ax,cx
  4602 00000E51 250080              <3> 	and ax,0x8000			
  4603 00000E54 894602              <3> 	mov [bp+2],ax	
  4604                              <3> 					
  4605 00000E57 81E1FF7F            <3> 	and cx,0x7FFF
  4606                              <3> 			
  4607 00000E5B 51                  <3> 	push cx
  4608 00000E5C 52                  <3> 	push dx
  4609 00000E5D 53                  <3> 	push bx
  4610                              <3> 	__lzbitcount32 cx, dx, al	
  4611 00000E5E 52                  <4>  push %2
  4612                              <4>  __lzbitcount16 %1, cl
  4613                              <5>  stkopen 3
  4614 00000E5F 83EC03              <6>  sub word sp, %1
  4615 00000E62 54                  <6>  push sp
  4616 00000E63 5D                  <6>  pop bp
  4617 00000E64 894E00              <5>  mov word [bp+0], %1
  4618 00000E67 E8EAF5              <5>  call proc__lzbitcount16
  4619 00000E6A 54                  <5>  push sp
  4620 00000E6B 5D                  <5>  pop bp
  4621 00000E6C 8A4E02              <5>  mov byte %2, [bp+2]
  4622                              <5>  stkclose 3
  4623 00000E6F 83C403              <6>  add word sp, %1
  4624 00000E72 58                  <4>  pop ax
  4625 00000E73 80F910              <4>  cmp cl,16
  4626 00000E76 7217                <4>  jb .end
  4627 00000E78 51                  <4>  push cx
  4628                              <4>  __lzbitcount16 ax, al
  4629                              <5>  stkopen 3
  4630 00000E79 83EC03              <6>  sub word sp, %1
  4631 00000E7C 54                  <6>  push sp
  4632 00000E7D 5D                  <6>  pop bp
  4633 00000E7E 894600              <5>  mov word [bp+0], %1
  4634 00000E81 E8D0F5              <5>  call proc__lzbitcount16
  4635 00000E84 54                  <5>  push sp
  4636 00000E85 5D                  <5>  pop bp
  4637 00000E86 8A4602              <5>  mov byte %2, [bp+2]
  4638                              <5>  stkclose 3
  4639 00000E89 83C403              <6>  add word sp, %1
  4640 00000E8C 59                  <4>  pop cx
  4641 00000E8D 00C1                <4>  add cl,al
  4642                              <4>  .end:
  4643 00000E8F 88C8                <4>  mov byte %3, cl
  4644 00000E91 5B                  <3> 	pop bx
  4645 00000E92 5A                  <3> 	pop dx
  4646 00000E93 59                  <3> 	pop cx								
  4647                              <3> 		
  4648 00000E94 3C08                <3> 	cmp al,8					
  4649 00000E96 7204                <3> 	jb .shr
  4650 00000E98 7728                <3> 	ja .shl
  4651 00000E9A EB4A                <3> 	jmp .endshrl
  4652                              <3> 	.shr:			
  4653 00000E9C B408                <3> 		mov ah,0x08
  4654 00000E9E 28C4                <3> 		sub ah,al
  4655 00000EA0 00E7                <3> 		add bh,ah
  4656 00000EA2 53                  <3> 		push bx
  4657                              <3> 		__shr32 cx, dx, ah
  4658                              <4>  stkopen 5
  4659 00000EA3 83EC05              <5>  sub word sp, %1
  4660 00000EA6 54                  <5>  push sp
  4661 00000EA7 5D                  <5>  pop bp
  4662 00000EA8 894E00              <4>  mov word [bp+0], %1
  4663 00000EAB 895602              <4>  mov word [bp+2], %2
  4664 00000EAE 886604              <4>  mov byte [bp+4], %3
  4665 00000EB1 E81BF5              <4>  call proc_shr32
  4666 00000EB4 54                  <4>  push sp
  4667 00000EB5 5D                  <4>  pop bp
  4668 00000EB6 8B4E00              <4>  mov word %1, [bp+0]
  4669 00000EB9 8B5602              <4>  mov word %2, [bp+2]
  4670                              <4>  stkclose 5
  4671 00000EBC 83C405              <5>  add word sp, %1
  4672 00000EBF 5B                  <3> 		pop bx
  4673 00000EC0 EB24                <3> 		jmp .endshrl
  4674                              <3> 	.shl:		
  4675 00000EC2 B408                <3> 		mov ah,0x08
  4676 00000EC4 28E0                <3> 		sub al,ah
  4677 00000EC6 28C7                <3> 		sub bh,al			
  4678 00000EC8 53                  <3> 		push bx
  4679                              <3> 		__shl32 cx, dx, al
  4680                              <4>  stkopen 5
  4681 00000EC9 83EC05              <5>  sub word sp, %1
  4682 00000ECC 54                  <5>  push sp
  4683 00000ECD 5D                  <5>  pop bp
  4684 00000ECE 894E00              <4>  mov word [bp+0], %1
  4685 00000ED1 895602              <4>  mov word [bp+2], %2
  4686 00000ED4 884604              <4>  mov byte [bp+4], %3
  4687 00000ED7 E8AEF4              <4>  call proc_shl32
  4688 00000EDA 54                  <4>  push sp
  4689 00000EDB 5D                  <4>  pop bp
  4690 00000EDC 8B4E00              <4>  mov word %1, [bp+0]
  4691 00000EDF 8B5602              <4>  mov word %2, [bp+2]
  4692                              <4>  stkclose 5
  4693 00000EE2 83C405              <5>  add word sp, %1
  4694 00000EE5 5B                  <3> 		pop bx			
  4695                              <3> 	.endshrl:											
  4696                              <3> 								
  4697 00000EE6 30DB                <3> 	xor bl,bl
  4698 00000EE8 D1EB                <3> 	shr bx,1	
  4699 00000EEA 83E17F              <3> 	and cx,0x007F	
  4700                              <3> 		
  4701 00000EED 89E0                <3> 	mov ax,sp
  4702 00000EEF 89C5                <3> 	mov bp,ax
  4703 00000EF1 015E02              <3> 	add word [bp+2],bx
  4704 00000EF4 014E02              <3> 	add word [bp+2],cx	
  4705 00000EF7 895604              <3> 	mov word [bp+4],dx
  4706                              <3> 	
  4707 00000EFA C3                  <3> 	ret
  4708                              <3> 
  4709                              <3> proc__iaddorsub32:
  4710 00000EFB 89E0                <3> 	mov ax,sp
  4711 00000EFD 89C5                <3> 	mov bp,ax
  4712                              <3> 	
  4713 00000EFF 8B4602              <3> 	mov ax,[bp+2]
  4714 00000F02 8B5E04              <3> 	mov bx,[bp+4]
  4715 00000F05 8B4E06              <3> 	mov cx,[bp+6]
  4716 00000F08 8B5608              <3> 	mov dx,[bp+8]	
  4717                              <3> 	
  4718 00000F0B 50                  <3> 	push ax	
  4719 00000F0C 250080              <3> 	and ax, 0x8000
  4720 00000F0F 83F800              <3> 	cmp ax,0
  4721 00000F12 741B                <3> 	jz .endv1neg
  4722 00000F14 58                  <3> 		pop ax
  4723 00000F15 51                  <3> 		push cx
  4724 00000F16 52                  <3> 		push dx
  4725                              <3> 		
  4726 00000F17 B9FFFF              <3> 		mov cx,0xFFFF
  4727 00000F1A BAFFFF              <3> 		mov dx,0xFFFF
  4728 00000F1D 25FF7F              <3> 		and ax,0x7FFF
  4729 00000F20 29DA                <3> 		sub dx,bx
  4730 00000F22 19C1                <3> 		sbb cx,ax
  4731 00000F24 42                  <3> 		inc dx
  4732 00000F25 83D100              <3> 		adc cx,0
  4733 00000F28 89C8                <3> 		mov ax,cx
  4734 00000F2A 89D3                <3> 		mov bx,dx
  4735                              <3> 		
  4736 00000F2C 5A                  <3> 		pop dx
  4737 00000F2D 59                  <3> 		pop cx
  4738 00000F2E 50                  <3> 		push ax	
  4739                              <3> 	.endv1neg:		
  4740 00000F2F 58                  <3> 	pop ax	
  4741                              <3> 		
  4742 00000F30 51                  <3> 	push cx
  4743 00000F31 81E10080            <3> 	and cx,0x8000
  4744 00000F35 83F900              <3> 	cmp cx,0
  4745 00000F38 741C                <3> 	jz .endv2neg
  4746 00000F3A 59                  <3> 		pop cx
  4747 00000F3B 50                  <3> 		push ax
  4748 00000F3C 53                  <3> 		push bx
  4749                              <3> 		
  4750 00000F3D B8FFFF              <3> 		mov ax,0xFFFF
  4751 00000F40 BBFFFF              <3> 		mov bx,0xFFFF
  4752 00000F43 81E1FF7F            <3> 		and cx,0x7FFF
  4753 00000F47 29D3                <3> 		sub bx,dx
  4754 00000F49 19C8                <3> 		sbb ax,cx
  4755 00000F4B 43                  <3> 		inc bx
  4756 00000F4C 83D000              <3> 		adc ax,0
  4757 00000F4F 89C1                <3> 		mov cx,ax
  4758 00000F51 89DA                <3> 		mov dx,bx
  4759                              <3> 		
  4760 00000F53 5B                  <3> 		pop bx
  4761 00000F54 58                  <3> 		pop ax
  4762 00000F55 51                  <3> 		push cx
  4763                              <3> 	.endv2neg:	
  4764 00000F56 59                  <3> 	pop cx
  4765                              <3> 					
  4766 00000F57 837E0E00            <3> 	cmp word [bp+0x0E],0
  4767 00000F5B 7506                <3> 	jnz .sub
  4768 00000F5D 01D3                <3> 		add bx, dx
  4769 00000F5F 11C8                <3> 		adc ax, cx				
  4770 00000F61 EB04                <3> 		jmp .endop
  4771                              <3> 	.sub:
  4772 00000F63 29D3                <3> 		sub bx, dx
  4773 00000F65 19C8                <3> 		sbb ax, cx
  4774                              <3> 	.endop:
  4775                              <3> 	
  4776 00000F67 89C1                <3> 	mov cx,ax
  4777 00000F69 81E10080            <3> 	and cx,0x8000
  4778 00000F6D 83F900              <3> 	cmp cx,0
  4779 00000F70 7415                <3> 	jz .endresneg
  4780 00000F72 B9FFFF              <3> 		mov cx,0xFFFF
  4781 00000F75 BAFFFF              <3> 		mov dx,0xFFFF
  4782 00000F78 29DA                <3> 		sub dx,bx
  4783 00000F7A 19C1                <3> 		sbb cx,ax
  4784 00000F7C 42                  <3> 		inc dx
  4785 00000F7D 83D100              <3> 		adc cx,0
  4786 00000F80 89C8                <3> 		mov ax,cx
  4787 00000F82 89D3                <3> 		mov bx,dx
  4788                              <3> 		
  4789 00000F84 050080              <3> 		add ax,0x8000
  4790                              <3> 	.endresneg:
  4791                              <3> 	
  4792 00000F87 89E1                <3> 	mov cx,sp
  4793 00000F89 89CD                <3> 	mov bp,cx
  4794 00000F8B 89460A              <3> 	mov [bp+0x0A], ax
  4795 00000F8E 895E0C              <3> 	mov [bp+0x0C], bx
  4796                              <3> 	
  4797 00000F91 C3                  <3> 	ret	
  4798                              <3> 	
  4799                              <3> proc__mul32_64:
  4800 00000F92 89E0                <3> 	mov ax,sp
  4801 00000F94 89C5                <3> 	mov bp,ax
  4802                              <3> 		
  4803 00000F96 31D2                <3> 	xor dx,dx
  4804 00000F98 8B4604              <3> 	mov ax,[bp+4]
  4805 00000F9B F76608              <3> 	mul word [bp+8]
  4806                              <3> 	
  4807 00000F9E C7460A0000          <3> 	mov word [bp+0x0A], 0
  4808 00000FA3 C7460C0000          <3> 	mov word [bp+0x0C], 0
  4809 00000FA8 89560E              <3> 	mov word [bp+0x0E], dx
  4810 00000FAB 894610              <3> 	mov word [bp+0x10], ax
  4811                              <3> 		
  4812 00000FAE 31D2                <3> 	xor dx,dx
  4813 00000FB0 8B4604              <3> 	mov ax,[bp+4]
  4814 00000FB3 F76606              <3> 	mul word [bp+6]
  4815                              <3> 	
  4816 00000FB6 01460E              <3> 	add [bp+0x0E],ax
  4817 00000FB9 11560C              <3> 	adc [bp+0x0C],dx
  4818 00000FBC 83560A00            <3> 	adc word [bp+0x0A],0
  4819                              <3> 	
  4820 00000FC0 31D2                <3> 	xor dx,dx
  4821 00000FC2 8B4602              <3> 	mov ax,[bp+2]
  4822 00000FC5 F76608              <3> 	mul word [bp+8]
  4823                              <3> 	
  4824 00000FC8 01460E              <3> 	add [bp+0x0E],ax
  4825 00000FCB 11560C              <3> 	adc [bp+0x0C],dx
  4826                              <3> 	
  4827 00000FCE 31D2                <3> 	xor dx,dx
  4828 00000FD0 8B4602              <3> 	mov ax,[bp+2]
  4829 00000FD3 F76606              <3> 	mul word [bp+6]
  4830                              <3> 	
  4831 00000FD6 01460C              <3> 	add [bp+0x0C],ax
  4832 00000FD9 11560A              <3> 	adc [bp+0x0A],dx
  4833                              <3> 	
  4834 00000FDC C3                  <3> 	ret
  4835                              <3> 	
  4836                              <3> proc__fldiv32:
  4837 00000FDD 89E0                <3> 	mov ax,sp
  4838 00000FDF 89C5                <3> 	mov bp,ax
  4839                              <3> 	
  4840 00000FE1 8B4602              <3> 	mov ax,[bp+2]
  4841 00000FE4 8B5E04              <3> 	mov bx,[bp+4]
  4842 00000FE7 C7460A0000          <3> 	mov word [bp+0x0A],0
  4843 00000FEC C7460C0000          <3> 	mov word [bp+0x0C],0
  4844                              <3> 	
  4845 00000FF1 B118                <3> 	mov cl,24
  4846                              <3> 	.l1:
  4847 00000FF3 80F900              <3> 		cmp cl,0
  4848 00000FF6 0F84AC00            <3> 		jz .l2
  4849 00000FFA 51                  <3> 		push cx
  4850                              <3> 		
  4851 00000FFB 8B4E0A              <3> 		mov cx,[bp+0x0A]
  4852 00000FFE 8B560C              <3> 		mov dx,[bp+0x0C]
  4853 00001001 55                  <3> 		push bp
  4854 00001002 50                  <3> 		push ax
  4855 00001003 53                  <3> 		push bx
  4856                              <3> 		__shl32 cx, dx, 1
  4857                              <4>  stkopen 5
  4858 00001004 83EC05              <5>  sub word sp, %1
  4859 00001007 54                  <5>  push sp
  4860 00001008 5D                  <5>  pop bp
  4861 00001009 894E00              <4>  mov word [bp+0], %1
  4862 0000100C 895602              <4>  mov word [bp+2], %2
  4863 0000100F C6460401            <4>  mov byte [bp+4], %3
  4864 00001013 E872F3              <4>  call proc_shl32
  4865 00001016 54                  <4>  push sp
  4866 00001017 5D                  <4>  pop bp
  4867 00001018 8B4E00              <4>  mov word %1, [bp+0]
  4868 0000101B 8B5602              <4>  mov word %2, [bp+2]
  4869                              <4>  stkclose 5
  4870 0000101E 83C405              <5>  add word sp, %1
  4871 00001021 5B                  <3> 		pop bx
  4872 00001022 58                  <3> 		pop ax
  4873 00001023 5D                  <3> 		pop bp
  4874 00001024 894E0A              <3> 		mov [bp+0x0A],cx
  4875 00001027 89560C              <3> 		mov [bp+0x0C],dx
  4876                              <3> 				
  4877 0000102A 8B4E06              <3> 		mov cx,[bp+6]
  4878 0000102D 8B5608              <3> 		mov dx,[bp+8]
  4879 00001030 50                  <3> 		push ax
  4880 00001031 53                  <3> 		push bx
  4881 00001032 55                  <3> 		push bp
  4882                              <3> 		__cmp32 ax, bx, cx, dx, dl
  4883                              <4>  stkopen 9
  4884 00001033 83EC09              <5>  sub word sp, %1
  4885 00001036 54                  <5>  push sp
  4886 00001037 5D                  <5>  pop bp
  4887 00001038 894600              <4>  mov word [bp+0], %1
  4888 0000103B 895E02              <4>  mov word [bp+2], %2
  4889 0000103E 894E04              <4>  mov word [bp+4], %3
  4890 00001041 895606              <4>  mov word [bp+6], %4
  4891 00001044 E816F3              <4>  call proc_cmp32
  4892 00001047 54                  <4>  push sp
  4893 00001048 5D                  <4>  pop bp
  4894 00001049 8A5608              <4>  mov byte %5, [bp+8]
  4895                              <4>  stkclose 9
  4896 0000104C 83C409              <5>  add word sp, %1
  4897 0000104F 5D                  <3> 		pop bp
  4898 00001050 5B                  <3> 		pop bx
  4899 00001051 58                  <3> 		pop ax				
  4900                              <3> 		
  4901 00001052 80FA00              <3> 		cmp dl,0
  4902 00001055 7C2A                <3> 		jl .endsub
  4903 00001057 8B4E06              <3> 			mov cx,[bp+6]
  4904 0000105A 8B5608              <3> 			mov dx,[bp+8]
  4905 0000105D 55                  <3> 			push bp									
  4906                              <3> 			__sub32 ax, bx, cx, dx, ax, bx						
  4907                              <4>  stkopen 0x0C
  4908 0000105E 83EC0C              <5>  sub word sp, %1
  4909 00001061 54                  <5>  push sp
  4910 00001062 5D                  <5>  pop bp
  4911 00001063 894600              <4>  mov word [bp+0], %1
  4912 00001066 895E02              <4>  mov word [bp+2], %2
  4913 00001069 894E04              <4>  mov word [bp+4], %3
  4914 0000106C 895606              <4>  mov word [bp+6], %4
  4915 0000106F E8D0F2              <4>  call proc_sub32
  4916 00001072 54                  <4>  push sp
  4917 00001073 5D                  <4>  pop bp
  4918 00001074 8B4608              <4>  mov word %5, [bp+8]
  4919 00001077 8B5E0A              <4>  mov word %6, [bp+0x0A]
  4920                              <4>  stkclose 0x0C
  4921 0000107A 83C40C              <5>  add word sp, %1
  4922 0000107D 5D                  <3> 			pop bp			
  4923 0000107E FF460C              <3> 			inc word [bp+0x0C]			
  4924                              <3> 		.endsub:
  4925                              <3> 				
  4926 00001081 55                  <3> 		push bp
  4927                              <3> 		__shl32 ax, bx, 1
  4928                              <4>  stkopen 5
  4929 00001082 83EC05              <5>  sub word sp, %1
  4930 00001085 54                  <5>  push sp
  4931 00001086 5D                  <5>  pop bp
  4932 00001087 894600              <4>  mov word [bp+0], %1
  4933 0000108A 895E02              <4>  mov word [bp+2], %2
  4934 0000108D C6460401            <4>  mov byte [bp+4], %3
  4935 00001091 E8F4F2              <4>  call proc_shl32
  4936 00001094 54                  <4>  push sp
  4937 00001095 5D                  <4>  pop bp
  4938 00001096 8B4600              <4>  mov word %1, [bp+0]
  4939 00001099 8B5E02              <4>  mov word %2, [bp+2]
  4940                              <4>  stkclose 5
  4941 0000109C 83C405              <5>  add word sp, %1
  4942 0000109F 5D                  <3> 		pop bp
  4943                              <3> 		
  4944 000010A0 59                  <3> 		pop cx
  4945 000010A1 FEC9                <3> 		dec cl
  4946 000010A3 E94DFF              <3> 		jmp .l1
  4947                              <3> 	.l2:
  4948                              <3> 	
  4949 000010A6 C3                  <3> 	ret
  4950                              <3> 
  4951                              <3> proc_flgetsig:
  4952 000010A7 89E0                <3> 	mov ax,sp
  4953 000010A9 89C5                <3> 	mov bp,ax
  4954                              <3> 	
  4955 000010AB 8B4602              <3> 	mov ax,[bp+2]
  4956 000010AE 250080              <3> 	and ax,0x8000
  4957 000010B1 894604              <3> 	mov [bp+4],ax	
  4958                              <3> 	
  4959 000010B4 C3                  <3> 	ret
  4960                              <3> 
  4961                              <3> proc_flinvsig:
  4962 000010B5 89E0                <3> 	mov ax,sp
  4963 000010B7 89C5                <3> 	mov bp,ax
  4964                              <3> 	
  4965 000010B9 8B4602              <3> 	mov ax,[bp+2]	
  4966 000010BC 89C1                <3> 	mov cx,ax	
  4967 000010BE 83C900              <3> 	or cx, 0x0000
  4968 000010C1 F7D1                <3> 	not cx
  4969 000010C3 81E10080            <3> 	and cx,0x8000								
  4970 000010C7 25FF7F              <3> 	and ax,0x7FFF			
  4971 000010CA 01C8                <3> 	add ax,cx	
  4972 000010CC 894602              <3> 	mov word [bp+2],ax
  4973                              <3> 	
  4974 000010CF C3                  <3> 	ret
  4975                              <3> 
  4976                              <3> proc_flsetsig:
  4977 000010D0 89E0                <3> 	mov ax,sp
  4978 000010D2 89C5                <3> 	mov bp,ax
  4979                              <3> 
  4980 000010D4 8B4602              <3> 	mov ax,[bp+2]
  4981 000010D7 25FF7F              <3> 	and ax,0x7FFF
  4982 000010DA 034604              <3> 	add ax,[bp+4]
  4983 000010DD 894602              <3> 	mov [bp+2],ax
  4984                              <3> 				
  4985 000010E0 C3                  <3> 	ret
  4986                              <3> 
  4987                              <3> proc__validate:
  4988 000010E1 89E0                <3> 	mov ax,sp
  4989 000010E3 89C5                <3> 	mov bp,ax
  4990                              <3> 	
  4991 000010E5 8B4602              <3> 	mov ax,[bp+2]
  4992 000010E8 25FF7F              <3> 	and ax,0x7FFF
  4993 000010EB 3DFF7F              <3> 	cmp ax,0x7FFF
  4994 000010EE 750A                <3> 	jne .isnumber1
  4995                              <3> 
  4996 000010F0 8B4604              <3> 	mov ax,[bp+4]
  4997 000010F3 83F8FF              <3> 	cmp ax,0xFFFF
  4998 000010F6 7502                <3> 	jnz .isnumber1
  4999                              <3> 	
  5000 000010F8 EB37                <3> 	jmp .NaN
  5001                              <3> 	
  5002                              <3> 	.isnumber1:
  5003                              <3> 	
  5004 000010FA 8B4606              <3> 	mov ax,[bp+6]
  5005 000010FD 25FF7F              <3> 	and ax,0x7FFF
  5006 00001100 3DFF7F              <3> 	cmp ax,0x7FFF
  5007 00001103 750A                <3> 	jne .isnumber2
  5008                              <3> 
  5009 00001105 8B4608              <3> 	mov ax,[bp+8]
  5010 00001108 83F8FF              <3> 	cmp ax,0xFFFF
  5011 0000110B 7502                <3> 	jnz .isnumber2
  5012                              <3> 	
  5013 0000110D EB22                <3> 	jmp .NaN
  5014                              <3> 	
  5015                              <3> 	.isnumber2:
  5016                              <3> 	
  5017 0000110F 8B4602              <3> 	mov ax,[bp+2]
  5018 00001112 D1E0                <3> 	shl ax,1
  5019 00001114 80FCFF              <3> 	cmp ah,0xFF
  5020 00001117 740C                <3> 	je .infinity
  5021                              <3> 
  5022 00001119 8B5E06              <3> 	mov bx,[bp+6]
  5023 0000111C D1E3                <3> 	shl bx,1
  5024 0000111E 80FFFF              <3> 	cmp bh,0xFF
  5025 00001121 7402                <3> 	je .infinity			
  5026                              <3> 	
  5027 00001123 EB18                <3> 	jmp .ok	
  5028                              <3> 	
  5029                              <3> 	.infinity:		
  5030 00001125 C7460A807F          <3> 		mov word [bp+0x0A],0x7F80
  5031 0000112A C7460C0000          <3> 		mov word [bp+0x0C],0
  5032 0000112F EB12                <3> 		jmp .done
  5033                              <3> 	.NaN:
  5034 00001131 C7460AFF7F          <3> 		mov word [bp+0x0A],0x7FFF
  5035 00001136 C7460CFFFF          <3> 		mov word [bp+0x0C],0xFFFF
  5036 0000113B EB06                <3> 		jmp .done
  5037                              <3> 			
  5038                              <3> 	.ok:
  5039 0000113D C6460E01            <3> 		mov byte [bp+0x0E],1
  5040 00001141 EB04                <3> 		jmp .end
  5041                              <3> 	.done:
  5042 00001143 C6460E00            <3> 		mov byte [bp+0x0E],0		
  5043                              <3> 	.end:
  5044                              <3> 	
  5045 00001147 C3                  <3> 	ret
  5046                              <3> 
  5047                              <3> proc__div_validate:
  5048 00001148 89E0                <3> 	mov ax,sp
  5049 0000114A 89C5                <3> 	mov bp,ax
  5050                              <3> 	
  5051 0000114C 8B4602              <3> 	mov ax,[bp+2]
  5052 0000114F 8B5E06              <3> 	mov bx,[bp+6]
  5053 00001152 D1E0                <3> 	shl ax,1
  5054 00001154 D1E3                <3> 	shl bx,1
  5055 00001156 08FC                <3> 	or ah,bh
  5056 00001158 80FC00              <3> 	cmp ah,0
  5057 0000115B 7422                <3> 	jz .NaN
  5058                              <3> 	
  5059 0000115D 8B4602              <3> 	mov ax,[bp+2]
  5060 00001160 D1E0                <3> 	shl ax,1
  5061 00001162 80FC00              <3> 	cmp ah,0
  5062 00001165 7424                <3> 	jz .zero
  5063 00001167 8B5E06              <3> 	mov bx,[bp+6]
  5064 0000116A D1E3                <3> 	shl bx,1
  5065 0000116C 80FF00              <3> 	cmp bh,0	
  5066 0000116F 7402                <3> 	jz .infinity		
  5067                              <3> 		
  5068 00001171 EB24                <3> 	jmp .ok
  5069                              <3> 	
  5070                              <3> 	.infinity:		
  5071 00001173 C7460A807F          <3> 		mov word [bp+0x0A],0x7F80
  5072 00001178 C7460C0000          <3> 		mov word [bp+0x0C],0
  5073 0000117D EB1E                <3> 		jmp .done
  5074                              <3> 	.NaN:
  5075 0000117F C7460AFF7F          <3> 		mov word [bp+0x0A],0x7FFF
  5076 00001184 C7460CFFFF          <3> 		mov word [bp+0x0C],0xFFFF
  5077 00001189 EB12                <3> 		jmp .done
  5078                              <3> 	.zero:
  5079 0000118B C7460A0000          <3> 		mov word [bp+0x0A],0
  5080 00001190 C7460C0000          <3> 		mov word [bp+0x0C],0
  5081 00001195 EB06                <3> 		jmp .done	
  5082                              <3> 			
  5083                              <3> 	.ok:
  5084 00001197 C6460E01            <3> 		mov byte [bp+0x0E],1
  5085 0000119B EB04                <3> 		jmp .end
  5086                              <3> 	.done:	
  5087 0000119D C6460E00            <3> 		mov byte [bp+0x0E],0
  5088                              <3> 	.end:	
  5089                              <3> 		
  5090 000011A1 C3                  <3> 	ret
  5091                              <3> 	
  5092                              <3> proc__mul_validate:
  5093 000011A2 89E0                <3> 	mov ax,sp
  5094 000011A4 89C5                <3> 	mov bp,ax
  5095                              <3> 	
  5096 000011A6 8B4602              <3> 	mov ax,[bp+2]
  5097 000011A9 D1E0                <3> 	shl ax,1	
  5098 000011AB 80FC00              <3> 	cmp ah,0	
  5099 000011AE 740C                <3> 	jz .zero		
  5100                              <3> 
  5101 000011B0 8B5E04              <3> 	mov bx,[bp+4]
  5102 000011B3 D1E3                <3> 	shl bx,1
  5103 000011B5 80FF00              <3> 	cmp bh,0
  5104 000011B8 7402                <3> 	jz .zero
  5105                              <3> 			
  5106 000011BA EB0C                <3> 	jmp .ok
  5107                              <3> 	
  5108                              <3> 	.zero:		
  5109 000011BC C746060000          <3> 		mov word [bp+6],0
  5110 000011C1 C746080000          <3> 		mov word [bp+8],0
  5111 000011C6 EB06                <3> 		jmp .done
  5112                              <3> 			
  5113                              <3> 	.ok:
  5114 000011C8 C6460A01            <3> 		mov byte [bp+0x0A],1
  5115 000011CC EB04                <3> 		jmp .end
  5116                              <3> 	.done:	
  5117 000011CE C6460A00            <3> 		mov byte [bp+0x0A],0
  5118                              <3> 	.end:	
  5119                              <3> 		
  5120 000011D2 C3                  <3> 	ret
  5121                              <3> 	
  5122                              <3> proc__addorsub_validate:
  5123 000011D3 89E0                <3> 	mov ax,sp
  5124 000011D5 89C5                <3> 	mov bp,ax
  5125                              <3> 	
  5126 000011D7 8B4602              <3> 	mov ax,[bp+2]
  5127 000011DA 8B5E06              <3> 	mov bx,[bp+6]	
  5128 000011DD D1E0                <3> 	shl ax,1
  5129 000011DF D1E3                <3> 	shl bx,1
  5130 000011E1 08FC                <3> 	or ah,bh
  5131 000011E3 80FC00              <3> 	cmp ah,0
  5132 000011E6 7416                <3> 	jz .zero
  5133                              <3> 	
  5134 000011E8 8B4602              <3> 	mov ax,[bp+2]
  5135 000011EB D1E0                <3> 	shl ax,1
  5136 000011ED 80FC00              <3> 	cmp ah,0		
  5137 000011F0 7426                <3> 	jz .value2
  5138                              <3> 	
  5139 000011F2 8B4606              <3> 	mov ax,[bp+6]
  5140 000011F5 D1E0                <3> 	shl ax,1
  5141 000011F7 80FC00              <3> 	cmp ah,0
  5142 000011FA 740E                <3> 	jz .value1	
  5143                              <3> 		
  5144 000011FC EB28                <3> 	jmp .ok
  5145                              <3> 	
  5146                              <3> 	.zero:		
  5147 000011FE C7460A0000          <3> 		mov word [bp+0x0A],0
  5148 00001203 C7460C0000          <3> 		mov word [bp+0x0C],0
  5149 00001208 EB22                <3> 		jmp .done
  5150                              <3> 	.value1:
  5151 0000120A 8B4602              <3> 		mov ax,[bp+2]
  5152 0000120D 8B5E04              <3> 		mov bx,[bp+4]
  5153 00001210 89460A              <3> 		mov word [bp+0x0A],ax
  5154 00001213 895E0C              <3> 		mov word [bp+0x0C],bx		
  5155 00001216 EB14                <3> 		jmp .done
  5156                              <3> 	.value2:		
  5157 00001218 8B4606              <3> 		mov ax,[bp+6]
  5158 0000121B 8B5E08              <3> 		mov bx,[bp+8]
  5159 0000121E 89460A              <3> 		mov word [bp+0x0A],ax
  5160 00001221 895E0C              <3> 		mov word [bp+0x0C],bx
  5161 00001224 EB06                <3> 		jmp .done
  5162                              <3> 			
  5163                              <3> 	.ok:
  5164 00001226 C6460E01            <3> 		mov byte [bp+0x0E],1
  5165 0000122A EB04                <3> 		jmp .end
  5166                              <3> 	.done:	
  5167 0000122C C6460E00            <3> 		mov byte [bp+0x0E],0
  5168                              <3> 	.end:	
  5169                              <3> 		
  5170 00001230 C3                  <3> 	ret
  5171                              <3> 	
  5172                              <3> 
  5173                              <3> proc__cmp_validate:
  5174 00001231 89E0                <3> 	mov ax,sp
  5175 00001233 89C5                <3> 	mov bp,ax
  5176                              <3> 	
  5177 00001235 8B4602              <3> 	mov ax,[bp+2]
  5178 00001238 8B5E04              <3> 	mov bx,[bp+4]
  5179 0000123B D1E0                <3> 	shl ax,1
  5180 0000123D D1E3                <3> 	shl bx,1
  5181                              <3> 	
  5182 0000123F 88E5                <3> 	mov ch,ah
  5183 00001241 30FD                <3> 	xor ch,bh
  5184 00001243 80FD00              <3> 	cmp ch,0
  5185 00001246 743A                <3> 	jz .ok
  5186                              <3> 		
  5187 00001248 80FC00              <3> 	cmp ah,0
  5188 0000124B 7407                <3> 	jz .zerov1
  5189                              <3> 	
  5190 0000124D 80FF00              <3> 	cmp bh,0
  5191 00001250 7419                <3> 	jz .zerov2	
  5192                              <3> 			
  5193 00001252 EB2E                <3> 	jmp .ok
  5194                              <3> 	
  5195                              <3> 	.zerov1:
  5196 00001254 8B4604              <3> 		mov ax,[bp+4]
  5197 00001257 250080              <3> 		and ax,0x8000
  5198 0000125A 83F800              <3> 		cmp ax,0
  5199 0000125D 7506                <3> 		jnz .neg1
  5200 0000125F C64606FF            <3> 			mov byte [bp+6],-1
  5201 00001263 EB04                <3> 			jmp .endcmp1
  5202                              <3> 		.neg1:
  5203 00001265 C6460601            <3> 			mov byte [bp+6], 1
  5204                              <3> 		.endcmp1:
  5205 00001269 EB1D                <3> 		jmp .done
  5206                              <3> 	.zerov2:		
  5207 0000126B 8B4602              <3> 		mov ax,[bp+2]
  5208 0000126E 250080              <3> 		and ax,0x8000
  5209 00001271 83F800              <3> 		cmp ax,0
  5210 00001274 7506                <3> 		jnz .neg2
  5211 00001276 C6460601            <3> 			mov byte [bp+6], 1
  5212 0000127A EB04                <3> 			jmp .endcmp2
  5213                              <3> 		.neg2:
  5214 0000127C C64606FF            <3> 			mov byte [bp+6],-1
  5215                              <3> 		.endcmp2:
  5216 00001280 EB06                <3> 		jmp .done	
  5217                              <3> 			
  5218                              <3> 	.ok:
  5219 00001282 C6460701            <3> 		mov byte [bp+7],1
  5220 00001286 EB04                <3> 		jmp .end
  5221                              <3> 	.done:	
  5222 00001288 C6460700            <3> 		mov byte [bp+7],0
  5223                              <3> 	.end:	
  5224                              <3> 		
  5225 0000128C C3                  <3> 	ret
  5226                              <3> 	
  5227                              <3> %endif
  5228                              <2> 
  5229                              <2> %macro flgetsig 2
  5230                              <2> 	flgetsig cs, %1, %2
  5231                              <2> %endmacro
  5232                              <2> 
  5233                              <2> %macro flinvsig 1
  5234                              <2> 	flinvsig cs, %1
  5235                              <2> %endmacro
  5236                              <2> 
  5237                              <2> %macro flsetsig 1
  5238                              <2> 	flsetsig cs, %1
  5239                              <2> %endmacro
  5240                              <2> 
  5241                              <2> %macro flclrsig 1
  5242                              <2> 	flclrsig cs, %1
  5243                              <2> %endmacro
  5244                              <2> 
  5245                              <2> %macro flroundtoint16 2
  5246                              <2> 	flroundtoint16 cs, %1, cs, %2
  5247                              <2> %endmacro
  5248                              <2> 
  5249                              <2> %macro flroundtoint32 1
  5250                              <2> 	flroundtoint32 %1, %1
  5251                              <2> %endmacro
  5252                              <2> 
  5253                              <2> %macro flroundtoint32 2
  5254                              <2> 	flroundtoint32 cs, %1, cs, %2
  5255                              <2> %endmacro
  5256                              <2> 
  5257                              <2> %macro int16tofl 2
  5258                              <2> 	int16tofl cs, %1, cs, %2
  5259                              <2> %endmacro
  5260                              <2> 
  5261                              <2> %macro fltoint16 2
  5262                              <2> 	fltoint16 cs, %1, cs, %2
  5263                              <2> %endmacro
  5264                              <2> 
  5265                              <2> %macro fltoint32 1
  5266                              <2> 	fltoint32 %1, %1
  5267                              <2> %endmacro
  5268                              <2> 
  5269                              <2> %macro fltoint32 2
  5270                              <2> 	fltoint32 cs, %1, cs, %2
  5271                              <2> %endmacro
  5272                              <2> 
  5273                              <2> %macro int32tofl 1
  5274                              <2> 	int32tofl %1, %1
  5275                              <2> %endmacro
  5276                              <2> 
  5277                              <2> %macro int32tofl 2
  5278                              <2> 	int32tofl cs, %1, cs, %2
  5279                              <2> %endmacro
  5280                              <2> 
  5281                              <2> %macro flcmp 3
  5282                              <2> 	flcmp cs, %1, cs, %2, %3
  5283                              <2> %endmacro
  5284                              <2> 
  5285                              <2> %macro flshl 2
  5286                              <2> 	flshl cs, %1, cs, %2
  5287                              <2> %endmacro
  5288                              <2> 
  5289                              <2> %macro flshr 2
  5290                              <2> 	flshr cs, %1, cs, %2
  5291                              <2> %endmacro
  5292                              <2> 
  5293                              <2> %macro fladd 3
  5294                              <2> 	fladd cs, %1, cs, %2, cs, %3
  5295                              <2> %endmacro
  5296                              <2> 
  5297                              <2> %macro flsub 3
  5298                              <2> 	flsub cs, %1, cs, %2, cs, %3
  5299                              <2> %endmacro	
  5300                              <2> 
  5301                              <2> %macro flmul 3
  5302                              <2> 	flmul cs, %1, cs, %2, cs, %3
  5303                              <2> %endmacro
  5304                              <2> 
  5305                              <2> %macro fldiv 3
  5306                              <2> 	fldiv cs, %1, cs, %2, cs, %3
  5307                              <2> %endmacro	
  5308                              <2> 
  5309                              <2> %macro fladd 6
  5310                              <2> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  5311                              <2> %endmacro
  5312                              <2> 
  5313                              <2> %macro flsub 6
  5314                              <2> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  5315                              <2> %endmacro
  5316                              <2> 
  5317                              <2> %macro flroundtoint16 4
  5318                              <2> 	stkopen 0x06
  5319                              <2> 	mov ax,%1
  5320                              <2> 	mov ds,ax
  5321                              <2> 	mov ax,[%2+2]
  5322                              <2> 	mov [bp+0],ax
  5323                              <2> 	mov ax,[%2]
  5324                              <2> 	mov [bp+2],ax	
  5325                              <2> 	call proc_flroundtoint16
  5326                              <2> 	mov ax,sp
  5327                              <2> 	mov bp,ax
  5328                              <2> 	mov ax,%3
  5329                              <2> 	mov ds,ax
  5330                              <2> 	mov ax,[bp+4]
  5331                              <2> 	mov [%4],ax
  5332                              <2> 	stkclose 0x06
  5333                              <2> %endmacro
  5334                              <2> 
  5335                              <2> %macro flroundtoint32 4
  5336                              <2> 	stkopen 0x08
  5337                              <2> 	mov ax,%1
  5338                              <2> 	mov ds,ax
  5339                              <2> 	mov ax,[%2+2]
  5340                              <2> 	mov [bp+0],ax
  5341                              <2> 	mov ax,[%2]
  5342                              <2> 	mov [bp+2],ax	
  5343                              <2> 	call proc_flroundtoint32
  5344                              <2> 	mov ax,sp
  5345                              <2> 	mov bp,ax
  5346                              <2> 	mov ax,%3
  5347                              <2> 	mov ds,ax
  5348                              <2> 	mov ax,[bp+4]
  5349                              <2> 	mov [%4+2],ax
  5350                              <2> 	mov ax,[bp+6]
  5351                              <2> 	mov [%4],ax
  5352                              <2> 	stkclose 0x08
  5353                              <2> %endmacro
  5354                              <2> 
  5355                              <2> %macro fltoint16 4
  5356                              <2> 	stkopen 0x06
  5357                              <2> 	mov ax,%1
  5358                              <2> 	mov ds,ax
  5359                              <2> 	mov ax,[%2+2]
  5360                              <2> 	mov [bp+0],ax
  5361                              <2> 	mov ax,[%2]
  5362                              <2> 	mov [bp+2],ax	
  5363                              <2> 	call proc_fltoint16
  5364                              <2> 	mov ax,sp
  5365                              <2> 	mov bp,ax
  5366                              <2> 	mov ax,%3
  5367                              <2> 	mov ds,ax
  5368                              <2> 	mov ax,[bp+4]
  5369                              <2> 	mov [%4],ax
  5370                              <2> 	stkclose 0x06
  5371                              <2> %endmacro
  5372                              <2> 
  5373                              <2> %macro int16tofl 4	
  5374                              <2> 	stkopen 0x06
  5375                              <2> 	mov ax,%1
  5376                              <2> 	mov ds,ax
  5377                              <2> 	mov ax,[%2]
  5378                              <2> 	mov [bp+0],ax	
  5379                              <2> 	call proc_int16tofl
  5380                              <2> 	mov ax,sp
  5381                              <2> 	mov bp,ax
  5382                              <2> 	mov ax,%3
  5383                              <2> 	mov ds,ax
  5384                              <2> 	mov ax,[bp+2]
  5385                              <2> 	mov [%4+2],ax
  5386                              <2> 	mov ax,[bp+4]
  5387                              <2> 	mov [%4],ax
  5388                              <2> 	stkclose 0x06
  5389                              <2> %endmacro
  5390                              <2> 
  5391                              <2> %macro fltoint32 4
  5392                              <2> 	stkopen 0x08
  5393                              <2> 	mov ax,%1
  5394                              <2> 	mov ds,ax
  5395                              <2> 	mov ax,[%2+2]
  5396                              <2> 	mov [bp+0],ax
  5397                              <2> 	mov ax,[%2]
  5398                              <2> 	mov [bp+2],ax	
  5399                              <2> 	call proc_fltoint32
  5400                              <2> 	mov ax,sp
  5401                              <2> 	mov bp,ax
  5402                              <2> 	mov ax,%3
  5403                              <2> 	mov ds,ax
  5404                              <2> 	mov ax,[bp+4]
  5405                              <2> 	mov [%4+2],ax
  5406                              <2> 	mov ax,[bp+6]
  5407                              <2> 	mov [%4],ax
  5408                              <2> 	stkclose 0x08
  5409                              <2> %endmacro
  5410                              <2> 
  5411                              <2> %macro int32tofl 4
  5412                              <2> 	stkopen 0x08
  5413                              <2> 	mov ax,%1
  5414                              <2> 	mov ds,ax
  5415                              <2> 	mov ax,[%2+2]
  5416                              <2> 	mov [bp+0],ax
  5417                              <2> 	mov ax,[%2]
  5418                              <2> 	mov [bp+2],ax	
  5419                              <2> 	call proc_int32tofl
  5420                              <2> 	mov ax,sp
  5421                              <2> 	mov bp,ax
  5422                              <2> 	mov ax,%3
  5423                              <2> 	mov ds,ax
  5424                              <2> 	mov ax,[bp+4]
  5425                              <2> 	mov [%4+2],ax
  5426                              <2> 	mov ax,[bp+6]
  5427                              <2> 	mov [%4],ax
  5428                              <2> 	stkclose 0x08
  5429                              <2> %endmacro
  5430                              <2> 
  5431                              <2> %macro flgetsig 3
  5432                              <2> 	stkopen 0x04
  5433                              <2> 	mov ax,%1
  5434                              <2> 	mov ds,ax
  5435                              <2> 	mov ax,[%2+2]
  5436                              <2> 	mov word [bp+0], ax
  5437                              <2> 	call proc_flgetsig
  5438                              <2> 	push sp
  5439                              <2> 	pop bp
  5440                              <2> 	mov ax,[bp+2]
  5441                              <2> 	mov word %3, ax
  5442                              <2> 	stkclose 0x04
  5443                              <2> %endmacro
  5444                              <2> 
  5445                              <2> %macro flinvsig 2
  5446                              <2> 	stkopen 0x02
  5447                              <2> 	mov ax,%1
  5448                              <2> 	mov ds,ax
  5449                              <2> 	mov ax,[%2+2]
  5450                              <2> 	mov word [bp+0], ax
  5451                              <2> 	call proc_flinvsig
  5452                              <2> 	push sp
  5453                              <2> 	pop bp
  5454                              <2> 	mov ax,[bp+0]
  5455                              <2> 	mov word [%2+2],ax
  5456                              <2> 	stkclose 0x02
  5457                              <2> %endmacro
  5458                              <2> 
  5459                              <2> %macro flsetsig 2
  5460                              <2> 	stkopen 0x04
  5461                              <2> 	mov ax,%1
  5462                              <2> 	mov ds,ax
  5463                              <2> 	mov ax,[%2+2]
  5464                              <2> 	mov word [bp+0], ax
  5465                              <2> 	mov word [bp+2], 0x8000
  5466                              <2> 	call proc_flsetsig
  5467                              <2> 	push sp
  5468                              <2> 	pop bp
  5469                              <2> 	mov ax,[bp+0]
  5470                              <2> 	mov word [%2+2],ax
  5471                              <2> 	stkclose 0x04	
  5472                              <2> %endmacro
  5473                              <2> 
  5474                              <2> %macro flclrsig 2
  5475                              <2> 	stkopen 0x04
  5476                              <2> 	mov ax,%1
  5477                              <2> 	mov ds,ax
  5478                              <2> 	mov ax,[%2+2]
  5479                              <2> 	mov word [bp+0], ax
  5480                              <2> 	mov word [bp+2], 0x0000
  5481                              <2> 	call proc_flsetsig
  5482                              <2> 	push sp
  5483                              <2> 	pop bp
  5484                              <2> 	mov ax,[bp+0]
  5485                              <2> 	mov word [%2+2],ax
  5486                              <2> 	stkclose 0x04	
  5487                              <2> %endmacro
  5488                              <2> 
  5489                              <2> %macro flcmp 5	
  5490                              <2> 	stkopen 0x09
  5491                              <2> 	mov ax,%1
  5492                              <2> 	mov ds,ax
  5493                              <2> 	mov ax,[%2+2]
  5494                              <2> 	mov [bp+0],ax
  5495                              <2> 	mov ax,[%2]
  5496                              <2> 	mov [bp+2],ax
  5497                              <2> 	mov ax,%3
  5498                              <2> 	mov ds,ax
  5499                              <2> 	mov ax,[%4+2]
  5500                              <2> 	mov [bp+4],ax
  5501                              <2> 	mov ax,[%4]
  5502                              <2> 	mov [bp+6],ax
  5503                              <2> 	call proc_flcmp
  5504                              <2> 	mov ax,sp
  5505                              <2> 	mov bp,ax
  5506                              <2> 	mov byte %5,[bp+8]
  5507                              <2> 	stkclose 0x09
  5508                              <2> %endmacro
  5509                              <2> 
  5510                              <2> %macro flshl 4	
  5511                              <2> 	stkopen 0x03
  5512                              <2> 	mov ax,%1
  5513                              <2> 	mov ds,ax
  5514                              <2> 	mov ax,[%2+2]
  5515                              <2> 	mov [bp+0],ax
  5516                              <2> 	mov ax,%3
  5517                              <2> 	mov ds,ax
  5518                              <2> 	mov al,[%4]
  5519                              <2> 	mov [bp+2],al
  5520                              <2> 	call proc_flshl
  5521                              <2> 	mov ax,sp
  5522                              <2> 	mov bp,ax
  5523                              <2> 	mov ax,%1
  5524                              <2> 	mov ds,ax
  5525                              <2> 	mov ax,[bp+0]
  5526                              <2> 	mov [%2+2],ax
  5527                              <2> 	stkclose 0x03
  5528                              <2> %endmacro
  5529                              <2> 
  5530                              <2> %macro flshr 4	
  5531                              <2> 	stkopen 0x03
  5532                              <2> 	mov ax,%1
  5533                              <2> 	mov ds,ax
  5534                              <2> 	mov ax,[%2+2]
  5535                              <2> 	mov [bp+0],ax	
  5536                              <2> 	mov ax,%3
  5537                              <2> 	mov ds,ax
  5538                              <2> 	mov al,[%4]
  5539                              <2> 	mov [bp+2],al
  5540                              <2> 	call proc_flshr
  5541                              <2> 	mov ax,sp
  5542                              <2> 	mov bp,ax
  5543                              <2> 	mov ax,%1
  5544                              <2> 	mov ds,ax
  5545                              <2> 	mov ax,[bp+0]
  5546                              <2> 	mov [%2+2],ax
  5547                              <2> 	stkclose 0x03
  5548                              <2> %endmacro
  5549                              <2> 
  5550                              <2> %macro fldiv 6	
  5551                              <2> 	stkopen 0x0C
  5552                              <2> 	mov ax,%1
  5553                              <2> 	mov ds,ax
  5554                              <2> 	mov ax,[%2+2]
  5555                              <2> 	mov [bp+0],ax
  5556                              <2> 	mov ax,[%2]
  5557                              <2> 	mov [bp+2],ax
  5558                              <2> 	mov ax,%3
  5559                              <2> 	mov ds,ax
  5560                              <2> 	mov ax,[%4+2]
  5561                              <2> 	mov [bp+4],ax
  5562                              <2> 	mov ax,[%4]
  5563                              <2> 	mov [bp+6],ax
  5564                              <2> 	call proc_fldiv
  5565                              <2> 	mov ax,sp
  5566                              <2> 	mov bp,ax
  5567                              <2> 	mov ax,%5
  5568                              <2> 	mov ds,ax
  5569                              <2> 	mov ax,[bp+8]
  5570                              <2> 	mov [%6+2],ax
  5571                              <2> 	mov ax,[bp+0x0A]
  5572                              <2> 	mov [%6],ax
  5573                              <2> 	stkclose 0x0C
  5574                              <2> %endmacro
  5575                              <2> 
  5576                              <2> %macro flmul 6	
  5577                              <2> 	stkopen 0x0C
  5578                              <2> 	mov ax,%1
  5579                              <2> 	mov ds,ax
  5580                              <2> 	mov ax,[%2+2]
  5581                              <2> 	mov [bp+0],ax
  5582                              <2> 	mov ax,[%2]
  5583                              <2> 	mov [bp+2],ax
  5584                              <2> 	mov ax,%3
  5585                              <2> 	mov ds,ax
  5586                              <2> 	mov ax,[%4+2]
  5587                              <2> 	mov [bp+4],ax
  5588                              <2> 	mov ax,[%4]
  5589                              <2> 	mov [bp+6],ax
  5590                              <2> 	call proc_flmul
  5591                              <2> 	mov ax,sp
  5592                              <2> 	mov bp,ax
  5593                              <2> 	mov ax,%5
  5594                              <2> 	mov ds,ax
  5595                              <2> 	mov ax,[bp+8]
  5596                              <2> 	mov [%6+2],ax
  5597                              <2> 	mov ax,[bp+0x0A]
  5598                              <2> 	mov [%6],ax
  5599                              <2> 	stkclose 0x0C
  5600                              <2> %endmacro
  5601                              <2> 	
  5602                              <2> %macro fladdorsub 7
  5603                              <2> 	stkopen 0x0E
  5604                              <2> 	mov ax,%1
  5605                              <2> 	mov ds,ax
  5606                              <2> 	mov ax,[%2+2]
  5607                              <2> 	mov [bp+0],ax
  5608                              <2> 	mov ax,[%2]
  5609                              <2> 	mov [bp+2],ax
  5610                              <2> 	mov ax,%3
  5611                              <2> 	mov ds,ax
  5612                              <2> 	mov ax,[%4+2]
  5613                              <2> 	mov [bp+4],ax
  5614                              <2> 	mov ax,[%4]
  5615                              <2> 	mov [bp+6],ax
  5616                              <2> 	mov word [bp+0x0C], %7
  5617                              <2> 	call proc_fladdorsub
  5618                              <2> 	mov ax,sp
  5619                              <2> 	mov bp,ax
  5620                              <2> 	mov ax,%5
  5621                              <2> 	mov ds,ax
  5622                              <2> 	mov ax,[bp+8]
  5623                              <2> 	mov [%6+2],ax
  5624                              <2> 	mov ax,[bp+0x0A]
  5625                              <2> 	mov [%6],ax
  5626                              <2> 	stkclose 0x0E
  5627                              <2> %endmacro
  5628                              <2> 	
  5629                              <2> %endif
  5630                              <1> 	%include "lib/trigon.mac"
  5631                              <2> 
  5632                              <2> %ifndef TRIGON_MAC
  5633                              <2> 	%define TRIGON_MAC
  5634                              <2> 
  5635                              <2> 	%include "lib/trigon.asm"
  5636                              <3> 
  5637                              <3> %ifndef TRIGON_ASM
  5638                              <3> 	%define TRIGON_ASM
  5639                              <3> 
  5640                              <3> 	%include "lib/system.mac"
  5641                              <4>  
  5642                              <4> %ifndef SYSTEM_MAC
  5643                              <4>  	%define SYSTEM_MAC
  5644                              <4>  	
  5645                              <4> 	%ifndef TRUE
  5646                              <4> 		%define TRUE 01h
  5647                              <4> 	%endif
  5648                              <4> 	%ifndef FALSE
  5649                              <4> 		%define FALSE 00h
  5650                              <4> 	%endif
  5651                              <4> 	
  5652                              <4> %macro vlodsb 3
  5653                              <4> 	vlodsb cs, %1, %2, %3
  5654                              <4> %endmacro
  5655                              <4> 
  5656                              <4> %macro vstosb 3
  5657                              <4> 	vstosb cs, %1, %2, %3
  5658                              <4> %endmacro
  5659                              <4> 	 	
  5660                              <4> %macro int16toreg 2
  5661                              <4> 	int16toreg cs, %1, %2
  5662                              <4> %endmacro
  5663                              <4> 
  5664                              <4> %macro regtoint16 2
  5665                              <4> 	regtoint16 %1, cs, %2
  5666                              <4> %endmacro
  5667                              <4> 
  5668                              <4> %macro vstosb 4
  5669                              <4> 	push %1
  5670                              <4> 	pop ds
  5671                              <4> 	mov si,%2
  5672                              <4> 	add si,%3
  5673                              <4> 	mov byte [si],%4	
  5674                              <4> %endmacro
  5675                              <4> 
  5676                              <4> %macro vlodsb 4
  5677                              <4> 	push %1
  5678                              <4> 	pop ds
  5679                              <4> 	mov si,%2
  5680                              <4> 	add si,%3
  5681                              <4> 	mov byte %4,[si]	
  5682                              <4> %endmacro 	 
  5683                              <4> 
  5684                              <4> %macro int16toreg 3
  5685                              <4> 	push %2
  5686                              <4> 	push %1
  5687                              <4> 	pop ds
  5688                              <4> 	pop si
  5689                              <4> 	mov word %3,[si]	
  5690                              <4> %endmacro
  5691                              <4> 
  5692                              <4> %macro regtoint16 3
  5693                              <4> 	push %3
  5694                              <4> 	push %2
  5695                              <4> 	pop ds
  5696                              <4> 	pop si
  5697                              <4> 	mov word [si],%1	
  5698                              <4> %endmacro
  5699                              <4> 
  5700                              <4> %macro mov32 2
  5701                              <4> 	mov32 cs, %1, cs, %2
  5702                              <4> %endmacro
  5703                              <4> 
  5704                              <4> %macro mov16 2
  5705                              <4> 	mov16 cs, %1, cs, %2
  5706                              <4> %endmacro
  5707                              <4> 
  5708                              <4> %macro mov32 4
  5709                              <4> 	mov ax,%3
  5710                              <4> 	mov ds,ax
  5711                              <4> 	mov cx,[%4+2]
  5712                              <4> 	mov dx,[%4]
  5713                              <4> 	mov ax,%1
  5714                              <4> 	mov ds,ax
  5715                              <4> 	mov [%2+2],cx
  5716                              <4> 	mov [%2],dx
  5717                              <4> %endmacro
  5718                              <4> 
  5719                              <4> %macro mov16 4
  5720                              <4> 	mov ax,%3
  5721                              <4> 	mov ds,ax
  5722                              <4> 	mov bx,[%4]
  5723                              <4> 	mov ax,%1
  5724                              <4> 	mov ds,ax
  5725                              <4> 	mov [%2],bx
  5726                              <4> %endmacro
  5727                              <4>  	 	
  5728                              <4> %macro mformat 4
  5729                              <4> 	stkopen 8
  5730                              <4> 	mov word [ bp + 0 ], %1
  5731                              <4> 	mov word [ bp + 2 ], %2
  5732                              <4> 	mov word [ bp + 4 ], %3
  5733                              <4> 	mov word [ bp + 6 ], %4
  5734                              <4> 	call kernel_segment:mformat
  5735                              <4> 	stkclose 8
  5736                              <4> %endmacro
  5737                              <4> 
  5738                              <4> %macro malloc 6
  5739                              <4> 	stkopen 0Bh
  5740                              <4> 	mov word [ bp + 4 ], %3
  5741                              <4> 	mov word [ bp + 6 ], %4
  5742                              <4> 	mov word [ bp + 8 ], %5	
  5743                              <4> 	call kernel_segment:malloc
  5744                              <4> 	push sp
  5745                              <4> 	pop bp
  5746                              <4> 	mov word %1, [ bp ]
  5747                              <4> 	mov word %2, [ bp + 2 ]
  5748                              <4> 	mov byte %6, [ bp + 0x0A ]
  5749                              <4> 	stkclose 0Bh
  5750                              <4> %endmacro 	
  5751                              <4> 
  5752                              <4> %macro laddr 2
  5753                              <4> 	laddr %1, %2, %1, %2
  5754                              <4> %endmacro
  5755                              <4> 
  5756                              <4> %macro faddr 2
  5757                              <4> 	faddr %1, %2, %1, %2
  5758                              <4> %endmacro
  5759                              <4>  	
  5760                              <4> %macro laddr 4
  5761                              <4> 	stkopen 8
  5762                              <4> 	mov word [ bp + 4 ], %3
  5763                              <4> 	mov word [ bp + 6 ], %4	
  5764                              <4> 	call kernel_segment:laddr
  5765                              <4> 	push sp
  5766                              <4> 	pop bp
  5767                              <4> 	mov word %1, [ bp + 0 ]
  5768                              <4> 	mov word %2, [ bp + 2 ]	
  5769                              <4> 	stkclose 8
  5770                              <4> %endmacro
  5771                              <4> 
  5772                              <4> %macro faddr 4
  5773                              <4> 	stkopen 8
  5774                              <4> 	mov word [ bp + 4 ], %3
  5775                              <4> 	mov word [ bp + 6 ], %4	
  5776                              <4> 	call kernel_segment:faddr
  5777                              <4> 	push sp
  5778                              <4> 	pop bp
  5779                              <4> 	mov word %1, [ bp + 0 ]
  5780                              <4> 	mov word %2, [ bp + 2 ]	
  5781                              <4> 	stkclose 8
  5782                              <4> %endmacro	
  5783                              <4>  
  5784                              <4> 
  5785                              <4> %macro stkopen 1		
  5786                              <4> 	sub word sp, %1
  5787                              <4> 	push sp
  5788                              <4> 	pop bp
  5789                              <4> %endmacro
  5790                              <4> 
  5791                              <4> %macro stkclose 1
  5792                              <4> 	add word sp, %1
  5793                              <4> %endmacro
  5794                              <4> 
  5795                              <4> %macro stkload 1-* 	
  5796                              <4>  	%rep %0
  5797                              <4>  	 	%rotate -1
  5798                              <4>  		pop %1
  5799                              <4>  	%endrep
  5800                              <4>  	%rep %0
  5801                              <4>  		push %1
  5802                              <4>  		%rotate 1
  5803                              <4>  	%endrep
  5804                              <4> %endmacro
  5805                              <4> 
  5806                              <4> %macro stkpush 1-* 	
  5807                              <4>  	%rep %0
  5808                              <4>  		push %1
  5809                              <4>  		%rotate 1
  5810                              <4>  	%endrep 	
  5811                              <4> %endmacro
  5812                              <4>  
  5813                              <4> %macro stkpop 1-*
  5814                              <4>  	%rep %0
  5815                              <4>  	 	%rotate -1
  5816                              <4>  		pop %1
  5817                              <4>  	%endrep 	 	
  5818                              <4> %endmacro
  5819                              <4> 
  5820                              <4> %macro delay 1
  5821                              <4> 	delay cs, %1
  5822                              <4> %endmacro
  5823                              <4> 
  5824                              <4> %macro delay 2
  5825                              <4> 	mov ax,%1
  5826                              <4> 	mov ds,ax
  5827                              <4> 	
  5828                              <4> 	mov ah,86h
  5829                              <4> 	mov cx,[%2+2]
  5830                              <4> 	mov dx,[%2]
  5831                              <4> 	int 15h	
  5832                              <4> %endmacro
  5833                              <4> 
  5834                              <4> %endif 
  5835                              <3> 	%include "lib/math.mac"
  5836                              <4> 
  5837                              <4> %ifndef MATH_MAC
  5838                              <4> 	%define MATH_MAC
  5839                              <4> 	
  5840                              <4> 	%include "lib/math.asm"
  5841                              <4> 	%include "lib/system.mac"
  5842                              <4> 
  5843                              <4> %macro chgsig 1
  5844                              <4> 	chgsig cs, %1
  5845                              <4> %endmacro
  5846                              <4> 
  5847                              <4> %macro cmp16 3
  5848                              <4> 	cmp16 cs, %1, cs, %2, %3
  5849                              <4> %endmacro
  5850                              <4> 
  5851                              <4> %macro mul16 2
  5852                              <4> 	mul16 cs, %1, cs, %2
  5853                              <4> %endmacro
  5854                              <4> 
  5855                              <4> %macro div16 2
  5856                              <4> 	div16 cs, %1, cs, %2
  5857                              <4> %endmacro
  5858                              <4> 
  5859                              <4> %macro mod16 2
  5860                              <4> 	mod16 cs, %1, cs, %2
  5861                              <4> %endmacro
  5862                              <4> 
  5863                              <4> %macro inc16 1
  5864                              <4> 	inc16 cs, %1
  5865                              <4> %endmacro
  5866                              <4> 
  5867                              <4> %macro dec16 1
  5868                              <4> 	dec16 cs, %1
  5869                              <4> %endmacro
  5870                              <4> 
  5871                              <4> %macro add16 2
  5872                              <4> 	add16 cs, %1, cs, %2
  5873                              <4> %endmacro
  5874                              <4> 
  5875                              <4> %macro sub16 2
  5876                              <4> 	sub16 cs, %1, cs, %2
  5877                              <4> %endmacro
  5878                              <4> 
  5879                              <4> %macro int32to16 2
  5880                              <4> 	int32to16 cs, %1, %2
  5881                              <4> %endmacro
  5882                              <4> 
  5883                              <4> %macro int16to32 2
  5884                              <4> 	int16to32 %1, cs, %2
  5885                              <4> %endmacro
  5886                              <4> 
  5887                              <4> %macro idiv32 5
  5888                              <4> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  5889                              <4> %endmacro
  5890                              <4> 
  5891                              <4> %macro imul32 3
  5892                              <4> 	imul32 cs, %1, cs, %2, cs, %3
  5893                              <4> %endmacro
  5894                              <4> 
  5895                              <4> %macro div32 5
  5896                              <4> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  5897                              <4> %endmacro
  5898                              <4> 
  5899                              <4> %macro mul32 3
  5900                              <4> 	mul32 cs, %1, cs, %2, cs, %3
  5901                              <4> %endmacro
  5902                              <4> 	
  5903                              <4> %macro add32 3
  5904                              <4> 	add32 cs, %1, cs, %2, cs, %3
  5905                              <4> %endmacro
  5906                              <4> 
  5907                              <4> %macro sub32 3
  5908                              <4> 	sub32 cs, %1, cs, %2, cs, %3
  5909                              <4> %endmacro
  5910                              <4> 
  5911                              <4> %macro int32to16 3
  5912                              <4> 	stkopen 0x06
  5913                              <4> 	mov ax,%1
  5914                              <4> 	mov ds,ax
  5915                              <4> 	mov ax,[%2+2]
  5916                              <4> 	mov word [bp+0], ax
  5917                              <4> 	mov ax,[%2]	
  5918                              <4> 	mov word [bp+2], ax
  5919                              <4> 	call proc_int32to16
  5920                              <4> 	mov ax,sp
  5921                              <4> 	mov bp,ax
  5922                              <4> 	mov ax,[bp+4]
  5923                              <4> 	mov word %3, ax	
  5924                              <4> 	stkclose 0x06
  5925                              <4> %endmacro
  5926                              <4> 
  5927                              <4> %macro int16to32 3
  5928                              <4> 	stkopen 0x06
  5929                              <4> 	mov word [bp+0], %1	
  5930                              <4> 	call proc_int16to32
  5931                              <4> 	mov ax,sp
  5932                              <4> 	mov bp,ax
  5933                              <4> 	mov ax,%2
  5934                              <4> 	mov ds,ax
  5935                              <4> 	mov ax,[bp+2]
  5936                              <4> 	mov [%3+2],ax
  5937                              <4> 	mov ax,[bp+4]
  5938                              <4> 	mov [%3],ax	
  5939                              <4> 	stkclose 0x06
  5940                              <4> %endmacro
  5941                              <4> 
  5942                              <4> %macro div32 10
  5943                              <4> 	stkopen 0x11
  5944                              <4> 	mov ax,%1
  5945                              <4> 	mov ds,ax
  5946                              <4> 	mov ax,[%2+2]
  5947                              <4> 	mov word [bp+0], ax
  5948                              <4> 	mov ax,[%2]
  5949                              <4> 	mov word [bp+2], ax
  5950                              <4> 	mov ax,%3
  5951                              <4> 	mov ds,ax
  5952                              <4> 	mov ax,[%4+2]
  5953                              <4> 	mov word [bp+4], ax
  5954                              <4> 	mov ax,[%4]
  5955                              <4> 	mov word [bp+6], ax
  5956                              <4> 	call proc_div32
  5957                              <4> 	mov ax,sp
  5958                              <4> 	mov bp,ax
  5959                              <4> 	mov ax,%5
  5960                              <4> 	mov ds,ax
  5961                              <4> 	mov word ax, [bp+8]
  5962                              <4> 	mov word [%6+2], ax
  5963                              <4> 	mov word ax, [bp+0x0A]
  5964                              <4> 	mov word [%6], ax
  5965                              <4> 	mov ax,%7
  5966                              <4> 	mov ds,ax
  5967                              <4> 	mov word ax,[bp+0x0C]
  5968                              <4> 	mov word [%8+2],ax
  5969                              <4> 	mov word ax,[bp+0x0E]
  5970                              <4> 	mov word [%8],ax
  5971                              <4> 	mov ax,%9
  5972                              <4> 	mov ds,ax
  5973                              <4> 	mov byte al,[bp+0x10]
  5974                              <4> 	mov byte [%10],al
  5975                              <4> 	stkclose 0x11
  5976                              <4> %endmacro
  5977                              <4> 	
  5978                              <4> %macro mul32 6
  5979                              <4> 	stkopen 0x0C
  5980                              <4> 	mov ax,%1
  5981                              <4> 	mov ds,ax
  5982                              <4> 	mov ax,[%2+2]
  5983                              <4> 	mov word [bp+0], ax
  5984                              <4> 	mov ax,[%2]
  5985                              <4> 	mov word [bp+2], ax
  5986                              <4> 	mov ax,%3
  5987                              <4> 	mov ds,ax
  5988                              <4> 	mov ax,[%4+2]
  5989                              <4> 	mov word [bp+4], ax
  5990                              <4> 	mov ax,[%4]
  5991                              <4> 	mov word [bp+6], ax
  5992                              <4> 	call proc_mul32
  5993                              <4> 	mov ax,sp
  5994                              <4> 	mov bp,ax
  5995                              <4> 	mov ax,%5
  5996                              <4> 	mov ds,ax
  5997                              <4> 	mov word ax, [bp+8]
  5998                              <4> 	mov word [%6+2], ax
  5999                              <4> 	mov word ax, [bp+0x0A]
  6000                              <4> 	mov word [%6], ax
  6001                              <4> 	stkclose 0x0C
  6002                              <4> %endmacro	
  6003                              <4> 	
  6004                              <4> %macro add32 6
  6005                              <4> 	stkopen 0x0C
  6006                              <4> 	mov ax,%1
  6007                              <4> 	mov ds,ax
  6008                              <4> 	mov ax,[%2+2]
  6009                              <4> 	mov word [bp+0], ax
  6010                              <4> 	mov ax,[%2]
  6011                              <4> 	mov word [bp+2], ax
  6012                              <4> 	mov ax,%3
  6013                              <4> 	mov ds,ax
  6014                              <4> 	mov ax,[%4+2]
  6015                              <4> 	mov word [bp+4], ax
  6016                              <4> 	mov ax,[%4]
  6017                              <4> 	mov word [bp+6], ax
  6018                              <4> 	call proc_add32
  6019                              <4> 	mov ax,sp
  6020                              <4> 	mov bp,ax
  6021                              <4> 	mov ax,%5
  6022                              <4> 	mov ds,ax
  6023                              <4> 	mov word ax, [bp+8]
  6024                              <4> 	mov word [%6+2], ax
  6025                              <4> 	mov word ax, [bp+0x0A]
  6026                              <4> 	mov word [%6], ax
  6027                              <4> 	stkclose 0x0C
  6028                              <4> %endmacro
  6029                              <4> 
  6030                              <4> %macro sub32 6
  6031                              <4> 	stkopen 0x0C
  6032                              <4> 	mov ax,%1
  6033                              <4> 	mov ds,ax
  6034                              <4> 	mov ax,[%2+2]
  6035                              <4> 	mov word [bp+0], ax
  6036                              <4> 	mov ax,[%2]
  6037                              <4> 	mov word [bp+2], ax
  6038                              <4> 	mov ax,%3
  6039                              <4> 	mov ds,ax
  6040                              <4> 	mov ax,[%4+2]
  6041                              <4> 	mov word [bp+4], ax
  6042                              <4> 	mov ax,[%4]
  6043                              <4> 	mov word [bp+6], ax
  6044                              <4> 	call proc_sub32
  6045                              <4> 	mov ax,sp
  6046                              <4> 	mov bp,ax
  6047                              <4> 	mov ax,%5
  6048                              <4> 	mov ds,ax
  6049                              <4> 	mov word ax, [bp+8]
  6050                              <4> 	mov word [%6+2], ax
  6051                              <4> 	mov word ax, [bp+0x0A]
  6052                              <4> 	mov word [%6], ax
  6053                              <4> 	stkclose 0x0C
  6054                              <4> %endmacro
  6055                              <4> 
  6056                              <4> %macro idiv32 10
  6057                              <4> 	stkopen 0x11
  6058                              <4> 	mov ax,%1
  6059                              <4> 	mov ds,ax
  6060                              <4> 	mov ax,[%2+2]
  6061                              <4> 	mov word [bp+0], ax
  6062                              <4> 	mov ax,[%2]
  6063                              <4> 	mov word [bp+2], ax
  6064                              <4> 	mov ax,%3
  6065                              <4> 	mov ds,ax
  6066                              <4> 	mov ax,[%4+2]
  6067                              <4> 	mov word [bp+4], ax
  6068                              <4> 	mov ax,[%4]
  6069                              <4> 	mov word [bp+6], ax
  6070                              <4> 	call proc_idiv32
  6071                              <4> 	mov ax,sp
  6072                              <4> 	mov bp,ax
  6073                              <4> 	mov ax,%5
  6074                              <4> 	mov ds,ax
  6075                              <4> 	mov word ax, [bp+8]
  6076                              <4> 	mov word [%6+2], ax
  6077                              <4> 	mov word ax, [bp+0x0A]
  6078                              <4> 	mov word [%6], ax
  6079                              <4> 	mov ax,%7
  6080                              <4> 	mov ds,ax
  6081                              <4> 	mov word ax,[bp+0x0C]
  6082                              <4> 	mov word [%8+2],ax
  6083                              <4> 	mov word ax,[bp+0x0E]
  6084                              <4> 	mov word [%8],ax
  6085                              <4> 	mov ax,%9
  6086                              <4> 	mov ds,ax
  6087                              <4> 	mov byte al,[bp+0x10]
  6088                              <4> 	mov byte [%10],al
  6089                              <4> 	stkclose 0x11
  6090                              <4> %endmacro
  6091                              <4> 
  6092                              <4> %macro imul32 6
  6093                              <4> 	stkopen 0x0C
  6094                              <4> 	mov ax,%1
  6095                              <4> 	mov ds,ax
  6096                              <4> 	mov ax,[%2+2]
  6097                              <4> 	mov word [bp+0], ax
  6098                              <4> 	mov ax,[%2]
  6099                              <4> 	mov word [bp+2], ax
  6100                              <4> 	mov ax,%3
  6101                              <4> 	mov ds,ax
  6102                              <4> 	mov ax,[%4+2]
  6103                              <4> 	mov word [bp+4], ax
  6104                              <4> 	mov ax,[%4]
  6105                              <4> 	mov word [bp+6], ax
  6106                              <4> 	call proc_imul32
  6107                              <4> 	mov ax,sp
  6108                              <4> 	mov bp,ax
  6109                              <4> 	mov ax,%5
  6110                              <4> 	mov ds,ax
  6111                              <4> 	mov word ax, [bp+8]
  6112                              <4> 	mov word [%6+2], ax
  6113                              <4> 	mov word ax, [bp+0x0A]
  6114                              <4> 	mov word [%6], ax
  6115                              <4> 	stkclose 0x0C
  6116                              <4> %endmacro
  6117                              <4> 	
  6118                              <4> %macro cmp32 3
  6119                              <4> 	cmp32 cs, %1, cs, %2, %3
  6120                              <4> %endmacro	
  6121                              <4> 	
  6122                              <4> %macro cmp32 5
  6123                              <4> 	stkopen 9
  6124                              <4> 	mov ax,%1
  6125                              <4> 	mov ds,ax
  6126                              <4> 	mov word ax,[%2+2]
  6127                              <4> 	mov word [bp+0], ax
  6128                              <4> 	mov word ax,[%2]
  6129                              <4> 	mov word [bp+2], ax	
  6130                              <4> 	mov ax,%3
  6131                              <4> 	mov ds,ax
  6132                              <4> 	mov word ax,[%4+2]
  6133                              <4> 	mov word [bp+4], ax
  6134                              <4> 	mov word ax,[%4]
  6135                              <4> 	mov word [bp+6], ax	
  6136                              <4> 	call proc_cmp32
  6137                              <4> 	mov ax,sp
  6138                              <4> 	mov bp,ax
  6139                              <4> 	mov al,[bp+8]
  6140                              <4> 	mov byte %5,al
  6141                              <4> 	stkclose 9
  6142                              <4> %endmacro
  6143                              <4> 	
  6144                              <4> %macro shl32 2
  6145                              <4> 	shl32 cs, %1, %2
  6146                              <4> %endmacro	
  6147                              <4> 	
  6148                              <4> %macro shl32 3
  6149                              <4> 	stkopen 5
  6150                              <4> 	mov ax,%1
  6151                              <4> 	mov ds,ax
  6152                              <4> 	mov word ax,[%2+2]
  6153                              <4> 	mov word [bp+0], ax
  6154                              <4> 	mov word ax,[%2]
  6155                              <4> 	mov word [bp+2], ax
  6156                              <4> 	mov byte al, %3
  6157                              <4> 	mov byte [bp+4], al 
  6158                              <4> 	call proc_shl32
  6159                              <4> 	mov ax,sp
  6160                              <4> 	mov bp,ax
  6161                              <4> 	mov ax,%1
  6162                              <4> 	mov ds,ax
  6163                              <4> 	mov ax,[bp+0]
  6164                              <4> 	mov word [%2+2],ax
  6165                              <4> 	mov ax,[bp+2]
  6166                              <4> 	mov word [%2],ax
  6167                              <4> 	stkclose 5
  6168                              <4> %endmacro
  6169                              <4> 
  6170                              <4> 
  6171                              <4> %macro shr32 2
  6172                              <4> 	shr32 cs, %1, %2
  6173                              <4> %endmacro	
  6174                              <4> 	
  6175                              <4> %macro shr32 3
  6176                              <4> 	stkopen 5
  6177                              <4> 	mov ax,%1
  6178                              <4> 	mov ds,ax
  6179                              <4> 	mov word ax,[%2+2]
  6180                              <4> 	mov word [bp+0], ax
  6181                              <4> 	mov word ax,[%2]
  6182                              <4> 	mov word [bp+2], ax
  6183                              <4> 	mov byte al, %3
  6184                              <4> 	mov byte [bp+4], al 
  6185                              <4> 	call proc_shr32
  6186                              <4> 	mov ax,sp
  6187                              <4> 	mov bp,ax
  6188                              <4> 	mov ax,%1
  6189                              <4> 	mov ds,ax
  6190                              <4> 	mov ax,[bp+0]
  6191                              <4> 	mov word [%2+2],ax
  6192                              <4> 	mov ax,[bp+2]
  6193                              <4> 	mov word [%2],ax
  6194                              <4> 	stkclose 5
  6195                              <4> %endmacro
  6196                              <4> 
  6197                              <4> %macro inc16 2
  6198                              <4> 	mov ax,%1
  6199                              <4> 	mov ds,ax
  6200                              <4> 	inc word [%2]
  6201                              <4> %endmacro
  6202                              <4> 
  6203                              <4> %macro dec16 2
  6204                              <4> 	mov ax,%1
  6205                              <4> 	mov ds,ax
  6206                              <4> 	dec word [%2]
  6207                              <4> %endmacro
  6208                              <4> 
  6209                              <4> %macro add16 4	
  6210                              <4> 	mov ax,%3
  6211                              <4> 	mov ds,ax
  6212                              <4> 	mov bx,[%4]	
  6213                              <4> 	mov ax,%1
  6214                              <4> 	mov ds,ax	
  6215                              <4> 	add [%2],bx
  6216                              <4> %endmacro
  6217                              <4> 
  6218                              <4> %macro sub16 4
  6219                              <4> 	mov ax,%3
  6220                              <4> 	mov ds,ax
  6221                              <4> 	mov bx,[%4]
  6222                              <4> 	mov ax,%1
  6223                              <4> 	mov ds,ax
  6224                              <4> 	sub [%2],bx
  6225                              <4> %endmacro
  6226                              <4> 
  6227                              <4> %macro mul16 4
  6228                              <4> 	mov ax,%1
  6229                              <4> 	mov ds,ax
  6230                              <4> 	mov bx,[%2]
  6231                              <4> 	mov ax,%3
  6232                              <4> 	mov ds,ax
  6233                              <4> 	mov cx,[%4]
  6234                              <4> 	
  6235                              <4> 	mov ax,bx
  6236                              <4> 	imul cx
  6237                              <4> 	
  6238                              <4> 	mov dx,%1
  6239                              <4> 	mov ds,dx
  6240                              <4> 	mov [%2],ax
  6241                              <4> %endmacro
  6242                              <4> 
  6243                              <4> %macro div16 4
  6244                              <4> 	mov ax,%1
  6245                              <4> 	mov ds,ax
  6246                              <4> 	mov bx,[%2]
  6247                              <4> 	mov ax,%3
  6248                              <4> 	mov ds,ax
  6249                              <4> 	mov cx,[%4]
  6250                              <4> 	
  6251                              <4> 	xor dx,dx
  6252                              <4> 	mov ax,bx
  6253                              <4> 	idiv cx
  6254                              <4> 	
  6255                              <4> 	mov dx,%1
  6256                              <4> 	mov ds,dx
  6257                              <4> 	mov [%2],ax
  6258                              <4> %endmacro
  6259                              <4> 
  6260                              <4> 
  6261                              <4> %macro mod16 4
  6262                              <4> 	mov ax,%1
  6263                              <4> 	mov ds,ax
  6264                              <4> 	mov bx,[%2]
  6265                              <4> 	mov ax,%3
  6266                              <4> 	mov ds,ax
  6267                              <4> 	mov cx,[%4]
  6268                              <4> 	
  6269                              <4> 	xor dx,dx
  6270                              <4> 	mov ax,bx
  6271                              <4> 	idiv cx
  6272                              <4> 	
  6273                              <4> 	mov bx,%1
  6274                              <4> 	mov ds,bx
  6275                              <4> 	mov [%2],dx
  6276                              <4> %endmacro
  6277                              <4> 
  6278                              <4> %macro cmp16 5
  6279                              <4> 	mov ax,%1
  6280                              <4> 	mov ds,ax
  6281                              <4> 	mov bx,[%2]
  6282                              <4> 	mov ax,%3
  6283                              <4> 	mov ds,ax
  6284                              <4> 	mov	cx,[%4]
  6285                              <4> 	
  6286                              <4> 	cmp bx,cx
  6287                              <4> 	jg %%above
  6288                              <4> 	jl %%below
  6289                              <4> 		mov byte %5, 0
  6290                              <4> 		jmp %%endcmp
  6291                              <4> 	%%above:
  6292                              <4> 		mov byte %5, 1
  6293                              <4> 		jmp %%endcmp
  6294                              <4> 	%%below:
  6295                              <4> 		mov byte %5, -1
  6296                              <4> 	%%endcmp:
  6297                              <4> %endmacro
  6298                              <4> 
  6299                              <4> %macro chgsig 2
  6300                              <4> 	mov ax,%1
  6301                              <4> 	mov ds,ax
  6302                              <4> 	mov ax,[%2]
  6303                              <4> 	mov bx,0xFFFF
  6304                              <4> 	sub bx,ax
  6305                              <4> 	inc bx
  6306                              <4> 	mov [%2],bx
  6307                              <4> %endmacro
  6308                              <4> 	
  6309                              <4> %endif
  6310                              <3> 	%include "lib/float.mac"
  6311                              <4> 
  6312                              <4> %ifndef FLOAT_MAC
  6313                              <4> 	%define FLOAT_MAC
  6314                              <4> 	
  6315                              <4> 	%include "lib/float.asm"	
  6316                              <4> 
  6317                              <4> %macro flgetsig 2
  6318                              <4> 	flgetsig cs, %1, %2
  6319                              <4> %endmacro
  6320                              <4> 
  6321                              <4> %macro flinvsig 1
  6322                              <4> 	flinvsig cs, %1
  6323                              <4> %endmacro
  6324                              <4> 
  6325                              <4> %macro flsetsig 1
  6326                              <4> 	flsetsig cs, %1
  6327                              <4> %endmacro
  6328                              <4> 
  6329                              <4> %macro flclrsig 1
  6330                              <4> 	flclrsig cs, %1
  6331                              <4> %endmacro
  6332                              <4> 
  6333                              <4> %macro flroundtoint16 2
  6334                              <4> 	flroundtoint16 cs, %1, cs, %2
  6335                              <4> %endmacro
  6336                              <4> 
  6337                              <4> %macro flroundtoint32 1
  6338                              <4> 	flroundtoint32 %1, %1
  6339                              <4> %endmacro
  6340                              <4> 
  6341                              <4> %macro flroundtoint32 2
  6342                              <4> 	flroundtoint32 cs, %1, cs, %2
  6343                              <4> %endmacro
  6344                              <4> 
  6345                              <4> %macro int16tofl 2
  6346                              <4> 	int16tofl cs, %1, cs, %2
  6347                              <4> %endmacro
  6348                              <4> 
  6349                              <4> %macro fltoint16 2
  6350                              <4> 	fltoint16 cs, %1, cs, %2
  6351                              <4> %endmacro
  6352                              <4> 
  6353                              <4> %macro fltoint32 1
  6354                              <4> 	fltoint32 %1, %1
  6355                              <4> %endmacro
  6356                              <4> 
  6357                              <4> %macro fltoint32 2
  6358                              <4> 	fltoint32 cs, %1, cs, %2
  6359                              <4> %endmacro
  6360                              <4> 
  6361                              <4> %macro int32tofl 1
  6362                              <4> 	int32tofl %1, %1
  6363                              <4> %endmacro
  6364                              <4> 
  6365                              <4> %macro int32tofl 2
  6366                              <4> 	int32tofl cs, %1, cs, %2
  6367                              <4> %endmacro
  6368                              <4> 
  6369                              <4> %macro flcmp 3
  6370                              <4> 	flcmp cs, %1, cs, %2, %3
  6371                              <4> %endmacro
  6372                              <4> 
  6373                              <4> %macro flshl 2
  6374                              <4> 	flshl cs, %1, cs, %2
  6375                              <4> %endmacro
  6376                              <4> 
  6377                              <4> %macro flshr 2
  6378                              <4> 	flshr cs, %1, cs, %2
  6379                              <4> %endmacro
  6380                              <4> 
  6381                              <4> %macro fladd 3
  6382                              <4> 	fladd cs, %1, cs, %2, cs, %3
  6383                              <4> %endmacro
  6384                              <4> 
  6385                              <4> %macro flsub 3
  6386                              <4> 	flsub cs, %1, cs, %2, cs, %3
  6387                              <4> %endmacro	
  6388                              <4> 
  6389                              <4> %macro flmul 3
  6390                              <4> 	flmul cs, %1, cs, %2, cs, %3
  6391                              <4> %endmacro
  6392                              <4> 
  6393                              <4> %macro fldiv 3
  6394                              <4> 	fldiv cs, %1, cs, %2, cs, %3
  6395                              <4> %endmacro	
  6396                              <4> 
  6397                              <4> %macro fladd 6
  6398                              <4> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  6399                              <4> %endmacro
  6400                              <4> 
  6401                              <4> %macro flsub 6
  6402                              <4> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  6403                              <4> %endmacro
  6404                              <4> 
  6405                              <4> %macro flroundtoint16 4
  6406                              <4> 	stkopen 0x06
  6407                              <4> 	mov ax,%1
  6408                              <4> 	mov ds,ax
  6409                              <4> 	mov ax,[%2+2]
  6410                              <4> 	mov [bp+0],ax
  6411                              <4> 	mov ax,[%2]
  6412                              <4> 	mov [bp+2],ax	
  6413                              <4> 	call proc_flroundtoint16
  6414                              <4> 	mov ax,sp
  6415                              <4> 	mov bp,ax
  6416                              <4> 	mov ax,%3
  6417                              <4> 	mov ds,ax
  6418                              <4> 	mov ax,[bp+4]
  6419                              <4> 	mov [%4],ax
  6420                              <4> 	stkclose 0x06
  6421                              <4> %endmacro
  6422                              <4> 
  6423                              <4> %macro flroundtoint32 4
  6424                              <4> 	stkopen 0x08
  6425                              <4> 	mov ax,%1
  6426                              <4> 	mov ds,ax
  6427                              <4> 	mov ax,[%2+2]
  6428                              <4> 	mov [bp+0],ax
  6429                              <4> 	mov ax,[%2]
  6430                              <4> 	mov [bp+2],ax	
  6431                              <4> 	call proc_flroundtoint32
  6432                              <4> 	mov ax,sp
  6433                              <4> 	mov bp,ax
  6434                              <4> 	mov ax,%3
  6435                              <4> 	mov ds,ax
  6436                              <4> 	mov ax,[bp+4]
  6437                              <4> 	mov [%4+2],ax
  6438                              <4> 	mov ax,[bp+6]
  6439                              <4> 	mov [%4],ax
  6440                              <4> 	stkclose 0x08
  6441                              <4> %endmacro
  6442                              <4> 
  6443                              <4> %macro fltoint16 4
  6444                              <4> 	stkopen 0x06
  6445                              <4> 	mov ax,%1
  6446                              <4> 	mov ds,ax
  6447                              <4> 	mov ax,[%2+2]
  6448                              <4> 	mov [bp+0],ax
  6449                              <4> 	mov ax,[%2]
  6450                              <4> 	mov [bp+2],ax	
  6451                              <4> 	call proc_fltoint16
  6452                              <4> 	mov ax,sp
  6453                              <4> 	mov bp,ax
  6454                              <4> 	mov ax,%3
  6455                              <4> 	mov ds,ax
  6456                              <4> 	mov ax,[bp+4]
  6457                              <4> 	mov [%4],ax
  6458                              <4> 	stkclose 0x06
  6459                              <4> %endmacro
  6460                              <4> 
  6461                              <4> %macro int16tofl 4	
  6462                              <4> 	stkopen 0x06
  6463                              <4> 	mov ax,%1
  6464                              <4> 	mov ds,ax
  6465                              <4> 	mov ax,[%2]
  6466                              <4> 	mov [bp+0],ax	
  6467                              <4> 	call proc_int16tofl
  6468                              <4> 	mov ax,sp
  6469                              <4> 	mov bp,ax
  6470                              <4> 	mov ax,%3
  6471                              <4> 	mov ds,ax
  6472                              <4> 	mov ax,[bp+2]
  6473                              <4> 	mov [%4+2],ax
  6474                              <4> 	mov ax,[bp+4]
  6475                              <4> 	mov [%4],ax
  6476                              <4> 	stkclose 0x06
  6477                              <4> %endmacro
  6478                              <4> 
  6479                              <4> %macro fltoint32 4
  6480                              <4> 	stkopen 0x08
  6481                              <4> 	mov ax,%1
  6482                              <4> 	mov ds,ax
  6483                              <4> 	mov ax,[%2+2]
  6484                              <4> 	mov [bp+0],ax
  6485                              <4> 	mov ax,[%2]
  6486                              <4> 	mov [bp+2],ax	
  6487                              <4> 	call proc_fltoint32
  6488                              <4> 	mov ax,sp
  6489                              <4> 	mov bp,ax
  6490                              <4> 	mov ax,%3
  6491                              <4> 	mov ds,ax
  6492                              <4> 	mov ax,[bp+4]
  6493                              <4> 	mov [%4+2],ax
  6494                              <4> 	mov ax,[bp+6]
  6495                              <4> 	mov [%4],ax
  6496                              <4> 	stkclose 0x08
  6497                              <4> %endmacro
  6498                              <4> 
  6499                              <4> %macro int32tofl 4
  6500                              <4> 	stkopen 0x08
  6501                              <4> 	mov ax,%1
  6502                              <4> 	mov ds,ax
  6503                              <4> 	mov ax,[%2+2]
  6504                              <4> 	mov [bp+0],ax
  6505                              <4> 	mov ax,[%2]
  6506                              <4> 	mov [bp+2],ax	
  6507                              <4> 	call proc_int32tofl
  6508                              <4> 	mov ax,sp
  6509                              <4> 	mov bp,ax
  6510                              <4> 	mov ax,%3
  6511                              <4> 	mov ds,ax
  6512                              <4> 	mov ax,[bp+4]
  6513                              <4> 	mov [%4+2],ax
  6514                              <4> 	mov ax,[bp+6]
  6515                              <4> 	mov [%4],ax
  6516                              <4> 	stkclose 0x08
  6517                              <4> %endmacro
  6518                              <4> 
  6519                              <4> %macro flgetsig 3
  6520                              <4> 	stkopen 0x04
  6521                              <4> 	mov ax,%1
  6522                              <4> 	mov ds,ax
  6523                              <4> 	mov ax,[%2+2]
  6524                              <4> 	mov word [bp+0], ax
  6525                              <4> 	call proc_flgetsig
  6526                              <4> 	push sp
  6527                              <4> 	pop bp
  6528                              <4> 	mov ax,[bp+2]
  6529                              <4> 	mov word %3, ax
  6530                              <4> 	stkclose 0x04
  6531                              <4> %endmacro
  6532                              <4> 
  6533                              <4> %macro flinvsig 2
  6534                              <4> 	stkopen 0x02
  6535                              <4> 	mov ax,%1
  6536                              <4> 	mov ds,ax
  6537                              <4> 	mov ax,[%2+2]
  6538                              <4> 	mov word [bp+0], ax
  6539                              <4> 	call proc_flinvsig
  6540                              <4> 	push sp
  6541                              <4> 	pop bp
  6542                              <4> 	mov ax,[bp+0]
  6543                              <4> 	mov word [%2+2],ax
  6544                              <4> 	stkclose 0x02
  6545                              <4> %endmacro
  6546                              <4> 
  6547                              <4> %macro flsetsig 2
  6548                              <4> 	stkopen 0x04
  6549                              <4> 	mov ax,%1
  6550                              <4> 	mov ds,ax
  6551                              <4> 	mov ax,[%2+2]
  6552                              <4> 	mov word [bp+0], ax
  6553                              <4> 	mov word [bp+2], 0x8000
  6554                              <4> 	call proc_flsetsig
  6555                              <4> 	push sp
  6556                              <4> 	pop bp
  6557                              <4> 	mov ax,[bp+0]
  6558                              <4> 	mov word [%2+2],ax
  6559                              <4> 	stkclose 0x04	
  6560                              <4> %endmacro
  6561                              <4> 
  6562                              <4> %macro flclrsig 2
  6563                              <4> 	stkopen 0x04
  6564                              <4> 	mov ax,%1
  6565                              <4> 	mov ds,ax
  6566                              <4> 	mov ax,[%2+2]
  6567                              <4> 	mov word [bp+0], ax
  6568                              <4> 	mov word [bp+2], 0x0000
  6569                              <4> 	call proc_flsetsig
  6570                              <4> 	push sp
  6571                              <4> 	pop bp
  6572                              <4> 	mov ax,[bp+0]
  6573                              <4> 	mov word [%2+2],ax
  6574                              <4> 	stkclose 0x04	
  6575                              <4> %endmacro
  6576                              <4> 
  6577                              <4> %macro flcmp 5	
  6578                              <4> 	stkopen 0x09
  6579                              <4> 	mov ax,%1
  6580                              <4> 	mov ds,ax
  6581                              <4> 	mov ax,[%2+2]
  6582                              <4> 	mov [bp+0],ax
  6583                              <4> 	mov ax,[%2]
  6584                              <4> 	mov [bp+2],ax
  6585                              <4> 	mov ax,%3
  6586                              <4> 	mov ds,ax
  6587                              <4> 	mov ax,[%4+2]
  6588                              <4> 	mov [bp+4],ax
  6589                              <4> 	mov ax,[%4]
  6590                              <4> 	mov [bp+6],ax
  6591                              <4> 	call proc_flcmp
  6592                              <4> 	mov ax,sp
  6593                              <4> 	mov bp,ax
  6594                              <4> 	mov byte %5,[bp+8]
  6595                              <4> 	stkclose 0x09
  6596                              <4> %endmacro
  6597                              <4> 
  6598                              <4> %macro flshl 4	
  6599                              <4> 	stkopen 0x03
  6600                              <4> 	mov ax,%1
  6601                              <4> 	mov ds,ax
  6602                              <4> 	mov ax,[%2+2]
  6603                              <4> 	mov [bp+0],ax
  6604                              <4> 	mov ax,%3
  6605                              <4> 	mov ds,ax
  6606                              <4> 	mov al,[%4]
  6607                              <4> 	mov [bp+2],al
  6608                              <4> 	call proc_flshl
  6609                              <4> 	mov ax,sp
  6610                              <4> 	mov bp,ax
  6611                              <4> 	mov ax,%1
  6612                              <4> 	mov ds,ax
  6613                              <4> 	mov ax,[bp+0]
  6614                              <4> 	mov [%2+2],ax
  6615                              <4> 	stkclose 0x03
  6616                              <4> %endmacro
  6617                              <4> 
  6618                              <4> %macro flshr 4	
  6619                              <4> 	stkopen 0x03
  6620                              <4> 	mov ax,%1
  6621                              <4> 	mov ds,ax
  6622                              <4> 	mov ax,[%2+2]
  6623                              <4> 	mov [bp+0],ax	
  6624                              <4> 	mov ax,%3
  6625                              <4> 	mov ds,ax
  6626                              <4> 	mov al,[%4]
  6627                              <4> 	mov [bp+2],al
  6628                              <4> 	call proc_flshr
  6629                              <4> 	mov ax,sp
  6630                              <4> 	mov bp,ax
  6631                              <4> 	mov ax,%1
  6632                              <4> 	mov ds,ax
  6633                              <4> 	mov ax,[bp+0]
  6634                              <4> 	mov [%2+2],ax
  6635                              <4> 	stkclose 0x03
  6636                              <4> %endmacro
  6637                              <4> 
  6638                              <4> %macro fldiv 6	
  6639                              <4> 	stkopen 0x0C
  6640                              <4> 	mov ax,%1
  6641                              <4> 	mov ds,ax
  6642                              <4> 	mov ax,[%2+2]
  6643                              <4> 	mov [bp+0],ax
  6644                              <4> 	mov ax,[%2]
  6645                              <4> 	mov [bp+2],ax
  6646                              <4> 	mov ax,%3
  6647                              <4> 	mov ds,ax
  6648                              <4> 	mov ax,[%4+2]
  6649                              <4> 	mov [bp+4],ax
  6650                              <4> 	mov ax,[%4]
  6651                              <4> 	mov [bp+6],ax
  6652                              <4> 	call proc_fldiv
  6653                              <4> 	mov ax,sp
  6654                              <4> 	mov bp,ax
  6655                              <4> 	mov ax,%5
  6656                              <4> 	mov ds,ax
  6657                              <4> 	mov ax,[bp+8]
  6658                              <4> 	mov [%6+2],ax
  6659                              <4> 	mov ax,[bp+0x0A]
  6660                              <4> 	mov [%6],ax
  6661                              <4> 	stkclose 0x0C
  6662                              <4> %endmacro
  6663                              <4> 
  6664                              <4> %macro flmul 6	
  6665                              <4> 	stkopen 0x0C
  6666                              <4> 	mov ax,%1
  6667                              <4> 	mov ds,ax
  6668                              <4> 	mov ax,[%2+2]
  6669                              <4> 	mov [bp+0],ax
  6670                              <4> 	mov ax,[%2]
  6671                              <4> 	mov [bp+2],ax
  6672                              <4> 	mov ax,%3
  6673                              <4> 	mov ds,ax
  6674                              <4> 	mov ax,[%4+2]
  6675                              <4> 	mov [bp+4],ax
  6676                              <4> 	mov ax,[%4]
  6677                              <4> 	mov [bp+6],ax
  6678                              <4> 	call proc_flmul
  6679                              <4> 	mov ax,sp
  6680                              <4> 	mov bp,ax
  6681                              <4> 	mov ax,%5
  6682                              <4> 	mov ds,ax
  6683                              <4> 	mov ax,[bp+8]
  6684                              <4> 	mov [%6+2],ax
  6685                              <4> 	mov ax,[bp+0x0A]
  6686                              <4> 	mov [%6],ax
  6687                              <4> 	stkclose 0x0C
  6688                              <4> %endmacro
  6689                              <4> 	
  6690                              <4> %macro fladdorsub 7
  6691                              <4> 	stkopen 0x0E
  6692                              <4> 	mov ax,%1
  6693                              <4> 	mov ds,ax
  6694                              <4> 	mov ax,[%2+2]
  6695                              <4> 	mov [bp+0],ax
  6696                              <4> 	mov ax,[%2]
  6697                              <4> 	mov [bp+2],ax
  6698                              <4> 	mov ax,%3
  6699                              <4> 	mov ds,ax
  6700                              <4> 	mov ax,[%4+2]
  6701                              <4> 	mov [bp+4],ax
  6702                              <4> 	mov ax,[%4]
  6703                              <4> 	mov [bp+6],ax
  6704                              <4> 	mov word [bp+0x0C], %7
  6705                              <4> 	call proc_fladdorsub
  6706                              <4> 	mov ax,sp
  6707                              <4> 	mov bp,ax
  6708                              <4> 	mov ax,%5
  6709                              <4> 	mov ds,ax
  6710                              <4> 	mov ax,[bp+8]
  6711                              <4> 	mov [%6+2],ax
  6712                              <4> 	mov ax,[bp+0x0A]
  6713                              <4> 	mov [%6],ax
  6714                              <4> 	stkclose 0x0E
  6715                              <4> %endmacro
  6716                              <4> 	
  6717                              <4> %endif
  6718                              <3> 
  6719                              <3> %macro __sin 4
  6720                              <3> 	__sinorcos %1, %2, %3, %4, 1
  6721                              <3> %endmacro
  6722                              <3> 
  6723                              <3> %macro __cos 4
  6724                              <3> 	__sinorcos %1, %2, %3, %4, 0
  6725                              <3> %endmacro
  6726                              <3> 
  6727                              <3> %macro __sin0x90 4
  6728                              <3> 	__sinorcos0x90 %1, %2, %3, %4, 1
  6729                              <3> %endmacro
  6730                              <3> 
  6731                              <3> %macro __cos0x90 4
  6732                              <3> 	__sinorcos0x90 %1, %2, %3, %4, 0
  6733                              <3> %endmacro
  6734                              <3> 
  6735                              <3> %macro __to0x360 4
  6736                              <3> 	stkopen 0x04
  6737                              <3> 	mov word [bp+0],%1
  6738                              <3> 	mov word [bp+2],%2	
  6739                              <3> 	call proc_to0x360
  6740                              <3> 	push sp
  6741                              <3> 	pop bp
  6742                              <3> 	mov word %3,[bp+4]
  6743                              <3> 	mov word %4,[bp+6]
  6744                              <3> 	stkclose 0x04
  6745                              <3> %endmacro
  6746                              <3> 
  6747                              <3> %macro __toradians 4
  6748                              <3> 	stkopen 0x08
  6749                              <3> 	mov word [bp+0],%1
  6750                              <3> 	mov word [bp+2],%2
  6751                              <3> 	call proc_toradians
  6752                              <3> 	push sp
  6753                              <3> 	pop bp
  6754                              <3> 	mov word %3, [bp+4]
  6755                              <3> 	mov word %4, [bp+6]
  6756                              <3> 	stkclose 0x08
  6757                              <3> %endmacro
  6758                              <3> 
  6759                              <3> %macro __todegrees 4
  6760                              <3> 	stkopen 0x08
  6761                              <3> 	mov word [bp+0],%1
  6762                              <3> 	mov word [bp+2],%2
  6763                              <3> 	call proc_todegrees
  6764                              <3> 	push sp
  6765                              <3> 	pop bp
  6766                              <3> 	mov word %3, [bp+4]
  6767                              <3> 	mov word %4, [bp+6]
  6768                              <3> 	stkclose 0x08
  6769                              <3> %endmacro
  6770                              <3> 
  6771                              <3> %macro __atan 4
  6772                              <3> 	stkopen 0x08
  6773                              <3> 	mov word [bp+0],%1
  6774                              <3> 	mov word [bp+2],%2	
  6775                              <3> 	call proc_atan
  6776                              <3> 	push sp
  6777                              <3> 	pop bp
  6778                              <3> 	mov word %3,[bp+4]
  6779                              <3> 	mov word %4,[bp+6]
  6780                              <3> 	stkclose 0x08
  6781                              <3> %endmacro
  6782                              <3> 
  6783                              <3> %macro __sinorcos 5
  6784                              <3> 	stkopen 0x09
  6785                              <3> 	mov word [bp+0],%1
  6786                              <3> 	mov word [bp+2],%2	
  6787                              <3> 	mov byte [bp+8],%5
  6788                              <3> 	call proc_sinorcos
  6789                              <3> 	push sp
  6790                              <3> 	pop bp
  6791                              <3> 	mov word %3,[bp+4]
  6792                              <3> 	mov word %4,[bp+6]
  6793                              <3> 	stkclose 0x09
  6794                              <3> %endmacro
  6795                              <3> 
  6796                              <3> %macro __sinorcos0x90 5
  6797                              <3> 	stkopen 0x09
  6798                              <3> 	mov word [bp+0],%1
  6799                              <3> 	mov word [bp+2],%2
  6800                              <3> 	mov byte [bp+8],%5
  6801                              <3> 	call proc_sinorcos0x90
  6802                              <3> 	push sp
  6803                              <3> 	pop bp
  6804                              <3> 	mov word %3,[bp+4]
  6805                              <3> 	mov word %4,[bp+6]
  6806                              <3> 	stkclose 0x09
  6807                              <3> %endmacro
  6808                              <3> 
  6809                              <3> %macro __sinnorm 3
  6810                              <3> 	stkopen 0x06
  6811                              <3> 	mov word [bp+0],%1
  6812                              <3> 	mov word [bp+2],%2
  6813                              <3> 	call proc__sinnorm
  6814                              <3> 	push sp
  6815                              <3> 	pop bp
  6816                              <3> 	mov word %1,[bp+0]
  6817                              <3> 	mov word %2,[bp+2]
  6818                              <3> 	mov word %3,[bp+4]
  6819                              <3> 	stkclose 0x06
  6820                              <3> %endmacro
  6821                              <3> 
  6822                              <3> %macro __cosnorm 3
  6823                              <3> 	stkopen 0x06
  6824                              <3> 	mov word [bp+0],%1
  6825                              <3> 	mov word [bp+2],%2
  6826                              <3> 	call proc__cosnorm
  6827                              <3> 	push sp
  6828                              <3> 	pop bp
  6829                              <3> 	mov word %1,[bp+0]
  6830                              <3> 	mov word %2,[bp+2]
  6831                              <3> 	mov word %3,[bp+4]
  6832                              <3> 	stkclose 0x06
  6833                              <3> %endmacro
  6834                              <3> 
  6835                              <3> %macro __norm_factors 5
  6836                              <3> 	stkopen 0x0A
  6837                              <3> 	mov word [bp+0],%1
  6838                              <3> 	mov word [bp+2],%2
  6839                              <3> 	call proc__norm_factors
  6840                              <3> 	push sp
  6841                              <3> 	pop bp
  6842                              <3> 	mov word %3,[bp+4]
  6843                              <3> 	mov word %4,[bp+6]
  6844                              <3> 	mov word %5,[bp+8]
  6845                              <3> 	stkclose 0x0A
  6846                              <3> %endmacro
  6847                              <3> 
  6848                              <3> %macro __fat16 2
  6849                              <3> 	stkopen 0x04
  6850                              <3> 	mov word [bp+0],%1
  6851                              <3> 	call proc__fat16
  6852                              <3> 	push sp
  6853                              <3> 	pop bp
  6854                              <3> 	mov word %2, [bp+2]
  6855                              <3> 	stkclose 0x04
  6856                              <3> %endmacro
  6857                              <3> 
  6858                              <3> %macro __pow16 3
  6859                              <3> 	stkopen 0x06
  6860                              <3> 	mov word [bp+0],%1
  6861                              <3> 	mov word [bp+2],%2
  6862                              <3> 	call proc__pow16
  6863                              <3> 	push sp
  6864                              <3> 	pop bp
  6865                              <3> 	mov word %3, [bp+4]
  6866                              <3> 	stkclose 0x06
  6867                              <3> %endmacro
  6868                              <3> 	
  6869                              <3> section .data
  6870 0000128D DB0F4940            <3> 	PI: dd 0x40490FDB
  6871 00001291 00003443            <3> 	__180dg: dd 0x43340000
  6872                              <3> 
  6873                              <3> proc_to0x360:
  6874 00001295 89E0                <3> 	mov ax,sp
  6875 00001297 89C5                <3> 	mov bp,ax
  6876                              <3> 	
  6877 00001299 8B4602              <3> 	mov ax,[bp+2]
  6878 0000129C 8B5E04              <3> 	mov bx,[bp+4]
  6879 0000129F 25FF7F              <3> 	and ax,0x7FFF
  6880                              <3> 	
  6881 000012A2 B9C940              <3> 	mov cx,0x40C9	; 2*PI (alta)
  6882 000012A5 BADB0F              <3> 	mov dx,0x0FDB	; 2*PI (baixa)		
  6883                              <3> 		
  6884 000012A8 55                  <3> 	push bp
  6885                              <3> 	__fldiv ax, bx, cx, dx, cx, dx
  6886                              <4>  stkopen 0x0E
  6887 000012A9 83EC0E              <5>  sub word sp, %1
  6888 000012AC 54                  <5>  push sp
  6889 000012AD 5D                  <5>  pop bp
  6890 000012AE 894600              <4>  mov word [bp+0],%1
  6891 000012B1 895E02              <4>  mov word [bp+2],%2
  6892 000012B4 894E04              <4>  mov word [bp+4],%3
  6893 000012B7 895606              <4>  mov word [bp+6],%4
  6894 000012BA E8C9F6              <4>  call proc_fldiv
  6895 000012BD 54                  <4>  push sp
  6896 000012BE 5D                  <4>  pop bp
  6897 000012BF 8B4E08              <4>  mov word %5,[bp+8]
  6898 000012C2 8B560A              <4>  mov word %6,[bp+0x0A]
  6899                              <4>  stkclose 0x0E
  6900 000012C5 83C40E              <5>  add word sp, %1
  6901                              <3> 	__fltoint32 cx, dx, cx, dx
  6902                              <4>  stkopen 0x08
  6903 000012C8 83EC08              <5>  sub word sp, %1
  6904 000012CB 54                  <5>  push sp
  6905 000012CC 5D                  <5>  pop bp
  6906 000012CD 894E00              <4>  mov word [bp+0],%1
  6907 000012D0 895602              <4>  mov word [bp+2],%2
  6908 000012D3 E88BF4              <4>  call proc_fltoint32
  6909 000012D6 54                  <4>  push sp
  6910 000012D7 5D                  <4>  pop bp
  6911 000012D8 8B4E04              <4>  mov word %3,[bp+4]
  6912 000012DB 8B5606              <4>  mov word %4,[bp+6]
  6913                              <4>  stkclose 0x08
  6914 000012DE 83C408              <5>  add word sp, %1
  6915                              <3> 	__int32tofl cx, dx, cx, dx
  6916                              <4>  stkopen 0x08
  6917 000012E1 83EC08              <5>  sub word sp, %1
  6918 000012E4 54                  <5>  push sp
  6919 000012E5 5D                  <5>  pop bp
  6920 000012E6 894E00              <4>  mov word [bp+0],%1
  6921 000012E9 895602              <4>  mov word [bp+2],%2
  6922 000012EC E8F6F4              <4>  call proc_int32tofl
  6923 000012EF 54                  <4>  push sp
  6924 000012F0 5D                  <4>  pop bp
  6925 000012F1 8B4E04              <4>  mov word %3,[bp+4]
  6926 000012F4 8B5606              <4>  mov word %4,[bp+6]
  6927                              <4>  stkclose 0x08
  6928 000012F7 83C408              <5>  add word sp, %1
  6929 000012FA 5D                  <3> 	pop bp
  6930                              <3> 		
  6931 000012FB B8C940              <3> 	mov ax,0x40C9	; 2*PI (alta)
  6932 000012FE BBDB0F              <3> 	mov bx,0x0FDB	; 2*PI (baixa)
  6933 00001301 55                  <3> 	push bp
  6934                              <3> 	__flmul ax, bx, cx, dx, cx, dx
  6935                              <4>  stkopen 0x0E
  6936 00001302 83EC0E              <5>  sub word sp, %1
  6937 00001305 54                  <5>  push sp
  6938 00001306 5D                  <5>  pop bp
  6939 00001307 894600              <4>  mov word [bp+0],%1
  6940 0000130A 895E02              <4>  mov word [bp+2],%2
  6941 0000130D 894E04              <4>  mov word [bp+4],%3
  6942 00001310 895606              <4>  mov word [bp+6],%4
  6943 00001313 E88FF7              <4>  call proc_flmul
  6944 00001316 54                  <4>  push sp
  6945 00001317 5D                  <4>  pop bp
  6946 00001318 8B4E08              <4>  mov word %5,[bp+8]
  6947 0000131B 8B560A              <4>  mov word %6,[bp+0x0A]
  6948                              <4>  stkclose 0x0E
  6949 0000131E 83C40E              <5>  add word sp, %1
  6950 00001321 5D                  <3> 	pop bp				
  6951                              <3> 		
  6952 00001322 8B4602              <3> 	mov ax,[bp+2]
  6953 00001325 8B5E04              <3> 	mov bx,[bp+4]		
  6954 00001328 25FF7F              <3> 	and ax,0x7FFF		
  6955 0000132B 55                  <3> 	push bp	
  6956                              <3> 	__flsub ax, bx, cx, dx, ax, bx
  6957                              <4>  stkopen 0x0E
  6958 0000132C 83EC0E              <5>  sub word sp, %1
  6959 0000132F 54                  <5>  push sp
  6960 00001330 5D                  <5>  pop bp
  6961 00001331 894600              <4>  mov word [bp+0],%1
  6962 00001334 895E02              <4>  mov word [bp+2],%2
  6963 00001337 894E04              <4>  mov word [bp+4],%3
  6964 0000133A 895606              <4>  mov word [bp+6],%4
  6965 0000133D C7460C0080          <4>  mov word [bp+0x0C],0x8000
  6966 00001342 E80CF9              <4>  call proc_fladdorsub
  6967 00001345 54                  <4>  push sp
  6968 00001346 5D                  <4>  pop bp
  6969 00001347 8B4608              <4>  mov word %5,[bp+8]
  6970 0000134A 8B5E0A              <4>  mov word %6,[bp+0x0A]
  6971                              <4>  stkclose 0x0E
  6972 0000134D 83C40E              <5>  add word sp, %1
  6973 00001350 5D                  <3> 	pop bp	
  6974                              <3> 	
  6975 00001351 8B4E02              <3> 	mov cx,[bp+2]
  6976 00001354 81E10080            <3> 	and cx,0x8000
  6977 00001358 83F900              <3> 	cmp cx,0
  6978 0000135B 742C                <3> 	jz .endneg
  6979 0000135D B9C940              <3> 		mov cx,0x40C9	; 2*PI (alta)
  6980 00001360 BADB0F              <3> 		mov dx,0x0FDB	; 2*PI (baixa)
  6981 00001363 55                  <3> 		push bp		
  6982                              <3> 		__flsub cx, dx, ax, bx, ax, bx		
  6983                              <4>  stkopen 0x0E
  6984 00001364 83EC0E              <5>  sub word sp, %1
  6985 00001367 54                  <5>  push sp
  6986 00001368 5D                  <5>  pop bp
  6987 00001369 894E00              <4>  mov word [bp+0],%1
  6988 0000136C 895602              <4>  mov word [bp+2],%2
  6989 0000136F 894604              <4>  mov word [bp+4],%3
  6990 00001372 895E06              <4>  mov word [bp+6],%4
  6991 00001375 C7460C0080          <4>  mov word [bp+0x0C],0x8000
  6992 0000137A E8D4F8              <4>  call proc_fladdorsub
  6993 0000137D 54                  <4>  push sp
  6994 0000137E 5D                  <4>  pop bp
  6995 0000137F 8B4608              <4>  mov word %5,[bp+8]
  6996 00001382 8B5E0A              <4>  mov word %6,[bp+0x0A]
  6997                              <4>  stkclose 0x0E
  6998 00001385 83C40E              <5>  add word sp, %1
  6999 00001388 5D                  <3> 		pop bp	
  7000                              <3> 	.endneg:	
  7001                              <3> 	
  7002 00001389 894606              <3> 	mov [bp+6],ax
  7003 0000138C 895E08              <3> 	mov [bp+8],bx	
  7004                              <3> 							
  7005 0000138F C3                  <3> 	ret
  7006                              <3> 	
  7007                              <3> proc_toradians:
  7008 00001390 89E0                <3> 	mov ax,sp
  7009 00001392 89C5                <3> 	mov bp,ax
  7010                              <3> 	
  7011 00001394 8B4602              <3> 	mov ax,[bp+2]
  7012 00001397 8B5E04              <3> 	mov bx,[bp+4]		
  7013 0000139A B94940              <3> 	mov cx,0x4049
  7014 0000139D BADB0F              <3> 	mov dx,0x0FDB
  7015                              <3> 	__flmul ax, bx, cx, dx, ax, bx
  7016                              <4>  stkopen 0x0E
  7017 000013A0 83EC0E              <5>  sub word sp, %1
  7018 000013A3 54                  <5>  push sp
  7019 000013A4 5D                  <5>  pop bp
  7020 000013A5 894600              <4>  mov word [bp+0],%1
  7021 000013A8 895E02              <4>  mov word [bp+2],%2
  7022 000013AB 894E04              <4>  mov word [bp+4],%3
  7023 000013AE 895606              <4>  mov word [bp+6],%4
  7024 000013B1 E8F1F6              <4>  call proc_flmul
  7025 000013B4 54                  <4>  push sp
  7026 000013B5 5D                  <4>  pop bp
  7027 000013B6 8B4608              <4>  mov word %5,[bp+8]
  7028 000013B9 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7029                              <4>  stkclose 0x0E
  7030 000013BC 83C40E              <5>  add word sp, %1
  7031 000013BF B93443              <3> 	mov cx,0x4334
  7032 000013C2 BA0000              <3> 	mov dx,0x0000	
  7033                              <3> 	__fldiv ax, bx, cx, cx, ax, bx
  7034                              <4>  stkopen 0x0E
  7035 000013C5 83EC0E              <5>  sub word sp, %1
  7036 000013C8 54                  <5>  push sp
  7037 000013C9 5D                  <5>  pop bp
  7038 000013CA 894600              <4>  mov word [bp+0],%1
  7039 000013CD 895E02              <4>  mov word [bp+2],%2
  7040 000013D0 894E04              <4>  mov word [bp+4],%3
  7041 000013D3 894E06              <4>  mov word [bp+6],%4
  7042 000013D6 E8ADF5              <4>  call proc_fldiv
  7043 000013D9 54                  <4>  push sp
  7044 000013DA 5D                  <4>  pop bp
  7045 000013DB 8B4608              <4>  mov word %5,[bp+8]
  7046 000013DE 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7047                              <4>  stkclose 0x0E
  7048 000013E1 83C40E              <5>  add word sp, %1
  7049                              <3> 	
  7050 000013E4 89E1                <3> 	mov cx,sp
  7051 000013E6 89CD                <3> 	mov bp,cx
  7052 000013E8 894606              <3> 	mov [bp+6],ax
  7053 000013EB 895E08              <3> 	mov [bp+8],bx
  7054                              <3> 	
  7055 000013EE C3                  <3> 	ret
  7056                              <3> 	
  7057                              <3> proc_todegrees:
  7058 000013EF 89E0                <3> 	mov ax,sp
  7059 000013F1 89C5                <3> 	mov bp,ax
  7060                              <3> 	
  7061 000013F3 8B4602              <3> 	mov ax,[bp+2]
  7062 000013F6 8B5E04              <3> 	mov bx,[bp+4]		
  7063 000013F9 B93443              <3> 	mov cx,0x4334
  7064 000013FC BA0000              <3> 	mov dx,0x0000
  7065                              <3> 	__flmul ax, bx, cx, dx, ax, bx		
  7066                              <4>  stkopen 0x0E
  7067 000013FF 83EC0E              <5>  sub word sp, %1
  7068 00001402 54                  <5>  push sp
  7069 00001403 5D                  <5>  pop bp
  7070 00001404 894600              <4>  mov word [bp+0],%1
  7071 00001407 895E02              <4>  mov word [bp+2],%2
  7072 0000140A 894E04              <4>  mov word [bp+4],%3
  7073 0000140D 895606              <4>  mov word [bp+6],%4
  7074 00001410 E892F6              <4>  call proc_flmul
  7075 00001413 54                  <4>  push sp
  7076 00001414 5D                  <4>  pop bp
  7077 00001415 8B4608              <4>  mov word %5,[bp+8]
  7078 00001418 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7079                              <4>  stkclose 0x0E
  7080 0000141B 83C40E              <5>  add word sp, %1
  7081 0000141E B94940              <3> 	mov cx,0x4049
  7082 00001421 BADB0F              <3> 	mov dx,0x0FDB	
  7083                              <3> 	__fldiv ax, bx, cx, cx, ax, bx
  7084                              <4>  stkopen 0x0E
  7085 00001424 83EC0E              <5>  sub word sp, %1
  7086 00001427 54                  <5>  push sp
  7087 00001428 5D                  <5>  pop bp
  7088 00001429 894600              <4>  mov word [bp+0],%1
  7089 0000142C 895E02              <4>  mov word [bp+2],%2
  7090 0000142F 894E04              <4>  mov word [bp+4],%3
  7091 00001432 894E06              <4>  mov word [bp+6],%4
  7092 00001435 E84EF5              <4>  call proc_fldiv
  7093 00001438 54                  <4>  push sp
  7094 00001439 5D                  <4>  pop bp
  7095 0000143A 8B4608              <4>  mov word %5,[bp+8]
  7096 0000143D 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7097                              <4>  stkclose 0x0E
  7098 00001440 83C40E              <5>  add word sp, %1
  7099                              <3> 	
  7100 00001443 89E1                <3> 	mov cx,sp
  7101 00001445 89CD                <3> 	mov bp,cx
  7102 00001447 894606              <3> 	mov [bp+6],ax
  7103 0000144A 895E08              <3> 	mov [bp+8],bx
  7104                              <3> 	
  7105 0000144D C3                  <3> 	ret
  7106                              <3> 
  7107                              <3> proc_sinorcos:
  7108 0000144E 89E0                <3> 	mov ax,sp
  7109 00001450 89C5                <3> 	mov bp,ax
  7110                              <3> 	
  7111 00001452 8B4602              <3> 	mov ax,[bp+2]
  7112 00001455 8B5E04              <3> 	mov bx,[bp+4]
  7113 00001458 807E0A00            <3> 	cmp byte [bp+0x0A],0
  7114 0000145C 741E                <3> 	jz .normcos
  7115                              <3> 		__sinnorm ax, bx, cx
  7116                              <4>  stkopen 0x06
  7117 0000145E 83EC06              <5>  sub word sp, %1
  7118 00001461 54                  <5>  push sp
  7119 00001462 5D                  <5>  pop bp
  7120 00001463 894600              <4>  mov word [bp+0],%1
  7121 00001466 895E02              <4>  mov word [bp+2],%2
  7122 00001469 E82303              <4>  call proc__sinnorm
  7123 0000146C 54                  <4>  push sp
  7124 0000146D 5D                  <4>  pop bp
  7125 0000146E 8B4600              <4>  mov word %1,[bp+0]
  7126 00001471 8B5E02              <4>  mov word %2,[bp+2]
  7127 00001474 8B4E04              <4>  mov word %3,[bp+4]
  7128                              <4>  stkclose 0x06
  7129 00001477 83C406              <5>  add word sp, %1
  7130 0000147A EB1C                <3> 		jmp .endnorm
  7131                              <3> 	.normcos:
  7132                              <3> 		__cosnorm ax, bx, cx	
  7133                              <4>  stkopen 0x06
  7134 0000147C 83EC06              <5>  sub word sp, %1
  7135 0000147F 54                  <5>  push sp
  7136 00001480 5D                  <5>  pop bp
  7137 00001481 894600              <4>  mov word [bp+0],%1
  7138 00001484 895E02              <4>  mov word [bp+2],%2
  7139 00001487 E8AB03              <4>  call proc__cosnorm
  7140 0000148A 54                  <4>  push sp
  7141 0000148B 5D                  <4>  pop bp
  7142 0000148C 8B4600              <4>  mov word %1,[bp+0]
  7143 0000148F 8B5E02              <4>  mov word %2,[bp+2]
  7144 00001492 8B4E04              <4>  mov word %3,[bp+4]
  7145                              <4>  stkclose 0x06
  7146 00001495 83C406              <5>  add word sp, %1
  7147                              <3> 	.endnorm:
  7148                              <3> 	
  7149 00001498 51                  <3> 	push cx
  7150                              <3> 	
  7151 00001499 89E1                <3> 	mov cx,sp
  7152 0000149B 89CD                <3> 	mov bp,cx
  7153 0000149D 83C502              <3> 	add bp,2
  7154 000014A0 8A4E0A              <3> 	mov cl,[bp+0x0A]	
  7155                              <3> 	__sinorcos0x90 ax, bx, ax, bx, cl
  7156                              <4>  stkopen 0x09
  7157 000014A3 83EC09              <5>  sub word sp, %1
  7158 000014A6 54                  <5>  push sp
  7159 000014A7 5D                  <5>  pop bp
  7160 000014A8 894600              <4>  mov word [bp+0],%1
  7161 000014AB 895E02              <4>  mov word [bp+2],%2
  7162 000014AE 884E08              <4>  mov byte [bp+8],%5
  7163 000014B1 E82C00              <4>  call proc_sinorcos0x90
  7164 000014B4 54                  <4>  push sp
  7165 000014B5 5D                  <4>  pop bp
  7166 000014B6 8B4604              <4>  mov word %3,[bp+4]
  7167 000014B9 8B5E06              <4>  mov word %4,[bp+6]
  7168                              <4>  stkclose 0x09
  7169 000014BC 83C409              <5>  add word sp, %1
  7170 000014BF 89E1                <3> 	mov cx,sp
  7171 000014C1 89CD                <3> 	mov bp,cx
  7172 000014C3 83C502              <3> 	add bp,2	
  7173 000014C6 894606              <3> 	mov [bp+6],ax
  7174 000014C9 895E08              <3> 	mov [bp+8],bx
  7175                              <3> 			
  7176 000014CC 59                  <3> 	pop cx
  7177                              <3> 		
  7178 000014CD 89E2                <3> 	mov dx,sp
  7179 000014CF 89D5                <3> 	mov bp,dx
  7180                              <3> 		
  7181 000014D1 81F90080            <3> 	cmp cx,0x8000
  7182 000014D5 7405                <3> 	je .one
  7183 000014D7 214E06              <3> 		and word [bp+6],cx
  7184 000014DA EB03                <3> 		jmp .endcmp
  7185                              <3> 	.one:
  7186 000014DC 094E06              <3> 		or word [bp+6],cx	
  7187                              <3> 	.endcmp:
  7188                              <3> 	
  7189 000014DF C3                  <3> 	ret
  7190                              <3> 	
  7191                              <3> proc_sinorcos0x90:
  7192 000014E0 89E1                <3> 	mov cx,sp
  7193 000014E2 89CD                <3> 	mov bp,cx
  7194                              <3> 
  7195 000014E4 C746060000          <3> 	mov word [bp+6],0
  7196 000014E9 C746080000          <3> 	mov word [bp+8],0		
  7197                              <3> 	
  7198 000014EE B90000              <3> 	mov cx,0
  7199                              <3> 	.l1:
  7200 000014F1 83F903              <3> 		cmp cx,0x03
  7201 000014F4 0F877301            <3> 		ja .l2		
  7202 000014F8 51                  <3> 		push cx
  7203                              <3> 		
  7204 000014F9 83E101              <3> 		and cx,0x0001
  7205 000014FC 83F900              <3> 		cmp cx,0
  7206 000014FF 7505                <3> 		jnz .neg
  7207 00001501 B80100              <3> 			mov ax,0x0001
  7208 00001504 EB03                <3> 			jmp .endneg
  7209                              <3> 		.neg:
  7210 00001506 B8FFFF              <3> 			mov ax,0xFFFF
  7211                              <3> 		.endneg:
  7212                              <3> 				
  7213 00001509 59                  <3> 		pop cx
  7214 0000150A 51                  <3> 		push cx
  7215 0000150B 50                  <3> 		push ax
  7216                              <3> 		
  7217 0000150C BA0000              <3> 		mov dx,0
  7218 0000150F B80200              <3> 		mov ax,2
  7219 00001512 F7E1                <3> 		mul cx
  7220                              <3> 		
  7221 00001514 89E2                <3> 		mov dx,sp
  7222 00001516 89D5                <3> 		mov bp,dx
  7223 00001518 83C504              <3> 		add bp,4		
  7224 0000151B 807E0A00            <3> 		cmp byte [bp+0x0A],0
  7225 0000151F 7401                <3> 		jz .incremented
  7226 00001521 40                  <3> 			inc ax
  7227                              <3> 		.incremented:
  7228                              <3> 						
  7229                              <3> 		__fat16 ax, dx
  7230                              <4>  stkopen 0x04
  7231 00001522 83EC04              <5>  sub word sp, %1
  7232 00001525 54                  <5>  push sp
  7233 00001526 5D                  <5>  pop bp
  7234 00001527 894600              <4>  mov word [bp+0],%1
  7235 0000152A E82302              <4>  call proc__fat16
  7236 0000152D 54                  <4>  push sp
  7237 0000152E 5D                  <4>  pop bp
  7238 0000152F 8B5602              <4>  mov word %2, [bp+2]
  7239                              <4>  stkclose 0x04
  7240 00001532 83C404              <5>  add word sp, %1
  7241                              <3> 						
  7242 00001535 58                  <3> 		pop ax
  7243 00001536 52                  <3> 		push dx	
  7244                              <3> 		__int16to32 ax, cx, dx						
  7245                              <4>  stkopen 0x06
  7246 00001537 83EC06              <5>  sub word sp, %1
  7247 0000153A 54                  <5>  push sp
  7248 0000153B 5D                  <5>  pop bp
  7249 0000153C 894600              <4>  mov word [bp+0],%1
  7250 0000153F E82BEB              <4>  call proc_int16to32
  7251 00001542 54                  <4>  push sp
  7252 00001543 5D                  <4>  pop bp
  7253 00001544 8B4E02              <4>  mov word %2, [bp+2]
  7254 00001547 8B5604              <4>  mov word %3, [bp+4]
  7255                              <4>  stkclose 0x06
  7256 0000154A 83C406              <5>  add word sp, %1
  7257                              <3> 		__int32tofl cx, dx, ax, bx
  7258                              <4>  stkopen 0x08
  7259 0000154D 83EC08              <5>  sub word sp, %1
  7260 00001550 54                  <5>  push sp
  7261 00001551 5D                  <5>  pop bp
  7262 00001552 894E00              <4>  mov word [bp+0],%1
  7263 00001555 895602              <4>  mov word [bp+2],%2
  7264 00001558 E88AF2              <4>  call proc_int32tofl
  7265 0000155B 54                  <4>  push sp
  7266 0000155C 5D                  <4>  pop bp
  7267 0000155D 8B4604              <4>  mov word %3,[bp+4]
  7268 00001560 8B5E06              <4>  mov word %4,[bp+6]
  7269                              <4>  stkclose 0x08
  7270 00001563 83C408              <5>  add word sp, %1
  7271                              <3> 		
  7272 00001566 59                  <3> 		pop cx
  7273 00001567 50                  <3> 		push ax
  7274 00001568 53                  <3> 		push bx		
  7275                              <3> 		__int16to32 cx, ax, bx
  7276                              <4>  stkopen 0x06
  7277 00001569 83EC06              <5>  sub word sp, %1
  7278 0000156C 54                  <5>  push sp
  7279 0000156D 5D                  <5>  pop bp
  7280 0000156E 894E00              <4>  mov word [bp+0],%1
  7281 00001571 E8F9EA              <4>  call proc_int16to32
  7282 00001574 54                  <4>  push sp
  7283 00001575 5D                  <4>  pop bp
  7284 00001576 8B4602              <4>  mov word %2, [bp+2]
  7285 00001579 8B5E04              <4>  mov word %3, [bp+4]
  7286                              <4>  stkclose 0x06
  7287 0000157C 83C406              <5>  add word sp, %1
  7288                              <3> 		__int32tofl ax, bx, cx, dx
  7289                              <4>  stkopen 0x08
  7290 0000157F 83EC08              <5>  sub word sp, %1
  7291 00001582 54                  <5>  push sp
  7292 00001583 5D                  <5>  pop bp
  7293 00001584 894600              <4>  mov word [bp+0],%1
  7294 00001587 895E02              <4>  mov word [bp+2],%2
  7295 0000158A E858F2              <4>  call proc_int32tofl
  7296 0000158D 54                  <4>  push sp
  7297 0000158E 5D                  <4>  pop bp
  7298 0000158F 8B4E04              <4>  mov word %3,[bp+4]
  7299 00001592 8B5606              <4>  mov word %4,[bp+6]
  7300                              <4>  stkclose 0x08
  7301 00001595 83C408              <5>  add word sp, %1
  7302                              <3> 		
  7303 00001598 5B                  <3> 		pop bx
  7304 00001599 58                  <3> 		pop ax
  7305                              <3> 		
  7306                              <3> 		__fldiv ax, bx, cx, dx, ax, bx
  7307                              <4>  stkopen 0x0E
  7308 0000159A 83EC0E              <5>  sub word sp, %1
  7309 0000159D 54                  <5>  push sp
  7310 0000159E 5D                  <5>  pop bp
  7311 0000159F 894600              <4>  mov word [bp+0],%1
  7312 000015A2 895E02              <4>  mov word [bp+2],%2
  7313 000015A5 894E04              <4>  mov word [bp+4],%3
  7314 000015A8 895606              <4>  mov word [bp+6],%4
  7315 000015AB E8D8F3              <4>  call proc_fldiv
  7316 000015AE 54                  <4>  push sp
  7317 000015AF 5D                  <4>  pop bp
  7318 000015B0 8B4608              <4>  mov word %5,[bp+8]
  7319 000015B3 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7320                              <4>  stkclose 0x0E
  7321 000015B6 83C40E              <5>  add word sp, %1
  7322                              <3> 						
  7323 000015B9 59                  <3> 		pop cx
  7324 000015BA 51                  <3> 		push cx
  7325 000015BB 50                  <3> 		push ax
  7326 000015BC 53                  <3> 		push bx
  7327                              <3> 		
  7328 000015BD 89E0                <3> 		mov ax,sp
  7329 000015BF 89C5                <3> 		mov bp,ax
  7330 000015C1 83C506              <3> 		add bp,6
  7331                              <3> 		
  7332 000015C4 BA0000              <3> 		mov dx,0
  7333 000015C7 B80200              <3> 		mov ax,2
  7334 000015CA F7E1                <3> 		mul cx
  7335                              <3> 				
  7336 000015CC 807E0A00            <3> 		cmp byte [bp+0x0A],0
  7337 000015D0 7401                <3> 		jz .incremented2
  7338 000015D2 40                  <3> 			inc ax
  7339                              <3> 		.incremented2:
  7340                              <3> 				
  7341 000015D3 89C1                <3> 		mov cx,ax														
  7342                              <3> 		
  7343 000015D5 B8803F              <3> 		mov ax,0x3F80
  7344 000015D8 BB0000              <3> 		mov bx,0
  7345                              <3> 		
  7346                              <3> 		.l1.1:
  7347 000015DB 83F900              <3> 			cmp cx,0
  7348 000015DE 742C                <3> 			jz .l1.2
  7349 000015E0 51                  <3> 			push cx
  7350                              <3> 			
  7351 000015E1 8B4E02              <3> 			mov cx,[bp+2]
  7352 000015E4 8B5604              <3> 			mov dx,[bp+4]
  7353 000015E7 55                  <3> 			push bp	
  7354                              <3> 			__flmul ax, bx, cx, dx, ax, bx
  7355                              <4>  stkopen 0x0E
  7356 000015E8 83EC0E              <5>  sub word sp, %1
  7357 000015EB 54                  <5>  push sp
  7358 000015EC 5D                  <5>  pop bp
  7359 000015ED 894600              <4>  mov word [bp+0],%1
  7360 000015F0 895E02              <4>  mov word [bp+2],%2
  7361 000015F3 894E04              <4>  mov word [bp+4],%3
  7362 000015F6 895606              <4>  mov word [bp+6],%4
  7363 000015F9 E8A9F4              <4>  call proc_flmul
  7364 000015FC 54                  <4>  push sp
  7365 000015FD 5D                  <4>  pop bp
  7366 000015FE 8B4608              <4>  mov word %5,[bp+8]
  7367 00001601 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7368                              <4>  stkclose 0x0E
  7369 00001604 83C40E              <5>  add word sp, %1
  7370 00001607 5D                  <3> 			pop bp	
  7371                              <3> 							
  7372 00001608 59                  <3> 			pop cx
  7373 00001609 49                  <3> 			dec cx
  7374 0000160A EBCF                <3> 			jmp .l1.1
  7375                              <3> 		.l1.2: 
  7376                              <3> 					
  7377 0000160C 5A                  <3> 		pop dx
  7378 0000160D 59                  <3> 		pop cx
  7379                              <3> 		
  7380                              <3> 		__flmul ax, bx, cx, dx, ax, bx
  7381                              <4>  stkopen 0x0E
  7382 0000160E 83EC0E              <5>  sub word sp, %1
  7383 00001611 54                  <5>  push sp
  7384 00001612 5D                  <5>  pop bp
  7385 00001613 894600              <4>  mov word [bp+0],%1
  7386 00001616 895E02              <4>  mov word [bp+2],%2
  7387 00001619 894E04              <4>  mov word [bp+4],%3
  7388 0000161C 895606              <4>  mov word [bp+6],%4
  7389 0000161F E883F4              <4>  call proc_flmul
  7390 00001622 54                  <4>  push sp
  7391 00001623 5D                  <4>  pop bp
  7392 00001624 8B4608              <4>  mov word %5,[bp+8]
  7393 00001627 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7394                              <4>  stkclose 0x0E
  7395 0000162A 83C40E              <5>  add word sp, %1
  7396                              <3> 						
  7397 0000162D 89E1                <3> 		mov cx,sp
  7398 0000162F 89CD                <3> 		mov bp,cx
  7399 00001631 83C502              <3> 		add bp,2
  7400                              <3> 		
  7401 00001634 8B4E06              <3> 		mov cx,[bp+6]
  7402 00001637 8B5608              <3> 		mov dx,[bp+8]
  7403 0000163A 55                  <3> 		push bp
  7404                              <3> 		__fladd ax, bx, cx, dx, ax, bx		
  7405                              <4>  stkopen 0x0E
  7406 0000163B 83EC0E              <5>  sub word sp, %1
  7407 0000163E 54                  <5>  push sp
  7408 0000163F 5D                  <5>  pop bp
  7409 00001640 894600              <4>  mov word [bp+0],%1
  7410 00001643 895E02              <4>  mov word [bp+2],%2
  7411 00001646 894E04              <4>  mov word [bp+4],%3
  7412 00001649 895606              <4>  mov word [bp+6],%4
  7413 0000164C C7460C0000          <4>  mov word [bp+0x0C],0
  7414 00001651 E8FDF5              <4>  call proc_fladdorsub
  7415 00001654 54                  <4>  push sp
  7416 00001655 5D                  <4>  pop bp
  7417 00001656 8B4608              <4>  mov word %5,[bp+8]
  7418 00001659 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7419                              <4>  stkclose 0x0E
  7420 0000165C 83C40E              <5>  add word sp, %1
  7421 0000165F 5D                  <3> 		pop bp			
  7422 00001660 894606              <3> 		mov [bp+6],ax
  7423 00001663 895E08              <3> 		mov [bp+8],bx
  7424                              <3> 				
  7425 00001666 59                  <3> 		pop cx
  7426 00001667 41                  <3> 		inc cx
  7427 00001668 E986FE              <3> 		jmp .l1
  7428                              <3> 	.l2:			
  7429                              <3> 	
  7430 0000166B C3                  <3> 	ret
  7431                              <3> 	
  7432                              <3> 
  7433                              <3> proc_atan:
  7434 0000166C 89E0                <3> 	mov ax,sp
  7435 0000166E 89C5                <3> 	mov bp,ax 
  7436                              <3> 
  7437 00001670 C746060000          <3> 	mov word [bp+6],0
  7438 00001675 C746080000          <3> 	mov word [bp+8],0		
  7439                              <3> 	
  7440 0000167A B90000              <3> 	mov cx,0
  7441                              <3> 	.l1:
  7442 0000167D 83F903              <3> 		cmp cx,0x03
  7443 00001680 0F87CB00            <3> 		ja .l2		
  7444 00001684 51                  <3> 		push cx
  7445                              <3> 		
  7446 00001685 D1E1                <3> 		shl cx,1
  7447 00001687 41                  <3> 		inc cx
  7448 00001688 51                  <3> 		push cx
  7449                              <3> 								
  7450 00001689 B8803F              <3> 		mov ax,0x3F80	; 1.0 (alta)
  7451 0000168C BB0000              <3> 		mov bx,0x0000	; 1.0 (baixa)				
  7452                              <3> 		.l1.1:
  7453 0000168F 83F900              <3> 			cmp cx,0
  7454 00001692 742C                <3> 			jz .l1.2
  7455 00001694 51                  <3> 			push cx
  7456                              <3> 			
  7457 00001695 8B4E02              <3> 			mov cx,[bp+2]
  7458 00001698 8B5604              <3> 			mov dx,[bp+4]
  7459 0000169B 55                  <3> 			push bp	
  7460                              <3> 			__flmul ax, bx, cx, dx, ax, bx
  7461                              <4>  stkopen 0x0E
  7462 0000169C 83EC0E              <5>  sub word sp, %1
  7463 0000169F 54                  <5>  push sp
  7464 000016A0 5D                  <5>  pop bp
  7465 000016A1 894600              <4>  mov word [bp+0],%1
  7466 000016A4 895E02              <4>  mov word [bp+2],%2
  7467 000016A7 894E04              <4>  mov word [bp+4],%3
  7468 000016AA 895606              <4>  mov word [bp+6],%4
  7469 000016AD E8F5F3              <4>  call proc_flmul
  7470 000016B0 54                  <4>  push sp
  7471 000016B1 5D                  <4>  pop bp
  7472 000016B2 8B4608              <4>  mov word %5,[bp+8]
  7473 000016B5 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7474                              <4>  stkclose 0x0E
  7475 000016B8 83C40E              <5>  add word sp, %1
  7476 000016BB 5D                  <3> 			pop bp	
  7477                              <3> 							
  7478 000016BC 59                  <3> 			pop cx
  7479 000016BD 49                  <3> 			dec cx
  7480 000016BE EBCF                <3> 			jmp .l1.1
  7481                              <3> 		.l1.2:			
  7482                              <3> 		
  7483 000016C0 59                  <3> 		pop cx	
  7484 000016C1 50                  <3> 		push ax
  7485 000016C2 53                  <3> 		push bx
  7486                              <3> 				
  7487 000016C3 55                  <3> 		push bp
  7488                              <3> 		__int16tofl cx, cx, dx
  7489                              <4>  stkopen 0x06
  7490 000016C4 83EC06              <5>  sub word sp, %1
  7491 000016C7 54                  <5>  push sp
  7492 000016C8 5D                  <5>  pop bp
  7493 000016C9 894E00              <4>  mov word [bp+0],%1
  7494 000016CC E876EF              <4>  call proc_int16tofl
  7495 000016CF 54                  <4>  push sp
  7496 000016D0 5D                  <4>  pop bp
  7497 000016D1 8B4E02              <4>  mov word %2,[bp+2]
  7498 000016D4 8B5604              <4>  mov word %3,[bp+4]
  7499                              <4>  stkclose 0x06
  7500 000016D7 83C406              <5>  add word sp, %1
  7501 000016DA 5D                  <3> 		pop bp
  7502                              <3> 		
  7503 000016DB 5B                  <3> 		pop bx
  7504 000016DC 58                  <3> 		pop ax
  7505                              <3> 		
  7506 000016DD 55                  <3> 		push bp	
  7507                              <3> 		__fldiv ax, bx, cx, dx, ax, bx
  7508                              <4>  stkopen 0x0E
  7509 000016DE 83EC0E              <5>  sub word sp, %1
  7510 000016E1 54                  <5>  push sp
  7511 000016E2 5D                  <5>  pop bp
  7512 000016E3 894600              <4>  mov word [bp+0],%1
  7513 000016E6 895E02              <4>  mov word [bp+2],%2
  7514 000016E9 894E04              <4>  mov word [bp+4],%3
  7515 000016EC 895606              <4>  mov word [bp+6],%4
  7516 000016EF E894F2              <4>  call proc_fldiv
  7517 000016F2 54                  <4>  push sp
  7518 000016F3 5D                  <4>  pop bp
  7519 000016F4 8B4608              <4>  mov word %5,[bp+8]
  7520 000016F7 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7521                              <4>  stkclose 0x0E
  7522 000016FA 83C40E              <5>  add word sp, %1
  7523 000016FD 5D                  <3> 		pop bp
  7524                              <3> 				
  7525 000016FE 59                  <3> 		pop cx
  7526 000016FF 51                  <3> 		push cx		
  7527 00001700 83E101              <3> 		and cx,0x0001
  7528 00001703 83F900              <3> 		cmp cx,0
  7529 00001706 7410                <3> 		jz .endneg
  7530 00001708 89C1                <3> 			mov cx,ax	
  7531 0000170A 83C900              <3> 			or cx, 0x0000
  7532 0000170D F7D1                <3> 			not cx
  7533 0000170F 81E10080            <3> 			and cx,0x8000								
  7534 00001713 25FF7F              <3> 			and ax,0x7FFF			
  7535 00001716 01C8                <3> 			add ax,cx
  7536                              <3> 		.endneg:
  7537                              <3> 				
  7538 00001718 8B4E06              <3> 		mov cx,[bp+6]
  7539 0000171B 8B5608              <3> 		mov dx,[bp+8]
  7540 0000171E 55                  <3> 		push bp		
  7541                              <3> 		__fladd ax, bx, cx, dx, ax, bx
  7542                              <4>  stkopen 0x0E
  7543 0000171F 83EC0E              <5>  sub word sp, %1
  7544 00001722 54                  <5>  push sp
  7545 00001723 5D                  <5>  pop bp
  7546 00001724 894600              <4>  mov word [bp+0],%1
  7547 00001727 895E02              <4>  mov word [bp+2],%2
  7548 0000172A 894E04              <4>  mov word [bp+4],%3
  7549 0000172D 895606              <4>  mov word [bp+6],%4
  7550 00001730 C7460C0000          <4>  mov word [bp+0x0C],0
  7551 00001735 E819F5              <4>  call proc_fladdorsub
  7552 00001738 54                  <4>  push sp
  7553 00001739 5D                  <4>  pop bp
  7554 0000173A 8B4608              <4>  mov word %5,[bp+8]
  7555 0000173D 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7556                              <4>  stkclose 0x0E
  7557 00001740 83C40E              <5>  add word sp, %1
  7558 00001743 5D                  <3> 		pop bp
  7559 00001744 894606              <3> 		mov [bp+6], ax
  7560 00001747 895E08              <3> 		mov [bp+8], bx
  7561                              <3> 				
  7562 0000174A 59                  <3> 		pop cx
  7563 0000174B 41                  <3> 		inc cx
  7564 0000174C E92EFF              <3> 		jmp .l1
  7565                              <3> 	.l2:
  7566                              <3> 		
  7567 0000174F C3                  <3> 	ret
  7568                              <3> 	
  7569                              <3> proc__fat16:
  7570 00001750 89E0                <3> 	mov ax,sp
  7571 00001752 89C5                <3> 	mov bp,ax
  7572                              <3> 	
  7573 00001754 B90100              <3> 	mov cx,1
  7574 00001757 C746040100          <3> 	mov word [bp+4], 1
  7575                              <3> 	.l1:
  7576 0000175C 3B4E02              <3> 		cmp word cx,[bp+2]
  7577 0000175F 770D                <3> 		ja .l2
  7578                              <3> 		
  7579 00001761 31D2                <3> 		xor dx,dx
  7580 00001763 8B4604              <3> 		mov ax,[bp+4]
  7581 00001766 F7E9                <3> 		imul cx
  7582                              <3> 		
  7583 00001768 894604              <3> 		mov [bp+4],ax
  7584                              <3> 		
  7585 0000176B 41                  <3> 		inc cx
  7586 0000176C EBEE                <3> 		jmp .l1
  7587                              <3> 	.l2:
  7588                              <3> 	
  7589 0000176E C3                  <3> 	ret
  7590                              <3> 		
  7591                              <3> proc__pow16:
  7592 0000176F 89E0                <3> 	mov ax,sp
  7593 00001771 89C5                <3> 	mov bp,ax
  7594                              <3> 	
  7595 00001773 8B4E04              <3> 	mov cx,[bp+4]
  7596 00001776 C746060100          <3> 	mov word [bp+6], 1	
  7597                              <3> 	.l1:
  7598 0000177B 83F900              <3> 		cmp cx,0
  7599 0000177E 740E                <3> 		jz .l2
  7600                              <3> 		
  7601 00001780 31D2                <3> 		xor dx,dx
  7602 00001782 8B4602              <3> 		mov ax,[bp+2]
  7603 00001785 F76E06              <3> 		imul word [bp+6]
  7604                              <3> 		
  7605 00001788 894606              <3> 		mov [bp+6],ax
  7606                              <3> 		
  7607 0000178B 49                  <3> 		dec cx
  7608 0000178C EBED                <3> 		jmp .l1
  7609                              <3> 	.l2:
  7610                              <3> 		
  7611 0000178E C3                  <3> 	ret
  7612                              <3> 	
  7613                              <3> proc__sinnorm:
  7614 0000178F 89E0                <3> 	mov ax,sp
  7615 00001791 89C5                <3> 	mov bp,ax
  7616                              <3> 	
  7617 00001793 8B4602              <3> 	mov ax,[bp+2]
  7618 00001796 8B5E04              <3> 	mov bx,[bp+4]
  7619                              <3> 	
  7620                              <3> 	__norm_factors ax, bx, ax, bx, cx
  7621                              <4>  stkopen 0x0A
  7622 00001799 83EC0A              <5>  sub word sp, %1
  7623 0000179C 54                  <5>  push sp
  7624 0000179D 5D                  <5>  pop bp
  7625 0000179E 894600              <4>  mov word [bp+0],%1
  7626 000017A1 895E02              <4>  mov word [bp+2],%2
  7627 000017A4 E83601              <4>  call proc__norm_factors
  7628 000017A7 54                  <4>  push sp
  7629 000017A8 5D                  <4>  pop bp
  7630 000017A9 8B4604              <4>  mov word %3,[bp+4]
  7631 000017AC 8B5E06              <4>  mov word %4,[bp+6]
  7632 000017AF 8B4E08              <4>  mov word %5,[bp+8]
  7633                              <4>  stkclose 0x0A
  7634 000017B2 83C40A              <5>  add word sp, %1
  7635                              <3> 
  7636 000017B5 51                  <3> 	push cx	; factor (phi/PI)
  7637                              <3> 		
  7638 000017B6 B9C93F              <3> 	mov cx,0x3FC9 ; PI/2 (high)
  7639 000017B9 BADB0F              <3> 	mov dx,0x0FDB ; PI/2 (low)
  7640                              <3> 	
  7641 000017BC 50                  <3> 	push ax
  7642 000017BD 53                  <3> 	push bx
  7643                              <3> 	__cmp32 ax, bx, cx, dx, cl
  7644                              <4>  stkopen 9
  7645 000017BE 83EC09              <5>  sub word sp, %1
  7646 000017C1 54                  <5>  push sp
  7647 000017C2 5D                  <5>  pop bp
  7648 000017C3 894600              <4>  mov word [bp+0], %1
  7649 000017C6 895E02              <4>  mov word [bp+2], %2
  7650 000017C9 894E04              <4>  mov word [bp+4], %3
  7651 000017CC 895606              <4>  mov word [bp+6], %4
  7652 000017CF E88BEB              <4>  call proc_cmp32
  7653 000017D2 54                  <4>  push sp
  7654 000017D3 5D                  <4>  pop bp
  7655 000017D4 8A4E08              <4>  mov byte %5, [bp+8]
  7656                              <4>  stkclose 9
  7657 000017D7 83C409              <5>  add word sp, %1
  7658 000017DA 5B                  <3> 	pop bx
  7659 000017DB 58                  <3> 	pop ax
  7660 000017DC 80F900              <3> 	cmp cl,0
  7661 000017DF 7E2A                <3> 	jle .l1
  7662 000017E1 B94940              <3> 		mov cx,0x4049 ; PI (high)
  7663 000017E4 BADB0F              <3> 		mov dx,0x0FDB ; PI (low)
  7664                              <3> 		__flsub cx, dx, ax, bx, ax, bx				
  7665                              <4>  stkopen 0x0E
  7666 000017E7 83EC0E              <5>  sub word sp, %1
  7667 000017EA 54                  <5>  push sp
  7668 000017EB 5D                  <5>  pop bp
  7669 000017EC 894E00              <4>  mov word [bp+0],%1
  7670 000017EF 895602              <4>  mov word [bp+2],%2
  7671 000017F2 894604              <4>  mov word [bp+4],%3
  7672 000017F5 895E06              <4>  mov word [bp+6],%4
  7673 000017F8 C7460C0080          <4>  mov word [bp+0x0C],0x8000
  7674 000017FD E851F4              <4>  call proc_fladdorsub
  7675 00001800 54                  <4>  push sp
  7676 00001801 5D                  <4>  pop bp
  7677 00001802 8B4608              <4>  mov word %5,[bp+8]
  7678 00001805 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7679                              <4>  stkclose 0x0E
  7680 00001808 83C40E              <5>  add word sp, %1
  7681                              <3> 	.l1:
  7682                              <3> 				
  7683 0000180B 59                  <3> 	pop cx
  7684                              <3> 
  7685 0000180C 89E2                <3> 	mov dx,sp
  7686 0000180E 89D5                <3> 	mov bp,dx
  7687 00001810 8B5602              <3> 	mov dx,[bp+2]
  7688 00001813 81E20080            <3> 	and dx,0x8000
  7689                              <3> 		
  7690 00001817 83FA00              <3> 	cmp dx,0
  7691 0000181A 7D01                <3> 	jge .l2
  7692 0000181C 41                  <3> 		inc cx		
  7693                              <3> 	.l2:	
  7694                              <3> 			
  7695 0000181D BAFF7F              <3> 	mov dx,0x7FFF
  7696 00001820 83E101              <3> 	and cx,0x0001
  7697 00001823 83F900              <3> 	cmp cx,0
  7698 00001826 7403                <3> 	jz .l3
  7699 00001828 BA0080              <3> 		mov dx,0x8000
  7700                              <3> 	.l3:
  7701                              <3> 					
  7702 0000182B 894602              <3> 	mov [bp+2],ax
  7703 0000182E 895E04              <3> 	mov [bp+4],bx
  7704 00001831 895606              <3> 	mov [bp+6],dx
  7705                              <3> 	
  7706 00001834 C3                  <3> 	ret	
  7707                              <3> 	
  7708                              <3> proc__cosnorm:
  7709 00001835 89E0                <3> 	mov ax,sp
  7710 00001837 89C5                <3> 	mov bp,ax
  7711                              <3> 	
  7712 00001839 8B4602              <3> 	mov ax,[bp+2]
  7713 0000183C 8B5E04              <3> 	mov bx,[bp+4]
  7714                              <3> 	
  7715                              <3> 	__norm_factors ax, bx, ax, bx, cx
  7716                              <4>  stkopen 0x0A
  7717 0000183F 83EC0A              <5>  sub word sp, %1
  7718 00001842 54                  <5>  push sp
  7719 00001843 5D                  <5>  pop bp
  7720 00001844 894600              <4>  mov word [bp+0],%1
  7721 00001847 895E02              <4>  mov word [bp+2],%2
  7722 0000184A E89000              <4>  call proc__norm_factors
  7723 0000184D 54                  <4>  push sp
  7724 0000184E 5D                  <4>  pop bp
  7725 0000184F 8B4604              <4>  mov word %3,[bp+4]
  7726 00001852 8B5E06              <4>  mov word %4,[bp+6]
  7727 00001855 8B4E08              <4>  mov word %5,[bp+8]
  7728                              <4>  stkclose 0x0A
  7729 00001858 83C40A              <5>  add word sp, %1
  7730                              <3> 
  7731 0000185B 51                  <3> 	push cx		; fator2 (phi/PI)
  7732                              <3> 	
  7733 0000185C B9C93F              <3> 	mov cx,0x3FC9 ; PI/2 (high)
  7734 0000185F BADB0F              <3> 	mov dx,0x0FDB ; PI/2 (low)
  7735                              <3> 		
  7736 00001862 50                  <3> 	push ax
  7737 00001863 53                  <3> 	push bx
  7738                              <3> 	__cmp32 ax, bx, cx, dx, cl
  7739                              <4>  stkopen 9
  7740 00001864 83EC09              <5>  sub word sp, %1
  7741 00001867 54                  <5>  push sp
  7742 00001868 5D                  <5>  pop bp
  7743 00001869 894600              <4>  mov word [bp+0], %1
  7744 0000186C 895E02              <4>  mov word [bp+2], %2
  7745 0000186F 894E04              <4>  mov word [bp+4], %3
  7746 00001872 895606              <4>  mov word [bp+6], %4
  7747 00001875 E8E5EA              <4>  call proc_cmp32
  7748 00001878 54                  <4>  push sp
  7749 00001879 5D                  <4>  pop bp
  7750 0000187A 8A4E08              <4>  mov byte %5, [bp+8]
  7751                              <4>  stkclose 9
  7752 0000187D 83C409              <5>  add word sp, %1
  7753 00001880 5B                  <3> 	pop bx
  7754 00001881 58                  <3> 	pop ax
  7755                              <3> 		
  7756 00001882 51                  <3> 	push cx
  7757 00001883 80F900              <3> 	cmp cl,0
  7758 00001886 7E2A                <3> 	jle .l1
  7759 00001888 B94940              <3> 		mov cx,0x4049 ; PI (high)
  7760 0000188B BADB0F              <3> 		mov dx,0x0FDB ; PI (low)
  7761                              <3> 		__flsub cx, dx, ax, bx, ax, bx	
  7762                              <4>  stkopen 0x0E
  7763 0000188E 83EC0E              <5>  sub word sp, %1
  7764 00001891 54                  <5>  push sp
  7765 00001892 5D                  <5>  pop bp
  7766 00001893 894E00              <4>  mov word [bp+0],%1
  7767 00001896 895602              <4>  mov word [bp+2],%2
  7768 00001899 894604              <4>  mov word [bp+4],%3
  7769 0000189C 895E06              <4>  mov word [bp+6],%4
  7770 0000189F C7460C0080          <4>  mov word [bp+0x0C],0x8000
  7771 000018A4 E8AAF3              <4>  call proc_fladdorsub
  7772 000018A7 54                  <4>  push sp
  7773 000018A8 5D                  <4>  pop bp
  7774 000018A9 8B4608              <4>  mov word %5,[bp+8]
  7775 000018AC 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7776                              <4>  stkclose 0x0E
  7777 000018AF 83C40E              <5>  add word sp, %1
  7778                              <3> 	.l1:
  7779                              <3> 						
  7780 000018B2 59                  <3> 	pop cx	; quadrante2 (true, false)
  7781 000018B3 5A                  <3> 	pop dx	; fator2 (phi/PI)
  7782                              <3> 
  7783 000018B4 54                  <3> 	push sp
  7784 000018B5 5D                  <3> 	pop bp		
  7785 000018B6 894602              <3> 	mov [bp+2],ax	
  7786 000018B9 895E04              <3> 	mov [bp+4],bx
  7787                              <3> 	
  7788 000018BC B8FF7F              <3> 	mov ax,0x7FFF
  7789                              <3> 	
  7790 000018BF 83E201              <3> 	and dx,0x0001
  7791 000018C2 83FA00              <3> 	cmp dx,0
  7792 000018C5 750A                <3> 	jnz .fimpar
  7793 000018C7 80F900              <3> 		cmp cl,0
  7794 000018CA 7C0D                <3> 		jl .endf		
  7795 000018CC B80080              <3> 			mov ax,0x8000			
  7796 000018CF EB08                <3> 		jmp .endf
  7797                              <3> 	.fimpar:		
  7798 000018D1 80F900              <3> 		cmp cl,0
  7799 000018D4 7D03                <3> 		jge .endf
  7800 000018D6 B80080              <3> 			mov ax,0x8000
  7801                              <3> 	.endf:		
  7802                              <3> 						
  7803 000018D9 894606              <3> 	mov word [bp+6],ax
  7804                              <3> 	
  7805 000018DC C3                  <3> 	ret
  7806                              <3> 	
  7807                              <3> proc__norm_factors: ; f1=(phi%PI) --> float 32bits, f2=(phi/PI) --> int 16bits
  7808 000018DD 89E0                <3> 	mov ax,sp
  7809 000018DF 89C5                <3> 	mov bp,ax
  7810                              <3> 	
  7811 000018E1 8B4602              <3> 	mov ax,[bp+2]
  7812 000018E4 8B5E04              <3> 	mov bx,[bp+4]	
  7813 000018E7 25FF7F              <3> 	and ax,0x7FFF
  7814                              <3> 		
  7815 000018EA B94940              <3> 	mov cx,0x4049 ; PI (high)
  7816 000018ED BADB0F              <3> 	mov dx,0x0FDB ; PI (low)
  7817                              <3> 
  7818 000018F0 55                  <3> 	push bp
  7819                              <3> 	__fldiv ax, bx, cx, dx, ax, bx		
  7820                              <4>  stkopen 0x0E
  7821 000018F1 83EC0E              <5>  sub word sp, %1
  7822 000018F4 54                  <5>  push sp
  7823 000018F5 5D                  <5>  pop bp
  7824 000018F6 894600              <4>  mov word [bp+0],%1
  7825 000018F9 895E02              <4>  mov word [bp+2],%2
  7826 000018FC 894E04              <4>  mov word [bp+4],%3
  7827 000018FF 895606              <4>  mov word [bp+6],%4
  7828 00001902 E881F0              <4>  call proc_fldiv
  7829 00001905 54                  <4>  push sp
  7830 00001906 5D                  <4>  pop bp
  7831 00001907 8B4608              <4>  mov word %5,[bp+8]
  7832 0000190A 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7833                              <4>  stkclose 0x0E
  7834 0000190D 83C40E              <5>  add word sp, %1
  7835                              <3> 	__fltoint16 ax, bx, ax
  7836                              <4>  stkopen 0x06
  7837 00001910 83EC06              <5>  sub word sp, %1
  7838 00001913 54                  <5>  push sp
  7839 00001914 5D                  <5>  pop bp
  7840 00001915 894600              <4>  mov word [bp+0],%1
  7841 00001918 895E02              <4>  mov word [bp+2],%2
  7842 0000191B E8A5EC              <4>  call proc_fltoint16
  7843 0000191E 54                  <4>  push sp
  7844 0000191F 5D                  <4>  pop bp
  7845 00001920 8B4604              <4>  mov word %3,[bp+4]
  7846                              <4>  stkclose 0x06
  7847 00001923 83C406              <5>  add word sp, %1
  7848 00001926 5D                  <3> 	pop bp
  7849                              <3> 		
  7850 00001927 50                  <3> 	push ax		; fator
  7851                              <3> 		
  7852 00001928 55                  <3> 	push bp
  7853                              <3> 	__int16tofl	ax, ax, bx	
  7854                              <4>  stkopen 0x06
  7855 00001929 83EC06              <5>  sub word sp, %1
  7856 0000192C 54                  <5>  push sp
  7857 0000192D 5D                  <5>  pop bp
  7858 0000192E 894600              <4>  mov word [bp+0],%1
  7859 00001931 E811ED              <4>  call proc_int16tofl
  7860 00001934 54                  <4>  push sp
  7861 00001935 5D                  <4>  pop bp
  7862 00001936 8B4602              <4>  mov word %2,[bp+2]
  7863 00001939 8B5E04              <4>  mov word %3,[bp+4]
  7864                              <4>  stkclose 0x06
  7865 0000193C 83C406              <5>  add word sp, %1
  7866                              <3> 	
  7867 0000193F B94940              <3> 	mov cx,0x4049 ; PI (high)
  7868 00001942 BADB0F              <3> 	mov dx,0x0FDB ; PI (low)
  7869                              <3> 	__flmul ax, bx, cx, dx, ax, bx		
  7870                              <4>  stkopen 0x0E
  7871 00001945 83EC0E              <5>  sub word sp, %1
  7872 00001948 54                  <5>  push sp
  7873 00001949 5D                  <5>  pop bp
  7874 0000194A 894600              <4>  mov word [bp+0],%1
  7875 0000194D 895E02              <4>  mov word [bp+2],%2
  7876 00001950 894E04              <4>  mov word [bp+4],%3
  7877 00001953 895606              <4>  mov word [bp+6],%4
  7878 00001956 E84CF1              <4>  call proc_flmul
  7879 00001959 54                  <4>  push sp
  7880 0000195A 5D                  <4>  pop bp
  7881 0000195B 8B4608              <4>  mov word %5,[bp+8]
  7882 0000195E 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7883                              <4>  stkclose 0x0E
  7884 00001961 83C40E              <5>  add word sp, %1
  7885 00001964 5D                  <3> 	pop bp
  7886                              <3> 	
  7887 00001965 8B4E02              <3> 	mov cx,[bp+2]
  7888 00001968 8B5604              <3> 	mov dx,[bp+4]
  7889 0000196B 81E1FF7F            <3> 	and cx,0x7FFF
  7890                              <3> 		
  7891                              <3> 	__flsub cx, dx, ax, bx, ax, bx 			; theta -> ax bx
  7892                              <4>  stkopen 0x0E
  7893 0000196F 83EC0E              <5>  sub word sp, %1
  7894 00001972 54                  <5>  push sp
  7895 00001973 5D                  <5>  pop bp
  7896 00001974 894E00              <4>  mov word [bp+0],%1
  7897 00001977 895602              <4>  mov word [bp+2],%2
  7898 0000197A 894604              <4>  mov word [bp+4],%3
  7899 0000197D 895E06              <4>  mov word [bp+6],%4
  7900 00001980 C7460C0080          <4>  mov word [bp+0x0C],0x8000
  7901 00001985 E8C9F2              <4>  call proc_fladdorsub
  7902 00001988 54                  <4>  push sp
  7903 00001989 5D                  <4>  pop bp
  7904 0000198A 8B4608              <4>  mov word %5,[bp+8]
  7905 0000198D 8B5E0A              <4>  mov word %6,[bp+0x0A]
  7906                              <4>  stkclose 0x0E
  7907 00001990 83C40E              <5>  add word sp, %1
  7908                              <3> 	
  7909 00001993 59                  <3> 	pop cx				
  7910                              <3> 		
  7911 00001994 89E2                <3> 	mov dx,sp
  7912 00001996 89D5                <3> 	mov bp,dx	
  7913 00001998 894606              <3> 	mov [bp+6],ax
  7914 0000199B 895E08              <3> 	mov [bp+8],bx
  7915 0000199E 894E0A              <3> 	mov [bp+0x0A],cx
  7916                              <3> 		
  7917 000019A1 C3                  <3> 	ret
  7918                              <3> 	
  7919                              <3> %endif
  7920                              <2> 	
  7921                              <2> %macro to0x360 1
  7922                              <2> 	to0x360 %1, %1
  7923                              <2> %endmacro
  7924                              <2> 
  7925                              <2> %macro to0x360 2
  7926                              <2> 	to0x360 cs, %1, cs, %2
  7927                              <2> %endmacro
  7928                              <2> 
  7929                              <2> %macro toradians 1
  7930                              <2> 	toradians %1, %1
  7931                              <2> %endmacro
  7932                              <2> 
  7933                              <2> %macro todegrees 1
  7934                              <2> 	todegrees %1, %1
  7935                              <2> %endmacro
  7936                              <2> 
  7937                              <2> %macro toradians 2
  7938                              <2> 	toradians cs, %1, cs, %2
  7939                              <2> %endmacro
  7940                              <2> 	
  7941                              <2> %macro todegrees 2
  7942                              <2> 	todegrees cs, %1, cs, %2
  7943                              <2> %endmacro	
  7944                              <2> 	
  7945                              <2> %macro atan 1
  7946                              <2> 	atan %1, %1
  7947                              <2> %endmacro	
  7948                              <2> 	
  7949                              <2> %macro atan 2
  7950                              <2> 	atan cs, %1, cs, %2
  7951                              <2> %endmacro	
  7952                              <2> 	
  7953                              <2> %macro sin 1
  7954                              <2> 	sin %1, %1
  7955                              <2> %endmacro	
  7956                              <2> 	
  7957                              <2> %macro sin 2
  7958                              <2> 	sin cs, %1, cs, %2
  7959                              <2> %endmacro
  7960                              <2> 
  7961                              <2> %macro cos 1
  7962                              <2> 	cos %1, %1
  7963                              <2> %endmacro	
  7964                              <2> 	
  7965                              <2> %macro cos 2
  7966                              <2> 	cos cs, %1, cs, %2
  7967                              <2> %endmacro		
  7968                              <2> 	
  7969                              <2> %macro sin 4
  7970                              <2> 	sinorcos %1, %2, %3, %4, 1
  7971                              <2> %endmacro
  7972                              <2> 
  7973                              <2> %macro cos 4
  7974                              <2> 	sinorcos %1, %2, %3, %4, 0
  7975                              <2> %endmacro
  7976                              <2> 
  7977                              <2> %macro to0x360 4
  7978                              <2> 	stkopen 0x08
  7979                              <2> 	mov ax,%1
  7980                              <2> 	mov ds,ax
  7981                              <2> 	mov ax,[%2+2]
  7982                              <2> 	mov [bp+0],ax
  7983                              <2> 	mov ax,[%2]
  7984                              <2> 	mov [bp+2],ax
  7985                              <2> 	call proc_to0x360
  7986                              <2> 	mov ax,sp
  7987                              <2> 	mov bp,ax
  7988                              <2> 	mov ax,%3
  7989                              <2> 	mov ds,ax
  7990                              <2> 	mov ax,[bp+4]
  7991                              <2> 	mov [%4+2],ax
  7992                              <2> 	mov ax,[bp+6]
  7993                              <2> 	mov [%4],ax
  7994                              <2> 	stkclose 0x08
  7995                              <2> %endmacro	
  7996                              <2> 
  7997                              <2> %macro toradians 4
  7998                              <2> 	stkopen 0x08
  7999                              <2> 	mov ax,%1
  8000                              <2> 	mov ds,ax
  8001                              <2> 	mov ax,[%2+2]
  8002                              <2> 	mov [bp+0],ax
  8003                              <2> 	mov ax,[%2]
  8004                              <2> 	mov [bp+2],ax
  8005                              <2> 	call proc_toradians
  8006                              <2> 	mov ax,sp
  8007                              <2> 	mov bp,ax
  8008                              <2> 	mov ax,%3
  8009                              <2> 	mov ds,ax
  8010                              <2> 	mov ax,[bp+4]
  8011                              <2> 	mov [%4+2],ax
  8012                              <2> 	mov ax,[bp+6]
  8013                              <2> 	mov [%4],ax
  8014                              <2> 	stkclose 0x08
  8015                              <2> %endmacro	
  8016                              <2> 
  8017                              <2> %macro todegrees 4
  8018                              <2> 	stkopen 0x08
  8019                              <2> 	mov ax,%1
  8020                              <2> 	mov ds,ax
  8021                              <2> 	mov ax,[%2+2]
  8022                              <2> 	mov [bp+0],ax
  8023                              <2> 	mov ax,[%2]
  8024                              <2> 	mov [bp+2],ax
  8025                              <2> 	call proc_todegrees
  8026                              <2> 	mov ax,sp
  8027                              <2> 	mov bp,ax
  8028                              <2> 	mov ax,%3
  8029                              <2> 	mov ds,ax
  8030                              <2> 	mov ax,[bp+4]
  8031                              <2> 	mov [%4+2],ax
  8032                              <2> 	mov ax,[bp+6]
  8033                              <2> 	mov [%4],ax
  8034                              <2> 	stkclose 0x08
  8035                              <2> %endmacro	
  8036                              <2> 
  8037                              <2> %macro atan 4
  8038                              <2> 	stkopen 0x08
  8039                              <2> 	mov ax,%1
  8040                              <2> 	mov ds,ax
  8041                              <2> 	mov ax,[%2+2]
  8042                              <2> 	mov [bp+0],ax
  8043                              <2> 	mov ax,[%2]
  8044                              <2> 	mov [bp+2],ax
  8045                              <2> 	call proc_atan
  8046                              <2> 	mov ax,sp
  8047                              <2> 	mov bp,ax
  8048                              <2> 	mov ax,%3
  8049                              <2> 	mov ds,ax
  8050                              <2> 	mov ax,[bp+4]
  8051                              <2> 	mov [%4+2],ax
  8052                              <2> 	mov ax,[bp+6]
  8053                              <2> 	mov [%4],ax
  8054                              <2> 	stkclose 0x08
  8055                              <2> %endmacro
  8056                              <2> 	
  8057                              <2> %macro sinorcos 5
  8058                              <2> 	stkopen 0x09
  8059                              <2> 	mov ax,%1
  8060                              <2> 	mov ds,ax
  8061                              <2> 	mov ax,[%2+2]
  8062                              <2> 	mov [bp+0],ax
  8063                              <2> 	mov ax,[%2]
  8064                              <2> 	mov [bp+2],ax
  8065                              <2> 	mov byte [bp+8],%5	
  8066                              <2> 	call proc_sinorcos
  8067                              <2> 	mov ax,sp
  8068                              <2> 	mov bp,ax
  8069                              <2> 	mov ax,%3
  8070                              <2> 	mov ds,ax
  8071                              <2> 	mov ax,[bp+4]
  8072                              <2> 	mov [%4+2],ax
  8073                              <2> 	mov ax,[bp+6]
  8074                              <2> 	mov [%4],ax
  8075                              <2> 	stkclose 0x09
  8076                              <2> %endmacro
  8077                              <2> 	
  8078                              <2> %endif
  8079                              <1> 
  8080                              <1> 	%include "src/lib/constants.asm"
  8081                              <2> %ifndef CONSTANTS_ASM
  8082                              <2> 	%define CONSTANTS_ASM
  8083                              <2> 					
  8084                              <2> section .data
  8085 000019A2 00000000            <2> 	__FL_ZERO: dd 0
  8086 000019A6 0000803F            <2> 	__FL_ONE: dd 0x3F800000
  8087 000019AA 000080BF            <2> 	__FL_NEG_ONE: dd 0xBF800000
  8088                              <2> 
  8089 000019AE 0000                <2> 	__ZERO: dw 0
  8090 000019B0 0100                <2> 	__ONE: dw 1
  8091                              <2> 		
  8092 000019B2 09                  <2> 	__ball_color: db 09h
  8093 000019B3 07                  <2> 	__ball_bordercolor: db 07h
  8094                              <2> 	
  8095 000019B4 00                  <2> 	__tray_color: db 00h
  8096 000019B5 07                  <2> 	__tray_bordercolor: db 07h	
  8097                              <2> 	
  8098 000019B6 07                  <2> 	__square_bordercolor: db 07h
  8099 000019B7 01020409            <2> 	__square_ycolor: db 0x01, 0x02, 0x04, 0x09
  8100                              <2> 	
  8101 000019BB 09                  <2> 	__racket_color: db 09h
  8102 000019BC 07                  <2> 	__racket_bordercolor: db 07h	
  8103                              <2> 	
  8104 000019BD 07                  <2> 	__message_default_color: db 07h	
  8105 000019BE 09                  <2> 	__message_win_color: db 09h	
  8106 000019BF 04                  <2> 	__message_lose_color: db 04h	
  8107                              <2> 								
  8108                              <2> %endif
  8109                              <1> 	%include "src/lib/tray.mac"
  8110                              <2> %ifndef TRAY_MAC
  8111                              <2> 	%define TRAY_MAC
  8112                              <2> 			
  8113                              <2> 	%include "lib/system.mac"
  8114                              <3>  
  8115                              <3> %ifndef SYSTEM_MAC
  8116                              <3>  	%define SYSTEM_MAC
  8117                              <3>  	
  8118                              <3> 	%ifndef TRUE
  8119                              <3> 		%define TRUE 01h
  8120                              <3> 	%endif
  8121                              <3> 	%ifndef FALSE
  8122                              <3> 		%define FALSE 00h
  8123                              <3> 	%endif
  8124                              <3> 	
  8125                              <3> %macro vlodsb 3
  8126                              <3> 	vlodsb cs, %1, %2, %3
  8127                              <3> %endmacro
  8128                              <3> 
  8129                              <3> %macro vstosb 3
  8130                              <3> 	vstosb cs, %1, %2, %3
  8131                              <3> %endmacro
  8132                              <3> 	 	
  8133                              <3> %macro int16toreg 2
  8134                              <3> 	int16toreg cs, %1, %2
  8135                              <3> %endmacro
  8136                              <3> 
  8137                              <3> %macro regtoint16 2
  8138                              <3> 	regtoint16 %1, cs, %2
  8139                              <3> %endmacro
  8140                              <3> 
  8141                              <3> %macro vstosb 4
  8142                              <3> 	push %1
  8143                              <3> 	pop ds
  8144                              <3> 	mov si,%2
  8145                              <3> 	add si,%3
  8146                              <3> 	mov byte [si],%4	
  8147                              <3> %endmacro
  8148                              <3> 
  8149                              <3> %macro vlodsb 4
  8150                              <3> 	push %1
  8151                              <3> 	pop ds
  8152                              <3> 	mov si,%2
  8153                              <3> 	add si,%3
  8154                              <3> 	mov byte %4,[si]	
  8155                              <3> %endmacro 	 
  8156                              <3> 
  8157                              <3> %macro int16toreg 3
  8158                              <3> 	push %2
  8159                              <3> 	push %1
  8160                              <3> 	pop ds
  8161                              <3> 	pop si
  8162                              <3> 	mov word %3,[si]	
  8163                              <3> %endmacro
  8164                              <3> 
  8165                              <3> %macro regtoint16 3
  8166                              <3> 	push %3
  8167                              <3> 	push %2
  8168                              <3> 	pop ds
  8169                              <3> 	pop si
  8170                              <3> 	mov word [si],%1	
  8171                              <3> %endmacro
  8172                              <3> 
  8173                              <3> %macro mov32 2
  8174                              <3> 	mov32 cs, %1, cs, %2
  8175                              <3> %endmacro
  8176                              <3> 
  8177                              <3> %macro mov16 2
  8178                              <3> 	mov16 cs, %1, cs, %2
  8179                              <3> %endmacro
  8180                              <3> 
  8181                              <3> %macro mov32 4
  8182                              <3> 	mov ax,%3
  8183                              <3> 	mov ds,ax
  8184                              <3> 	mov cx,[%4+2]
  8185                              <3> 	mov dx,[%4]
  8186                              <3> 	mov ax,%1
  8187                              <3> 	mov ds,ax
  8188                              <3> 	mov [%2+2],cx
  8189                              <3> 	mov [%2],dx
  8190                              <3> %endmacro
  8191                              <3> 
  8192                              <3> %macro mov16 4
  8193                              <3> 	mov ax,%3
  8194                              <3> 	mov ds,ax
  8195                              <3> 	mov bx,[%4]
  8196                              <3> 	mov ax,%1
  8197                              <3> 	mov ds,ax
  8198                              <3> 	mov [%2],bx
  8199                              <3> %endmacro
  8200                              <3>  	 	
  8201                              <3> %macro mformat 4
  8202                              <3> 	stkopen 8
  8203                              <3> 	mov word [ bp + 0 ], %1
  8204                              <3> 	mov word [ bp + 2 ], %2
  8205                              <3> 	mov word [ bp + 4 ], %3
  8206                              <3> 	mov word [ bp + 6 ], %4
  8207                              <3> 	call kernel_segment:mformat
  8208                              <3> 	stkclose 8
  8209                              <3> %endmacro
  8210                              <3> 
  8211                              <3> %macro malloc 6
  8212                              <3> 	stkopen 0Bh
  8213                              <3> 	mov word [ bp + 4 ], %3
  8214                              <3> 	mov word [ bp + 6 ], %4
  8215                              <3> 	mov word [ bp + 8 ], %5	
  8216                              <3> 	call kernel_segment:malloc
  8217                              <3> 	push sp
  8218                              <3> 	pop bp
  8219                              <3> 	mov word %1, [ bp ]
  8220                              <3> 	mov word %2, [ bp + 2 ]
  8221                              <3> 	mov byte %6, [ bp + 0x0A ]
  8222                              <3> 	stkclose 0Bh
  8223                              <3> %endmacro 	
  8224                              <3> 
  8225                              <3> %macro laddr 2
  8226                              <3> 	laddr %1, %2, %1, %2
  8227                              <3> %endmacro
  8228                              <3> 
  8229                              <3> %macro faddr 2
  8230                              <3> 	faddr %1, %2, %1, %2
  8231                              <3> %endmacro
  8232                              <3>  	
  8233                              <3> %macro laddr 4
  8234                              <3> 	stkopen 8
  8235                              <3> 	mov word [ bp + 4 ], %3
  8236                              <3> 	mov word [ bp + 6 ], %4	
  8237                              <3> 	call kernel_segment:laddr
  8238                              <3> 	push sp
  8239                              <3> 	pop bp
  8240                              <3> 	mov word %1, [ bp + 0 ]
  8241                              <3> 	mov word %2, [ bp + 2 ]	
  8242                              <3> 	stkclose 8
  8243                              <3> %endmacro
  8244                              <3> 
  8245                              <3> %macro faddr 4
  8246                              <3> 	stkopen 8
  8247                              <3> 	mov word [ bp + 4 ], %3
  8248                              <3> 	mov word [ bp + 6 ], %4	
  8249                              <3> 	call kernel_segment:faddr
  8250                              <3> 	push sp
  8251                              <3> 	pop bp
  8252                              <3> 	mov word %1, [ bp + 0 ]
  8253                              <3> 	mov word %2, [ bp + 2 ]	
  8254                              <3> 	stkclose 8
  8255                              <3> %endmacro	
  8256                              <3>  
  8257                              <3> 
  8258                              <3> %macro stkopen 1		
  8259                              <3> 	sub word sp, %1
  8260                              <3> 	push sp
  8261                              <3> 	pop bp
  8262                              <3> %endmacro
  8263                              <3> 
  8264                              <3> %macro stkclose 1
  8265                              <3> 	add word sp, %1
  8266                              <3> %endmacro
  8267                              <3> 
  8268                              <3> %macro stkload 1-* 	
  8269                              <3>  	%rep %0
  8270                              <3>  	 	%rotate -1
  8271                              <3>  		pop %1
  8272                              <3>  	%endrep
  8273                              <3>  	%rep %0
  8274                              <3>  		push %1
  8275                              <3>  		%rotate 1
  8276                              <3>  	%endrep
  8277                              <3> %endmacro
  8278                              <3> 
  8279                              <3> %macro stkpush 1-* 	
  8280                              <3>  	%rep %0
  8281                              <3>  		push %1
  8282                              <3>  		%rotate 1
  8283                              <3>  	%endrep 	
  8284                              <3> %endmacro
  8285                              <3>  
  8286                              <3> %macro stkpop 1-*
  8287                              <3>  	%rep %0
  8288                              <3>  	 	%rotate -1
  8289                              <3>  		pop %1
  8290                              <3>  	%endrep 	 	
  8291                              <3> %endmacro
  8292                              <3> 
  8293                              <3> %macro delay 1
  8294                              <3> 	delay cs, %1
  8295                              <3> %endmacro
  8296                              <3> 
  8297                              <3> %macro delay 2
  8298                              <3> 	mov ax,%1
  8299                              <3> 	mov ds,ax
  8300                              <3> 	
  8301                              <3> 	mov ah,86h
  8302                              <3> 	mov cx,[%2+2]
  8303                              <3> 	mov dx,[%2]
  8304                              <3> 	int 15h	
  8305                              <3> %endmacro
  8306                              <3> 
  8307                              <3> %endif 
  8308                              <2> 	%include "lib/math.mac"
  8309                              <3> 
  8310                              <3> %ifndef MATH_MAC
  8311                              <3> 	%define MATH_MAC
  8312                              <3> 	
  8313                              <3> 	%include "lib/math.asm"
  8314                              <3> 	%include "lib/system.mac"
  8315                              <3> 
  8316                              <3> %macro chgsig 1
  8317                              <3> 	chgsig cs, %1
  8318                              <3> %endmacro
  8319                              <3> 
  8320                              <3> %macro cmp16 3
  8321                              <3> 	cmp16 cs, %1, cs, %2, %3
  8322                              <3> %endmacro
  8323                              <3> 
  8324                              <3> %macro mul16 2
  8325                              <3> 	mul16 cs, %1, cs, %2
  8326                              <3> %endmacro
  8327                              <3> 
  8328                              <3> %macro div16 2
  8329                              <3> 	div16 cs, %1, cs, %2
  8330                              <3> %endmacro
  8331                              <3> 
  8332                              <3> %macro mod16 2
  8333                              <3> 	mod16 cs, %1, cs, %2
  8334                              <3> %endmacro
  8335                              <3> 
  8336                              <3> %macro inc16 1
  8337                              <3> 	inc16 cs, %1
  8338                              <3> %endmacro
  8339                              <3> 
  8340                              <3> %macro dec16 1
  8341                              <3> 	dec16 cs, %1
  8342                              <3> %endmacro
  8343                              <3> 
  8344                              <3> %macro add16 2
  8345                              <3> 	add16 cs, %1, cs, %2
  8346                              <3> %endmacro
  8347                              <3> 
  8348                              <3> %macro sub16 2
  8349                              <3> 	sub16 cs, %1, cs, %2
  8350                              <3> %endmacro
  8351                              <3> 
  8352                              <3> %macro int32to16 2
  8353                              <3> 	int32to16 cs, %1, %2
  8354                              <3> %endmacro
  8355                              <3> 
  8356                              <3> %macro int16to32 2
  8357                              <3> 	int16to32 %1, cs, %2
  8358                              <3> %endmacro
  8359                              <3> 
  8360                              <3> %macro idiv32 5
  8361                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  8362                              <3> %endmacro
  8363                              <3> 
  8364                              <3> %macro imul32 3
  8365                              <3> 	imul32 cs, %1, cs, %2, cs, %3
  8366                              <3> %endmacro
  8367                              <3> 
  8368                              <3> %macro div32 5
  8369                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  8370                              <3> %endmacro
  8371                              <3> 
  8372                              <3> %macro mul32 3
  8373                              <3> 	mul32 cs, %1, cs, %2, cs, %3
  8374                              <3> %endmacro
  8375                              <3> 	
  8376                              <3> %macro add32 3
  8377                              <3> 	add32 cs, %1, cs, %2, cs, %3
  8378                              <3> %endmacro
  8379                              <3> 
  8380                              <3> %macro sub32 3
  8381                              <3> 	sub32 cs, %1, cs, %2, cs, %3
  8382                              <3> %endmacro
  8383                              <3> 
  8384                              <3> %macro int32to16 3
  8385                              <3> 	stkopen 0x06
  8386                              <3> 	mov ax,%1
  8387                              <3> 	mov ds,ax
  8388                              <3> 	mov ax,[%2+2]
  8389                              <3> 	mov word [bp+0], ax
  8390                              <3> 	mov ax,[%2]	
  8391                              <3> 	mov word [bp+2], ax
  8392                              <3> 	call proc_int32to16
  8393                              <3> 	mov ax,sp
  8394                              <3> 	mov bp,ax
  8395                              <3> 	mov ax,[bp+4]
  8396                              <3> 	mov word %3, ax	
  8397                              <3> 	stkclose 0x06
  8398                              <3> %endmacro
  8399                              <3> 
  8400                              <3> %macro int16to32 3
  8401                              <3> 	stkopen 0x06
  8402                              <3> 	mov word [bp+0], %1	
  8403                              <3> 	call proc_int16to32
  8404                              <3> 	mov ax,sp
  8405                              <3> 	mov bp,ax
  8406                              <3> 	mov ax,%2
  8407                              <3> 	mov ds,ax
  8408                              <3> 	mov ax,[bp+2]
  8409                              <3> 	mov [%3+2],ax
  8410                              <3> 	mov ax,[bp+4]
  8411                              <3> 	mov [%3],ax	
  8412                              <3> 	stkclose 0x06
  8413                              <3> %endmacro
  8414                              <3> 
  8415                              <3> %macro div32 10
  8416                              <3> 	stkopen 0x11
  8417                              <3> 	mov ax,%1
  8418                              <3> 	mov ds,ax
  8419                              <3> 	mov ax,[%2+2]
  8420                              <3> 	mov word [bp+0], ax
  8421                              <3> 	mov ax,[%2]
  8422                              <3> 	mov word [bp+2], ax
  8423                              <3> 	mov ax,%3
  8424                              <3> 	mov ds,ax
  8425                              <3> 	mov ax,[%4+2]
  8426                              <3> 	mov word [bp+4], ax
  8427                              <3> 	mov ax,[%4]
  8428                              <3> 	mov word [bp+6], ax
  8429                              <3> 	call proc_div32
  8430                              <3> 	mov ax,sp
  8431                              <3> 	mov bp,ax
  8432                              <3> 	mov ax,%5
  8433                              <3> 	mov ds,ax
  8434                              <3> 	mov word ax, [bp+8]
  8435                              <3> 	mov word [%6+2], ax
  8436                              <3> 	mov word ax, [bp+0x0A]
  8437                              <3> 	mov word [%6], ax
  8438                              <3> 	mov ax,%7
  8439                              <3> 	mov ds,ax
  8440                              <3> 	mov word ax,[bp+0x0C]
  8441                              <3> 	mov word [%8+2],ax
  8442                              <3> 	mov word ax,[bp+0x0E]
  8443                              <3> 	mov word [%8],ax
  8444                              <3> 	mov ax,%9
  8445                              <3> 	mov ds,ax
  8446                              <3> 	mov byte al,[bp+0x10]
  8447                              <3> 	mov byte [%10],al
  8448                              <3> 	stkclose 0x11
  8449                              <3> %endmacro
  8450                              <3> 	
  8451                              <3> %macro mul32 6
  8452                              <3> 	stkopen 0x0C
  8453                              <3> 	mov ax,%1
  8454                              <3> 	mov ds,ax
  8455                              <3> 	mov ax,[%2+2]
  8456                              <3> 	mov word [bp+0], ax
  8457                              <3> 	mov ax,[%2]
  8458                              <3> 	mov word [bp+2], ax
  8459                              <3> 	mov ax,%3
  8460                              <3> 	mov ds,ax
  8461                              <3> 	mov ax,[%4+2]
  8462                              <3> 	mov word [bp+4], ax
  8463                              <3> 	mov ax,[%4]
  8464                              <3> 	mov word [bp+6], ax
  8465                              <3> 	call proc_mul32
  8466                              <3> 	mov ax,sp
  8467                              <3> 	mov bp,ax
  8468                              <3> 	mov ax,%5
  8469                              <3> 	mov ds,ax
  8470                              <3> 	mov word ax, [bp+8]
  8471                              <3> 	mov word [%6+2], ax
  8472                              <3> 	mov word ax, [bp+0x0A]
  8473                              <3> 	mov word [%6], ax
  8474                              <3> 	stkclose 0x0C
  8475                              <3> %endmacro	
  8476                              <3> 	
  8477                              <3> %macro add32 6
  8478                              <3> 	stkopen 0x0C
  8479                              <3> 	mov ax,%1
  8480                              <3> 	mov ds,ax
  8481                              <3> 	mov ax,[%2+2]
  8482                              <3> 	mov word [bp+0], ax
  8483                              <3> 	mov ax,[%2]
  8484                              <3> 	mov word [bp+2], ax
  8485                              <3> 	mov ax,%3
  8486                              <3> 	mov ds,ax
  8487                              <3> 	mov ax,[%4+2]
  8488                              <3> 	mov word [bp+4], ax
  8489                              <3> 	mov ax,[%4]
  8490                              <3> 	mov word [bp+6], ax
  8491                              <3> 	call proc_add32
  8492                              <3> 	mov ax,sp
  8493                              <3> 	mov bp,ax
  8494                              <3> 	mov ax,%5
  8495                              <3> 	mov ds,ax
  8496                              <3> 	mov word ax, [bp+8]
  8497                              <3> 	mov word [%6+2], ax
  8498                              <3> 	mov word ax, [bp+0x0A]
  8499                              <3> 	mov word [%6], ax
  8500                              <3> 	stkclose 0x0C
  8501                              <3> %endmacro
  8502                              <3> 
  8503                              <3> %macro sub32 6
  8504                              <3> 	stkopen 0x0C
  8505                              <3> 	mov ax,%1
  8506                              <3> 	mov ds,ax
  8507                              <3> 	mov ax,[%2+2]
  8508                              <3> 	mov word [bp+0], ax
  8509                              <3> 	mov ax,[%2]
  8510                              <3> 	mov word [bp+2], ax
  8511                              <3> 	mov ax,%3
  8512                              <3> 	mov ds,ax
  8513                              <3> 	mov ax,[%4+2]
  8514                              <3> 	mov word [bp+4], ax
  8515                              <3> 	mov ax,[%4]
  8516                              <3> 	mov word [bp+6], ax
  8517                              <3> 	call proc_sub32
  8518                              <3> 	mov ax,sp
  8519                              <3> 	mov bp,ax
  8520                              <3> 	mov ax,%5
  8521                              <3> 	mov ds,ax
  8522                              <3> 	mov word ax, [bp+8]
  8523                              <3> 	mov word [%6+2], ax
  8524                              <3> 	mov word ax, [bp+0x0A]
  8525                              <3> 	mov word [%6], ax
  8526                              <3> 	stkclose 0x0C
  8527                              <3> %endmacro
  8528                              <3> 
  8529                              <3> %macro idiv32 10
  8530                              <3> 	stkopen 0x11
  8531                              <3> 	mov ax,%1
  8532                              <3> 	mov ds,ax
  8533                              <3> 	mov ax,[%2+2]
  8534                              <3> 	mov word [bp+0], ax
  8535                              <3> 	mov ax,[%2]
  8536                              <3> 	mov word [bp+2], ax
  8537                              <3> 	mov ax,%3
  8538                              <3> 	mov ds,ax
  8539                              <3> 	mov ax,[%4+2]
  8540                              <3> 	mov word [bp+4], ax
  8541                              <3> 	mov ax,[%4]
  8542                              <3> 	mov word [bp+6], ax
  8543                              <3> 	call proc_idiv32
  8544                              <3> 	mov ax,sp
  8545                              <3> 	mov bp,ax
  8546                              <3> 	mov ax,%5
  8547                              <3> 	mov ds,ax
  8548                              <3> 	mov word ax, [bp+8]
  8549                              <3> 	mov word [%6+2], ax
  8550                              <3> 	mov word ax, [bp+0x0A]
  8551                              <3> 	mov word [%6], ax
  8552                              <3> 	mov ax,%7
  8553                              <3> 	mov ds,ax
  8554                              <3> 	mov word ax,[bp+0x0C]
  8555                              <3> 	mov word [%8+2],ax
  8556                              <3> 	mov word ax,[bp+0x0E]
  8557                              <3> 	mov word [%8],ax
  8558                              <3> 	mov ax,%9
  8559                              <3> 	mov ds,ax
  8560                              <3> 	mov byte al,[bp+0x10]
  8561                              <3> 	mov byte [%10],al
  8562                              <3> 	stkclose 0x11
  8563                              <3> %endmacro
  8564                              <3> 
  8565                              <3> %macro imul32 6
  8566                              <3> 	stkopen 0x0C
  8567                              <3> 	mov ax,%1
  8568                              <3> 	mov ds,ax
  8569                              <3> 	mov ax,[%2+2]
  8570                              <3> 	mov word [bp+0], ax
  8571                              <3> 	mov ax,[%2]
  8572                              <3> 	mov word [bp+2], ax
  8573                              <3> 	mov ax,%3
  8574                              <3> 	mov ds,ax
  8575                              <3> 	mov ax,[%4+2]
  8576                              <3> 	mov word [bp+4], ax
  8577                              <3> 	mov ax,[%4]
  8578                              <3> 	mov word [bp+6], ax
  8579                              <3> 	call proc_imul32
  8580                              <3> 	mov ax,sp
  8581                              <3> 	mov bp,ax
  8582                              <3> 	mov ax,%5
  8583                              <3> 	mov ds,ax
  8584                              <3> 	mov word ax, [bp+8]
  8585                              <3> 	mov word [%6+2], ax
  8586                              <3> 	mov word ax, [bp+0x0A]
  8587                              <3> 	mov word [%6], ax
  8588                              <3> 	stkclose 0x0C
  8589                              <3> %endmacro
  8590                              <3> 	
  8591                              <3> %macro cmp32 3
  8592                              <3> 	cmp32 cs, %1, cs, %2, %3
  8593                              <3> %endmacro	
  8594                              <3> 	
  8595                              <3> %macro cmp32 5
  8596                              <3> 	stkopen 9
  8597                              <3> 	mov ax,%1
  8598                              <3> 	mov ds,ax
  8599                              <3> 	mov word ax,[%2+2]
  8600                              <3> 	mov word [bp+0], ax
  8601                              <3> 	mov word ax,[%2]
  8602                              <3> 	mov word [bp+2], ax	
  8603                              <3> 	mov ax,%3
  8604                              <3> 	mov ds,ax
  8605                              <3> 	mov word ax,[%4+2]
  8606                              <3> 	mov word [bp+4], ax
  8607                              <3> 	mov word ax,[%4]
  8608                              <3> 	mov word [bp+6], ax	
  8609                              <3> 	call proc_cmp32
  8610                              <3> 	mov ax,sp
  8611                              <3> 	mov bp,ax
  8612                              <3> 	mov al,[bp+8]
  8613                              <3> 	mov byte %5,al
  8614                              <3> 	stkclose 9
  8615                              <3> %endmacro
  8616                              <3> 	
  8617                              <3> %macro shl32 2
  8618                              <3> 	shl32 cs, %1, %2
  8619                              <3> %endmacro	
  8620                              <3> 	
  8621                              <3> %macro shl32 3
  8622                              <3> 	stkopen 5
  8623                              <3> 	mov ax,%1
  8624                              <3> 	mov ds,ax
  8625                              <3> 	mov word ax,[%2+2]
  8626                              <3> 	mov word [bp+0], ax
  8627                              <3> 	mov word ax,[%2]
  8628                              <3> 	mov word [bp+2], ax
  8629                              <3> 	mov byte al, %3
  8630                              <3> 	mov byte [bp+4], al 
  8631                              <3> 	call proc_shl32
  8632                              <3> 	mov ax,sp
  8633                              <3> 	mov bp,ax
  8634                              <3> 	mov ax,%1
  8635                              <3> 	mov ds,ax
  8636                              <3> 	mov ax,[bp+0]
  8637                              <3> 	mov word [%2+2],ax
  8638                              <3> 	mov ax,[bp+2]
  8639                              <3> 	mov word [%2],ax
  8640                              <3> 	stkclose 5
  8641                              <3> %endmacro
  8642                              <3> 
  8643                              <3> 
  8644                              <3> %macro shr32 2
  8645                              <3> 	shr32 cs, %1, %2
  8646                              <3> %endmacro	
  8647                              <3> 	
  8648                              <3> %macro shr32 3
  8649                              <3> 	stkopen 5
  8650                              <3> 	mov ax,%1
  8651                              <3> 	mov ds,ax
  8652                              <3> 	mov word ax,[%2+2]
  8653                              <3> 	mov word [bp+0], ax
  8654                              <3> 	mov word ax,[%2]
  8655                              <3> 	mov word [bp+2], ax
  8656                              <3> 	mov byte al, %3
  8657                              <3> 	mov byte [bp+4], al 
  8658                              <3> 	call proc_shr32
  8659                              <3> 	mov ax,sp
  8660                              <3> 	mov bp,ax
  8661                              <3> 	mov ax,%1
  8662                              <3> 	mov ds,ax
  8663                              <3> 	mov ax,[bp+0]
  8664                              <3> 	mov word [%2+2],ax
  8665                              <3> 	mov ax,[bp+2]
  8666                              <3> 	mov word [%2],ax
  8667                              <3> 	stkclose 5
  8668                              <3> %endmacro
  8669                              <3> 
  8670                              <3> %macro inc16 2
  8671                              <3> 	mov ax,%1
  8672                              <3> 	mov ds,ax
  8673                              <3> 	inc word [%2]
  8674                              <3> %endmacro
  8675                              <3> 
  8676                              <3> %macro dec16 2
  8677                              <3> 	mov ax,%1
  8678                              <3> 	mov ds,ax
  8679                              <3> 	dec word [%2]
  8680                              <3> %endmacro
  8681                              <3> 
  8682                              <3> %macro add16 4	
  8683                              <3> 	mov ax,%3
  8684                              <3> 	mov ds,ax
  8685                              <3> 	mov bx,[%4]	
  8686                              <3> 	mov ax,%1
  8687                              <3> 	mov ds,ax	
  8688                              <3> 	add [%2],bx
  8689                              <3> %endmacro
  8690                              <3> 
  8691                              <3> %macro sub16 4
  8692                              <3> 	mov ax,%3
  8693                              <3> 	mov ds,ax
  8694                              <3> 	mov bx,[%4]
  8695                              <3> 	mov ax,%1
  8696                              <3> 	mov ds,ax
  8697                              <3> 	sub [%2],bx
  8698                              <3> %endmacro
  8699                              <3> 
  8700                              <3> %macro mul16 4
  8701                              <3> 	mov ax,%1
  8702                              <3> 	mov ds,ax
  8703                              <3> 	mov bx,[%2]
  8704                              <3> 	mov ax,%3
  8705                              <3> 	mov ds,ax
  8706                              <3> 	mov cx,[%4]
  8707                              <3> 	
  8708                              <3> 	mov ax,bx
  8709                              <3> 	imul cx
  8710                              <3> 	
  8711                              <3> 	mov dx,%1
  8712                              <3> 	mov ds,dx
  8713                              <3> 	mov [%2],ax
  8714                              <3> %endmacro
  8715                              <3> 
  8716                              <3> %macro div16 4
  8717                              <3> 	mov ax,%1
  8718                              <3> 	mov ds,ax
  8719                              <3> 	mov bx,[%2]
  8720                              <3> 	mov ax,%3
  8721                              <3> 	mov ds,ax
  8722                              <3> 	mov cx,[%4]
  8723                              <3> 	
  8724                              <3> 	xor dx,dx
  8725                              <3> 	mov ax,bx
  8726                              <3> 	idiv cx
  8727                              <3> 	
  8728                              <3> 	mov dx,%1
  8729                              <3> 	mov ds,dx
  8730                              <3> 	mov [%2],ax
  8731                              <3> %endmacro
  8732                              <3> 
  8733                              <3> 
  8734                              <3> %macro mod16 4
  8735                              <3> 	mov ax,%1
  8736                              <3> 	mov ds,ax
  8737                              <3> 	mov bx,[%2]
  8738                              <3> 	mov ax,%3
  8739                              <3> 	mov ds,ax
  8740                              <3> 	mov cx,[%4]
  8741                              <3> 	
  8742                              <3> 	xor dx,dx
  8743                              <3> 	mov ax,bx
  8744                              <3> 	idiv cx
  8745                              <3> 	
  8746                              <3> 	mov bx,%1
  8747                              <3> 	mov ds,bx
  8748                              <3> 	mov [%2],dx
  8749                              <3> %endmacro
  8750                              <3> 
  8751                              <3> %macro cmp16 5
  8752                              <3> 	mov ax,%1
  8753                              <3> 	mov ds,ax
  8754                              <3> 	mov bx,[%2]
  8755                              <3> 	mov ax,%3
  8756                              <3> 	mov ds,ax
  8757                              <3> 	mov	cx,[%4]
  8758                              <3> 	
  8759                              <3> 	cmp bx,cx
  8760                              <3> 	jg %%above
  8761                              <3> 	jl %%below
  8762                              <3> 		mov byte %5, 0
  8763                              <3> 		jmp %%endcmp
  8764                              <3> 	%%above:
  8765                              <3> 		mov byte %5, 1
  8766                              <3> 		jmp %%endcmp
  8767                              <3> 	%%below:
  8768                              <3> 		mov byte %5, -1
  8769                              <3> 	%%endcmp:
  8770                              <3> %endmacro
  8771                              <3> 
  8772                              <3> %macro chgsig 2
  8773                              <3> 	mov ax,%1
  8774                              <3> 	mov ds,ax
  8775                              <3> 	mov ax,[%2]
  8776                              <3> 	mov bx,0xFFFF
  8777                              <3> 	sub bx,ax
  8778                              <3> 	inc bx
  8779                              <3> 	mov [%2],bx
  8780                              <3> %endmacro
  8781                              <3> 	
  8782                              <3> %endif
  8783                              <2> 
  8784                              <2> 	%include "src/lib/constants.asm"
  8785                              <3> %ifndef CONSTANTS_ASM
  8786                              <3> 	%define CONSTANTS_ASM
  8787                              <3> 					
  8788                              <3> section .data
  8789                              <3> 	__FL_ZERO: dd 0
  8790                              <3> 	__FL_ONE: dd 0x3F800000
  8791                              <3> 	__FL_NEG_ONE: dd 0xBF800000
  8792                              <3> 
  8793                              <3> 	__ZERO: dw 0
  8794                              <3> 	__ONE: dw 1
  8795                              <3> 		
  8796                              <3> 	__ball_color: db 09h
  8797                              <3> 	__ball_bordercolor: db 07h
  8798                              <3> 	
  8799                              <3> 	__tray_color: db 00h
  8800                              <3> 	__tray_bordercolor: db 07h	
  8801                              <3> 	
  8802                              <3> 	__square_bordercolor: db 07h
  8803                              <3> 	__square_ycolor: db 0x01, 0x02, 0x04, 0x09
  8804                              <3> 	
  8805                              <3> 	__racket_color: db 09h
  8806                              <3> 	__racket_bordercolor: db 07h	
  8807                              <3> 	
  8808                              <3> 	__message_default_color: db 07h	
  8809                              <3> 	__message_win_color: db 09h	
  8810                              <3> 	__message_lose_color: db 04h	
  8811                              <3> 								
  8812                              <3> %endif
  8813                              <2> 
  8814                              <2> section .data
  8815 000019C0 2800                <2> 	__SQUARE_COUNT: dw 40
  8816 000019C2 0A00                <2> 	__SQUARE_XCOUNT: dw 10
  8817 000019C4 0400                <2> 	__SQUARE_YCOUNT: dw 4
  8818 000019C6 0800                <2> 	__SQUARE_COUNT_DEC: dw 8
  8819 000019C8 010001000101000100- <2> 	__SQUAREMAP: db 1, 0, 1, 0, 1, 1, 0, 1, 0, 1
  8820 000019D1 01                  <2>
  8821 000019D2 010101010101010101- <2> 				  db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  8822 000019DB 01                  <2>
  8823 000019DC 010100010000010001- <2> 				  db 1, 1, 0, 1, 0, 0, 1, 0, 1, 1
  8824 000019E5 01                  <2>
  8825 000019E6 010101010101010101- <2> 				  db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1	
  8826 000019EF 01                  <2>
  8827                              <2> 				 
  8828                              <2> 		
  8829 000019F0 00<rept>            <2> 	__squaremap: times 40 db 0
  8830                              <2> 	 	
  8831 00001A18 0A00                <2> 	__tray_x1: dw 10
  8832 00001A1A 0A00                <2> 	__tray_y1: dw 10
  8833 00001A1C 3601                <2> 	__tray_x2: dw 310
  8834 00001A1E BE00                <2> 	__tray_y2: dw 190
  8835                              <2> 
  8836 00001A20 0000                <2> 	__square_x: dw 0
  8837 00001A22 0000                <2> 	__square_y: dw 0		
  8838 00001A24 0000                <2> 	__square_x2: dw 0
  8839 00001A26 0000                <2> 	__square_y2: dw 0
  8840 00001A28 1E00                <2> 	__square_w: dw 30
  8841 00001A2A 0A00                <2> 	__square_h: dw 10	
  8842                              <2> 					
  8843 00001A2C 0000                <2> 	__square_count: dw 0	
  8844 00001A2E 0000                <2> 	__square_xcount: dw 0
  8845 00001A30 0000                <2> 	__square_ycount: dw 0	
  8846                              <2> 		
  8847                              <2> 				 
  8848                              <2> %macro tray_initialize 0
  8849                              <2> 	mov16 __square_count, __SQUARE_COUNT
  8850                              <2> 	mov16 __square_xcount, __SQUARE_XCOUNT
  8851                              <2> 	mov16 __square_ycount, __SQUARE_YCOUNT
  8852                              <2> 
  8853                              <2> 	mov ax,cs
  8854                              <2> 	mov ds,ax
  8855                              <2> 	mov es,ax
  8856                              <2> 	mov si, __SQUAREMAP
  8857                              <2> 	mov di, __squaremap
  8858                              <2> 
  8859                              <2> 	mov cx,[__square_count]	
  8860                              <2> 	%%l1:
  8861                              <2> 		cmp cx,0
  8862                              <2> 		jz %%l2
  8863                              <2> 		
  8864                              <2> 		lodsb
  8865                              <2> 		stosb
  8866                              <2> 		
  8867                              <2> 		dec cx
  8868                              <2> 		jmp %%l1
  8869                              <2> 	%%l2:
  8870                              <2> 	
  8871                              <2> 	sub16 __square_count, __SQUARE_COUNT_DEC
  8872                              <2> %endmacro
  8873                              <2> 	
  8874                              <2> %macro tray_throw_colision 0
  8875                              <2> section .data
  8876                              <2> 	%%rb: dd 0
  8877                              <2> 	%%aux: dw 0
  8878                              <2> section .text
  8879                              <2> 	fltoint16 __ball_radial, %%rb
  8880                              <2> 
  8881                              <2> 	fltoint16 __ball_x, %%aux
  8882                              <2> 	sub16 %%aux, %%rb
  8883                              <2> 	cmp16 %%aux, __tray_x1, cl
  8884                              <2> 	cmp cl,0
  8885                              <2> 	jg %%endsidex1
  8886                              <2> 		ball_xinvdirection		
  8887                              <2> 	%%endsidex1:
  8888                              <2> 	
  8889                              <2> 	fltoint16 __ball_x, %%aux
  8890                              <2> 	add16 %%aux, %%rb
  8891                              <2> 	cmp16 %%aux, __tray_x2, cl
  8892                              <2> 	cmp cl,0
  8893                              <2> 	jl %%endsidex2
  8894                              <2> 		ball_xinvdirection	
  8895                              <2> 	%%endsidex2:
  8896                              <2> 		
  8897                              <2> 	fltoint16 __ball_y, %%aux
  8898                              <2> 	sub16 %%aux, %%rb
  8899                              <2> 	cmp16 %%aux, __tray_y1, cl
  8900                              <2> 	cmp cl,0
  8901                              <2> 	jg %%endsidey1
  8902                              <2> 		ball_yinvdirection	
  8903                              <2> 	%%endsidey1:
  8904                              <2> 	
  8905                              <2> 	fltoint16 __ball_y, %%aux
  8906                              <2> 	add16 %%aux, %%rb
  8907                              <2> 	cmp16 %%aux, __tray_y2, cl
  8908                              <2> 	cmp cl,0
  8909                              <2> 	jl %%endsidey2
  8910                              <2> 		mov16 __lose, __ONE
  8911                              <2> 	%%endsidey2:	
  8912                              <2> 		
  8913                              <2> %endmacro	
  8914                              <2> 	
  8915                              <2> %macro tray_throw_square_colision 0
  8916                              <2> section .data
  8917                              <2> 	%%x: dw 0
  8918                              <2> 	%%y: dw 0
  8919                              <2> 	%%r: dw 0
  8920                              <2> 	%%xaux: dw 0
  8921                              <2> 	%%yaux: dw 0
  8922                              <2> 	%%xinc: dw 0
  8923                              <2> section .text
  8924                              <2> 	fltoint16 __ball_x, %%xaux
  8925                              <2> 	fltoint16 __ball_y, %%yaux
  8926                              <2> 	fltoint16 __ball_radial, %%r
  8927                              <2> 	
  8928                              <2> 	mov16 %%x, %%xaux
  8929                              <2> 	mov16 %%y, %%yaux
  8930                              <2> 	sub16 %%x, __tray_x1
  8931                              <2> 	sub16 %%y, __tray_y1
  8932                              <2> 	
  8933                              <2> 	flgetsig __ball_xinc, ax	
  8934                              <2> 	cmp ax,0
  8935                              <2> 	jz %%xpos
  8936                              <2> 	jmp %%xneg
  8937                              <2> 	%%xpos:
  8938                              <2> 		add16 %%x, %%r		
  8939                              <2> 		jmp %%xpos_or_neg
  8940                              <2> 	%%xneg:
  8941                              <2> 		sub16 %%x, %%r				
  8942                              <2> 	%%xpos_or_neg:		
  8943                              <2> 		__tray_has_square_colision %%x, %%y, cl
  8944                              <2> 		cmp cl,0
  8945                              <2> 		jz %%endx
  8946                              <2> 			squaremap_remove %%x, %%y
  8947                              <2> 			ball_xinvdirection
  8948                              <2> 	%%endx:	
  8949                              <2> 	
  8950                              <2> 	mov16 %%x, %%xaux
  8951                              <2> 	mov16 %%y, %%yaux
  8952                              <2> 	sub16 %%x, __tray_x1
  8953                              <2> 	sub16 %%y, __tray_y1
  8954                              <2> 		
  8955                              <2> 	flgetsig __ball_yinc, ax	
  8956                              <2> 	cmp ax,0
  8957                              <2> 	jz %%ypos
  8958                              <2> 	jmp %%yneg
  8959                              <2> 	%%ypos:
  8960                              <2> 		add16 %%y, %%r		
  8961                              <2> 		jmp %%ypos_or_neg
  8962                              <2> 	%%yneg:
  8963                              <2> 		sub16 %%y, %%r				
  8964                              <2> 	%%ypos_or_neg:		
  8965                              <2> 		__tray_has_square_colision %%x, %%y, cl
  8966                              <2> 		cmp cl,0
  8967                              <2> 		jz %%endy
  8968                              <2> 			squaremap_remove %%x, %%y
  8969                              <2> 			ball_yinvdirection			
  8970                              <2> 	%%endy:
  8971                              <2> 			
  8972                              <2> %endmacro
  8973                              <2> 
  8974                              <2> %macro __tray_has_square_colision 3	
  8975                              <2> 	div16 %1, __square_w		
  8976                              <2> 	cmp16 %1, __square_xcount, cl
  8977                              <2> 	cmp cl,0
  8978                              <2> 	jg %%ncol
  8979                              <2> 	jl %%xbound
  8980                              <2> 		dec16 %1
  8981                              <2> 	%%xbound:
  8982                              <2> 
  8983                              <2> 	div16 %2, __square_h			
  8984                              <2> 	cmp16 %2, __square_ycount, cl
  8985                              <2> 	cmp cl,0
  8986                              <2> 	jge %%ncol
  8987                              <2> 	jl %%ybound
  8988                              <2> 		dec16 %2
  8989                              <2> 	%%ybound:	
  8990                              <2> 		
  8991                              <2> 	squaremap_get %1, %2, cl
  8992                              <2> 	cmp cl,0
  8993                              <2> 	jz %%ncol
  8994                              <2> 		
  8995                              <2> 		mov byte %3,1		
  8996                              <2> 		jmp %%end
  8997                              <2> 	%%ncol:		
  8998                              <2> 		mov byte %3,0
  8999                              <2> 	%%end:
  9000                              <2> %endmacro	
  9001                              <2> 	
  9002                              <2> %macro squaremap_get 3
  9003                              <2> section .data
  9004                              <2> 	%%aux: dd 0
  9005                              <2> section .text
  9006                              <2> 	mov16 %%aux, %2
  9007                              <2> 	mul16 %%aux, __square_xcount
  9008                              <2> 	add16 %%aux, %1
  9009                              <2> 	
  9010                              <2> 	int16toreg %%aux, ax		
  9011                              <2> 	
  9012                              <2> 	vlodsb __squaremap, ax, %3		
  9013                              <2> %endmacro
  9014                              <2> 
  9015                              <2> %macro squaremap_set 3
  9016                              <2> section .data
  9017                              <2> 	%%aux: dd 0
  9018                              <2> section .text
  9019                              <2> 	mov16 %%aux, %2
  9020                              <2> 	mul16 %%aux, __square_xcount
  9021                              <2> 	add16 %%aux, %1
  9022                              <2> 	
  9023                              <2> 	int16toreg %%aux, ax			
  9024                              <2> 	vstosb __squaremap, ax, %3		
  9025                              <2> %endmacro
  9026                              <2> 
  9027                              <2> %macro squaremap_remove 2
  9028                              <2> 	squaremap_set %1, %2, 0
  9029                              <2> 	dec16 __square_count	
  9030                              <2> %endmacro
  9031                              <2> 
  9032                              <2> %endif
  9033                              <1> 	%include "src/lib/ball.mac"
  9034                              <2> %ifndef BALL_MAC
  9035                              <2> 	%define BALL_MAC
  9036                              <2> 			
  9037                              <2> 	%include "lib/system.mac"
  9038                              <3>  
  9039                              <3> %ifndef SYSTEM_MAC
  9040                              <3>  	%define SYSTEM_MAC
  9041                              <3>  	
  9042                              <3> 	%ifndef TRUE
  9043                              <3> 		%define TRUE 01h
  9044                              <3> 	%endif
  9045                              <3> 	%ifndef FALSE
  9046                              <3> 		%define FALSE 00h
  9047                              <3> 	%endif
  9048                              <3> 	
  9049                              <3> %macro vlodsb 3
  9050                              <3> 	vlodsb cs, %1, %2, %3
  9051                              <3> %endmacro
  9052                              <3> 
  9053                              <3> %macro vstosb 3
  9054                              <3> 	vstosb cs, %1, %2, %3
  9055                              <3> %endmacro
  9056                              <3> 	 	
  9057                              <3> %macro int16toreg 2
  9058                              <3> 	int16toreg cs, %1, %2
  9059                              <3> %endmacro
  9060                              <3> 
  9061                              <3> %macro regtoint16 2
  9062                              <3> 	regtoint16 %1, cs, %2
  9063                              <3> %endmacro
  9064                              <3> 
  9065                              <3> %macro vstosb 4
  9066                              <3> 	push %1
  9067                              <3> 	pop ds
  9068                              <3> 	mov si,%2
  9069                              <3> 	add si,%3
  9070                              <3> 	mov byte [si],%4	
  9071                              <3> %endmacro
  9072                              <3> 
  9073                              <3> %macro vlodsb 4
  9074                              <3> 	push %1
  9075                              <3> 	pop ds
  9076                              <3> 	mov si,%2
  9077                              <3> 	add si,%3
  9078                              <3> 	mov byte %4,[si]	
  9079                              <3> %endmacro 	 
  9080                              <3> 
  9081                              <3> %macro int16toreg 3
  9082                              <3> 	push %2
  9083                              <3> 	push %1
  9084                              <3> 	pop ds
  9085                              <3> 	pop si
  9086                              <3> 	mov word %3,[si]	
  9087                              <3> %endmacro
  9088                              <3> 
  9089                              <3> %macro regtoint16 3
  9090                              <3> 	push %3
  9091                              <3> 	push %2
  9092                              <3> 	pop ds
  9093                              <3> 	pop si
  9094                              <3> 	mov word [si],%1	
  9095                              <3> %endmacro
  9096                              <3> 
  9097                              <3> %macro mov32 2
  9098                              <3> 	mov32 cs, %1, cs, %2
  9099                              <3> %endmacro
  9100                              <3> 
  9101                              <3> %macro mov16 2
  9102                              <3> 	mov16 cs, %1, cs, %2
  9103                              <3> %endmacro
  9104                              <3> 
  9105                              <3> %macro mov32 4
  9106                              <3> 	mov ax,%3
  9107                              <3> 	mov ds,ax
  9108                              <3> 	mov cx,[%4+2]
  9109                              <3> 	mov dx,[%4]
  9110                              <3> 	mov ax,%1
  9111                              <3> 	mov ds,ax
  9112                              <3> 	mov [%2+2],cx
  9113                              <3> 	mov [%2],dx
  9114                              <3> %endmacro
  9115                              <3> 
  9116                              <3> %macro mov16 4
  9117                              <3> 	mov ax,%3
  9118                              <3> 	mov ds,ax
  9119                              <3> 	mov bx,[%4]
  9120                              <3> 	mov ax,%1
  9121                              <3> 	mov ds,ax
  9122                              <3> 	mov [%2],bx
  9123                              <3> %endmacro
  9124                              <3>  	 	
  9125                              <3> %macro mformat 4
  9126                              <3> 	stkopen 8
  9127                              <3> 	mov word [ bp + 0 ], %1
  9128                              <3> 	mov word [ bp + 2 ], %2
  9129                              <3> 	mov word [ bp + 4 ], %3
  9130                              <3> 	mov word [ bp + 6 ], %4
  9131                              <3> 	call kernel_segment:mformat
  9132                              <3> 	stkclose 8
  9133                              <3> %endmacro
  9134                              <3> 
  9135                              <3> %macro malloc 6
  9136                              <3> 	stkopen 0Bh
  9137                              <3> 	mov word [ bp + 4 ], %3
  9138                              <3> 	mov word [ bp + 6 ], %4
  9139                              <3> 	mov word [ bp + 8 ], %5	
  9140                              <3> 	call kernel_segment:malloc
  9141                              <3> 	push sp
  9142                              <3> 	pop bp
  9143                              <3> 	mov word %1, [ bp ]
  9144                              <3> 	mov word %2, [ bp + 2 ]
  9145                              <3> 	mov byte %6, [ bp + 0x0A ]
  9146                              <3> 	stkclose 0Bh
  9147                              <3> %endmacro 	
  9148                              <3> 
  9149                              <3> %macro laddr 2
  9150                              <3> 	laddr %1, %2, %1, %2
  9151                              <3> %endmacro
  9152                              <3> 
  9153                              <3> %macro faddr 2
  9154                              <3> 	faddr %1, %2, %1, %2
  9155                              <3> %endmacro
  9156                              <3>  	
  9157                              <3> %macro laddr 4
  9158                              <3> 	stkopen 8
  9159                              <3> 	mov word [ bp + 4 ], %3
  9160                              <3> 	mov word [ bp + 6 ], %4	
  9161                              <3> 	call kernel_segment:laddr
  9162                              <3> 	push sp
  9163                              <3> 	pop bp
  9164                              <3> 	mov word %1, [ bp + 0 ]
  9165                              <3> 	mov word %2, [ bp + 2 ]	
  9166                              <3> 	stkclose 8
  9167                              <3> %endmacro
  9168                              <3> 
  9169                              <3> %macro faddr 4
  9170                              <3> 	stkopen 8
  9171                              <3> 	mov word [ bp + 4 ], %3
  9172                              <3> 	mov word [ bp + 6 ], %4	
  9173                              <3> 	call kernel_segment:faddr
  9174                              <3> 	push sp
  9175                              <3> 	pop bp
  9176                              <3> 	mov word %1, [ bp + 0 ]
  9177                              <3> 	mov word %2, [ bp + 2 ]	
  9178                              <3> 	stkclose 8
  9179                              <3> %endmacro	
  9180                              <3>  
  9181                              <3> 
  9182                              <3> %macro stkopen 1		
  9183                              <3> 	sub word sp, %1
  9184                              <3> 	push sp
  9185                              <3> 	pop bp
  9186                              <3> %endmacro
  9187                              <3> 
  9188                              <3> %macro stkclose 1
  9189                              <3> 	add word sp, %1
  9190                              <3> %endmacro
  9191                              <3> 
  9192                              <3> %macro stkload 1-* 	
  9193                              <3>  	%rep %0
  9194                              <3>  	 	%rotate -1
  9195                              <3>  		pop %1
  9196                              <3>  	%endrep
  9197                              <3>  	%rep %0
  9198                              <3>  		push %1
  9199                              <3>  		%rotate 1
  9200                              <3>  	%endrep
  9201                              <3> %endmacro
  9202                              <3> 
  9203                              <3> %macro stkpush 1-* 	
  9204                              <3>  	%rep %0
  9205                              <3>  		push %1
  9206                              <3>  		%rotate 1
  9207                              <3>  	%endrep 	
  9208                              <3> %endmacro
  9209                              <3>  
  9210                              <3> %macro stkpop 1-*
  9211                              <3>  	%rep %0
  9212                              <3>  	 	%rotate -1
  9213                              <3>  		pop %1
  9214                              <3>  	%endrep 	 	
  9215                              <3> %endmacro
  9216                              <3> 
  9217                              <3> %macro delay 1
  9218                              <3> 	delay cs, %1
  9219                              <3> %endmacro
  9220                              <3> 
  9221                              <3> %macro delay 2
  9222                              <3> 	mov ax,%1
  9223                              <3> 	mov ds,ax
  9224                              <3> 	
  9225                              <3> 	mov ah,86h
  9226                              <3> 	mov cx,[%2+2]
  9227                              <3> 	mov dx,[%2]
  9228                              <3> 	int 15h	
  9229                              <3> %endmacro
  9230                              <3> 
  9231                              <3> %endif 
  9232                              <2> 	%include "lib/math.mac"
  9233                              <3> 
  9234                              <3> %ifndef MATH_MAC
  9235                              <3> 	%define MATH_MAC
  9236                              <3> 	
  9237                              <3> 	%include "lib/math.asm"
  9238                              <3> 	%include "lib/system.mac"
  9239                              <3> 
  9240                              <3> %macro chgsig 1
  9241                              <3> 	chgsig cs, %1
  9242                              <3> %endmacro
  9243                              <3> 
  9244                              <3> %macro cmp16 3
  9245                              <3> 	cmp16 cs, %1, cs, %2, %3
  9246                              <3> %endmacro
  9247                              <3> 
  9248                              <3> %macro mul16 2
  9249                              <3> 	mul16 cs, %1, cs, %2
  9250                              <3> %endmacro
  9251                              <3> 
  9252                              <3> %macro div16 2
  9253                              <3> 	div16 cs, %1, cs, %2
  9254                              <3> %endmacro
  9255                              <3> 
  9256                              <3> %macro mod16 2
  9257                              <3> 	mod16 cs, %1, cs, %2
  9258                              <3> %endmacro
  9259                              <3> 
  9260                              <3> %macro inc16 1
  9261                              <3> 	inc16 cs, %1
  9262                              <3> %endmacro
  9263                              <3> 
  9264                              <3> %macro dec16 1
  9265                              <3> 	dec16 cs, %1
  9266                              <3> %endmacro
  9267                              <3> 
  9268                              <3> %macro add16 2
  9269                              <3> 	add16 cs, %1, cs, %2
  9270                              <3> %endmacro
  9271                              <3> 
  9272                              <3> %macro sub16 2
  9273                              <3> 	sub16 cs, %1, cs, %2
  9274                              <3> %endmacro
  9275                              <3> 
  9276                              <3> %macro int32to16 2
  9277                              <3> 	int32to16 cs, %1, %2
  9278                              <3> %endmacro
  9279                              <3> 
  9280                              <3> %macro int16to32 2
  9281                              <3> 	int16to32 %1, cs, %2
  9282                              <3> %endmacro
  9283                              <3> 
  9284                              <3> %macro idiv32 5
  9285                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  9286                              <3> %endmacro
  9287                              <3> 
  9288                              <3> %macro imul32 3
  9289                              <3> 	imul32 cs, %1, cs, %2, cs, %3
  9290                              <3> %endmacro
  9291                              <3> 
  9292                              <3> %macro div32 5
  9293                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  9294                              <3> %endmacro
  9295                              <3> 
  9296                              <3> %macro mul32 3
  9297                              <3> 	mul32 cs, %1, cs, %2, cs, %3
  9298                              <3> %endmacro
  9299                              <3> 	
  9300                              <3> %macro add32 3
  9301                              <3> 	add32 cs, %1, cs, %2, cs, %3
  9302                              <3> %endmacro
  9303                              <3> 
  9304                              <3> %macro sub32 3
  9305                              <3> 	sub32 cs, %1, cs, %2, cs, %3
  9306                              <3> %endmacro
  9307                              <3> 
  9308                              <3> %macro int32to16 3
  9309                              <3> 	stkopen 0x06
  9310                              <3> 	mov ax,%1
  9311                              <3> 	mov ds,ax
  9312                              <3> 	mov ax,[%2+2]
  9313                              <3> 	mov word [bp+0], ax
  9314                              <3> 	mov ax,[%2]	
  9315                              <3> 	mov word [bp+2], ax
  9316                              <3> 	call proc_int32to16
  9317                              <3> 	mov ax,sp
  9318                              <3> 	mov bp,ax
  9319                              <3> 	mov ax,[bp+4]
  9320                              <3> 	mov word %3, ax	
  9321                              <3> 	stkclose 0x06
  9322                              <3> %endmacro
  9323                              <3> 
  9324                              <3> %macro int16to32 3
  9325                              <3> 	stkopen 0x06
  9326                              <3> 	mov word [bp+0], %1	
  9327                              <3> 	call proc_int16to32
  9328                              <3> 	mov ax,sp
  9329                              <3> 	mov bp,ax
  9330                              <3> 	mov ax,%2
  9331                              <3> 	mov ds,ax
  9332                              <3> 	mov ax,[bp+2]
  9333                              <3> 	mov [%3+2],ax
  9334                              <3> 	mov ax,[bp+4]
  9335                              <3> 	mov [%3],ax	
  9336                              <3> 	stkclose 0x06
  9337                              <3> %endmacro
  9338                              <3> 
  9339                              <3> %macro div32 10
  9340                              <3> 	stkopen 0x11
  9341                              <3> 	mov ax,%1
  9342                              <3> 	mov ds,ax
  9343                              <3> 	mov ax,[%2+2]
  9344                              <3> 	mov word [bp+0], ax
  9345                              <3> 	mov ax,[%2]
  9346                              <3> 	mov word [bp+2], ax
  9347                              <3> 	mov ax,%3
  9348                              <3> 	mov ds,ax
  9349                              <3> 	mov ax,[%4+2]
  9350                              <3> 	mov word [bp+4], ax
  9351                              <3> 	mov ax,[%4]
  9352                              <3> 	mov word [bp+6], ax
  9353                              <3> 	call proc_div32
  9354                              <3> 	mov ax,sp
  9355                              <3> 	mov bp,ax
  9356                              <3> 	mov ax,%5
  9357                              <3> 	mov ds,ax
  9358                              <3> 	mov word ax, [bp+8]
  9359                              <3> 	mov word [%6+2], ax
  9360                              <3> 	mov word ax, [bp+0x0A]
  9361                              <3> 	mov word [%6], ax
  9362                              <3> 	mov ax,%7
  9363                              <3> 	mov ds,ax
  9364                              <3> 	mov word ax,[bp+0x0C]
  9365                              <3> 	mov word [%8+2],ax
  9366                              <3> 	mov word ax,[bp+0x0E]
  9367                              <3> 	mov word [%8],ax
  9368                              <3> 	mov ax,%9
  9369                              <3> 	mov ds,ax
  9370                              <3> 	mov byte al,[bp+0x10]
  9371                              <3> 	mov byte [%10],al
  9372                              <3> 	stkclose 0x11
  9373                              <3> %endmacro
  9374                              <3> 	
  9375                              <3> %macro mul32 6
  9376                              <3> 	stkopen 0x0C
  9377                              <3> 	mov ax,%1
  9378                              <3> 	mov ds,ax
  9379                              <3> 	mov ax,[%2+2]
  9380                              <3> 	mov word [bp+0], ax
  9381                              <3> 	mov ax,[%2]
  9382                              <3> 	mov word [bp+2], ax
  9383                              <3> 	mov ax,%3
  9384                              <3> 	mov ds,ax
  9385                              <3> 	mov ax,[%4+2]
  9386                              <3> 	mov word [bp+4], ax
  9387                              <3> 	mov ax,[%4]
  9388                              <3> 	mov word [bp+6], ax
  9389                              <3> 	call proc_mul32
  9390                              <3> 	mov ax,sp
  9391                              <3> 	mov bp,ax
  9392                              <3> 	mov ax,%5
  9393                              <3> 	mov ds,ax
  9394                              <3> 	mov word ax, [bp+8]
  9395                              <3> 	mov word [%6+2], ax
  9396                              <3> 	mov word ax, [bp+0x0A]
  9397                              <3> 	mov word [%6], ax
  9398                              <3> 	stkclose 0x0C
  9399                              <3> %endmacro	
  9400                              <3> 	
  9401                              <3> %macro add32 6
  9402                              <3> 	stkopen 0x0C
  9403                              <3> 	mov ax,%1
  9404                              <3> 	mov ds,ax
  9405                              <3> 	mov ax,[%2+2]
  9406                              <3> 	mov word [bp+0], ax
  9407                              <3> 	mov ax,[%2]
  9408                              <3> 	mov word [bp+2], ax
  9409                              <3> 	mov ax,%3
  9410                              <3> 	mov ds,ax
  9411                              <3> 	mov ax,[%4+2]
  9412                              <3> 	mov word [bp+4], ax
  9413                              <3> 	mov ax,[%4]
  9414                              <3> 	mov word [bp+6], ax
  9415                              <3> 	call proc_add32
  9416                              <3> 	mov ax,sp
  9417                              <3> 	mov bp,ax
  9418                              <3> 	mov ax,%5
  9419                              <3> 	mov ds,ax
  9420                              <3> 	mov word ax, [bp+8]
  9421                              <3> 	mov word [%6+2], ax
  9422                              <3> 	mov word ax, [bp+0x0A]
  9423                              <3> 	mov word [%6], ax
  9424                              <3> 	stkclose 0x0C
  9425                              <3> %endmacro
  9426                              <3> 
  9427                              <3> %macro sub32 6
  9428                              <3> 	stkopen 0x0C
  9429                              <3> 	mov ax,%1
  9430                              <3> 	mov ds,ax
  9431                              <3> 	mov ax,[%2+2]
  9432                              <3> 	mov word [bp+0], ax
  9433                              <3> 	mov ax,[%2]
  9434                              <3> 	mov word [bp+2], ax
  9435                              <3> 	mov ax,%3
  9436                              <3> 	mov ds,ax
  9437                              <3> 	mov ax,[%4+2]
  9438                              <3> 	mov word [bp+4], ax
  9439                              <3> 	mov ax,[%4]
  9440                              <3> 	mov word [bp+6], ax
  9441                              <3> 	call proc_sub32
  9442                              <3> 	mov ax,sp
  9443                              <3> 	mov bp,ax
  9444                              <3> 	mov ax,%5
  9445                              <3> 	mov ds,ax
  9446                              <3> 	mov word ax, [bp+8]
  9447                              <3> 	mov word [%6+2], ax
  9448                              <3> 	mov word ax, [bp+0x0A]
  9449                              <3> 	mov word [%6], ax
  9450                              <3> 	stkclose 0x0C
  9451                              <3> %endmacro
  9452                              <3> 
  9453                              <3> %macro idiv32 10
  9454                              <3> 	stkopen 0x11
  9455                              <3> 	mov ax,%1
  9456                              <3> 	mov ds,ax
  9457                              <3> 	mov ax,[%2+2]
  9458                              <3> 	mov word [bp+0], ax
  9459                              <3> 	mov ax,[%2]
  9460                              <3> 	mov word [bp+2], ax
  9461                              <3> 	mov ax,%3
  9462                              <3> 	mov ds,ax
  9463                              <3> 	mov ax,[%4+2]
  9464                              <3> 	mov word [bp+4], ax
  9465                              <3> 	mov ax,[%4]
  9466                              <3> 	mov word [bp+6], ax
  9467                              <3> 	call proc_idiv32
  9468                              <3> 	mov ax,sp
  9469                              <3> 	mov bp,ax
  9470                              <3> 	mov ax,%5
  9471                              <3> 	mov ds,ax
  9472                              <3> 	mov word ax, [bp+8]
  9473                              <3> 	mov word [%6+2], ax
  9474                              <3> 	mov word ax, [bp+0x0A]
  9475                              <3> 	mov word [%6], ax
  9476                              <3> 	mov ax,%7
  9477                              <3> 	mov ds,ax
  9478                              <3> 	mov word ax,[bp+0x0C]
  9479                              <3> 	mov word [%8+2],ax
  9480                              <3> 	mov word ax,[bp+0x0E]
  9481                              <3> 	mov word [%8],ax
  9482                              <3> 	mov ax,%9
  9483                              <3> 	mov ds,ax
  9484                              <3> 	mov byte al,[bp+0x10]
  9485                              <3> 	mov byte [%10],al
  9486                              <3> 	stkclose 0x11
  9487                              <3> %endmacro
  9488                              <3> 
  9489                              <3> %macro imul32 6
  9490                              <3> 	stkopen 0x0C
  9491                              <3> 	mov ax,%1
  9492                              <3> 	mov ds,ax
  9493                              <3> 	mov ax,[%2+2]
  9494                              <3> 	mov word [bp+0], ax
  9495                              <3> 	mov ax,[%2]
  9496                              <3> 	mov word [bp+2], ax
  9497                              <3> 	mov ax,%3
  9498                              <3> 	mov ds,ax
  9499                              <3> 	mov ax,[%4+2]
  9500                              <3> 	mov word [bp+4], ax
  9501                              <3> 	mov ax,[%4]
  9502                              <3> 	mov word [bp+6], ax
  9503                              <3> 	call proc_imul32
  9504                              <3> 	mov ax,sp
  9505                              <3> 	mov bp,ax
  9506                              <3> 	mov ax,%5
  9507                              <3> 	mov ds,ax
  9508                              <3> 	mov word ax, [bp+8]
  9509                              <3> 	mov word [%6+2], ax
  9510                              <3> 	mov word ax, [bp+0x0A]
  9511                              <3> 	mov word [%6], ax
  9512                              <3> 	stkclose 0x0C
  9513                              <3> %endmacro
  9514                              <3> 	
  9515                              <3> %macro cmp32 3
  9516                              <3> 	cmp32 cs, %1, cs, %2, %3
  9517                              <3> %endmacro	
  9518                              <3> 	
  9519                              <3> %macro cmp32 5
  9520                              <3> 	stkopen 9
  9521                              <3> 	mov ax,%1
  9522                              <3> 	mov ds,ax
  9523                              <3> 	mov word ax,[%2+2]
  9524                              <3> 	mov word [bp+0], ax
  9525                              <3> 	mov word ax,[%2]
  9526                              <3> 	mov word [bp+2], ax	
  9527                              <3> 	mov ax,%3
  9528                              <3> 	mov ds,ax
  9529                              <3> 	mov word ax,[%4+2]
  9530                              <3> 	mov word [bp+4], ax
  9531                              <3> 	mov word ax,[%4]
  9532                              <3> 	mov word [bp+6], ax	
  9533                              <3> 	call proc_cmp32
  9534                              <3> 	mov ax,sp
  9535                              <3> 	mov bp,ax
  9536                              <3> 	mov al,[bp+8]
  9537                              <3> 	mov byte %5,al
  9538                              <3> 	stkclose 9
  9539                              <3> %endmacro
  9540                              <3> 	
  9541                              <3> %macro shl32 2
  9542                              <3> 	shl32 cs, %1, %2
  9543                              <3> %endmacro	
  9544                              <3> 	
  9545                              <3> %macro shl32 3
  9546                              <3> 	stkopen 5
  9547                              <3> 	mov ax,%1
  9548                              <3> 	mov ds,ax
  9549                              <3> 	mov word ax,[%2+2]
  9550                              <3> 	mov word [bp+0], ax
  9551                              <3> 	mov word ax,[%2]
  9552                              <3> 	mov word [bp+2], ax
  9553                              <3> 	mov byte al, %3
  9554                              <3> 	mov byte [bp+4], al 
  9555                              <3> 	call proc_shl32
  9556                              <3> 	mov ax,sp
  9557                              <3> 	mov bp,ax
  9558                              <3> 	mov ax,%1
  9559                              <3> 	mov ds,ax
  9560                              <3> 	mov ax,[bp+0]
  9561                              <3> 	mov word [%2+2],ax
  9562                              <3> 	mov ax,[bp+2]
  9563                              <3> 	mov word [%2],ax
  9564                              <3> 	stkclose 5
  9565                              <3> %endmacro
  9566                              <3> 
  9567                              <3> 
  9568                              <3> %macro shr32 2
  9569                              <3> 	shr32 cs, %1, %2
  9570                              <3> %endmacro	
  9571                              <3> 	
  9572                              <3> %macro shr32 3
  9573                              <3> 	stkopen 5
  9574                              <3> 	mov ax,%1
  9575                              <3> 	mov ds,ax
  9576                              <3> 	mov word ax,[%2+2]
  9577                              <3> 	mov word [bp+0], ax
  9578                              <3> 	mov word ax,[%2]
  9579                              <3> 	mov word [bp+2], ax
  9580                              <3> 	mov byte al, %3
  9581                              <3> 	mov byte [bp+4], al 
  9582                              <3> 	call proc_shr32
  9583                              <3> 	mov ax,sp
  9584                              <3> 	mov bp,ax
  9585                              <3> 	mov ax,%1
  9586                              <3> 	mov ds,ax
  9587                              <3> 	mov ax,[bp+0]
  9588                              <3> 	mov word [%2+2],ax
  9589                              <3> 	mov ax,[bp+2]
  9590                              <3> 	mov word [%2],ax
  9591                              <3> 	stkclose 5
  9592                              <3> %endmacro
  9593                              <3> 
  9594                              <3> %macro inc16 2
  9595                              <3> 	mov ax,%1
  9596                              <3> 	mov ds,ax
  9597                              <3> 	inc word [%2]
  9598                              <3> %endmacro
  9599                              <3> 
  9600                              <3> %macro dec16 2
  9601                              <3> 	mov ax,%1
  9602                              <3> 	mov ds,ax
  9603                              <3> 	dec word [%2]
  9604                              <3> %endmacro
  9605                              <3> 
  9606                              <3> %macro add16 4	
  9607                              <3> 	mov ax,%3
  9608                              <3> 	mov ds,ax
  9609                              <3> 	mov bx,[%4]	
  9610                              <3> 	mov ax,%1
  9611                              <3> 	mov ds,ax	
  9612                              <3> 	add [%2],bx
  9613                              <3> %endmacro
  9614                              <3> 
  9615                              <3> %macro sub16 4
  9616                              <3> 	mov ax,%3
  9617                              <3> 	mov ds,ax
  9618                              <3> 	mov bx,[%4]
  9619                              <3> 	mov ax,%1
  9620                              <3> 	mov ds,ax
  9621                              <3> 	sub [%2],bx
  9622                              <3> %endmacro
  9623                              <3> 
  9624                              <3> %macro mul16 4
  9625                              <3> 	mov ax,%1
  9626                              <3> 	mov ds,ax
  9627                              <3> 	mov bx,[%2]
  9628                              <3> 	mov ax,%3
  9629                              <3> 	mov ds,ax
  9630                              <3> 	mov cx,[%4]
  9631                              <3> 	
  9632                              <3> 	mov ax,bx
  9633                              <3> 	imul cx
  9634                              <3> 	
  9635                              <3> 	mov dx,%1
  9636                              <3> 	mov ds,dx
  9637                              <3> 	mov [%2],ax
  9638                              <3> %endmacro
  9639                              <3> 
  9640                              <3> %macro div16 4
  9641                              <3> 	mov ax,%1
  9642                              <3> 	mov ds,ax
  9643                              <3> 	mov bx,[%2]
  9644                              <3> 	mov ax,%3
  9645                              <3> 	mov ds,ax
  9646                              <3> 	mov cx,[%4]
  9647                              <3> 	
  9648                              <3> 	xor dx,dx
  9649                              <3> 	mov ax,bx
  9650                              <3> 	idiv cx
  9651                              <3> 	
  9652                              <3> 	mov dx,%1
  9653                              <3> 	mov ds,dx
  9654                              <3> 	mov [%2],ax
  9655                              <3> %endmacro
  9656                              <3> 
  9657                              <3> 
  9658                              <3> %macro mod16 4
  9659                              <3> 	mov ax,%1
  9660                              <3> 	mov ds,ax
  9661                              <3> 	mov bx,[%2]
  9662                              <3> 	mov ax,%3
  9663                              <3> 	mov ds,ax
  9664                              <3> 	mov cx,[%4]
  9665                              <3> 	
  9666                              <3> 	xor dx,dx
  9667                              <3> 	mov ax,bx
  9668                              <3> 	idiv cx
  9669                              <3> 	
  9670                              <3> 	mov bx,%1
  9671                              <3> 	mov ds,bx
  9672                              <3> 	mov [%2],dx
  9673                              <3> %endmacro
  9674                              <3> 
  9675                              <3> %macro cmp16 5
  9676                              <3> 	mov ax,%1
  9677                              <3> 	mov ds,ax
  9678                              <3> 	mov bx,[%2]
  9679                              <3> 	mov ax,%3
  9680                              <3> 	mov ds,ax
  9681                              <3> 	mov	cx,[%4]
  9682                              <3> 	
  9683                              <3> 	cmp bx,cx
  9684                              <3> 	jg %%above
  9685                              <3> 	jl %%below
  9686                              <3> 		mov byte %5, 0
  9687                              <3> 		jmp %%endcmp
  9688                              <3> 	%%above:
  9689                              <3> 		mov byte %5, 1
  9690                              <3> 		jmp %%endcmp
  9691                              <3> 	%%below:
  9692                              <3> 		mov byte %5, -1
  9693                              <3> 	%%endcmp:
  9694                              <3> %endmacro
  9695                              <3> 
  9696                              <3> %macro chgsig 2
  9697                              <3> 	mov ax,%1
  9698                              <3> 	mov ds,ax
  9699                              <3> 	mov ax,[%2]
  9700                              <3> 	mov bx,0xFFFF
  9701                              <3> 	sub bx,ax
  9702                              <3> 	inc bx
  9703                              <3> 	mov [%2],bx
  9704                              <3> %endmacro
  9705                              <3> 	
  9706                              <3> %endif
  9707                              <2> 	%include "lib/float.mac"
  9708                              <3> 
  9709                              <3> %ifndef FLOAT_MAC
  9710                              <3> 	%define FLOAT_MAC
  9711                              <3> 	
  9712                              <3> 	%include "lib/float.asm"	
  9713                              <3> 
  9714                              <3> %macro flgetsig 2
  9715                              <3> 	flgetsig cs, %1, %2
  9716                              <3> %endmacro
  9717                              <3> 
  9718                              <3> %macro flinvsig 1
  9719                              <3> 	flinvsig cs, %1
  9720                              <3> %endmacro
  9721                              <3> 
  9722                              <3> %macro flsetsig 1
  9723                              <3> 	flsetsig cs, %1
  9724                              <3> %endmacro
  9725                              <3> 
  9726                              <3> %macro flclrsig 1
  9727                              <3> 	flclrsig cs, %1
  9728                              <3> %endmacro
  9729                              <3> 
  9730                              <3> %macro flroundtoint16 2
  9731                              <3> 	flroundtoint16 cs, %1, cs, %2
  9732                              <3> %endmacro
  9733                              <3> 
  9734                              <3> %macro flroundtoint32 1
  9735                              <3> 	flroundtoint32 %1, %1
  9736                              <3> %endmacro
  9737                              <3> 
  9738                              <3> %macro flroundtoint32 2
  9739                              <3> 	flroundtoint32 cs, %1, cs, %2
  9740                              <3> %endmacro
  9741                              <3> 
  9742                              <3> %macro int16tofl 2
  9743                              <3> 	int16tofl cs, %1, cs, %2
  9744                              <3> %endmacro
  9745                              <3> 
  9746                              <3> %macro fltoint16 2
  9747                              <3> 	fltoint16 cs, %1, cs, %2
  9748                              <3> %endmacro
  9749                              <3> 
  9750                              <3> %macro fltoint32 1
  9751                              <3> 	fltoint32 %1, %1
  9752                              <3> %endmacro
  9753                              <3> 
  9754                              <3> %macro fltoint32 2
  9755                              <3> 	fltoint32 cs, %1, cs, %2
  9756                              <3> %endmacro
  9757                              <3> 
  9758                              <3> %macro int32tofl 1
  9759                              <3> 	int32tofl %1, %1
  9760                              <3> %endmacro
  9761                              <3> 
  9762                              <3> %macro int32tofl 2
  9763                              <3> 	int32tofl cs, %1, cs, %2
  9764                              <3> %endmacro
  9765                              <3> 
  9766                              <3> %macro flcmp 3
  9767                              <3> 	flcmp cs, %1, cs, %2, %3
  9768                              <3> %endmacro
  9769                              <3> 
  9770                              <3> %macro flshl 2
  9771                              <3> 	flshl cs, %1, cs, %2
  9772                              <3> %endmacro
  9773                              <3> 
  9774                              <3> %macro flshr 2
  9775                              <3> 	flshr cs, %1, cs, %2
  9776                              <3> %endmacro
  9777                              <3> 
  9778                              <3> %macro fladd 3
  9779                              <3> 	fladd cs, %1, cs, %2, cs, %3
  9780                              <3> %endmacro
  9781                              <3> 
  9782                              <3> %macro flsub 3
  9783                              <3> 	flsub cs, %1, cs, %2, cs, %3
  9784                              <3> %endmacro	
  9785                              <3> 
  9786                              <3> %macro flmul 3
  9787                              <3> 	flmul cs, %1, cs, %2, cs, %3
  9788                              <3> %endmacro
  9789                              <3> 
  9790                              <3> %macro fldiv 3
  9791                              <3> 	fldiv cs, %1, cs, %2, cs, %3
  9792                              <3> %endmacro	
  9793                              <3> 
  9794                              <3> %macro fladd 6
  9795                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  9796                              <3> %endmacro
  9797                              <3> 
  9798                              <3> %macro flsub 6
  9799                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  9800                              <3> %endmacro
  9801                              <3> 
  9802                              <3> %macro flroundtoint16 4
  9803                              <3> 	stkopen 0x06
  9804                              <3> 	mov ax,%1
  9805                              <3> 	mov ds,ax
  9806                              <3> 	mov ax,[%2+2]
  9807                              <3> 	mov [bp+0],ax
  9808                              <3> 	mov ax,[%2]
  9809                              <3> 	mov [bp+2],ax	
  9810                              <3> 	call proc_flroundtoint16
  9811                              <3> 	mov ax,sp
  9812                              <3> 	mov bp,ax
  9813                              <3> 	mov ax,%3
  9814                              <3> 	mov ds,ax
  9815                              <3> 	mov ax,[bp+4]
  9816                              <3> 	mov [%4],ax
  9817                              <3> 	stkclose 0x06
  9818                              <3> %endmacro
  9819                              <3> 
  9820                              <3> %macro flroundtoint32 4
  9821                              <3> 	stkopen 0x08
  9822                              <3> 	mov ax,%1
  9823                              <3> 	mov ds,ax
  9824                              <3> 	mov ax,[%2+2]
  9825                              <3> 	mov [bp+0],ax
  9826                              <3> 	mov ax,[%2]
  9827                              <3> 	mov [bp+2],ax	
  9828                              <3> 	call proc_flroundtoint32
  9829                              <3> 	mov ax,sp
  9830                              <3> 	mov bp,ax
  9831                              <3> 	mov ax,%3
  9832                              <3> 	mov ds,ax
  9833                              <3> 	mov ax,[bp+4]
  9834                              <3> 	mov [%4+2],ax
  9835                              <3> 	mov ax,[bp+6]
  9836                              <3> 	mov [%4],ax
  9837                              <3> 	stkclose 0x08
  9838                              <3> %endmacro
  9839                              <3> 
  9840                              <3> %macro fltoint16 4
  9841                              <3> 	stkopen 0x06
  9842                              <3> 	mov ax,%1
  9843                              <3> 	mov ds,ax
  9844                              <3> 	mov ax,[%2+2]
  9845                              <3> 	mov [bp+0],ax
  9846                              <3> 	mov ax,[%2]
  9847                              <3> 	mov [bp+2],ax	
  9848                              <3> 	call proc_fltoint16
  9849                              <3> 	mov ax,sp
  9850                              <3> 	mov bp,ax
  9851                              <3> 	mov ax,%3
  9852                              <3> 	mov ds,ax
  9853                              <3> 	mov ax,[bp+4]
  9854                              <3> 	mov [%4],ax
  9855                              <3> 	stkclose 0x06
  9856                              <3> %endmacro
  9857                              <3> 
  9858                              <3> %macro int16tofl 4	
  9859                              <3> 	stkopen 0x06
  9860                              <3> 	mov ax,%1
  9861                              <3> 	mov ds,ax
  9862                              <3> 	mov ax,[%2]
  9863                              <3> 	mov [bp+0],ax	
  9864                              <3> 	call proc_int16tofl
  9865                              <3> 	mov ax,sp
  9866                              <3> 	mov bp,ax
  9867                              <3> 	mov ax,%3
  9868                              <3> 	mov ds,ax
  9869                              <3> 	mov ax,[bp+2]
  9870                              <3> 	mov [%4+2],ax
  9871                              <3> 	mov ax,[bp+4]
  9872                              <3> 	mov [%4],ax
  9873                              <3> 	stkclose 0x06
  9874                              <3> %endmacro
  9875                              <3> 
  9876                              <3> %macro fltoint32 4
  9877                              <3> 	stkopen 0x08
  9878                              <3> 	mov ax,%1
  9879                              <3> 	mov ds,ax
  9880                              <3> 	mov ax,[%2+2]
  9881                              <3> 	mov [bp+0],ax
  9882                              <3> 	mov ax,[%2]
  9883                              <3> 	mov [bp+2],ax	
  9884                              <3> 	call proc_fltoint32
  9885                              <3> 	mov ax,sp
  9886                              <3> 	mov bp,ax
  9887                              <3> 	mov ax,%3
  9888                              <3> 	mov ds,ax
  9889                              <3> 	mov ax,[bp+4]
  9890                              <3> 	mov [%4+2],ax
  9891                              <3> 	mov ax,[bp+6]
  9892                              <3> 	mov [%4],ax
  9893                              <3> 	stkclose 0x08
  9894                              <3> %endmacro
  9895                              <3> 
  9896                              <3> %macro int32tofl 4
  9897                              <3> 	stkopen 0x08
  9898                              <3> 	mov ax,%1
  9899                              <3> 	mov ds,ax
  9900                              <3> 	mov ax,[%2+2]
  9901                              <3> 	mov [bp+0],ax
  9902                              <3> 	mov ax,[%2]
  9903                              <3> 	mov [bp+2],ax	
  9904                              <3> 	call proc_int32tofl
  9905                              <3> 	mov ax,sp
  9906                              <3> 	mov bp,ax
  9907                              <3> 	mov ax,%3
  9908                              <3> 	mov ds,ax
  9909                              <3> 	mov ax,[bp+4]
  9910                              <3> 	mov [%4+2],ax
  9911                              <3> 	mov ax,[bp+6]
  9912                              <3> 	mov [%4],ax
  9913                              <3> 	stkclose 0x08
  9914                              <3> %endmacro
  9915                              <3> 
  9916                              <3> %macro flgetsig 3
  9917                              <3> 	stkopen 0x04
  9918                              <3> 	mov ax,%1
  9919                              <3> 	mov ds,ax
  9920                              <3> 	mov ax,[%2+2]
  9921                              <3> 	mov word [bp+0], ax
  9922                              <3> 	call proc_flgetsig
  9923                              <3> 	push sp
  9924                              <3> 	pop bp
  9925                              <3> 	mov ax,[bp+2]
  9926                              <3> 	mov word %3, ax
  9927                              <3> 	stkclose 0x04
  9928                              <3> %endmacro
  9929                              <3> 
  9930                              <3> %macro flinvsig 2
  9931                              <3> 	stkopen 0x02
  9932                              <3> 	mov ax,%1
  9933                              <3> 	mov ds,ax
  9934                              <3> 	mov ax,[%2+2]
  9935                              <3> 	mov word [bp+0], ax
  9936                              <3> 	call proc_flinvsig
  9937                              <3> 	push sp
  9938                              <3> 	pop bp
  9939                              <3> 	mov ax,[bp+0]
  9940                              <3> 	mov word [%2+2],ax
  9941                              <3> 	stkclose 0x02
  9942                              <3> %endmacro
  9943                              <3> 
  9944                              <3> %macro flsetsig 2
  9945                              <3> 	stkopen 0x04
  9946                              <3> 	mov ax,%1
  9947                              <3> 	mov ds,ax
  9948                              <3> 	mov ax,[%2+2]
  9949                              <3> 	mov word [bp+0], ax
  9950                              <3> 	mov word [bp+2], 0x8000
  9951                              <3> 	call proc_flsetsig
  9952                              <3> 	push sp
  9953                              <3> 	pop bp
  9954                              <3> 	mov ax,[bp+0]
  9955                              <3> 	mov word [%2+2],ax
  9956                              <3> 	stkclose 0x04	
  9957                              <3> %endmacro
  9958                              <3> 
  9959                              <3> %macro flclrsig 2
  9960                              <3> 	stkopen 0x04
  9961                              <3> 	mov ax,%1
  9962                              <3> 	mov ds,ax
  9963                              <3> 	mov ax,[%2+2]
  9964                              <3> 	mov word [bp+0], ax
  9965                              <3> 	mov word [bp+2], 0x0000
  9966                              <3> 	call proc_flsetsig
  9967                              <3> 	push sp
  9968                              <3> 	pop bp
  9969                              <3> 	mov ax,[bp+0]
  9970                              <3> 	mov word [%2+2],ax
  9971                              <3> 	stkclose 0x04	
  9972                              <3> %endmacro
  9973                              <3> 
  9974                              <3> %macro flcmp 5	
  9975                              <3> 	stkopen 0x09
  9976                              <3> 	mov ax,%1
  9977                              <3> 	mov ds,ax
  9978                              <3> 	mov ax,[%2+2]
  9979                              <3> 	mov [bp+0],ax
  9980                              <3> 	mov ax,[%2]
  9981                              <3> 	mov [bp+2],ax
  9982                              <3> 	mov ax,%3
  9983                              <3> 	mov ds,ax
  9984                              <3> 	mov ax,[%4+2]
  9985                              <3> 	mov [bp+4],ax
  9986                              <3> 	mov ax,[%4]
  9987                              <3> 	mov [bp+6],ax
  9988                              <3> 	call proc_flcmp
  9989                              <3> 	mov ax,sp
  9990                              <3> 	mov bp,ax
  9991                              <3> 	mov byte %5,[bp+8]
  9992                              <3> 	stkclose 0x09
  9993                              <3> %endmacro
  9994                              <3> 
  9995                              <3> %macro flshl 4	
  9996                              <3> 	stkopen 0x03
  9997                              <3> 	mov ax,%1
  9998                              <3> 	mov ds,ax
  9999                              <3> 	mov ax,[%2+2]
 10000                              <3> 	mov [bp+0],ax
 10001                              <3> 	mov ax,%3
 10002                              <3> 	mov ds,ax
 10003                              <3> 	mov al,[%4]
 10004                              <3> 	mov [bp+2],al
 10005                              <3> 	call proc_flshl
 10006                              <3> 	mov ax,sp
 10007                              <3> 	mov bp,ax
 10008                              <3> 	mov ax,%1
 10009                              <3> 	mov ds,ax
 10010                              <3> 	mov ax,[bp+0]
 10011                              <3> 	mov [%2+2],ax
 10012                              <3> 	stkclose 0x03
 10013                              <3> %endmacro
 10014                              <3> 
 10015                              <3> %macro flshr 4	
 10016                              <3> 	stkopen 0x03
 10017                              <3> 	mov ax,%1
 10018                              <3> 	mov ds,ax
 10019                              <3> 	mov ax,[%2+2]
 10020                              <3> 	mov [bp+0],ax	
 10021                              <3> 	mov ax,%3
 10022                              <3> 	mov ds,ax
 10023                              <3> 	mov al,[%4]
 10024                              <3> 	mov [bp+2],al
 10025                              <3> 	call proc_flshr
 10026                              <3> 	mov ax,sp
 10027                              <3> 	mov bp,ax
 10028                              <3> 	mov ax,%1
 10029                              <3> 	mov ds,ax
 10030                              <3> 	mov ax,[bp+0]
 10031                              <3> 	mov [%2+2],ax
 10032                              <3> 	stkclose 0x03
 10033                              <3> %endmacro
 10034                              <3> 
 10035                              <3> %macro fldiv 6	
 10036                              <3> 	stkopen 0x0C
 10037                              <3> 	mov ax,%1
 10038                              <3> 	mov ds,ax
 10039                              <3> 	mov ax,[%2+2]
 10040                              <3> 	mov [bp+0],ax
 10041                              <3> 	mov ax,[%2]
 10042                              <3> 	mov [bp+2],ax
 10043                              <3> 	mov ax,%3
 10044                              <3> 	mov ds,ax
 10045                              <3> 	mov ax,[%4+2]
 10046                              <3> 	mov [bp+4],ax
 10047                              <3> 	mov ax,[%4]
 10048                              <3> 	mov [bp+6],ax
 10049                              <3> 	call proc_fldiv
 10050                              <3> 	mov ax,sp
 10051                              <3> 	mov bp,ax
 10052                              <3> 	mov ax,%5
 10053                              <3> 	mov ds,ax
 10054                              <3> 	mov ax,[bp+8]
 10055                              <3> 	mov [%6+2],ax
 10056                              <3> 	mov ax,[bp+0x0A]
 10057                              <3> 	mov [%6],ax
 10058                              <3> 	stkclose 0x0C
 10059                              <3> %endmacro
 10060                              <3> 
 10061                              <3> %macro flmul 6	
 10062                              <3> 	stkopen 0x0C
 10063                              <3> 	mov ax,%1
 10064                              <3> 	mov ds,ax
 10065                              <3> 	mov ax,[%2+2]
 10066                              <3> 	mov [bp+0],ax
 10067                              <3> 	mov ax,[%2]
 10068                              <3> 	mov [bp+2],ax
 10069                              <3> 	mov ax,%3
 10070                              <3> 	mov ds,ax
 10071                              <3> 	mov ax,[%4+2]
 10072                              <3> 	mov [bp+4],ax
 10073                              <3> 	mov ax,[%4]
 10074                              <3> 	mov [bp+6],ax
 10075                              <3> 	call proc_flmul
 10076                              <3> 	mov ax,sp
 10077                              <3> 	mov bp,ax
 10078                              <3> 	mov ax,%5
 10079                              <3> 	mov ds,ax
 10080                              <3> 	mov ax,[bp+8]
 10081                              <3> 	mov [%6+2],ax
 10082                              <3> 	mov ax,[bp+0x0A]
 10083                              <3> 	mov [%6],ax
 10084                              <3> 	stkclose 0x0C
 10085                              <3> %endmacro
 10086                              <3> 	
 10087                              <3> %macro fladdorsub 7
 10088                              <3> 	stkopen 0x0E
 10089                              <3> 	mov ax,%1
 10090                              <3> 	mov ds,ax
 10091                              <3> 	mov ax,[%2+2]
 10092                              <3> 	mov [bp+0],ax
 10093                              <3> 	mov ax,[%2]
 10094                              <3> 	mov [bp+2],ax
 10095                              <3> 	mov ax,%3
 10096                              <3> 	mov ds,ax
 10097                              <3> 	mov ax,[%4+2]
 10098                              <3> 	mov [bp+4],ax
 10099                              <3> 	mov ax,[%4]
 10100                              <3> 	mov [bp+6],ax
 10101                              <3> 	mov word [bp+0x0C], %7
 10102                              <3> 	call proc_fladdorsub
 10103                              <3> 	mov ax,sp
 10104                              <3> 	mov bp,ax
 10105                              <3> 	mov ax,%5
 10106                              <3> 	mov ds,ax
 10107                              <3> 	mov ax,[bp+8]
 10108                              <3> 	mov [%6+2],ax
 10109                              <3> 	mov ax,[bp+0x0A]
 10110                              <3> 	mov [%6],ax
 10111                              <3> 	stkclose 0x0E
 10112                              <3> %endmacro
 10113                              <3> 	
 10114                              <3> %endif
 10115                              <2> 	%include "lib/trigon.mac"
 10116                              <3> 
 10117                              <3> %ifndef TRIGON_MAC
 10118                              <3> 	%define TRIGON_MAC
 10119                              <3> 
 10120                              <3> 	%include "lib/trigon.asm"
 10121                              <3> 	
 10122                              <3> %macro to0x360 1
 10123                              <3> 	to0x360 %1, %1
 10124                              <3> %endmacro
 10125                              <3> 
 10126                              <3> %macro to0x360 2
 10127                              <3> 	to0x360 cs, %1, cs, %2
 10128                              <3> %endmacro
 10129                              <3> 
 10130                              <3> %macro toradians 1
 10131                              <3> 	toradians %1, %1
 10132                              <3> %endmacro
 10133                              <3> 
 10134                              <3> %macro todegrees 1
 10135                              <3> 	todegrees %1, %1
 10136                              <3> %endmacro
 10137                              <3> 
 10138                              <3> %macro toradians 2
 10139                              <3> 	toradians cs, %1, cs, %2
 10140                              <3> %endmacro
 10141                              <3> 	
 10142                              <3> %macro todegrees 2
 10143                              <3> 	todegrees cs, %1, cs, %2
 10144                              <3> %endmacro	
 10145                              <3> 	
 10146                              <3> %macro atan 1
 10147                              <3> 	atan %1, %1
 10148                              <3> %endmacro	
 10149                              <3> 	
 10150                              <3> %macro atan 2
 10151                              <3> 	atan cs, %1, cs, %2
 10152                              <3> %endmacro	
 10153                              <3> 	
 10154                              <3> %macro sin 1
 10155                              <3> 	sin %1, %1
 10156                              <3> %endmacro	
 10157                              <3> 	
 10158                              <3> %macro sin 2
 10159                              <3> 	sin cs, %1, cs, %2
 10160                              <3> %endmacro
 10161                              <3> 
 10162                              <3> %macro cos 1
 10163                              <3> 	cos %1, %1
 10164                              <3> %endmacro	
 10165                              <3> 	
 10166                              <3> %macro cos 2
 10167                              <3> 	cos cs, %1, cs, %2
 10168                              <3> %endmacro		
 10169                              <3> 	
 10170                              <3> %macro sin 4
 10171                              <3> 	sinorcos %1, %2, %3, %4, 1
 10172                              <3> %endmacro
 10173                              <3> 
 10174                              <3> %macro cos 4
 10175                              <3> 	sinorcos %1, %2, %3, %4, 0
 10176                              <3> %endmacro
 10177                              <3> 
 10178                              <3> %macro to0x360 4
 10179                              <3> 	stkopen 0x08
 10180                              <3> 	mov ax,%1
 10181                              <3> 	mov ds,ax
 10182                              <3> 	mov ax,[%2+2]
 10183                              <3> 	mov [bp+0],ax
 10184                              <3> 	mov ax,[%2]
 10185                              <3> 	mov [bp+2],ax
 10186                              <3> 	call proc_to0x360
 10187                              <3> 	mov ax,sp
 10188                              <3> 	mov bp,ax
 10189                              <3> 	mov ax,%3
 10190                              <3> 	mov ds,ax
 10191                              <3> 	mov ax,[bp+4]
 10192                              <3> 	mov [%4+2],ax
 10193                              <3> 	mov ax,[bp+6]
 10194                              <3> 	mov [%4],ax
 10195                              <3> 	stkclose 0x08
 10196                              <3> %endmacro	
 10197                              <3> 
 10198                              <3> %macro toradians 4
 10199                              <3> 	stkopen 0x08
 10200                              <3> 	mov ax,%1
 10201                              <3> 	mov ds,ax
 10202                              <3> 	mov ax,[%2+2]
 10203                              <3> 	mov [bp+0],ax
 10204                              <3> 	mov ax,[%2]
 10205                              <3> 	mov [bp+2],ax
 10206                              <3> 	call proc_toradians
 10207                              <3> 	mov ax,sp
 10208                              <3> 	mov bp,ax
 10209                              <3> 	mov ax,%3
 10210                              <3> 	mov ds,ax
 10211                              <3> 	mov ax,[bp+4]
 10212                              <3> 	mov [%4+2],ax
 10213                              <3> 	mov ax,[bp+6]
 10214                              <3> 	mov [%4],ax
 10215                              <3> 	stkclose 0x08
 10216                              <3> %endmacro	
 10217                              <3> 
 10218                              <3> %macro todegrees 4
 10219                              <3> 	stkopen 0x08
 10220                              <3> 	mov ax,%1
 10221                              <3> 	mov ds,ax
 10222                              <3> 	mov ax,[%2+2]
 10223                              <3> 	mov [bp+0],ax
 10224                              <3> 	mov ax,[%2]
 10225                              <3> 	mov [bp+2],ax
 10226                              <3> 	call proc_todegrees
 10227                              <3> 	mov ax,sp
 10228                              <3> 	mov bp,ax
 10229                              <3> 	mov ax,%3
 10230                              <3> 	mov ds,ax
 10231                              <3> 	mov ax,[bp+4]
 10232                              <3> 	mov [%4+2],ax
 10233                              <3> 	mov ax,[bp+6]
 10234                              <3> 	mov [%4],ax
 10235                              <3> 	stkclose 0x08
 10236                              <3> %endmacro	
 10237                              <3> 
 10238                              <3> %macro atan 4
 10239                              <3> 	stkopen 0x08
 10240                              <3> 	mov ax,%1
 10241                              <3> 	mov ds,ax
 10242                              <3> 	mov ax,[%2+2]
 10243                              <3> 	mov [bp+0],ax
 10244                              <3> 	mov ax,[%2]
 10245                              <3> 	mov [bp+2],ax
 10246                              <3> 	call proc_atan
 10247                              <3> 	mov ax,sp
 10248                              <3> 	mov bp,ax
 10249                              <3> 	mov ax,%3
 10250                              <3> 	mov ds,ax
 10251                              <3> 	mov ax,[bp+4]
 10252                              <3> 	mov [%4+2],ax
 10253                              <3> 	mov ax,[bp+6]
 10254                              <3> 	mov [%4],ax
 10255                              <3> 	stkclose 0x08
 10256                              <3> %endmacro
 10257                              <3> 	
 10258                              <3> %macro sinorcos 5
 10259                              <3> 	stkopen 0x09
 10260                              <3> 	mov ax,%1
 10261                              <3> 	mov ds,ax
 10262                              <3> 	mov ax,[%2+2]
 10263                              <3> 	mov [bp+0],ax
 10264                              <3> 	mov ax,[%2]
 10265                              <3> 	mov [bp+2],ax
 10266                              <3> 	mov byte [bp+8],%5	
 10267                              <3> 	call proc_sinorcos
 10268                              <3> 	mov ax,sp
 10269                              <3> 	mov bp,ax
 10270                              <3> 	mov ax,%3
 10271                              <3> 	mov ds,ax
 10272                              <3> 	mov ax,[bp+4]
 10273                              <3> 	mov [%4+2],ax
 10274                              <3> 	mov ax,[bp+6]
 10275                              <3> 	mov [%4],ax
 10276                              <3> 	stkclose 0x09
 10277                              <3> %endmacro
 10278                              <3> 	
 10279                              <3> %endif
 10280                              <2> 
 10281                              <2> 	%include "src/lib/constants.asm"
 10282                              <3> %ifndef CONSTANTS_ASM
 10283                              <3> 	%define CONSTANTS_ASM
 10284                              <3> 					
 10285                              <3> section .data
 10286                              <3> 	__FL_ZERO: dd 0
 10287                              <3> 	__FL_ONE: dd 0x3F800000
 10288                              <3> 	__FL_NEG_ONE: dd 0xBF800000
 10289                              <3> 
 10290                              <3> 	__ZERO: dw 0
 10291                              <3> 	__ONE: dw 1
 10292                              <3> 		
 10293                              <3> 	__ball_color: db 09h
 10294                              <3> 	__ball_bordercolor: db 07h
 10295                              <3> 	
 10296                              <3> 	__tray_color: db 00h
 10297                              <3> 	__tray_bordercolor: db 07h	
 10298                              <3> 	
 10299                              <3> 	__square_bordercolor: db 07h
 10300                              <3> 	__square_ycolor: db 0x01, 0x02, 0x04, 0x09
 10301                              <3> 	
 10302                              <3> 	__racket_color: db 09h
 10303                              <3> 	__racket_bordercolor: db 07h	
 10304                              <3> 	
 10305                              <3> 	__message_default_color: db 07h	
 10306                              <3> 	__message_win_color: db 09h	
 10307                              <3> 	__message_lose_color: db 04h	
 10308                              <3> 								
 10309                              <3> %endif
 10310                              <2> 
 10311                              <2> section .data	
 10312 00001A32 0000A042            <2> 	__BALL_X: dd 80.0
 10313 00001A36 0000A042            <2> 	__BALL_Y: dd 80.0
 10314                              <2> 	
 10315 00001A3A 0000803F            <2> 	__BALL_RINC: dd 1.0
 10316                              <2> 	
 10317 00001A3E 00003442            <2> 	__BALL_ANGLE: dd 45.0
 10318 00001A42 00007041            <2> 	__BALL_VAR_ANGLE: dd 15.0
 10319                              <2> 	
 10320 00001A46 00000000            <2> 	__ball_x: dd 0
 10321 00001A4A 00000000            <2> 	__ball_y: dd 0	
 10322 00001A4E 00002041            <2> 	__ball_radial: dd 10.0		
 10323 00001A52 00000000            <2> 	__ball_xinc: dd 0
 10324 00001A56 00000000            <2> 	__ball_yinc: dd 0
 10325 00001A5A 00000000            <2> 	__ball_rinc: dd 0
 10326 00001A5E 00000000            <2> 	__ball_angle: dd 0
 10327 00001A62 00000000            <2> 	__ball_var_angle: dd 0
 10328 00001A66 0000                <2> 	__ball_angle_inc: dw 0
 10329                              <2> 				
 10330                              <2> %macro ball_initialize 0
 10331                              <2> section .data
 10332                              <2> 	%%tray_x1: dd 0
 10333                              <2> 	%%tray_y1: dd 0
 10334                              <2> section .text
 10335                              <2> 	int16tofl __tray_x1, %%tray_x1
 10336                              <2> 	int16tofl __tray_y1, %%tray_y1
 10337                              <2> 
 10338                              <2> 	mov32 __ball_x, __BALL_X
 10339                              <2> 	mov32 __ball_y, __BALL_Y	
 10340                              <2> 	fladd __ball_x, %%tray_x1, __ball_x	
 10341                              <2> 	fladd __ball_y, %%tray_y1, __ball_y
 10342                              <2> 
 10343                              <2> 	mov32 __ball_rinc, __BALL_RINC	
 10344                              <2> 	toradians __BALL_ANGLE, __ball_angle
 10345                              <2> 	toradians __BALL_VAR_ANGLE, __ball_var_angle
 10346                              <2> 	
 10347                              <2> 	ball_updateangle
 10348                              <2> %endmacro
 10349                              <2> 
 10350                              <2> %macro ball_move 0
 10351                              <2> section .data
 10352                              <2> 	%%xb: dd 0
 10353                              <2> 	%%yb: dd 0
 10354                              <2> 	%%x: dw 0
 10355                              <2> 	%%y: dw 0
 10356                              <2> section .text
 10357                              <2> 	mov32 %%xb, __ball_x
 10358                              <2> 	mov32 %%yb, __ball_y
 10359                              <2> 
 10360                              <2> 	fladd %%xb, __ball_xinc, %%xb
 10361                              <2> 	fladd %%yb, __ball_yinc, %%yb
 10362                              <2> 	
 10363                              <2> 	fltoint16 %%xb, %%x
 10364                              <2> 	fltoint16 %%yb, %%y
 10365                              <2> 	
 10366                              <2> 	flcmp %%x, __tray_x1, cl
 10367                              <2> 	cmp cl,0
 10368                              <2> 	jle %%end
 10369                              <2> 	
 10370                              <2> 	flcmp %%x, __tray_x2, cl
 10371                              <2> 	cmp cl,0
 10372                              <2> 	jge %%end
 10373                              <2> 	
 10374                              <2> 	cmp16 %%y, __tray_y1, cl
 10375                              <2> 	cmp cl,0
 10376                              <2> 	jle %%end
 10377                              <2> 	
 10378                              <2> 	cmp16 %%y, __tray_y2, cl
 10379                              <2> 	cmp cl,0
 10380                              <2> 	jge %%end
 10381                              <2> 	
 10382                              <2> 		mov32 __ball_x, %%xb
 10383                              <2> 		mov32 __ball_y, %%yb
 10384                              <2> 		
 10385                              <2> 	%%end:
 10386                              <2> %endmacro
 10387                              <2> 
 10388                              <2> 
 10389                              <2> %macro ball_leftangle 0				
 10390                              <2> 	flinvsig __ball_angle							
 10391                              <2> 	to0x360 __ball_angle	
 10392                              <2> 
 10393                              <2> 	validate_subangle cl			
 10394                              <2> 	cmp cl,0
 10395                              <2> 	jnz %%altered			
 10396                              <2> 		flsub __ball_angle, __ball_var_angle, __ball_angle
 10397                              <2> 	%%altered:
 10398                              <2> 	
 10399                              <2> 	ball_updateangle
 10400                              <2> %endmacro
 10401                              <2> 
 10402                              <2> %macro ball_rightangle 0
 10403                              <2> 	flinvsig __ball_angle	
 10404                              <2> 	to0x360 __ball_angle
 10405                              <2> 			
 10406                              <2> 	validate_addangle cl			
 10407                              <2> 	cmp cl,0
 10408                              <2> 	jnz %%altered	
 10409                              <2> 		fladd __ball_angle, __ball_var_angle, __ball_angle			
 10410                              <2> 	%%altered:
 10411                              <2> 			
 10412                              <2> 	ball_updateangle
 10413                              <2> %endmacro
 10414                              <2> 
 10415                              <2> %macro validate_addangle 1
 10416                              <2> section .data
 10417                              <2> 	%%angle: dd 0
 10418                              <2> 	%%270rad: dd 0x4096CBE4
 10419                              <2> 	%%360rad: dd 0x40C90FDB
 10420                              <2> 	%%aux: dd 0
 10421                              <2> section .text
 10422                              <2> 	mov32 %%angle, __ball_angle
 10423                              <2> 	fladd %%angle, __ball_var_angle, %%angle
 10424                              <2> 		
 10425                              <2> 	mov32 %%aux, %%270rad
 10426                              <2> 	flsub %%aux, __ball_var_angle, %%aux
 10427                              <2> 	flcmp %%angle, %%aux, cl
 10428                              <2> 	cmp cl,0
 10429                              <2> 	jle %%valid
 10430                              <2> 
 10431                              <2> 	flcmp %%angle, %%270rad, cl
 10432                              <2> 	cmp cl,0
 10433                              <2> 	jle %%invalid
 10434                              <2> 	
 10435                              <2> 	mov32 %%aux, %%360rad
 10436                              <2> 	flsub %%aux, __ball_var_angle, %%aux
 10437                              <2> 	flcmp %%angle, %%aux, cl
 10438                              <2> 	cmp cl,0
 10439                              <2> 	jle %%valid
 10440                              <2> 	jmp %%invalid
 10441                              <2> 	
 10442                              <2> 	%%valid:
 10443                              <2> 		mov byte %1, 0
 10444                              <2> 		jmp %%end
 10445                              <2> 	%%invalid:
 10446                              <2> 		mov byte %1, 1
 10447                              <2> 	%%end:	
 10448                              <2> %endmacro
 10449                              <2> 
 10450                              <2> %macro validate_subangle 1
 10451                              <2> section .data
 10452                              <2> 	%%angle: dd 0
 10453                              <2> 	%%180rad: dd 0x40490FDB
 10454                              <2> 	%%270rad: dd 0x4096CBE4
 10455                              <2> 	%%aux: dd 0
 10456                              <2> section .text
 10457                              <2> 	mov32 %%angle, __ball_angle
 10458                              <2> 	flsub %%angle, __ball_var_angle, %%angle
 10459                              <2> 	
 10460                              <2> 	mov32 %%aux, %%270rad
 10461                              <2> 	fladd %%aux, __ball_var_angle, %%aux
 10462                              <2> 	flcmp %%angle, %%aux, cl
 10463                              <2> 	cmp cl,0
 10464                              <2> 	jge %%valid			
 10465                              <2> 			
 10466                              <2> 	flcmp %%angle, %%270rad, cl
 10467                              <2> 	cmp cl,0
 10468                              <2> 	jge %%invalid
 10469                              <2> 	
 10470                              <2> 	mov32 %%aux, %%180rad
 10471                              <2> 	fladd %%aux, __ball_var_angle, %%aux
 10472                              <2> 	flcmp %%angle, %%aux, cl
 10473                              <2> 	cmp cl,0
 10474                              <2> 	jge %%valid
 10475                              <2> 	jmp %%invalid
 10476                              <2> 			
 10477                              <2> 	%%valid:
 10478                              <2> 		mov byte %1, 0
 10479                              <2> 		jmp %%end
 10480                              <2> 	%%invalid:
 10481                              <2> 		mov byte %1, 1
 10482                              <2> 	%%end:	
 10483                              <2> %endmacro
 10484                              <2> 
 10485                              <2> %macro ball_xinvdirection 0
 10486                              <2> 	flinvsig __ball_angle
 10487                              <2> 	to0x360 __ball_angle
 10488                              <2> 	fladd __ball_angle, PI, __ball_angle			
 10489                              <2> 	ball_updateangle
 10490                              <2> %endmacro
 10491                              <2> 
 10492                              <2> %macro ball_yinvdirection 0
 10493                              <2> 	flinvsig __ball_angle			
 10494                              <2> 	ball_updateangle
 10495                              <2> %endmacro
 10496                              <2> 
 10497                              <2> %macro ball_updateangle 0
 10498                              <2> 	cos __ball_angle, __ball_xinc	
 10499                              <2> 	sin __ball_angle, __ball_yinc	
 10500                              <2> 		
 10501                              <2> 	flmul __ball_xinc, __ball_rinc, __ball_xinc
 10502                              <2> 	flmul __ball_yinc, __ball_rinc, __ball_yinc	
 10503                              <2> %endmacro
 10504                              <2> 	
 10505                              <2> %endif
 10506                              <1> 	%include "src/lib/racket.mac"
 10507                              <2> %ifndef RACKET_MAC
 10508                              <2> 	%define RACKET_MAC
 10509                              <2> 			
 10510                              <2> 	%include "lib/system.mac"
 10511                              <3>  
 10512                              <3> %ifndef SYSTEM_MAC
 10513                              <3>  	%define SYSTEM_MAC
 10514                              <3>  	
 10515                              <3> 	%ifndef TRUE
 10516                              <3> 		%define TRUE 01h
 10517                              <3> 	%endif
 10518                              <3> 	%ifndef FALSE
 10519                              <3> 		%define FALSE 00h
 10520                              <3> 	%endif
 10521                              <3> 	
 10522                              <3> %macro vlodsb 3
 10523                              <3> 	vlodsb cs, %1, %2, %3
 10524                              <3> %endmacro
 10525                              <3> 
 10526                              <3> %macro vstosb 3
 10527                              <3> 	vstosb cs, %1, %2, %3
 10528                              <3> %endmacro
 10529                              <3> 	 	
 10530                              <3> %macro int16toreg 2
 10531                              <3> 	int16toreg cs, %1, %2
 10532                              <3> %endmacro
 10533                              <3> 
 10534                              <3> %macro regtoint16 2
 10535                              <3> 	regtoint16 %1, cs, %2
 10536                              <3> %endmacro
 10537                              <3> 
 10538                              <3> %macro vstosb 4
 10539                              <3> 	push %1
 10540                              <3> 	pop ds
 10541                              <3> 	mov si,%2
 10542                              <3> 	add si,%3
 10543                              <3> 	mov byte [si],%4	
 10544                              <3> %endmacro
 10545                              <3> 
 10546                              <3> %macro vlodsb 4
 10547                              <3> 	push %1
 10548                              <3> 	pop ds
 10549                              <3> 	mov si,%2
 10550                              <3> 	add si,%3
 10551                              <3> 	mov byte %4,[si]	
 10552                              <3> %endmacro 	 
 10553                              <3> 
 10554                              <3> %macro int16toreg 3
 10555                              <3> 	push %2
 10556                              <3> 	push %1
 10557                              <3> 	pop ds
 10558                              <3> 	pop si
 10559                              <3> 	mov word %3,[si]	
 10560                              <3> %endmacro
 10561                              <3> 
 10562                              <3> %macro regtoint16 3
 10563                              <3> 	push %3
 10564                              <3> 	push %2
 10565                              <3> 	pop ds
 10566                              <3> 	pop si
 10567                              <3> 	mov word [si],%1	
 10568                              <3> %endmacro
 10569                              <3> 
 10570                              <3> %macro mov32 2
 10571                              <3> 	mov32 cs, %1, cs, %2
 10572                              <3> %endmacro
 10573                              <3> 
 10574                              <3> %macro mov16 2
 10575                              <3> 	mov16 cs, %1, cs, %2
 10576                              <3> %endmacro
 10577                              <3> 
 10578                              <3> %macro mov32 4
 10579                              <3> 	mov ax,%3
 10580                              <3> 	mov ds,ax
 10581                              <3> 	mov cx,[%4+2]
 10582                              <3> 	mov dx,[%4]
 10583                              <3> 	mov ax,%1
 10584                              <3> 	mov ds,ax
 10585                              <3> 	mov [%2+2],cx
 10586                              <3> 	mov [%2],dx
 10587                              <3> %endmacro
 10588                              <3> 
 10589                              <3> %macro mov16 4
 10590                              <3> 	mov ax,%3
 10591                              <3> 	mov ds,ax
 10592                              <3> 	mov bx,[%4]
 10593                              <3> 	mov ax,%1
 10594                              <3> 	mov ds,ax
 10595                              <3> 	mov [%2],bx
 10596                              <3> %endmacro
 10597                              <3>  	 	
 10598                              <3> %macro mformat 4
 10599                              <3> 	stkopen 8
 10600                              <3> 	mov word [ bp + 0 ], %1
 10601                              <3> 	mov word [ bp + 2 ], %2
 10602                              <3> 	mov word [ bp + 4 ], %3
 10603                              <3> 	mov word [ bp + 6 ], %4
 10604                              <3> 	call kernel_segment:mformat
 10605                              <3> 	stkclose 8
 10606                              <3> %endmacro
 10607                              <3> 
 10608                              <3> %macro malloc 6
 10609                              <3> 	stkopen 0Bh
 10610                              <3> 	mov word [ bp + 4 ], %3
 10611                              <3> 	mov word [ bp + 6 ], %4
 10612                              <3> 	mov word [ bp + 8 ], %5	
 10613                              <3> 	call kernel_segment:malloc
 10614                              <3> 	push sp
 10615                              <3> 	pop bp
 10616                              <3> 	mov word %1, [ bp ]
 10617                              <3> 	mov word %2, [ bp + 2 ]
 10618                              <3> 	mov byte %6, [ bp + 0x0A ]
 10619                              <3> 	stkclose 0Bh
 10620                              <3> %endmacro 	
 10621                              <3> 
 10622                              <3> %macro laddr 2
 10623                              <3> 	laddr %1, %2, %1, %2
 10624                              <3> %endmacro
 10625                              <3> 
 10626                              <3> %macro faddr 2
 10627                              <3> 	faddr %1, %2, %1, %2
 10628                              <3> %endmacro
 10629                              <3>  	
 10630                              <3> %macro laddr 4
 10631                              <3> 	stkopen 8
 10632                              <3> 	mov word [ bp + 4 ], %3
 10633                              <3> 	mov word [ bp + 6 ], %4	
 10634                              <3> 	call kernel_segment:laddr
 10635                              <3> 	push sp
 10636                              <3> 	pop bp
 10637                              <3> 	mov word %1, [ bp + 0 ]
 10638                              <3> 	mov word %2, [ bp + 2 ]	
 10639                              <3> 	stkclose 8
 10640                              <3> %endmacro
 10641                              <3> 
 10642                              <3> %macro faddr 4
 10643                              <3> 	stkopen 8
 10644                              <3> 	mov word [ bp + 4 ], %3
 10645                              <3> 	mov word [ bp + 6 ], %4	
 10646                              <3> 	call kernel_segment:faddr
 10647                              <3> 	push sp
 10648                              <3> 	pop bp
 10649                              <3> 	mov word %1, [ bp + 0 ]
 10650                              <3> 	mov word %2, [ bp + 2 ]	
 10651                              <3> 	stkclose 8
 10652                              <3> %endmacro	
 10653                              <3>  
 10654                              <3> 
 10655                              <3> %macro stkopen 1		
 10656                              <3> 	sub word sp, %1
 10657                              <3> 	push sp
 10658                              <3> 	pop bp
 10659                              <3> %endmacro
 10660                              <3> 
 10661                              <3> %macro stkclose 1
 10662                              <3> 	add word sp, %1
 10663                              <3> %endmacro
 10664                              <3> 
 10665                              <3> %macro stkload 1-* 	
 10666                              <3>  	%rep %0
 10667                              <3>  	 	%rotate -1
 10668                              <3>  		pop %1
 10669                              <3>  	%endrep
 10670                              <3>  	%rep %0
 10671                              <3>  		push %1
 10672                              <3>  		%rotate 1
 10673                              <3>  	%endrep
 10674                              <3> %endmacro
 10675                              <3> 
 10676                              <3> %macro stkpush 1-* 	
 10677                              <3>  	%rep %0
 10678                              <3>  		push %1
 10679                              <3>  		%rotate 1
 10680                              <3>  	%endrep 	
 10681                              <3> %endmacro
 10682                              <3>  
 10683                              <3> %macro stkpop 1-*
 10684                              <3>  	%rep %0
 10685                              <3>  	 	%rotate -1
 10686                              <3>  		pop %1
 10687                              <3>  	%endrep 	 	
 10688                              <3> %endmacro
 10689                              <3> 
 10690                              <3> %macro delay 1
 10691                              <3> 	delay cs, %1
 10692                              <3> %endmacro
 10693                              <3> 
 10694                              <3> %macro delay 2
 10695                              <3> 	mov ax,%1
 10696                              <3> 	mov ds,ax
 10697                              <3> 	
 10698                              <3> 	mov ah,86h
 10699                              <3> 	mov cx,[%2+2]
 10700                              <3> 	mov dx,[%2]
 10701                              <3> 	int 15h	
 10702                              <3> %endmacro
 10703                              <3> 
 10704                              <3> %endif 
 10705                              <2> 	%include "lib/math.mac"
 10706                              <3> 
 10707                              <3> %ifndef MATH_MAC
 10708                              <3> 	%define MATH_MAC
 10709                              <3> 	
 10710                              <3> 	%include "lib/math.asm"
 10711                              <3> 	%include "lib/system.mac"
 10712                              <3> 
 10713                              <3> %macro chgsig 1
 10714                              <3> 	chgsig cs, %1
 10715                              <3> %endmacro
 10716                              <3> 
 10717                              <3> %macro cmp16 3
 10718                              <3> 	cmp16 cs, %1, cs, %2, %3
 10719                              <3> %endmacro
 10720                              <3> 
 10721                              <3> %macro mul16 2
 10722                              <3> 	mul16 cs, %1, cs, %2
 10723                              <3> %endmacro
 10724                              <3> 
 10725                              <3> %macro div16 2
 10726                              <3> 	div16 cs, %1, cs, %2
 10727                              <3> %endmacro
 10728                              <3> 
 10729                              <3> %macro mod16 2
 10730                              <3> 	mod16 cs, %1, cs, %2
 10731                              <3> %endmacro
 10732                              <3> 
 10733                              <3> %macro inc16 1
 10734                              <3> 	inc16 cs, %1
 10735                              <3> %endmacro
 10736                              <3> 
 10737                              <3> %macro dec16 1
 10738                              <3> 	dec16 cs, %1
 10739                              <3> %endmacro
 10740                              <3> 
 10741                              <3> %macro add16 2
 10742                              <3> 	add16 cs, %1, cs, %2
 10743                              <3> %endmacro
 10744                              <3> 
 10745                              <3> %macro sub16 2
 10746                              <3> 	sub16 cs, %1, cs, %2
 10747                              <3> %endmacro
 10748                              <3> 
 10749                              <3> %macro int32to16 2
 10750                              <3> 	int32to16 cs, %1, %2
 10751                              <3> %endmacro
 10752                              <3> 
 10753                              <3> %macro int16to32 2
 10754                              <3> 	int16to32 %1, cs, %2
 10755                              <3> %endmacro
 10756                              <3> 
 10757                              <3> %macro idiv32 5
 10758                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 10759                              <3> %endmacro
 10760                              <3> 
 10761                              <3> %macro imul32 3
 10762                              <3> 	imul32 cs, %1, cs, %2, cs, %3
 10763                              <3> %endmacro
 10764                              <3> 
 10765                              <3> %macro div32 5
 10766                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 10767                              <3> %endmacro
 10768                              <3> 
 10769                              <3> %macro mul32 3
 10770                              <3> 	mul32 cs, %1, cs, %2, cs, %3
 10771                              <3> %endmacro
 10772                              <3> 	
 10773                              <3> %macro add32 3
 10774                              <3> 	add32 cs, %1, cs, %2, cs, %3
 10775                              <3> %endmacro
 10776                              <3> 
 10777                              <3> %macro sub32 3
 10778                              <3> 	sub32 cs, %1, cs, %2, cs, %3
 10779                              <3> %endmacro
 10780                              <3> 
 10781                              <3> %macro int32to16 3
 10782                              <3> 	stkopen 0x06
 10783                              <3> 	mov ax,%1
 10784                              <3> 	mov ds,ax
 10785                              <3> 	mov ax,[%2+2]
 10786                              <3> 	mov word [bp+0], ax
 10787                              <3> 	mov ax,[%2]	
 10788                              <3> 	mov word [bp+2], ax
 10789                              <3> 	call proc_int32to16
 10790                              <3> 	mov ax,sp
 10791                              <3> 	mov bp,ax
 10792                              <3> 	mov ax,[bp+4]
 10793                              <3> 	mov word %3, ax	
 10794                              <3> 	stkclose 0x06
 10795                              <3> %endmacro
 10796                              <3> 
 10797                              <3> %macro int16to32 3
 10798                              <3> 	stkopen 0x06
 10799                              <3> 	mov word [bp+0], %1	
 10800                              <3> 	call proc_int16to32
 10801                              <3> 	mov ax,sp
 10802                              <3> 	mov bp,ax
 10803                              <3> 	mov ax,%2
 10804                              <3> 	mov ds,ax
 10805                              <3> 	mov ax,[bp+2]
 10806                              <3> 	mov [%3+2],ax
 10807                              <3> 	mov ax,[bp+4]
 10808                              <3> 	mov [%3],ax	
 10809                              <3> 	stkclose 0x06
 10810                              <3> %endmacro
 10811                              <3> 
 10812                              <3> %macro div32 10
 10813                              <3> 	stkopen 0x11
 10814                              <3> 	mov ax,%1
 10815                              <3> 	mov ds,ax
 10816                              <3> 	mov ax,[%2+2]
 10817                              <3> 	mov word [bp+0], ax
 10818                              <3> 	mov ax,[%2]
 10819                              <3> 	mov word [bp+2], ax
 10820                              <3> 	mov ax,%3
 10821                              <3> 	mov ds,ax
 10822                              <3> 	mov ax,[%4+2]
 10823                              <3> 	mov word [bp+4], ax
 10824                              <3> 	mov ax,[%4]
 10825                              <3> 	mov word [bp+6], ax
 10826                              <3> 	call proc_div32
 10827                              <3> 	mov ax,sp
 10828                              <3> 	mov bp,ax
 10829                              <3> 	mov ax,%5
 10830                              <3> 	mov ds,ax
 10831                              <3> 	mov word ax, [bp+8]
 10832                              <3> 	mov word [%6+2], ax
 10833                              <3> 	mov word ax, [bp+0x0A]
 10834                              <3> 	mov word [%6], ax
 10835                              <3> 	mov ax,%7
 10836                              <3> 	mov ds,ax
 10837                              <3> 	mov word ax,[bp+0x0C]
 10838                              <3> 	mov word [%8+2],ax
 10839                              <3> 	mov word ax,[bp+0x0E]
 10840                              <3> 	mov word [%8],ax
 10841                              <3> 	mov ax,%9
 10842                              <3> 	mov ds,ax
 10843                              <3> 	mov byte al,[bp+0x10]
 10844                              <3> 	mov byte [%10],al
 10845                              <3> 	stkclose 0x11
 10846                              <3> %endmacro
 10847                              <3> 	
 10848                              <3> %macro mul32 6
 10849                              <3> 	stkopen 0x0C
 10850                              <3> 	mov ax,%1
 10851                              <3> 	mov ds,ax
 10852                              <3> 	mov ax,[%2+2]
 10853                              <3> 	mov word [bp+0], ax
 10854                              <3> 	mov ax,[%2]
 10855                              <3> 	mov word [bp+2], ax
 10856                              <3> 	mov ax,%3
 10857                              <3> 	mov ds,ax
 10858                              <3> 	mov ax,[%4+2]
 10859                              <3> 	mov word [bp+4], ax
 10860                              <3> 	mov ax,[%4]
 10861                              <3> 	mov word [bp+6], ax
 10862                              <3> 	call proc_mul32
 10863                              <3> 	mov ax,sp
 10864                              <3> 	mov bp,ax
 10865                              <3> 	mov ax,%5
 10866                              <3> 	mov ds,ax
 10867                              <3> 	mov word ax, [bp+8]
 10868                              <3> 	mov word [%6+2], ax
 10869                              <3> 	mov word ax, [bp+0x0A]
 10870                              <3> 	mov word [%6], ax
 10871                              <3> 	stkclose 0x0C
 10872                              <3> %endmacro	
 10873                              <3> 	
 10874                              <3> %macro add32 6
 10875                              <3> 	stkopen 0x0C
 10876                              <3> 	mov ax,%1
 10877                              <3> 	mov ds,ax
 10878                              <3> 	mov ax,[%2+2]
 10879                              <3> 	mov word [bp+0], ax
 10880                              <3> 	mov ax,[%2]
 10881                              <3> 	mov word [bp+2], ax
 10882                              <3> 	mov ax,%3
 10883                              <3> 	mov ds,ax
 10884                              <3> 	mov ax,[%4+2]
 10885                              <3> 	mov word [bp+4], ax
 10886                              <3> 	mov ax,[%4]
 10887                              <3> 	mov word [bp+6], ax
 10888                              <3> 	call proc_add32
 10889                              <3> 	mov ax,sp
 10890                              <3> 	mov bp,ax
 10891                              <3> 	mov ax,%5
 10892                              <3> 	mov ds,ax
 10893                              <3> 	mov word ax, [bp+8]
 10894                              <3> 	mov word [%6+2], ax
 10895                              <3> 	mov word ax, [bp+0x0A]
 10896                              <3> 	mov word [%6], ax
 10897                              <3> 	stkclose 0x0C
 10898                              <3> %endmacro
 10899                              <3> 
 10900                              <3> %macro sub32 6
 10901                              <3> 	stkopen 0x0C
 10902                              <3> 	mov ax,%1
 10903                              <3> 	mov ds,ax
 10904                              <3> 	mov ax,[%2+2]
 10905                              <3> 	mov word [bp+0], ax
 10906                              <3> 	mov ax,[%2]
 10907                              <3> 	mov word [bp+2], ax
 10908                              <3> 	mov ax,%3
 10909                              <3> 	mov ds,ax
 10910                              <3> 	mov ax,[%4+2]
 10911                              <3> 	mov word [bp+4], ax
 10912                              <3> 	mov ax,[%4]
 10913                              <3> 	mov word [bp+6], ax
 10914                              <3> 	call proc_sub32
 10915                              <3> 	mov ax,sp
 10916                              <3> 	mov bp,ax
 10917                              <3> 	mov ax,%5
 10918                              <3> 	mov ds,ax
 10919                              <3> 	mov word ax, [bp+8]
 10920                              <3> 	mov word [%6+2], ax
 10921                              <3> 	mov word ax, [bp+0x0A]
 10922                              <3> 	mov word [%6], ax
 10923                              <3> 	stkclose 0x0C
 10924                              <3> %endmacro
 10925                              <3> 
 10926                              <3> %macro idiv32 10
 10927                              <3> 	stkopen 0x11
 10928                              <3> 	mov ax,%1
 10929                              <3> 	mov ds,ax
 10930                              <3> 	mov ax,[%2+2]
 10931                              <3> 	mov word [bp+0], ax
 10932                              <3> 	mov ax,[%2]
 10933                              <3> 	mov word [bp+2], ax
 10934                              <3> 	mov ax,%3
 10935                              <3> 	mov ds,ax
 10936                              <3> 	mov ax,[%4+2]
 10937                              <3> 	mov word [bp+4], ax
 10938                              <3> 	mov ax,[%4]
 10939                              <3> 	mov word [bp+6], ax
 10940                              <3> 	call proc_idiv32
 10941                              <3> 	mov ax,sp
 10942                              <3> 	mov bp,ax
 10943                              <3> 	mov ax,%5
 10944                              <3> 	mov ds,ax
 10945                              <3> 	mov word ax, [bp+8]
 10946                              <3> 	mov word [%6+2], ax
 10947                              <3> 	mov word ax, [bp+0x0A]
 10948                              <3> 	mov word [%6], ax
 10949                              <3> 	mov ax,%7
 10950                              <3> 	mov ds,ax
 10951                              <3> 	mov word ax,[bp+0x0C]
 10952                              <3> 	mov word [%8+2],ax
 10953                              <3> 	mov word ax,[bp+0x0E]
 10954                              <3> 	mov word [%8],ax
 10955                              <3> 	mov ax,%9
 10956                              <3> 	mov ds,ax
 10957                              <3> 	mov byte al,[bp+0x10]
 10958                              <3> 	mov byte [%10],al
 10959                              <3> 	stkclose 0x11
 10960                              <3> %endmacro
 10961                              <3> 
 10962                              <3> %macro imul32 6
 10963                              <3> 	stkopen 0x0C
 10964                              <3> 	mov ax,%1
 10965                              <3> 	mov ds,ax
 10966                              <3> 	mov ax,[%2+2]
 10967                              <3> 	mov word [bp+0], ax
 10968                              <3> 	mov ax,[%2]
 10969                              <3> 	mov word [bp+2], ax
 10970                              <3> 	mov ax,%3
 10971                              <3> 	mov ds,ax
 10972                              <3> 	mov ax,[%4+2]
 10973                              <3> 	mov word [bp+4], ax
 10974                              <3> 	mov ax,[%4]
 10975                              <3> 	mov word [bp+6], ax
 10976                              <3> 	call proc_imul32
 10977                              <3> 	mov ax,sp
 10978                              <3> 	mov bp,ax
 10979                              <3> 	mov ax,%5
 10980                              <3> 	mov ds,ax
 10981                              <3> 	mov word ax, [bp+8]
 10982                              <3> 	mov word [%6+2], ax
 10983                              <3> 	mov word ax, [bp+0x0A]
 10984                              <3> 	mov word [%6], ax
 10985                              <3> 	stkclose 0x0C
 10986                              <3> %endmacro
 10987                              <3> 	
 10988                              <3> %macro cmp32 3
 10989                              <3> 	cmp32 cs, %1, cs, %2, %3
 10990                              <3> %endmacro	
 10991                              <3> 	
 10992                              <3> %macro cmp32 5
 10993                              <3> 	stkopen 9
 10994                              <3> 	mov ax,%1
 10995                              <3> 	mov ds,ax
 10996                              <3> 	mov word ax,[%2+2]
 10997                              <3> 	mov word [bp+0], ax
 10998                              <3> 	mov word ax,[%2]
 10999                              <3> 	mov word [bp+2], ax	
 11000                              <3> 	mov ax,%3
 11001                              <3> 	mov ds,ax
 11002                              <3> 	mov word ax,[%4+2]
 11003                              <3> 	mov word [bp+4], ax
 11004                              <3> 	mov word ax,[%4]
 11005                              <3> 	mov word [bp+6], ax	
 11006                              <3> 	call proc_cmp32
 11007                              <3> 	mov ax,sp
 11008                              <3> 	mov bp,ax
 11009                              <3> 	mov al,[bp+8]
 11010                              <3> 	mov byte %5,al
 11011                              <3> 	stkclose 9
 11012                              <3> %endmacro
 11013                              <3> 	
 11014                              <3> %macro shl32 2
 11015                              <3> 	shl32 cs, %1, %2
 11016                              <3> %endmacro	
 11017                              <3> 	
 11018                              <3> %macro shl32 3
 11019                              <3> 	stkopen 5
 11020                              <3> 	mov ax,%1
 11021                              <3> 	mov ds,ax
 11022                              <3> 	mov word ax,[%2+2]
 11023                              <3> 	mov word [bp+0], ax
 11024                              <3> 	mov word ax,[%2]
 11025                              <3> 	mov word [bp+2], ax
 11026                              <3> 	mov byte al, %3
 11027                              <3> 	mov byte [bp+4], al 
 11028                              <3> 	call proc_shl32
 11029                              <3> 	mov ax,sp
 11030                              <3> 	mov bp,ax
 11031                              <3> 	mov ax,%1
 11032                              <3> 	mov ds,ax
 11033                              <3> 	mov ax,[bp+0]
 11034                              <3> 	mov word [%2+2],ax
 11035                              <3> 	mov ax,[bp+2]
 11036                              <3> 	mov word [%2],ax
 11037                              <3> 	stkclose 5
 11038                              <3> %endmacro
 11039                              <3> 
 11040                              <3> 
 11041                              <3> %macro shr32 2
 11042                              <3> 	shr32 cs, %1, %2
 11043                              <3> %endmacro	
 11044                              <3> 	
 11045                              <3> %macro shr32 3
 11046                              <3> 	stkopen 5
 11047                              <3> 	mov ax,%1
 11048                              <3> 	mov ds,ax
 11049                              <3> 	mov word ax,[%2+2]
 11050                              <3> 	mov word [bp+0], ax
 11051                              <3> 	mov word ax,[%2]
 11052                              <3> 	mov word [bp+2], ax
 11053                              <3> 	mov byte al, %3
 11054                              <3> 	mov byte [bp+4], al 
 11055                              <3> 	call proc_shr32
 11056                              <3> 	mov ax,sp
 11057                              <3> 	mov bp,ax
 11058                              <3> 	mov ax,%1
 11059                              <3> 	mov ds,ax
 11060                              <3> 	mov ax,[bp+0]
 11061                              <3> 	mov word [%2+2],ax
 11062                              <3> 	mov ax,[bp+2]
 11063                              <3> 	mov word [%2],ax
 11064                              <3> 	stkclose 5
 11065                              <3> %endmacro
 11066                              <3> 
 11067                              <3> %macro inc16 2
 11068                              <3> 	mov ax,%1
 11069                              <3> 	mov ds,ax
 11070                              <3> 	inc word [%2]
 11071                              <3> %endmacro
 11072                              <3> 
 11073                              <3> %macro dec16 2
 11074                              <3> 	mov ax,%1
 11075                              <3> 	mov ds,ax
 11076                              <3> 	dec word [%2]
 11077                              <3> %endmacro
 11078                              <3> 
 11079                              <3> %macro add16 4	
 11080                              <3> 	mov ax,%3
 11081                              <3> 	mov ds,ax
 11082                              <3> 	mov bx,[%4]	
 11083                              <3> 	mov ax,%1
 11084                              <3> 	mov ds,ax	
 11085                              <3> 	add [%2],bx
 11086                              <3> %endmacro
 11087                              <3> 
 11088                              <3> %macro sub16 4
 11089                              <3> 	mov ax,%3
 11090                              <3> 	mov ds,ax
 11091                              <3> 	mov bx,[%4]
 11092                              <3> 	mov ax,%1
 11093                              <3> 	mov ds,ax
 11094                              <3> 	sub [%2],bx
 11095                              <3> %endmacro
 11096                              <3> 
 11097                              <3> %macro mul16 4
 11098                              <3> 	mov ax,%1
 11099                              <3> 	mov ds,ax
 11100                              <3> 	mov bx,[%2]
 11101                              <3> 	mov ax,%3
 11102                              <3> 	mov ds,ax
 11103                              <3> 	mov cx,[%4]
 11104                              <3> 	
 11105                              <3> 	mov ax,bx
 11106                              <3> 	imul cx
 11107                              <3> 	
 11108                              <3> 	mov dx,%1
 11109                              <3> 	mov ds,dx
 11110                              <3> 	mov [%2],ax
 11111                              <3> %endmacro
 11112                              <3> 
 11113                              <3> %macro div16 4
 11114                              <3> 	mov ax,%1
 11115                              <3> 	mov ds,ax
 11116                              <3> 	mov bx,[%2]
 11117                              <3> 	mov ax,%3
 11118                              <3> 	mov ds,ax
 11119                              <3> 	mov cx,[%4]
 11120                              <3> 	
 11121                              <3> 	xor dx,dx
 11122                              <3> 	mov ax,bx
 11123                              <3> 	idiv cx
 11124                              <3> 	
 11125                              <3> 	mov dx,%1
 11126                              <3> 	mov ds,dx
 11127                              <3> 	mov [%2],ax
 11128                              <3> %endmacro
 11129                              <3> 
 11130                              <3> 
 11131                              <3> %macro mod16 4
 11132                              <3> 	mov ax,%1
 11133                              <3> 	mov ds,ax
 11134                              <3> 	mov bx,[%2]
 11135                              <3> 	mov ax,%3
 11136                              <3> 	mov ds,ax
 11137                              <3> 	mov cx,[%4]
 11138                              <3> 	
 11139                              <3> 	xor dx,dx
 11140                              <3> 	mov ax,bx
 11141                              <3> 	idiv cx
 11142                              <3> 	
 11143                              <3> 	mov bx,%1
 11144                              <3> 	mov ds,bx
 11145                              <3> 	mov [%2],dx
 11146                              <3> %endmacro
 11147                              <3> 
 11148                              <3> %macro cmp16 5
 11149                              <3> 	mov ax,%1
 11150                              <3> 	mov ds,ax
 11151                              <3> 	mov bx,[%2]
 11152                              <3> 	mov ax,%3
 11153                              <3> 	mov ds,ax
 11154                              <3> 	mov	cx,[%4]
 11155                              <3> 	
 11156                              <3> 	cmp bx,cx
 11157                              <3> 	jg %%above
 11158                              <3> 	jl %%below
 11159                              <3> 		mov byte %5, 0
 11160                              <3> 		jmp %%endcmp
 11161                              <3> 	%%above:
 11162                              <3> 		mov byte %5, 1
 11163                              <3> 		jmp %%endcmp
 11164                              <3> 	%%below:
 11165                              <3> 		mov byte %5, -1
 11166                              <3> 	%%endcmp:
 11167                              <3> %endmacro
 11168                              <3> 
 11169                              <3> %macro chgsig 2
 11170                              <3> 	mov ax,%1
 11171                              <3> 	mov ds,ax
 11172                              <3> 	mov ax,[%2]
 11173                              <3> 	mov bx,0xFFFF
 11174                              <3> 	sub bx,ax
 11175                              <3> 	inc bx
 11176                              <3> 	mov [%2],bx
 11177                              <3> %endmacro
 11178                              <3> 	
 11179                              <3> %endif
 11180                              <2> 	%include "lib/float.mac"
 11181                              <3> 
 11182                              <3> %ifndef FLOAT_MAC
 11183                              <3> 	%define FLOAT_MAC
 11184                              <3> 	
 11185                              <3> 	%include "lib/float.asm"	
 11186                              <3> 
 11187                              <3> %macro flgetsig 2
 11188                              <3> 	flgetsig cs, %1, %2
 11189                              <3> %endmacro
 11190                              <3> 
 11191                              <3> %macro flinvsig 1
 11192                              <3> 	flinvsig cs, %1
 11193                              <3> %endmacro
 11194                              <3> 
 11195                              <3> %macro flsetsig 1
 11196                              <3> 	flsetsig cs, %1
 11197                              <3> %endmacro
 11198                              <3> 
 11199                              <3> %macro flclrsig 1
 11200                              <3> 	flclrsig cs, %1
 11201                              <3> %endmacro
 11202                              <3> 
 11203                              <3> %macro flroundtoint16 2
 11204                              <3> 	flroundtoint16 cs, %1, cs, %2
 11205                              <3> %endmacro
 11206                              <3> 
 11207                              <3> %macro flroundtoint32 1
 11208                              <3> 	flroundtoint32 %1, %1
 11209                              <3> %endmacro
 11210                              <3> 
 11211                              <3> %macro flroundtoint32 2
 11212                              <3> 	flroundtoint32 cs, %1, cs, %2
 11213                              <3> %endmacro
 11214                              <3> 
 11215                              <3> %macro int16tofl 2
 11216                              <3> 	int16tofl cs, %1, cs, %2
 11217                              <3> %endmacro
 11218                              <3> 
 11219                              <3> %macro fltoint16 2
 11220                              <3> 	fltoint16 cs, %1, cs, %2
 11221                              <3> %endmacro
 11222                              <3> 
 11223                              <3> %macro fltoint32 1
 11224                              <3> 	fltoint32 %1, %1
 11225                              <3> %endmacro
 11226                              <3> 
 11227                              <3> %macro fltoint32 2
 11228                              <3> 	fltoint32 cs, %1, cs, %2
 11229                              <3> %endmacro
 11230                              <3> 
 11231                              <3> %macro int32tofl 1
 11232                              <3> 	int32tofl %1, %1
 11233                              <3> %endmacro
 11234                              <3> 
 11235                              <3> %macro int32tofl 2
 11236                              <3> 	int32tofl cs, %1, cs, %2
 11237                              <3> %endmacro
 11238                              <3> 
 11239                              <3> %macro flcmp 3
 11240                              <3> 	flcmp cs, %1, cs, %2, %3
 11241                              <3> %endmacro
 11242                              <3> 
 11243                              <3> %macro flshl 2
 11244                              <3> 	flshl cs, %1, cs, %2
 11245                              <3> %endmacro
 11246                              <3> 
 11247                              <3> %macro flshr 2
 11248                              <3> 	flshr cs, %1, cs, %2
 11249                              <3> %endmacro
 11250                              <3> 
 11251                              <3> %macro fladd 3
 11252                              <3> 	fladd cs, %1, cs, %2, cs, %3
 11253                              <3> %endmacro
 11254                              <3> 
 11255                              <3> %macro flsub 3
 11256                              <3> 	flsub cs, %1, cs, %2, cs, %3
 11257                              <3> %endmacro	
 11258                              <3> 
 11259                              <3> %macro flmul 3
 11260                              <3> 	flmul cs, %1, cs, %2, cs, %3
 11261                              <3> %endmacro
 11262                              <3> 
 11263                              <3> %macro fldiv 3
 11264                              <3> 	fldiv cs, %1, cs, %2, cs, %3
 11265                              <3> %endmacro	
 11266                              <3> 
 11267                              <3> %macro fladd 6
 11268                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
 11269                              <3> %endmacro
 11270                              <3> 
 11271                              <3> %macro flsub 6
 11272                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
 11273                              <3> %endmacro
 11274                              <3> 
 11275                              <3> %macro flroundtoint16 4
 11276                              <3> 	stkopen 0x06
 11277                              <3> 	mov ax,%1
 11278                              <3> 	mov ds,ax
 11279                              <3> 	mov ax,[%2+2]
 11280                              <3> 	mov [bp+0],ax
 11281                              <3> 	mov ax,[%2]
 11282                              <3> 	mov [bp+2],ax	
 11283                              <3> 	call proc_flroundtoint16
 11284                              <3> 	mov ax,sp
 11285                              <3> 	mov bp,ax
 11286                              <3> 	mov ax,%3
 11287                              <3> 	mov ds,ax
 11288                              <3> 	mov ax,[bp+4]
 11289                              <3> 	mov [%4],ax
 11290                              <3> 	stkclose 0x06
 11291                              <3> %endmacro
 11292                              <3> 
 11293                              <3> %macro flroundtoint32 4
 11294                              <3> 	stkopen 0x08
 11295                              <3> 	mov ax,%1
 11296                              <3> 	mov ds,ax
 11297                              <3> 	mov ax,[%2+2]
 11298                              <3> 	mov [bp+0],ax
 11299                              <3> 	mov ax,[%2]
 11300                              <3> 	mov [bp+2],ax	
 11301                              <3> 	call proc_flroundtoint32
 11302                              <3> 	mov ax,sp
 11303                              <3> 	mov bp,ax
 11304                              <3> 	mov ax,%3
 11305                              <3> 	mov ds,ax
 11306                              <3> 	mov ax,[bp+4]
 11307                              <3> 	mov [%4+2],ax
 11308                              <3> 	mov ax,[bp+6]
 11309                              <3> 	mov [%4],ax
 11310                              <3> 	stkclose 0x08
 11311                              <3> %endmacro
 11312                              <3> 
 11313                              <3> %macro fltoint16 4
 11314                              <3> 	stkopen 0x06
 11315                              <3> 	mov ax,%1
 11316                              <3> 	mov ds,ax
 11317                              <3> 	mov ax,[%2+2]
 11318                              <3> 	mov [bp+0],ax
 11319                              <3> 	mov ax,[%2]
 11320                              <3> 	mov [bp+2],ax	
 11321                              <3> 	call proc_fltoint16
 11322                              <3> 	mov ax,sp
 11323                              <3> 	mov bp,ax
 11324                              <3> 	mov ax,%3
 11325                              <3> 	mov ds,ax
 11326                              <3> 	mov ax,[bp+4]
 11327                              <3> 	mov [%4],ax
 11328                              <3> 	stkclose 0x06
 11329                              <3> %endmacro
 11330                              <3> 
 11331                              <3> %macro int16tofl 4	
 11332                              <3> 	stkopen 0x06
 11333                              <3> 	mov ax,%1
 11334                              <3> 	mov ds,ax
 11335                              <3> 	mov ax,[%2]
 11336                              <3> 	mov [bp+0],ax	
 11337                              <3> 	call proc_int16tofl
 11338                              <3> 	mov ax,sp
 11339                              <3> 	mov bp,ax
 11340                              <3> 	mov ax,%3
 11341                              <3> 	mov ds,ax
 11342                              <3> 	mov ax,[bp+2]
 11343                              <3> 	mov [%4+2],ax
 11344                              <3> 	mov ax,[bp+4]
 11345                              <3> 	mov [%4],ax
 11346                              <3> 	stkclose 0x06
 11347                              <3> %endmacro
 11348                              <3> 
 11349                              <3> %macro fltoint32 4
 11350                              <3> 	stkopen 0x08
 11351                              <3> 	mov ax,%1
 11352                              <3> 	mov ds,ax
 11353                              <3> 	mov ax,[%2+2]
 11354                              <3> 	mov [bp+0],ax
 11355                              <3> 	mov ax,[%2]
 11356                              <3> 	mov [bp+2],ax	
 11357                              <3> 	call proc_fltoint32
 11358                              <3> 	mov ax,sp
 11359                              <3> 	mov bp,ax
 11360                              <3> 	mov ax,%3
 11361                              <3> 	mov ds,ax
 11362                              <3> 	mov ax,[bp+4]
 11363                              <3> 	mov [%4+2],ax
 11364                              <3> 	mov ax,[bp+6]
 11365                              <3> 	mov [%4],ax
 11366                              <3> 	stkclose 0x08
 11367                              <3> %endmacro
 11368                              <3> 
 11369                              <3> %macro int32tofl 4
 11370                              <3> 	stkopen 0x08
 11371                              <3> 	mov ax,%1
 11372                              <3> 	mov ds,ax
 11373                              <3> 	mov ax,[%2+2]
 11374                              <3> 	mov [bp+0],ax
 11375                              <3> 	mov ax,[%2]
 11376                              <3> 	mov [bp+2],ax	
 11377                              <3> 	call proc_int32tofl
 11378                              <3> 	mov ax,sp
 11379                              <3> 	mov bp,ax
 11380                              <3> 	mov ax,%3
 11381                              <3> 	mov ds,ax
 11382                              <3> 	mov ax,[bp+4]
 11383                              <3> 	mov [%4+2],ax
 11384                              <3> 	mov ax,[bp+6]
 11385                              <3> 	mov [%4],ax
 11386                              <3> 	stkclose 0x08
 11387                              <3> %endmacro
 11388                              <3> 
 11389                              <3> %macro flgetsig 3
 11390                              <3> 	stkopen 0x04
 11391                              <3> 	mov ax,%1
 11392                              <3> 	mov ds,ax
 11393                              <3> 	mov ax,[%2+2]
 11394                              <3> 	mov word [bp+0], ax
 11395                              <3> 	call proc_flgetsig
 11396                              <3> 	push sp
 11397                              <3> 	pop bp
 11398                              <3> 	mov ax,[bp+2]
 11399                              <3> 	mov word %3, ax
 11400                              <3> 	stkclose 0x04
 11401                              <3> %endmacro
 11402                              <3> 
 11403                              <3> %macro flinvsig 2
 11404                              <3> 	stkopen 0x02
 11405                              <3> 	mov ax,%1
 11406                              <3> 	mov ds,ax
 11407                              <3> 	mov ax,[%2+2]
 11408                              <3> 	mov word [bp+0], ax
 11409                              <3> 	call proc_flinvsig
 11410                              <3> 	push sp
 11411                              <3> 	pop bp
 11412                              <3> 	mov ax,[bp+0]
 11413                              <3> 	mov word [%2+2],ax
 11414                              <3> 	stkclose 0x02
 11415                              <3> %endmacro
 11416                              <3> 
 11417                              <3> %macro flsetsig 2
 11418                              <3> 	stkopen 0x04
 11419                              <3> 	mov ax,%1
 11420                              <3> 	mov ds,ax
 11421                              <3> 	mov ax,[%2+2]
 11422                              <3> 	mov word [bp+0], ax
 11423                              <3> 	mov word [bp+2], 0x8000
 11424                              <3> 	call proc_flsetsig
 11425                              <3> 	push sp
 11426                              <3> 	pop bp
 11427                              <3> 	mov ax,[bp+0]
 11428                              <3> 	mov word [%2+2],ax
 11429                              <3> 	stkclose 0x04	
 11430                              <3> %endmacro
 11431                              <3> 
 11432                              <3> %macro flclrsig 2
 11433                              <3> 	stkopen 0x04
 11434                              <3> 	mov ax,%1
 11435                              <3> 	mov ds,ax
 11436                              <3> 	mov ax,[%2+2]
 11437                              <3> 	mov word [bp+0], ax
 11438                              <3> 	mov word [bp+2], 0x0000
 11439                              <3> 	call proc_flsetsig
 11440                              <3> 	push sp
 11441                              <3> 	pop bp
 11442                              <3> 	mov ax,[bp+0]
 11443                              <3> 	mov word [%2+2],ax
 11444                              <3> 	stkclose 0x04	
 11445                              <3> %endmacro
 11446                              <3> 
 11447                              <3> %macro flcmp 5	
 11448                              <3> 	stkopen 0x09
 11449                              <3> 	mov ax,%1
 11450                              <3> 	mov ds,ax
 11451                              <3> 	mov ax,[%2+2]
 11452                              <3> 	mov [bp+0],ax
 11453                              <3> 	mov ax,[%2]
 11454                              <3> 	mov [bp+2],ax
 11455                              <3> 	mov ax,%3
 11456                              <3> 	mov ds,ax
 11457                              <3> 	mov ax,[%4+2]
 11458                              <3> 	mov [bp+4],ax
 11459                              <3> 	mov ax,[%4]
 11460                              <3> 	mov [bp+6],ax
 11461                              <3> 	call proc_flcmp
 11462                              <3> 	mov ax,sp
 11463                              <3> 	mov bp,ax
 11464                              <3> 	mov byte %5,[bp+8]
 11465                              <3> 	stkclose 0x09
 11466                              <3> %endmacro
 11467                              <3> 
 11468                              <3> %macro flshl 4	
 11469                              <3> 	stkopen 0x03
 11470                              <3> 	mov ax,%1
 11471                              <3> 	mov ds,ax
 11472                              <3> 	mov ax,[%2+2]
 11473                              <3> 	mov [bp+0],ax
 11474                              <3> 	mov ax,%3
 11475                              <3> 	mov ds,ax
 11476                              <3> 	mov al,[%4]
 11477                              <3> 	mov [bp+2],al
 11478                              <3> 	call proc_flshl
 11479                              <3> 	mov ax,sp
 11480                              <3> 	mov bp,ax
 11481                              <3> 	mov ax,%1
 11482                              <3> 	mov ds,ax
 11483                              <3> 	mov ax,[bp+0]
 11484                              <3> 	mov [%2+2],ax
 11485                              <3> 	stkclose 0x03
 11486                              <3> %endmacro
 11487                              <3> 
 11488                              <3> %macro flshr 4	
 11489                              <3> 	stkopen 0x03
 11490                              <3> 	mov ax,%1
 11491                              <3> 	mov ds,ax
 11492                              <3> 	mov ax,[%2+2]
 11493                              <3> 	mov [bp+0],ax	
 11494                              <3> 	mov ax,%3
 11495                              <3> 	mov ds,ax
 11496                              <3> 	mov al,[%4]
 11497                              <3> 	mov [bp+2],al
 11498                              <3> 	call proc_flshr
 11499                              <3> 	mov ax,sp
 11500                              <3> 	mov bp,ax
 11501                              <3> 	mov ax,%1
 11502                              <3> 	mov ds,ax
 11503                              <3> 	mov ax,[bp+0]
 11504                              <3> 	mov [%2+2],ax
 11505                              <3> 	stkclose 0x03
 11506                              <3> %endmacro
 11507                              <3> 
 11508                              <3> %macro fldiv 6	
 11509                              <3> 	stkopen 0x0C
 11510                              <3> 	mov ax,%1
 11511                              <3> 	mov ds,ax
 11512                              <3> 	mov ax,[%2+2]
 11513                              <3> 	mov [bp+0],ax
 11514                              <3> 	mov ax,[%2]
 11515                              <3> 	mov [bp+2],ax
 11516                              <3> 	mov ax,%3
 11517                              <3> 	mov ds,ax
 11518                              <3> 	mov ax,[%4+2]
 11519                              <3> 	mov [bp+4],ax
 11520                              <3> 	mov ax,[%4]
 11521                              <3> 	mov [bp+6],ax
 11522                              <3> 	call proc_fldiv
 11523                              <3> 	mov ax,sp
 11524                              <3> 	mov bp,ax
 11525                              <3> 	mov ax,%5
 11526                              <3> 	mov ds,ax
 11527                              <3> 	mov ax,[bp+8]
 11528                              <3> 	mov [%6+2],ax
 11529                              <3> 	mov ax,[bp+0x0A]
 11530                              <3> 	mov [%6],ax
 11531                              <3> 	stkclose 0x0C
 11532                              <3> %endmacro
 11533                              <3> 
 11534                              <3> %macro flmul 6	
 11535                              <3> 	stkopen 0x0C
 11536                              <3> 	mov ax,%1
 11537                              <3> 	mov ds,ax
 11538                              <3> 	mov ax,[%2+2]
 11539                              <3> 	mov [bp+0],ax
 11540                              <3> 	mov ax,[%2]
 11541                              <3> 	mov [bp+2],ax
 11542                              <3> 	mov ax,%3
 11543                              <3> 	mov ds,ax
 11544                              <3> 	mov ax,[%4+2]
 11545                              <3> 	mov [bp+4],ax
 11546                              <3> 	mov ax,[%4]
 11547                              <3> 	mov [bp+6],ax
 11548                              <3> 	call proc_flmul
 11549                              <3> 	mov ax,sp
 11550                              <3> 	mov bp,ax
 11551                              <3> 	mov ax,%5
 11552                              <3> 	mov ds,ax
 11553                              <3> 	mov ax,[bp+8]
 11554                              <3> 	mov [%6+2],ax
 11555                              <3> 	mov ax,[bp+0x0A]
 11556                              <3> 	mov [%6],ax
 11557                              <3> 	stkclose 0x0C
 11558                              <3> %endmacro
 11559                              <3> 	
 11560                              <3> %macro fladdorsub 7
 11561                              <3> 	stkopen 0x0E
 11562                              <3> 	mov ax,%1
 11563                              <3> 	mov ds,ax
 11564                              <3> 	mov ax,[%2+2]
 11565                              <3> 	mov [bp+0],ax
 11566                              <3> 	mov ax,[%2]
 11567                              <3> 	mov [bp+2],ax
 11568                              <3> 	mov ax,%3
 11569                              <3> 	mov ds,ax
 11570                              <3> 	mov ax,[%4+2]
 11571                              <3> 	mov [bp+4],ax
 11572                              <3> 	mov ax,[%4]
 11573                              <3> 	mov [bp+6],ax
 11574                              <3> 	mov word [bp+0x0C], %7
 11575                              <3> 	call proc_fladdorsub
 11576                              <3> 	mov ax,sp
 11577                              <3> 	mov bp,ax
 11578                              <3> 	mov ax,%5
 11579                              <3> 	mov ds,ax
 11580                              <3> 	mov ax,[bp+8]
 11581                              <3> 	mov [%6+2],ax
 11582                              <3> 	mov ax,[bp+0x0A]
 11583                              <3> 	mov [%6],ax
 11584                              <3> 	stkclose 0x0E
 11585                              <3> %endmacro
 11586                              <3> 	
 11587                              <3> %endif
 11588                              <2> 	%include "lib/trigon.mac"
 11589                              <3> 
 11590                              <3> %ifndef TRIGON_MAC
 11591                              <3> 	%define TRIGON_MAC
 11592                              <3> 
 11593                              <3> 	%include "lib/trigon.asm"
 11594                              <3> 	
 11595                              <3> %macro to0x360 1
 11596                              <3> 	to0x360 %1, %1
 11597                              <3> %endmacro
 11598                              <3> 
 11599                              <3> %macro to0x360 2
 11600                              <3> 	to0x360 cs, %1, cs, %2
 11601                              <3> %endmacro
 11602                              <3> 
 11603                              <3> %macro toradians 1
 11604                              <3> 	toradians %1, %1
 11605                              <3> %endmacro
 11606                              <3> 
 11607                              <3> %macro todegrees 1
 11608                              <3> 	todegrees %1, %1
 11609                              <3> %endmacro
 11610                              <3> 
 11611                              <3> %macro toradians 2
 11612                              <3> 	toradians cs, %1, cs, %2
 11613                              <3> %endmacro
 11614                              <3> 	
 11615                              <3> %macro todegrees 2
 11616                              <3> 	todegrees cs, %1, cs, %2
 11617                              <3> %endmacro	
 11618                              <3> 	
 11619                              <3> %macro atan 1
 11620                              <3> 	atan %1, %1
 11621                              <3> %endmacro	
 11622                              <3> 	
 11623                              <3> %macro atan 2
 11624                              <3> 	atan cs, %1, cs, %2
 11625                              <3> %endmacro	
 11626                              <3> 	
 11627                              <3> %macro sin 1
 11628                              <3> 	sin %1, %1
 11629                              <3> %endmacro	
 11630                              <3> 	
 11631                              <3> %macro sin 2
 11632                              <3> 	sin cs, %1, cs, %2
 11633                              <3> %endmacro
 11634                              <3> 
 11635                              <3> %macro cos 1
 11636                              <3> 	cos %1, %1
 11637                              <3> %endmacro	
 11638                              <3> 	
 11639                              <3> %macro cos 2
 11640                              <3> 	cos cs, %1, cs, %2
 11641                              <3> %endmacro		
 11642                              <3> 	
 11643                              <3> %macro sin 4
 11644                              <3> 	sinorcos %1, %2, %3, %4, 1
 11645                              <3> %endmacro
 11646                              <3> 
 11647                              <3> %macro cos 4
 11648                              <3> 	sinorcos %1, %2, %3, %4, 0
 11649                              <3> %endmacro
 11650                              <3> 
 11651                              <3> %macro to0x360 4
 11652                              <3> 	stkopen 0x08
 11653                              <3> 	mov ax,%1
 11654                              <3> 	mov ds,ax
 11655                              <3> 	mov ax,[%2+2]
 11656                              <3> 	mov [bp+0],ax
 11657                              <3> 	mov ax,[%2]
 11658                              <3> 	mov [bp+2],ax
 11659                              <3> 	call proc_to0x360
 11660                              <3> 	mov ax,sp
 11661                              <3> 	mov bp,ax
 11662                              <3> 	mov ax,%3
 11663                              <3> 	mov ds,ax
 11664                              <3> 	mov ax,[bp+4]
 11665                              <3> 	mov [%4+2],ax
 11666                              <3> 	mov ax,[bp+6]
 11667                              <3> 	mov [%4],ax
 11668                              <3> 	stkclose 0x08
 11669                              <3> %endmacro	
 11670                              <3> 
 11671                              <3> %macro toradians 4
 11672                              <3> 	stkopen 0x08
 11673                              <3> 	mov ax,%1
 11674                              <3> 	mov ds,ax
 11675                              <3> 	mov ax,[%2+2]
 11676                              <3> 	mov [bp+0],ax
 11677                              <3> 	mov ax,[%2]
 11678                              <3> 	mov [bp+2],ax
 11679                              <3> 	call proc_toradians
 11680                              <3> 	mov ax,sp
 11681                              <3> 	mov bp,ax
 11682                              <3> 	mov ax,%3
 11683                              <3> 	mov ds,ax
 11684                              <3> 	mov ax,[bp+4]
 11685                              <3> 	mov [%4+2],ax
 11686                              <3> 	mov ax,[bp+6]
 11687                              <3> 	mov [%4],ax
 11688                              <3> 	stkclose 0x08
 11689                              <3> %endmacro	
 11690                              <3> 
 11691                              <3> %macro todegrees 4
 11692                              <3> 	stkopen 0x08
 11693                              <3> 	mov ax,%1
 11694                              <3> 	mov ds,ax
 11695                              <3> 	mov ax,[%2+2]
 11696                              <3> 	mov [bp+0],ax
 11697                              <3> 	mov ax,[%2]
 11698                              <3> 	mov [bp+2],ax
 11699                              <3> 	call proc_todegrees
 11700                              <3> 	mov ax,sp
 11701                              <3> 	mov bp,ax
 11702                              <3> 	mov ax,%3
 11703                              <3> 	mov ds,ax
 11704                              <3> 	mov ax,[bp+4]
 11705                              <3> 	mov [%4+2],ax
 11706                              <3> 	mov ax,[bp+6]
 11707                              <3> 	mov [%4],ax
 11708                              <3> 	stkclose 0x08
 11709                              <3> %endmacro	
 11710                              <3> 
 11711                              <3> %macro atan 4
 11712                              <3> 	stkopen 0x08
 11713                              <3> 	mov ax,%1
 11714                              <3> 	mov ds,ax
 11715                              <3> 	mov ax,[%2+2]
 11716                              <3> 	mov [bp+0],ax
 11717                              <3> 	mov ax,[%2]
 11718                              <3> 	mov [bp+2],ax
 11719                              <3> 	call proc_atan
 11720                              <3> 	mov ax,sp
 11721                              <3> 	mov bp,ax
 11722                              <3> 	mov ax,%3
 11723                              <3> 	mov ds,ax
 11724                              <3> 	mov ax,[bp+4]
 11725                              <3> 	mov [%4+2],ax
 11726                              <3> 	mov ax,[bp+6]
 11727                              <3> 	mov [%4],ax
 11728                              <3> 	stkclose 0x08
 11729                              <3> %endmacro
 11730                              <3> 	
 11731                              <3> %macro sinorcos 5
 11732                              <3> 	stkopen 0x09
 11733                              <3> 	mov ax,%1
 11734                              <3> 	mov ds,ax
 11735                              <3> 	mov ax,[%2+2]
 11736                              <3> 	mov [bp+0],ax
 11737                              <3> 	mov ax,[%2]
 11738                              <3> 	mov [bp+2],ax
 11739                              <3> 	mov byte [bp+8],%5	
 11740                              <3> 	call proc_sinorcos
 11741                              <3> 	mov ax,sp
 11742                              <3> 	mov bp,ax
 11743                              <3> 	mov ax,%3
 11744                              <3> 	mov ds,ax
 11745                              <3> 	mov ax,[bp+4]
 11746                              <3> 	mov [%4+2],ax
 11747                              <3> 	mov ax,[bp+6]
 11748                              <3> 	mov [%4],ax
 11749                              <3> 	stkclose 0x09
 11750                              <3> %endmacro
 11751                              <3> 	
 11752                              <3> %endif
 11753                              <2> 	%include "lib/graph.mac"
 11754                              <3> 
 11755                              <3> %ifndef GRAPH_MAC
 11756                              <3> 	%define GRAPH_MAC
 11757                              <3> 
 11758                              <3> 	%include "lib/graph.asm"
 11759                              <4> 
 11760                              <4> %ifndef GRAPH_ASM
 11761                              <4> 	%define GRAPH_ASM
 11762                              <4> 
 11763                              <4> 	%include "lib/system.mac"
 11764                              <5>  
 11765                              <5> %ifndef SYSTEM_MAC
 11766                              <5>  	%define SYSTEM_MAC
 11767                              <5>  	
 11768                              <5> 	%ifndef TRUE
 11769                              <5> 		%define TRUE 01h
 11770                              <5> 	%endif
 11771                              <5> 	%ifndef FALSE
 11772                              <5> 		%define FALSE 00h
 11773                              <5> 	%endif
 11774                              <5> 	
 11775                              <5> %macro vlodsb 3
 11776                              <5> 	vlodsb cs, %1, %2, %3
 11777                              <5> %endmacro
 11778                              <5> 
 11779                              <5> %macro vstosb 3
 11780                              <5> 	vstosb cs, %1, %2, %3
 11781                              <5> %endmacro
 11782                              <5> 	 	
 11783                              <5> %macro int16toreg 2
 11784                              <5> 	int16toreg cs, %1, %2
 11785                              <5> %endmacro
 11786                              <5> 
 11787                              <5> %macro regtoint16 2
 11788                              <5> 	regtoint16 %1, cs, %2
 11789                              <5> %endmacro
 11790                              <5> 
 11791                              <5> %macro vstosb 4
 11792                              <5> 	push %1
 11793                              <5> 	pop ds
 11794                              <5> 	mov si,%2
 11795                              <5> 	add si,%3
 11796                              <5> 	mov byte [si],%4	
 11797                              <5> %endmacro
 11798                              <5> 
 11799                              <5> %macro vlodsb 4
 11800                              <5> 	push %1
 11801                              <5> 	pop ds
 11802                              <5> 	mov si,%2
 11803                              <5> 	add si,%3
 11804                              <5> 	mov byte %4,[si]	
 11805                              <5> %endmacro 	 
 11806                              <5> 
 11807                              <5> %macro int16toreg 3
 11808                              <5> 	push %2
 11809                              <5> 	push %1
 11810                              <5> 	pop ds
 11811                              <5> 	pop si
 11812                              <5> 	mov word %3,[si]	
 11813                              <5> %endmacro
 11814                              <5> 
 11815                              <5> %macro regtoint16 3
 11816                              <5> 	push %3
 11817                              <5> 	push %2
 11818                              <5> 	pop ds
 11819                              <5> 	pop si
 11820                              <5> 	mov word [si],%1	
 11821                              <5> %endmacro
 11822                              <5> 
 11823                              <5> %macro mov32 2
 11824                              <5> 	mov32 cs, %1, cs, %2
 11825                              <5> %endmacro
 11826                              <5> 
 11827                              <5> %macro mov16 2
 11828                              <5> 	mov16 cs, %1, cs, %2
 11829                              <5> %endmacro
 11830                              <5> 
 11831                              <5> %macro mov32 4
 11832                              <5> 	mov ax,%3
 11833                              <5> 	mov ds,ax
 11834                              <5> 	mov cx,[%4+2]
 11835                              <5> 	mov dx,[%4]
 11836                              <5> 	mov ax,%1
 11837                              <5> 	mov ds,ax
 11838                              <5> 	mov [%2+2],cx
 11839                              <5> 	mov [%2],dx
 11840                              <5> %endmacro
 11841                              <5> 
 11842                              <5> %macro mov16 4
 11843                              <5> 	mov ax,%3
 11844                              <5> 	mov ds,ax
 11845                              <5> 	mov bx,[%4]
 11846                              <5> 	mov ax,%1
 11847                              <5> 	mov ds,ax
 11848                              <5> 	mov [%2],bx
 11849                              <5> %endmacro
 11850                              <5>  	 	
 11851                              <5> %macro mformat 4
 11852                              <5> 	stkopen 8
 11853                              <5> 	mov word [ bp + 0 ], %1
 11854                              <5> 	mov word [ bp + 2 ], %2
 11855                              <5> 	mov word [ bp + 4 ], %3
 11856                              <5> 	mov word [ bp + 6 ], %4
 11857                              <5> 	call kernel_segment:mformat
 11858                              <5> 	stkclose 8
 11859                              <5> %endmacro
 11860                              <5> 
 11861                              <5> %macro malloc 6
 11862                              <5> 	stkopen 0Bh
 11863                              <5> 	mov word [ bp + 4 ], %3
 11864                              <5> 	mov word [ bp + 6 ], %4
 11865                              <5> 	mov word [ bp + 8 ], %5	
 11866                              <5> 	call kernel_segment:malloc
 11867                              <5> 	push sp
 11868                              <5> 	pop bp
 11869                              <5> 	mov word %1, [ bp ]
 11870                              <5> 	mov word %2, [ bp + 2 ]
 11871                              <5> 	mov byte %6, [ bp + 0x0A ]
 11872                              <5> 	stkclose 0Bh
 11873                              <5> %endmacro 	
 11874                              <5> 
 11875                              <5> %macro laddr 2
 11876                              <5> 	laddr %1, %2, %1, %2
 11877                              <5> %endmacro
 11878                              <5> 
 11879                              <5> %macro faddr 2
 11880                              <5> 	faddr %1, %2, %1, %2
 11881                              <5> %endmacro
 11882                              <5>  	
 11883                              <5> %macro laddr 4
 11884                              <5> 	stkopen 8
 11885                              <5> 	mov word [ bp + 4 ], %3
 11886                              <5> 	mov word [ bp + 6 ], %4	
 11887                              <5> 	call kernel_segment:laddr
 11888                              <5> 	push sp
 11889                              <5> 	pop bp
 11890                              <5> 	mov word %1, [ bp + 0 ]
 11891                              <5> 	mov word %2, [ bp + 2 ]	
 11892                              <5> 	stkclose 8
 11893                              <5> %endmacro
 11894                              <5> 
 11895                              <5> %macro faddr 4
 11896                              <5> 	stkopen 8
 11897                              <5> 	mov word [ bp + 4 ], %3
 11898                              <5> 	mov word [ bp + 6 ], %4	
 11899                              <5> 	call kernel_segment:faddr
 11900                              <5> 	push sp
 11901                              <5> 	pop bp
 11902                              <5> 	mov word %1, [ bp + 0 ]
 11903                              <5> 	mov word %2, [ bp + 2 ]	
 11904                              <5> 	stkclose 8
 11905                              <5> %endmacro	
 11906                              <5>  
 11907                              <5> 
 11908                              <5> %macro stkopen 1		
 11909                              <5> 	sub word sp, %1
 11910                              <5> 	push sp
 11911                              <5> 	pop bp
 11912                              <5> %endmacro
 11913                              <5> 
 11914                              <5> %macro stkclose 1
 11915                              <5> 	add word sp, %1
 11916                              <5> %endmacro
 11917                              <5> 
 11918                              <5> %macro stkload 1-* 	
 11919                              <5>  	%rep %0
 11920                              <5>  	 	%rotate -1
 11921                              <5>  		pop %1
 11922                              <5>  	%endrep
 11923                              <5>  	%rep %0
 11924                              <5>  		push %1
 11925                              <5>  		%rotate 1
 11926                              <5>  	%endrep
 11927                              <5> %endmacro
 11928                              <5> 
 11929                              <5> %macro stkpush 1-* 	
 11930                              <5>  	%rep %0
 11931                              <5>  		push %1
 11932                              <5>  		%rotate 1
 11933                              <5>  	%endrep 	
 11934                              <5> %endmacro
 11935                              <5>  
 11936                              <5> %macro stkpop 1-*
 11937                              <5>  	%rep %0
 11938                              <5>  	 	%rotate -1
 11939                              <5>  		pop %1
 11940                              <5>  	%endrep 	 	
 11941                              <5> %endmacro
 11942                              <5> 
 11943                              <5> %macro delay 1
 11944                              <5> 	delay cs, %1
 11945                              <5> %endmacro
 11946                              <5> 
 11947                              <5> %macro delay 2
 11948                              <5> 	mov ax,%1
 11949                              <5> 	mov ds,ax
 11950                              <5> 	
 11951                              <5> 	mov ah,86h
 11952                              <5> 	mov cx,[%2+2]
 11953                              <5> 	mov dx,[%2]
 11954                              <5> 	int 15h	
 11955                              <5> %endmacro
 11956                              <5> 
 11957                              <5> %endif 
 11958                              <4> 	%include "lib/math.mac"
 11959                              <5> 
 11960                              <5> %ifndef MATH_MAC
 11961                              <5> 	%define MATH_MAC
 11962                              <5> 	
 11963                              <5> 	%include "lib/math.asm"
 11964                              <5> 	%include "lib/system.mac"
 11965                              <5> 
 11966                              <5> %macro chgsig 1
 11967                              <5> 	chgsig cs, %1
 11968                              <5> %endmacro
 11969                              <5> 
 11970                              <5> %macro cmp16 3
 11971                              <5> 	cmp16 cs, %1, cs, %2, %3
 11972                              <5> %endmacro
 11973                              <5> 
 11974                              <5> %macro mul16 2
 11975                              <5> 	mul16 cs, %1, cs, %2
 11976                              <5> %endmacro
 11977                              <5> 
 11978                              <5> %macro div16 2
 11979                              <5> 	div16 cs, %1, cs, %2
 11980                              <5> %endmacro
 11981                              <5> 
 11982                              <5> %macro mod16 2
 11983                              <5> 	mod16 cs, %1, cs, %2
 11984                              <5> %endmacro
 11985                              <5> 
 11986                              <5> %macro inc16 1
 11987                              <5> 	inc16 cs, %1
 11988                              <5> %endmacro
 11989                              <5> 
 11990                              <5> %macro dec16 1
 11991                              <5> 	dec16 cs, %1
 11992                              <5> %endmacro
 11993                              <5> 
 11994                              <5> %macro add16 2
 11995                              <5> 	add16 cs, %1, cs, %2
 11996                              <5> %endmacro
 11997                              <5> 
 11998                              <5> %macro sub16 2
 11999                              <5> 	sub16 cs, %1, cs, %2
 12000                              <5> %endmacro
 12001                              <5> 
 12002                              <5> %macro int32to16 2
 12003                              <5> 	int32to16 cs, %1, %2
 12004                              <5> %endmacro
 12005                              <5> 
 12006                              <5> %macro int16to32 2
 12007                              <5> 	int16to32 %1, cs, %2
 12008                              <5> %endmacro
 12009                              <5> 
 12010                              <5> %macro idiv32 5
 12011                              <5> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 12012                              <5> %endmacro
 12013                              <5> 
 12014                              <5> %macro imul32 3
 12015                              <5> 	imul32 cs, %1, cs, %2, cs, %3
 12016                              <5> %endmacro
 12017                              <5> 
 12018                              <5> %macro div32 5
 12019                              <5> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 12020                              <5> %endmacro
 12021                              <5> 
 12022                              <5> %macro mul32 3
 12023                              <5> 	mul32 cs, %1, cs, %2, cs, %3
 12024                              <5> %endmacro
 12025                              <5> 	
 12026                              <5> %macro add32 3
 12027                              <5> 	add32 cs, %1, cs, %2, cs, %3
 12028                              <5> %endmacro
 12029                              <5> 
 12030                              <5> %macro sub32 3
 12031                              <5> 	sub32 cs, %1, cs, %2, cs, %3
 12032                              <5> %endmacro
 12033                              <5> 
 12034                              <5> %macro int32to16 3
 12035                              <5> 	stkopen 0x06
 12036                              <5> 	mov ax,%1
 12037                              <5> 	mov ds,ax
 12038                              <5> 	mov ax,[%2+2]
 12039                              <5> 	mov word [bp+0], ax
 12040                              <5> 	mov ax,[%2]	
 12041                              <5> 	mov word [bp+2], ax
 12042                              <5> 	call proc_int32to16
 12043                              <5> 	mov ax,sp
 12044                              <5> 	mov bp,ax
 12045                              <5> 	mov ax,[bp+4]
 12046                              <5> 	mov word %3, ax	
 12047                              <5> 	stkclose 0x06
 12048                              <5> %endmacro
 12049                              <5> 
 12050                              <5> %macro int16to32 3
 12051                              <5> 	stkopen 0x06
 12052                              <5> 	mov word [bp+0], %1	
 12053                              <5> 	call proc_int16to32
 12054                              <5> 	mov ax,sp
 12055                              <5> 	mov bp,ax
 12056                              <5> 	mov ax,%2
 12057                              <5> 	mov ds,ax
 12058                              <5> 	mov ax,[bp+2]
 12059                              <5> 	mov [%3+2],ax
 12060                              <5> 	mov ax,[bp+4]
 12061                              <5> 	mov [%3],ax	
 12062                              <5> 	stkclose 0x06
 12063                              <5> %endmacro
 12064                              <5> 
 12065                              <5> %macro div32 10
 12066                              <5> 	stkopen 0x11
 12067                              <5> 	mov ax,%1
 12068                              <5> 	mov ds,ax
 12069                              <5> 	mov ax,[%2+2]
 12070                              <5> 	mov word [bp+0], ax
 12071                              <5> 	mov ax,[%2]
 12072                              <5> 	mov word [bp+2], ax
 12073                              <5> 	mov ax,%3
 12074                              <5> 	mov ds,ax
 12075                              <5> 	mov ax,[%4+2]
 12076                              <5> 	mov word [bp+4], ax
 12077                              <5> 	mov ax,[%4]
 12078                              <5> 	mov word [bp+6], ax
 12079                              <5> 	call proc_div32
 12080                              <5> 	mov ax,sp
 12081                              <5> 	mov bp,ax
 12082                              <5> 	mov ax,%5
 12083                              <5> 	mov ds,ax
 12084                              <5> 	mov word ax, [bp+8]
 12085                              <5> 	mov word [%6+2], ax
 12086                              <5> 	mov word ax, [bp+0x0A]
 12087                              <5> 	mov word [%6], ax
 12088                              <5> 	mov ax,%7
 12089                              <5> 	mov ds,ax
 12090                              <5> 	mov word ax,[bp+0x0C]
 12091                              <5> 	mov word [%8+2],ax
 12092                              <5> 	mov word ax,[bp+0x0E]
 12093                              <5> 	mov word [%8],ax
 12094                              <5> 	mov ax,%9
 12095                              <5> 	mov ds,ax
 12096                              <5> 	mov byte al,[bp+0x10]
 12097                              <5> 	mov byte [%10],al
 12098                              <5> 	stkclose 0x11
 12099                              <5> %endmacro
 12100                              <5> 	
 12101                              <5> %macro mul32 6
 12102                              <5> 	stkopen 0x0C
 12103                              <5> 	mov ax,%1
 12104                              <5> 	mov ds,ax
 12105                              <5> 	mov ax,[%2+2]
 12106                              <5> 	mov word [bp+0], ax
 12107                              <5> 	mov ax,[%2]
 12108                              <5> 	mov word [bp+2], ax
 12109                              <5> 	mov ax,%3
 12110                              <5> 	mov ds,ax
 12111                              <5> 	mov ax,[%4+2]
 12112                              <5> 	mov word [bp+4], ax
 12113                              <5> 	mov ax,[%4]
 12114                              <5> 	mov word [bp+6], ax
 12115                              <5> 	call proc_mul32
 12116                              <5> 	mov ax,sp
 12117                              <5> 	mov bp,ax
 12118                              <5> 	mov ax,%5
 12119                              <5> 	mov ds,ax
 12120                              <5> 	mov word ax, [bp+8]
 12121                              <5> 	mov word [%6+2], ax
 12122                              <5> 	mov word ax, [bp+0x0A]
 12123                              <5> 	mov word [%6], ax
 12124                              <5> 	stkclose 0x0C
 12125                              <5> %endmacro	
 12126                              <5> 	
 12127                              <5> %macro add32 6
 12128                              <5> 	stkopen 0x0C
 12129                              <5> 	mov ax,%1
 12130                              <5> 	mov ds,ax
 12131                              <5> 	mov ax,[%2+2]
 12132                              <5> 	mov word [bp+0], ax
 12133                              <5> 	mov ax,[%2]
 12134                              <5> 	mov word [bp+2], ax
 12135                              <5> 	mov ax,%3
 12136                              <5> 	mov ds,ax
 12137                              <5> 	mov ax,[%4+2]
 12138                              <5> 	mov word [bp+4], ax
 12139                              <5> 	mov ax,[%4]
 12140                              <5> 	mov word [bp+6], ax
 12141                              <5> 	call proc_add32
 12142                              <5> 	mov ax,sp
 12143                              <5> 	mov bp,ax
 12144                              <5> 	mov ax,%5
 12145                              <5> 	mov ds,ax
 12146                              <5> 	mov word ax, [bp+8]
 12147                              <5> 	mov word [%6+2], ax
 12148                              <5> 	mov word ax, [bp+0x0A]
 12149                              <5> 	mov word [%6], ax
 12150                              <5> 	stkclose 0x0C
 12151                              <5> %endmacro
 12152                              <5> 
 12153                              <5> %macro sub32 6
 12154                              <5> 	stkopen 0x0C
 12155                              <5> 	mov ax,%1
 12156                              <5> 	mov ds,ax
 12157                              <5> 	mov ax,[%2+2]
 12158                              <5> 	mov word [bp+0], ax
 12159                              <5> 	mov ax,[%2]
 12160                              <5> 	mov word [bp+2], ax
 12161                              <5> 	mov ax,%3
 12162                              <5> 	mov ds,ax
 12163                              <5> 	mov ax,[%4+2]
 12164                              <5> 	mov word [bp+4], ax
 12165                              <5> 	mov ax,[%4]
 12166                              <5> 	mov word [bp+6], ax
 12167                              <5> 	call proc_sub32
 12168                              <5> 	mov ax,sp
 12169                              <5> 	mov bp,ax
 12170                              <5> 	mov ax,%5
 12171                              <5> 	mov ds,ax
 12172                              <5> 	mov word ax, [bp+8]
 12173                              <5> 	mov word [%6+2], ax
 12174                              <5> 	mov word ax, [bp+0x0A]
 12175                              <5> 	mov word [%6], ax
 12176                              <5> 	stkclose 0x0C
 12177                              <5> %endmacro
 12178                              <5> 
 12179                              <5> %macro idiv32 10
 12180                              <5> 	stkopen 0x11
 12181                              <5> 	mov ax,%1
 12182                              <5> 	mov ds,ax
 12183                              <5> 	mov ax,[%2+2]
 12184                              <5> 	mov word [bp+0], ax
 12185                              <5> 	mov ax,[%2]
 12186                              <5> 	mov word [bp+2], ax
 12187                              <5> 	mov ax,%3
 12188                              <5> 	mov ds,ax
 12189                              <5> 	mov ax,[%4+2]
 12190                              <5> 	mov word [bp+4], ax
 12191                              <5> 	mov ax,[%4]
 12192                              <5> 	mov word [bp+6], ax
 12193                              <5> 	call proc_idiv32
 12194                              <5> 	mov ax,sp
 12195                              <5> 	mov bp,ax
 12196                              <5> 	mov ax,%5
 12197                              <5> 	mov ds,ax
 12198                              <5> 	mov word ax, [bp+8]
 12199                              <5> 	mov word [%6+2], ax
 12200                              <5> 	mov word ax, [bp+0x0A]
 12201                              <5> 	mov word [%6], ax
 12202                              <5> 	mov ax,%7
 12203                              <5> 	mov ds,ax
 12204                              <5> 	mov word ax,[bp+0x0C]
 12205                              <5> 	mov word [%8+2],ax
 12206                              <5> 	mov word ax,[bp+0x0E]
 12207                              <5> 	mov word [%8],ax
 12208                              <5> 	mov ax,%9
 12209                              <5> 	mov ds,ax
 12210                              <5> 	mov byte al,[bp+0x10]
 12211                              <5> 	mov byte [%10],al
 12212                              <5> 	stkclose 0x11
 12213                              <5> %endmacro
 12214                              <5> 
 12215                              <5> %macro imul32 6
 12216                              <5> 	stkopen 0x0C
 12217                              <5> 	mov ax,%1
 12218                              <5> 	mov ds,ax
 12219                              <5> 	mov ax,[%2+2]
 12220                              <5> 	mov word [bp+0], ax
 12221                              <5> 	mov ax,[%2]
 12222                              <5> 	mov word [bp+2], ax
 12223                              <5> 	mov ax,%3
 12224                              <5> 	mov ds,ax
 12225                              <5> 	mov ax,[%4+2]
 12226                              <5> 	mov word [bp+4], ax
 12227                              <5> 	mov ax,[%4]
 12228                              <5> 	mov word [bp+6], ax
 12229                              <5> 	call proc_imul32
 12230                              <5> 	mov ax,sp
 12231                              <5> 	mov bp,ax
 12232                              <5> 	mov ax,%5
 12233                              <5> 	mov ds,ax
 12234                              <5> 	mov word ax, [bp+8]
 12235                              <5> 	mov word [%6+2], ax
 12236                              <5> 	mov word ax, [bp+0x0A]
 12237                              <5> 	mov word [%6], ax
 12238                              <5> 	stkclose 0x0C
 12239                              <5> %endmacro
 12240                              <5> 	
 12241                              <5> %macro cmp32 3
 12242                              <5> 	cmp32 cs, %1, cs, %2, %3
 12243                              <5> %endmacro	
 12244                              <5> 	
 12245                              <5> %macro cmp32 5
 12246                              <5> 	stkopen 9
 12247                              <5> 	mov ax,%1
 12248                              <5> 	mov ds,ax
 12249                              <5> 	mov word ax,[%2+2]
 12250                              <5> 	mov word [bp+0], ax
 12251                              <5> 	mov word ax,[%2]
 12252                              <5> 	mov word [bp+2], ax	
 12253                              <5> 	mov ax,%3
 12254                              <5> 	mov ds,ax
 12255                              <5> 	mov word ax,[%4+2]
 12256                              <5> 	mov word [bp+4], ax
 12257                              <5> 	mov word ax,[%4]
 12258                              <5> 	mov word [bp+6], ax	
 12259                              <5> 	call proc_cmp32
 12260                              <5> 	mov ax,sp
 12261                              <5> 	mov bp,ax
 12262                              <5> 	mov al,[bp+8]
 12263                              <5> 	mov byte %5,al
 12264                              <5> 	stkclose 9
 12265                              <5> %endmacro
 12266                              <5> 	
 12267                              <5> %macro shl32 2
 12268                              <5> 	shl32 cs, %1, %2
 12269                              <5> %endmacro	
 12270                              <5> 	
 12271                              <5> %macro shl32 3
 12272                              <5> 	stkopen 5
 12273                              <5> 	mov ax,%1
 12274                              <5> 	mov ds,ax
 12275                              <5> 	mov word ax,[%2+2]
 12276                              <5> 	mov word [bp+0], ax
 12277                              <5> 	mov word ax,[%2]
 12278                              <5> 	mov word [bp+2], ax
 12279                              <5> 	mov byte al, %3
 12280                              <5> 	mov byte [bp+4], al 
 12281                              <5> 	call proc_shl32
 12282                              <5> 	mov ax,sp
 12283                              <5> 	mov bp,ax
 12284                              <5> 	mov ax,%1
 12285                              <5> 	mov ds,ax
 12286                              <5> 	mov ax,[bp+0]
 12287                              <5> 	mov word [%2+2],ax
 12288                              <5> 	mov ax,[bp+2]
 12289                              <5> 	mov word [%2],ax
 12290                              <5> 	stkclose 5
 12291                              <5> %endmacro
 12292                              <5> 
 12293                              <5> 
 12294                              <5> %macro shr32 2
 12295                              <5> 	shr32 cs, %1, %2
 12296                              <5> %endmacro	
 12297                              <5> 	
 12298                              <5> %macro shr32 3
 12299                              <5> 	stkopen 5
 12300                              <5> 	mov ax,%1
 12301                              <5> 	mov ds,ax
 12302                              <5> 	mov word ax,[%2+2]
 12303                              <5> 	mov word [bp+0], ax
 12304                              <5> 	mov word ax,[%2]
 12305                              <5> 	mov word [bp+2], ax
 12306                              <5> 	mov byte al, %3
 12307                              <5> 	mov byte [bp+4], al 
 12308                              <5> 	call proc_shr32
 12309                              <5> 	mov ax,sp
 12310                              <5> 	mov bp,ax
 12311                              <5> 	mov ax,%1
 12312                              <5> 	mov ds,ax
 12313                              <5> 	mov ax,[bp+0]
 12314                              <5> 	mov word [%2+2],ax
 12315                              <5> 	mov ax,[bp+2]
 12316                              <5> 	mov word [%2],ax
 12317                              <5> 	stkclose 5
 12318                              <5> %endmacro
 12319                              <5> 
 12320                              <5> %macro inc16 2
 12321                              <5> 	mov ax,%1
 12322                              <5> 	mov ds,ax
 12323                              <5> 	inc word [%2]
 12324                              <5> %endmacro
 12325                              <5> 
 12326                              <5> %macro dec16 2
 12327                              <5> 	mov ax,%1
 12328                              <5> 	mov ds,ax
 12329                              <5> 	dec word [%2]
 12330                              <5> %endmacro
 12331                              <5> 
 12332                              <5> %macro add16 4	
 12333                              <5> 	mov ax,%3
 12334                              <5> 	mov ds,ax
 12335                              <5> 	mov bx,[%4]	
 12336                              <5> 	mov ax,%1
 12337                              <5> 	mov ds,ax	
 12338                              <5> 	add [%2],bx
 12339                              <5> %endmacro
 12340                              <5> 
 12341                              <5> %macro sub16 4
 12342                              <5> 	mov ax,%3
 12343                              <5> 	mov ds,ax
 12344                              <5> 	mov bx,[%4]
 12345                              <5> 	mov ax,%1
 12346                              <5> 	mov ds,ax
 12347                              <5> 	sub [%2],bx
 12348                              <5> %endmacro
 12349                              <5> 
 12350                              <5> %macro mul16 4
 12351                              <5> 	mov ax,%1
 12352                              <5> 	mov ds,ax
 12353                              <5> 	mov bx,[%2]
 12354                              <5> 	mov ax,%3
 12355                              <5> 	mov ds,ax
 12356                              <5> 	mov cx,[%4]
 12357                              <5> 	
 12358                              <5> 	mov ax,bx
 12359                              <5> 	imul cx
 12360                              <5> 	
 12361                              <5> 	mov dx,%1
 12362                              <5> 	mov ds,dx
 12363                              <5> 	mov [%2],ax
 12364                              <5> %endmacro
 12365                              <5> 
 12366                              <5> %macro div16 4
 12367                              <5> 	mov ax,%1
 12368                              <5> 	mov ds,ax
 12369                              <5> 	mov bx,[%2]
 12370                              <5> 	mov ax,%3
 12371                              <5> 	mov ds,ax
 12372                              <5> 	mov cx,[%4]
 12373                              <5> 	
 12374                              <5> 	xor dx,dx
 12375                              <5> 	mov ax,bx
 12376                              <5> 	idiv cx
 12377                              <5> 	
 12378                              <5> 	mov dx,%1
 12379                              <5> 	mov ds,dx
 12380                              <5> 	mov [%2],ax
 12381                              <5> %endmacro
 12382                              <5> 
 12383                              <5> 
 12384                              <5> %macro mod16 4
 12385                              <5> 	mov ax,%1
 12386                              <5> 	mov ds,ax
 12387                              <5> 	mov bx,[%2]
 12388                              <5> 	mov ax,%3
 12389                              <5> 	mov ds,ax
 12390                              <5> 	mov cx,[%4]
 12391                              <5> 	
 12392                              <5> 	xor dx,dx
 12393                              <5> 	mov ax,bx
 12394                              <5> 	idiv cx
 12395                              <5> 	
 12396                              <5> 	mov bx,%1
 12397                              <5> 	mov ds,bx
 12398                              <5> 	mov [%2],dx
 12399                              <5> %endmacro
 12400                              <5> 
 12401                              <5> %macro cmp16 5
 12402                              <5> 	mov ax,%1
 12403                              <5> 	mov ds,ax
 12404                              <5> 	mov bx,[%2]
 12405                              <5> 	mov ax,%3
 12406                              <5> 	mov ds,ax
 12407                              <5> 	mov	cx,[%4]
 12408                              <5> 	
 12409                              <5> 	cmp bx,cx
 12410                              <5> 	jg %%above
 12411                              <5> 	jl %%below
 12412                              <5> 		mov byte %5, 0
 12413                              <5> 		jmp %%endcmp
 12414                              <5> 	%%above:
 12415                              <5> 		mov byte %5, 1
 12416                              <5> 		jmp %%endcmp
 12417                              <5> 	%%below:
 12418                              <5> 		mov byte %5, -1
 12419                              <5> 	%%endcmp:
 12420                              <5> %endmacro
 12421                              <5> 
 12422                              <5> %macro chgsig 2
 12423                              <5> 	mov ax,%1
 12424                              <5> 	mov ds,ax
 12425                              <5> 	mov ax,[%2]
 12426                              <5> 	mov bx,0xFFFF
 12427                              <5> 	sub bx,ax
 12428                              <5> 	inc bx
 12429                              <5> 	mov [%2],bx
 12430                              <5> %endmacro
 12431                              <5> 	
 12432                              <5> %endif
 12433                              <4> 	%include "lib/float.mac"
 12434                              <5> 
 12435                              <5> %ifndef FLOAT_MAC
 12436                              <5> 	%define FLOAT_MAC
 12437                              <5> 	
 12438                              <5> 	%include "lib/float.asm"	
 12439                              <5> 
 12440                              <5> %macro flgetsig 2
 12441                              <5> 	flgetsig cs, %1, %2
 12442                              <5> %endmacro
 12443                              <5> 
 12444                              <5> %macro flinvsig 1
 12445                              <5> 	flinvsig cs, %1
 12446                              <5> %endmacro
 12447                              <5> 
 12448                              <5> %macro flsetsig 1
 12449                              <5> 	flsetsig cs, %1
 12450                              <5> %endmacro
 12451                              <5> 
 12452                              <5> %macro flclrsig 1
 12453                              <5> 	flclrsig cs, %1
 12454                              <5> %endmacro
 12455                              <5> 
 12456                              <5> %macro flroundtoint16 2
 12457                              <5> 	flroundtoint16 cs, %1, cs, %2
 12458                              <5> %endmacro
 12459                              <5> 
 12460                              <5> %macro flroundtoint32 1
 12461                              <5> 	flroundtoint32 %1, %1
 12462                              <5> %endmacro
 12463                              <5> 
 12464                              <5> %macro flroundtoint32 2
 12465                              <5> 	flroundtoint32 cs, %1, cs, %2
 12466                              <5> %endmacro
 12467                              <5> 
 12468                              <5> %macro int16tofl 2
 12469                              <5> 	int16tofl cs, %1, cs, %2
 12470                              <5> %endmacro
 12471                              <5> 
 12472                              <5> %macro fltoint16 2
 12473                              <5> 	fltoint16 cs, %1, cs, %2
 12474                              <5> %endmacro
 12475                              <5> 
 12476                              <5> %macro fltoint32 1
 12477                              <5> 	fltoint32 %1, %1
 12478                              <5> %endmacro
 12479                              <5> 
 12480                              <5> %macro fltoint32 2
 12481                              <5> 	fltoint32 cs, %1, cs, %2
 12482                              <5> %endmacro
 12483                              <5> 
 12484                              <5> %macro int32tofl 1
 12485                              <5> 	int32tofl %1, %1
 12486                              <5> %endmacro
 12487                              <5> 
 12488                              <5> %macro int32tofl 2
 12489                              <5> 	int32tofl cs, %1, cs, %2
 12490                              <5> %endmacro
 12491                              <5> 
 12492                              <5> %macro flcmp 3
 12493                              <5> 	flcmp cs, %1, cs, %2, %3
 12494                              <5> %endmacro
 12495                              <5> 
 12496                              <5> %macro flshl 2
 12497                              <5> 	flshl cs, %1, cs, %2
 12498                              <5> %endmacro
 12499                              <5> 
 12500                              <5> %macro flshr 2
 12501                              <5> 	flshr cs, %1, cs, %2
 12502                              <5> %endmacro
 12503                              <5> 
 12504                              <5> %macro fladd 3
 12505                              <5> 	fladd cs, %1, cs, %2, cs, %3
 12506                              <5> %endmacro
 12507                              <5> 
 12508                              <5> %macro flsub 3
 12509                              <5> 	flsub cs, %1, cs, %2, cs, %3
 12510                              <5> %endmacro	
 12511                              <5> 
 12512                              <5> %macro flmul 3
 12513                              <5> 	flmul cs, %1, cs, %2, cs, %3
 12514                              <5> %endmacro
 12515                              <5> 
 12516                              <5> %macro fldiv 3
 12517                              <5> 	fldiv cs, %1, cs, %2, cs, %3
 12518                              <5> %endmacro	
 12519                              <5> 
 12520                              <5> %macro fladd 6
 12521                              <5> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
 12522                              <5> %endmacro
 12523                              <5> 
 12524                              <5> %macro flsub 6
 12525                              <5> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
 12526                              <5> %endmacro
 12527                              <5> 
 12528                              <5> %macro flroundtoint16 4
 12529                              <5> 	stkopen 0x06
 12530                              <5> 	mov ax,%1
 12531                              <5> 	mov ds,ax
 12532                              <5> 	mov ax,[%2+2]
 12533                              <5> 	mov [bp+0],ax
 12534                              <5> 	mov ax,[%2]
 12535                              <5> 	mov [bp+2],ax	
 12536                              <5> 	call proc_flroundtoint16
 12537                              <5> 	mov ax,sp
 12538                              <5> 	mov bp,ax
 12539                              <5> 	mov ax,%3
 12540                              <5> 	mov ds,ax
 12541                              <5> 	mov ax,[bp+4]
 12542                              <5> 	mov [%4],ax
 12543                              <5> 	stkclose 0x06
 12544                              <5> %endmacro
 12545                              <5> 
 12546                              <5> %macro flroundtoint32 4
 12547                              <5> 	stkopen 0x08
 12548                              <5> 	mov ax,%1
 12549                              <5> 	mov ds,ax
 12550                              <5> 	mov ax,[%2+2]
 12551                              <5> 	mov [bp+0],ax
 12552                              <5> 	mov ax,[%2]
 12553                              <5> 	mov [bp+2],ax	
 12554                              <5> 	call proc_flroundtoint32
 12555                              <5> 	mov ax,sp
 12556                              <5> 	mov bp,ax
 12557                              <5> 	mov ax,%3
 12558                              <5> 	mov ds,ax
 12559                              <5> 	mov ax,[bp+4]
 12560                              <5> 	mov [%4+2],ax
 12561                              <5> 	mov ax,[bp+6]
 12562                              <5> 	mov [%4],ax
 12563                              <5> 	stkclose 0x08
 12564                              <5> %endmacro
 12565                              <5> 
 12566                              <5> %macro fltoint16 4
 12567                              <5> 	stkopen 0x06
 12568                              <5> 	mov ax,%1
 12569                              <5> 	mov ds,ax
 12570                              <5> 	mov ax,[%2+2]
 12571                              <5> 	mov [bp+0],ax
 12572                              <5> 	mov ax,[%2]
 12573                              <5> 	mov [bp+2],ax	
 12574                              <5> 	call proc_fltoint16
 12575                              <5> 	mov ax,sp
 12576                              <5> 	mov bp,ax
 12577                              <5> 	mov ax,%3
 12578                              <5> 	mov ds,ax
 12579                              <5> 	mov ax,[bp+4]
 12580                              <5> 	mov [%4],ax
 12581                              <5> 	stkclose 0x06
 12582                              <5> %endmacro
 12583                              <5> 
 12584                              <5> %macro int16tofl 4	
 12585                              <5> 	stkopen 0x06
 12586                              <5> 	mov ax,%1
 12587                              <5> 	mov ds,ax
 12588                              <5> 	mov ax,[%2]
 12589                              <5> 	mov [bp+0],ax	
 12590                              <5> 	call proc_int16tofl
 12591                              <5> 	mov ax,sp
 12592                              <5> 	mov bp,ax
 12593                              <5> 	mov ax,%3
 12594                              <5> 	mov ds,ax
 12595                              <5> 	mov ax,[bp+2]
 12596                              <5> 	mov [%4+2],ax
 12597                              <5> 	mov ax,[bp+4]
 12598                              <5> 	mov [%4],ax
 12599                              <5> 	stkclose 0x06
 12600                              <5> %endmacro
 12601                              <5> 
 12602                              <5> %macro fltoint32 4
 12603                              <5> 	stkopen 0x08
 12604                              <5> 	mov ax,%1
 12605                              <5> 	mov ds,ax
 12606                              <5> 	mov ax,[%2+2]
 12607                              <5> 	mov [bp+0],ax
 12608                              <5> 	mov ax,[%2]
 12609                              <5> 	mov [bp+2],ax	
 12610                              <5> 	call proc_fltoint32
 12611                              <5> 	mov ax,sp
 12612                              <5> 	mov bp,ax
 12613                              <5> 	mov ax,%3
 12614                              <5> 	mov ds,ax
 12615                              <5> 	mov ax,[bp+4]
 12616                              <5> 	mov [%4+2],ax
 12617                              <5> 	mov ax,[bp+6]
 12618                              <5> 	mov [%4],ax
 12619                              <5> 	stkclose 0x08
 12620                              <5> %endmacro
 12621                              <5> 
 12622                              <5> %macro int32tofl 4
 12623                              <5> 	stkopen 0x08
 12624                              <5> 	mov ax,%1
 12625                              <5> 	mov ds,ax
 12626                              <5> 	mov ax,[%2+2]
 12627                              <5> 	mov [bp+0],ax
 12628                              <5> 	mov ax,[%2]
 12629                              <5> 	mov [bp+2],ax	
 12630                              <5> 	call proc_int32tofl
 12631                              <5> 	mov ax,sp
 12632                              <5> 	mov bp,ax
 12633                              <5> 	mov ax,%3
 12634                              <5> 	mov ds,ax
 12635                              <5> 	mov ax,[bp+4]
 12636                              <5> 	mov [%4+2],ax
 12637                              <5> 	mov ax,[bp+6]
 12638                              <5> 	mov [%4],ax
 12639                              <5> 	stkclose 0x08
 12640                              <5> %endmacro
 12641                              <5> 
 12642                              <5> %macro flgetsig 3
 12643                              <5> 	stkopen 0x04
 12644                              <5> 	mov ax,%1
 12645                              <5> 	mov ds,ax
 12646                              <5> 	mov ax,[%2+2]
 12647                              <5> 	mov word [bp+0], ax
 12648                              <5> 	call proc_flgetsig
 12649                              <5> 	push sp
 12650                              <5> 	pop bp
 12651                              <5> 	mov ax,[bp+2]
 12652                              <5> 	mov word %3, ax
 12653                              <5> 	stkclose 0x04
 12654                              <5> %endmacro
 12655                              <5> 
 12656                              <5> %macro flinvsig 2
 12657                              <5> 	stkopen 0x02
 12658                              <5> 	mov ax,%1
 12659                              <5> 	mov ds,ax
 12660                              <5> 	mov ax,[%2+2]
 12661                              <5> 	mov word [bp+0], ax
 12662                              <5> 	call proc_flinvsig
 12663                              <5> 	push sp
 12664                              <5> 	pop bp
 12665                              <5> 	mov ax,[bp+0]
 12666                              <5> 	mov word [%2+2],ax
 12667                              <5> 	stkclose 0x02
 12668                              <5> %endmacro
 12669                              <5> 
 12670                              <5> %macro flsetsig 2
 12671                              <5> 	stkopen 0x04
 12672                              <5> 	mov ax,%1
 12673                              <5> 	mov ds,ax
 12674                              <5> 	mov ax,[%2+2]
 12675                              <5> 	mov word [bp+0], ax
 12676                              <5> 	mov word [bp+2], 0x8000
 12677                              <5> 	call proc_flsetsig
 12678                              <5> 	push sp
 12679                              <5> 	pop bp
 12680                              <5> 	mov ax,[bp+0]
 12681                              <5> 	mov word [%2+2],ax
 12682                              <5> 	stkclose 0x04	
 12683                              <5> %endmacro
 12684                              <5> 
 12685                              <5> %macro flclrsig 2
 12686                              <5> 	stkopen 0x04
 12687                              <5> 	mov ax,%1
 12688                              <5> 	mov ds,ax
 12689                              <5> 	mov ax,[%2+2]
 12690                              <5> 	mov word [bp+0], ax
 12691                              <5> 	mov word [bp+2], 0x0000
 12692                              <5> 	call proc_flsetsig
 12693                              <5> 	push sp
 12694                              <5> 	pop bp
 12695                              <5> 	mov ax,[bp+0]
 12696                              <5> 	mov word [%2+2],ax
 12697                              <5> 	stkclose 0x04	
 12698                              <5> %endmacro
 12699                              <5> 
 12700                              <5> %macro flcmp 5	
 12701                              <5> 	stkopen 0x09
 12702                              <5> 	mov ax,%1
 12703                              <5> 	mov ds,ax
 12704                              <5> 	mov ax,[%2+2]
 12705                              <5> 	mov [bp+0],ax
 12706                              <5> 	mov ax,[%2]
 12707                              <5> 	mov [bp+2],ax
 12708                              <5> 	mov ax,%3
 12709                              <5> 	mov ds,ax
 12710                              <5> 	mov ax,[%4+2]
 12711                              <5> 	mov [bp+4],ax
 12712                              <5> 	mov ax,[%4]
 12713                              <5> 	mov [bp+6],ax
 12714                              <5> 	call proc_flcmp
 12715                              <5> 	mov ax,sp
 12716                              <5> 	mov bp,ax
 12717                              <5> 	mov byte %5,[bp+8]
 12718                              <5> 	stkclose 0x09
 12719                              <5> %endmacro
 12720                              <5> 
 12721                              <5> %macro flshl 4	
 12722                              <5> 	stkopen 0x03
 12723                              <5> 	mov ax,%1
 12724                              <5> 	mov ds,ax
 12725                              <5> 	mov ax,[%2+2]
 12726                              <5> 	mov [bp+0],ax
 12727                              <5> 	mov ax,%3
 12728                              <5> 	mov ds,ax
 12729                              <5> 	mov al,[%4]
 12730                              <5> 	mov [bp+2],al
 12731                              <5> 	call proc_flshl
 12732                              <5> 	mov ax,sp
 12733                              <5> 	mov bp,ax
 12734                              <5> 	mov ax,%1
 12735                              <5> 	mov ds,ax
 12736                              <5> 	mov ax,[bp+0]
 12737                              <5> 	mov [%2+2],ax
 12738                              <5> 	stkclose 0x03
 12739                              <5> %endmacro
 12740                              <5> 
 12741                              <5> %macro flshr 4	
 12742                              <5> 	stkopen 0x03
 12743                              <5> 	mov ax,%1
 12744                              <5> 	mov ds,ax
 12745                              <5> 	mov ax,[%2+2]
 12746                              <5> 	mov [bp+0],ax	
 12747                              <5> 	mov ax,%3
 12748                              <5> 	mov ds,ax
 12749                              <5> 	mov al,[%4]
 12750                              <5> 	mov [bp+2],al
 12751                              <5> 	call proc_flshr
 12752                              <5> 	mov ax,sp
 12753                              <5> 	mov bp,ax
 12754                              <5> 	mov ax,%1
 12755                              <5> 	mov ds,ax
 12756                              <5> 	mov ax,[bp+0]
 12757                              <5> 	mov [%2+2],ax
 12758                              <5> 	stkclose 0x03
 12759                              <5> %endmacro
 12760                              <5> 
 12761                              <5> %macro fldiv 6	
 12762                              <5> 	stkopen 0x0C
 12763                              <5> 	mov ax,%1
 12764                              <5> 	mov ds,ax
 12765                              <5> 	mov ax,[%2+2]
 12766                              <5> 	mov [bp+0],ax
 12767                              <5> 	mov ax,[%2]
 12768                              <5> 	mov [bp+2],ax
 12769                              <5> 	mov ax,%3
 12770                              <5> 	mov ds,ax
 12771                              <5> 	mov ax,[%4+2]
 12772                              <5> 	mov [bp+4],ax
 12773                              <5> 	mov ax,[%4]
 12774                              <5> 	mov [bp+6],ax
 12775                              <5> 	call proc_fldiv
 12776                              <5> 	mov ax,sp
 12777                              <5> 	mov bp,ax
 12778                              <5> 	mov ax,%5
 12779                              <5> 	mov ds,ax
 12780                              <5> 	mov ax,[bp+8]
 12781                              <5> 	mov [%6+2],ax
 12782                              <5> 	mov ax,[bp+0x0A]
 12783                              <5> 	mov [%6],ax
 12784                              <5> 	stkclose 0x0C
 12785                              <5> %endmacro
 12786                              <5> 
 12787                              <5> %macro flmul 6	
 12788                              <5> 	stkopen 0x0C
 12789                              <5> 	mov ax,%1
 12790                              <5> 	mov ds,ax
 12791                              <5> 	mov ax,[%2+2]
 12792                              <5> 	mov [bp+0],ax
 12793                              <5> 	mov ax,[%2]
 12794                              <5> 	mov [bp+2],ax
 12795                              <5> 	mov ax,%3
 12796                              <5> 	mov ds,ax
 12797                              <5> 	mov ax,[%4+2]
 12798                              <5> 	mov [bp+4],ax
 12799                              <5> 	mov ax,[%4]
 12800                              <5> 	mov [bp+6],ax
 12801                              <5> 	call proc_flmul
 12802                              <5> 	mov ax,sp
 12803                              <5> 	mov bp,ax
 12804                              <5> 	mov ax,%5
 12805                              <5> 	mov ds,ax
 12806                              <5> 	mov ax,[bp+8]
 12807                              <5> 	mov [%6+2],ax
 12808                              <5> 	mov ax,[bp+0x0A]
 12809                              <5> 	mov [%6],ax
 12810                              <5> 	stkclose 0x0C
 12811                              <5> %endmacro
 12812                              <5> 	
 12813                              <5> %macro fladdorsub 7
 12814                              <5> 	stkopen 0x0E
 12815                              <5> 	mov ax,%1
 12816                              <5> 	mov ds,ax
 12817                              <5> 	mov ax,[%2+2]
 12818                              <5> 	mov [bp+0],ax
 12819                              <5> 	mov ax,[%2]
 12820                              <5> 	mov [bp+2],ax
 12821                              <5> 	mov ax,%3
 12822                              <5> 	mov ds,ax
 12823                              <5> 	mov ax,[%4+2]
 12824                              <5> 	mov [bp+4],ax
 12825                              <5> 	mov ax,[%4]
 12826                              <5> 	mov [bp+6],ax
 12827                              <5> 	mov word [bp+0x0C], %7
 12828                              <5> 	call proc_fladdorsub
 12829                              <5> 	mov ax,sp
 12830                              <5> 	mov bp,ax
 12831                              <5> 	mov ax,%5
 12832                              <5> 	mov ds,ax
 12833                              <5> 	mov ax,[bp+8]
 12834                              <5> 	mov [%6+2],ax
 12835                              <5> 	mov ax,[bp+0x0A]
 12836                              <5> 	mov [%6],ax
 12837                              <5> 	stkclose 0x0E
 12838                              <5> %endmacro
 12839                              <5> 	
 12840                              <5> %endif
 12841                              <4> 	%include "lib/trigon.mac"
 12842                              <5> 
 12843                              <5> %ifndef TRIGON_MAC
 12844                              <5> 	%define TRIGON_MAC
 12845                              <5> 
 12846                              <5> 	%include "lib/trigon.asm"
 12847                              <5> 	
 12848                              <5> %macro to0x360 1
 12849                              <5> 	to0x360 %1, %1
 12850                              <5> %endmacro
 12851                              <5> 
 12852                              <5> %macro to0x360 2
 12853                              <5> 	to0x360 cs, %1, cs, %2
 12854                              <5> %endmacro
 12855                              <5> 
 12856                              <5> %macro toradians 1
 12857                              <5> 	toradians %1, %1
 12858                              <5> %endmacro
 12859                              <5> 
 12860                              <5> %macro todegrees 1
 12861                              <5> 	todegrees %1, %1
 12862                              <5> %endmacro
 12863                              <5> 
 12864                              <5> %macro toradians 2
 12865                              <5> 	toradians cs, %1, cs, %2
 12866                              <5> %endmacro
 12867                              <5> 	
 12868                              <5> %macro todegrees 2
 12869                              <5> 	todegrees cs, %1, cs, %2
 12870                              <5> %endmacro	
 12871                              <5> 	
 12872                              <5> %macro atan 1
 12873                              <5> 	atan %1, %1
 12874                              <5> %endmacro	
 12875                              <5> 	
 12876                              <5> %macro atan 2
 12877                              <5> 	atan cs, %1, cs, %2
 12878                              <5> %endmacro	
 12879                              <5> 	
 12880                              <5> %macro sin 1
 12881                              <5> 	sin %1, %1
 12882                              <5> %endmacro	
 12883                              <5> 	
 12884                              <5> %macro sin 2
 12885                              <5> 	sin cs, %1, cs, %2
 12886                              <5> %endmacro
 12887                              <5> 
 12888                              <5> %macro cos 1
 12889                              <5> 	cos %1, %1
 12890                              <5> %endmacro	
 12891                              <5> 	
 12892                              <5> %macro cos 2
 12893                              <5> 	cos cs, %1, cs, %2
 12894                              <5> %endmacro		
 12895                              <5> 	
 12896                              <5> %macro sin 4
 12897                              <5> 	sinorcos %1, %2, %3, %4, 1
 12898                              <5> %endmacro
 12899                              <5> 
 12900                              <5> %macro cos 4
 12901                              <5> 	sinorcos %1, %2, %3, %4, 0
 12902                              <5> %endmacro
 12903                              <5> 
 12904                              <5> %macro to0x360 4
 12905                              <5> 	stkopen 0x08
 12906                              <5> 	mov ax,%1
 12907                              <5> 	mov ds,ax
 12908                              <5> 	mov ax,[%2+2]
 12909                              <5> 	mov [bp+0],ax
 12910                              <5> 	mov ax,[%2]
 12911                              <5> 	mov [bp+2],ax
 12912                              <5> 	call proc_to0x360
 12913                              <5> 	mov ax,sp
 12914                              <5> 	mov bp,ax
 12915                              <5> 	mov ax,%3
 12916                              <5> 	mov ds,ax
 12917                              <5> 	mov ax,[bp+4]
 12918                              <5> 	mov [%4+2],ax
 12919                              <5> 	mov ax,[bp+6]
 12920                              <5> 	mov [%4],ax
 12921                              <5> 	stkclose 0x08
 12922                              <5> %endmacro	
 12923                              <5> 
 12924                              <5> %macro toradians 4
 12925                              <5> 	stkopen 0x08
 12926                              <5> 	mov ax,%1
 12927                              <5> 	mov ds,ax
 12928                              <5> 	mov ax,[%2+2]
 12929                              <5> 	mov [bp+0],ax
 12930                              <5> 	mov ax,[%2]
 12931                              <5> 	mov [bp+2],ax
 12932                              <5> 	call proc_toradians
 12933                              <5> 	mov ax,sp
 12934                              <5> 	mov bp,ax
 12935                              <5> 	mov ax,%3
 12936                              <5> 	mov ds,ax
 12937                              <5> 	mov ax,[bp+4]
 12938                              <5> 	mov [%4+2],ax
 12939                              <5> 	mov ax,[bp+6]
 12940                              <5> 	mov [%4],ax
 12941                              <5> 	stkclose 0x08
 12942                              <5> %endmacro	
 12943                              <5> 
 12944                              <5> %macro todegrees 4
 12945                              <5> 	stkopen 0x08
 12946                              <5> 	mov ax,%1
 12947                              <5> 	mov ds,ax
 12948                              <5> 	mov ax,[%2+2]
 12949                              <5> 	mov [bp+0],ax
 12950                              <5> 	mov ax,[%2]
 12951                              <5> 	mov [bp+2],ax
 12952                              <5> 	call proc_todegrees
 12953                              <5> 	mov ax,sp
 12954                              <5> 	mov bp,ax
 12955                              <5> 	mov ax,%3
 12956                              <5> 	mov ds,ax
 12957                              <5> 	mov ax,[bp+4]
 12958                              <5> 	mov [%4+2],ax
 12959                              <5> 	mov ax,[bp+6]
 12960                              <5> 	mov [%4],ax
 12961                              <5> 	stkclose 0x08
 12962                              <5> %endmacro	
 12963                              <5> 
 12964                              <5> %macro atan 4
 12965                              <5> 	stkopen 0x08
 12966                              <5> 	mov ax,%1
 12967                              <5> 	mov ds,ax
 12968                              <5> 	mov ax,[%2+2]
 12969                              <5> 	mov [bp+0],ax
 12970                              <5> 	mov ax,[%2]
 12971                              <5> 	mov [bp+2],ax
 12972                              <5> 	call proc_atan
 12973                              <5> 	mov ax,sp
 12974                              <5> 	mov bp,ax
 12975                              <5> 	mov ax,%3
 12976                              <5> 	mov ds,ax
 12977                              <5> 	mov ax,[bp+4]
 12978                              <5> 	mov [%4+2],ax
 12979                              <5> 	mov ax,[bp+6]
 12980                              <5> 	mov [%4],ax
 12981                              <5> 	stkclose 0x08
 12982                              <5> %endmacro
 12983                              <5> 	
 12984                              <5> %macro sinorcos 5
 12985                              <5> 	stkopen 0x09
 12986                              <5> 	mov ax,%1
 12987                              <5> 	mov ds,ax
 12988                              <5> 	mov ax,[%2+2]
 12989                              <5> 	mov [bp+0],ax
 12990                              <5> 	mov ax,[%2]
 12991                              <5> 	mov [bp+2],ax
 12992                              <5> 	mov byte [bp+8],%5	
 12993                              <5> 	call proc_sinorcos
 12994                              <5> 	mov ax,sp
 12995                              <5> 	mov bp,ax
 12996                              <5> 	mov ax,%3
 12997                              <5> 	mov ds,ax
 12998                              <5> 	mov ax,[bp+4]
 12999                              <5> 	mov [%4+2],ax
 13000                              <5> 	mov ax,[bp+6]
 13001                              <5> 	mov [%4],ax
 13002                              <5> 	stkclose 0x09
 13003                              <5> %endmacro
 13004                              <5> 	
 13005                              <5> %endif
 13006                              <4> 	
 13007                              <4> 	; depende da macro __setpx ( g0x*.mac )
 13008                              <4> 		
 13009                              <4> %macro __drawstring 4
 13010                              <4> 	__drawstring cs, %1, %2, %3, %4
 13011                              <4> %endmacro
 13012                              <4> 
 13013                              <4> %macro __drawstring 5
 13014                              <4> 	stkopen 0x07
 13015                              <4> 	mov word [bp+0],%1
 13016                              <4> 	mov word [bp+2],%2
 13017                              <4> 	mov byte [bp+4],%3
 13018                              <4> 	mov byte [bp+5],%4
 13019                              <4> 	mov byte [bp+6],%5
 13020                              <4> 	call proc_drawstring
 13021                              <4> 	stkclose 0x07
 13022                              <4> %endmacro		
 13023                              <4> 		
 13024                              <4> %macro __drawarc 10
 13025                              <4> 	stkopen 0x0A
 13026                              <4> 	mov word [bp+0],%1
 13027                              <4> 	mov word [bp+2],%2
 13028                              <4> 	mov word [bp+4],%3
 13029                              <4> 	mov word [bp+6],%4	
 13030                              <4> 	mov byte [bp+8],%5
 13031                              <4> 	mov byte [bp+9],%6
 13032                              <4> 	call proc_drawarc
 13033                              <4> 	stkclose 0x0A
 13034                              <4> %endmacro	
 13035                              <4> 
 13036                              <4> %macro __fillrect 5
 13037                              <4> 	stkopen 0x09
 13038                              <4> 	mov word [bp+0],%1
 13039                              <4> 	mov word [bp+2],%2
 13040                              <4> 	mov word [bp+4],%3
 13041                              <4> 	mov word [bp+6],%4
 13042                              <4> 	mov byte [bp+8],%5
 13043                              <4> 	call proc_fillrect
 13044                              <4> 	stkclose 0x09
 13045                              <4> %endmacro	
 13046                              <4> 
 13047                              <4> %macro __drawrect 5
 13048                              <4> 	stkopen 0x09
 13049                              <4> 	mov word [bp+0],%1
 13050                              <4> 	mov word [bp+2],%2
 13051                              <4> 	mov word [bp+4],%3
 13052                              <4> 	mov word [bp+6],%4
 13053                              <4> 	mov byte [bp+8],%5
 13054                              <4> 	call proc_drawrect
 13055                              <4> 	stkclose 0x09
 13056                              <4> %endmacro	
 13057                              <4> 
 13058                              <4> %macro __drawlineh 4
 13059                              <4> 	stkopen 0x07
 13060                              <4> 	mov word [bp+0],%1
 13061                              <4> 	mov word [bp+2],%2
 13062                              <4> 	mov word [bp+4],%3
 13063                              <4> 	mov byte [bp+6],%4
 13064                              <4> 	call proc_drawlineh	
 13065                              <4> 	stkclose 0x07
 13066                              <4> %endmacro
 13067                              <4> 
 13068                              <4> %macro __drawlinev 4
 13069                              <4> 	stkopen 0x07
 13070                              <4> 	mov word [bp+0],%1
 13071                              <4> 	mov word [bp+2],%2
 13072                              <4> 	mov word [bp+4],%3
 13073                              <4> 	mov byte [bp+6],%4
 13074                              <4> 	call proc_drawlinev	
 13075                              <4> 	stkclose 0x07
 13076                              <4> %endmacro
 13077                              <4> 
 13078                              <4> %macro __arc_quadcoords 8
 13079                              <4> 	stkopen 0x10
 13080                              <4> 	mov word [bp+0],%1
 13081                              <4> 	mov word [bp+2],%2
 13082                              <4> 	mov word [bp+4],%3
 13083                              <4> 	mov word [bp+6],%4
 13084                              <4> 	call proc__arc_quadcoords
 13085                              <4> 	push sp
 13086                              <4> 	pop bp
 13087                              <4> 	mov word %5, [bp+8]
 13088                              <4> 	mov word %6, [bp+0x0A]
 13089                              <4> 	mov word %7, [bp+0x0C]
 13090                              <4> 	mov word %8, [bp+0x0E]	
 13091                              <4> 	stkclose 0x10
 13092                              <4> %endmacro
 13093                              <4> 
 13094                              <4> %macro __x2dcoord 6
 13095                              <4> 	stkopen 0x0C
 13096                              <4> 	mov word [bp+0],%1
 13097                              <4> 	mov word [bp+2],%2
 13098                              <4> 	mov word [bp+4],%3
 13099                              <4> 	mov word [bp+6],%4
 13100                              <4> 	call proc__x2dcoord
 13101                              <4> 	push sp
 13102                              <4> 	pop bp
 13103                              <4> 	mov word %5,[bp+8]
 13104                              <4> 	mov word %6,[bp+0x0A]
 13105                              <4> 	stkclose 0x0C
 13106                              <4> %endmacro
 13107                              <4> 
 13108                              <4> %macro __y2dcoord 6
 13109                              <4> 	stkopen 0x0C
 13110                              <4> 	mov word [bp+0],%1
 13111                              <4> 	mov word [bp+2],%2
 13112                              <4> 	mov word [bp+4],%3
 13113                              <4> 	mov word [bp+6],%4
 13114                              <4> 	call proc__y2dcoord
 13115                              <4> 	push sp
 13116                              <4> 	pop bp
 13117                              <4> 	mov word %5,[bp+8]
 13118                              <4> 	mov word %6,[bp+0x0A]
 13119                              <4> 	stkclose 0x0C
 13120                              <4> %endmacro
 13121                              <4> 
 13122                              <4> %macro __arc_inc 4
 13123                              <4> 	stkopen 0x0C
 13124                              <4> 	mov word [bp+0],%1
 13125                              <4> 	mov word [bp+2],%2
 13126                              <4> 	call proc__arc_inc
 13127                              <4> 	push sp
 13128                              <4> 	pop bp
 13129                              <4> 	mov word %3,[bp+4]
 13130                              <4> 	mov word %4,[bp+6]
 13131                              <4> 	stkclose 0x0C
 13132                              <4> %endmacro
 13133                              <4> 		
 13134                              <4> section .data
 13135                              <4> 
 13136                              <4> proc_drawstring:		
 13137 00001A68 89E0                <4> 	mov ax,sp
 13138 00001A6A 89C5                <4> 	mov bp,ax
 13139                              <4> 	
 13140 00001A6C 8B4602              <4> 	mov ax,[bp+2]
 13141 00001A6F 8ED8                <4> 	mov ds,ax
 13142 00001A71 8B7604              <4> 	mov si,[bp+4]			
 13143                              <4> 
 13144 00001A74 8A7607              <4> 	mov dh,[bp+7]
 13145 00001A77 8A5606              <4> 	mov dl,[bp+6]
 13146 00001A7A B402                <4> 	mov ah,02h
 13147 00001A7C B700                <4> 	mov bh,0
 13148 00001A7E CD10                <4> 	int 10h
 13149                              <4> 		
 13150                              <4> 	.l1:
 13151 00001A80 AC                  <4> 		lodsb
 13152 00001A81 3C00                <4> 		cmp al,0
 13153 00001A83 740B                <4> 		jz .l2
 13154                              <4> 				
 13155 00001A85 B40E                <4> 		mov ah,0Eh
 13156 00001A87 B700                <4> 		mov bh,0
 13157 00001A89 8A5E08              <4> 		mov bl,[bp+8]	
 13158 00001A8C CD10                <4> 		int 10h	
 13159                              <4> 	
 13160 00001A8E EBF0                <4> 		jmp .l1
 13161                              <4> 	.l2:	
 13162                              <4> 		
 13163 00001A90 C3                  <4> 	ret
 13164                              <4> 
 13165                              <4> proc_drawlineh:
 13166 00001A91 89E0                <4> 	mov ax,sp
 13167 00001A93 89C5                <4> 	mov bp,ax
 13168                              <4> 	
 13169 00001A95 8B4602              <4> 	mov ax,[bp+2]
 13170 00001A98 8B5E04              <4> 	mov bx,[bp+4]
 13171 00001A9B 8B4E06              <4> 	mov cx,[bp+6]
 13172 00001A9E 8A5608              <4> 	mov dl,[bp+8]
 13173                              <4> 	
 13174                              <4> 	.l1:
 13175 00001AA1 39C8                <4> 		cmp ax,cx
 13176 00001AA3 771F                <4> 		ja .l2
 13177 00001AA5 50                  <4> 		push ax
 13178 00001AA6 53                  <4> 		push bx
 13179 00001AA7 51                  <4> 		push cx
 13180 00001AA8 52                  <4> 		push dx
 13181                              <4> 		
 13182                              <4> 		__setpx ax, bx, dl
 13183                              <5>  stkopen 0x05
 13184 00001AA9 83EC05              <6>  sub word sp, %1
 13185 00001AAC 54                  <6>  push sp
 13186 00001AAD 5D                  <6>  pop bp
 13187 00001AAE 894600              <5>  mov word [bp+0],%1
 13188 00001AB1 895E02              <5>  mov word [bp+2],%2
 13189 00001AB4 885604              <5>  mov byte [bp+4],%3
 13190 00001AB7 E88DE5              <5>  call proc_setpx
 13191                              <5>  stkclose 0x05
 13192 00001ABA 83C405              <6>  add word sp, %1
 13193                              <4> 				
 13194 00001ABD 5A                  <4> 		pop dx		
 13195 00001ABE 59                  <4> 		pop cx
 13196 00001ABF 5B                  <4> 		pop bx
 13197 00001AC0 58                  <4> 		pop ax
 13198 00001AC1 40                  <4> 		inc ax
 13199 00001AC2 EBDD                <4> 		jmp .l1
 13200                              <4> 	.l2:
 13201                              <4> 	
 13202 00001AC4 C3                  <4> 	ret
 13203                              <4> 	
 13204                              <4> 
 13205                              <4> proc_drawlinev:
 13206 00001AC5 89E0                <4> 	mov ax,sp
 13207 00001AC7 89C5                <4> 	mov bp,ax
 13208                              <4> 	
 13209 00001AC9 8B4602              <4> 	mov ax,[bp+2]
 13210 00001ACC 8B5E04              <4> 	mov bx,[bp+4]
 13211 00001ACF 8B4E06              <4> 	mov cx,[bp+6]
 13212 00001AD2 8A5608              <4> 	mov dl,[bp+8]
 13213                              <4> 	
 13214                              <4> 	.l1:
 13215 00001AD5 39CB                <4> 		cmp bx,cx
 13216 00001AD7 771F                <4> 		ja .l2
 13217 00001AD9 50                  <4> 		push ax
 13218 00001ADA 53                  <4> 		push bx
 13219 00001ADB 51                  <4> 		push cx
 13220 00001ADC 52                  <4> 		push dx
 13221                              <4> 		
 13222                              <4> 		__setpx ax, bx, dl
 13223                              <5>  stkopen 0x05
 13224 00001ADD 83EC05              <6>  sub word sp, %1
 13225 00001AE0 54                  <6>  push sp
 13226 00001AE1 5D                  <6>  pop bp
 13227 00001AE2 894600              <5>  mov word [bp+0],%1
 13228 00001AE5 895E02              <5>  mov word [bp+2],%2
 13229 00001AE8 885604              <5>  mov byte [bp+4],%3
 13230 00001AEB E859E5              <5>  call proc_setpx
 13231                              <5>  stkclose 0x05
 13232 00001AEE 83C405              <6>  add word sp, %1
 13233                              <4> 				
 13234 00001AF1 5A                  <4> 		pop dx		
 13235 00001AF2 59                  <4> 		pop cx
 13236 00001AF3 5B                  <4> 		pop bx
 13237 00001AF4 58                  <4> 		pop ax
 13238 00001AF5 43                  <4> 		inc bx
 13239 00001AF6 EBDD                <4> 		jmp .l1
 13240                              <4> 	.l2:
 13241                              <4> 	
 13242 00001AF8 C3                  <4> 	ret
 13243                              <4> 
 13244                              <4> proc_drawrect:
 13245 00001AF9 89E0                <4> 	mov ax,sp
 13246 00001AFB 89C5                <4> 	mov bp,ax		
 13247 00001AFD 8B4602              <4> 	mov ax,[bp+2]
 13248 00001B00 8B5E04              <4> 	mov bx,[bp+4]	
 13249 00001B03 8B4E06              <4> 	mov cx,[bp+6]
 13250 00001B06 8A560A              <4> 	mov dl,[bp+0x0A]
 13251                              <4> 	__drawlineh ax, bx, cx, dl
 13252                              <5>  stkopen 0x07
 13253 00001B09 83EC07              <6>  sub word sp, %1
 13254 00001B0C 54                  <6>  push sp
 13255 00001B0D 5D                  <6>  pop bp
 13256 00001B0E 894600              <5>  mov word [bp+0],%1
 13257 00001B11 895E02              <5>  mov word [bp+2],%2
 13258 00001B14 894E04              <5>  mov word [bp+4],%3
 13259 00001B17 885606              <5>  mov byte [bp+6],%4
 13260 00001B1A E874FF              <5>  call proc_drawlineh
 13261                              <5>  stkclose 0x07
 13262 00001B1D 83C407              <6>  add word sp, %1
 13263                              <4> 	
 13264 00001B20 89E0                <4> 	mov ax,sp
 13265 00001B22 89C5                <4> 	mov bp,ax		
 13266 00001B24 8B4602              <4> 	mov ax,[bp+2]
 13267 00001B27 8B5E08              <4> 	mov bx,[bp+8]	
 13268 00001B2A 8B4E06              <4> 	mov cx,[bp+6]
 13269 00001B2D 8A560A              <4> 	mov dl,[bp+0x0A]
 13270                              <4> 	__drawlineh ax, bx, cx, dl
 13271                              <5>  stkopen 0x07
 13272 00001B30 83EC07              <6>  sub word sp, %1
 13273 00001B33 54                  <6>  push sp
 13274 00001B34 5D                  <6>  pop bp
 13275 00001B35 894600              <5>  mov word [bp+0],%1
 13276 00001B38 895E02              <5>  mov word [bp+2],%2
 13277 00001B3B 894E04              <5>  mov word [bp+4],%3
 13278 00001B3E 885606              <5>  mov byte [bp+6],%4
 13279 00001B41 E84DFF              <5>  call proc_drawlineh
 13280                              <5>  stkclose 0x07
 13281 00001B44 83C407              <6>  add word sp, %1
 13282                              <4> 	
 13283 00001B47 89E0                <4> 	mov ax,sp
 13284 00001B49 89C5                <4> 	mov bp,ax		
 13285 00001B4B 8B4602              <4> 	mov ax,[bp+2]
 13286 00001B4E 8B5E04              <4> 	mov bx,[bp+4]	
 13287 00001B51 8B4E08              <4> 	mov cx,[bp+8]
 13288 00001B54 8A560A              <4> 	mov dl,[bp+0x0A]
 13289                              <4> 	__drawlinev ax, bx, cx, dl
 13290                              <5>  stkopen 0x07
 13291 00001B57 83EC07              <6>  sub word sp, %1
 13292 00001B5A 54                  <6>  push sp
 13293 00001B5B 5D                  <6>  pop bp
 13294 00001B5C 894600              <5>  mov word [bp+0],%1
 13295 00001B5F 895E02              <5>  mov word [bp+2],%2
 13296 00001B62 894E04              <5>  mov word [bp+4],%3
 13297 00001B65 885606              <5>  mov byte [bp+6],%4
 13298 00001B68 E85AFF              <5>  call proc_drawlinev
 13299                              <5>  stkclose 0x07
 13300 00001B6B 83C407              <6>  add word sp, %1
 13301                              <4> 	
 13302 00001B6E 89E0                <4> 	mov ax,sp
 13303 00001B70 89C5                <4> 	mov bp,ax		
 13304 00001B72 8B4606              <4> 	mov ax,[bp+6]
 13305 00001B75 8B5E04              <4> 	mov bx,[bp+4]	
 13306 00001B78 8B4E08              <4> 	mov cx,[bp+8]
 13307 00001B7B 8A560A              <4> 	mov dl,[bp+0x0A]
 13308                              <4> 	__drawlinev ax, bx, cx, dl
 13309                              <5>  stkopen 0x07
 13310 00001B7E 83EC07              <6>  sub word sp, %1
 13311 00001B81 54                  <6>  push sp
 13312 00001B82 5D                  <6>  pop bp
 13313 00001B83 894600              <5>  mov word [bp+0],%1
 13314 00001B86 895E02              <5>  mov word [bp+2],%2
 13315 00001B89 894E04              <5>  mov word [bp+4],%3
 13316 00001B8C 885606              <5>  mov byte [bp+6],%4
 13317 00001B8F E833FF              <5>  call proc_drawlinev
 13318                              <5>  stkclose 0x07
 13319 00001B92 83C407              <6>  add word sp, %1
 13320                              <4> 	
 13321 00001B95 C3                  <4> 	ret
 13322                              <4> 
 13323                              <4> proc_fillrect:
 13324 00001B96 89E0                <4> 	mov ax,sp
 13325 00001B98 89C5                <4> 	mov bp,ax	
 13326                              <4> 	
 13327 00001B9A 8B4602              <4> 	mov ax,[bp+2]
 13328 00001B9D 8B5E04              <4> 	mov bx,[bp+4]	
 13329 00001BA0 8B4E06              <4> 	mov cx,[bp+6]
 13330 00001BA3 8B5608              <4> 	mov dx,[bp+8]
 13331                              <4> 			
 13332                              <4> 	.l1:			
 13333 00001BA6 39D3                <4> 		cmp bx,dx
 13334 00001BA8 7727                <4> 		ja .l2
 13335                              <4> 		stkpush ax, bx, cx, dx, bp
 13336                              <5>  %rep %0
 13337                              <5>  push %1
 13338                              <5>  %rotate 1
 13339                              <5>  %endrep
 13340 00001BAA 50                  <6>  push %1
 13341                              <6>  %rotate 1
 13342 00001BAB 53                  <6>  push %1
 13343                              <6>  %rotate 1
 13344 00001BAC 51                  <6>  push %1
 13345                              <6>  %rotate 1
 13346 00001BAD 52                  <6>  push %1
 13347                              <6>  %rotate 1
 13348 00001BAE 55                  <6>  push %1
 13349                              <6>  %rotate 1
 13350                              <4> 		
 13351 00001BAF 8A560A              <4> 		mov dl,[bp+0x0A]
 13352                              <4> 		__drawlineh ax, bx, cx, dl
 13353                              <5>  stkopen 0x07
 13354 00001BB2 83EC07              <6>  sub word sp, %1
 13355 00001BB5 54                  <6>  push sp
 13356 00001BB6 5D                  <6>  pop bp
 13357 00001BB7 894600              <5>  mov word [bp+0],%1
 13358 00001BBA 895E02              <5>  mov word [bp+2],%2
 13359 00001BBD 894E04              <5>  mov word [bp+4],%3
 13360 00001BC0 885606              <5>  mov byte [bp+6],%4
 13361 00001BC3 E8CBFE              <5>  call proc_drawlineh
 13362                              <5>  stkclose 0x07
 13363 00001BC6 83C407              <6>  add word sp, %1
 13364                              <4> 		
 13365                              <4> 		stkpop ax, bx, cx, dx, bp		
 13366                              <5>  %rep %0
 13367                              <5>  %rotate -1
 13368                              <5>  pop %1
 13369                              <5>  %endrep
 13370                              <6>  %rotate -1
 13371 00001BC9 5D                  <6>  pop %1
 13372                              <6>  %rotate -1
 13373 00001BCA 5A                  <6>  pop %1
 13374                              <6>  %rotate -1
 13375 00001BCB 59                  <6>  pop %1
 13376                              <6>  %rotate -1
 13377 00001BCC 5B                  <6>  pop %1
 13378                              <6>  %rotate -1
 13379 00001BCD 58                  <6>  pop %1
 13380 00001BCE 43                  <4> 		inc bx				
 13381 00001BCF EBD5                <4> 		jmp .l1	
 13382                              <4> 	.l2:
 13383                              <4> 		
 13384 00001BD1 C3                  <4> 	ret
 13385                              <4> 
 13386                              <4> proc_drawarc:	
 13387 00001BD2 89E0                <4> 	mov ax,sp
 13388 00001BD4 89C5                <4> 	mov bp,ax
 13389                              <4> 		
 13390 00001BD6 8B4606              <4> 	mov ax,[bp+6]
 13391                              <4> 	__int16tofl ax, ax, bx
 13392                              <5>  stkopen 0x06
 13393 00001BD9 83EC06              <6>  sub word sp, %1
 13394 00001BDC 54                  <6>  push sp
 13395 00001BDD 5D                  <6>  pop bp
 13396 00001BDE 894600              <5>  mov word [bp+0],%1
 13397 00001BE1 E861EA              <5>  call proc_int16tofl
 13398 00001BE4 54                  <5>  push sp
 13399 00001BE5 5D                  <5>  pop bp
 13400 00001BE6 8B4602              <5>  mov word %2,[bp+2]
 13401 00001BE9 8B5E04              <5>  mov word %3,[bp+4]
 13402                              <5>  stkclose 0x06
 13403 00001BEC 83C406              <6>  add word sp, %1
 13404                              <4> 	__arc_inc ax, bx, ax, bx
 13405                              <5>  stkopen 0x0C
 13406 00001BEF 83EC0C              <6>  sub word sp, %1
 13407 00001BF2 54                  <6>  push sp
 13408 00001BF3 5D                  <6>  pop bp
 13409 00001BF4 894600              <5>  mov word [bp+0],%1
 13410 00001BF7 895E02              <5>  mov word [bp+2],%2
 13411 00001BFA E80D03              <5>  call proc__arc_inc
 13412 00001BFD 54                  <5>  push sp
 13413 00001BFE 5D                  <5>  pop bp
 13414 00001BFF 8B4604              <5>  mov word %3,[bp+4]
 13415 00001C02 8B5E06              <5>  mov word %4,[bp+6]
 13416                              <5>  stkclose 0x0C
 13417 00001C05 83C40C              <6>  add word sp, %1
 13418 00001C08 50                  <4> 	push ax
 13419 00001C09 53                  <4> 	push bx
 13420                              <4> 	
 13421 00001C0A B90000              <4> 	mov cx,0	; angulo (alta)
 13422 00001C0D BA0000              <4> 	mov dx,0	; angulo (baixa)		
 13423 00001C10 51                  <4> 	push cx
 13424 00001C11 52                  <4> 	push dx
 13425                              <4> 	.l1:					
 13426 00001C12 B8C93F              <4> 		mov ax,0x3FC9	; PI/2 (alta)
 13427 00001C15 BBDB0F              <4> 		mov bx,0x0FDB	; PI/2 (baixa)	
 13428                              <4> 		__flcmp cx, dx, ax, bx, cl
 13429                              <5>  stkopen 0x09
 13430 00001C18 83EC09              <6>  sub word sp, %1
 13431 00001C1B 54                  <6>  push sp
 13432 00001C1C 5D                  <6>  pop bp
 13433 00001C1D 894E00              <5>  mov word [bp+0],%1
 13434 00001C20 895602              <5>  mov word [bp+2],%2
 13435 00001C23 894604              <5>  mov word [bp+4],%3
 13436 00001C26 895E06              <5>  mov word [bp+6],%4
 13437 00001C29 E890EC              <5>  call proc_flcmp
 13438 00001C2C 54                  <5>  push sp
 13439 00001C2D 5D                  <5>  pop bp
 13440 00001C2E 8A4E08              <5>  mov byte %5, [bp+8]
 13441                              <5>  stkclose 0x09
 13442 00001C31 83C409              <6>  add word sp, %1
 13443 00001C34 80F900              <4> 		cmp cl,0
 13444 00001C37 0F8FE301            <4> 		jg .l2
 13445                              <4> 		
 13446 00001C3B 89E0                <4> 		mov ax,sp
 13447 00001C3D 89C5                <4> 		mov bp,ax
 13448 00001C3F 83C508              <4> 		add bp,8
 13449                              <4> 		
 13450 00001C42 55                  <4> 		push bp				
 13451 00001C43 8B4608              <4> 		mov ax,[bp+8]			; raio (int16)		
 13452                              <4> 		__int16tofl ax, ax, bx	; raio (float)
 13453                              <5>  stkopen 0x06
 13454 00001C46 83EC06              <6>  sub word sp, %1
 13455 00001C49 54                  <6>  push sp
 13456 00001C4A 5D                  <6>  pop bp
 13457 00001C4B 894600              <5>  mov word [bp+0],%1
 13458 00001C4E E8F4E9              <5>  call proc_int16tofl
 13459 00001C51 54                  <5>  push sp
 13460 00001C52 5D                  <5>  pop bp
 13461 00001C53 8B4602              <5>  mov word %2,[bp+2]
 13462 00001C56 8B5E04              <5>  mov word %3,[bp+4]
 13463                              <5>  stkclose 0x06
 13464 00001C59 83C406              <6>  add word sp, %1
 13465 00001C5C 5D                  <4> 		pop bp		
 13466                              <4> 		
 13467 00001C5D 5A                  <4> 		pop dx
 13468 00001C5E 59                  <4> 		pop cx
 13469 00001C5F 51                  <4> 		push cx
 13470 00001C60 52                  <4> 		push dx
 13471 00001C61 55                  <4> 		push bp		
 13472                              <4> 		__y2dcoord ax, bx, cx, dx, ax, bx				
 13473                              <5>  stkopen 0x0C
 13474 00001C62 83EC0C              <6>  sub word sp, %1
 13475 00001C65 54                  <6>  push sp
 13476 00001C66 5D                  <6>  pop bp
 13477 00001C67 894600              <5>  mov word [bp+0],%1
 13478 00001C6A 895E02              <5>  mov word [bp+2],%2
 13479 00001C6D 894E04              <5>  mov word [bp+4],%3
 13480 00001C70 895606              <5>  mov word [bp+6],%4
 13481 00001C73 E83902              <5>  call proc__y2dcoord
 13482 00001C76 54                  <5>  push sp
 13483 00001C77 5D                  <5>  pop bp
 13484 00001C78 8B4608              <5>  mov word %5,[bp+8]
 13485 00001C7B 8B5E0A              <5>  mov word %6,[bp+0x0A]
 13486                              <5>  stkclose 0x0C
 13487 00001C7E 83C40C              <6>  add word sp, %1
 13488                              <4> 		__fltoint16 ax, bx, ax	; y (int160)
 13489                              <5>  stkopen 0x06
 13490 00001C81 83EC06              <6>  sub word sp, %1
 13491 00001C84 54                  <6>  push sp
 13492 00001C85 5D                  <6>  pop bp
 13493 00001C86 894600              <5>  mov word [bp+0],%1
 13494 00001C89 895E02              <5>  mov word [bp+2],%2
 13495 00001C8C E834E9              <5>  call proc_fltoint16
 13496 00001C8F 54                  <5>  push sp
 13497 00001C90 5D                  <5>  pop bp
 13498 00001C91 8B4604              <5>  mov word %3,[bp+4]
 13499                              <5>  stkclose 0x06
 13500 00001C94 83C406              <6>  add word sp, %1
 13501 00001C97 5D                  <4> 		pop bp
 13502                              <4> 		
 13503 00001C98 5A                  <4> 		pop dx
 13504 00001C99 59                  <4> 		pop cx	
 13505 00001C9A 51                  <4> 		push cx
 13506 00001C9B 52                  <4> 		push dx	
 13507 00001C9C 50                  <4> 		push ax
 13508 00001C9D 55                  <4> 		push bp
 13509 00001C9E 51                  <4> 		push cx
 13510 00001C9F 52                  <4> 		push dx
 13511                              <4> 		
 13512 00001CA0 8B4606              <4> 		mov ax,[bp+6]			; raio (int16)
 13513                              <4> 		__int16tofl ax, ax, bx	; raio (float)
 13514                              <5>  stkopen 0x06
 13515 00001CA3 83EC06              <6>  sub word sp, %1
 13516 00001CA6 54                  <6>  push sp
 13517 00001CA7 5D                  <6>  pop bp
 13518 00001CA8 894600              <5>  mov word [bp+0],%1
 13519 00001CAB E897E9              <5>  call proc_int16tofl
 13520 00001CAE 54                  <5>  push sp
 13521 00001CAF 5D                  <5>  pop bp
 13522 00001CB0 8B4602              <5>  mov word %2,[bp+2]
 13523 00001CB3 8B5E04              <5>  mov word %3,[bp+4]
 13524                              <5>  stkclose 0x06
 13525 00001CB6 83C406              <6>  add word sp, %1
 13526 00001CB9 5A                  <4> 		pop dx
 13527 00001CBA 59                  <4> 		pop cx		
 13528                              <4> 		__x2dcoord ax, bx, cx, dx, ax, bx				
 13529                              <5>  stkopen 0x0C
 13530 00001CBB 83EC0C              <6>  sub word sp, %1
 13531 00001CBE 54                  <6>  push sp
 13532 00001CBF 5D                  <6>  pop bp
 13533 00001CC0 894600              <5>  mov word [bp+0],%1
 13534 00001CC3 895E02              <5>  mov word [bp+2],%2
 13535 00001CC6 894E04              <5>  mov word [bp+4],%3
 13536 00001CC9 895606              <5>  mov word [bp+6],%4
 13537 00001CCC E88501              <5>  call proc__x2dcoord
 13538 00001CCF 54                  <5>  push sp
 13539 00001CD0 5D                  <5>  pop bp
 13540 00001CD1 8B4608              <5>  mov word %5,[bp+8]
 13541 00001CD4 8B5E0A              <5>  mov word %6,[bp+0x0A]
 13542                              <5>  stkclose 0x0C
 13543 00001CD7 83C40C              <6>  add word sp, %1
 13544                              <4> 		__fltoint16 ax, bx, cx	; x (int16)
 13545                              <5>  stkopen 0x06
 13546 00001CDA 83EC06              <6>  sub word sp, %1
 13547 00001CDD 54                  <6>  push sp
 13548 00001CDE 5D                  <6>  pop bp
 13549 00001CDF 894600              <5>  mov word [bp+0],%1
 13550 00001CE2 895E02              <5>  mov word [bp+2],%2
 13551 00001CE5 E8DBE8              <5>  call proc_fltoint16
 13552 00001CE8 54                  <5>  push sp
 13553 00001CE9 5D                  <5>  pop bp
 13554 00001CEA 8B4E04              <5>  mov word %3,[bp+4]
 13555                              <5>  stkclose 0x06
 13556 00001CED 83C406              <6>  add word sp, %1
 13557 00001CF0 5D                  <4> 		pop bp
 13558                              <4> 		
 13559 00001CF1 5A                  <4> 		pop dx
 13560 00001CF2 8B4602              <4> 		mov ax,[bp+2]
 13561 00001CF5 8B4E04              <4> 		mov cx,[bp+4]
 13562                              <4> 			
 13563 00001CF8 55                  <4> 		push bp				
 13564                              <4> 		__arc_quadcoords ax, bx, cx, dx, ax, bx, cx, dx
 13565                              <5>  stkopen 0x10
 13566 00001CF9 83EC10              <6>  sub word sp, %1
 13567 00001CFC 54                  <6>  push sp
 13568 00001CFD 5D                  <6>  pop bp
 13569 00001CFE 894600              <5>  mov word [bp+0],%1
 13570 00001D01 895E02              <5>  mov word [bp+2],%2
 13571 00001D04 894E04              <5>  mov word [bp+4],%3
 13572 00001D07 895606              <5>  mov word [bp+6],%4
 13573 00001D0A E81601              <5>  call proc__arc_quadcoords
 13574 00001D0D 54                  <5>  push sp
 13575 00001D0E 5D                  <5>  pop bp
 13576 00001D0F 8B4608              <5>  mov word %5, [bp+8]
 13577 00001D12 8B5E0A              <5>  mov word %6, [bp+0x0A]
 13578 00001D15 8B4E0C              <5>  mov word %7, [bp+0x0C]
 13579 00001D18 8B560E              <5>  mov word %8, [bp+0x0E]
 13580                              <5>  stkclose 0x10
 13581 00001D1B 83C410              <6>  add word sp, %1
 13582 00001D1E 5D                  <4> 		pop bp
 13583                              <4> 		
 13584                              <4> 		stkpush ax, bx, cx, dx, bp
 13585                              <5>  %rep %0
 13586                              <5>  push %1
 13587                              <5>  %rotate 1
 13588                              <5>  %endrep
 13589 00001D1F 50                  <6>  push %1
 13590                              <6>  %rotate 1
 13591 00001D20 53                  <6>  push %1
 13592                              <6>  %rotate 1
 13593 00001D21 51                  <6>  push %1
 13594                              <6>  %rotate 1
 13595 00001D22 52                  <6>  push %1
 13596                              <6>  %rotate 1
 13597 00001D23 55                  <6>  push %1
 13598                              <6>  %rotate 1
 13599                              <4> 		
 13600 00001D24 8A560A              <4> 		mov dl,[bp+0x0A]				
 13601 00001D27 807E0B00            <4> 		cmp byte [bp+0x0B],0
 13602 00001D2B 7530                <4> 		jnz .fill1
 13603 00001D2D 53                  <4> 			push bx
 13604 00001D2E 51                  <4> 			push cx
 13605 00001D2F 52                  <4> 			push dx			
 13606                              <4> 			__setpx ax, bx, dl
 13607                              <5>  stkopen 0x05
 13608 00001D30 83EC05              <6>  sub word sp, %1
 13609 00001D33 54                  <6>  push sp
 13610 00001D34 5D                  <6>  pop bp
 13611 00001D35 894600              <5>  mov word [bp+0],%1
 13612 00001D38 895E02              <5>  mov word [bp+2],%2
 13613 00001D3B 885604              <5>  mov byte [bp+4],%3
 13614 00001D3E E806E3              <5>  call proc_setpx
 13615                              <5>  stkclose 0x05
 13616 00001D41 83C405              <6>  add word sp, %1
 13617 00001D44 5A                  <4> 			pop dx
 13618 00001D45 59                  <4> 			pop cx
 13619 00001D46 5B                  <4> 			pop bx
 13620                              <4> 			__setpx cx, bx, dl
 13621                              <5>  stkopen 0x05
 13622 00001D47 83EC05              <6>  sub word sp, %1
 13623 00001D4A 54                  <6>  push sp
 13624 00001D4B 5D                  <6>  pop bp
 13625 00001D4C 894E00              <5>  mov word [bp+0],%1
 13626 00001D4F 895E02              <5>  mov word [bp+2],%2
 13627 00001D52 885604              <5>  mov byte [bp+4],%3
 13628 00001D55 E8EFE2              <5>  call proc_setpx
 13629                              <5>  stkclose 0x05
 13630 00001D58 83C405              <6>  add word sp, %1
 13631 00001D5B EB23                <4> 			jmp .endfill1
 13632                              <4> 		.fill1:
 13633 00001D5D 39C8                <4> 			cmp ax,cx
 13634 00001D5F 731F                <4> 			jae .endfill1	
 13635                              <4> 			stkpush ax, bx, cx, dx
 13636                              <5>  %rep %0
 13637                              <5>  push %1
 13638                              <5>  %rotate 1
 13639                              <5>  %endrep
 13640 00001D61 50                  <6>  push %1
 13641                              <6>  %rotate 1
 13642 00001D62 53                  <6>  push %1
 13643                              <6>  %rotate 1
 13644 00001D63 51                  <6>  push %1
 13645                              <6>  %rotate 1
 13646 00001D64 52                  <6>  push %1
 13647                              <6>  %rotate 1
 13648                              <4> 			__setpx ax, bx, dl
 13649                              <5>  stkopen 0x05
 13650 00001D65 83EC05              <6>  sub word sp, %1
 13651 00001D68 54                  <6>  push sp
 13652 00001D69 5D                  <6>  pop bp
 13653 00001D6A 894600              <5>  mov word [bp+0],%1
 13654 00001D6D 895E02              <5>  mov word [bp+2],%2
 13655 00001D70 885604              <5>  mov byte [bp+4],%3
 13656 00001D73 E8D1E2              <5>  call proc_setpx
 13657                              <5>  stkclose 0x05
 13658 00001D76 83C405              <6>  add word sp, %1
 13659                              <4> 			stkpop ax, bx, cx, dx			
 13660                              <5>  %rep %0
 13661                              <5>  %rotate -1
 13662                              <5>  pop %1
 13663                              <5>  %endrep
 13664                              <6>  %rotate -1
 13665 00001D79 5A                  <6>  pop %1
 13666                              <6>  %rotate -1
 13667 00001D7A 59                  <6>  pop %1
 13668                              <6>  %rotate -1
 13669 00001D7B 5B                  <6>  pop %1
 13670                              <6>  %rotate -1
 13671 00001D7C 58                  <6>  pop %1
 13672 00001D7D 40                  <4> 			inc ax
 13673 00001D7E EBDD                <4> 			jmp .fill1
 13674                              <4> 		.endfill1:
 13675                              <4> 		
 13676                              <4> 		stkload ax, bx, cx, dx, bp
 13677                              <5>  %rep %0
 13678                              <5>  %rotate -1
 13679                              <5>  pop %1
 13680                              <5>  %endrep
 13681                              <6>  %rotate -1
 13682 00001D80 5D                  <6>  pop %1
 13683                              <6>  %rotate -1
 13684 00001D81 5A                  <6>  pop %1
 13685                              <6>  %rotate -1
 13686 00001D82 59                  <6>  pop %1
 13687                              <6>  %rotate -1
 13688 00001D83 5B                  <6>  pop %1
 13689                              <6>  %rotate -1
 13690 00001D84 58                  <6>  pop %1
 13691                              <5>  %rep %0
 13692                              <5>  push %1
 13693                              <5>  %rotate 1
 13694                              <5>  %endrep
 13695 00001D85 50                  <6>  push %1
 13696                              <6>  %rotate 1
 13697 00001D86 53                  <6>  push %1
 13698                              <6>  %rotate 1
 13699 00001D87 51                  <6>  push %1
 13700                              <6>  %rotate 1
 13701 00001D88 52                  <6>  push %1
 13702                              <6>  %rotate 1
 13703 00001D89 55                  <6>  push %1
 13704                              <6>  %rotate 1
 13705                              <4> 		
 13706 00001D8A 8A5E0A              <4> 		mov bl,[bp+0x0A]				
 13707 00001D8D 807E0B00            <4> 		cmp byte [bp+0x0B],0
 13708 00001D91 7530                <4> 		jnz .fill2
 13709 00001D93 53                  <4> 			push bx
 13710 00001D94 51                  <4> 			push cx
 13711 00001D95 52                  <4> 			push dx			
 13712                              <4> 			__setpx ax, dx, bl
 13713                              <5>  stkopen 0x05
 13714 00001D96 83EC05              <6>  sub word sp, %1
 13715 00001D99 54                  <6>  push sp
 13716 00001D9A 5D                  <6>  pop bp
 13717 00001D9B 894600              <5>  mov word [bp+0],%1
 13718 00001D9E 895602              <5>  mov word [bp+2],%2
 13719 00001DA1 885E04              <5>  mov byte [bp+4],%3
 13720 00001DA4 E8A0E2              <5>  call proc_setpx
 13721                              <5>  stkclose 0x05
 13722 00001DA7 83C405              <6>  add word sp, %1
 13723 00001DAA 5A                  <4> 			pop dx
 13724 00001DAB 59                  <4> 			pop cx
 13725 00001DAC 5B                  <4> 			pop bx
 13726                              <4> 			__setpx cx, dx, bl
 13727                              <5>  stkopen 0x05
 13728 00001DAD 83EC05              <6>  sub word sp, %1
 13729 00001DB0 54                  <6>  push sp
 13730 00001DB1 5D                  <6>  pop bp
 13731 00001DB2 894E00              <5>  mov word [bp+0],%1
 13732 00001DB5 895602              <5>  mov word [bp+2],%2
 13733 00001DB8 885E04              <5>  mov byte [bp+4],%3
 13734 00001DBB E889E2              <5>  call proc_setpx
 13735                              <5>  stkclose 0x05
 13736 00001DBE 83C405              <6>  add word sp, %1
 13737 00001DC1 EB23                <4> 			jmp .endfill2
 13738                              <4> 		.fill2:
 13739 00001DC3 39C8                <4> 			cmp ax,cx
 13740 00001DC5 731F                <4> 			jae .endfill2	
 13741                              <4> 			stkpush ax, bx, cx, dx
 13742                              <5>  %rep %0
 13743                              <5>  push %1
 13744                              <5>  %rotate 1
 13745                              <5>  %endrep
 13746 00001DC7 50                  <6>  push %1
 13747                              <6>  %rotate 1
 13748 00001DC8 53                  <6>  push %1
 13749                              <6>  %rotate 1
 13750 00001DC9 51                  <6>  push %1
 13751                              <6>  %rotate 1
 13752 00001DCA 52                  <6>  push %1
 13753                              <6>  %rotate 1
 13754                              <4> 			__setpx ax, dx, bl
 13755                              <5>  stkopen 0x05
 13756 00001DCB 83EC05              <6>  sub word sp, %1
 13757 00001DCE 54                  <6>  push sp
 13758 00001DCF 5D                  <6>  pop bp
 13759 00001DD0 894600              <5>  mov word [bp+0],%1
 13760 00001DD3 895602              <5>  mov word [bp+2],%2
 13761 00001DD6 885E04              <5>  mov byte [bp+4],%3
 13762 00001DD9 E86BE2              <5>  call proc_setpx
 13763                              <5>  stkclose 0x05
 13764 00001DDC 83C405              <6>  add word sp, %1
 13765                              <4> 			stkpop ax, bx, cx, dx			
 13766                              <5>  %rep %0
 13767                              <5>  %rotate -1
 13768                              <5>  pop %1
 13769                              <5>  %endrep
 13770                              <6>  %rotate -1
 13771 00001DDF 5A                  <6>  pop %1
 13772                              <6>  %rotate -1
 13773 00001DE0 59                  <6>  pop %1
 13774                              <6>  %rotate -1
 13775 00001DE1 5B                  <6>  pop %1
 13776                              <6>  %rotate -1
 13777 00001DE2 58                  <6>  pop %1
 13778 00001DE3 40                  <4> 			inc ax
 13779 00001DE4 EBDD                <4> 			jmp .fill2
 13780                              <4> 		.endfill2:
 13781                              <4> 		
 13782                              <4> 		stkpop ax, bx, cx, dx, bp 		
 13783                              <5>  %rep %0
 13784                              <5>  %rotate -1
 13785                              <5>  pop %1
 13786                              <5>  %endrep
 13787                              <6>  %rotate -1
 13788 00001DE6 5D                  <6>  pop %1
 13789                              <6>  %rotate -1
 13790 00001DE7 5A                  <6>  pop %1
 13791                              <6>  %rotate -1
 13792 00001DE8 59                  <6>  pop %1
 13793                              <6>  %rotate -1
 13794 00001DE9 5B                  <6>  pop %1
 13795                              <6>  %rotate -1
 13796 00001DEA 58                  <6>  pop %1
 13797                              <4> 																		
 13798 00001DEB 5A                  <4> 		pop dx
 13799 00001DEC 59                  <4> 		pop cx
 13800 00001DED 5B                  <4> 		pop bx
 13801 00001DEE 58                  <4> 		pop ax
 13802 00001DEF 50                  <4> 		push ax
 13803 00001DF0 53                  <4> 		push bx
 13804                              <4> 		__fladd cx, dx, ax, bx, cx, dx
 13805                              <5>  stkopen 0x0E
 13806 00001DF1 83EC0E              <6>  sub word sp, %1
 13807 00001DF4 54                  <6>  push sp
 13808 00001DF5 5D                  <6>  pop bp
 13809 00001DF6 894E00              <5>  mov word [bp+0],%1
 13810 00001DF9 895602              <5>  mov word [bp+2],%2
 13811 00001DFC 894604              <5>  mov word [bp+4],%3
 13812 00001DFF 895E06              <5>  mov word [bp+6],%4
 13813 00001E02 C7460C0000          <5>  mov word [bp+0x0C],0
 13814 00001E07 E847EE              <5>  call proc_fladdorsub
 13815 00001E0A 54                  <5>  push sp
 13816 00001E0B 5D                  <5>  pop bp
 13817 00001E0C 8B4E08              <5>  mov word %5,[bp+8]
 13818 00001E0F 8B560A              <5>  mov word %6,[bp+0x0A]
 13819                              <5>  stkclose 0x0E
 13820 00001E12 83C40E              <6>  add word sp, %1
 13821 00001E15 5B                  <4> 		pop bx
 13822 00001E16 58                  <4> 		pop ax
 13823 00001E17 50                  <4> 		push ax
 13824 00001E18 53                  <4> 		push bx
 13825 00001E19 51                  <4> 		push cx
 13826 00001E1A 52                  <4> 		push dx					
 13827                              <4> 		
 13828 00001E1B E9F4FD              <4> 		jmp .l1
 13829                              <4> 	.l2:
 13830                              <4> 														
 13831 00001E1E 5A                  <4> 	pop dx
 13832 00001E1F 59                  <4> 	pop cx
 13833 00001E20 5B                  <4> 	pop bx
 13834 00001E21 58                  <4> 	pop ax
 13835                              <4> 	
 13836 00001E22 C3                  <4> 	ret
 13837                              <4> 		
 13838                              <4> proc__arc_quadcoords:
 13839 00001E23 89E0                <4> 	mov ax,sp
 13840 00001E25 89C5                <4> 	mov bp,ax
 13841                              <4> 	
 13842 00001E27 B8FFFF              <4> 	mov ax,0xFFFF
 13843 00001E2A 2B4604              <4> 	sub ax,[bp+4]
 13844 00001E2D 40                  <4> 	inc ax
 13845 00001E2E 034602              <4> 	add ax,[bp+2]	
 13846 00001E31 89460A              <4> 	mov [bp+0x0A], ax
 13847                              <4> 	
 13848 00001E34 8B4608              <4> 	mov ax,[bp+8]
 13849 00001E37 034606              <4> 	add ax,[bp+6]
 13850 00001E3A 89460C              <4> 	mov [bp+0x0C], ax
 13851                              <4> 	
 13852 00001E3D 8B4604              <4> 	mov ax,[bp+4]
 13853 00001E40 034602              <4> 	add ax,[bp+2]
 13854 00001E43 89460E              <4> 	mov [bp+0x0E], ax
 13855                              <4> 	
 13856 00001E46 B8FFFF              <4> 	mov ax,0xFFFF
 13857 00001E49 2B4608              <4> 	sub ax,[bp+8]
 13858 00001E4C 40                  <4> 	inc ax
 13859 00001E4D 034606              <4> 	add ax,[bp+6]
 13860 00001E50 894610              <4> 	mov [bp+0x10], ax
 13861                              <4> 	
 13862 00001E53 C3                  <4> 	ret
 13863                              <4> 		
 13864                              <4> proc__x2dcoord:
 13865 00001E54 89E0                <4> 	mov ax,sp
 13866 00001E56 89C5                <4> 	mov bp,ax
 13867                              <4> 	
 13868 00001E58 8B4606              <4> 	mov ax,[bp+6]	; angulo (alta)
 13869 00001E5B 8B5E08              <4> 	mov bx,[bp+8]	; angulo (baixa)
 13870                              <4> 	
 13871                              <4> 	__cos0x90 ax,bx,ax,bx
 13872                              <5>  __sinorcos0x90 %1, %2, %3, %4, 0
 13873                              <6>  stkopen 0x09
 13874 00001E5E 83EC09              <7>  sub word sp, %1
 13875 00001E61 54                  <7>  push sp
 13876 00001E62 5D                  <7>  pop bp
 13877 00001E63 894600              <6>  mov word [bp+0],%1
 13878 00001E66 895E02              <6>  mov word [bp+2],%2
 13879 00001E69 C6460800            <6>  mov byte [bp+8],%5
 13880 00001E6D E870F6              <6>  call proc_sinorcos0x90
 13881 00001E70 54                  <6>  push sp
 13882 00001E71 5D                  <6>  pop bp
 13883 00001E72 8B4604              <6>  mov word %3,[bp+4]
 13884 00001E75 8B5E06              <6>  mov word %4,[bp+6]
 13885                              <6>  stkclose 0x09
 13886 00001E78 83C409              <7>  add word sp, %1
 13887                              <4> 	
 13888 00001E7B 89E1                <4> 	mov cx,sp
 13889 00001E7D 89CD                <4> 	mov bp,cx
 13890 00001E7F 8B4E02              <4> 	mov cx,[bp+2]	; raio (alta)
 13891 00001E82 8B5604              <4> 	mov dx,[bp+4]	; raio (baixa)
 13892                              <4> 	
 13893                              <4> 	__flmul ax, bx, cx, dx, ax, bx
 13894                              <5>  stkopen 0x0E
 13895 00001E85 83EC0E              <6>  sub word sp, %1
 13896 00001E88 54                  <6>  push sp
 13897 00001E89 5D                  <6>  pop bp
 13898 00001E8A 894600              <5>  mov word [bp+0],%1
 13899 00001E8D 895E02              <5>  mov word [bp+2],%2
 13900 00001E90 894E04              <5>  mov word [bp+4],%3
 13901 00001E93 895606              <5>  mov word [bp+6],%4
 13902 00001E96 E80CEC              <5>  call proc_flmul
 13903 00001E99 54                  <5>  push sp
 13904 00001E9A 5D                  <5>  pop bp
 13905 00001E9B 8B4608              <5>  mov word %5,[bp+8]
 13906 00001E9E 8B5E0A              <5>  mov word %6,[bp+0x0A]
 13907                              <5>  stkclose 0x0E
 13908 00001EA1 83C40E              <6>  add word sp, %1
 13909                              <4> 	
 13910 00001EA4 89E1                <4> 	mov cx,sp
 13911 00001EA6 89CD                <4> 	mov bp,cx
 13912 00001EA8 89460A              <4> 	mov [bp+0x0A],ax
 13913 00001EAB 895E0C              <4> 	mov [bp+0x0C],bx
 13914                              <4> 			
 13915 00001EAE C3                  <4> 	ret
 13916                              <4> 	
 13917                              <4> proc__y2dcoord:
 13918 00001EAF 89E0                <4> 	mov ax,sp
 13919 00001EB1 89C5                <4> 	mov bp,ax
 13920                              <4> 	
 13921 00001EB3 8B4606              <4> 	mov ax,[bp+6]	; angulo (alta)
 13922 00001EB6 8B5E08              <4> 	mov bx,[bp+8]	; angulo (baixa)
 13923                              <4> 	
 13924                              <4> 	__sin0x90 ax,bx,ax,bx
 13925                              <5>  __sinorcos0x90 %1, %2, %3, %4, 1
 13926                              <6>  stkopen 0x09
 13927 00001EB9 83EC09              <7>  sub word sp, %1
 13928 00001EBC 54                  <7>  push sp
 13929 00001EBD 5D                  <7>  pop bp
 13930 00001EBE 894600              <6>  mov word [bp+0],%1
 13931 00001EC1 895E02              <6>  mov word [bp+2],%2
 13932 00001EC4 C6460801            <6>  mov byte [bp+8],%5
 13933 00001EC8 E815F6              <6>  call proc_sinorcos0x90
 13934 00001ECB 54                  <6>  push sp
 13935 00001ECC 5D                  <6>  pop bp
 13936 00001ECD 8B4604              <6>  mov word %3,[bp+4]
 13937 00001ED0 8B5E06              <6>  mov word %4,[bp+6]
 13938                              <6>  stkclose 0x09
 13939 00001ED3 83C409              <7>  add word sp, %1
 13940                              <4> 	
 13941 00001ED6 89E1                <4> 	mov cx,sp
 13942 00001ED8 89CD                <4> 	mov bp,cx
 13943 00001EDA 8B4E02              <4> 	mov cx,[bp+2]	; raio (alta)
 13944 00001EDD 8B5604              <4> 	mov dx,[bp+4]	; raio (baixa)
 13945                              <4> 	
 13946                              <4> 	__flmul ax, bx, cx, dx, ax, bx
 13947                              <5>  stkopen 0x0E
 13948 00001EE0 83EC0E              <6>  sub word sp, %1
 13949 00001EE3 54                  <6>  push sp
 13950 00001EE4 5D                  <6>  pop bp
 13951 00001EE5 894600              <5>  mov word [bp+0],%1
 13952 00001EE8 895E02              <5>  mov word [bp+2],%2
 13953 00001EEB 894E04              <5>  mov word [bp+4],%3
 13954 00001EEE 895606              <5>  mov word [bp+6],%4
 13955 00001EF1 E8B1EB              <5>  call proc_flmul
 13956 00001EF4 54                  <5>  push sp
 13957 00001EF5 5D                  <5>  pop bp
 13958 00001EF6 8B4608              <5>  mov word %5,[bp+8]
 13959 00001EF9 8B5E0A              <5>  mov word %6,[bp+0x0A]
 13960                              <5>  stkclose 0x0E
 13961 00001EFC 83C40E              <6>  add word sp, %1
 13962                              <4> 	
 13963 00001EFF 89E1                <4> 	mov cx,sp
 13964 00001F01 89CD                <4> 	mov bp,cx
 13965 00001F03 89460A              <4> 	mov [bp+0x0A],ax
 13966 00001F06 895E0C              <4> 	mov [bp+0x0C],bx
 13967                              <4> 			
 13968 00001F09 C3                  <4> 	ret
 13969                              <4> 	
 13970                              <4> proc__arc_inc:
 13971 00001F0A 89E0                <4> 	mov ax,sp
 13972 00001F0C 89C5                <4> 	mov bp,ax
 13973                              <4> 			
 13974 00001F0E 8B4602              <4> 	mov ax,[bp+2]
 13975 00001F11 8B5E04              <4> 	mov bx,[bp+4]
 13976 00001F14 55                  <4> 	push bp
 13977                              <4> 	__flshr ax,1	; divide por 2
 13978                              <5>  stkopen 0x03
 13979 00001F15 83EC03              <6>  sub word sp, %1
 13980 00001F18 54                  <6>  push sp
 13981 00001F19 5D                  <6>  pop bp
 13982 00001F1A 894600              <5>  mov word [bp+0],%1
 13983 00001F1D C6460201            <5>  mov byte [bp+2],%2
 13984 00001F21 E844EA              <5>  call proc_flshr
 13985 00001F24 54                  <5>  push sp
 13986 00001F25 5D                  <5>  pop bp
 13987 00001F26 8B4600              <5>  mov word %1,[bp+0]
 13988                              <5>  stkclose 0x03
 13989 00001F29 83C403              <6>  add word sp, %1
 13990 00001F2C 5D                  <4> 	pop bp
 13991                              <4> 	
 13992 00001F2D B94940              <4> 	mov cx,0x4049	; PI (alta)
 13993 00001F30 BADB0F              <4> 	mov dx,0x0FDB	; PI (baixa)
 13994                              <4> 	
 13995 00001F33 55                  <4> 	push bp
 13996                              <4> 	__flmul ax, bx, cx, dx, ax, bx
 13997                              <5>  stkopen 0x0E
 13998 00001F34 83EC0E              <6>  sub word sp, %1
 13999 00001F37 54                  <6>  push sp
 14000 00001F38 5D                  <6>  pop bp
 14001 00001F39 894600              <5>  mov word [bp+0],%1
 14002 00001F3C 895E02              <5>  mov word [bp+2],%2
 14003 00001F3F 894E04              <5>  mov word [bp+4],%3
 14004 00001F42 895606              <5>  mov word [bp+6],%4
 14005 00001F45 E85DEB              <5>  call proc_flmul
 14006 00001F48 54                  <5>  push sp
 14007 00001F49 5D                  <5>  pop bp
 14008 00001F4A 8B4608              <5>  mov word %5,[bp+8]
 14009 00001F4D 8B5E0A              <5>  mov word %6,[bp+0x0A]
 14010                              <5>  stkclose 0x0E
 14011 00001F50 83C40E              <6>  add word sp, %1
 14012 00001F53 5D                  <4> 	pop bp
 14013                              <4> 	
 14014 00001F54 B9C93F              <4> 	mov cx,0x3FC9
 14015 00001F57 BADB0F              <4> 	mov dx,0x0FDB
 14016                              <4> 	
 14017 00001F5A 55                  <4> 	push bp
 14018                              <4> 	__fldiv cx, dx, ax, bx, ax, bx
 14019                              <5>  stkopen 0x0E
 14020 00001F5B 83EC0E              <6>  sub word sp, %1
 14021 00001F5E 54                  <6>  push sp
 14022 00001F5F 5D                  <6>  pop bp
 14023 00001F60 894E00              <5>  mov word [bp+0],%1
 14024 00001F63 895602              <5>  mov word [bp+2],%2
 14025 00001F66 894604              <5>  mov word [bp+4],%3
 14026 00001F69 895E06              <5>  mov word [bp+6],%4
 14027 00001F6C E817EA              <5>  call proc_fldiv
 14028 00001F6F 54                  <5>  push sp
 14029 00001F70 5D                  <5>  pop bp
 14030 00001F71 8B4608              <5>  mov word %5,[bp+8]
 14031 00001F74 8B5E0A              <5>  mov word %6,[bp+0x0A]
 14032                              <5>  stkclose 0x0E
 14033 00001F77 83C40E              <6>  add word sp, %1
 14034 00001F7A 5D                  <4> 	pop bp
 14035                              <4> 	
 14036 00001F7B 894606              <4> 	mov [bp+6], ax
 14037 00001F7E 895E08              <4> 	mov [bp+8], bx
 14038                              <4> 	
 14039 00001F81 C3                  <4> 	ret
 14040                              <4> 	
 14041                              <4> %endif
 14042                              <3> 			
 14043                              <3> %macro drawstring 4
 14044                              <3> 	drawstring cs, %1, cs, %2, cs, %3, cs, %4
 14045                              <3> %endmacro
 14046                              <3> 			
 14047                              <3> %macro drawlineh 4
 14048                              <3> 	drawlineh cs, %1, cs, %2, cs, %3, cs, %4
 14049                              <3> %endmacro			
 14050                              <3> 
 14051                              <3> %macro drawlinev 4
 14052                              <3> 	drawlinev cs, %1, cs, %2, cs, %3, cs, %4
 14053                              <3> %endmacro			
 14054                              <3> 			
 14055                              <3> %macro drawrect 5
 14056                              <3> 	drawrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 14057                              <3> %endmacro
 14058                              <3> 
 14059                              <3> %macro fillrect 5
 14060                              <3> 	fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 14061                              <3> %endmacro	
 14062                              <3> 
 14063                              <3> %macro drawarc 5
 14064                              <3> 	drawarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 14065                              <3> %endmacro
 14066                              <3> 
 14067                              <3> %macro fillarc 5
 14068                              <3> 	fillarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 14069                              <3> %endmacro			
 14070                              <3> 
 14071                              <3> %macro repaint 1
 14072                              <3> 	repaint cs, %1
 14073                              <3> %endmacro
 14074                              <3> 
 14075                              <3> %macro drawstring 8	
 14076                              <3> 	stkopen 0x07	
 14077                              <3> 	mov word [bp+0],%1
 14078                              <3> 	mov word [bp+2],%2	
 14079                              <3> 	mov ax,%3
 14080                              <3> 	mov ds,ax
 14081                              <3> 	mov al,[%4]
 14082                              <3> 	mov [bp+4],al	
 14083                              <3> 	mov ax,%5
 14084                              <3> 	mov ds,ax
 14085                              <3> 	mov al,[%6]
 14086                              <3> 	mov [bp+6],al
 14087                              <3> 	mov ax,%7	
 14088                              <3> 	mov ds,ax
 14089                              <3> 	mov al,[%8]
 14090                              <3> 	mov [bp+8],al			
 14091                              <3> 	call proc_drawstring
 14092                              <3> 	stkclose 0x07
 14093                              <3> %endmacro
 14094                              <3> 
 14095                              <3> %macro drawlineh 8
 14096                              <3> 	stkopen 0x07
 14097                              <3> 	mov ax,%1
 14098                              <3> 	mov ds,ax
 14099                              <3> 	mov ax,[%2]
 14100                              <3> 	mov [bp+0],ax	
 14101                              <3> 	mov ax,%3
 14102                              <3> 	mov ds,ax
 14103                              <3> 	mov ax,[%4]
 14104                              <3> 	mov [bp+2],ax	
 14105                              <3> 	mov ax,%5
 14106                              <3> 	mov ds,ax
 14107                              <3> 	mov ax,[%6]
 14108                              <3> 	mov [bp+4],ax		
 14109                              <3> 	mov ax,%7
 14110                              <3> 	mov ds,ax
 14111                              <3> 	mov al,[%8]
 14112                              <3> 	mov [bp+6],al
 14113                              <3> 	call proc_drawlineh	
 14114                              <3> 	stkclose 0x07
 14115                              <3> %endmacro
 14116                              <3> 
 14117                              <3> %macro drawlinev 8
 14118                              <3> 	stkopen 0x07
 14119                              <3> 	mov ax,%1
 14120                              <3> 	mov ds,ax
 14121                              <3> 	mov ax,[%2]
 14122                              <3> 	mov [bp+0],ax	
 14123                              <3> 	mov ax,%3
 14124                              <3> 	mov ds,ax
 14125                              <3> 	mov ax,[%4]
 14126                              <3> 	mov [bp+2],ax	
 14127                              <3> 	mov ax,%5
 14128                              <3> 	mov ds,ax
 14129                              <3> 	mov ax,[%6]
 14130                              <3> 	mov [bp+4],ax		
 14131                              <3> 	mov ax,%7
 14132                              <3> 	mov ds,ax
 14133                              <3> 	mov al,[%8]
 14134                              <3> 	mov [bp+6],al
 14135                              <3> 	call proc_drawlinev	
 14136                              <3> 	stkclose 0x07
 14137                              <3> %endmacro
 14138                              <3> 
 14139                              <3> %macro drawrect 10
 14140                              <3> 	stkopen 0x09	
 14141                              <3> 	mov ax,%1
 14142                              <3> 	mov ds,ax
 14143                              <3> 	mov ax,[%2]
 14144                              <3> 	mov [bp+0],ax	
 14145                              <3> 	mov ax,%3
 14146                              <3> 	mov ds,ax
 14147                              <3> 	mov ax,[%4]
 14148                              <3> 	mov [bp+2],ax	
 14149                              <3> 	mov ax,%5
 14150                              <3> 	mov ds,ax
 14151                              <3> 	mov ax,[%6]
 14152                              <3> 	mov [bp+4],ax	
 14153                              <3> 	mov ax,%7
 14154                              <3> 	mov ds,ax
 14155                              <3> 	mov ax,[%8]
 14156                              <3> 	mov [bp+6],ax	
 14157                              <3> 	mov ax,%9
 14158                              <3> 	mov ds,ax
 14159                              <3> 	mov al,[%10]
 14160                              <3> 	mov [bp+8],al	
 14161                              <3> 	call proc_drawrect	
 14162                              <3> 	stkclose 0x09
 14163                              <3> %endmacro
 14164                              <3> 
 14165                              <3> %macro fillrect 10
 14166                              <3> 	stkopen 0x09	
 14167                              <3> 	mov ax,%1
 14168                              <3> 	mov ds,ax
 14169                              <3> 	mov ax,[%2]
 14170                              <3> 	mov [bp+0],ax	
 14171                              <3> 	mov ax,%3
 14172                              <3> 	mov ds,ax
 14173                              <3> 	mov ax,[%4]
 14174                              <3> 	mov [bp+2],ax	
 14175                              <3> 	mov ax,%5
 14176                              <3> 	mov ds,ax
 14177                              <3> 	mov ax,[%6]
 14178                              <3> 	mov [bp+4],ax	
 14179                              <3> 	mov ax,%7
 14180                              <3> 	mov ds,ax
 14181                              <3> 	mov ax,[%8]
 14182                              <3> 	mov [bp+6],ax	
 14183                              <3> 	mov ax,%9
 14184                              <3> 	mov ds,ax
 14185                              <3> 	mov al,[%10]
 14186                              <3> 	mov [bp+8],al	
 14187                              <3> 	call proc_fillrect	
 14188                              <3> 	stkclose 0x09
 14189                              <3> %endmacro
 14190                              <3> 
 14191                              <3> %macro drawarc 10
 14192                              <3> 	drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 0
 14193                              <3> %endmacro
 14194                              <3> 
 14195                              <3> %macro fillarc 10
 14196                              <3> 	drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 1
 14197                              <3> %endmacro
 14198                              <3> 		
 14199                              <3> %macro drawarc 11
 14200                              <3> 	stkopen 0x0A
 14201                              <3> 	mov ax,%1
 14202                              <3> 	mov ds,ax
 14203                              <3> 	mov ax,[%2]
 14204                              <3> 	mov [bp+0],ax	
 14205                              <3> 	mov ax,%3
 14206                              <3> 	mov ds,ax
 14207                              <3> 	mov ax,[%4]
 14208                              <3> 	mov [bp+2],ax	
 14209                              <3> 	mov ax,%5
 14210                              <3> 	mov ds,ax
 14211                              <3> 	mov ax,[%6]
 14212                              <3> 	mov [bp+4],ax	
 14213                              <3> 	mov ax,%7
 14214                              <3> 	mov ds,ax
 14215                              <3> 	mov ax,[%8]
 14216                              <3> 	mov [bp+6],ax	
 14217                              <3> 	mov ax,%9
 14218                              <3> 	mov ds,ax
 14219                              <3> 	mov al,[%10]
 14220                              <3> 	mov byte [bp+8],al		
 14221                              <3> 	mov byte [bp+9],%11	
 14222                              <3> 	call proc_drawarc	
 14223                              <3> 	stkclose 0x0A
 14224                              <3> %endmacro
 14225                              <3> 		
 14226                              <3> 		
 14227                              <3> %endif
 14228                              <2> 
 14229                              <2> 	%include "src/lib/constants.asm"
 14230                              <3> %ifndef CONSTANTS_ASM
 14231                              <3> 	%define CONSTANTS_ASM
 14232                              <3> 					
 14233                              <3> section .data
 14234                              <3> 	__FL_ZERO: dd 0
 14235                              <3> 	__FL_ONE: dd 0x3F800000
 14236                              <3> 	__FL_NEG_ONE: dd 0xBF800000
 14237                              <3> 
 14238                              <3> 	__ZERO: dw 0
 14239                              <3> 	__ONE: dw 1
 14240                              <3> 		
 14241                              <3> 	__ball_color: db 09h
 14242                              <3> 	__ball_bordercolor: db 07h
 14243                              <3> 	
 14244                              <3> 	__tray_color: db 00h
 14245                              <3> 	__tray_bordercolor: db 07h	
 14246                              <3> 	
 14247                              <3> 	__square_bordercolor: db 07h
 14248                              <3> 	__square_ycolor: db 0x01, 0x02, 0x04, 0x09
 14249                              <3> 	
 14250                              <3> 	__racket_color: db 09h
 14251                              <3> 	__racket_bordercolor: db 07h	
 14252                              <3> 	
 14253                              <3> 	__message_default_color: db 07h	
 14254                              <3> 	__message_win_color: db 09h	
 14255                              <3> 	__message_lose_color: db 04h	
 14256                              <3> 								
 14257                              <3> %endif
 14258                              <2> 	%include "src/lib/ball.mac"
 14259                              <3> %ifndef BALL_MAC
 14260                              <3> 	%define BALL_MAC
 14261                              <3> 			
 14262                              <3> 	%include "lib/system.mac"
 14263                              <3> 	%include "lib/math.mac"
 14264                              <3> 	%include "lib/float.mac"
 14265                              <3> 	%include "lib/trigon.mac"
 14266                              <3> 
 14267                              <3> 	%include "src/lib/constants.asm"
 14268                              <3> 
 14269                              <3> section .data	
 14270                              <3> 	__BALL_X: dd 80.0
 14271                              <3> 	__BALL_Y: dd 80.0
 14272                              <3> 	
 14273                              <3> 	__BALL_RINC: dd 1.0
 14274                              <3> 	
 14275                              <3> 	__BALL_ANGLE: dd 45.0
 14276                              <3> 	__BALL_VAR_ANGLE: dd 15.0
 14277                              <3> 	
 14278                              <3> 	__ball_x: dd 0
 14279                              <3> 	__ball_y: dd 0	
 14280                              <3> 	__ball_radial: dd 10.0		
 14281                              <3> 	__ball_xinc: dd 0
 14282                              <3> 	__ball_yinc: dd 0
 14283                              <3> 	__ball_rinc: dd 0
 14284                              <3> 	__ball_angle: dd 0
 14285                              <3> 	__ball_var_angle: dd 0
 14286                              <3> 	__ball_angle_inc: dw 0
 14287                              <3> 				
 14288                              <3> %macro ball_initialize 0
 14289                              <3> section .data
 14290                              <3> 	%%tray_x1: dd 0
 14291                              <3> 	%%tray_y1: dd 0
 14292                              <3> section .text
 14293                              <3> 	int16tofl __tray_x1, %%tray_x1
 14294                              <3> 	int16tofl __tray_y1, %%tray_y1
 14295                              <3> 
 14296                              <3> 	mov32 __ball_x, __BALL_X
 14297                              <3> 	mov32 __ball_y, __BALL_Y	
 14298                              <3> 	fladd __ball_x, %%tray_x1, __ball_x	
 14299                              <3> 	fladd __ball_y, %%tray_y1, __ball_y
 14300                              <3> 
 14301                              <3> 	mov32 __ball_rinc, __BALL_RINC	
 14302                              <3> 	toradians __BALL_ANGLE, __ball_angle
 14303                              <3> 	toradians __BALL_VAR_ANGLE, __ball_var_angle
 14304                              <3> 	
 14305                              <3> 	ball_updateangle
 14306                              <3> %endmacro
 14307                              <3> 
 14308                              <3> %macro ball_move 0
 14309                              <3> section .data
 14310                              <3> 	%%xb: dd 0
 14311                              <3> 	%%yb: dd 0
 14312                              <3> 	%%x: dw 0
 14313                              <3> 	%%y: dw 0
 14314                              <3> section .text
 14315                              <3> 	mov32 %%xb, __ball_x
 14316                              <3> 	mov32 %%yb, __ball_y
 14317                              <3> 
 14318                              <3> 	fladd %%xb, __ball_xinc, %%xb
 14319                              <3> 	fladd %%yb, __ball_yinc, %%yb
 14320                              <3> 	
 14321                              <3> 	fltoint16 %%xb, %%x
 14322                              <3> 	fltoint16 %%yb, %%y
 14323                              <3> 	
 14324                              <3> 	flcmp %%x, __tray_x1, cl
 14325                              <3> 	cmp cl,0
 14326                              <3> 	jle %%end
 14327                              <3> 	
 14328                              <3> 	flcmp %%x, __tray_x2, cl
 14329                              <3> 	cmp cl,0
 14330                              <3> 	jge %%end
 14331                              <3> 	
 14332                              <3> 	cmp16 %%y, __tray_y1, cl
 14333                              <3> 	cmp cl,0
 14334                              <3> 	jle %%end
 14335                              <3> 	
 14336                              <3> 	cmp16 %%y, __tray_y2, cl
 14337                              <3> 	cmp cl,0
 14338                              <3> 	jge %%end
 14339                              <3> 	
 14340                              <3> 		mov32 __ball_x, %%xb
 14341                              <3> 		mov32 __ball_y, %%yb
 14342                              <3> 		
 14343                              <3> 	%%end:
 14344                              <3> %endmacro
 14345                              <3> 
 14346                              <3> 
 14347                              <3> %macro ball_leftangle 0				
 14348                              <3> 	flinvsig __ball_angle							
 14349                              <3> 	to0x360 __ball_angle	
 14350                              <3> 
 14351                              <3> 	validate_subangle cl			
 14352                              <3> 	cmp cl,0
 14353                              <3> 	jnz %%altered			
 14354                              <3> 		flsub __ball_angle, __ball_var_angle, __ball_angle
 14355                              <3> 	%%altered:
 14356                              <3> 	
 14357                              <3> 	ball_updateangle
 14358                              <3> %endmacro
 14359                              <3> 
 14360                              <3> %macro ball_rightangle 0
 14361                              <3> 	flinvsig __ball_angle	
 14362                              <3> 	to0x360 __ball_angle
 14363                              <3> 			
 14364                              <3> 	validate_addangle cl			
 14365                              <3> 	cmp cl,0
 14366                              <3> 	jnz %%altered	
 14367                              <3> 		fladd __ball_angle, __ball_var_angle, __ball_angle			
 14368                              <3> 	%%altered:
 14369                              <3> 			
 14370                              <3> 	ball_updateangle
 14371                              <3> %endmacro
 14372                              <3> 
 14373                              <3> %macro validate_addangle 1
 14374                              <3> section .data
 14375                              <3> 	%%angle: dd 0
 14376                              <3> 	%%270rad: dd 0x4096CBE4
 14377                              <3> 	%%360rad: dd 0x40C90FDB
 14378                              <3> 	%%aux: dd 0
 14379                              <3> section .text
 14380                              <3> 	mov32 %%angle, __ball_angle
 14381                              <3> 	fladd %%angle, __ball_var_angle, %%angle
 14382                              <3> 		
 14383                              <3> 	mov32 %%aux, %%270rad
 14384                              <3> 	flsub %%aux, __ball_var_angle, %%aux
 14385                              <3> 	flcmp %%angle, %%aux, cl
 14386                              <3> 	cmp cl,0
 14387                              <3> 	jle %%valid
 14388                              <3> 
 14389                              <3> 	flcmp %%angle, %%270rad, cl
 14390                              <3> 	cmp cl,0
 14391                              <3> 	jle %%invalid
 14392                              <3> 	
 14393                              <3> 	mov32 %%aux, %%360rad
 14394                              <3> 	flsub %%aux, __ball_var_angle, %%aux
 14395                              <3> 	flcmp %%angle, %%aux, cl
 14396                              <3> 	cmp cl,0
 14397                              <3> 	jle %%valid
 14398                              <3> 	jmp %%invalid
 14399                              <3> 	
 14400                              <3> 	%%valid:
 14401                              <3> 		mov byte %1, 0
 14402                              <3> 		jmp %%end
 14403                              <3> 	%%invalid:
 14404                              <3> 		mov byte %1, 1
 14405                              <3> 	%%end:	
 14406                              <3> %endmacro
 14407                              <3> 
 14408                              <3> %macro validate_subangle 1
 14409                              <3> section .data
 14410                              <3> 	%%angle: dd 0
 14411                              <3> 	%%180rad: dd 0x40490FDB
 14412                              <3> 	%%270rad: dd 0x4096CBE4
 14413                              <3> 	%%aux: dd 0
 14414                              <3> section .text
 14415                              <3> 	mov32 %%angle, __ball_angle
 14416                              <3> 	flsub %%angle, __ball_var_angle, %%angle
 14417                              <3> 	
 14418                              <3> 	mov32 %%aux, %%270rad
 14419                              <3> 	fladd %%aux, __ball_var_angle, %%aux
 14420                              <3> 	flcmp %%angle, %%aux, cl
 14421                              <3> 	cmp cl,0
 14422                              <3> 	jge %%valid			
 14423                              <3> 			
 14424                              <3> 	flcmp %%angle, %%270rad, cl
 14425                              <3> 	cmp cl,0
 14426                              <3> 	jge %%invalid
 14427                              <3> 	
 14428                              <3> 	mov32 %%aux, %%180rad
 14429                              <3> 	fladd %%aux, __ball_var_angle, %%aux
 14430                              <3> 	flcmp %%angle, %%aux, cl
 14431                              <3> 	cmp cl,0
 14432                              <3> 	jge %%valid
 14433                              <3> 	jmp %%invalid
 14434                              <3> 			
 14435                              <3> 	%%valid:
 14436                              <3> 		mov byte %1, 0
 14437                              <3> 		jmp %%end
 14438                              <3> 	%%invalid:
 14439                              <3> 		mov byte %1, 1
 14440                              <3> 	%%end:	
 14441                              <3> %endmacro
 14442                              <3> 
 14443                              <3> %macro ball_xinvdirection 0
 14444                              <3> 	flinvsig __ball_angle
 14445                              <3> 	to0x360 __ball_angle
 14446                              <3> 	fladd __ball_angle, PI, __ball_angle			
 14447                              <3> 	ball_updateangle
 14448                              <3> %endmacro
 14449                              <3> 
 14450                              <3> %macro ball_yinvdirection 0
 14451                              <3> 	flinvsig __ball_angle			
 14452                              <3> 	ball_updateangle
 14453                              <3> %endmacro
 14454                              <3> 
 14455                              <3> %macro ball_updateangle 0
 14456                              <3> 	cos __ball_angle, __ball_xinc	
 14457                              <3> 	sin __ball_angle, __ball_yinc	
 14458                              <3> 		
 14459                              <3> 	flmul __ball_xinc, __ball_rinc, __ball_xinc
 14460                              <3> 	flmul __ball_yinc, __ball_rinc, __ball_yinc	
 14461                              <3> %endmacro
 14462                              <3> 	
 14463                              <3> %endif
 14464                              <2> 
 14465                              <2> section .data
 14466 00001F82 3200                <2> 	__RACKET_X: dw 50
 14467                              <2> 	
 14468 00001F84 0000                <2> 	__racket_x: dw 0
 14469 00001F86 0000                <2> 	__racket_y: dw 0
 14470 00001F88 3200                <2> 	__racket_w: dw 50
 14471 00001F8A 0A00                <2> 	__racket_h: dw 10
 14472 00001F8C 1100                <2> 	__racket_pw: dw 17
 14473 00001F8E 1E00                <2> 	__racket_inc: dw 30
 14474                              <2> 
 14475                              <2> %macro racket_initialize 0
 14476                              <2> 	mov16 __racket_x, __RACKET_X	
 14477                              <2> 	
 14478                              <2> 	add16 __racket_x, __tray_x1	
 14479                              <2> 	mov16 __racket_y, __tray_y2
 14480                              <2> 	sub16 __racket_y, __racket_h	
 14481                              <2> %endmacro
 14482                              <2> 
 14483                              <2> %macro racket_throw_colision 0
 14484                              <2> section .data
 14485                              <2> 	%%x: dw 0
 14486                              <2> 	%%y: dw 0
 14487                              <2> 	%%ball_r: dw 0
 14488                              <2> 	%%racket_x: dw 0
 14489                              <2> 	%%racket_x2: dw 0
 14490                              <2> 	%%racket_px2: dw 0
 14491                              <2> section .text
 14492                              <2> 	cmp16 __lose, __ONE, cl
 14493                              <2> 	cmp cl,0
 14494                              <2> 	je %%end
 14495                              <2> 	
 14496                              <2> 	flcmp __ball_yinc, __FL_ZERO, cl	
 14497                              <2> 	cmp cl,0
 14498                              <2> 	jl %%end	 
 14499                              <2> 
 14500                              <2> 	fltoint16 __ball_radial, %%ball_r
 14501                              <2> 
 14502                              <2> 	fltoint16 __ball_y, %%y
 14503                              <2> 	add16 %%y, %%ball_r
 14504                              <2> 			
 14505                              <2> 	cmp16 %%y, __racket_y, cl
 14506                              <2> 	cmp cl,0
 14507                              <2> 	jl %%end	
 14508                              <2> 		mov16 %%racket_x, __racket_x	
 14509                              <2> 		mov16 %%racket_x2, __racket_x
 14510                              <2> 		add16 %%racket_x2, __racket_w
 14511                              <2> 		
 14512                              <2> 		fltoint16 __ball_x, %%x
 14513                              <2> 		add16 %%x, %%ball_r		
 14514                              <2> 				
 14515                              <2> 		cmp16 %%x, %%racket_x, cl
 14516                              <2> 		cmp cl,0
 14517                              <2> 		jl %%end
 14518                              <2> 
 14519                              <2> 		mov16 %%racket_px2, %%racket_x
 14520                              <2> 		add16 %%racket_px2, __racket_pw
 14521                              <2> 		cmp16 %%x, %%racket_px2, cl
 14522                              <2> 		cmp cl,0
 14523                              <2> 		jl %%left
 14524                              <2> 		
 14525                              <2> 		
 14526                              <2> 		fltoint16 __ball_x, %%x
 14527                              <2> 		sub16 %%x, %%ball_r		
 14528                              <2> 		cmp16 %%x, %%racket_x2, cl		
 14529                              <2> 		cmp cl,0		
 14530                              <2> 		jg %%end
 14531                              <2> 				
 14532                              <2> 		mov16 %%racket_px2, %%racket_x2
 14533                              <2> 		sub16 %%racket_px2, __racket_pw
 14534                              <2> 		cmp16 %%x, %%racket_px2, cl
 14535                              <2> 		cmp cl,0
 14536                              <2> 		jg %%right
 14537                              <2> 				
 14538                              <2> 		jmp %%center
 14539                              <2> 							
 14540                              <2> 		%%left:			
 14541                              <2> 			ball_leftangle
 14542                              <2> 			jmp %%end	
 14543                              <2> 		%%right:
 14544                              <2> 			ball_rightangle	
 14545                              <2> 			jmp %%end		
 14546                              <2> 		%%center:
 14547                              <2> 			ball_yinvdirection					
 14548                              <2> 	%%end:
 14549                              <2> %endmacro
 14550                              <2> 
 14551                              <2> %macro racket_backmove 0
 14552                              <2> section .data
 14553                              <2> 	%%x: dw 0
 14554                              <2> section .text
 14555                              <2> 	mov16 %%x, __racket_x
 14556                              <2> 	sub16 %%x, __racket_inc
 14557                              <2> 	racket_move %%x
 14558                              <2> %endmacro
 14559                              <2> 
 14560                              <2> %macro racket_frontmove 0
 14561                              <2> section .data
 14562                              <2> 	%%x: dw 0
 14563                              <2> section .text
 14564                              <2> 	mov16 %%x, __racket_x
 14565                              <2> 	add16 %%x, __racket_inc
 14566                              <2> 	racket_move %%x
 14567                              <2> %endmacro
 14568                              <2> 
 14569                              <2> %macro racket_move 1
 14570                              <2> section .data
 14571                              <2> 	%%max_x2: dw 0
 14572                              <2> section .text	
 14573                              <2> 	cmp16 %1, __tray_x1, cl
 14574                              <2> 	cmp cl,0
 14575                              <2> 	jl %%movesidex1
 14576                              <2> 	
 14577                              <2> 	mov16 %%max_x2, __tray_x2
 14578                              <2> 	sub16 %%max_x2, __racket_w
 14579                              <2> 	cmp16 %1, %%max_x2, cl
 14580                              <2> 	cmp cl,0
 14581                              <2> 	jg %%movesidex2
 14582                              <2> 	
 14583                              <2> 	mov16 __racket_x, %1
 14584                              <2> 	jmp %%end
 14585                              <2> 	
 14586                              <2> 	%%movesidex1:
 14587                              <2> 		mov16 __racket_x, __tray_x1
 14588                              <2> 		jmp %%end
 14589                              <2> 	%%movesidex2:	
 14590                              <2> 		mov16 __racket_x, %%max_x2
 14591                              <2> 	%%end:	
 14592                              <2> %endmacro				
 14593                              <2> 	
 14594                              <2> %endif
 14595                              <1> 
 14596                              <1> section .data	
 14597 00001F90 0000                <1> 	__LOSE: dw 0
 14598                              <1> 	
 14599 00001F92 0000                <1> 	__lose: dw 0			
 14600                              <1> 
 14601                              <1> %macro game_initialize 0		
 14602                              <1> 	tray_initialize
 14603                              <1> 	ball_initialize			
 14604                              <1> 	racket_initialize		
 14605                              <1> 			
 14606                              <1> 	mov16 __lose, __LOSE	
 14607                              <1> 	
 14608                              <1> 	game_hide_win_message
 14609                              <1> 	game_hide_lose_message
 14610                              <1> 	game_hide_pause_message
 14611                              <1> %endmacro
 14612                              <1> 
 14613                              <1> %macro game_status 1
 14614                              <1> 	cmp16 __lose, __ONE, cl
 14615                              <1> 	cmp cl,0
 14616                              <1> 	jz %%lose
 14617                              <1> 	
 14618                              <1> 	cmp16 __square_count, __ZERO, cl
 14619                              <1> 	cmp cl,0
 14620                              <1> 	jz %%win
 14621                              <1> 	
 14622                              <1> 	%%playering:
 14623                              <1> 		mov byte %1, 0
 14624                              <1> 		jmp %%end
 14625                              <1> 	%%win:
 14626                              <1> 		mov byte %1, 1
 14627                              <1> 		jmp %%end
 14628                              <1> 	%%lose:
 14629                              <1> 		mov byte %1, 2
 14630                              <1> 	%%end:
 14631                              <1> %endmacro
 14632                              <1> 
 14633                              <1> %macro game_frontmoveracket 0
 14634                              <1> 	racket_frontmove
 14635                              <1> %endmacro
 14636                              <1> 
 14637                              <1> %macro game_backmoveracket 0
 14638                              <1> 	racket_backmove
 14639                              <1> %endmacro
 14640                              <1> 
 14641                              <1> %macro game_moveball 0
 14642                              <1> 	tray_throw_colision
 14643                              <1> 	tray_throw_square_colision
 14644                              <1> 	racket_throw_colision	
 14645                              <1> 		
 14646                              <1> 	ball_move	
 14647                              <1> %endmacro
 14648                              <1> 
 14649                              <1> %macro game_show_init_message 0
 14650                              <1> 	mov16 __show_init_message, __ONE
 14651                              <1> %endmacro
 14652                              <1> 
 14653                              <1> %macro game_hide_init_message 0
 14654                              <1> 	mov16 __show_init_message, __ZERO
 14655                              <1> %endmacro
 14656                              <1> 
 14657                              <1> %macro game_show_win_message 0
 14658                              <1> 	mov16 __show_win_message, __ONE
 14659                              <1> %endmacro
 14660                              <1> 
 14661                              <1> %macro game_hide_win_message 0
 14662                              <1> 	mov16 __show_win_message, __ZERO
 14663                              <1> %endmacro
 14664                              <1> 
 14665                              <1> %macro game_show_lose_message 0
 14666                              <1> 	mov16 __show_lose_message, __ONE
 14667                              <1> %endmacro
 14668                              <1> 
 14669                              <1> %macro game_hide_lose_message 0
 14670                              <1> 	mov16 __show_lose_message, __ZERO
 14671                              <1> %endmacro
 14672                              <1> 
 14673                              <1> %macro game_show_pause_message 0
 14674                              <1> 	mov16 __show_pause_message, __ONE
 14675                              <1> %endmacro
 14676                              <1> 
 14677                              <1> %macro game_hide_pause_message 0
 14678                              <1> 	mov16 __show_pause_message, __ZERO
 14679                              <1> %endmacro				
 14680                              <1> 	
 14681                              <1> %endif
 14682                                  %include "src/lib/gui.mac"
 14683                              <1> %ifndef GUI_MAC
 14684                              <1> 	%define GUI_MAC
 14685                              <1> 			
 14686                              <1> 	%include "lib/system.mac"
 14687                              <2>  
 14688                              <2> %ifndef SYSTEM_MAC
 14689                              <2>  	%define SYSTEM_MAC
 14690                              <2>  	
 14691                              <2> 	%ifndef TRUE
 14692                              <2> 		%define TRUE 01h
 14693                              <2> 	%endif
 14694                              <2> 	%ifndef FALSE
 14695                              <2> 		%define FALSE 00h
 14696                              <2> 	%endif
 14697                              <2> 	
 14698                              <2> %macro vlodsb 3
 14699                              <2> 	vlodsb cs, %1, %2, %3
 14700                              <2> %endmacro
 14701                              <2> 
 14702                              <2> %macro vstosb 3
 14703                              <2> 	vstosb cs, %1, %2, %3
 14704                              <2> %endmacro
 14705                              <2> 	 	
 14706                              <2> %macro int16toreg 2
 14707                              <2> 	int16toreg cs, %1, %2
 14708                              <2> %endmacro
 14709                              <2> 
 14710                              <2> %macro regtoint16 2
 14711                              <2> 	regtoint16 %1, cs, %2
 14712                              <2> %endmacro
 14713                              <2> 
 14714                              <2> %macro vstosb 4
 14715                              <2> 	push %1
 14716                              <2> 	pop ds
 14717                              <2> 	mov si,%2
 14718                              <2> 	add si,%3
 14719                              <2> 	mov byte [si],%4	
 14720                              <2> %endmacro
 14721                              <2> 
 14722                              <2> %macro vlodsb 4
 14723                              <2> 	push %1
 14724                              <2> 	pop ds
 14725                              <2> 	mov si,%2
 14726                              <2> 	add si,%3
 14727                              <2> 	mov byte %4,[si]	
 14728                              <2> %endmacro 	 
 14729                              <2> 
 14730                              <2> %macro int16toreg 3
 14731                              <2> 	push %2
 14732                              <2> 	push %1
 14733                              <2> 	pop ds
 14734                              <2> 	pop si
 14735                              <2> 	mov word %3,[si]	
 14736                              <2> %endmacro
 14737                              <2> 
 14738                              <2> %macro regtoint16 3
 14739                              <2> 	push %3
 14740                              <2> 	push %2
 14741                              <2> 	pop ds
 14742                              <2> 	pop si
 14743                              <2> 	mov word [si],%1	
 14744                              <2> %endmacro
 14745                              <2> 
 14746                              <2> %macro mov32 2
 14747                              <2> 	mov32 cs, %1, cs, %2
 14748                              <2> %endmacro
 14749                              <2> 
 14750                              <2> %macro mov16 2
 14751                              <2> 	mov16 cs, %1, cs, %2
 14752                              <2> %endmacro
 14753                              <2> 
 14754                              <2> %macro mov32 4
 14755                              <2> 	mov ax,%3
 14756                              <2> 	mov ds,ax
 14757                              <2> 	mov cx,[%4+2]
 14758                              <2> 	mov dx,[%4]
 14759                              <2> 	mov ax,%1
 14760                              <2> 	mov ds,ax
 14761                              <2> 	mov [%2+2],cx
 14762                              <2> 	mov [%2],dx
 14763                              <2> %endmacro
 14764                              <2> 
 14765                              <2> %macro mov16 4
 14766                              <2> 	mov ax,%3
 14767                              <2> 	mov ds,ax
 14768                              <2> 	mov bx,[%4]
 14769                              <2> 	mov ax,%1
 14770                              <2> 	mov ds,ax
 14771                              <2> 	mov [%2],bx
 14772                              <2> %endmacro
 14773                              <2>  	 	
 14774                              <2> %macro mformat 4
 14775                              <2> 	stkopen 8
 14776                              <2> 	mov word [ bp + 0 ], %1
 14777                              <2> 	mov word [ bp + 2 ], %2
 14778                              <2> 	mov word [ bp + 4 ], %3
 14779                              <2> 	mov word [ bp + 6 ], %4
 14780                              <2> 	call kernel_segment:mformat
 14781                              <2> 	stkclose 8
 14782                              <2> %endmacro
 14783                              <2> 
 14784                              <2> %macro malloc 6
 14785                              <2> 	stkopen 0Bh
 14786                              <2> 	mov word [ bp + 4 ], %3
 14787                              <2> 	mov word [ bp + 6 ], %4
 14788                              <2> 	mov word [ bp + 8 ], %5	
 14789                              <2> 	call kernel_segment:malloc
 14790                              <2> 	push sp
 14791                              <2> 	pop bp
 14792                              <2> 	mov word %1, [ bp ]
 14793                              <2> 	mov word %2, [ bp + 2 ]
 14794                              <2> 	mov byte %6, [ bp + 0x0A ]
 14795                              <2> 	stkclose 0Bh
 14796                              <2> %endmacro 	
 14797                              <2> 
 14798                              <2> %macro laddr 2
 14799                              <2> 	laddr %1, %2, %1, %2
 14800                              <2> %endmacro
 14801                              <2> 
 14802                              <2> %macro faddr 2
 14803                              <2> 	faddr %1, %2, %1, %2
 14804                              <2> %endmacro
 14805                              <2>  	
 14806                              <2> %macro laddr 4
 14807                              <2> 	stkopen 8
 14808                              <2> 	mov word [ bp + 4 ], %3
 14809                              <2> 	mov word [ bp + 6 ], %4	
 14810                              <2> 	call kernel_segment:laddr
 14811                              <2> 	push sp
 14812                              <2> 	pop bp
 14813                              <2> 	mov word %1, [ bp + 0 ]
 14814                              <2> 	mov word %2, [ bp + 2 ]	
 14815                              <2> 	stkclose 8
 14816                              <2> %endmacro
 14817                              <2> 
 14818                              <2> %macro faddr 4
 14819                              <2> 	stkopen 8
 14820                              <2> 	mov word [ bp + 4 ], %3
 14821                              <2> 	mov word [ bp + 6 ], %4	
 14822                              <2> 	call kernel_segment:faddr
 14823                              <2> 	push sp
 14824                              <2> 	pop bp
 14825                              <2> 	mov word %1, [ bp + 0 ]
 14826                              <2> 	mov word %2, [ bp + 2 ]	
 14827                              <2> 	stkclose 8
 14828                              <2> %endmacro	
 14829                              <2>  
 14830                              <2> 
 14831                              <2> %macro stkopen 1		
 14832                              <2> 	sub word sp, %1
 14833                              <2> 	push sp
 14834                              <2> 	pop bp
 14835                              <2> %endmacro
 14836                              <2> 
 14837                              <2> %macro stkclose 1
 14838                              <2> 	add word sp, %1
 14839                              <2> %endmacro
 14840                              <2> 
 14841                              <2> %macro stkload 1-* 	
 14842                              <2>  	%rep %0
 14843                              <2>  	 	%rotate -1
 14844                              <2>  		pop %1
 14845                              <2>  	%endrep
 14846                              <2>  	%rep %0
 14847                              <2>  		push %1
 14848                              <2>  		%rotate 1
 14849                              <2>  	%endrep
 14850                              <2> %endmacro
 14851                              <2> 
 14852                              <2> %macro stkpush 1-* 	
 14853                              <2>  	%rep %0
 14854                              <2>  		push %1
 14855                              <2>  		%rotate 1
 14856                              <2>  	%endrep 	
 14857                              <2> %endmacro
 14858                              <2>  
 14859                              <2> %macro stkpop 1-*
 14860                              <2>  	%rep %0
 14861                              <2>  	 	%rotate -1
 14862                              <2>  		pop %1
 14863                              <2>  	%endrep 	 	
 14864                              <2> %endmacro
 14865                              <2> 
 14866                              <2> %macro delay 1
 14867                              <2> 	delay cs, %1
 14868                              <2> %endmacro
 14869                              <2> 
 14870                              <2> %macro delay 2
 14871                              <2> 	mov ax,%1
 14872                              <2> 	mov ds,ax
 14873                              <2> 	
 14874                              <2> 	mov ah,86h
 14875                              <2> 	mov cx,[%2+2]
 14876                              <2> 	mov dx,[%2]
 14877                              <2> 	int 15h	
 14878                              <2> %endmacro
 14879                              <2> 
 14880                              <2> %endif 
 14881                              <1> 	%include "lib/math.mac"
 14882                              <2> 
 14883                              <2> %ifndef MATH_MAC
 14884                              <2> 	%define MATH_MAC
 14885                              <2> 	
 14886                              <2> 	%include "lib/math.asm"
 14887                              <2> 	%include "lib/system.mac"
 14888                              <2> 
 14889                              <2> %macro chgsig 1
 14890                              <2> 	chgsig cs, %1
 14891                              <2> %endmacro
 14892                              <2> 
 14893                              <2> %macro cmp16 3
 14894                              <2> 	cmp16 cs, %1, cs, %2, %3
 14895                              <2> %endmacro
 14896                              <2> 
 14897                              <2> %macro mul16 2
 14898                              <2> 	mul16 cs, %1, cs, %2
 14899                              <2> %endmacro
 14900                              <2> 
 14901                              <2> %macro div16 2
 14902                              <2> 	div16 cs, %1, cs, %2
 14903                              <2> %endmacro
 14904                              <2> 
 14905                              <2> %macro mod16 2
 14906                              <2> 	mod16 cs, %1, cs, %2
 14907                              <2> %endmacro
 14908                              <2> 
 14909                              <2> %macro inc16 1
 14910                              <2> 	inc16 cs, %1
 14911                              <2> %endmacro
 14912                              <2> 
 14913                              <2> %macro dec16 1
 14914                              <2> 	dec16 cs, %1
 14915                              <2> %endmacro
 14916                              <2> 
 14917                              <2> %macro add16 2
 14918                              <2> 	add16 cs, %1, cs, %2
 14919                              <2> %endmacro
 14920                              <2> 
 14921                              <2> %macro sub16 2
 14922                              <2> 	sub16 cs, %1, cs, %2
 14923                              <2> %endmacro
 14924                              <2> 
 14925                              <2> %macro int32to16 2
 14926                              <2> 	int32to16 cs, %1, %2
 14927                              <2> %endmacro
 14928                              <2> 
 14929                              <2> %macro int16to32 2
 14930                              <2> 	int16to32 %1, cs, %2
 14931                              <2> %endmacro
 14932                              <2> 
 14933                              <2> %macro idiv32 5
 14934                              <2> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 14935                              <2> %endmacro
 14936                              <2> 
 14937                              <2> %macro imul32 3
 14938                              <2> 	imul32 cs, %1, cs, %2, cs, %3
 14939                              <2> %endmacro
 14940                              <2> 
 14941                              <2> %macro div32 5
 14942                              <2> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 14943                              <2> %endmacro
 14944                              <2> 
 14945                              <2> %macro mul32 3
 14946                              <2> 	mul32 cs, %1, cs, %2, cs, %3
 14947                              <2> %endmacro
 14948                              <2> 	
 14949                              <2> %macro add32 3
 14950                              <2> 	add32 cs, %1, cs, %2, cs, %3
 14951                              <2> %endmacro
 14952                              <2> 
 14953                              <2> %macro sub32 3
 14954                              <2> 	sub32 cs, %1, cs, %2, cs, %3
 14955                              <2> %endmacro
 14956                              <2> 
 14957                              <2> %macro int32to16 3
 14958                              <2> 	stkopen 0x06
 14959                              <2> 	mov ax,%1
 14960                              <2> 	mov ds,ax
 14961                              <2> 	mov ax,[%2+2]
 14962                              <2> 	mov word [bp+0], ax
 14963                              <2> 	mov ax,[%2]	
 14964                              <2> 	mov word [bp+2], ax
 14965                              <2> 	call proc_int32to16
 14966                              <2> 	mov ax,sp
 14967                              <2> 	mov bp,ax
 14968                              <2> 	mov ax,[bp+4]
 14969                              <2> 	mov word %3, ax	
 14970                              <2> 	stkclose 0x06
 14971                              <2> %endmacro
 14972                              <2> 
 14973                              <2> %macro int16to32 3
 14974                              <2> 	stkopen 0x06
 14975                              <2> 	mov word [bp+0], %1	
 14976                              <2> 	call proc_int16to32
 14977                              <2> 	mov ax,sp
 14978                              <2> 	mov bp,ax
 14979                              <2> 	mov ax,%2
 14980                              <2> 	mov ds,ax
 14981                              <2> 	mov ax,[bp+2]
 14982                              <2> 	mov [%3+2],ax
 14983                              <2> 	mov ax,[bp+4]
 14984                              <2> 	mov [%3],ax	
 14985                              <2> 	stkclose 0x06
 14986                              <2> %endmacro
 14987                              <2> 
 14988                              <2> %macro div32 10
 14989                              <2> 	stkopen 0x11
 14990                              <2> 	mov ax,%1
 14991                              <2> 	mov ds,ax
 14992                              <2> 	mov ax,[%2+2]
 14993                              <2> 	mov word [bp+0], ax
 14994                              <2> 	mov ax,[%2]
 14995                              <2> 	mov word [bp+2], ax
 14996                              <2> 	mov ax,%3
 14997                              <2> 	mov ds,ax
 14998                              <2> 	mov ax,[%4+2]
 14999                              <2> 	mov word [bp+4], ax
 15000                              <2> 	mov ax,[%4]
 15001                              <2> 	mov word [bp+6], ax
 15002                              <2> 	call proc_div32
 15003                              <2> 	mov ax,sp
 15004                              <2> 	mov bp,ax
 15005                              <2> 	mov ax,%5
 15006                              <2> 	mov ds,ax
 15007                              <2> 	mov word ax, [bp+8]
 15008                              <2> 	mov word [%6+2], ax
 15009                              <2> 	mov word ax, [bp+0x0A]
 15010                              <2> 	mov word [%6], ax
 15011                              <2> 	mov ax,%7
 15012                              <2> 	mov ds,ax
 15013                              <2> 	mov word ax,[bp+0x0C]
 15014                              <2> 	mov word [%8+2],ax
 15015                              <2> 	mov word ax,[bp+0x0E]
 15016                              <2> 	mov word [%8],ax
 15017                              <2> 	mov ax,%9
 15018                              <2> 	mov ds,ax
 15019                              <2> 	mov byte al,[bp+0x10]
 15020                              <2> 	mov byte [%10],al
 15021                              <2> 	stkclose 0x11
 15022                              <2> %endmacro
 15023                              <2> 	
 15024                              <2> %macro mul32 6
 15025                              <2> 	stkopen 0x0C
 15026                              <2> 	mov ax,%1
 15027                              <2> 	mov ds,ax
 15028                              <2> 	mov ax,[%2+2]
 15029                              <2> 	mov word [bp+0], ax
 15030                              <2> 	mov ax,[%2]
 15031                              <2> 	mov word [bp+2], ax
 15032                              <2> 	mov ax,%3
 15033                              <2> 	mov ds,ax
 15034                              <2> 	mov ax,[%4+2]
 15035                              <2> 	mov word [bp+4], ax
 15036                              <2> 	mov ax,[%4]
 15037                              <2> 	mov word [bp+6], ax
 15038                              <2> 	call proc_mul32
 15039                              <2> 	mov ax,sp
 15040                              <2> 	mov bp,ax
 15041                              <2> 	mov ax,%5
 15042                              <2> 	mov ds,ax
 15043                              <2> 	mov word ax, [bp+8]
 15044                              <2> 	mov word [%6+2], ax
 15045                              <2> 	mov word ax, [bp+0x0A]
 15046                              <2> 	mov word [%6], ax
 15047                              <2> 	stkclose 0x0C
 15048                              <2> %endmacro	
 15049                              <2> 	
 15050                              <2> %macro add32 6
 15051                              <2> 	stkopen 0x0C
 15052                              <2> 	mov ax,%1
 15053                              <2> 	mov ds,ax
 15054                              <2> 	mov ax,[%2+2]
 15055                              <2> 	mov word [bp+0], ax
 15056                              <2> 	mov ax,[%2]
 15057                              <2> 	mov word [bp+2], ax
 15058                              <2> 	mov ax,%3
 15059                              <2> 	mov ds,ax
 15060                              <2> 	mov ax,[%4+2]
 15061                              <2> 	mov word [bp+4], ax
 15062                              <2> 	mov ax,[%4]
 15063                              <2> 	mov word [bp+6], ax
 15064                              <2> 	call proc_add32
 15065                              <2> 	mov ax,sp
 15066                              <2> 	mov bp,ax
 15067                              <2> 	mov ax,%5
 15068                              <2> 	mov ds,ax
 15069                              <2> 	mov word ax, [bp+8]
 15070                              <2> 	mov word [%6+2], ax
 15071                              <2> 	mov word ax, [bp+0x0A]
 15072                              <2> 	mov word [%6], ax
 15073                              <2> 	stkclose 0x0C
 15074                              <2> %endmacro
 15075                              <2> 
 15076                              <2> %macro sub32 6
 15077                              <2> 	stkopen 0x0C
 15078                              <2> 	mov ax,%1
 15079                              <2> 	mov ds,ax
 15080                              <2> 	mov ax,[%2+2]
 15081                              <2> 	mov word [bp+0], ax
 15082                              <2> 	mov ax,[%2]
 15083                              <2> 	mov word [bp+2], ax
 15084                              <2> 	mov ax,%3
 15085                              <2> 	mov ds,ax
 15086                              <2> 	mov ax,[%4+2]
 15087                              <2> 	mov word [bp+4], ax
 15088                              <2> 	mov ax,[%4]
 15089                              <2> 	mov word [bp+6], ax
 15090                              <2> 	call proc_sub32
 15091                              <2> 	mov ax,sp
 15092                              <2> 	mov bp,ax
 15093                              <2> 	mov ax,%5
 15094                              <2> 	mov ds,ax
 15095                              <2> 	mov word ax, [bp+8]
 15096                              <2> 	mov word [%6+2], ax
 15097                              <2> 	mov word ax, [bp+0x0A]
 15098                              <2> 	mov word [%6], ax
 15099                              <2> 	stkclose 0x0C
 15100                              <2> %endmacro
 15101                              <2> 
 15102                              <2> %macro idiv32 10
 15103                              <2> 	stkopen 0x11
 15104                              <2> 	mov ax,%1
 15105                              <2> 	mov ds,ax
 15106                              <2> 	mov ax,[%2+2]
 15107                              <2> 	mov word [bp+0], ax
 15108                              <2> 	mov ax,[%2]
 15109                              <2> 	mov word [bp+2], ax
 15110                              <2> 	mov ax,%3
 15111                              <2> 	mov ds,ax
 15112                              <2> 	mov ax,[%4+2]
 15113                              <2> 	mov word [bp+4], ax
 15114                              <2> 	mov ax,[%4]
 15115                              <2> 	mov word [bp+6], ax
 15116                              <2> 	call proc_idiv32
 15117                              <2> 	mov ax,sp
 15118                              <2> 	mov bp,ax
 15119                              <2> 	mov ax,%5
 15120                              <2> 	mov ds,ax
 15121                              <2> 	mov word ax, [bp+8]
 15122                              <2> 	mov word [%6+2], ax
 15123                              <2> 	mov word ax, [bp+0x0A]
 15124                              <2> 	mov word [%6], ax
 15125                              <2> 	mov ax,%7
 15126                              <2> 	mov ds,ax
 15127                              <2> 	mov word ax,[bp+0x0C]
 15128                              <2> 	mov word [%8+2],ax
 15129                              <2> 	mov word ax,[bp+0x0E]
 15130                              <2> 	mov word [%8],ax
 15131                              <2> 	mov ax,%9
 15132                              <2> 	mov ds,ax
 15133                              <2> 	mov byte al,[bp+0x10]
 15134                              <2> 	mov byte [%10],al
 15135                              <2> 	stkclose 0x11
 15136                              <2> %endmacro
 15137                              <2> 
 15138                              <2> %macro imul32 6
 15139                              <2> 	stkopen 0x0C
 15140                              <2> 	mov ax,%1
 15141                              <2> 	mov ds,ax
 15142                              <2> 	mov ax,[%2+2]
 15143                              <2> 	mov word [bp+0], ax
 15144                              <2> 	mov ax,[%2]
 15145                              <2> 	mov word [bp+2], ax
 15146                              <2> 	mov ax,%3
 15147                              <2> 	mov ds,ax
 15148                              <2> 	mov ax,[%4+2]
 15149                              <2> 	mov word [bp+4], ax
 15150                              <2> 	mov ax,[%4]
 15151                              <2> 	mov word [bp+6], ax
 15152                              <2> 	call proc_imul32
 15153                              <2> 	mov ax,sp
 15154                              <2> 	mov bp,ax
 15155                              <2> 	mov ax,%5
 15156                              <2> 	mov ds,ax
 15157                              <2> 	mov word ax, [bp+8]
 15158                              <2> 	mov word [%6+2], ax
 15159                              <2> 	mov word ax, [bp+0x0A]
 15160                              <2> 	mov word [%6], ax
 15161                              <2> 	stkclose 0x0C
 15162                              <2> %endmacro
 15163                              <2> 	
 15164                              <2> %macro cmp32 3
 15165                              <2> 	cmp32 cs, %1, cs, %2, %3
 15166                              <2> %endmacro	
 15167                              <2> 	
 15168                              <2> %macro cmp32 5
 15169                              <2> 	stkopen 9
 15170                              <2> 	mov ax,%1
 15171                              <2> 	mov ds,ax
 15172                              <2> 	mov word ax,[%2+2]
 15173                              <2> 	mov word [bp+0], ax
 15174                              <2> 	mov word ax,[%2]
 15175                              <2> 	mov word [bp+2], ax	
 15176                              <2> 	mov ax,%3
 15177                              <2> 	mov ds,ax
 15178                              <2> 	mov word ax,[%4+2]
 15179                              <2> 	mov word [bp+4], ax
 15180                              <2> 	mov word ax,[%4]
 15181                              <2> 	mov word [bp+6], ax	
 15182                              <2> 	call proc_cmp32
 15183                              <2> 	mov ax,sp
 15184                              <2> 	mov bp,ax
 15185                              <2> 	mov al,[bp+8]
 15186                              <2> 	mov byte %5,al
 15187                              <2> 	stkclose 9
 15188                              <2> %endmacro
 15189                              <2> 	
 15190                              <2> %macro shl32 2
 15191                              <2> 	shl32 cs, %1, %2
 15192                              <2> %endmacro	
 15193                              <2> 	
 15194                              <2> %macro shl32 3
 15195                              <2> 	stkopen 5
 15196                              <2> 	mov ax,%1
 15197                              <2> 	mov ds,ax
 15198                              <2> 	mov word ax,[%2+2]
 15199                              <2> 	mov word [bp+0], ax
 15200                              <2> 	mov word ax,[%2]
 15201                              <2> 	mov word [bp+2], ax
 15202                              <2> 	mov byte al, %3
 15203                              <2> 	mov byte [bp+4], al 
 15204                              <2> 	call proc_shl32
 15205                              <2> 	mov ax,sp
 15206                              <2> 	mov bp,ax
 15207                              <2> 	mov ax,%1
 15208                              <2> 	mov ds,ax
 15209                              <2> 	mov ax,[bp+0]
 15210                              <2> 	mov word [%2+2],ax
 15211                              <2> 	mov ax,[bp+2]
 15212                              <2> 	mov word [%2],ax
 15213                              <2> 	stkclose 5
 15214                              <2> %endmacro
 15215                              <2> 
 15216                              <2> 
 15217                              <2> %macro shr32 2
 15218                              <2> 	shr32 cs, %1, %2
 15219                              <2> %endmacro	
 15220                              <2> 	
 15221                              <2> %macro shr32 3
 15222                              <2> 	stkopen 5
 15223                              <2> 	mov ax,%1
 15224                              <2> 	mov ds,ax
 15225                              <2> 	mov word ax,[%2+2]
 15226                              <2> 	mov word [bp+0], ax
 15227                              <2> 	mov word ax,[%2]
 15228                              <2> 	mov word [bp+2], ax
 15229                              <2> 	mov byte al, %3
 15230                              <2> 	mov byte [bp+4], al 
 15231                              <2> 	call proc_shr32
 15232                              <2> 	mov ax,sp
 15233                              <2> 	mov bp,ax
 15234                              <2> 	mov ax,%1
 15235                              <2> 	mov ds,ax
 15236                              <2> 	mov ax,[bp+0]
 15237                              <2> 	mov word [%2+2],ax
 15238                              <2> 	mov ax,[bp+2]
 15239                              <2> 	mov word [%2],ax
 15240                              <2> 	stkclose 5
 15241                              <2> %endmacro
 15242                              <2> 
 15243                              <2> %macro inc16 2
 15244                              <2> 	mov ax,%1
 15245                              <2> 	mov ds,ax
 15246                              <2> 	inc word [%2]
 15247                              <2> %endmacro
 15248                              <2> 
 15249                              <2> %macro dec16 2
 15250                              <2> 	mov ax,%1
 15251                              <2> 	mov ds,ax
 15252                              <2> 	dec word [%2]
 15253                              <2> %endmacro
 15254                              <2> 
 15255                              <2> %macro add16 4	
 15256                              <2> 	mov ax,%3
 15257                              <2> 	mov ds,ax
 15258                              <2> 	mov bx,[%4]	
 15259                              <2> 	mov ax,%1
 15260                              <2> 	mov ds,ax	
 15261                              <2> 	add [%2],bx
 15262                              <2> %endmacro
 15263                              <2> 
 15264                              <2> %macro sub16 4
 15265                              <2> 	mov ax,%3
 15266                              <2> 	mov ds,ax
 15267                              <2> 	mov bx,[%4]
 15268                              <2> 	mov ax,%1
 15269                              <2> 	mov ds,ax
 15270                              <2> 	sub [%2],bx
 15271                              <2> %endmacro
 15272                              <2> 
 15273                              <2> %macro mul16 4
 15274                              <2> 	mov ax,%1
 15275                              <2> 	mov ds,ax
 15276                              <2> 	mov bx,[%2]
 15277                              <2> 	mov ax,%3
 15278                              <2> 	mov ds,ax
 15279                              <2> 	mov cx,[%4]
 15280                              <2> 	
 15281                              <2> 	mov ax,bx
 15282                              <2> 	imul cx
 15283                              <2> 	
 15284                              <2> 	mov dx,%1
 15285                              <2> 	mov ds,dx
 15286                              <2> 	mov [%2],ax
 15287                              <2> %endmacro
 15288                              <2> 
 15289                              <2> %macro div16 4
 15290                              <2> 	mov ax,%1
 15291                              <2> 	mov ds,ax
 15292                              <2> 	mov bx,[%2]
 15293                              <2> 	mov ax,%3
 15294                              <2> 	mov ds,ax
 15295                              <2> 	mov cx,[%4]
 15296                              <2> 	
 15297                              <2> 	xor dx,dx
 15298                              <2> 	mov ax,bx
 15299                              <2> 	idiv cx
 15300                              <2> 	
 15301                              <2> 	mov dx,%1
 15302                              <2> 	mov ds,dx
 15303                              <2> 	mov [%2],ax
 15304                              <2> %endmacro
 15305                              <2> 
 15306                              <2> 
 15307                              <2> %macro mod16 4
 15308                              <2> 	mov ax,%1
 15309                              <2> 	mov ds,ax
 15310                              <2> 	mov bx,[%2]
 15311                              <2> 	mov ax,%3
 15312                              <2> 	mov ds,ax
 15313                              <2> 	mov cx,[%4]
 15314                              <2> 	
 15315                              <2> 	xor dx,dx
 15316                              <2> 	mov ax,bx
 15317                              <2> 	idiv cx
 15318                              <2> 	
 15319                              <2> 	mov bx,%1
 15320                              <2> 	mov ds,bx
 15321                              <2> 	mov [%2],dx
 15322                              <2> %endmacro
 15323                              <2> 
 15324                              <2> %macro cmp16 5
 15325                              <2> 	mov ax,%1
 15326                              <2> 	mov ds,ax
 15327                              <2> 	mov bx,[%2]
 15328                              <2> 	mov ax,%3
 15329                              <2> 	mov ds,ax
 15330                              <2> 	mov	cx,[%4]
 15331                              <2> 	
 15332                              <2> 	cmp bx,cx
 15333                              <2> 	jg %%above
 15334                              <2> 	jl %%below
 15335                              <2> 		mov byte %5, 0
 15336                              <2> 		jmp %%endcmp
 15337                              <2> 	%%above:
 15338                              <2> 		mov byte %5, 1
 15339                              <2> 		jmp %%endcmp
 15340                              <2> 	%%below:
 15341                              <2> 		mov byte %5, -1
 15342                              <2> 	%%endcmp:
 15343                              <2> %endmacro
 15344                              <2> 
 15345                              <2> %macro chgsig 2
 15346                              <2> 	mov ax,%1
 15347                              <2> 	mov ds,ax
 15348                              <2> 	mov ax,[%2]
 15349                              <2> 	mov bx,0xFFFF
 15350                              <2> 	sub bx,ax
 15351                              <2> 	inc bx
 15352                              <2> 	mov [%2],bx
 15353                              <2> %endmacro
 15354                              <2> 	
 15355                              <2> %endif
 15356                              <1> 	%include "lib/graph.mac"
 15357                              <2> 
 15358                              <2> %ifndef GRAPH_MAC
 15359                              <2> 	%define GRAPH_MAC
 15360                              <2> 
 15361                              <2> 	%include "lib/graph.asm"
 15362                              <2> 			
 15363                              <2> %macro drawstring 4
 15364                              <2> 	drawstring cs, %1, cs, %2, cs, %3, cs, %4
 15365                              <2> %endmacro
 15366                              <2> 			
 15367                              <2> %macro drawlineh 4
 15368                              <2> 	drawlineh cs, %1, cs, %2, cs, %3, cs, %4
 15369                              <2> %endmacro			
 15370                              <2> 
 15371                              <2> %macro drawlinev 4
 15372                              <2> 	drawlinev cs, %1, cs, %2, cs, %3, cs, %4
 15373                              <2> %endmacro			
 15374                              <2> 			
 15375                              <2> %macro drawrect 5
 15376                              <2> 	drawrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 15377                              <2> %endmacro
 15378                              <2> 
 15379                              <2> %macro fillrect 5
 15380                              <2> 	fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 15381                              <2> %endmacro	
 15382                              <2> 
 15383                              <2> %macro drawarc 5
 15384                              <2> 	drawarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 15385                              <2> %endmacro
 15386                              <2> 
 15387                              <2> %macro fillarc 5
 15388                              <2> 	fillarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 15389                              <2> %endmacro			
 15390                              <2> 
 15391                              <2> %macro repaint 1
 15392                              <2> 	repaint cs, %1
 15393                              <2> %endmacro
 15394                              <2> 
 15395                              <2> %macro drawstring 8	
 15396                              <2> 	stkopen 0x07	
 15397                              <2> 	mov word [bp+0],%1
 15398                              <2> 	mov word [bp+2],%2	
 15399                              <2> 	mov ax,%3
 15400                              <2> 	mov ds,ax
 15401                              <2> 	mov al,[%4]
 15402                              <2> 	mov [bp+4],al	
 15403                              <2> 	mov ax,%5
 15404                              <2> 	mov ds,ax
 15405                              <2> 	mov al,[%6]
 15406                              <2> 	mov [bp+6],al
 15407                              <2> 	mov ax,%7	
 15408                              <2> 	mov ds,ax
 15409                              <2> 	mov al,[%8]
 15410                              <2> 	mov [bp+8],al			
 15411                              <2> 	call proc_drawstring
 15412                              <2> 	stkclose 0x07
 15413                              <2> %endmacro
 15414                              <2> 
 15415                              <2> %macro drawlineh 8
 15416                              <2> 	stkopen 0x07
 15417                              <2> 	mov ax,%1
 15418                              <2> 	mov ds,ax
 15419                              <2> 	mov ax,[%2]
 15420                              <2> 	mov [bp+0],ax	
 15421                              <2> 	mov ax,%3
 15422                              <2> 	mov ds,ax
 15423                              <2> 	mov ax,[%4]
 15424                              <2> 	mov [bp+2],ax	
 15425                              <2> 	mov ax,%5
 15426                              <2> 	mov ds,ax
 15427                              <2> 	mov ax,[%6]
 15428                              <2> 	mov [bp+4],ax		
 15429                              <2> 	mov ax,%7
 15430                              <2> 	mov ds,ax
 15431                              <2> 	mov al,[%8]
 15432                              <2> 	mov [bp+6],al
 15433                              <2> 	call proc_drawlineh	
 15434                              <2> 	stkclose 0x07
 15435                              <2> %endmacro
 15436                              <2> 
 15437                              <2> %macro drawlinev 8
 15438                              <2> 	stkopen 0x07
 15439                              <2> 	mov ax,%1
 15440                              <2> 	mov ds,ax
 15441                              <2> 	mov ax,[%2]
 15442                              <2> 	mov [bp+0],ax	
 15443                              <2> 	mov ax,%3
 15444                              <2> 	mov ds,ax
 15445                              <2> 	mov ax,[%4]
 15446                              <2> 	mov [bp+2],ax	
 15447                              <2> 	mov ax,%5
 15448                              <2> 	mov ds,ax
 15449                              <2> 	mov ax,[%6]
 15450                              <2> 	mov [bp+4],ax		
 15451                              <2> 	mov ax,%7
 15452                              <2> 	mov ds,ax
 15453                              <2> 	mov al,[%8]
 15454                              <2> 	mov [bp+6],al
 15455                              <2> 	call proc_drawlinev	
 15456                              <2> 	stkclose 0x07
 15457                              <2> %endmacro
 15458                              <2> 
 15459                              <2> %macro drawrect 10
 15460                              <2> 	stkopen 0x09	
 15461                              <2> 	mov ax,%1
 15462                              <2> 	mov ds,ax
 15463                              <2> 	mov ax,[%2]
 15464                              <2> 	mov [bp+0],ax	
 15465                              <2> 	mov ax,%3
 15466                              <2> 	mov ds,ax
 15467                              <2> 	mov ax,[%4]
 15468                              <2> 	mov [bp+2],ax	
 15469                              <2> 	mov ax,%5
 15470                              <2> 	mov ds,ax
 15471                              <2> 	mov ax,[%6]
 15472                              <2> 	mov [bp+4],ax	
 15473                              <2> 	mov ax,%7
 15474                              <2> 	mov ds,ax
 15475                              <2> 	mov ax,[%8]
 15476                              <2> 	mov [bp+6],ax	
 15477                              <2> 	mov ax,%9
 15478                              <2> 	mov ds,ax
 15479                              <2> 	mov al,[%10]
 15480                              <2> 	mov [bp+8],al	
 15481                              <2> 	call proc_drawrect	
 15482                              <2> 	stkclose 0x09
 15483                              <2> %endmacro
 15484                              <2> 
 15485                              <2> %macro fillrect 10
 15486                              <2> 	stkopen 0x09	
 15487                              <2> 	mov ax,%1
 15488                              <2> 	mov ds,ax
 15489                              <2> 	mov ax,[%2]
 15490                              <2> 	mov [bp+0],ax	
 15491                              <2> 	mov ax,%3
 15492                              <2> 	mov ds,ax
 15493                              <2> 	mov ax,[%4]
 15494                              <2> 	mov [bp+2],ax	
 15495                              <2> 	mov ax,%5
 15496                              <2> 	mov ds,ax
 15497                              <2> 	mov ax,[%6]
 15498                              <2> 	mov [bp+4],ax	
 15499                              <2> 	mov ax,%7
 15500                              <2> 	mov ds,ax
 15501                              <2> 	mov ax,[%8]
 15502                              <2> 	mov [bp+6],ax	
 15503                              <2> 	mov ax,%9
 15504                              <2> 	mov ds,ax
 15505                              <2> 	mov al,[%10]
 15506                              <2> 	mov [bp+8],al	
 15507                              <2> 	call proc_fillrect	
 15508                              <2> 	stkclose 0x09
 15509                              <2> %endmacro
 15510                              <2> 
 15511                              <2> %macro drawarc 10
 15512                              <2> 	drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 0
 15513                              <2> %endmacro
 15514                              <2> 
 15515                              <2> %macro fillarc 10
 15516                              <2> 	drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 1
 15517                              <2> %endmacro
 15518                              <2> 		
 15519                              <2> %macro drawarc 11
 15520                              <2> 	stkopen 0x0A
 15521                              <2> 	mov ax,%1
 15522                              <2> 	mov ds,ax
 15523                              <2> 	mov ax,[%2]
 15524                              <2> 	mov [bp+0],ax	
 15525                              <2> 	mov ax,%3
 15526                              <2> 	mov ds,ax
 15527                              <2> 	mov ax,[%4]
 15528                              <2> 	mov [bp+2],ax	
 15529                              <2> 	mov ax,%5
 15530                              <2> 	mov ds,ax
 15531                              <2> 	mov ax,[%6]
 15532                              <2> 	mov [bp+4],ax	
 15533                              <2> 	mov ax,%7
 15534                              <2> 	mov ds,ax
 15535                              <2> 	mov ax,[%8]
 15536                              <2> 	mov [bp+6],ax	
 15537                              <2> 	mov ax,%9
 15538                              <2> 	mov ds,ax
 15539                              <2> 	mov al,[%10]
 15540                              <2> 	mov byte [bp+8],al		
 15541                              <2> 	mov byte [bp+9],%11	
 15542                              <2> 	call proc_drawarc	
 15543                              <2> 	stkclose 0x0A
 15544                              <2> %endmacro
 15545                              <2> 		
 15546                              <2> 		
 15547                              <2> %endif
 15548                              <1> 
 15549                              <1> 	%include "src/lib/constants.asm"
 15550                              <2> %ifndef CONSTANTS_ASM
 15551                              <2> 	%define CONSTANTS_ASM
 15552                              <2> 					
 15553                              <2> section .data
 15554                              <2> 	__FL_ZERO: dd 0
 15555                              <2> 	__FL_ONE: dd 0x3F800000
 15556                              <2> 	__FL_NEG_ONE: dd 0xBF800000
 15557                              <2> 
 15558                              <2> 	__ZERO: dw 0
 15559                              <2> 	__ONE: dw 1
 15560                              <2> 		
 15561                              <2> 	__ball_color: db 09h
 15562                              <2> 	__ball_bordercolor: db 07h
 15563                              <2> 	
 15564                              <2> 	__tray_color: db 00h
 15565                              <2> 	__tray_bordercolor: db 07h	
 15566                              <2> 	
 15567                              <2> 	__square_bordercolor: db 07h
 15568                              <2> 	__square_ycolor: db 0x01, 0x02, 0x04, 0x09
 15569                              <2> 	
 15570                              <2> 	__racket_color: db 09h
 15571                              <2> 	__racket_bordercolor: db 07h	
 15572                              <2> 	
 15573                              <2> 	__message_default_color: db 07h	
 15574                              <2> 	__message_win_color: db 09h	
 15575                              <2> 	__message_lose_color: db 04h	
 15576                              <2> 								
 15577                              <2> %endif
 15578                              <1> 	
 15579                              <1> section .data	
 15580 00001F94 0000                <1> 	__show_init_message: dw 0
 15581 00001F96 0000                <1> 	__show_win_message: dw 0
 15582 00001F98 0000                <1> 	__show_lose_message: dw 0
 15583 00001F9A 0000                <1> 	__show_pause_message: dw 0
 15584                              <1> 
 15585                              <1> %macro gui_paint 0
 15586                              <1> 	gui_paintbg
 15587                              <1> 	gui_painttray
 15588                              <1> 	gui_paintball
 15589                              <1> 	gui_paintracket
 15590                              <1> 	repaint
 15591                              <1> 	
 15592                              <1> 	cmp16 __show_init_message, __ZERO, cl
 15593                              <1> 	cmp cl,0
 15594                              <1> 	je %%init_message_painted
 15595                              <1> 		gui_show_message 'Pressione alguma tecla..', 8, 13, __message_default_color		
 15596                              <1> 	%%init_message_painted:
 15597                              <1> 		
 15598                              <1> 	cmp16 __show_pause_message, __ZERO, cl
 15599                              <1> 	cmp cl,0
 15600                              <1> 	je %%pause_message_painted		
 15601                              <1> 		gui_show_message 'Pausa...', 16, 14, __message_default_color
 15602                              <1> 	%%pause_message_painted:	
 15603                              <1> 		
 15604                              <1> 	cmp16 __show_win_message, __ZERO, cl
 15605                              <1> 	cmp cl,0
 15606                              <1> 	je %%win_message_painted
 15607                              <1> 		gui_show_message 'Ganhou...', 12, 13, __message_win_color
 15608                              <1> 		gui_show_message 'Parabens !!!', 12, 14, __message_default_color
 15609                              <1> 	%%win_message_painted:
 15610                              <1> 						
 15611                              <1> 	cmp16 __show_lose_message, __ZERO, cl
 15612                              <1> 	cmp cl,0
 15613                              <1> 	je %%lose_message_painted	
 15614                              <1> 		gui_show_message 'Perdeu...', 11, 13, __message_lose_color
 15615                              <1> 		gui_show_message 'Tente novamente !', 11, 14, __message_default_color
 15616                              <1> 	%%lose_message_painted:					
 15617                              <1> %endmacro
 15618                              <1> 
 15619                              <1> %macro gui_paintbg 0
 15620                              <1> 	mov ax, 0
 15621                              <1> 	mov bx, 0
 15622                              <1> 	mov cx, 320
 15623                              <1> 	mov dx, 200
 15624                              <1> 	__fillrect ax, bx, cx, dx, 0 	
 15625                              <1> %endmacro
 15626                              <1> 
 15627                              <1> %macro gui_show_message 4
 15628                              <1> 	section .data
 15629                              <1> 	%%str: db %1,0
 15630                              <1> section .text
 15631                              <1> 	mov ax,cs
 15632                              <1> 	mov ds,ax
 15633                              <1> 	mov al,[%4]
 15634                              <1> 	__drawstring %%str, %2, %3, al
 15635                              <1> %endmacro
 15636                              <1> 	
 15637                              <1> %macro gui_painttray 0
 15638                              <1> section .data
 15639                              <1> 	%%cindex: dw 0
 15640                              <1> 	%%def_cindex: dw 0
 15641                              <1> section .text
 15642                              <1> 	mov16 %%cindex, %%def_cindex
 15643                              <1> 	
 15644                              <1> 	fillrect __tray_x1, __tray_y1, __tray_x2, __tray_y2, __tray_color
 15645                              <1> 	drawlineh __tray_x1, __tray_y1, __tray_x2, __tray_bordercolor			
 15646                              <1> 	drawlinev __tray_x1, __tray_y1, __tray_y2, __tray_bordercolor			
 15647                              <1> 	drawlinev __tray_x2, __tray_y1, __tray_y2, __tray_bordercolor			
 15648                              <1> 	
 15649                              <1> 	mov16 __square_y, __tray_y1
 15650                              <1> 	mov16 __square_y2, __square_y	
 15651                              <1> 	add16 __square_y2, __square_h		
 15652                              <1> 	
 15653                              <1> 	mov cl,0
 15654                              <1> 	%%l1:
 15655                              <1> 		push cx
 15656                              <1> 		int16toreg __square_ycount, dx
 15657                              <1> 		pop cx
 15658                              <1> 		cmp cl,dl
 15659                              <1> 		jae %%l2
 15660                              <1> 		push cx
 15661                              <1> 		
 15662                              <1> 		mov16 __square_x, __tray_x1		
 15663                              <1> 		mov16 __square_x2, __square_x
 15664                              <1> 		add16 __square_x2, __square_w
 15665                              <1> 		
 15666                              <1> 		mov cl,0 
 15667                              <1> 		%%l1.1:
 15668                              <1> 			push cx
 15669                              <1> 			int16toreg __square_xcount, dx
 15670                              <1> 			pop cx
 15671                              <1> 			cmp cl,dl
 15672                              <1> 			jae %%l1.2									
 15673                              <1> 			push cx
 15674                              <1> 						
 15675                              <1> 			int16toreg __square_xcount, ax
 15676                              <1> 			pop cx
 15677                              <1> 			pop bx
 15678                              <1> 			push bx
 15679                              <1> 			push cx
 15680                              <1> 						
 15681                              <1> 			mul bx
 15682                              <1> 			add ax,cx
 15683                              <1> 												
 15684                              <1> 			vlodsb __squaremap, ax, cl
 15685                              <1> 			cmp cl,0
 15686                              <1> 			jz %%painted
 15687                              <1> 				int16toreg %%cindex, bx
 15688                              <1> 				fillrect __square_x, __square_y, __square_x2, __square_y2, __square_ycolor+bx
 15689                              <1> 				drawrect __square_x, __square_y, __square_x2, __square_y2, __square_bordercolor
 15690                              <1> 			%%painted:													
 15691                              <1> 
 15692                              <1> 			add16 __square_x, __square_w
 15693                              <1> 			add16 __square_x2, __square_w				
 15694                              <1> 		
 15695                              <1> 			pop cx
 15696                              <1> 			inc cl
 15697                              <1> 			jmp %%l1.1
 15698                              <1> 		%%l1.2:	
 15699                              <1> 		
 15700                              <1> 		add16 __square_y, __square_h		
 15701                              <1> 		add16 __square_y2, __square_h				
 15702                              <1> 		inc16 %%cindex		
 15703                              <1> 													
 15704                              <1> 		pop cx
 15705                              <1> 		inc cl
 15706                              <1> 		jmp %%l1	
 15707                              <1> 	%%l2:
 15708                              <1> %endmacro		
 15709                              <1> 
 15710                              <1> %macro gui_paintball 0
 15711                              <1> section .data
 15712                              <1> 	%%x: dw 0
 15713                              <1> 	%%y: dw 0
 15714                              <1> 	%%r: dw 0
 15715                              <1> section .text
 15716                              <1> 	fltoint16 __ball_x, %%x
 15717                              <1> 	fltoint16 __ball_y, %%y
 15718                              <1> 	fltoint16 __ball_radial, %%r
 15719                              <1> 	fillarc %%x, %%y, %%r, %%r, __ball_color
 15720                              <1> 	drawarc %%x, %%y, %%r, %%r, __ball_bordercolor
 15721                              <1> %endmacro
 15722                              <1> 
 15723                              <1> %macro gui_paintracket 0
 15724                              <1> section .data
 15725                              <1> 	%%x2: dw 0
 15726                              <1> 	%%y2: dw 0
 15727                              <1> section .text
 15728                              <1> 	mov16 %%x2, __racket_x
 15729                              <1> 	mov16 %%y2, __racket_y
 15730                              <1> 	add16 %%x2, __racket_w
 15731                              <1> 	add16 %%y2, __racket_h
 15732                              <1> 	fillrect __racket_x, __racket_y, %%x2, %%y2, __racket_color
 15733                              <1> 	drawrect __racket_x, __racket_y, %%x2, %%y2, __racket_bordercolor
 15734                              <1> %endmacro				
 15735                              <1> 	
 15736                              <1> %endif
 15737                                  
 15738                                  		
 15739                                  section .data
 15740 00001F9C 0000                    	i: dw 0
 15741 00001F9E 0A00                    	n: dw 10
 15742 00001FA0 0000                    	aux: dw 0
 15743 00001FA2 0000                    	reinited: dw 0
 15744 00001FA4 88130000                	sleep: dd 5000	
 15745                                  section .text
 15746                                  	global _start
 15747                                  	
 15748                                  _start:	
 15749                                  	initgraph
 15750 00000000 E8(0000)            <1>  call proc_initgraph
 15751                                  	
 15752                                  	init:
 15753                                  		cmp16 reinited, __ONE, cl
 15754                              <1>  cmp16 cs, %1, cs, %2, %3
 15755 00000003 8CC8                <2>  mov ax,%1
 15756 00000005 8ED8                <2>  mov ds,ax
 15757 00000007 8B1E[A21F]          <2>  mov bx,[%2]
 15758 0000000B 8CC8                <2>  mov ax,%3
 15759 0000000D 8ED8                <2>  mov ds,ax
 15760 0000000F 8B0E[B019]          <2>  mov cx,[%4]
 15761                              <2> 
 15762 00000013 39CB                <2>  cmp bx,cx
 15763 00000015 7F06                <2>  jg %%above
 15764 00000017 7C08                <2>  jl %%below
 15765 00000019 B100                <2>  mov byte %5, 0
 15766 0000001B EB06                <2>  jmp %%endcmp
 15767                              <2>  %%above:
 15768 0000001D B101                <2>  mov byte %5, 1
 15769 0000001F EB02                <2>  jmp %%endcmp
 15770                              <2>  %%below:
 15771 00000021 B1FF                <2>  mov byte %5, -1
 15772                              <2>  %%endcmp:
 15773 00000023 51                      		push cx
 15774 00000024 80F900                  		cmp cl,0
 15775 00000027 7410                    		jz initandpaint
 15776                                  			game_show_init_message
 15777                              <1>  mov16 __show_init_message, __ONE
 15778                              <2>  mov16 cs, %1, cs, %2
 15779 00000029 8CC8                <3>  mov ax,%3
 15780 0000002B 8ED8                <3>  mov ds,ax
 15781 0000002D 8B1E[B019]          <3>  mov bx,[%4]
 15782 00000031 8CC8                <3>  mov ax,%1
 15783 00000033 8ED8                <3>  mov ds,ax
 15784 00000035 891E[941F]          <3>  mov [%2],bx
 15785                                  			
 15786                                  		initandpaint:
 15787                                  			game_initialize
 15788                              <1>  tray_initialize
 15789                              <2>  mov16 __square_count, __SQUARE_COUNT
 15790                              <3>  mov16 cs, %1, cs, %2
 15791 00000039 8CC8                <4>  mov ax,%3
 15792 0000003B 8ED8                <4>  mov ds,ax
 15793 0000003D 8B1E[C019]          <4>  mov bx,[%4]
 15794 00000041 8CC8                <4>  mov ax,%1
 15795 00000043 8ED8                <4>  mov ds,ax
 15796 00000045 891E[2C1A]          <4>  mov [%2],bx
 15797                              <2>  mov16 __square_xcount, __SQUARE_XCOUNT
 15798                              <3>  mov16 cs, %1, cs, %2
 15799 00000049 8CC8                <4>  mov ax,%3
 15800 0000004B 8ED8                <4>  mov ds,ax
 15801 0000004D 8B1E[C219]          <4>  mov bx,[%4]
 15802 00000051 8CC8                <4>  mov ax,%1
 15803 00000053 8ED8                <4>  mov ds,ax
 15804 00000055 891E[2E1A]          <4>  mov [%2],bx
 15805                              <2>  mov16 __square_ycount, __SQUARE_YCOUNT
 15806                              <3>  mov16 cs, %1, cs, %2
 15807 00000059 8CC8                <4>  mov ax,%3
 15808 0000005B 8ED8                <4>  mov ds,ax
 15809 0000005D 8B1E[C419]          <4>  mov bx,[%4]
 15810 00000061 8CC8                <4>  mov ax,%1
 15811 00000063 8ED8                <4>  mov ds,ax
 15812 00000065 891E[301A]          <4>  mov [%2],bx
 15813                              <2> 
 15814 00000069 8CC8                <2>  mov ax,cs
 15815 0000006B 8ED8                <2>  mov ds,ax
 15816 0000006D 8EC0                <2>  mov es,ax
 15817 0000006F BE[C819]            <2>  mov si, __SQUAREMAP
 15818 00000072 BF[F019]            <2>  mov di, __squaremap
 15819                              <2> 
 15820 00000075 8B0E[2C1A]          <2>  mov cx,[__square_count]
 15821                              <2>  %%l1:
 15822 00000079 83F900              <2>  cmp cx,0
 15823 0000007C 7405                <2>  jz %%l2
 15824                              <2> 
 15825 0000007E AC                  <2>  lodsb
 15826 0000007F AA                  <2>  stosb
 15827                              <2> 
 15828 00000080 49                  <2>  dec cx
 15829 00000081 EBF6                <2>  jmp %%l1
 15830                              <2>  %%l2:
 15831                              <2> 
 15832                              <2>  sub16 __square_count, __SQUARE_COUNT_DEC
 15833                              <3>  sub16 cs, %1, cs, %2
 15834 00000083 8CC8                <4>  mov ax,%3
 15835 00000085 8ED8                <4>  mov ds,ax
 15836 00000087 8B1E[C619]          <4>  mov bx,[%4]
 15837 0000008B 8CC8                <4>  mov ax,%1
 15838 0000008D 8ED8                <4>  mov ds,ax
 15839 0000008F 291E[2C1A]          <4>  sub [%2],bx
 15840                              <1>  ball_initialize
 15841                              <2> section .data
 15842 00001FA8 00000000            <2>  %%tray_x1: dd 0
 15843 00001FAC 00000000            <2>  %%tray_y1: dd 0
 15844                              <2> section .text
 15845                              <2>  int16tofl __tray_x1, %%tray_x1
 15846                              <3>  int16tofl cs, %1, cs, %2
 15847                              <4>  stkopen 0x06
 15848 00000093 83EC06              <5>  sub word sp, %1
 15849 00000096 54                  <5>  push sp
 15850 00000097 5D                  <5>  pop bp
 15851 00000098 8CC8                <4>  mov ax,%1
 15852 0000009A 8ED8                <4>  mov ds,ax
 15853 0000009C A1[181A]            <4>  mov ax,[%2]
 15854 0000009F 894600              <4>  mov [bp+0],ax
 15855 000000A2 E8(4506)            <4>  call proc_int16tofl
 15856 000000A5 89E0                <4>  mov ax,sp
 15857 000000A7 89C5                <4>  mov bp,ax
 15858 000000A9 8CC8                <4>  mov ax,%3
 15859 000000AB 8ED8                <4>  mov ds,ax
 15860 000000AD 8B4602              <4>  mov ax,[bp+2]
 15861 000000B0 A3[AA1F]            <4>  mov [%4+2],ax
 15862 000000B3 8B4604              <4>  mov ax,[bp+4]
 15863 000000B6 A3[A81F]            <4>  mov [%4],ax
 15864                              <4>  stkclose 0x06
 15865 000000B9 83C406              <5>  add word sp, %1
 15866                              <2>  int16tofl __tray_y1, %%tray_y1
 15867                              <3>  int16tofl cs, %1, cs, %2
 15868                              <4>  stkopen 0x06
 15869 000000BC 83EC06              <5>  sub word sp, %1
 15870 000000BF 54                  <5>  push sp
 15871 000000C0 5D                  <5>  pop bp
 15872 000000C1 8CC8                <4>  mov ax,%1
 15873 000000C3 8ED8                <4>  mov ds,ax
 15874 000000C5 A1[1A1A]            <4>  mov ax,[%2]
 15875 000000C8 894600              <4>  mov [bp+0],ax
 15876 000000CB E8(4506)            <4>  call proc_int16tofl
 15877 000000CE 89E0                <4>  mov ax,sp
 15878 000000D0 89C5                <4>  mov bp,ax
 15879 000000D2 8CC8                <4>  mov ax,%3
 15880 000000D4 8ED8                <4>  mov ds,ax
 15881 000000D6 8B4602              <4>  mov ax,[bp+2]
 15882 000000D9 A3[AE1F]            <4>  mov [%4+2],ax
 15883 000000DC 8B4604              <4>  mov ax,[bp+4]
 15884 000000DF A3[AC1F]            <4>  mov [%4],ax
 15885                              <4>  stkclose 0x06
 15886 000000E2 83C406              <5>  add word sp, %1
 15887                              <2> 
 15888                              <2>  mov32 __ball_x, __BALL_X
 15889                              <3>  mov32 cs, %1, cs, %2
 15890 000000E5 8CC8                <4>  mov ax,%3
 15891 000000E7 8ED8                <4>  mov ds,ax
 15892 000000E9 8B0E[341A]          <4>  mov cx,[%4+2]
 15893 000000ED 8B16[321A]          <4>  mov dx,[%4]
 15894 000000F1 8CC8                <4>  mov ax,%1
 15895 000000F3 8ED8                <4>  mov ds,ax
 15896 000000F5 890E[481A]          <4>  mov [%2+2],cx
 15897 000000F9 8916[461A]          <4>  mov [%2],dx
 15898                              <2>  mov32 __ball_y, __BALL_Y
 15899                              <3>  mov32 cs, %1, cs, %2
 15900 000000FD 8CC8                <4>  mov ax,%3
 15901 000000FF 8ED8                <4>  mov ds,ax
 15902 00000101 8B0E[381A]          <4>  mov cx,[%4+2]
 15903 00000105 8B16[361A]          <4>  mov dx,[%4]
 15904 00000109 8CC8                <4>  mov ax,%1
 15905 0000010B 8ED8                <4>  mov ds,ax
 15906 0000010D 890E[4C1A]          <4>  mov [%2+2],cx
 15907 00000111 8916[4A1A]          <4>  mov [%2],dx
 15908                              <2>  fladd __ball_x, %%tray_x1, __ball_x
 15909                              <3>  fladd cs, %1, cs, %2, cs, %3
 15910                              <4>  fladdorsub %1, %2, %3, %4, %5, %6, 0
 15911                              <5>  stkopen 0x0E
 15912 00000115 83EC0E              <6>  sub word sp, %1
 15913 00000118 54                  <6>  push sp
 15914 00000119 5D                  <6>  pop bp
 15915 0000011A 8CC8                <5>  mov ax,%1
 15916 0000011C 8ED8                <5>  mov ds,ax
 15917 0000011E A1[481A]            <5>  mov ax,[%2+2]
 15918 00000121 894600              <5>  mov [bp+0],ax
 15919 00000124 A1[461A]            <5>  mov ax,[%2]
 15920 00000127 894602              <5>  mov [bp+2],ax
 15921 0000012A 8CC8                <5>  mov ax,%3
 15922 0000012C 8ED8                <5>  mov ds,ax
 15923 0000012E A1[AA1F]            <5>  mov ax,[%4+2]
 15924 00000131 894604              <5>  mov [bp+4],ax
 15925 00000134 A1[A81F]            <5>  mov ax,[%4]
 15926 00000137 894606              <5>  mov [bp+6],ax
 15927 0000013A C7460C0000          <5>  mov word [bp+0x0C], %7
 15928 0000013F E8(510C)            <5>  call proc_fladdorsub
 15929 00000142 89E0                <5>  mov ax,sp
 15930 00000144 89C5                <5>  mov bp,ax
 15931 00000146 8CC8                <5>  mov ax,%5
 15932 00000148 8ED8                <5>  mov ds,ax
 15933 0000014A 8B4608              <5>  mov ax,[bp+8]
 15934 0000014D A3[481A]            <5>  mov [%6+2],ax
 15935 00000150 8B460A              <5>  mov ax,[bp+0x0A]
 15936 00000153 A3[461A]            <5>  mov [%6],ax
 15937                              <5>  stkclose 0x0E
 15938 00000156 83C40E              <6>  add word sp, %1
 15939                              <2>  fladd __ball_y, %%tray_y1, __ball_y
 15940                              <3>  fladd cs, %1, cs, %2, cs, %3
 15941                              <4>  fladdorsub %1, %2, %3, %4, %5, %6, 0
 15942                              <5>  stkopen 0x0E
 15943 00000159 83EC0E              <6>  sub word sp, %1
 15944 0000015C 54                  <6>  push sp
 15945 0000015D 5D                  <6>  pop bp
 15946 0000015E 8CC8                <5>  mov ax,%1
 15947 00000160 8ED8                <5>  mov ds,ax
 15948 00000162 A1[4C1A]            <5>  mov ax,[%2+2]
 15949 00000165 894600              <5>  mov [bp+0],ax
 15950 00000168 A1[4A1A]            <5>  mov ax,[%2]
 15951 0000016B 894602              <5>  mov [bp+2],ax
 15952 0000016E 8CC8                <5>  mov ax,%3
 15953 00000170 8ED8                <5>  mov ds,ax
 15954 00000172 A1[AE1F]            <5>  mov ax,[%4+2]
 15955 00000175 894604              <5>  mov [bp+4],ax
 15956 00000178 A1[AC1F]            <5>  mov ax,[%4]
 15957 0000017B 894606              <5>  mov [bp+6],ax
 15958 0000017E C7460C0000          <5>  mov word [bp+0x0C], %7
 15959 00000183 E8(510C)            <5>  call proc_fladdorsub
 15960 00000186 89E0                <5>  mov ax,sp
 15961 00000188 89C5                <5>  mov bp,ax
 15962 0000018A 8CC8                <5>  mov ax,%5
 15963 0000018C 8ED8                <5>  mov ds,ax
 15964 0000018E 8B4608              <5>  mov ax,[bp+8]
 15965 00000191 A3[4C1A]            <5>  mov [%6+2],ax
 15966 00000194 8B460A              <5>  mov ax,[bp+0x0A]
 15967 00000197 A3[4A1A]            <5>  mov [%6],ax
 15968                              <5>  stkclose 0x0E
 15969 0000019A 83C40E              <6>  add word sp, %1
 15970                              <2> 
 15971                              <2>  mov32 __ball_rinc, __BALL_RINC
 15972                              <3>  mov32 cs, %1, cs, %2
 15973 0000019D 8CC8                <4>  mov ax,%3
 15974 0000019F 8ED8                <4>  mov ds,ax
 15975 000001A1 8B0E[3C1A]          <4>  mov cx,[%4+2]
 15976 000001A5 8B16[3A1A]          <4>  mov dx,[%4]
 15977 000001A9 8CC8                <4>  mov ax,%1
 15978 000001AB 8ED8                <4>  mov ds,ax
 15979 000001AD 890E[5C1A]          <4>  mov [%2+2],cx
 15980 000001B1 8916[5A1A]          <4>  mov [%2],dx
 15981                              <2>  toradians __BALL_ANGLE, __ball_angle
 15982                              <3>  toradians cs, %1, cs, %2
 15983                              <4>  stkopen 0x08
 15984 000001B5 83EC08              <5>  sub word sp, %1
 15985 000001B8 54                  <5>  push sp
 15986 000001B9 5D                  <5>  pop bp
 15987 000001BA 8CC8                <4>  mov ax,%1
 15988 000001BC 8ED8                <4>  mov ds,ax
 15989 000001BE A1[401A]            <4>  mov ax,[%2+2]
 15990 000001C1 894600              <4>  mov [bp+0],ax
 15991 000001C4 A1[3E1A]            <4>  mov ax,[%2]
 15992 000001C7 894602              <4>  mov [bp+2],ax
 15993 000001CA E8(9013)            <4>  call proc_toradians
 15994 000001CD 89E0                <4>  mov ax,sp
 15995 000001CF 89C5                <4>  mov bp,ax
 15996 000001D1 8CC8                <4>  mov ax,%3
 15997 000001D3 8ED8                <4>  mov ds,ax
 15998 000001D5 8B4604              <4>  mov ax,[bp+4]
 15999 000001D8 A3[601A]            <4>  mov [%4+2],ax
 16000 000001DB 8B4606              <4>  mov ax,[bp+6]
 16001 000001DE A3[5E1A]            <4>  mov [%4],ax
 16002                              <4>  stkclose 0x08
 16003 000001E1 83C408              <5>  add word sp, %1
 16004                              <2>  toradians __BALL_VAR_ANGLE, __ball_var_angle
 16005                              <3>  toradians cs, %1, cs, %2
 16006                              <4>  stkopen 0x08
 16007 000001E4 83EC08              <5>  sub word sp, %1
 16008 000001E7 54                  <5>  push sp
 16009 000001E8 5D                  <5>  pop bp
 16010 000001E9 8CC8                <4>  mov ax,%1
 16011 000001EB 8ED8                <4>  mov ds,ax
 16012 000001ED A1[441A]            <4>  mov ax,[%2+2]
 16013 000001F0 894600              <4>  mov [bp+0],ax
 16014 000001F3 A1[421A]            <4>  mov ax,[%2]
 16015 000001F6 894602              <4>  mov [bp+2],ax
 16016 000001F9 E8(9013)            <4>  call proc_toradians
 16017 000001FC 89E0                <4>  mov ax,sp
 16018 000001FE 89C5                <4>  mov bp,ax
 16019 00000200 8CC8                <4>  mov ax,%3
 16020 00000202 8ED8                <4>  mov ds,ax
 16021 00000204 8B4604              <4>  mov ax,[bp+4]
 16022 00000207 A3[641A]            <4>  mov [%4+2],ax
 16023 0000020A 8B4606              <4>  mov ax,[bp+6]
 16024 0000020D A3[621A]            <4>  mov [%4],ax
 16025                              <4>  stkclose 0x08
 16026 00000210 83C408              <5>  add word sp, %1
 16027                              <2> 
 16028                              <2>  ball_updateangle
 16029                              <3>  cos __ball_angle, __ball_xinc
 16030                              <4>  cos cs, %1, cs, %2
 16031                              <5>  sinorcos %1, %2, %3, %4, 0
 16032                              <6>  stkopen 0x09
 16033 00000213 83EC09              <7>  sub word sp, %1
 16034 00000216 54                  <7>  push sp
 16035 00000217 5D                  <7>  pop bp
 16036 00000218 8CC8                <6>  mov ax,%1
 16037 0000021A 8ED8                <6>  mov ds,ax
 16038 0000021C A1[601A]            <6>  mov ax,[%2+2]
 16039 0000021F 894600              <6>  mov [bp+0],ax
 16040 00000222 A1[5E1A]            <6>  mov ax,[%2]
 16041 00000225 894602              <6>  mov [bp+2],ax
 16042 00000228 C6460800            <6>  mov byte [bp+8],%5
 16043 0000022C E8(4E14)            <6>  call proc_sinorcos
 16044 0000022F 89E0                <6>  mov ax,sp
 16045 00000231 89C5                <6>  mov bp,ax
 16046 00000233 8CC8                <6>  mov ax,%3
 16047 00000235 8ED8                <6>  mov ds,ax
 16048 00000237 8B4604              <6>  mov ax,[bp+4]
 16049 0000023A A3[541A]            <6>  mov [%4+2],ax
 16050 0000023D 8B4606              <6>  mov ax,[bp+6]
 16051 00000240 A3[521A]            <6>  mov [%4],ax
 16052                              <6>  stkclose 0x09
 16053 00000243 83C409              <7>  add word sp, %1
 16054                              <3>  sin __ball_angle, __ball_yinc
 16055                              <4>  sin cs, %1, cs, %2
 16056                              <5>  sinorcos %1, %2, %3, %4, 1
 16057                              <6>  stkopen 0x09
 16058 00000246 83EC09              <7>  sub word sp, %1
 16059 00000249 54                  <7>  push sp
 16060 0000024A 5D                  <7>  pop bp
 16061 0000024B 8CC8                <6>  mov ax,%1
 16062 0000024D 8ED8                <6>  mov ds,ax
 16063 0000024F A1[601A]            <6>  mov ax,[%2+2]
 16064 00000252 894600              <6>  mov [bp+0],ax
 16065 00000255 A1[5E1A]            <6>  mov ax,[%2]
 16066 00000258 894602              <6>  mov [bp+2],ax
 16067 0000025B C6460801            <6>  mov byte [bp+8],%5
 16068 0000025F E8(4E14)            <6>  call proc_sinorcos
 16069 00000262 89E0                <6>  mov ax,sp
 16070 00000264 89C5                <6>  mov bp,ax
 16071 00000266 8CC8                <6>  mov ax,%3
 16072 00000268 8ED8                <6>  mov ds,ax
 16073 0000026A 8B4604              <6>  mov ax,[bp+4]
 16074 0000026D A3[581A]            <6>  mov [%4+2],ax
 16075 00000270 8B4606              <6>  mov ax,[bp+6]
 16076 00000273 A3[561A]            <6>  mov [%4],ax
 16077                              <6>  stkclose 0x09
 16078 00000276 83C409              <7>  add word sp, %1
 16079                              <3> 
 16080                              <3>  flmul __ball_xinc, __ball_rinc, __ball_xinc
 16081                              <4>  flmul cs, %1, cs, %2, cs, %3
 16082                              <5>  stkopen 0x0C
 16083 00000279 83EC0C              <6>  sub word sp, %1
 16084 0000027C 54                  <6>  push sp
 16085 0000027D 5D                  <6>  pop bp
 16086 0000027E 8CC8                <5>  mov ax,%1
 16087 00000280 8ED8                <5>  mov ds,ax
 16088 00000282 A1[541A]            <5>  mov ax,[%2+2]
 16089 00000285 894600              <5>  mov [bp+0],ax
 16090 00000288 A1[521A]            <5>  mov ax,[%2]
 16091 0000028B 894602              <5>  mov [bp+2],ax
 16092 0000028E 8CC8                <5>  mov ax,%3
 16093 00000290 8ED8                <5>  mov ds,ax
 16094 00000292 A1[5C1A]            <5>  mov ax,[%4+2]
 16095 00000295 894604              <5>  mov [bp+4],ax
 16096 00000298 A1[5A1A]            <5>  mov ax,[%4]
 16097 0000029B 894606              <5>  mov [bp+6],ax
 16098 0000029E E8(A50A)            <5>  call proc_flmul
 16099 000002A1 89E0                <5>  mov ax,sp
 16100 000002A3 89C5                <5>  mov bp,ax
 16101 000002A5 8CC8                <5>  mov ax,%5
 16102 000002A7 8ED8                <5>  mov ds,ax
 16103 000002A9 8B4608              <5>  mov ax,[bp+8]
 16104 000002AC A3[541A]            <5>  mov [%6+2],ax
 16105 000002AF 8B460A              <5>  mov ax,[bp+0x0A]
 16106 000002B2 A3[521A]            <5>  mov [%6],ax
 16107                              <5>  stkclose 0x0C
 16108 000002B5 83C40C              <6>  add word sp, %1
 16109                              <3>  flmul __ball_yinc, __ball_rinc, __ball_yinc
 16110                              <4>  flmul cs, %1, cs, %2, cs, %3
 16111                              <5>  stkopen 0x0C
 16112 000002B8 83EC0C              <6>  sub word sp, %1
 16113 000002BB 54                  <6>  push sp
 16114 000002BC 5D                  <6>  pop bp
 16115 000002BD 8CC8                <5>  mov ax,%1
 16116 000002BF 8ED8                <5>  mov ds,ax
 16117 000002C1 A1[581A]            <5>  mov ax,[%2+2]
 16118 000002C4 894600              <5>  mov [bp+0],ax
 16119 000002C7 A1[561A]            <5>  mov ax,[%2]
 16120 000002CA 894602              <5>  mov [bp+2],ax
 16121 000002CD 8CC8                <5>  mov ax,%3
 16122 000002CF 8ED8                <5>  mov ds,ax
 16123 000002D1 A1[5C1A]            <5>  mov ax,[%4+2]
 16124 000002D4 894604              <5>  mov [bp+4],ax
 16125 000002D7 A1[5A1A]            <5>  mov ax,[%4]
 16126 000002DA 894606              <5>  mov [bp+6],ax
 16127 000002DD E8(A50A)            <5>  call proc_flmul
 16128 000002E0 89E0                <5>  mov ax,sp
 16129 000002E2 89C5                <5>  mov bp,ax
 16130 000002E4 8CC8                <5>  mov ax,%5
 16131 000002E6 8ED8                <5>  mov ds,ax
 16132 000002E8 8B4608              <5>  mov ax,[bp+8]
 16133 000002EB A3[581A]            <5>  mov [%6+2],ax
 16134 000002EE 8B460A              <5>  mov ax,[bp+0x0A]
 16135 000002F1 A3[561A]            <5>  mov [%6],ax
 16136                              <5>  stkclose 0x0C
 16137 000002F4 83C40C              <6>  add word sp, %1
 16138                              <1>  racket_initialize
 16139                              <2>  mov16 __racket_x, __RACKET_X
 16140                              <3>  mov16 cs, %1, cs, %2
 16141 000002F7 8CC8                <4>  mov ax,%3
 16142 000002F9 8ED8                <4>  mov ds,ax
 16143 000002FB 8B1E[821F]          <4>  mov bx,[%4]
 16144 000002FF 8CC8                <4>  mov ax,%1
 16145 00000301 8ED8                <4>  mov ds,ax
 16146 00000303 891E[841F]          <4>  mov [%2],bx
 16147                              <2> 
 16148                              <2>  add16 __racket_x, __tray_x1
 16149                              <3>  add16 cs, %1, cs, %2
 16150 00000307 8CC8                <4>  mov ax,%3
 16151 00000309 8ED8                <4>  mov ds,ax
 16152 0000030B 8B1E[181A]          <4>  mov bx,[%4]
 16153 0000030F 8CC8                <4>  mov ax,%1
 16154 00000311 8ED8                <4>  mov ds,ax
 16155 00000313 011E[841F]          <4>  add [%2],bx
 16156                              <2>  mov16 __racket_y, __tray_y2
 16157                              <3>  mov16 cs, %1, cs, %2
 16158 00000317 8CC8                <4>  mov ax,%3
 16159 00000319 8ED8                <4>  mov ds,ax
 16160 0000031B 8B1E[1E1A]          <4>  mov bx,[%4]
 16161 0000031F 8CC8                <4>  mov ax,%1
 16162 00000321 8ED8                <4>  mov ds,ax
 16163 00000323 891E[861F]          <4>  mov [%2],bx
 16164                              <2>  sub16 __racket_y, __racket_h
 16165                              <3>  sub16 cs, %1, cs, %2
 16166 00000327 8CC8                <4>  mov ax,%3
 16167 00000329 8ED8                <4>  mov ds,ax
 16168 0000032B 8B1E[8A1F]          <4>  mov bx,[%4]
 16169 0000032F 8CC8                <4>  mov ax,%1
 16170 00000331 8ED8                <4>  mov ds,ax
 16171 00000333 291E[861F]          <4>  sub [%2],bx
 16172                              <1> 
 16173                              <1>  mov16 __lose, __LOSE
 16174                              <2>  mov16 cs, %1, cs, %2
 16175 00000337 8CC8                <3>  mov ax,%3
 16176 00000339 8ED8                <3>  mov ds,ax
 16177 0000033B 8B1E[901F]          <3>  mov bx,[%4]
 16178 0000033F 8CC8                <3>  mov ax,%1
 16179 00000341 8ED8                <3>  mov ds,ax
 16180 00000343 891E[921F]          <3>  mov [%2],bx
 16181                              <1> 
 16182                              <1>  game_hide_win_message
 16183                              <2>  mov16 __show_win_message, __ZERO
 16184                              <3>  mov16 cs, %1, cs, %2
 16185 00000347 8CC8                <4>  mov ax,%3
 16186 00000349 8ED8                <4>  mov ds,ax
 16187 0000034B 8B1E[AE19]          <4>  mov bx,[%4]
 16188 0000034F 8CC8                <4>  mov ax,%1
 16189 00000351 8ED8                <4>  mov ds,ax
 16190 00000353 891E[961F]          <4>  mov [%2],bx
 16191                              <1>  game_hide_lose_message
 16192                              <2>  mov16 __show_lose_message, __ZERO
 16193                              <3>  mov16 cs, %1, cs, %2
 16194 00000357 8CC8                <4>  mov ax,%3
 16195 00000359 8ED8                <4>  mov ds,ax
 16196 0000035B 8B1E[AE19]          <4>  mov bx,[%4]
 16197 0000035F 8CC8                <4>  mov ax,%1
 16198 00000361 8ED8                <4>  mov ds,ax
 16199 00000363 891E[981F]          <4>  mov [%2],bx
 16200                              <1>  game_hide_pause_message
 16201                              <2>  mov16 __show_pause_message, __ZERO
 16202                              <3>  mov16 cs, %1, cs, %2
 16203 00000367 8CC8                <4>  mov ax,%3
 16204 00000369 8ED8                <4>  mov ds,ax
 16205 0000036B 8B1E[AE19]          <4>  mov bx,[%4]
 16206 0000036F 8CC8                <4>  mov ax,%1
 16207 00000371 8ED8                <4>  mov ds,ax
 16208 00000373 891E[9A1F]          <4>  mov [%2],bx
 16209                                  			gui_paint
 16210                              <1>  gui_paintbg
 16211 00000377 B80000              <2>  mov ax, 0
 16212 0000037A BB0000              <2>  mov bx, 0
 16213 0000037D B94001              <2>  mov cx, 320
 16214 00000380 BAC800              <2>  mov dx, 200
 16215                              <2>  __fillrect ax, bx, cx, dx, 0
 16216                              <3>  stkopen 0x09
 16217 00000383 83EC09              <4>  sub word sp, %1
 16218 00000386 54                  <4>  push sp
 16219 00000387 5D                  <4>  pop bp
 16220 00000388 894600              <3>  mov word [bp+0],%1
 16221 0000038B 895E02              <3>  mov word [bp+2],%2
 16222 0000038E 894E04              <3>  mov word [bp+4],%3
 16223 00000391 895606              <3>  mov word [bp+6],%4
 16224 00000394 C6460800            <3>  mov byte [bp+8],%5
 16225 00000398 E8(961B)            <3>  call proc_fillrect
 16226                              <3>  stkclose 0x09
 16227 0000039B 83C409              <4>  add word sp, %1
 16228                              <1>  gui_painttray
 16229                              <2> section .data
 16230 00001FB0 0000                <2>  %%cindex: dw 0
 16231 00001FB2 0000                <2>  %%def_cindex: dw 0
 16232                              <2> section .text
 16233                              <2>  mov16 %%cindex, %%def_cindex
 16234                              <3>  mov16 cs, %1, cs, %2
 16235 0000039E 8CC8                <4>  mov ax,%3
 16236 000003A0 8ED8                <4>  mov ds,ax
 16237 000003A2 8B1E[B21F]          <4>  mov bx,[%4]
 16238 000003A6 8CC8                <4>  mov ax,%1
 16239 000003A8 8ED8                <4>  mov ds,ax
 16240 000003AA 891E[B01F]          <4>  mov [%2],bx
 16241                              <2> 
 16242                              <2>  fillrect __tray_x1, __tray_y1, __tray_x2, __tray_y2, __tray_color
 16243                              <3>  fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 16244                              <4>  stkopen 0x09
 16245 000003AE 83EC09              <5>  sub word sp, %1
 16246 000003B1 54                  <5>  push sp
 16247 000003B2 5D                  <5>  pop bp
 16248 000003B3 8CC8                <4>  mov ax,%1
 16249 000003B5 8ED8                <4>  mov ds,ax
 16250 000003B7 A1[181A]            <4>  mov ax,[%2]
 16251 000003BA 894600              <4>  mov [bp+0],ax
 16252 000003BD 8CC8                <4>  mov ax,%3
 16253 000003BF 8ED8                <4>  mov ds,ax
 16254 000003C1 A1[1A1A]            <4>  mov ax,[%4]
 16255 000003C4 894602              <4>  mov [bp+2],ax
 16256 000003C7 8CC8                <4>  mov ax,%5
 16257 000003C9 8ED8                <4>  mov ds,ax
 16258 000003CB A1[1C1A]            <4>  mov ax,[%6]
 16259 000003CE 894604              <4>  mov [bp+4],ax
 16260 000003D1 8CC8                <4>  mov ax,%7
 16261 000003D3 8ED8                <4>  mov ds,ax
 16262 000003D5 A1[1E1A]            <4>  mov ax,[%8]
 16263 000003D8 894606              <4>  mov [bp+6],ax
 16264 000003DB 8CC8                <4>  mov ax,%9
 16265 000003DD 8ED8                <4>  mov ds,ax
 16266 000003DF A0[B419]            <4>  mov al,[%10]
 16267 000003E2 884608              <4>  mov [bp+8],al
 16268 000003E5 E8(961B)            <4>  call proc_fillrect
 16269                              <4>  stkclose 0x09
 16270 000003E8 83C409              <5>  add word sp, %1
 16271                              <2>  drawlineh __tray_x1, __tray_y1, __tray_x2, __tray_bordercolor
 16272                              <3>  drawlineh cs, %1, cs, %2, cs, %3, cs, %4
 16273                              <4>  stkopen 0x07
 16274 000003EB 83EC07              <5>  sub word sp, %1
 16275 000003EE 54                  <5>  push sp
 16276 000003EF 5D                  <5>  pop bp
 16277 000003F0 8CC8                <4>  mov ax,%1
 16278 000003F2 8ED8                <4>  mov ds,ax
 16279 000003F4 A1[181A]            <4>  mov ax,[%2]
 16280 000003F7 894600              <4>  mov [bp+0],ax
 16281 000003FA 8CC8                <4>  mov ax,%3
 16282 000003FC 8ED8                <4>  mov ds,ax
 16283 000003FE A1[1A1A]            <4>  mov ax,[%4]
 16284 00000401 894602              <4>  mov [bp+2],ax
 16285 00000404 8CC8                <4>  mov ax,%5
 16286 00000406 8ED8                <4>  mov ds,ax
 16287 00000408 A1[1C1A]            <4>  mov ax,[%6]
 16288 0000040B 894604              <4>  mov [bp+4],ax
 16289 0000040E 8CC8                <4>  mov ax,%7
 16290 00000410 8ED8                <4>  mov ds,ax
 16291 00000412 A0[B519]            <4>  mov al,[%8]
 16292 00000415 884606              <4>  mov [bp+6],al
 16293 00000418 E8(911A)            <4>  call proc_drawlineh
 16294                              <4>  stkclose 0x07
 16295 0000041B 83C407              <5>  add word sp, %1
 16296                              <2>  drawlinev __tray_x1, __tray_y1, __tray_y2, __tray_bordercolor
 16297                              <3>  drawlinev cs, %1, cs, %2, cs, %3, cs, %4
 16298                              <4>  stkopen 0x07
 16299 0000041E 83EC07              <5>  sub word sp, %1
 16300 00000421 54                  <5>  push sp
 16301 00000422 5D                  <5>  pop bp
 16302 00000423 8CC8                <4>  mov ax,%1
 16303 00000425 8ED8                <4>  mov ds,ax
 16304 00000427 A1[181A]            <4>  mov ax,[%2]
 16305 0000042A 894600              <4>  mov [bp+0],ax
 16306 0000042D 8CC8                <4>  mov ax,%3
 16307 0000042F 8ED8                <4>  mov ds,ax
 16308 00000431 A1[1A1A]            <4>  mov ax,[%4]
 16309 00000434 894602              <4>  mov [bp+2],ax
 16310 00000437 8CC8                <4>  mov ax,%5
 16311 00000439 8ED8                <4>  mov ds,ax
 16312 0000043B A1[1E1A]            <4>  mov ax,[%6]
 16313 0000043E 894604              <4>  mov [bp+4],ax
 16314 00000441 8CC8                <4>  mov ax,%7
 16315 00000443 8ED8                <4>  mov ds,ax
 16316 00000445 A0[B519]            <4>  mov al,[%8]
 16317 00000448 884606              <4>  mov [bp+6],al
 16318 0000044B E8(C51A)            <4>  call proc_drawlinev
 16319                              <4>  stkclose 0x07
 16320 0000044E 83C407              <5>  add word sp, %1
 16321                              <2>  drawlinev __tray_x2, __tray_y1, __tray_y2, __tray_bordercolor
 16322                              <3>  drawlinev cs, %1, cs, %2, cs, %3, cs, %4
 16323                              <4>  stkopen 0x07
 16324 00000451 83EC07              <5>  sub word sp, %1
 16325 00000454 54                  <5>  push sp
 16326 00000455 5D                  <5>  pop bp
 16327 00000456 8CC8                <4>  mov ax,%1
 16328 00000458 8ED8                <4>  mov ds,ax
 16329 0000045A A1[1C1A]            <4>  mov ax,[%2]
 16330 0000045D 894600              <4>  mov [bp+0],ax
 16331 00000460 8CC8                <4>  mov ax,%3
 16332 00000462 8ED8                <4>  mov ds,ax
 16333 00000464 A1[1A1A]            <4>  mov ax,[%4]
 16334 00000467 894602              <4>  mov [bp+2],ax
 16335 0000046A 8CC8                <4>  mov ax,%5
 16336 0000046C 8ED8                <4>  mov ds,ax
 16337 0000046E A1[1E1A]            <4>  mov ax,[%6]
 16338 00000471 894604              <4>  mov [bp+4],ax
 16339 00000474 8CC8                <4>  mov ax,%7
 16340 00000476 8ED8                <4>  mov ds,ax
 16341 00000478 A0[B519]            <4>  mov al,[%8]
 16342 0000047B 884606              <4>  mov [bp+6],al
 16343 0000047E E8(C51A)            <4>  call proc_drawlinev
 16344                              <4>  stkclose 0x07
 16345 00000481 83C407              <5>  add word sp, %1
 16346                              <2> 
 16347                              <2>  mov16 __square_y, __tray_y1
 16348                              <3>  mov16 cs, %1, cs, %2
 16349 00000484 8CC8                <4>  mov ax,%3
 16350 00000486 8ED8                <4>  mov ds,ax
 16351 00000488 8B1E[1A1A]          <4>  mov bx,[%4]
 16352 0000048C 8CC8                <4>  mov ax,%1
 16353 0000048E 8ED8                <4>  mov ds,ax
 16354 00000490 891E[221A]          <4>  mov [%2],bx
 16355                              <2>  mov16 __square_y2, __square_y
 16356                              <3>  mov16 cs, %1, cs, %2
 16357 00000494 8CC8                <4>  mov ax,%3
 16358 00000496 8ED8                <4>  mov ds,ax
 16359 00000498 8B1E[221A]          <4>  mov bx,[%4]
 16360 0000049C 8CC8                <4>  mov ax,%1
 16361 0000049E 8ED8                <4>  mov ds,ax
 16362 000004A0 891E[261A]          <4>  mov [%2],bx
 16363                              <2>  add16 __square_y2, __square_h
 16364                              <3>  add16 cs, %1, cs, %2
 16365 000004A4 8CC8                <4>  mov ax,%3
 16366 000004A6 8ED8                <4>  mov ds,ax
 16367 000004A8 8B1E[2A1A]          <4>  mov bx,[%4]
 16368 000004AC 8CC8                <4>  mov ax,%1
 16369 000004AE 8ED8                <4>  mov ds,ax
 16370 000004B0 011E[261A]          <4>  add [%2],bx
 16371                              <2> 
 16372 000004B4 B100                <2>  mov cl,0
 16373                              <2>  %%l1:
 16374 000004B6 51                  <2>  push cx
 16375                              <2>  int16toreg __square_ycount, dx
 16376                              <3>  int16toreg cs, %1, %2
 16377 000004B7 68[301A]            <4>  push %2
 16378 000004BA 0E                  <4>  push %1
 16379 000004BB 1F                  <4>  pop ds
 16380 000004BC 5E                  <4>  pop si
 16381 000004BD 8B14                <4>  mov word %3,[si]
 16382 000004BF 59                  <2>  pop cx
 16383 000004C0 38D1                <2>  cmp cl,dl
 16384 000004C2 0F833B01            <2>  jae %%l2
 16385 000004C6 51                  <2>  push cx
 16386                              <2> 
 16387                              <2>  mov16 __square_x, __tray_x1
 16388                              <3>  mov16 cs, %1, cs, %2
 16389 000004C7 8CC8                <4>  mov ax,%3
 16390 000004C9 8ED8                <4>  mov ds,ax
 16391 000004CB 8B1E[181A]          <4>  mov bx,[%4]
 16392 000004CF 8CC8                <4>  mov ax,%1
 16393 000004D1 8ED8                <4>  mov ds,ax
 16394 000004D3 891E[201A]          <4>  mov [%2],bx
 16395                              <2>  mov16 __square_x2, __square_x
 16396                              <3>  mov16 cs, %1, cs, %2
 16397 000004D7 8CC8                <4>  mov ax,%3
 16398 000004D9 8ED8                <4>  mov ds,ax
 16399 000004DB 8B1E[201A]          <4>  mov bx,[%4]
 16400 000004DF 8CC8                <4>  mov ax,%1
 16401 000004E1 8ED8                <4>  mov ds,ax
 16402 000004E3 891E[241A]          <4>  mov [%2],bx
 16403                              <2>  add16 __square_x2, __square_w
 16404                              <3>  add16 cs, %1, cs, %2
 16405 000004E7 8CC8                <4>  mov ax,%3
 16406 000004E9 8ED8                <4>  mov ds,ax
 16407 000004EB 8B1E[281A]          <4>  mov bx,[%4]
 16408 000004EF 8CC8                <4>  mov ax,%1
 16409 000004F1 8ED8                <4>  mov ds,ax
 16410 000004F3 011E[241A]          <4>  add [%2],bx
 16411                              <2> 
 16412 000004F7 B100                <2>  mov cl,0
 16413                              <2>  %%l1.1:
 16414 000004F9 51                  <2>  push cx
 16415                              <2>  int16toreg __square_xcount, dx
 16416                              <3>  int16toreg cs, %1, %2
 16417 000004FA 68[2E1A]            <4>  push %2
 16418 000004FD 0E                  <4>  push %1
 16419 000004FE 1F                  <4>  pop ds
 16420 000004FF 5E                  <4>  pop si
 16421 00000500 8B14                <4>  mov word %3,[si]
 16422 00000502 59                  <2>  pop cx
 16423 00000503 38D1                <2>  cmp cl,dl
 16424 00000505 0F83CA00            <2>  jae %%l1.2
 16425 00000509 51                  <2>  push cx
 16426                              <2> 
 16427                              <2>  int16toreg __square_xcount, ax
 16428                              <3>  int16toreg cs, %1, %2
 16429 0000050A 68[2E1A]            <4>  push %2
 16430 0000050D 0E                  <4>  push %1
 16431 0000050E 1F                  <4>  pop ds
 16432 0000050F 5E                  <4>  pop si
 16433 00000510 8B04                <4>  mov word %3,[si]
 16434 00000512 59                  <2>  pop cx
 16435 00000513 5B                  <2>  pop bx
 16436 00000514 53                  <2>  push bx
 16437 00000515 51                  <2>  push cx
 16438                              <2> 
 16439 00000516 F7E3                <2>  mul bx
 16440 00000518 01C8                <2>  add ax,cx
 16441                              <2> 
 16442                              <2>  vlodsb __squaremap, ax, cl
 16443                              <3>  vlodsb cs, %1, %2, %3
 16444 0000051A 0E                  <4>  push %1
 16445 0000051B 1F                  <4>  pop ds
 16446 0000051C BE[F019]            <4>  mov si,%2
 16447 0000051F 01C6                <4>  add si,%3
 16448 00000521 8A0C                <4>  mov byte %4,[si]
 16449 00000523 80F900              <2>  cmp cl,0
 16450 00000526 0F848300            <2>  jz %%painted
 16451                              <2>  int16toreg %%cindex, bx
 16452                              <3>  int16toreg cs, %1, %2
 16453 0000052A 68[B01F]            <4>  push %2
 16454 0000052D 0E                  <4>  push %1
 16455 0000052E 1F                  <4>  pop ds
 16456 0000052F 5E                  <4>  pop si
 16457 00000530 8B1C                <4>  mov word %3,[si]
 16458                              <2>  fillrect __square_x, __square_y, __square_x2, __square_y2, __square_ycolor+bx
 16459                              <3>  fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 16460                              <4>  stkopen 0x09
 16461 00000532 83EC09              <5>  sub word sp, %1
 16462 00000535 54                  <5>  push sp
 16463 00000536 5D                  <5>  pop bp
 16464 00000537 8CC8                <4>  mov ax,%1
 16465 00000539 8ED8                <4>  mov ds,ax
 16466 0000053B A1[201A]            <4>  mov ax,[%2]
 16467 0000053E 894600              <4>  mov [bp+0],ax
 16468 00000541 8CC8                <4>  mov ax,%3
 16469 00000543 8ED8                <4>  mov ds,ax
 16470 00000545 A1[221A]            <4>  mov ax,[%4]
 16471 00000548 894602              <4>  mov [bp+2],ax
 16472 0000054B 8CC8                <4>  mov ax,%5
 16473 0000054D 8ED8                <4>  mov ds,ax
 16474 0000054F A1[241A]            <4>  mov ax,[%6]
 16475 00000552 894604              <4>  mov [bp+4],ax
 16476 00000555 8CC8                <4>  mov ax,%7
 16477 00000557 8ED8                <4>  mov ds,ax
 16478 00000559 A1[261A]            <4>  mov ax,[%8]
 16479 0000055C 894606              <4>  mov [bp+6],ax
 16480 0000055F 8CC8                <4>  mov ax,%9
 16481 00000561 8ED8                <4>  mov ds,ax
 16482 00000563 8A87[B719]          <4>  mov al,[%10]
 16483 00000567 884608              <4>  mov [bp+8],al
 16484 0000056A E8(961B)            <4>  call proc_fillrect
 16485                              <4>  stkclose 0x09
 16486 0000056D 83C409              <5>  add word sp, %1
 16487                              <2>  drawrect __square_x, __square_y, __square_x2, __square_y2, __square_bordercolor
 16488                              <3>  drawrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 16489                              <4>  stkopen 0x09
 16490 00000570 83EC09              <5>  sub word sp, %1
 16491 00000573 54                  <5>  push sp
 16492 00000574 5D                  <5>  pop bp
 16493 00000575 8CC8                <4>  mov ax,%1
 16494 00000577 8ED8                <4>  mov ds,ax
 16495 00000579 A1[201A]            <4>  mov ax,[%2]
 16496 0000057C 894600              <4>  mov [bp+0],ax
 16497 0000057F 8CC8                <4>  mov ax,%3
 16498 00000581 8ED8                <4>  mov ds,ax
 16499 00000583 A1[221A]            <4>  mov ax,[%4]
 16500 00000586 894602              <4>  mov [bp+2],ax
 16501 00000589 8CC8                <4>  mov ax,%5
 16502 0000058B 8ED8                <4>  mov ds,ax
 16503 0000058D A1[241A]            <4>  mov ax,[%6]
 16504 00000590 894604              <4>  mov [bp+4],ax
 16505 00000593 8CC8                <4>  mov ax,%7
 16506 00000595 8ED8                <4>  mov ds,ax
 16507 00000597 A1[261A]            <4>  mov ax,[%8]
 16508 0000059A 894606              <4>  mov [bp+6],ax
 16509 0000059D 8CC8                <4>  mov ax,%9
 16510 0000059F 8ED8                <4>  mov ds,ax
 16511 000005A1 A0[B619]            <4>  mov al,[%10]
 16512 000005A4 884608              <4>  mov [bp+8],al
 16513 000005A7 E8(F91A)            <4>  call proc_drawrect
 16514                              <4>  stkclose 0x09
 16515 000005AA 83C409              <5>  add word sp, %1
 16516                              <2>  %%painted:
 16517                              <2> 
 16518                              <2>  add16 __square_x, __square_w
 16519                              <3>  add16 cs, %1, cs, %2
 16520 000005AD 8CC8                <4>  mov ax,%3
 16521 000005AF 8ED8                <4>  mov ds,ax
 16522 000005B1 8B1E[281A]          <4>  mov bx,[%4]
 16523 000005B5 8CC8                <4>  mov ax,%1
 16524 000005B7 8ED8                <4>  mov ds,ax
 16525 000005B9 011E[201A]          <4>  add [%2],bx
 16526                              <2>  add16 __square_x2, __square_w
 16527                              <3>  add16 cs, %1, cs, %2
 16528 000005BD 8CC8                <4>  mov ax,%3
 16529 000005BF 8ED8                <4>  mov ds,ax
 16530 000005C1 8B1E[281A]          <4>  mov bx,[%4]
 16531 000005C5 8CC8                <4>  mov ax,%1
 16532 000005C7 8ED8                <4>  mov ds,ax
 16533 000005C9 011E[241A]          <4>  add [%2],bx
 16534                              <2> 
 16535 000005CD 59                  <2>  pop cx
 16536 000005CE FEC1                <2>  inc cl
 16537 000005D0 E926FF              <2>  jmp %%l1.1
 16538                              <2>  %%l1.2:
 16539                              <2> 
 16540                              <2>  add16 __square_y, __square_h
 16541                              <3>  add16 cs, %1, cs, %2
 16542 000005D3 8CC8                <4>  mov ax,%3
 16543 000005D5 8ED8                <4>  mov ds,ax
 16544 000005D7 8B1E[2A1A]          <4>  mov bx,[%4]
 16545 000005DB 8CC8                <4>  mov ax,%1
 16546 000005DD 8ED8                <4>  mov ds,ax
 16547 000005DF 011E[221A]          <4>  add [%2],bx
 16548                              <2>  add16 __square_y2, __square_h
 16549                              <3>  add16 cs, %1, cs, %2
 16550 000005E3 8CC8                <4>  mov ax,%3
 16551 000005E5 8ED8                <4>  mov ds,ax
 16552 000005E7 8B1E[2A1A]          <4>  mov bx,[%4]
 16553 000005EB 8CC8                <4>  mov ax,%1
 16554 000005ED 8ED8                <4>  mov ds,ax
 16555 000005EF 011E[261A]          <4>  add [%2],bx
 16556                              <2>  inc16 %%cindex
 16557                              <3>  inc16 cs, %1
 16558 000005F3 8CC8                <4>  mov ax,%1
 16559 000005F5 8ED8                <4>  mov ds,ax
 16560 000005F7 FF06[B01F]          <4>  inc word [%2]
 16561                              <2> 
 16562 000005FB 59                  <2>  pop cx
 16563 000005FC FEC1                <2>  inc cl
 16564 000005FE E9B5FE              <2>  jmp %%l1
 16565                              <2>  %%l2:
 16566                              <1>  gui_paintball
 16567                              <2> section .data
 16568 00001FB4 0000                <2>  %%x: dw 0
 16569 00001FB6 0000                <2>  %%y: dw 0
 16570 00001FB8 0000                <2>  %%r: dw 0
 16571                              <2> section .text
 16572                              <2>  fltoint16 __ball_x, %%x
 16573                              <3>  fltoint16 cs, %1, cs, %2
 16574                              <4>  stkopen 0x06
 16575 00000601 83EC06              <5>  sub word sp, %1
 16576 00000604 54                  <5>  push sp
 16577 00000605 5D                  <5>  pop bp
 16578 00000606 8CC8                <4>  mov ax,%1
 16579 00000608 8ED8                <4>  mov ds,ax
 16580 0000060A A1[481A]            <4>  mov ax,[%2+2]
 16581 0000060D 894600              <4>  mov [bp+0],ax
 16582 00000610 A1[461A]            <4>  mov ax,[%2]
 16583 00000613 894602              <4>  mov [bp+2],ax
 16584 00000616 E8(C305)            <4>  call proc_fltoint16
 16585 00000619 89E0                <4>  mov ax,sp
 16586 0000061B 89C5                <4>  mov bp,ax
 16587 0000061D 8CC8                <4>  mov ax,%3
 16588 0000061F 8ED8                <4>  mov ds,ax
 16589 00000621 8B4604              <4>  mov ax,[bp+4]
 16590 00000624 A3[B41F]            <4>  mov [%4],ax
 16591                              <4>  stkclose 0x06
 16592 00000627 83C406              <5>  add word sp, %1
 16593                              <2>  fltoint16 __ball_y, %%y
 16594                              <3>  fltoint16 cs, %1, cs, %2
 16595                              <4>  stkopen 0x06
 16596 0000062A 83EC06              <5>  sub word sp, %1
 16597 0000062D 54                  <5>  push sp
 16598 0000062E 5D                  <5>  pop bp
 16599 0000062F 8CC8                <4>  mov ax,%1
 16600 00000631 8ED8                <4>  mov ds,ax
 16601 00000633 A1[4C1A]            <4>  mov ax,[%2+2]
 16602 00000636 894600              <4>  mov [bp+0],ax
 16603 00000639 A1[4A1A]            <4>  mov ax,[%2]
 16604 0000063C 894602              <4>  mov [bp+2],ax
 16605 0000063F E8(C305)            <4>  call proc_fltoint16
 16606 00000642 89E0                <4>  mov ax,sp
 16607 00000644 89C5                <4>  mov bp,ax
 16608 00000646 8CC8                <4>  mov ax,%3
 16609 00000648 8ED8                <4>  mov ds,ax
 16610 0000064A 8B4604              <4>  mov ax,[bp+4]
 16611 0000064D A3[B61F]            <4>  mov [%4],ax
 16612                              <4>  stkclose 0x06
 16613 00000650 83C406              <5>  add word sp, %1
 16614                              <2>  fltoint16 __ball_radial, %%r
 16615                              <3>  fltoint16 cs, %1, cs, %2
 16616                              <4>  stkopen 0x06
 16617 00000653 83EC06              <5>  sub word sp, %1
 16618 00000656 54                  <5>  push sp
 16619 00000657 5D                  <5>  pop bp
 16620 00000658 8CC8                <4>  mov ax,%1
 16621 0000065A 8ED8                <4>  mov ds,ax
 16622 0000065C A1[501A]            <4>  mov ax,[%2+2]
 16623 0000065F 894600              <4>  mov [bp+0],ax
 16624 00000662 A1[4E1A]            <4>  mov ax,[%2]
 16625 00000665 894602              <4>  mov [bp+2],ax
 16626 00000668 E8(C305)            <4>  call proc_fltoint16
 16627 0000066B 89E0                <4>  mov ax,sp
 16628 0000066D 89C5                <4>  mov bp,ax
 16629 0000066F 8CC8                <4>  mov ax,%3
 16630 00000671 8ED8                <4>  mov ds,ax
 16631 00000673 8B4604              <4>  mov ax,[bp+4]
 16632 00000676 A3[B81F]            <4>  mov [%4],ax
 16633                              <4>  stkclose 0x06
 16634 00000679 83C406              <5>  add word sp, %1
 16635                              <2>  fillarc %%x, %%y, %%r, %%r, __ball_color
 16636                              <3>  fillarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 16637                              <4>  drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 1
 16638                              <5>  stkopen 0x0A
 16639 0000067C 83EC0A              <6>  sub word sp, %1
 16640 0000067F 54                  <6>  push sp
 16641 00000680 5D                  <6>  pop bp
 16642 00000681 8CC8                <5>  mov ax,%1
 16643 00000683 8ED8                <5>  mov ds,ax
 16644 00000685 A1[B41F]            <5>  mov ax,[%2]
 16645 00000688 894600              <5>  mov [bp+0],ax
 16646 0000068B 8CC8                <5>  mov ax,%3
 16647 0000068D 8ED8                <5>  mov ds,ax
 16648 0000068F A1[B61F]            <5>  mov ax,[%4]
 16649 00000692 894602              <5>  mov [bp+2],ax
 16650 00000695 8CC8                <5>  mov ax,%5
 16651 00000697 8ED8                <5>  mov ds,ax
 16652 00000699 A1[B81F]            <5>  mov ax,[%6]
 16653 0000069C 894604              <5>  mov [bp+4],ax
 16654 0000069F 8CC8                <5>  mov ax,%7
 16655 000006A1 8ED8                <5>  mov ds,ax
 16656 000006A3 A1[B81F]            <5>  mov ax,[%8]
 16657 000006A6 894606              <5>  mov [bp+6],ax
 16658 000006A9 8CC8                <5>  mov ax,%9
 16659 000006AB 8ED8                <5>  mov ds,ax
 16660 000006AD A0[B219]            <5>  mov al,[%10]
 16661 000006B0 884608              <5>  mov byte [bp+8],al
 16662 000006B3 C6460901            <5>  mov byte [bp+9],%11
 16663 000006B7 E8(D21B)            <5>  call proc_drawarc
 16664                              <5>  stkclose 0x0A
 16665 000006BA 83C40A              <6>  add word sp, %1
 16666                              <2>  drawarc %%x, %%y, %%r, %%r, __ball_bordercolor
 16667                              <3>  drawarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 16668                              <4>  drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 0
 16669                              <5>  stkopen 0x0A
 16670 000006BD 83EC0A              <6>  sub word sp, %1
 16671 000006C0 54                  <6>  push sp
 16672 000006C1 5D                  <6>  pop bp
 16673 000006C2 8CC8                <5>  mov ax,%1
 16674 000006C4 8ED8                <5>  mov ds,ax
 16675 000006C6 A1[B41F]            <5>  mov ax,[%2]
 16676 000006C9 894600              <5>  mov [bp+0],ax
 16677 000006CC 8CC8                <5>  mov ax,%3
 16678 000006CE 8ED8                <5>  mov ds,ax
 16679 000006D0 A1[B61F]            <5>  mov ax,[%4]
 16680 000006D3 894602              <5>  mov [bp+2],ax
 16681 000006D6 8CC8                <5>  mov ax,%5
 16682 000006D8 8ED8                <5>  mov ds,ax
 16683 000006DA A1[B81F]            <5>  mov ax,[%6]
 16684 000006DD 894604              <5>  mov [bp+4],ax
 16685 000006E0 8CC8                <5>  mov ax,%7
 16686 000006E2 8ED8                <5>  mov ds,ax
 16687 000006E4 A1[B81F]            <5>  mov ax,[%8]
 16688 000006E7 894606              <5>  mov [bp+6],ax
 16689 000006EA 8CC8                <5>  mov ax,%9
 16690 000006EC 8ED8                <5>  mov ds,ax
 16691 000006EE A0[B319]            <5>  mov al,[%10]
 16692 000006F1 884608              <5>  mov byte [bp+8],al
 16693 000006F4 C6460900            <5>  mov byte [bp+9],%11
 16694 000006F8 E8(D21B)            <5>  call proc_drawarc
 16695                              <5>  stkclose 0x0A
 16696 000006FB 83C40A              <6>  add word sp, %1
 16697                              <1>  gui_paintracket
 16698                              <2> section .data
 16699 00001FBA 0000                <2>  %%x2: dw 0
 16700 00001FBC 0000                <2>  %%y2: dw 0
 16701                              <2> section .text
 16702                              <2>  mov16 %%x2, __racket_x
 16703                              <3>  mov16 cs, %1, cs, %2
 16704 000006FE 8CC8                <4>  mov ax,%3
 16705 00000700 8ED8                <4>  mov ds,ax
 16706 00000702 8B1E[841F]          <4>  mov bx,[%4]
 16707 00000706 8CC8                <4>  mov ax,%1
 16708 00000708 8ED8                <4>  mov ds,ax
 16709 0000070A 891E[BA1F]          <4>  mov [%2],bx
 16710                              <2>  mov16 %%y2, __racket_y
 16711                              <3>  mov16 cs, %1, cs, %2
 16712 0000070E 8CC8                <4>  mov ax,%3
 16713 00000710 8ED8                <4>  mov ds,ax
 16714 00000712 8B1E[861F]          <4>  mov bx,[%4]
 16715 00000716 8CC8                <4>  mov ax,%1
 16716 00000718 8ED8                <4>  mov ds,ax
 16717 0000071A 891E[BC1F]          <4>  mov [%2],bx
 16718                              <2>  add16 %%x2, __racket_w
 16719                              <3>  add16 cs, %1, cs, %2
 16720 0000071E 8CC8                <4>  mov ax,%3
 16721 00000720 8ED8                <4>  mov ds,ax
 16722 00000722 8B1E[881F]          <4>  mov bx,[%4]
 16723 00000726 8CC8                <4>  mov ax,%1
 16724 00000728 8ED8                <4>  mov ds,ax
 16725 0000072A 011E[BA1F]          <4>  add [%2],bx
 16726                              <2>  add16 %%y2, __racket_h
 16727                              <3>  add16 cs, %1, cs, %2
 16728 0000072E 8CC8                <4>  mov ax,%3
 16729 00000730 8ED8                <4>  mov ds,ax
 16730 00000732 8B1E[8A1F]          <4>  mov bx,[%4]
 16731 00000736 8CC8                <4>  mov ax,%1
 16732 00000738 8ED8                <4>  mov ds,ax
 16733 0000073A 011E[BC1F]          <4>  add [%2],bx
 16734                              <2>  fillrect __racket_x, __racket_y, %%x2, %%y2, __racket_color
 16735                              <3>  fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 16736                              <4>  stkopen 0x09
 16737 0000073E 83EC09              <5>  sub word sp, %1
 16738 00000741 54                  <5>  push sp
 16739 00000742 5D                  <5>  pop bp
 16740 00000743 8CC8                <4>  mov ax,%1
 16741 00000745 8ED8                <4>  mov ds,ax
 16742 00000747 A1[841F]            <4>  mov ax,[%2]
 16743 0000074A 894600              <4>  mov [bp+0],ax
 16744 0000074D 8CC8                <4>  mov ax,%3
 16745 0000074F 8ED8                <4>  mov ds,ax
 16746 00000751 A1[861F]            <4>  mov ax,[%4]
 16747 00000754 894602              <4>  mov [bp+2],ax
 16748 00000757 8CC8                <4>  mov ax,%5
 16749 00000759 8ED8                <4>  mov ds,ax
 16750 0000075B A1[BA1F]            <4>  mov ax,[%6]
 16751 0000075E 894604              <4>  mov [bp+4],ax
 16752 00000761 8CC8                <4>  mov ax,%7
 16753 00000763 8ED8                <4>  mov ds,ax
 16754 00000765 A1[BC1F]            <4>  mov ax,[%8]
 16755 00000768 894606              <4>  mov [bp+6],ax
 16756 0000076B 8CC8                <4>  mov ax,%9
 16757 0000076D 8ED8                <4>  mov ds,ax
 16758 0000076F A0[BB19]            <4>  mov al,[%10]
 16759 00000772 884608              <4>  mov [bp+8],al
 16760 00000775 E8(961B)            <4>  call proc_fillrect
 16761                              <4>  stkclose 0x09
 16762 00000778 83C409              <5>  add word sp, %1
 16763                              <2>  drawrect __racket_x, __racket_y, %%x2, %%y2, __racket_bordercolor
 16764                              <3>  drawrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 16765                              <4>  stkopen 0x09
 16766 0000077B 83EC09              <5>  sub word sp, %1
 16767 0000077E 54                  <5>  push sp
 16768 0000077F 5D                  <5>  pop bp
 16769 00000780 8CC8                <4>  mov ax,%1
 16770 00000782 8ED8                <4>  mov ds,ax
 16771 00000784 A1[841F]            <4>  mov ax,[%2]
 16772 00000787 894600              <4>  mov [bp+0],ax
 16773 0000078A 8CC8                <4>  mov ax,%3
 16774 0000078C 8ED8                <4>  mov ds,ax
 16775 0000078E A1[861F]            <4>  mov ax,[%4]
 16776 00000791 894602              <4>  mov [bp+2],ax
 16777 00000794 8CC8                <4>  mov ax,%5
 16778 00000796 8ED8                <4>  mov ds,ax
 16779 00000798 A1[BA1F]            <4>  mov ax,[%6]
 16780 0000079B 894604              <4>  mov [bp+4],ax
 16781 0000079E 8CC8                <4>  mov ax,%7
 16782 000007A0 8ED8                <4>  mov ds,ax
 16783 000007A2 A1[BC1F]            <4>  mov ax,[%8]
 16784 000007A5 894606              <4>  mov [bp+6],ax
 16785 000007A8 8CC8                <4>  mov ax,%9
 16786 000007AA 8ED8                <4>  mov ds,ax
 16787 000007AC A0[BC19]            <4>  mov al,[%10]
 16788 000007AF 884608              <4>  mov [bp+8],al
 16789 000007B2 E8(F91A)            <4>  call proc_drawrect
 16790                              <4>  stkclose 0x09
 16791 000007B5 83C409              <5>  add word sp, %1
 16792                              <1>  repaint
 16793 000007B8 E8(2600)            <2>  call proc_repaint
 16794                              <1> 
 16795                              <1>  cmp16 __show_init_message, __ZERO, cl
 16796                              <2>  cmp16 cs, %1, cs, %2, %3
 16797 000007BB 8CC8                <3>  mov ax,%1
 16798 000007BD 8ED8                <3>  mov ds,ax
 16799 000007BF 8B1E[941F]          <3>  mov bx,[%2]
 16800 000007C3 8CC8                <3>  mov ax,%3
 16801 000007C5 8ED8                <3>  mov ds,ax
 16802 000007C7 8B0E[AE19]          <3>  mov cx,[%4]
 16803                              <3> 
 16804 000007CB 39CB                <3>  cmp bx,cx
 16805 000007CD 7F06                <3>  jg %%above
 16806 000007CF 7C08                <3>  jl %%below
 16807 000007D1 B100                <3>  mov byte %5, 0
 16808 000007D3 EB06                <3>  jmp %%endcmp
 16809                              <3>  %%above:
 16810 000007D5 B101                <3>  mov byte %5, 1
 16811 000007D7 EB02                <3>  jmp %%endcmp
 16812                              <3>  %%below:
 16813 000007D9 B1FF                <3>  mov byte %5, -1
 16814                              <3>  %%endcmp:
 16815 000007DB 80F900              <1>  cmp cl,0
 16816 000007DE 7425                <1>  je %%init_message_painted
 16817                              <1>  gui_show_message 'Pressione alguma tecla..', 8, 13, __message_default_color
 16818                              <2>  section .data
 16819 00001FBE 5072657373696F6E65- <2>  %%str: db %1,0
 16820 00001FC7 20616C67756D612074- <2>
 16821 00001FD0 65636C612E2E00      <2>
 16822                              <2> section .text
 16823 000007E0 8CC8                <2>  mov ax,cs
 16824 000007E2 8ED8                <2>  mov ds,ax
 16825 000007E4 A0[BD19]            <2>  mov al,[%4]
 16826                              <2>  __drawstring %%str, %2, %3, al
 16827                              <3>  __drawstring cs, %1, %2, %3, %4
 16828                              <4>  stkopen 0x07
 16829 000007E7 83EC07              <5>  sub word sp, %1
 16830 000007EA 54                  <5>  push sp
 16831 000007EB 5D                  <5>  pop bp
 16832 000007EC 8C4E00              <4>  mov word [bp+0],%1
 16833 000007EF C74602[BE1F]        <4>  mov word [bp+2],%2
 16834 000007F4 C6460408            <4>  mov byte [bp+4],%3
 16835 000007F8 C646050D            <4>  mov byte [bp+5],%4
 16836 000007FC 884606              <4>  mov byte [bp+6],%5
 16837 000007FF E8(681A)            <4>  call proc_drawstring
 16838                              <4>  stkclose 0x07
 16839 00000802 83C407              <5>  add word sp, %1
 16840                              <1>  %%init_message_painted:
 16841                              <1> 
 16842                              <1>  cmp16 __show_pause_message, __ZERO, cl
 16843                              <2>  cmp16 cs, %1, cs, %2, %3
 16844 00000805 8CC8                <3>  mov ax,%1
 16845 00000807 8ED8                <3>  mov ds,ax
 16846 00000809 8B1E[9A1F]          <3>  mov bx,[%2]
 16847 0000080D 8CC8                <3>  mov ax,%3
 16848 0000080F 8ED8                <3>  mov ds,ax
 16849 00000811 8B0E[AE19]          <3>  mov cx,[%4]
 16850                              <3> 
 16851 00000815 39CB                <3>  cmp bx,cx
 16852 00000817 7F06                <3>  jg %%above
 16853 00000819 7C08                <3>  jl %%below
 16854 0000081B B100                <3>  mov byte %5, 0
 16855 0000081D EB06                <3>  jmp %%endcmp
 16856                              <3>  %%above:
 16857 0000081F B101                <3>  mov byte %5, 1
 16858 00000821 EB02                <3>  jmp %%endcmp
 16859                              <3>  %%below:
 16860 00000823 B1FF                <3>  mov byte %5, -1
 16861                              <3>  %%endcmp:
 16862 00000825 80F900              <1>  cmp cl,0
 16863 00000828 7425                <1>  je %%pause_message_painted
 16864                              <1>  gui_show_message 'Pausa...', 16, 14, __message_default_color
 16865                              <2>  section .data
 16866 00001FD7 50617573612E2E2E00  <2>  %%str: db %1,0
 16867                              <2> section .text
 16868 0000082A 8CC8                <2>  mov ax,cs
 16869 0000082C 8ED8                <2>  mov ds,ax
 16870 0000082E A0[BD19]            <2>  mov al,[%4]
 16871                              <2>  __drawstring %%str, %2, %3, al
 16872                              <3>  __drawstring cs, %1, %2, %3, %4
 16873                              <4>  stkopen 0x07
 16874 00000831 83EC07              <5>  sub word sp, %1
 16875 00000834 54                  <5>  push sp
 16876 00000835 5D                  <5>  pop bp
 16877 00000836 8C4E00              <4>  mov word [bp+0],%1
 16878 00000839 C74602[D71F]        <4>  mov word [bp+2],%2
 16879 0000083E C6460410            <4>  mov byte [bp+4],%3
 16880 00000842 C646050E            <4>  mov byte [bp+5],%4
 16881 00000846 884606              <4>  mov byte [bp+6],%5
 16882 00000849 E8(681A)            <4>  call proc_drawstring
 16883                              <4>  stkclose 0x07
 16884 0000084C 83C407              <5>  add word sp, %1
 16885                              <1>  %%pause_message_painted:
 16886                              <1> 
 16887                              <1>  cmp16 __show_win_message, __ZERO, cl
 16888                              <2>  cmp16 cs, %1, cs, %2, %3
 16889 0000084F 8CC8                <3>  mov ax,%1
 16890 00000851 8ED8                <3>  mov ds,ax
 16891 00000853 8B1E[961F]          <3>  mov bx,[%2]
 16892 00000857 8CC8                <3>  mov ax,%3
 16893 00000859 8ED8                <3>  mov ds,ax
 16894 0000085B 8B0E[AE19]          <3>  mov cx,[%4]
 16895                              <3> 
 16896 0000085F 39CB                <3>  cmp bx,cx
 16897 00000861 7F06                <3>  jg %%above
 16898 00000863 7C08                <3>  jl %%below
 16899 00000865 B100                <3>  mov byte %5, 0
 16900 00000867 EB06                <3>  jmp %%endcmp
 16901                              <3>  %%above:
 16902 00000869 B101                <3>  mov byte %5, 1
 16903 0000086B EB02                <3>  jmp %%endcmp
 16904                              <3>  %%below:
 16905 0000086D B1FF                <3>  mov byte %5, -1
 16906                              <3>  %%endcmp:
 16907 0000086F 80F900              <1>  cmp cl,0
 16908 00000872 744A                <1>  je %%win_message_painted
 16909                              <1>  gui_show_message 'Ganhou...', 12, 13, __message_win_color
 16910                              <2>  section .data
 16911 00001FE0 47616E686F752E2E2E- <2>  %%str: db %1,0
 16912 00001FE9 00                  <2>
 16913                              <2> section .text
 16914 00000874 8CC8                <2>  mov ax,cs
 16915 00000876 8ED8                <2>  mov ds,ax
 16916 00000878 A0[BE19]            <2>  mov al,[%4]
 16917                              <2>  __drawstring %%str, %2, %3, al
 16918                              <3>  __drawstring cs, %1, %2, %3, %4
 16919                              <4>  stkopen 0x07
 16920 0000087B 83EC07              <5>  sub word sp, %1
 16921 0000087E 54                  <5>  push sp
 16922 0000087F 5D                  <5>  pop bp
 16923 00000880 8C4E00              <4>  mov word [bp+0],%1
 16924 00000883 C74602[E01F]        <4>  mov word [bp+2],%2
 16925 00000888 C646040C            <4>  mov byte [bp+4],%3
 16926 0000088C C646050D            <4>  mov byte [bp+5],%4
 16927 00000890 884606              <4>  mov byte [bp+6],%5
 16928 00000893 E8(681A)            <4>  call proc_drawstring
 16929                              <4>  stkclose 0x07
 16930 00000896 83C407              <5>  add word sp, %1
 16931                              <1>  gui_show_message 'Parabens !!!', 12, 14, __message_default_color
 16932                              <2>  section .data
 16933 00001FEA 5061726162656E7320- <2>  %%str: db %1,0
 16934 00001FF3 21212100            <2>
 16935                              <2> section .text
 16936 00000899 8CC8                <2>  mov ax,cs
 16937 0000089B 8ED8                <2>  mov ds,ax
 16938 0000089D A0[BD19]            <2>  mov al,[%4]
 16939                              <2>  __drawstring %%str, %2, %3, al
 16940                              <3>  __drawstring cs, %1, %2, %3, %4
 16941                              <4>  stkopen 0x07
 16942 000008A0 83EC07              <5>  sub word sp, %1
 16943 000008A3 54                  <5>  push sp
 16944 000008A4 5D                  <5>  pop bp
 16945 000008A5 8C4E00              <4>  mov word [bp+0],%1
 16946 000008A8 C74602[EA1F]        <4>  mov word [bp+2],%2
 16947 000008AD C646040C            <4>  mov byte [bp+4],%3
 16948 000008B1 C646050E            <4>  mov byte [bp+5],%4
 16949 000008B5 884606              <4>  mov byte [bp+6],%5
 16950 000008B8 E8(681A)            <4>  call proc_drawstring
 16951                              <4>  stkclose 0x07
 16952 000008BB 83C407              <5>  add word sp, %1
 16953                              <1>  %%win_message_painted:
 16954                              <1> 
 16955                              <1>  cmp16 __show_lose_message, __ZERO, cl
 16956                              <2>  cmp16 cs, %1, cs, %2, %3
 16957 000008BE 8CC8                <3>  mov ax,%1
 16958 000008C0 8ED8                <3>  mov ds,ax
 16959 000008C2 8B1E[981F]          <3>  mov bx,[%2]
 16960 000008C6 8CC8                <3>  mov ax,%3
 16961 000008C8 8ED8                <3>  mov ds,ax
 16962 000008CA 8B0E[AE19]          <3>  mov cx,[%4]
 16963                              <3> 
 16964 000008CE 39CB                <3>  cmp bx,cx
 16965 000008D0 7F06                <3>  jg %%above
 16966 000008D2 7C08                <3>  jl %%below
 16967 000008D4 B100                <3>  mov byte %5, 0
 16968 000008D6 EB06                <3>  jmp %%endcmp
 16969                              <3>  %%above:
 16970 000008D8 B101                <3>  mov byte %5, 1
 16971 000008DA EB02                <3>  jmp %%endcmp
 16972                              <3>  %%below:
 16973 000008DC B1FF                <3>  mov byte %5, -1
 16974                              <3>  %%endcmp:
 16975 000008DE 80F900              <1>  cmp cl,0
 16976 000008E1 744A                <1>  je %%lose_message_painted
 16977                              <1>  gui_show_message 'Perdeu...', 11, 13, __message_lose_color
 16978                              <2>  section .data
 16979 00001FF7 5065726465752E2E2E- <2>  %%str: db %1,0
 16980 00002000 00                  <2>
 16981                              <2> section .text
 16982 000008E3 8CC8                <2>  mov ax,cs
 16983 000008E5 8ED8                <2>  mov ds,ax
 16984 000008E7 A0[BF19]            <2>  mov al,[%4]
 16985                              <2>  __drawstring %%str, %2, %3, al
 16986                              <3>  __drawstring cs, %1, %2, %3, %4
 16987                              <4>  stkopen 0x07
 16988 000008EA 83EC07              <5>  sub word sp, %1
 16989 000008ED 54                  <5>  push sp
 16990 000008EE 5D                  <5>  pop bp
 16991 000008EF 8C4E00              <4>  mov word [bp+0],%1
 16992 000008F2 C74602[F71F]        <4>  mov word [bp+2],%2
 16993 000008F7 C646040B            <4>  mov byte [bp+4],%3
 16994 000008FB C646050D            <4>  mov byte [bp+5],%4
 16995 000008FF 884606              <4>  mov byte [bp+6],%5
 16996 00000902 E8(681A)            <4>  call proc_drawstring
 16997                              <4>  stkclose 0x07
 16998 00000905 83C407              <5>  add word sp, %1
 16999                              <1>  gui_show_message 'Tente novamente !', 11, 14, __message_default_color
 17000                              <2>  section .data
 17001 00002001 54656E7465206E6F76- <2>  %%str: db %1,0
 17002 0000200A 616D656E7465202100  <2>
 17003                              <2> section .text
 17004 00000908 8CC8                <2>  mov ax,cs
 17005 0000090A 8ED8                <2>  mov ds,ax
 17006 0000090C A0[BD19]            <2>  mov al,[%4]
 17007                              <2>  __drawstring %%str, %2, %3, al
 17008                              <3>  __drawstring cs, %1, %2, %3, %4
 17009                              <4>  stkopen 0x07
 17010 0000090F 83EC07              <5>  sub word sp, %1
 17011 00000912 54                  <5>  push sp
 17012 00000913 5D                  <5>  pop bp
 17013 00000914 8C4E00              <4>  mov word [bp+0],%1
 17014 00000917 C74602[0120]        <4>  mov word [bp+2],%2
 17015 0000091C C646040B            <4>  mov byte [bp+4],%3
 17016 00000920 C646050E            <4>  mov byte [bp+5],%4
 17017 00000924 884606              <4>  mov byte [bp+6],%5
 17018 00000927 E8(681A)            <4>  call proc_drawstring
 17019                              <4>  stkclose 0x07
 17020 0000092A 83C407              <5>  add word sp, %1
 17021                              <1>  %%lose_message_painted:
 17022                                  			
 17023 0000092D 59                      		pop cx
 17024 0000092E 80F900                  		cmp cl,0
 17025 00000931 7414                    		jz run
 17026 00000933 B400                    			mov ah,00h
 17027 00000935 CD16                    			int 16h
 17028                                  			game_hide_init_message			
 17029                              <1>  mov16 __show_init_message, __ZERO
 17030                              <2>  mov16 cs, %1, cs, %2
 17031 00000937 8CC8                <3>  mov ax,%3
 17032 00000939 8ED8                <3>  mov ds,ax
 17033 0000093B 8B1E[AE19]          <3>  mov bx,[%4]
 17034 0000093F 8CC8                <3>  mov ax,%1
 17035 00000941 8ED8                <3>  mov ds,ax
 17036 00000943 891E[941F]          <3>  mov [%2],bx
 17037                                  	run:
 17038                                  		game_status cl
 17039                              <1>  cmp16 __lose, __ONE, cl
 17040                              <2>  cmp16 cs, %1, cs, %2, %3
 17041 00000947 8CC8                <3>  mov ax,%1
 17042 00000949 8ED8                <3>  mov ds,ax
 17043 0000094B 8B1E[921F]          <3>  mov bx,[%2]
 17044 0000094F 8CC8                <3>  mov ax,%3
 17045 00000951 8ED8                <3>  mov ds,ax
 17046 00000953 8B0E[B019]          <3>  mov cx,[%4]
 17047                              <3> 
 17048 00000957 39CB                <3>  cmp bx,cx
 17049 00000959 7F06                <3>  jg %%above
 17050 0000095B 7C08                <3>  jl %%below
 17051 0000095D B100                <3>  mov byte %5, 0
 17052 0000095F EB06                <3>  jmp %%endcmp
 17053                              <3>  %%above:
 17054 00000961 B101                <3>  mov byte %5, 1
 17055 00000963 EB02                <3>  jmp %%endcmp
 17056                              <3>  %%below:
 17057 00000965 B1FF                <3>  mov byte %5, -1
 17058                              <3>  %%endcmp:
 17059 00000967 80F900              <1>  cmp cl,0
 17060 0000096A 742D                <1>  jz %%lose
 17061                              <1> 
 17062                              <1>  cmp16 __square_count, __ZERO, cl
 17063                              <2>  cmp16 cs, %1, cs, %2, %3
 17064 0000096C 8CC8                <3>  mov ax,%1
 17065 0000096E 8ED8                <3>  mov ds,ax
 17066 00000970 8B1E[2C1A]          <3>  mov bx,[%2]
 17067 00000974 8CC8                <3>  mov ax,%3
 17068 00000976 8ED8                <3>  mov ds,ax
 17069 00000978 8B0E[AE19]          <3>  mov cx,[%4]
 17070                              <3> 
 17071 0000097C 39CB                <3>  cmp bx,cx
 17072 0000097E 7F06                <3>  jg %%above
 17073 00000980 7C08                <3>  jl %%below
 17074 00000982 B100                <3>  mov byte %5, 0
 17075 00000984 EB06                <3>  jmp %%endcmp
 17076                              <3>  %%above:
 17077 00000986 B101                <3>  mov byte %5, 1
 17078 00000988 EB02                <3>  jmp %%endcmp
 17079                              <3>  %%below:
 17080 0000098A B1FF                <3>  mov byte %5, -1
 17081                              <3>  %%endcmp:
 17082 0000098C 80F900              <1>  cmp cl,0
 17083 0000098F 7404                <1>  jz %%win
 17084                              <1> 
 17085                              <1>  %%playering:
 17086 00000991 B100                <1>  mov byte %1, 0
 17087 00000993 EB06                <1>  jmp %%end
 17088                              <1>  %%win:
 17089 00000995 B101                <1>  mov byte %1, 1
 17090 00000997 EB02                <1>  jmp %%end
 17091                              <1>  %%lose:
 17092 00000999 B102                <1>  mov byte %1, 2
 17093                              <1>  %%end:
 17094 0000099B 80F901                  		cmp cl,1
 17095 0000099E 7407                    		je win
 17096 000009A0 80F902                  		cmp cl,2
 17097 000009A3 7415                    		je lose
 17098 000009A5 EB26                    		jmp playering
 17099                                  		win:
 17100                                  			game_show_win_message
 17101                              <1>  mov16 __show_win_message, __ONE
 17102                              <2>  mov16 cs, %1, cs, %2
 17103 000009A7 8CC8                <3>  mov ax,%3
 17104 000009A9 8ED8                <3>  mov ds,ax
 17105 000009AB 8B1E[B019]          <3>  mov bx,[%4]
 17106 000009AF 8CC8                <3>  mov ax,%1
 17107 000009B1 8ED8                <3>  mov ds,ax
 17108 000009B3 891E[961F]          <3>  mov [%2],bx
 17109 000009B7 E9C825                  			jmp finish
 17110                                  		lose:
 17111                                  			game_show_lose_message
 17112                              <1>  mov16 __show_lose_message, __ONE
 17113                              <2>  mov16 cs, %1, cs, %2
 17114 000009BA 8CC8                <3>  mov ax,%3
 17115 000009BC 8ED8                <3>  mov ds,ax
 17116 000009BE 8B1E[B019]          <3>  mov bx,[%4]
 17117 000009C2 8CC8                <3>  mov ax,%1
 17118 000009C4 8ED8                <3>  mov ds,ax
 17119 000009C6 891E[981F]          <3>  mov [%2],bx
 17120 000009CA E9B525                  			jmp finish
 17121                                  		playering:
 17122                                  					
 17123                                  		game_moveball
 17124                              <1>  tray_throw_colision
 17125                              <2> section .data
 17126 00002013 00000000            <2>  %%rb: dd 0
 17127 00002017 0000                <2>  %%aux: dw 0
 17128                              <2> section .text
 17129                              <2>  fltoint16 __ball_radial, %%rb
 17130                              <3>  fltoint16 cs, %1, cs, %2
 17131                              <4>  stkopen 0x06
 17132 000009CD 83EC06              <5>  sub word sp, %1
 17133 000009D0 54                  <5>  push sp
 17134 000009D1 5D                  <5>  pop bp
 17135 000009D2 8CC8                <4>  mov ax,%1
 17136 000009D4 8ED8                <4>  mov ds,ax
 17137 000009D6 A1[501A]            <4>  mov ax,[%2+2]
 17138 000009D9 894600              <4>  mov [bp+0],ax
 17139 000009DC A1[4E1A]            <4>  mov ax,[%2]
 17140 000009DF 894602              <4>  mov [bp+2],ax
 17141 000009E2 E8(C305)            <4>  call proc_fltoint16
 17142 000009E5 89E0                <4>  mov ax,sp
 17143 000009E7 89C5                <4>  mov bp,ax
 17144 000009E9 8CC8                <4>  mov ax,%3
 17145 000009EB 8ED8                <4>  mov ds,ax
 17146 000009ED 8B4604              <4>  mov ax,[bp+4]
 17147 000009F0 A3[1320]            <4>  mov [%4],ax
 17148                              <4>  stkclose 0x06
 17149 000009F3 83C406              <5>  add word sp, %1
 17150                              <2> 
 17151                              <2>  fltoint16 __ball_x, %%aux
 17152                              <3>  fltoint16 cs, %1, cs, %2
 17153                              <4>  stkopen 0x06
 17154 000009F6 83EC06              <5>  sub word sp, %1
 17155 000009F9 54                  <5>  push sp
 17156 000009FA 5D                  <5>  pop bp
 17157 000009FB 8CC8                <4>  mov ax,%1
 17158 000009FD 8ED8                <4>  mov ds,ax
 17159 000009FF A1[481A]            <4>  mov ax,[%2+2]
 17160 00000A02 894600              <4>  mov [bp+0],ax
 17161 00000A05 A1[461A]            <4>  mov ax,[%2]
 17162 00000A08 894602              <4>  mov [bp+2],ax
 17163 00000A0B E8(C305)            <4>  call proc_fltoint16
 17164 00000A0E 89E0                <4>  mov ax,sp
 17165 00000A10 89C5                <4>  mov bp,ax
 17166 00000A12 8CC8                <4>  mov ax,%3
 17167 00000A14 8ED8                <4>  mov ds,ax
 17168 00000A16 8B4604              <4>  mov ax,[bp+4]
 17169 00000A19 A3[1720]            <4>  mov [%4],ax
 17170                              <4>  stkclose 0x06
 17171 00000A1C 83C406              <5>  add word sp, %1
 17172                              <2>  sub16 %%aux, %%rb
 17173                              <3>  sub16 cs, %1, cs, %2
 17174 00000A1F 8CC8                <4>  mov ax,%3
 17175 00000A21 8ED8                <4>  mov ds,ax
 17176 00000A23 8B1E[1320]          <4>  mov bx,[%4]
 17177 00000A27 8CC8                <4>  mov ax,%1
 17178 00000A29 8ED8                <4>  mov ds,ax
 17179 00000A2B 291E[1720]          <4>  sub [%2],bx
 17180                              <2>  cmp16 %%aux, __tray_x1, cl
 17181                              <3>  cmp16 cs, %1, cs, %2, %3
 17182 00000A2F 8CC8                <4>  mov ax,%1
 17183 00000A31 8ED8                <4>  mov ds,ax
 17184 00000A33 8B1E[1720]          <4>  mov bx,[%2]
 17185 00000A37 8CC8                <4>  mov ax,%3
 17186 00000A39 8ED8                <4>  mov ds,ax
 17187 00000A3B 8B0E[181A]          <4>  mov cx,[%4]
 17188                              <4> 
 17189 00000A3F 39CB                <4>  cmp bx,cx
 17190 00000A41 7F06                <4>  jg %%above
 17191 00000A43 7C08                <4>  jl %%below
 17192 00000A45 B100                <4>  mov byte %5, 0
 17193 00000A47 EB06                <4>  jmp %%endcmp
 17194                              <4>  %%above:
 17195 00000A49 B101                <4>  mov byte %5, 1
 17196 00000A4B EB02                <4>  jmp %%endcmp
 17197                              <4>  %%below:
 17198 00000A4D B1FF                <4>  mov byte %5, -1
 17199                              <4>  %%endcmp:
 17200 00000A4F 80F900              <2>  cmp cl,0
 17201 00000A52 0F8F7401            <2>  jg %%endsidex1
 17202                              <2>  ball_xinvdirection
 17203                              <3>  flinvsig __ball_angle
 17204                              <4>  flinvsig cs, %1
 17205                              <5>  stkopen 0x02
 17206 00000A56 83EC02              <6>  sub word sp, %1
 17207 00000A59 54                  <6>  push sp
 17208 00000A5A 5D                  <6>  pop bp
 17209 00000A5B 8CC8                <5>  mov ax,%1
 17210 00000A5D 8ED8                <5>  mov ds,ax
 17211 00000A5F A1[601A]            <5>  mov ax,[%2+2]
 17212 00000A62 894600              <5>  mov word [bp+0], ax
 17213 00000A65 E8(B510)            <5>  call proc_flinvsig
 17214 00000A68 54                  <5>  push sp
 17215 00000A69 5D                  <5>  pop bp
 17216 00000A6A 8B4600              <5>  mov ax,[bp+0]
 17217 00000A6D A3[601A]            <5>  mov word [%2+2],ax
 17218                              <5>  stkclose 0x02
 17219 00000A70 83C402              <6>  add word sp, %1
 17220                              <3>  to0x360 __ball_angle
 17221                              <4>  to0x360 %1, %1
 17222                              <5>  to0x360 cs, %1, cs, %2
 17223                              <6>  stkopen 0x08
 17224 00000A73 83EC08              <7>  sub word sp, %1
 17225 00000A76 54                  <7>  push sp
 17226 00000A77 5D                  <7>  pop bp
 17227 00000A78 8CC8                <6>  mov ax,%1
 17228 00000A7A 8ED8                <6>  mov ds,ax
 17229 00000A7C A1[601A]            <6>  mov ax,[%2+2]
 17230 00000A7F 894600              <6>  mov [bp+0],ax
 17231 00000A82 A1[5E1A]            <6>  mov ax,[%2]
 17232 00000A85 894602              <6>  mov [bp+2],ax
 17233 00000A88 E8(9512)            <6>  call proc_to0x360
 17234 00000A8B 89E0                <6>  mov ax,sp
 17235 00000A8D 89C5                <6>  mov bp,ax
 17236 00000A8F 8CC8                <6>  mov ax,%3
 17237 00000A91 8ED8                <6>  mov ds,ax
 17238 00000A93 8B4604              <6>  mov ax,[bp+4]
 17239 00000A96 A3[601A]            <6>  mov [%4+2],ax
 17240 00000A99 8B4606              <6>  mov ax,[bp+6]
 17241 00000A9C A3[5E1A]            <6>  mov [%4],ax
 17242                              <6>  stkclose 0x08
 17243 00000A9F 83C408              <7>  add word sp, %1
 17244                              <3>  fladd __ball_angle, PI, __ball_angle
 17245                              <4>  fladd cs, %1, cs, %2, cs, %3
 17246                              <5>  fladdorsub %1, %2, %3, %4, %5, %6, 0
 17247                              <6>  stkopen 0x0E
 17248 00000AA2 83EC0E              <7>  sub word sp, %1
 17249 00000AA5 54                  <7>  push sp
 17250 00000AA6 5D                  <7>  pop bp
 17251 00000AA7 8CC8                <6>  mov ax,%1
 17252 00000AA9 8ED8                <6>  mov ds,ax
 17253 00000AAB A1[601A]            <6>  mov ax,[%2+2]
 17254 00000AAE 894600              <6>  mov [bp+0],ax
 17255 00000AB1 A1[5E1A]            <6>  mov ax,[%2]
 17256 00000AB4 894602              <6>  mov [bp+2],ax
 17257 00000AB7 8CC8                <6>  mov ax,%3
 17258 00000AB9 8ED8                <6>  mov ds,ax
 17259 00000ABB A1[8F12]            <6>  mov ax,[%4+2]
 17260 00000ABE 894604              <6>  mov [bp+4],ax
 17261 00000AC1 A1[8D12]            <6>  mov ax,[%4]
 17262 00000AC4 894606              <6>  mov [bp+6],ax
 17263 00000AC7 C7460C0000          <6>  mov word [bp+0x0C], %7
 17264 00000ACC E8(510C)            <6>  call proc_fladdorsub
 17265 00000ACF 89E0                <6>  mov ax,sp
 17266 00000AD1 89C5                <6>  mov bp,ax
 17267 00000AD3 8CC8                <6>  mov ax,%5
 17268 00000AD5 8ED8                <6>  mov ds,ax
 17269 00000AD7 8B4608              <6>  mov ax,[bp+8]
 17270 00000ADA A3[601A]            <6>  mov [%6+2],ax
 17271 00000ADD 8B460A              <6>  mov ax,[bp+0x0A]
 17272 00000AE0 A3[5E1A]            <6>  mov [%6],ax
 17273                              <6>  stkclose 0x0E
 17274 00000AE3 83C40E              <7>  add word sp, %1
 17275                              <3>  ball_updateangle
 17276                              <4>  cos __ball_angle, __ball_xinc
 17277                              <5>  cos cs, %1, cs, %2
 17278                              <6>  sinorcos %1, %2, %3, %4, 0
 17279                              <7>  stkopen 0x09
 17280 00000AE6 83EC09              <8>  sub word sp, %1
 17281 00000AE9 54                  <8>  push sp
 17282 00000AEA 5D                  <8>  pop bp
 17283 00000AEB 8CC8                <7>  mov ax,%1
 17284 00000AED 8ED8                <7>  mov ds,ax
 17285 00000AEF A1[601A]            <7>  mov ax,[%2+2]
 17286 00000AF2 894600              <7>  mov [bp+0],ax
 17287 00000AF5 A1[5E1A]            <7>  mov ax,[%2]
 17288 00000AF8 894602              <7>  mov [bp+2],ax
 17289 00000AFB C6460800            <7>  mov byte [bp+8],%5
 17290 00000AFF E8(4E14)            <7>  call proc_sinorcos
 17291 00000B02 89E0                <7>  mov ax,sp
 17292 00000B04 89C5                <7>  mov bp,ax
 17293 00000B06 8CC8                <7>  mov ax,%3
 17294 00000B08 8ED8                <7>  mov ds,ax
 17295 00000B0A 8B4604              <7>  mov ax,[bp+4]
 17296 00000B0D A3[541A]            <7>  mov [%4+2],ax
 17297 00000B10 8B4606              <7>  mov ax,[bp+6]
 17298 00000B13 A3[521A]            <7>  mov [%4],ax
 17299                              <7>  stkclose 0x09
 17300 00000B16 83C409              <8>  add word sp, %1
 17301                              <4>  sin __ball_angle, __ball_yinc
 17302                              <5>  sin cs, %1, cs, %2
 17303                              <6>  sinorcos %1, %2, %3, %4, 1
 17304                              <7>  stkopen 0x09
 17305 00000B19 83EC09              <8>  sub word sp, %1
 17306 00000B1C 54                  <8>  push sp
 17307 00000B1D 5D                  <8>  pop bp
 17308 00000B1E 8CC8                <7>  mov ax,%1
 17309 00000B20 8ED8                <7>  mov ds,ax
 17310 00000B22 A1[601A]            <7>  mov ax,[%2+2]
 17311 00000B25 894600              <7>  mov [bp+0],ax
 17312 00000B28 A1[5E1A]            <7>  mov ax,[%2]
 17313 00000B2B 894602              <7>  mov [bp+2],ax
 17314 00000B2E C6460801            <7>  mov byte [bp+8],%5
 17315 00000B32 E8(4E14)            <7>  call proc_sinorcos
 17316 00000B35 89E0                <7>  mov ax,sp
 17317 00000B37 89C5                <7>  mov bp,ax
 17318 00000B39 8CC8                <7>  mov ax,%3
 17319 00000B3B 8ED8                <7>  mov ds,ax
 17320 00000B3D 8B4604              <7>  mov ax,[bp+4]
 17321 00000B40 A3[581A]            <7>  mov [%4+2],ax
 17322 00000B43 8B4606              <7>  mov ax,[bp+6]
 17323 00000B46 A3[561A]            <7>  mov [%4],ax
 17324                              <7>  stkclose 0x09
 17325 00000B49 83C409              <8>  add word sp, %1
 17326                              <4> 
 17327                              <4>  flmul __ball_xinc, __ball_rinc, __ball_xinc
 17328                              <5>  flmul cs, %1, cs, %2, cs, %3
 17329                              <6>  stkopen 0x0C
 17330 00000B4C 83EC0C              <7>  sub word sp, %1
 17331 00000B4F 54                  <7>  push sp
 17332 00000B50 5D                  <7>  pop bp
 17333 00000B51 8CC8                <6>  mov ax,%1
 17334 00000B53 8ED8                <6>  mov ds,ax
 17335 00000B55 A1[541A]            <6>  mov ax,[%2+2]
 17336 00000B58 894600              <6>  mov [bp+0],ax
 17337 00000B5B A1[521A]            <6>  mov ax,[%2]
 17338 00000B5E 894602              <6>  mov [bp+2],ax
 17339 00000B61 8CC8                <6>  mov ax,%3
 17340 00000B63 8ED8                <6>  mov ds,ax
 17341 00000B65 A1[5C1A]            <6>  mov ax,[%4+2]
 17342 00000B68 894604              <6>  mov [bp+4],ax
 17343 00000B6B A1[5A1A]            <6>  mov ax,[%4]
 17344 00000B6E 894606              <6>  mov [bp+6],ax
 17345 00000B71 E8(A50A)            <6>  call proc_flmul
 17346 00000B74 89E0                <6>  mov ax,sp
 17347 00000B76 89C5                <6>  mov bp,ax
 17348 00000B78 8CC8                <6>  mov ax,%5
 17349 00000B7A 8ED8                <6>  mov ds,ax
 17350 00000B7C 8B4608              <6>  mov ax,[bp+8]
 17351 00000B7F A3[541A]            <6>  mov [%6+2],ax
 17352 00000B82 8B460A              <6>  mov ax,[bp+0x0A]
 17353 00000B85 A3[521A]            <6>  mov [%6],ax
 17354                              <6>  stkclose 0x0C
 17355 00000B88 83C40C              <7>  add word sp, %1
 17356                              <4>  flmul __ball_yinc, __ball_rinc, __ball_yinc
 17357                              <5>  flmul cs, %1, cs, %2, cs, %3
 17358                              <6>  stkopen 0x0C
 17359 00000B8B 83EC0C              <7>  sub word sp, %1
 17360 00000B8E 54                  <7>  push sp
 17361 00000B8F 5D                  <7>  pop bp
 17362 00000B90 8CC8                <6>  mov ax,%1
 17363 00000B92 8ED8                <6>  mov ds,ax
 17364 00000B94 A1[581A]            <6>  mov ax,[%2+2]
 17365 00000B97 894600              <6>  mov [bp+0],ax
 17366 00000B9A A1[561A]            <6>  mov ax,[%2]
 17367 00000B9D 894602              <6>  mov [bp+2],ax
 17368 00000BA0 8CC8                <6>  mov ax,%3
 17369 00000BA2 8ED8                <6>  mov ds,ax
 17370 00000BA4 A1[5C1A]            <6>  mov ax,[%4+2]
 17371 00000BA7 894604              <6>  mov [bp+4],ax
 17372 00000BAA A1[5A1A]            <6>  mov ax,[%4]
 17373 00000BAD 894606              <6>  mov [bp+6],ax
 17374 00000BB0 E8(A50A)            <6>  call proc_flmul
 17375 00000BB3 89E0                <6>  mov ax,sp
 17376 00000BB5 89C5                <6>  mov bp,ax
 17377 00000BB7 8CC8                <6>  mov ax,%5
 17378 00000BB9 8ED8                <6>  mov ds,ax
 17379 00000BBB 8B4608              <6>  mov ax,[bp+8]
 17380 00000BBE A3[581A]            <6>  mov [%6+2],ax
 17381 00000BC1 8B460A              <6>  mov ax,[bp+0x0A]
 17382 00000BC4 A3[561A]            <6>  mov [%6],ax
 17383                              <6>  stkclose 0x0C
 17384 00000BC7 83C40C              <7>  add word sp, %1
 17385                              <2>  %%endsidex1:
 17386                              <2> 
 17387                              <2>  fltoint16 __ball_x, %%aux
 17388                              <3>  fltoint16 cs, %1, cs, %2
 17389                              <4>  stkopen 0x06
 17390 00000BCA 83EC06              <5>  sub word sp, %1
 17391 00000BCD 54                  <5>  push sp
 17392 00000BCE 5D                  <5>  pop bp
 17393 00000BCF 8CC8                <4>  mov ax,%1
 17394 00000BD1 8ED8                <4>  mov ds,ax
 17395 00000BD3 A1[481A]            <4>  mov ax,[%2+2]
 17396 00000BD6 894600              <4>  mov [bp+0],ax
 17397 00000BD9 A1[461A]            <4>  mov ax,[%2]
 17398 00000BDC 894602              <4>  mov [bp+2],ax
 17399 00000BDF E8(C305)            <4>  call proc_fltoint16
 17400 00000BE2 89E0                <4>  mov ax,sp
 17401 00000BE4 89C5                <4>  mov bp,ax
 17402 00000BE6 8CC8                <4>  mov ax,%3
 17403 00000BE8 8ED8                <4>  mov ds,ax
 17404 00000BEA 8B4604              <4>  mov ax,[bp+4]
 17405 00000BED A3[1720]            <4>  mov [%4],ax
 17406                              <4>  stkclose 0x06
 17407 00000BF0 83C406              <5>  add word sp, %1
 17408                              <2>  add16 %%aux, %%rb
 17409                              <3>  add16 cs, %1, cs, %2
 17410 00000BF3 8CC8                <4>  mov ax,%3
 17411 00000BF5 8ED8                <4>  mov ds,ax
 17412 00000BF7 8B1E[1320]          <4>  mov bx,[%4]
 17413 00000BFB 8CC8                <4>  mov ax,%1
 17414 00000BFD 8ED8                <4>  mov ds,ax
 17415 00000BFF 011E[1720]          <4>  add [%2],bx
 17416                              <2>  cmp16 %%aux, __tray_x2, cl
 17417                              <3>  cmp16 cs, %1, cs, %2, %3
 17418 00000C03 8CC8                <4>  mov ax,%1
 17419 00000C05 8ED8                <4>  mov ds,ax
 17420 00000C07 8B1E[1720]          <4>  mov bx,[%2]
 17421 00000C0B 8CC8                <4>  mov ax,%3
 17422 00000C0D 8ED8                <4>  mov ds,ax
 17423 00000C0F 8B0E[1C1A]          <4>  mov cx,[%4]
 17424                              <4> 
 17425 00000C13 39CB                <4>  cmp bx,cx
 17426 00000C15 7F06                <4>  jg %%above
 17427 00000C17 7C08                <4>  jl %%below
 17428 00000C19 B100                <4>  mov byte %5, 0
 17429 00000C1B EB06                <4>  jmp %%endcmp
 17430                              <4>  %%above:
 17431 00000C1D B101                <4>  mov byte %5, 1
 17432 00000C1F EB02                <4>  jmp %%endcmp
 17433                              <4>  %%below:
 17434 00000C21 B1FF                <4>  mov byte %5, -1
 17435                              <4>  %%endcmp:
 17436 00000C23 80F900              <2>  cmp cl,0
 17437 00000C26 0F8C7401            <2>  jl %%endsidex2
 17438                              <2>  ball_xinvdirection
 17439                              <3>  flinvsig __ball_angle
 17440                              <4>  flinvsig cs, %1
 17441                              <5>  stkopen 0x02
 17442 00000C2A 83EC02              <6>  sub word sp, %1
 17443 00000C2D 54                  <6>  push sp
 17444 00000C2E 5D                  <6>  pop bp
 17445 00000C2F 8CC8                <5>  mov ax,%1
 17446 00000C31 8ED8                <5>  mov ds,ax
 17447 00000C33 A1[601A]            <5>  mov ax,[%2+2]
 17448 00000C36 894600              <5>  mov word [bp+0], ax
 17449 00000C39 E8(B510)            <5>  call proc_flinvsig
 17450 00000C3C 54                  <5>  push sp
 17451 00000C3D 5D                  <5>  pop bp
 17452 00000C3E 8B4600              <5>  mov ax,[bp+0]
 17453 00000C41 A3[601A]            <5>  mov word [%2+2],ax
 17454                              <5>  stkclose 0x02
 17455 00000C44 83C402              <6>  add word sp, %1
 17456                              <3>  to0x360 __ball_angle
 17457                              <4>  to0x360 %1, %1
 17458                              <5>  to0x360 cs, %1, cs, %2
 17459                              <6>  stkopen 0x08
 17460 00000C47 83EC08              <7>  sub word sp, %1
 17461 00000C4A 54                  <7>  push sp
 17462 00000C4B 5D                  <7>  pop bp
 17463 00000C4C 8CC8                <6>  mov ax,%1
 17464 00000C4E 8ED8                <6>  mov ds,ax
 17465 00000C50 A1[601A]            <6>  mov ax,[%2+2]
 17466 00000C53 894600              <6>  mov [bp+0],ax
 17467 00000C56 A1[5E1A]            <6>  mov ax,[%2]
 17468 00000C59 894602              <6>  mov [bp+2],ax
 17469 00000C5C E8(9512)            <6>  call proc_to0x360
 17470 00000C5F 89E0                <6>  mov ax,sp
 17471 00000C61 89C5                <6>  mov bp,ax
 17472 00000C63 8CC8                <6>  mov ax,%3
 17473 00000C65 8ED8                <6>  mov ds,ax
 17474 00000C67 8B4604              <6>  mov ax,[bp+4]
 17475 00000C6A A3[601A]            <6>  mov [%4+2],ax
 17476 00000C6D 8B4606              <6>  mov ax,[bp+6]
 17477 00000C70 A3[5E1A]            <6>  mov [%4],ax
 17478                              <6>  stkclose 0x08
 17479 00000C73 83C408              <7>  add word sp, %1
 17480                              <3>  fladd __ball_angle, PI, __ball_angle
 17481                              <4>  fladd cs, %1, cs, %2, cs, %3
 17482                              <5>  fladdorsub %1, %2, %3, %4, %5, %6, 0
 17483                              <6>  stkopen 0x0E
 17484 00000C76 83EC0E              <7>  sub word sp, %1
 17485 00000C79 54                  <7>  push sp
 17486 00000C7A 5D                  <7>  pop bp
 17487 00000C7B 8CC8                <6>  mov ax,%1
 17488 00000C7D 8ED8                <6>  mov ds,ax
 17489 00000C7F A1[601A]            <6>  mov ax,[%2+2]
 17490 00000C82 894600              <6>  mov [bp+0],ax
 17491 00000C85 A1[5E1A]            <6>  mov ax,[%2]
 17492 00000C88 894602              <6>  mov [bp+2],ax
 17493 00000C8B 8CC8                <6>  mov ax,%3
 17494 00000C8D 8ED8                <6>  mov ds,ax
 17495 00000C8F A1[8F12]            <6>  mov ax,[%4+2]
 17496 00000C92 894604              <6>  mov [bp+4],ax
 17497 00000C95 A1[8D12]            <6>  mov ax,[%4]
 17498 00000C98 894606              <6>  mov [bp+6],ax
 17499 00000C9B C7460C0000          <6>  mov word [bp+0x0C], %7
 17500 00000CA0 E8(510C)            <6>  call proc_fladdorsub
 17501 00000CA3 89E0                <6>  mov ax,sp
 17502 00000CA5 89C5                <6>  mov bp,ax
 17503 00000CA7 8CC8                <6>  mov ax,%5
 17504 00000CA9 8ED8                <6>  mov ds,ax
 17505 00000CAB 8B4608              <6>  mov ax,[bp+8]
 17506 00000CAE A3[601A]            <6>  mov [%6+2],ax
 17507 00000CB1 8B460A              <6>  mov ax,[bp+0x0A]
 17508 00000CB4 A3[5E1A]            <6>  mov [%6],ax
 17509                              <6>  stkclose 0x0E
 17510 00000CB7 83C40E              <7>  add word sp, %1
 17511                              <3>  ball_updateangle
 17512                              <4>  cos __ball_angle, __ball_xinc
 17513                              <5>  cos cs, %1, cs, %2
 17514                              <6>  sinorcos %1, %2, %3, %4, 0
 17515                              <7>  stkopen 0x09
 17516 00000CBA 83EC09              <8>  sub word sp, %1
 17517 00000CBD 54                  <8>  push sp
 17518 00000CBE 5D                  <8>  pop bp
 17519 00000CBF 8CC8                <7>  mov ax,%1
 17520 00000CC1 8ED8                <7>  mov ds,ax
 17521 00000CC3 A1[601A]            <7>  mov ax,[%2+2]
 17522 00000CC6 894600              <7>  mov [bp+0],ax
 17523 00000CC9 A1[5E1A]            <7>  mov ax,[%2]
 17524 00000CCC 894602              <7>  mov [bp+2],ax
 17525 00000CCF C6460800            <7>  mov byte [bp+8],%5
 17526 00000CD3 E8(4E14)            <7>  call proc_sinorcos
 17527 00000CD6 89E0                <7>  mov ax,sp
 17528 00000CD8 89C5                <7>  mov bp,ax
 17529 00000CDA 8CC8                <7>  mov ax,%3
 17530 00000CDC 8ED8                <7>  mov ds,ax
 17531 00000CDE 8B4604              <7>  mov ax,[bp+4]
 17532 00000CE1 A3[541A]            <7>  mov [%4+2],ax
 17533 00000CE4 8B4606              <7>  mov ax,[bp+6]
 17534 00000CE7 A3[521A]            <7>  mov [%4],ax
 17535                              <7>  stkclose 0x09
 17536 00000CEA 83C409              <8>  add word sp, %1
 17537                              <4>  sin __ball_angle, __ball_yinc
 17538                              <5>  sin cs, %1, cs, %2
 17539                              <6>  sinorcos %1, %2, %3, %4, 1
 17540                              <7>  stkopen 0x09
 17541 00000CED 83EC09              <8>  sub word sp, %1
 17542 00000CF0 54                  <8>  push sp
 17543 00000CF1 5D                  <8>  pop bp
 17544 00000CF2 8CC8                <7>  mov ax,%1
 17545 00000CF4 8ED8                <7>  mov ds,ax
 17546 00000CF6 A1[601A]            <7>  mov ax,[%2+2]
 17547 00000CF9 894600              <7>  mov [bp+0],ax
 17548 00000CFC A1[5E1A]            <7>  mov ax,[%2]
 17549 00000CFF 894602              <7>  mov [bp+2],ax
 17550 00000D02 C6460801            <7>  mov byte [bp+8],%5
 17551 00000D06 E8(4E14)            <7>  call proc_sinorcos
 17552 00000D09 89E0                <7>  mov ax,sp
 17553 00000D0B 89C5                <7>  mov bp,ax
 17554 00000D0D 8CC8                <7>  mov ax,%3
 17555 00000D0F 8ED8                <7>  mov ds,ax
 17556 00000D11 8B4604              <7>  mov ax,[bp+4]
 17557 00000D14 A3[581A]            <7>  mov [%4+2],ax
 17558 00000D17 8B4606              <7>  mov ax,[bp+6]
 17559 00000D1A A3[561A]            <7>  mov [%4],ax
 17560                              <7>  stkclose 0x09
 17561 00000D1D 83C409              <8>  add word sp, %1
 17562                              <4> 
 17563                              <4>  flmul __ball_xinc, __ball_rinc, __ball_xinc
 17564                              <5>  flmul cs, %1, cs, %2, cs, %3
 17565                              <6>  stkopen 0x0C
 17566 00000D20 83EC0C              <7>  sub word sp, %1
 17567 00000D23 54                  <7>  push sp
 17568 00000D24 5D                  <7>  pop bp
 17569 00000D25 8CC8                <6>  mov ax,%1
 17570 00000D27 8ED8                <6>  mov ds,ax
 17571 00000D29 A1[541A]            <6>  mov ax,[%2+2]
 17572 00000D2C 894600              <6>  mov [bp+0],ax
 17573 00000D2F A1[521A]            <6>  mov ax,[%2]
 17574 00000D32 894602              <6>  mov [bp+2],ax
 17575 00000D35 8CC8                <6>  mov ax,%3
 17576 00000D37 8ED8                <6>  mov ds,ax
 17577 00000D39 A1[5C1A]            <6>  mov ax,[%4+2]
 17578 00000D3C 894604              <6>  mov [bp+4],ax
 17579 00000D3F A1[5A1A]            <6>  mov ax,[%4]
 17580 00000D42 894606              <6>  mov [bp+6],ax
 17581 00000D45 E8(A50A)            <6>  call proc_flmul
 17582 00000D48 89E0                <6>  mov ax,sp
 17583 00000D4A 89C5                <6>  mov bp,ax
 17584 00000D4C 8CC8                <6>  mov ax,%5
 17585 00000D4E 8ED8                <6>  mov ds,ax
 17586 00000D50 8B4608              <6>  mov ax,[bp+8]
 17587 00000D53 A3[541A]            <6>  mov [%6+2],ax
 17588 00000D56 8B460A              <6>  mov ax,[bp+0x0A]
 17589 00000D59 A3[521A]            <6>  mov [%6],ax
 17590                              <6>  stkclose 0x0C
 17591 00000D5C 83C40C              <7>  add word sp, %1
 17592                              <4>  flmul __ball_yinc, __ball_rinc, __ball_yinc
 17593                              <5>  flmul cs, %1, cs, %2, cs, %3
 17594                              <6>  stkopen 0x0C
 17595 00000D5F 83EC0C              <7>  sub word sp, %1
 17596 00000D62 54                  <7>  push sp
 17597 00000D63 5D                  <7>  pop bp
 17598 00000D64 8CC8                <6>  mov ax,%1
 17599 00000D66 8ED8                <6>  mov ds,ax
 17600 00000D68 A1[581A]            <6>  mov ax,[%2+2]
 17601 00000D6B 894600              <6>  mov [bp+0],ax
 17602 00000D6E A1[561A]            <6>  mov ax,[%2]
 17603 00000D71 894602              <6>  mov [bp+2],ax
 17604 00000D74 8CC8                <6>  mov ax,%3
 17605 00000D76 8ED8                <6>  mov ds,ax
 17606 00000D78 A1[5C1A]            <6>  mov ax,[%4+2]
 17607 00000D7B 894604              <6>  mov [bp+4],ax
 17608 00000D7E A1[5A1A]            <6>  mov ax,[%4]
 17609 00000D81 894606              <6>  mov [bp+6],ax
 17610 00000D84 E8(A50A)            <6>  call proc_flmul
 17611 00000D87 89E0                <6>  mov ax,sp
 17612 00000D89 89C5                <6>  mov bp,ax
 17613 00000D8B 8CC8                <6>  mov ax,%5
 17614 00000D8D 8ED8                <6>  mov ds,ax
 17615 00000D8F 8B4608              <6>  mov ax,[bp+8]
 17616 00000D92 A3[581A]            <6>  mov [%6+2],ax
 17617 00000D95 8B460A              <6>  mov ax,[bp+0x0A]
 17618 00000D98 A3[561A]            <6>  mov [%6],ax
 17619                              <6>  stkclose 0x0C
 17620 00000D9B 83C40C              <7>  add word sp, %1
 17621                              <2>  %%endsidex2:
 17622                              <2> 
 17623                              <2>  fltoint16 __ball_y, %%aux
 17624                              <3>  fltoint16 cs, %1, cs, %2
 17625                              <4>  stkopen 0x06
 17626 00000D9E 83EC06              <5>  sub word sp, %1
 17627 00000DA1 54                  <5>  push sp
 17628 00000DA2 5D                  <5>  pop bp
 17629 00000DA3 8CC8                <4>  mov ax,%1
 17630 00000DA5 8ED8                <4>  mov ds,ax
 17631 00000DA7 A1[4C1A]            <4>  mov ax,[%2+2]
 17632 00000DAA 894600              <4>  mov [bp+0],ax
 17633 00000DAD A1[4A1A]            <4>  mov ax,[%2]
 17634 00000DB0 894602              <4>  mov [bp+2],ax
 17635 00000DB3 E8(C305)            <4>  call proc_fltoint16
 17636 00000DB6 89E0                <4>  mov ax,sp
 17637 00000DB8 89C5                <4>  mov bp,ax
 17638 00000DBA 8CC8                <4>  mov ax,%3
 17639 00000DBC 8ED8                <4>  mov ds,ax
 17640 00000DBE 8B4604              <4>  mov ax,[bp+4]
 17641 00000DC1 A3[1720]            <4>  mov [%4],ax
 17642                              <4>  stkclose 0x06
 17643 00000DC4 83C406              <5>  add word sp, %1
 17644                              <2>  sub16 %%aux, %%rb
 17645                              <3>  sub16 cs, %1, cs, %2
 17646 00000DC7 8CC8                <4>  mov ax,%3
 17647 00000DC9 8ED8                <4>  mov ds,ax
 17648 00000DCB 8B1E[1320]          <4>  mov bx,[%4]
 17649 00000DCF 8CC8                <4>  mov ax,%1
 17650 00000DD1 8ED8                <4>  mov ds,ax
 17651 00000DD3 291E[1720]          <4>  sub [%2],bx
 17652                              <2>  cmp16 %%aux, __tray_y1, cl
 17653                              <3>  cmp16 cs, %1, cs, %2, %3
 17654 00000DD7 8CC8                <4>  mov ax,%1
 17655 00000DD9 8ED8                <4>  mov ds,ax
 17656 00000DDB 8B1E[1720]          <4>  mov bx,[%2]
 17657 00000DDF 8CC8                <4>  mov ax,%3
 17658 00000DE1 8ED8                <4>  mov ds,ax
 17659 00000DE3 8B0E[1A1A]          <4>  mov cx,[%4]
 17660                              <4> 
 17661 00000DE7 39CB                <4>  cmp bx,cx
 17662 00000DE9 7F06                <4>  jg %%above
 17663 00000DEB 7C08                <4>  jl %%below
 17664 00000DED B100                <4>  mov byte %5, 0
 17665 00000DEF EB06                <4>  jmp %%endcmp
 17666                              <4>  %%above:
 17667 00000DF1 B101                <4>  mov byte %5, 1
 17668 00000DF3 EB02                <4>  jmp %%endcmp
 17669                              <4>  %%below:
 17670 00000DF5 B1FF                <4>  mov byte %5, -1
 17671                              <4>  %%endcmp:
 17672 00000DF7 80F900              <2>  cmp cl,0
 17673 00000DFA 0F8F0101            <2>  jg %%endsidey1
 17674                              <2>  ball_yinvdirection
 17675                              <3>  flinvsig __ball_angle
 17676                              <4>  flinvsig cs, %1
 17677                              <5>  stkopen 0x02
 17678 00000DFE 83EC02              <6>  sub word sp, %1
 17679 00000E01 54                  <6>  push sp
 17680 00000E02 5D                  <6>  pop bp
 17681 00000E03 8CC8                <5>  mov ax,%1
 17682 00000E05 8ED8                <5>  mov ds,ax
 17683 00000E07 A1[601A]            <5>  mov ax,[%2+2]
 17684 00000E0A 894600              <5>  mov word [bp+0], ax
 17685 00000E0D E8(B510)            <5>  call proc_flinvsig
 17686 00000E10 54                  <5>  push sp
 17687 00000E11 5D                  <5>  pop bp
 17688 00000E12 8B4600              <5>  mov ax,[bp+0]
 17689 00000E15 A3[601A]            <5>  mov word [%2+2],ax
 17690                              <5>  stkclose 0x02
 17691 00000E18 83C402              <6>  add word sp, %1
 17692                              <3>  ball_updateangle
 17693                              <4>  cos __ball_angle, __ball_xinc
 17694                              <5>  cos cs, %1, cs, %2
 17695                              <6>  sinorcos %1, %2, %3, %4, 0
 17696                              <7>  stkopen 0x09
 17697 00000E1B 83EC09              <8>  sub word sp, %1
 17698 00000E1E 54                  <8>  push sp
 17699 00000E1F 5D                  <8>  pop bp
 17700 00000E20 8CC8                <7>  mov ax,%1
 17701 00000E22 8ED8                <7>  mov ds,ax
 17702 00000E24 A1[601A]            <7>  mov ax,[%2+2]
 17703 00000E27 894600              <7>  mov [bp+0],ax
 17704 00000E2A A1[5E1A]            <7>  mov ax,[%2]
 17705 00000E2D 894602              <7>  mov [bp+2],ax
 17706 00000E30 C6460800            <7>  mov byte [bp+8],%5
 17707 00000E34 E8(4E14)            <7>  call proc_sinorcos
 17708 00000E37 89E0                <7>  mov ax,sp
 17709 00000E39 89C5                <7>  mov bp,ax
 17710 00000E3B 8CC8                <7>  mov ax,%3
 17711 00000E3D 8ED8                <7>  mov ds,ax
 17712 00000E3F 8B4604              <7>  mov ax,[bp+4]
 17713 00000E42 A3[541A]            <7>  mov [%4+2],ax
 17714 00000E45 8B4606              <7>  mov ax,[bp+6]
 17715 00000E48 A3[521A]            <7>  mov [%4],ax
 17716                              <7>  stkclose 0x09
 17717 00000E4B 83C409              <8>  add word sp, %1
 17718                              <4>  sin __ball_angle, __ball_yinc
 17719                              <5>  sin cs, %1, cs, %2
 17720                              <6>  sinorcos %1, %2, %3, %4, 1
 17721                              <7>  stkopen 0x09
 17722 00000E4E 83EC09              <8>  sub word sp, %1
 17723 00000E51 54                  <8>  push sp
 17724 00000E52 5D                  <8>  pop bp
 17725 00000E53 8CC8                <7>  mov ax,%1
 17726 00000E55 8ED8                <7>  mov ds,ax
 17727 00000E57 A1[601A]            <7>  mov ax,[%2+2]
 17728 00000E5A 894600              <7>  mov [bp+0],ax
 17729 00000E5D A1[5E1A]            <7>  mov ax,[%2]
 17730 00000E60 894602              <7>  mov [bp+2],ax
 17731 00000E63 C6460801            <7>  mov byte [bp+8],%5
 17732 00000E67 E8(4E14)            <7>  call proc_sinorcos
 17733 00000E6A 89E0                <7>  mov ax,sp
 17734 00000E6C 89C5                <7>  mov bp,ax
 17735 00000E6E 8CC8                <7>  mov ax,%3
 17736 00000E70 8ED8                <7>  mov ds,ax
 17737 00000E72 8B4604              <7>  mov ax,[bp+4]
 17738 00000E75 A3[581A]            <7>  mov [%4+2],ax
 17739 00000E78 8B4606              <7>  mov ax,[bp+6]
 17740 00000E7B A3[561A]            <7>  mov [%4],ax
 17741                              <7>  stkclose 0x09
 17742 00000E7E 83C409              <8>  add word sp, %1
 17743                              <4> 
 17744                              <4>  flmul __ball_xinc, __ball_rinc, __ball_xinc
 17745                              <5>  flmul cs, %1, cs, %2, cs, %3
 17746                              <6>  stkopen 0x0C
 17747 00000E81 83EC0C              <7>  sub word sp, %1
 17748 00000E84 54                  <7>  push sp
 17749 00000E85 5D                  <7>  pop bp
 17750 00000E86 8CC8                <6>  mov ax,%1
 17751 00000E88 8ED8                <6>  mov ds,ax
 17752 00000E8A A1[541A]            <6>  mov ax,[%2+2]
 17753 00000E8D 894600              <6>  mov [bp+0],ax
 17754 00000E90 A1[521A]            <6>  mov ax,[%2]
 17755 00000E93 894602              <6>  mov [bp+2],ax
 17756 00000E96 8CC8                <6>  mov ax,%3
 17757 00000E98 8ED8                <6>  mov ds,ax
 17758 00000E9A A1[5C1A]            <6>  mov ax,[%4+2]
 17759 00000E9D 894604              <6>  mov [bp+4],ax
 17760 00000EA0 A1[5A1A]            <6>  mov ax,[%4]
 17761 00000EA3 894606              <6>  mov [bp+6],ax
 17762 00000EA6 E8(A50A)            <6>  call proc_flmul
 17763 00000EA9 89E0                <6>  mov ax,sp
 17764 00000EAB 89C5                <6>  mov bp,ax
 17765 00000EAD 8CC8                <6>  mov ax,%5
 17766 00000EAF 8ED8                <6>  mov ds,ax
 17767 00000EB1 8B4608              <6>  mov ax,[bp+8]
 17768 00000EB4 A3[541A]            <6>  mov [%6+2],ax
 17769 00000EB7 8B460A              <6>  mov ax,[bp+0x0A]
 17770 00000EBA A3[521A]            <6>  mov [%6],ax
 17771                              <6>  stkclose 0x0C
 17772 00000EBD 83C40C              <7>  add word sp, %1
 17773                              <4>  flmul __ball_yinc, __ball_rinc, __ball_yinc
 17774                              <5>  flmul cs, %1, cs, %2, cs, %3
 17775                              <6>  stkopen 0x0C
 17776 00000EC0 83EC0C              <7>  sub word sp, %1
 17777 00000EC3 54                  <7>  push sp
 17778 00000EC4 5D                  <7>  pop bp
 17779 00000EC5 8CC8                <6>  mov ax,%1
 17780 00000EC7 8ED8                <6>  mov ds,ax
 17781 00000EC9 A1[581A]            <6>  mov ax,[%2+2]
 17782 00000ECC 894600              <6>  mov [bp+0],ax
 17783 00000ECF A1[561A]            <6>  mov ax,[%2]
 17784 00000ED2 894602              <6>  mov [bp+2],ax
 17785 00000ED5 8CC8                <6>  mov ax,%3
 17786 00000ED7 8ED8                <6>  mov ds,ax
 17787 00000ED9 A1[5C1A]            <6>  mov ax,[%4+2]
 17788 00000EDC 894604              <6>  mov [bp+4],ax
 17789 00000EDF A1[5A1A]            <6>  mov ax,[%4]
 17790 00000EE2 894606              <6>  mov [bp+6],ax
 17791 00000EE5 E8(A50A)            <6>  call proc_flmul
 17792 00000EE8 89E0                <6>  mov ax,sp
 17793 00000EEA 89C5                <6>  mov bp,ax
 17794 00000EEC 8CC8                <6>  mov ax,%5
 17795 00000EEE 8ED8                <6>  mov ds,ax
 17796 00000EF0 8B4608              <6>  mov ax,[bp+8]
 17797 00000EF3 A3[581A]            <6>  mov [%6+2],ax
 17798 00000EF6 8B460A              <6>  mov ax,[bp+0x0A]
 17799 00000EF9 A3[561A]            <6>  mov [%6],ax
 17800                              <6>  stkclose 0x0C
 17801 00000EFC 83C40C              <7>  add word sp, %1
 17802                              <2>  %%endsidey1:
 17803                              <2> 
 17804                              <2>  fltoint16 __ball_y, %%aux
 17805                              <3>  fltoint16 cs, %1, cs, %2
 17806                              <4>  stkopen 0x06
 17807 00000EFF 83EC06              <5>  sub word sp, %1
 17808 00000F02 54                  <5>  push sp
 17809 00000F03 5D                  <5>  pop bp
 17810 00000F04 8CC8                <4>  mov ax,%1
 17811 00000F06 8ED8                <4>  mov ds,ax
 17812 00000F08 A1[4C1A]            <4>  mov ax,[%2+2]
 17813 00000F0B 894600              <4>  mov [bp+0],ax
 17814 00000F0E A1[4A1A]            <4>  mov ax,[%2]
 17815 00000F11 894602              <4>  mov [bp+2],ax
 17816 00000F14 E8(C305)            <4>  call proc_fltoint16
 17817 00000F17 89E0                <4>  mov ax,sp
 17818 00000F19 89C5                <4>  mov bp,ax
 17819 00000F1B 8CC8                <4>  mov ax,%3
 17820 00000F1D 8ED8                <4>  mov ds,ax
 17821 00000F1F 8B4604              <4>  mov ax,[bp+4]
 17822 00000F22 A3[1720]            <4>  mov [%4],ax
 17823                              <4>  stkclose 0x06
 17824 00000F25 83C406              <5>  add word sp, %1
 17825                              <2>  add16 %%aux, %%rb
 17826                              <3>  add16 cs, %1, cs, %2
 17827 00000F28 8CC8                <4>  mov ax,%3
 17828 00000F2A 8ED8                <4>  mov ds,ax
 17829 00000F2C 8B1E[1320]          <4>  mov bx,[%4]
 17830 00000F30 8CC8                <4>  mov ax,%1
 17831 00000F32 8ED8                <4>  mov ds,ax
 17832 00000F34 011E[1720]          <4>  add [%2],bx
 17833                              <2>  cmp16 %%aux, __tray_y2, cl
 17834                              <3>  cmp16 cs, %1, cs, %2, %3
 17835 00000F38 8CC8                <4>  mov ax,%1
 17836 00000F3A 8ED8                <4>  mov ds,ax
 17837 00000F3C 8B1E[1720]          <4>  mov bx,[%2]
 17838 00000F40 8CC8                <4>  mov ax,%3
 17839 00000F42 8ED8                <4>  mov ds,ax
 17840 00000F44 8B0E[1E1A]          <4>  mov cx,[%4]
 17841                              <4> 
 17842 00000F48 39CB                <4>  cmp bx,cx
 17843 00000F4A 7F06                <4>  jg %%above
 17844 00000F4C 7C08                <4>  jl %%below
 17845 00000F4E B100                <4>  mov byte %5, 0
 17846 00000F50 EB06                <4>  jmp %%endcmp
 17847                              <4>  %%above:
 17848 00000F52 B101                <4>  mov byte %5, 1
 17849 00000F54 EB02                <4>  jmp %%endcmp
 17850                              <4>  %%below:
 17851 00000F56 B1FF                <4>  mov byte %5, -1
 17852                              <4>  %%endcmp:
 17853 00000F58 80F900              <2>  cmp cl,0
 17854 00000F5B 7C10                <2>  jl %%endsidey2
 17855                              <2>  mov16 __lose, __ONE
 17856                              <3>  mov16 cs, %1, cs, %2
 17857 00000F5D 8CC8                <4>  mov ax,%3
 17858 00000F5F 8ED8                <4>  mov ds,ax
 17859 00000F61 8B1E[B019]          <4>  mov bx,[%4]
 17860 00000F65 8CC8                <4>  mov ax,%1
 17861 00000F67 8ED8                <4>  mov ds,ax
 17862 00000F69 891E[921F]          <4>  mov [%2],bx
 17863                              <2>  %%endsidey2:
 17864                              <2> 
 17865                              <1>  tray_throw_square_colision
 17866                              <2> section .data
 17867 00002019 0000                <2>  %%x: dw 0
 17868 0000201B 0000                <2>  %%y: dw 0
 17869 0000201D 0000                <2>  %%r: dw 0
 17870 0000201F 0000                <2>  %%xaux: dw 0
 17871 00002021 0000                <2>  %%yaux: dw 0
 17872 00002023 0000                <2>  %%xinc: dw 0
 17873                              <2> section .text
 17874                              <2>  fltoint16 __ball_x, %%xaux
 17875                              <3>  fltoint16 cs, %1, cs, %2
 17876                              <4>  stkopen 0x06
 17877 00000F6D 83EC06              <5>  sub word sp, %1
 17878 00000F70 54                  <5>  push sp
 17879 00000F71 5D                  <5>  pop bp
 17880 00000F72 8CC8                <4>  mov ax,%1
 17881 00000F74 8ED8                <4>  mov ds,ax
 17882 00000F76 A1[481A]            <4>  mov ax,[%2+2]
 17883 00000F79 894600              <4>  mov [bp+0],ax
 17884 00000F7C A1[461A]            <4>  mov ax,[%2]
 17885 00000F7F 894602              <4>  mov [bp+2],ax
 17886 00000F82 E8(C305)            <4>  call proc_fltoint16
 17887 00000F85 89E0                <4>  mov ax,sp
 17888 00000F87 89C5                <4>  mov bp,ax
 17889 00000F89 8CC8                <4>  mov ax,%3
 17890 00000F8B 8ED8                <4>  mov ds,ax
 17891 00000F8D 8B4604              <4>  mov ax,[bp+4]
 17892 00000F90 A3[1F20]            <4>  mov [%4],ax
 17893                              <4>  stkclose 0x06
 17894 00000F93 83C406              <5>  add word sp, %1
 17895                              <2>  fltoint16 __ball_y, %%yaux
 17896                              <3>  fltoint16 cs, %1, cs, %2
 17897                              <4>  stkopen 0x06
 17898 00000F96 83EC06              <5>  sub word sp, %1
 17899 00000F99 54                  <5>  push sp
 17900 00000F9A 5D                  <5>  pop bp
 17901 00000F9B 8CC8                <4>  mov ax,%1
 17902 00000F9D 8ED8                <4>  mov ds,ax
 17903 00000F9F A1[4C1A]            <4>  mov ax,[%2+2]
 17904 00000FA2 894600              <4>  mov [bp+0],ax
 17905 00000FA5 A1[4A1A]            <4>  mov ax,[%2]
 17906 00000FA8 894602              <4>  mov [bp+2],ax
 17907 00000FAB E8(C305)            <4>  call proc_fltoint16
 17908 00000FAE 89E0                <4>  mov ax,sp
 17909 00000FB0 89C5                <4>  mov bp,ax
 17910 00000FB2 8CC8                <4>  mov ax,%3
 17911 00000FB4 8ED8                <4>  mov ds,ax
 17912 00000FB6 8B4604              <4>  mov ax,[bp+4]
 17913 00000FB9 A3[2120]            <4>  mov [%4],ax
 17914                              <4>  stkclose 0x06
 17915 00000FBC 83C406              <5>  add word sp, %1
 17916                              <2>  fltoint16 __ball_radial, %%r
 17917                              <3>  fltoint16 cs, %1, cs, %2
 17918                              <4>  stkopen 0x06
 17919 00000FBF 83EC06              <5>  sub word sp, %1
 17920 00000FC2 54                  <5>  push sp
 17921 00000FC3 5D                  <5>  pop bp
 17922 00000FC4 8CC8                <4>  mov ax,%1
 17923 00000FC6 8ED8                <4>  mov ds,ax
 17924 00000FC8 A1[501A]            <4>  mov ax,[%2+2]
 17925 00000FCB 894600              <4>  mov [bp+0],ax
 17926 00000FCE A1[4E1A]            <4>  mov ax,[%2]
 17927 00000FD1 894602              <4>  mov [bp+2],ax
 17928 00000FD4 E8(C305)            <4>  call proc_fltoint16
 17929 00000FD7 89E0                <4>  mov ax,sp
 17930 00000FD9 89C5                <4>  mov bp,ax
 17931 00000FDB 8CC8                <4>  mov ax,%3
 17932 00000FDD 8ED8                <4>  mov ds,ax
 17933 00000FDF 8B4604              <4>  mov ax,[bp+4]
 17934 00000FE2 A3[1D20]            <4>  mov [%4],ax
 17935                              <4>  stkclose 0x06
 17936 00000FE5 83C406              <5>  add word sp, %1
 17937                              <2> 
 17938                              <2>  mov16 %%x, %%xaux
 17939                              <3>  mov16 cs, %1, cs, %2
 17940 00000FE8 8CC8                <4>  mov ax,%3
 17941 00000FEA 8ED8                <4>  mov ds,ax
 17942 00000FEC 8B1E[1F20]          <4>  mov bx,[%4]
 17943 00000FF0 8CC8                <4>  mov ax,%1
 17944 00000FF2 8ED8                <4>  mov ds,ax
 17945 00000FF4 891E[1920]          <4>  mov [%2],bx
 17946                              <2>  mov16 %%y, %%yaux
 17947                              <3>  mov16 cs, %1, cs, %2
 17948 00000FF8 8CC8                <4>  mov ax,%3
 17949 00000FFA 8ED8                <4>  mov ds,ax
 17950 00000FFC 8B1E[2120]          <4>  mov bx,[%4]
 17951 00001000 8CC8                <4>  mov ax,%1
 17952 00001002 8ED8                <4>  mov ds,ax
 17953 00001004 891E[1B20]          <4>  mov [%2],bx
 17954                              <2>  sub16 %%x, __tray_x1
 17955                              <3>  sub16 cs, %1, cs, %2
 17956 00001008 8CC8                <4>  mov ax,%3
 17957 0000100A 8ED8                <4>  mov ds,ax
 17958 0000100C 8B1E[181A]          <4>  mov bx,[%4]
 17959 00001010 8CC8                <4>  mov ax,%1
 17960 00001012 8ED8                <4>  mov ds,ax
 17961 00001014 291E[1920]          <4>  sub [%2],bx
 17962                              <2>  sub16 %%y, __tray_y1
 17963                              <3>  sub16 cs, %1, cs, %2
 17964 00001018 8CC8                <4>  mov ax,%3
 17965 0000101A 8ED8                <4>  mov ds,ax
 17966 0000101C 8B1E[1A1A]          <4>  mov bx,[%4]
 17967 00001020 8CC8                <4>  mov ax,%1
 17968 00001022 8ED8                <4>  mov ds,ax
 17969 00001024 291E[1B20]          <4>  sub [%2],bx
 17970                              <2> 
 17971                              <2>  flgetsig __ball_xinc, ax
 17972                              <3>  flgetsig cs, %1, %2
 17973                              <4>  stkopen 0x04
 17974 00001028 83EC04              <5>  sub word sp, %1
 17975 0000102B 54                  <5>  push sp
 17976 0000102C 5D                  <5>  pop bp
 17977 0000102D 8CC8                <4>  mov ax,%1
 17978 0000102F 8ED8                <4>  mov ds,ax
 17979 00001031 A1[541A]            <4>  mov ax,[%2+2]
 17980 00001034 894600              <4>  mov word [bp+0], ax
 17981 00001037 E8(A710)            <4>  call proc_flgetsig
 17982 0000103A 54                  <4>  push sp
 17983 0000103B 5D                  <4>  pop bp
 17984 0000103C 8B4602              <4>  mov ax,[bp+2]
 17985 0000103F 89C0                <4>  mov word %3, ax
 17986                              <4>  stkclose 0x04
 17987 00001041 83C404              <5>  add word sp, %1
 17988 00001044 83F800              <2>  cmp ax,0
 17989 00001047 7402                <2>  jz %%xpos
 17990 00001049 EB12                <2>  jmp %%xneg
 17991                              <2>  %%xpos:
 17992                              <2>  add16 %%x, %%r
 17993                              <3>  add16 cs, %1, cs, %2
 17994 0000104B 8CC8                <4>  mov ax,%3
 17995 0000104D 8ED8                <4>  mov ds,ax
 17996 0000104F 8B1E[1D20]          <4>  mov bx,[%4]
 17997 00001053 8CC8                <4>  mov ax,%1
 17998 00001055 8ED8                <4>  mov ds,ax
 17999 00001057 011E[1920]          <4>  add [%2],bx
 18000 0000105B EB10                <2>  jmp %%xpos_or_neg
 18001                              <2>  %%xneg:
 18002                              <2>  sub16 %%x, %%r
 18003                              <3>  sub16 cs, %1, cs, %2
 18004 0000105D 8CC8                <4>  mov ax,%3
 18005 0000105F 8ED8                <4>  mov ds,ax
 18006 00001061 8B1E[1D20]          <4>  mov bx,[%4]
 18007 00001065 8CC8                <4>  mov ax,%1
 18008 00001067 8ED8                <4>  mov ds,ax
 18009 00001069 291E[1920]          <4>  sub [%2],bx
 18010                              <2>  %%xpos_or_neg:
 18011                              <2>  __tray_has_square_colision %%x, %%y, cl
 18012                              <3>  div16 %1, __square_w
 18013                              <4>  div16 cs, %1, cs, %2
 18014 0000106D 8CC8                <5>  mov ax,%1
 18015 0000106F 8ED8                <5>  mov ds,ax
 18016 00001071 8B1E[1920]          <5>  mov bx,[%2]
 18017 00001075 8CC8                <5>  mov ax,%3
 18018 00001077 8ED8                <5>  mov ds,ax
 18019 00001079 8B0E[281A]          <5>  mov cx,[%4]
 18020                              <5> 
 18021 0000107D 31D2                <5>  xor dx,dx
 18022 0000107F 89D8                <5>  mov ax,bx
 18023 00001081 F7F9                <5>  idiv cx
 18024                              <5> 
 18025 00001083 8CCA                <5>  mov dx,%1
 18026 00001085 8EDA                <5>  mov ds,dx
 18027 00001087 A3[1920]            <5>  mov [%2],ax
 18028                              <3>  cmp16 %1, __square_xcount, cl
 18029                              <4>  cmp16 cs, %1, cs, %2, %3
 18030 0000108A 8CC8                <5>  mov ax,%1
 18031 0000108C 8ED8                <5>  mov ds,ax
 18032 0000108E 8B1E[1920]          <5>  mov bx,[%2]
 18033 00001092 8CC8                <5>  mov ax,%3
 18034 00001094 8ED8                <5>  mov ds,ax
 18035 00001096 8B0E[2E1A]          <5>  mov cx,[%4]
 18036                              <5> 
 18037 0000109A 39CB                <5>  cmp bx,cx
 18038 0000109C 7F06                <5>  jg %%above
 18039 0000109E 7C08                <5>  jl %%below
 18040 000010A0 B100                <5>  mov byte %5, 0
 18041 000010A2 EB06                <5>  jmp %%endcmp
 18042                              <5>  %%above:
 18043 000010A4 B101                <5>  mov byte %5, 1
 18044 000010A6 EB02                <5>  jmp %%endcmp
 18045                              <5>  %%below:
 18046 000010A8 B1FF                <5>  mov byte %5, -1
 18047                              <5>  %%endcmp:
 18048 000010AA 80F900              <3>  cmp cl,0
 18049 000010AD 0F8FAB00            <3>  jg %%ncol
 18050 000010B1 7C08                <3>  jl %%xbound
 18051                              <3>  dec16 %1
 18052                              <4>  dec16 cs, %1
 18053 000010B3 8CC8                <5>  mov ax,%1
 18054 000010B5 8ED8                <5>  mov ds,ax
 18055 000010B7 FF0E[1920]          <5>  dec word [%2]
 18056                              <3>  %%xbound:
 18057                              <3> 
 18058                              <3>  div16 %2, __square_h
 18059                              <4>  div16 cs, %1, cs, %2
 18060 000010BB 8CC8                <5>  mov ax,%1
 18061 000010BD 8ED8                <5>  mov ds,ax
 18062 000010BF 8B1E[1B20]          <5>  mov bx,[%2]
 18063 000010C3 8CC8                <5>  mov ax,%3
 18064 000010C5 8ED8                <5>  mov ds,ax
 18065 000010C7 8B0E[2A1A]          <5>  mov cx,[%4]
 18066                              <5> 
 18067 000010CB 31D2                <5>  xor dx,dx
 18068 000010CD 89D8                <5>  mov ax,bx
 18069 000010CF F7F9                <5>  idiv cx
 18070                              <5> 
 18071 000010D1 8CCA                <5>  mov dx,%1
 18072 000010D3 8EDA                <5>  mov ds,dx
 18073 000010D5 A3[1B20]            <5>  mov [%2],ax
 18074                              <3>  cmp16 %2, __square_ycount, cl
 18075                              <4>  cmp16 cs, %1, cs, %2, %3
 18076 000010D8 8CC8                <5>  mov ax,%1
 18077 000010DA 8ED8                <5>  mov ds,ax
 18078 000010DC 8B1E[1B20]          <5>  mov bx,[%2]
 18079 000010E0 8CC8                <5>  mov ax,%3
 18080 000010E2 8ED8                <5>  mov ds,ax
 18081 000010E4 8B0E[301A]          <5>  mov cx,[%4]
 18082                              <5> 
 18083 000010E8 39CB                <5>  cmp bx,cx
 18084 000010EA 7F06                <5>  jg %%above
 18085 000010EC 7C08                <5>  jl %%below
 18086 000010EE B100                <5>  mov byte %5, 0
 18087 000010F0 EB06                <5>  jmp %%endcmp
 18088                              <5>  %%above:
 18089 000010F2 B101                <5>  mov byte %5, 1
 18090 000010F4 EB02                <5>  jmp %%endcmp
 18091                              <5>  %%below:
 18092 000010F6 B1FF                <5>  mov byte %5, -1
 18093                              <5>  %%endcmp:
 18094 000010F8 80F900              <3>  cmp cl,0
 18095 000010FB 7D5F                <3>  jge %%ncol
 18096 000010FD 7C08                <3>  jl %%ybound
 18097                              <3>  dec16 %2
 18098                              <4>  dec16 cs, %1
 18099 000010FF 8CC8                <5>  mov ax,%1
 18100 00001101 8ED8                <5>  mov ds,ax
 18101 00001103 FF0E[1B20]          <5>  dec word [%2]
 18102                              <3>  %%ybound:
 18103                              <3> 
 18104                              <3>  squaremap_get %1, %2, cl
 18105                              <4> section .data
 18106 00002025 00000000            <4>  %%aux: dd 0
 18107                              <4> section .text
 18108                              <4>  mov16 %%aux, %2
 18109                              <5>  mov16 cs, %1, cs, %2
 18110 00001107 8CC8                <6>  mov ax,%3
 18111 00001109 8ED8                <6>  mov ds,ax
 18112 0000110B 8B1E[1B20]          <6>  mov bx,[%4]
 18113 0000110F 8CC8                <6>  mov ax,%1
 18114 00001111 8ED8                <6>  mov ds,ax
 18115 00001113 891E[2520]          <6>  mov [%2],bx
 18116                              <4>  mul16 %%aux, __square_xcount
 18117                              <5>  mul16 cs, %1, cs, %2
 18118 00001117 8CC8                <6>  mov ax,%1
 18119 00001119 8ED8                <6>  mov ds,ax
 18120 0000111B 8B1E[2520]          <6>  mov bx,[%2]
 18121 0000111F 8CC8                <6>  mov ax,%3
 18122 00001121 8ED8                <6>  mov ds,ax
 18123 00001123 8B0E[2E1A]          <6>  mov cx,[%4]
 18124                              <6> 
 18125 00001127 89D8                <6>  mov ax,bx
 18126 00001129 F7E9                <6>  imul cx
 18127                              <6> 
 18128 0000112B 8CCA                <6>  mov dx,%1
 18129 0000112D 8EDA                <6>  mov ds,dx
 18130 0000112F A3[2520]            <6>  mov [%2],ax
 18131                              <4>  add16 %%aux, %1
 18132                              <5>  add16 cs, %1, cs, %2
 18133 00001132 8CC8                <6>  mov ax,%3
 18134 00001134 8ED8                <6>  mov ds,ax
 18135 00001136 8B1E[1920]          <6>  mov bx,[%4]
 18136 0000113A 8CC8                <6>  mov ax,%1
 18137 0000113C 8ED8                <6>  mov ds,ax
 18138 0000113E 011E[2520]          <6>  add [%2],bx
 18139                              <4> 
 18140                              <4>  int16toreg %%aux, ax
 18141                              <5>  int16toreg cs, %1, %2
 18142 00001142 68[2520]            <6>  push %2
 18143 00001145 0E                  <6>  push %1
 18144 00001146 1F                  <6>  pop ds
 18145 00001147 5E                  <6>  pop si
 18146 00001148 8B04                <6>  mov word %3,[si]
 18147                              <4> 
 18148                              <4>  vlodsb __squaremap, ax, %3
 18149                              <5>  vlodsb cs, %1, %2, %3
 18150 0000114A 0E                  <6>  push %1
 18151 0000114B 1F                  <6>  pop ds
 18152 0000114C BE[F019]            <6>  mov si,%2
 18153 0000114F 01C6                <6>  add si,%3
 18154 00001151 8A0C                <6>  mov byte %4,[si]
 18155 00001153 80F900              <3>  cmp cl,0
 18156 00001156 7404                <3>  jz %%ncol
 18157                              <3> 
 18158 00001158 B101                <3>  mov byte %3,1
 18159 0000115A EB02                <3>  jmp %%end
 18160                              <3>  %%ncol:
 18161 0000115C B100                <3>  mov byte %3,0
 18162                              <3>  %%end:
 18163 0000115E 80F900              <2>  cmp cl,0
 18164 00001161 0F84C901            <2>  jz %%endx
 18165                              <2>  squaremap_remove %%x, %%y
 18166                              <3>  squaremap_set %1, %2, 0
 18167                              <4> section .data
 18168 00002029 00000000            <4>  %%aux: dd 0
 18169                              <4> section .text
 18170                              <4>  mov16 %%aux, %2
 18171                              <5>  mov16 cs, %1, cs, %2
 18172 00001165 8CC8                <6>  mov ax,%3
 18173 00001167 8ED8                <6>  mov ds,ax
 18174 00001169 8B1E[1B20]          <6>  mov bx,[%4]
 18175 0000116D 8CC8                <6>  mov ax,%1
 18176 0000116F 8ED8                <6>  mov ds,ax
 18177 00001171 891E[2920]          <6>  mov [%2],bx
 18178                              <4>  mul16 %%aux, __square_xcount
 18179                              <5>  mul16 cs, %1, cs, %2
 18180 00001175 8CC8                <6>  mov ax,%1
 18181 00001177 8ED8                <6>  mov ds,ax
 18182 00001179 8B1E[2920]          <6>  mov bx,[%2]
 18183 0000117D 8CC8                <6>  mov ax,%3
 18184 0000117F 8ED8                <6>  mov ds,ax
 18185 00001181 8B0E[2E1A]          <6>  mov cx,[%4]
 18186                              <6> 
 18187 00001185 89D8                <6>  mov ax,bx
 18188 00001187 F7E9                <6>  imul cx
 18189                              <6> 
 18190 00001189 8CCA                <6>  mov dx,%1
 18191 0000118B 8EDA                <6>  mov ds,dx
 18192 0000118D A3[2920]            <6>  mov [%2],ax
 18193                              <4>  add16 %%aux, %1
 18194                              <5>  add16 cs, %1, cs, %2
 18195 00001190 8CC8                <6>  mov ax,%3
 18196 00001192 8ED8                <6>  mov ds,ax
 18197 00001194 8B1E[1920]          <6>  mov bx,[%4]
 18198 00001198 8CC8                <6>  mov ax,%1
 18199 0000119A 8ED8                <6>  mov ds,ax
 18200 0000119C 011E[2920]          <6>  add [%2],bx
 18201                              <4> 
 18202                              <4>  int16toreg %%aux, ax
 18203                              <5>  int16toreg cs, %1, %2
 18204 000011A0 68[2920]            <6>  push %2
 18205 000011A3 0E                  <6>  push %1
 18206 000011A4 1F                  <6>  pop ds
 18207 000011A5 5E                  <6>  pop si
 18208 000011A6 8B04                <6>  mov word %3,[si]
 18209                              <4>  vstosb __squaremap, ax, %3
 18210                              <5>  vstosb cs, %1, %2, %3
 18211 000011A8 0E                  <6>  push %1
 18212 000011A9 1F                  <6>  pop ds
 18213 000011AA BE[F019]            <6>  mov si,%2
 18214 000011AD 01C6                <6>  add si,%3
 18215 000011AF C60400              <6>  mov byte [si],%4
 18216                              <3>  dec16 __square_count
 18217                              <4>  dec16 cs, %1
 18218 000011B2 8CC8                <5>  mov ax,%1
 18219 000011B4 8ED8                <5>  mov ds,ax
 18220 000011B6 FF0E[2C1A]          <5>  dec word [%2]
 18221                              <2>  ball_xinvdirection
 18222                              <3>  flinvsig __ball_angle
 18223                              <4>  flinvsig cs, %1
 18224                              <5>  stkopen 0x02
 18225 000011BA 83EC02              <6>  sub word sp, %1
 18226 000011BD 54                  <6>  push sp
 18227 000011BE 5D                  <6>  pop bp
 18228 000011BF 8CC8                <5>  mov ax,%1
 18229 000011C1 8ED8                <5>  mov ds,ax
 18230 000011C3 A1[601A]            <5>  mov ax,[%2+2]
 18231 000011C6 894600              <5>  mov word [bp+0], ax
 18232 000011C9 E8(B510)            <5>  call proc_flinvsig
 18233 000011CC 54                  <5>  push sp
 18234 000011CD 5D                  <5>  pop bp
 18235 000011CE 8B4600              <5>  mov ax,[bp+0]
 18236 000011D1 A3[601A]            <5>  mov word [%2+2],ax
 18237                              <5>  stkclose 0x02
 18238 000011D4 83C402              <6>  add word sp, %1
 18239                              <3>  to0x360 __ball_angle
 18240                              <4>  to0x360 %1, %1
 18241                              <5>  to0x360 cs, %1, cs, %2
 18242                              <6>  stkopen 0x08
 18243 000011D7 83EC08              <7>  sub word sp, %1
 18244 000011DA 54                  <7>  push sp
 18245 000011DB 5D                  <7>  pop bp
 18246 000011DC 8CC8                <6>  mov ax,%1
 18247 000011DE 8ED8                <6>  mov ds,ax
 18248 000011E0 A1[601A]            <6>  mov ax,[%2+2]
 18249 000011E3 894600              <6>  mov [bp+0],ax
 18250 000011E6 A1[5E1A]            <6>  mov ax,[%2]
 18251 000011E9 894602              <6>  mov [bp+2],ax
 18252 000011EC E8(9512)            <6>  call proc_to0x360
 18253 000011EF 89E0                <6>  mov ax,sp
 18254 000011F1 89C5                <6>  mov bp,ax
 18255 000011F3 8CC8                <6>  mov ax,%3
 18256 000011F5 8ED8                <6>  mov ds,ax
 18257 000011F7 8B4604              <6>  mov ax,[bp+4]
 18258 000011FA A3[601A]            <6>  mov [%4+2],ax
 18259 000011FD 8B4606              <6>  mov ax,[bp+6]
 18260 00001200 A3[5E1A]            <6>  mov [%4],ax
 18261                              <6>  stkclose 0x08
 18262 00001203 83C408              <7>  add word sp, %1
 18263                              <3>  fladd __ball_angle, PI, __ball_angle
 18264                              <4>  fladd cs, %1, cs, %2, cs, %3
 18265                              <5>  fladdorsub %1, %2, %3, %4, %5, %6, 0
 18266                              <6>  stkopen 0x0E
 18267 00001206 83EC0E              <7>  sub word sp, %1
 18268 00001209 54                  <7>  push sp
 18269 0000120A 5D                  <7>  pop bp
 18270 0000120B 8CC8                <6>  mov ax,%1
 18271 0000120D 8ED8                <6>  mov ds,ax
 18272 0000120F A1[601A]            <6>  mov ax,[%2+2]
 18273 00001212 894600              <6>  mov [bp+0],ax
 18274 00001215 A1[5E1A]            <6>  mov ax,[%2]
 18275 00001218 894602              <6>  mov [bp+2],ax
 18276 0000121B 8CC8                <6>  mov ax,%3
 18277 0000121D 8ED8                <6>  mov ds,ax
 18278 0000121F A1[8F12]            <6>  mov ax,[%4+2]
 18279 00001222 894604              <6>  mov [bp+4],ax
 18280 00001225 A1[8D12]            <6>  mov ax,[%4]
 18281 00001228 894606              <6>  mov [bp+6],ax
 18282 0000122B C7460C0000          <6>  mov word [bp+0x0C], %7
 18283 00001230 E8(510C)            <6>  call proc_fladdorsub
 18284 00001233 89E0                <6>  mov ax,sp
 18285 00001235 89C5                <6>  mov bp,ax
 18286 00001237 8CC8                <6>  mov ax,%5
 18287 00001239 8ED8                <6>  mov ds,ax
 18288 0000123B 8B4608              <6>  mov ax,[bp+8]
 18289 0000123E A3[601A]            <6>  mov [%6+2],ax
 18290 00001241 8B460A              <6>  mov ax,[bp+0x0A]
 18291 00001244 A3[5E1A]            <6>  mov [%6],ax
 18292                              <6>  stkclose 0x0E
 18293 00001247 83C40E              <7>  add word sp, %1
 18294                              <3>  ball_updateangle
 18295                              <4>  cos __ball_angle, __ball_xinc
 18296                              <5>  cos cs, %1, cs, %2
 18297                              <6>  sinorcos %1, %2, %3, %4, 0
 18298                              <7>  stkopen 0x09
 18299 0000124A 83EC09              <8>  sub word sp, %1
 18300 0000124D 54                  <8>  push sp
 18301 0000124E 5D                  <8>  pop bp
 18302 0000124F 8CC8                <7>  mov ax,%1
 18303 00001251 8ED8                <7>  mov ds,ax
 18304 00001253 A1[601A]            <7>  mov ax,[%2+2]
 18305 00001256 894600              <7>  mov [bp+0],ax
 18306 00001259 A1[5E1A]            <7>  mov ax,[%2]
 18307 0000125C 894602              <7>  mov [bp+2],ax
 18308 0000125F C6460800            <7>  mov byte [bp+8],%5
 18309 00001263 E8(4E14)            <7>  call proc_sinorcos
 18310 00001266 89E0                <7>  mov ax,sp
 18311 00001268 89C5                <7>  mov bp,ax
 18312 0000126A 8CC8                <7>  mov ax,%3
 18313 0000126C 8ED8                <7>  mov ds,ax
 18314 0000126E 8B4604              <7>  mov ax,[bp+4]
 18315 00001271 A3[541A]            <7>  mov [%4+2],ax
 18316 00001274 8B4606              <7>  mov ax,[bp+6]
 18317 00001277 A3[521A]            <7>  mov [%4],ax
 18318                              <7>  stkclose 0x09
 18319 0000127A 83C409              <8>  add word sp, %1
 18320                              <4>  sin __ball_angle, __ball_yinc
 18321                              <5>  sin cs, %1, cs, %2
 18322                              <6>  sinorcos %1, %2, %3, %4, 1
 18323                              <7>  stkopen 0x09
 18324 0000127D 83EC09              <8>  sub word sp, %1
 18325 00001280 54                  <8>  push sp
 18326 00001281 5D                  <8>  pop bp
 18327 00001282 8CC8                <7>  mov ax,%1
 18328 00001284 8ED8                <7>  mov ds,ax
 18329 00001286 A1[601A]            <7>  mov ax,[%2+2]
 18330 00001289 894600              <7>  mov [bp+0],ax
 18331 0000128C A1[5E1A]            <7>  mov ax,[%2]
 18332 0000128F 894602              <7>  mov [bp+2],ax
 18333 00001292 C6460801            <7>  mov byte [bp+8],%5
 18334 00001296 E8(4E14)            <7>  call proc_sinorcos
 18335 00001299 89E0                <7>  mov ax,sp
 18336 0000129B 89C5                <7>  mov bp,ax
 18337 0000129D 8CC8                <7>  mov ax,%3
 18338 0000129F 8ED8                <7>  mov ds,ax
 18339 000012A1 8B4604              <7>  mov ax,[bp+4]
 18340 000012A4 A3[581A]            <7>  mov [%4+2],ax
 18341 000012A7 8B4606              <7>  mov ax,[bp+6]
 18342 000012AA A3[561A]            <7>  mov [%4],ax
 18343                              <7>  stkclose 0x09
 18344 000012AD 83C409              <8>  add word sp, %1
 18345                              <4> 
 18346                              <4>  flmul __ball_xinc, __ball_rinc, __ball_xinc
 18347                              <5>  flmul cs, %1, cs, %2, cs, %3
 18348                              <6>  stkopen 0x0C
 18349 000012B0 83EC0C              <7>  sub word sp, %1
 18350 000012B3 54                  <7>  push sp
 18351 000012B4 5D                  <7>  pop bp
 18352 000012B5 8CC8                <6>  mov ax,%1
 18353 000012B7 8ED8                <6>  mov ds,ax
 18354 000012B9 A1[541A]            <6>  mov ax,[%2+2]
 18355 000012BC 894600              <6>  mov [bp+0],ax
 18356 000012BF A1[521A]            <6>  mov ax,[%2]
 18357 000012C2 894602              <6>  mov [bp+2],ax
 18358 000012C5 8CC8                <6>  mov ax,%3
 18359 000012C7 8ED8                <6>  mov ds,ax
 18360 000012C9 A1[5C1A]            <6>  mov ax,[%4+2]
 18361 000012CC 894604              <6>  mov [bp+4],ax
 18362 000012CF A1[5A1A]            <6>  mov ax,[%4]
 18363 000012D2 894606              <6>  mov [bp+6],ax
 18364 000012D5 E8(A50A)            <6>  call proc_flmul
 18365 000012D8 89E0                <6>  mov ax,sp
 18366 000012DA 89C5                <6>  mov bp,ax
 18367 000012DC 8CC8                <6>  mov ax,%5
 18368 000012DE 8ED8                <6>  mov ds,ax
 18369 000012E0 8B4608              <6>  mov ax,[bp+8]
 18370 000012E3 A3[541A]            <6>  mov [%6+2],ax
 18371 000012E6 8B460A              <6>  mov ax,[bp+0x0A]
 18372 000012E9 A3[521A]            <6>  mov [%6],ax
 18373                              <6>  stkclose 0x0C
 18374 000012EC 83C40C              <7>  add word sp, %1
 18375                              <4>  flmul __ball_yinc, __ball_rinc, __ball_yinc
 18376                              <5>  flmul cs, %1, cs, %2, cs, %3
 18377                              <6>  stkopen 0x0C
 18378 000012EF 83EC0C              <7>  sub word sp, %1
 18379 000012F2 54                  <7>  push sp
 18380 000012F3 5D                  <7>  pop bp
 18381 000012F4 8CC8                <6>  mov ax,%1
 18382 000012F6 8ED8                <6>  mov ds,ax
 18383 000012F8 A1[581A]            <6>  mov ax,[%2+2]
 18384 000012FB 894600              <6>  mov [bp+0],ax
 18385 000012FE A1[561A]            <6>  mov ax,[%2]
 18386 00001301 894602              <6>  mov [bp+2],ax
 18387 00001304 8CC8                <6>  mov ax,%3
 18388 00001306 8ED8                <6>  mov ds,ax
 18389 00001308 A1[5C1A]            <6>  mov ax,[%4+2]
 18390 0000130B 894604              <6>  mov [bp+4],ax
 18391 0000130E A1[5A1A]            <6>  mov ax,[%4]
 18392 00001311 894606              <6>  mov [bp+6],ax
 18393 00001314 E8(A50A)            <6>  call proc_flmul
 18394 00001317 89E0                <6>  mov ax,sp
 18395 00001319 89C5                <6>  mov bp,ax
 18396 0000131B 8CC8                <6>  mov ax,%5
 18397 0000131D 8ED8                <6>  mov ds,ax
 18398 0000131F 8B4608              <6>  mov ax,[bp+8]
 18399 00001322 A3[581A]            <6>  mov [%6+2],ax
 18400 00001325 8B460A              <6>  mov ax,[bp+0x0A]
 18401 00001328 A3[561A]            <6>  mov [%6],ax
 18402                              <6>  stkclose 0x0C
 18403 0000132B 83C40C              <7>  add word sp, %1
 18404                              <2>  %%endx:
 18405                              <2> 
 18406                              <2>  mov16 %%x, %%xaux
 18407                              <3>  mov16 cs, %1, cs, %2
 18408 0000132E 8CC8                <4>  mov ax,%3
 18409 00001330 8ED8                <4>  mov ds,ax
 18410 00001332 8B1E[1F20]          <4>  mov bx,[%4]
 18411 00001336 8CC8                <4>  mov ax,%1
 18412 00001338 8ED8                <4>  mov ds,ax
 18413 0000133A 891E[1920]          <4>  mov [%2],bx
 18414                              <2>  mov16 %%y, %%yaux
 18415                              <3>  mov16 cs, %1, cs, %2
 18416 0000133E 8CC8                <4>  mov ax,%3
 18417 00001340 8ED8                <4>  mov ds,ax
 18418 00001342 8B1E[2120]          <4>  mov bx,[%4]
 18419 00001346 8CC8                <4>  mov ax,%1
 18420 00001348 8ED8                <4>  mov ds,ax
 18421 0000134A 891E[1B20]          <4>  mov [%2],bx
 18422                              <2>  sub16 %%x, __tray_x1
 18423                              <3>  sub16 cs, %1, cs, %2
 18424 0000134E 8CC8                <4>  mov ax,%3
 18425 00001350 8ED8                <4>  mov ds,ax
 18426 00001352 8B1E[181A]          <4>  mov bx,[%4]
 18427 00001356 8CC8                <4>  mov ax,%1
 18428 00001358 8ED8                <4>  mov ds,ax
 18429 0000135A 291E[1920]          <4>  sub [%2],bx
 18430                              <2>  sub16 %%y, __tray_y1
 18431                              <3>  sub16 cs, %1, cs, %2
 18432 0000135E 8CC8                <4>  mov ax,%3
 18433 00001360 8ED8                <4>  mov ds,ax
 18434 00001362 8B1E[1A1A]          <4>  mov bx,[%4]
 18435 00001366 8CC8                <4>  mov ax,%1
 18436 00001368 8ED8                <4>  mov ds,ax
 18437 0000136A 291E[1B20]          <4>  sub [%2],bx
 18438                              <2> 
 18439                              <2>  flgetsig __ball_yinc, ax
 18440                              <3>  flgetsig cs, %1, %2
 18441                              <4>  stkopen 0x04
 18442 0000136E 83EC04              <5>  sub word sp, %1
 18443 00001371 54                  <5>  push sp
 18444 00001372 5D                  <5>  pop bp
 18445 00001373 8CC8                <4>  mov ax,%1
 18446 00001375 8ED8                <4>  mov ds,ax
 18447 00001377 A1[581A]            <4>  mov ax,[%2+2]
 18448 0000137A 894600              <4>  mov word [bp+0], ax
 18449 0000137D E8(A710)            <4>  call proc_flgetsig
 18450 00001380 54                  <4>  push sp
 18451 00001381 5D                  <4>  pop bp
 18452 00001382 8B4602              <4>  mov ax,[bp+2]
 18453 00001385 89C0                <4>  mov word %3, ax
 18454                              <4>  stkclose 0x04
 18455 00001387 83C404              <5>  add word sp, %1
 18456 0000138A 83F800              <2>  cmp ax,0
 18457 0000138D 7402                <2>  jz %%ypos
 18458 0000138F EB12                <2>  jmp %%yneg
 18459                              <2>  %%ypos:
 18460                              <2>  add16 %%y, %%r
 18461                              <3>  add16 cs, %1, cs, %2
 18462 00001391 8CC8                <4>  mov ax,%3
 18463 00001393 8ED8                <4>  mov ds,ax
 18464 00001395 8B1E[1D20]          <4>  mov bx,[%4]
 18465 00001399 8CC8                <4>  mov ax,%1
 18466 0000139B 8ED8                <4>  mov ds,ax
 18467 0000139D 011E[1B20]          <4>  add [%2],bx
 18468 000013A1 EB10                <2>  jmp %%ypos_or_neg
 18469                              <2>  %%yneg:
 18470                              <2>  sub16 %%y, %%r
 18471                              <3>  sub16 cs, %1, cs, %2
 18472 000013A3 8CC8                <4>  mov ax,%3
 18473 000013A5 8ED8                <4>  mov ds,ax
 18474 000013A7 8B1E[1D20]          <4>  mov bx,[%4]
 18475 000013AB 8CC8                <4>  mov ax,%1
 18476 000013AD 8ED8                <4>  mov ds,ax
 18477 000013AF 291E[1B20]          <4>  sub [%2],bx
 18478                              <2>  %%ypos_or_neg:
 18479                              <2>  __tray_has_square_colision %%x, %%y, cl
 18480                              <3>  div16 %1, __square_w
 18481                              <4>  div16 cs, %1, cs, %2
 18482 000013B3 8CC8                <5>  mov ax,%1
 18483 000013B5 8ED8                <5>  mov ds,ax
 18484 000013B7 8B1E[1920]          <5>  mov bx,[%2]
 18485 000013BB 8CC8                <5>  mov ax,%3
 18486 000013BD 8ED8                <5>  mov ds,ax
 18487 000013BF 8B0E[281A]          <5>  mov cx,[%4]
 18488                              <5> 
 18489 000013C3 31D2                <5>  xor dx,dx
 18490 000013C5 89D8                <5>  mov ax,bx
 18491 000013C7 F7F9                <5>  idiv cx
 18492                              <5> 
 18493 000013C9 8CCA                <5>  mov dx,%1
 18494 000013CB 8EDA                <5>  mov ds,dx
 18495 000013CD A3[1920]            <5>  mov [%2],ax
 18496                              <3>  cmp16 %1, __square_xcount, cl
 18497                              <4>  cmp16 cs, %1, cs, %2, %3
 18498 000013D0 8CC8                <5>  mov ax,%1
 18499 000013D2 8ED8                <5>  mov ds,ax
 18500 000013D4 8B1E[1920]          <5>  mov bx,[%2]
 18501 000013D8 8CC8                <5>  mov ax,%3
 18502 000013DA 8ED8                <5>  mov ds,ax
 18503 000013DC 8B0E[2E1A]          <5>  mov cx,[%4]
 18504                              <5> 
 18505 000013E0 39CB                <5>  cmp bx,cx
 18506 000013E2 7F06                <5>  jg %%above
 18507 000013E4 7C08                <5>  jl %%below
 18508 000013E6 B100                <5>  mov byte %5, 0
 18509 000013E8 EB06                <5>  jmp %%endcmp
 18510                              <5>  %%above:
 18511 000013EA B101                <5>  mov byte %5, 1
 18512 000013EC EB02                <5>  jmp %%endcmp
 18513                              <5>  %%below:
 18514 000013EE B1FF                <5>  mov byte %5, -1
 18515                              <5>  %%endcmp:
 18516 000013F0 80F900              <3>  cmp cl,0
 18517 000013F3 0F8FAB00            <3>  jg %%ncol
 18518 000013F7 7C08                <3>  jl %%xbound
 18519                              <3>  dec16 %1
 18520                              <4>  dec16 cs, %1
 18521 000013F9 8CC8                <5>  mov ax,%1
 18522 000013FB 8ED8                <5>  mov ds,ax
 18523 000013FD FF0E[1920]          <5>  dec word [%2]
 18524                              <3>  %%xbound:
 18525                              <3> 
 18526                              <3>  div16 %2, __square_h
 18527                              <4>  div16 cs, %1, cs, %2
 18528 00001401 8CC8                <5>  mov ax,%1
 18529 00001403 8ED8                <5>  mov ds,ax
 18530 00001405 8B1E[1B20]          <5>  mov bx,[%2]
 18531 00001409 8CC8                <5>  mov ax,%3
 18532 0000140B 8ED8                <5>  mov ds,ax
 18533 0000140D 8B0E[2A1A]          <5>  mov cx,[%4]
 18534                              <5> 
 18535 00001411 31D2                <5>  xor dx,dx
 18536 00001413 89D8                <5>  mov ax,bx
 18537 00001415 F7F9                <5>  idiv cx
 18538                              <5> 
 18539 00001417 8CCA                <5>  mov dx,%1
 18540 00001419 8EDA                <5>  mov ds,dx
 18541 0000141B A3[1B20]            <5>  mov [%2],ax
 18542                              <3>  cmp16 %2, __square_ycount, cl
 18543                              <4>  cmp16 cs, %1, cs, %2, %3
 18544 0000141E 8CC8                <5>  mov ax,%1
 18545 00001420 8ED8                <5>  mov ds,ax
 18546 00001422 8B1E[1B20]          <5>  mov bx,[%2]
 18547 00001426 8CC8                <5>  mov ax,%3
 18548 00001428 8ED8                <5>  mov ds,ax
 18549 0000142A 8B0E[301A]          <5>  mov cx,[%4]
 18550                              <5> 
 18551 0000142E 39CB                <5>  cmp bx,cx
 18552 00001430 7F06                <5>  jg %%above
 18553 00001432 7C08                <5>  jl %%below
 18554 00001434 B100                <5>  mov byte %5, 0
 18555 00001436 EB06                <5>  jmp %%endcmp
 18556                              <5>  %%above:
 18557 00001438 B101                <5>  mov byte %5, 1
 18558 0000143A EB02                <5>  jmp %%endcmp
 18559                              <5>  %%below:
 18560 0000143C B1FF                <5>  mov byte %5, -1
 18561                              <5>  %%endcmp:
 18562 0000143E 80F900              <3>  cmp cl,0
 18563 00001441 7D5F                <3>  jge %%ncol
 18564 00001443 7C08                <3>  jl %%ybound
 18565                              <3>  dec16 %2
 18566                              <4>  dec16 cs, %1
 18567 00001445 8CC8                <5>  mov ax,%1
 18568 00001447 8ED8                <5>  mov ds,ax
 18569 00001449 FF0E[1B20]          <5>  dec word [%2]
 18570                              <3>  %%ybound:
 18571                              <3> 
 18572                              <3>  squaremap_get %1, %2, cl
 18573                              <4> section .data
 18574 0000202D 00000000            <4>  %%aux: dd 0
 18575                              <4> section .text
 18576                              <4>  mov16 %%aux, %2
 18577                              <5>  mov16 cs, %1, cs, %2
 18578 0000144D 8CC8                <6>  mov ax,%3
 18579 0000144F 8ED8                <6>  mov ds,ax
 18580 00001451 8B1E[1B20]          <6>  mov bx,[%4]
 18581 00001455 8CC8                <6>  mov ax,%1
 18582 00001457 8ED8                <6>  mov ds,ax
 18583 00001459 891E[2D20]          <6>  mov [%2],bx
 18584                              <4>  mul16 %%aux, __square_xcount
 18585                              <5>  mul16 cs, %1, cs, %2
 18586 0000145D 8CC8                <6>  mov ax,%1
 18587 0000145F 8ED8                <6>  mov ds,ax
 18588 00001461 8B1E[2D20]          <6>  mov bx,[%2]
 18589 00001465 8CC8                <6>  mov ax,%3
 18590 00001467 8ED8                <6>  mov ds,ax
 18591 00001469 8B0E[2E1A]          <6>  mov cx,[%4]
 18592                              <6> 
 18593 0000146D 89D8                <6>  mov ax,bx
 18594 0000146F F7E9                <6>  imul cx
 18595                              <6> 
 18596 00001471 8CCA                <6>  mov dx,%1
 18597 00001473 8EDA                <6>  mov ds,dx
 18598 00001475 A3[2D20]            <6>  mov [%2],ax
 18599                              <4>  add16 %%aux, %1
 18600                              <5>  add16 cs, %1, cs, %2
 18601 00001478 8CC8                <6>  mov ax,%3
 18602 0000147A 8ED8                <6>  mov ds,ax
 18603 0000147C 8B1E[1920]          <6>  mov bx,[%4]
 18604 00001480 8CC8                <6>  mov ax,%1
 18605 00001482 8ED8                <6>  mov ds,ax
 18606 00001484 011E[2D20]          <6>  add [%2],bx
 18607                              <4> 
 18608                              <4>  int16toreg %%aux, ax
 18609                              <5>  int16toreg cs, %1, %2
 18610 00001488 68[2D20]            <6>  push %2
 18611 0000148B 0E                  <6>  push %1
 18612 0000148C 1F                  <6>  pop ds
 18613 0000148D 5E                  <6>  pop si
 18614 0000148E 8B04                <6>  mov word %3,[si]
 18615                              <4> 
 18616                              <4>  vlodsb __squaremap, ax, %3
 18617                              <5>  vlodsb cs, %1, %2, %3
 18618 00001490 0E                  <6>  push %1
 18619 00001491 1F                  <6>  pop ds
 18620 00001492 BE[F019]            <6>  mov si,%2
 18621 00001495 01C6                <6>  add si,%3
 18622 00001497 8A0C                <6>  mov byte %4,[si]
 18623 00001499 80F900              <3>  cmp cl,0
 18624 0000149C 7404                <3>  jz %%ncol
 18625                              <3> 
 18626 0000149E B101                <3>  mov byte %3,1
 18627 000014A0 EB02                <3>  jmp %%end
 18628                              <3>  %%ncol:
 18629 000014A2 B100                <3>  mov byte %3,0
 18630                              <3>  %%end:
 18631 000014A4 80F900              <2>  cmp cl,0
 18632 000014A7 0F845601            <2>  jz %%endy
 18633                              <2>  squaremap_remove %%x, %%y
 18634                              <3>  squaremap_set %1, %2, 0
 18635                              <4> section .data
 18636 00002031 00000000            <4>  %%aux: dd 0
 18637                              <4> section .text
 18638                              <4>  mov16 %%aux, %2
 18639                              <5>  mov16 cs, %1, cs, %2
 18640 000014AB 8CC8                <6>  mov ax,%3
 18641 000014AD 8ED8                <6>  mov ds,ax
 18642 000014AF 8B1E[1B20]          <6>  mov bx,[%4]
 18643 000014B3 8CC8                <6>  mov ax,%1
 18644 000014B5 8ED8                <6>  mov ds,ax
 18645 000014B7 891E[3120]          <6>  mov [%2],bx
 18646                              <4>  mul16 %%aux, __square_xcount
 18647                              <5>  mul16 cs, %1, cs, %2
 18648 000014BB 8CC8                <6>  mov ax,%1
 18649 000014BD 8ED8                <6>  mov ds,ax
 18650 000014BF 8B1E[3120]          <6>  mov bx,[%2]
 18651 000014C3 8CC8                <6>  mov ax,%3
 18652 000014C5 8ED8                <6>  mov ds,ax
 18653 000014C7 8B0E[2E1A]          <6>  mov cx,[%4]
 18654                              <6> 
 18655 000014CB 89D8                <6>  mov ax,bx
 18656 000014CD F7E9                <6>  imul cx
 18657                              <6> 
 18658 000014CF 8CCA                <6>  mov dx,%1
 18659 000014D1 8EDA                <6>  mov ds,dx
 18660 000014D3 A3[3120]            <6>  mov [%2],ax
 18661                              <4>  add16 %%aux, %1
 18662                              <5>  add16 cs, %1, cs, %2
 18663 000014D6 8CC8                <6>  mov ax,%3
 18664 000014D8 8ED8                <6>  mov ds,ax
 18665 000014DA 8B1E[1920]          <6>  mov bx,[%4]
 18666 000014DE 8CC8                <6>  mov ax,%1
 18667 000014E0 8ED8                <6>  mov ds,ax
 18668 000014E2 011E[3120]          <6>  add [%2],bx
 18669                              <4> 
 18670                              <4>  int16toreg %%aux, ax
 18671                              <5>  int16toreg cs, %1, %2
 18672 000014E6 68[3120]            <6>  push %2
 18673 000014E9 0E                  <6>  push %1
 18674 000014EA 1F                  <6>  pop ds
 18675 000014EB 5E                  <6>  pop si
 18676 000014EC 8B04                <6>  mov word %3,[si]
 18677                              <4>  vstosb __squaremap, ax, %3
 18678                              <5>  vstosb cs, %1, %2, %3
 18679 000014EE 0E                  <6>  push %1
 18680 000014EF 1F                  <6>  pop ds
 18681 000014F0 BE[F019]            <6>  mov si,%2
 18682 000014F3 01C6                <6>  add si,%3
 18683 000014F5 C60400              <6>  mov byte [si],%4
 18684                              <3>  dec16 __square_count
 18685                              <4>  dec16 cs, %1
 18686 000014F8 8CC8                <5>  mov ax,%1
 18687 000014FA 8ED8                <5>  mov ds,ax
 18688 000014FC FF0E[2C1A]          <5>  dec word [%2]
 18689                              <2>  ball_yinvdirection
 18690                              <3>  flinvsig __ball_angle
 18691                              <4>  flinvsig cs, %1
 18692                              <5>  stkopen 0x02
 18693 00001500 83EC02              <6>  sub word sp, %1
 18694 00001503 54                  <6>  push sp
 18695 00001504 5D                  <6>  pop bp
 18696 00001505 8CC8                <5>  mov ax,%1
 18697 00001507 8ED8                <5>  mov ds,ax
 18698 00001509 A1[601A]            <5>  mov ax,[%2+2]
 18699 0000150C 894600              <5>  mov word [bp+0], ax
 18700 0000150F E8(B510)            <5>  call proc_flinvsig
 18701 00001512 54                  <5>  push sp
 18702 00001513 5D                  <5>  pop bp
 18703 00001514 8B4600              <5>  mov ax,[bp+0]
 18704 00001517 A3[601A]            <5>  mov word [%2+2],ax
 18705                              <5>  stkclose 0x02
 18706 0000151A 83C402              <6>  add word sp, %1
 18707                              <3>  ball_updateangle
 18708                              <4>  cos __ball_angle, __ball_xinc
 18709                              <5>  cos cs, %1, cs, %2
 18710                              <6>  sinorcos %1, %2, %3, %4, 0
 18711                              <7>  stkopen 0x09
 18712 0000151D 83EC09              <8>  sub word sp, %1
 18713 00001520 54                  <8>  push sp
 18714 00001521 5D                  <8>  pop bp
 18715 00001522 8CC8                <7>  mov ax,%1
 18716 00001524 8ED8                <7>  mov ds,ax
 18717 00001526 A1[601A]            <7>  mov ax,[%2+2]
 18718 00001529 894600              <7>  mov [bp+0],ax
 18719 0000152C A1[5E1A]            <7>  mov ax,[%2]
 18720 0000152F 894602              <7>  mov [bp+2],ax
 18721 00001532 C6460800            <7>  mov byte [bp+8],%5
 18722 00001536 E8(4E14)            <7>  call proc_sinorcos
 18723 00001539 89E0                <7>  mov ax,sp
 18724 0000153B 89C5                <7>  mov bp,ax
 18725 0000153D 8CC8                <7>  mov ax,%3
 18726 0000153F 8ED8                <7>  mov ds,ax
 18727 00001541 8B4604              <7>  mov ax,[bp+4]
 18728 00001544 A3[541A]            <7>  mov [%4+2],ax
 18729 00001547 8B4606              <7>  mov ax,[bp+6]
 18730 0000154A A3[521A]            <7>  mov [%4],ax
 18731                              <7>  stkclose 0x09
 18732 0000154D 83C409              <8>  add word sp, %1
 18733                              <4>  sin __ball_angle, __ball_yinc
 18734                              <5>  sin cs, %1, cs, %2
 18735                              <6>  sinorcos %1, %2, %3, %4, 1
 18736                              <7>  stkopen 0x09
 18737 00001550 83EC09              <8>  sub word sp, %1
 18738 00001553 54                  <8>  push sp
 18739 00001554 5D                  <8>  pop bp
 18740 00001555 8CC8                <7>  mov ax,%1
 18741 00001557 8ED8                <7>  mov ds,ax
 18742 00001559 A1[601A]            <7>  mov ax,[%2+2]
 18743 0000155C 894600              <7>  mov [bp+0],ax
 18744 0000155F A1[5E1A]            <7>  mov ax,[%2]
 18745 00001562 894602              <7>  mov [bp+2],ax
 18746 00001565 C6460801            <7>  mov byte [bp+8],%5
 18747 00001569 E8(4E14)            <7>  call proc_sinorcos
 18748 0000156C 89E0                <7>  mov ax,sp
 18749 0000156E 89C5                <7>  mov bp,ax
 18750 00001570 8CC8                <7>  mov ax,%3
 18751 00001572 8ED8                <7>  mov ds,ax
 18752 00001574 8B4604              <7>  mov ax,[bp+4]
 18753 00001577 A3[581A]            <7>  mov [%4+2],ax
 18754 0000157A 8B4606              <7>  mov ax,[bp+6]
 18755 0000157D A3[561A]            <7>  mov [%4],ax
 18756                              <7>  stkclose 0x09
 18757 00001580 83C409              <8>  add word sp, %1
 18758                              <4> 
 18759                              <4>  flmul __ball_xinc, __ball_rinc, __ball_xinc
 18760                              <5>  flmul cs, %1, cs, %2, cs, %3
 18761                              <6>  stkopen 0x0C
 18762 00001583 83EC0C              <7>  sub word sp, %1
 18763 00001586 54                  <7>  push sp
 18764 00001587 5D                  <7>  pop bp
 18765 00001588 8CC8                <6>  mov ax,%1
 18766 0000158A 8ED8                <6>  mov ds,ax
 18767 0000158C A1[541A]            <6>  mov ax,[%2+2]
 18768 0000158F 894600              <6>  mov [bp+0],ax
 18769 00001592 A1[521A]            <6>  mov ax,[%2]
 18770 00001595 894602              <6>  mov [bp+2],ax
 18771 00001598 8CC8                <6>  mov ax,%3
 18772 0000159A 8ED8                <6>  mov ds,ax
 18773 0000159C A1[5C1A]            <6>  mov ax,[%4+2]
 18774 0000159F 894604              <6>  mov [bp+4],ax
 18775 000015A2 A1[5A1A]            <6>  mov ax,[%4]
 18776 000015A5 894606              <6>  mov [bp+6],ax
 18777 000015A8 E8(A50A)            <6>  call proc_flmul
 18778 000015AB 89E0                <6>  mov ax,sp
 18779 000015AD 89C5                <6>  mov bp,ax
 18780 000015AF 8CC8                <6>  mov ax,%5
 18781 000015B1 8ED8                <6>  mov ds,ax
 18782 000015B3 8B4608              <6>  mov ax,[bp+8]
 18783 000015B6 A3[541A]            <6>  mov [%6+2],ax
 18784 000015B9 8B460A              <6>  mov ax,[bp+0x0A]
 18785 000015BC A3[521A]            <6>  mov [%6],ax
 18786                              <6>  stkclose 0x0C
 18787 000015BF 83C40C              <7>  add word sp, %1
 18788                              <4>  flmul __ball_yinc, __ball_rinc, __ball_yinc
 18789                              <5>  flmul cs, %1, cs, %2, cs, %3
 18790                              <6>  stkopen 0x0C
 18791 000015C2 83EC0C              <7>  sub word sp, %1
 18792 000015C5 54                  <7>  push sp
 18793 000015C6 5D                  <7>  pop bp
 18794 000015C7 8CC8                <6>  mov ax,%1
 18795 000015C9 8ED8                <6>  mov ds,ax
 18796 000015CB A1[581A]            <6>  mov ax,[%2+2]
 18797 000015CE 894600              <6>  mov [bp+0],ax
 18798 000015D1 A1[561A]            <6>  mov ax,[%2]
 18799 000015D4 894602              <6>  mov [bp+2],ax
 18800 000015D7 8CC8                <6>  mov ax,%3
 18801 000015D9 8ED8                <6>  mov ds,ax
 18802 000015DB A1[5C1A]            <6>  mov ax,[%4+2]
 18803 000015DE 894604              <6>  mov [bp+4],ax
 18804 000015E1 A1[5A1A]            <6>  mov ax,[%4]
 18805 000015E4 894606              <6>  mov [bp+6],ax
 18806 000015E7 E8(A50A)            <6>  call proc_flmul
 18807 000015EA 89E0                <6>  mov ax,sp
 18808 000015EC 89C5                <6>  mov bp,ax
 18809 000015EE 8CC8                <6>  mov ax,%5
 18810 000015F0 8ED8                <6>  mov ds,ax
 18811 000015F2 8B4608              <6>  mov ax,[bp+8]
 18812 000015F5 A3[581A]            <6>  mov [%6+2],ax
 18813 000015F8 8B460A              <6>  mov ax,[bp+0x0A]
 18814 000015FB A3[561A]            <6>  mov [%6],ax
 18815                              <6>  stkclose 0x0C
 18816 000015FE 83C40C              <7>  add word sp, %1
 18817                              <2>  %%endy:
 18818                              <2> 
 18819                              <1>  racket_throw_colision
 18820                              <2> section .data
 18821 00002035 0000                <2>  %%x: dw 0
 18822 00002037 0000                <2>  %%y: dw 0
 18823 00002039 0000                <2>  %%ball_r: dw 0
 18824 0000203B 0000                <2>  %%racket_x: dw 0
 18825 0000203D 0000                <2>  %%racket_x2: dw 0
 18826 0000203F 0000                <2>  %%racket_px2: dw 0
 18827                              <2> section .text
 18828                              <2>  cmp16 __lose, __ONE, cl
 18829                              <3>  cmp16 cs, %1, cs, %2, %3
 18830 00001601 8CC8                <4>  mov ax,%1
 18831 00001603 8ED8                <4>  mov ds,ax
 18832 00001605 8B1E[921F]          <4>  mov bx,[%2]
 18833 00001609 8CC8                <4>  mov ax,%3
 18834 0000160B 8ED8                <4>  mov ds,ax
 18835 0000160D 8B0E[B019]          <4>  mov cx,[%4]
 18836                              <4> 
 18837 00001611 39CB                <4>  cmp bx,cx
 18838 00001613 7F06                <4>  jg %%above
 18839 00001615 7C08                <4>  jl %%below
 18840 00001617 B100                <4>  mov byte %5, 0
 18841 00001619 EB06                <4>  jmp %%endcmp
 18842                              <4>  %%above:
 18843 0000161B B101                <4>  mov byte %5, 1
 18844 0000161D EB02                <4>  jmp %%endcmp
 18845                              <4>  %%below:
 18846 0000161F B1FF                <4>  mov byte %5, -1
 18847                              <4>  %%endcmp:
 18848 00001621 80F900              <2>  cmp cl,0
 18849 00001624 0F84C609            <2>  je %%end
 18850                              <2> 
 18851                              <2>  flcmp __ball_yinc, __FL_ZERO, cl
 18852                              <3>  flcmp cs, %1, cs, %2, %3
 18853                              <4>  stkopen 0x09
 18854 00001628 83EC09              <5>  sub word sp, %1
 18855 0000162B 54                  <5>  push sp
 18856 0000162C 5D                  <5>  pop bp
 18857 0000162D 8CC8                <4>  mov ax,%1
 18858 0000162F 8ED8                <4>  mov ds,ax
 18859 00001631 A1[581A]            <4>  mov ax,[%2+2]
 18860 00001634 894600              <4>  mov [bp+0],ax
 18861 00001637 A1[561A]            <4>  mov ax,[%2]
 18862 0000163A 894602              <4>  mov [bp+2],ax
 18863 0000163D 8CC8                <4>  mov ax,%3
 18864 0000163F 8ED8                <4>  mov ds,ax
 18865 00001641 A1[A419]            <4>  mov ax,[%4+2]
 18866 00001644 894604              <4>  mov [bp+4],ax
 18867 00001647 A1[A219]            <4>  mov ax,[%4]
 18868 0000164A 894606              <4>  mov [bp+6],ax
 18869 0000164D E8(BC08)            <4>  call proc_flcmp
 18870 00001650 89E0                <4>  mov ax,sp
 18871 00001652 89C5                <4>  mov bp,ax
 18872 00001654 8A4E08              <4>  mov byte %5,[bp+8]
 18873                              <4>  stkclose 0x09
 18874 00001657 83C409              <5>  add word sp, %1
 18875 0000165A 80F900              <2>  cmp cl,0
 18876 0000165D 0F8C8D09            <2>  jl %%end
 18877                              <2> 
 18878                              <2>  fltoint16 __ball_radial, %%ball_r
 18879                              <3>  fltoint16 cs, %1, cs, %2
 18880                              <4>  stkopen 0x06
 18881 00001661 83EC06              <5>  sub word sp, %1
 18882 00001664 54                  <5>  push sp
 18883 00001665 5D                  <5>  pop bp
 18884 00001666 8CC8                <4>  mov ax,%1
 18885 00001668 8ED8                <4>  mov ds,ax
 18886 0000166A A1[501A]            <4>  mov ax,[%2+2]
 18887 0000166D 894600              <4>  mov [bp+0],ax
 18888 00001670 A1[4E1A]            <4>  mov ax,[%2]
 18889 00001673 894602              <4>  mov [bp+2],ax
 18890 00001676 E8(C305)            <4>  call proc_fltoint16
 18891 00001679 89E0                <4>  mov ax,sp
 18892 0000167B 89C5                <4>  mov bp,ax
 18893 0000167D 8CC8                <4>  mov ax,%3
 18894 0000167F 8ED8                <4>  mov ds,ax
 18895 00001681 8B4604              <4>  mov ax,[bp+4]
 18896 00001684 A3[3920]            <4>  mov [%4],ax
 18897                              <4>  stkclose 0x06
 18898 00001687 83C406              <5>  add word sp, %1
 18899                              <2> 
 18900                              <2>  fltoint16 __ball_y, %%y
 18901                              <3>  fltoint16 cs, %1, cs, %2
 18902                              <4>  stkopen 0x06
 18903 0000168A 83EC06              <5>  sub word sp, %1
 18904 0000168D 54                  <5>  push sp
 18905 0000168E 5D                  <5>  pop bp
 18906 0000168F 8CC8                <4>  mov ax,%1
 18907 00001691 8ED8                <4>  mov ds,ax
 18908 00001693 A1[4C1A]            <4>  mov ax,[%2+2]
 18909 00001696 894600              <4>  mov [bp+0],ax
 18910 00001699 A1[4A1A]            <4>  mov ax,[%2]
 18911 0000169C 894602              <4>  mov [bp+2],ax
 18912 0000169F E8(C305)            <4>  call proc_fltoint16
 18913 000016A2 89E0                <4>  mov ax,sp
 18914 000016A4 89C5                <4>  mov bp,ax
 18915 000016A6 8CC8                <4>  mov ax,%3
 18916 000016A8 8ED8                <4>  mov ds,ax
 18917 000016AA 8B4604              <4>  mov ax,[bp+4]
 18918 000016AD A3[3720]            <4>  mov [%4],ax
 18919                              <4>  stkclose 0x06
 18920 000016B0 83C406              <5>  add word sp, %1
 18921                              <2>  add16 %%y, %%ball_r
 18922                              <3>  add16 cs, %1, cs, %2
 18923 000016B3 8CC8                <4>  mov ax,%3
 18924 000016B5 8ED8                <4>  mov ds,ax
 18925 000016B7 8B1E[3920]          <4>  mov bx,[%4]
 18926 000016BB 8CC8                <4>  mov ax,%1
 18927 000016BD 8ED8                <4>  mov ds,ax
 18928 000016BF 011E[3720]          <4>  add [%2],bx
 18929                              <2> 
 18930                              <2>  cmp16 %%y, __racket_y, cl
 18931                              <3>  cmp16 cs, %1, cs, %2, %3
 18932 000016C3 8CC8                <4>  mov ax,%1
 18933 000016C5 8ED8                <4>  mov ds,ax
 18934 000016C7 8B1E[3720]          <4>  mov bx,[%2]
 18935 000016CB 8CC8                <4>  mov ax,%3
 18936 000016CD 8ED8                <4>  mov ds,ax
 18937 000016CF 8B0E[861F]          <4>  mov cx,[%4]
 18938                              <4> 
 18939 000016D3 39CB                <4>  cmp bx,cx
 18940 000016D5 7F06                <4>  jg %%above
 18941 000016D7 7C08                <4>  jl %%below
 18942 000016D9 B100                <4>  mov byte %5, 0
 18943 000016DB EB06                <4>  jmp %%endcmp
 18944                              <4>  %%above:
 18945 000016DD B101                <4>  mov byte %5, 1
 18946 000016DF EB02                <4>  jmp %%endcmp
 18947                              <4>  %%below:
 18948 000016E1 B1FF                <4>  mov byte %5, -1
 18949                              <4>  %%endcmp:
 18950 000016E3 80F900              <2>  cmp cl,0
 18951 000016E6 0F8C0409            <2>  jl %%end
 18952                              <2>  mov16 %%racket_x, __racket_x
 18953                              <3>  mov16 cs, %1, cs, %2
 18954 000016EA 8CC8                <4>  mov ax,%3
 18955 000016EC 8ED8                <4>  mov ds,ax
 18956 000016EE 8B1E[841F]          <4>  mov bx,[%4]
 18957 000016F2 8CC8                <4>  mov ax,%1
 18958 000016F4 8ED8                <4>  mov ds,ax
 18959 000016F6 891E[3B20]          <4>  mov [%2],bx
 18960                              <2>  mov16 %%racket_x2, __racket_x
 18961                              <3>  mov16 cs, %1, cs, %2
 18962 000016FA 8CC8                <4>  mov ax,%3
 18963 000016FC 8ED8                <4>  mov ds,ax
 18964 000016FE 8B1E[841F]          <4>  mov bx,[%4]
 18965 00001702 8CC8                <4>  mov ax,%1
 18966 00001704 8ED8                <4>  mov ds,ax
 18967 00001706 891E[3D20]          <4>  mov [%2],bx
 18968                              <2>  add16 %%racket_x2, __racket_w
 18969                              <3>  add16 cs, %1, cs, %2
 18970 0000170A 8CC8                <4>  mov ax,%3
 18971 0000170C 8ED8                <4>  mov ds,ax
 18972 0000170E 8B1E[881F]          <4>  mov bx,[%4]
 18973 00001712 8CC8                <4>  mov ax,%1
 18974 00001714 8ED8                <4>  mov ds,ax
 18975 00001716 011E[3D20]          <4>  add [%2],bx
 18976                              <2> 
 18977                              <2>  fltoint16 __ball_x, %%x
 18978                              <3>  fltoint16 cs, %1, cs, %2
 18979                              <4>  stkopen 0x06
 18980 0000171A 83EC06              <5>  sub word sp, %1
 18981 0000171D 54                  <5>  push sp
 18982 0000171E 5D                  <5>  pop bp
 18983 0000171F 8CC8                <4>  mov ax,%1
 18984 00001721 8ED8                <4>  mov ds,ax
 18985 00001723 A1[481A]            <4>  mov ax,[%2+2]
 18986 00001726 894600              <4>  mov [bp+0],ax
 18987 00001729 A1[461A]            <4>  mov ax,[%2]
 18988 0000172C 894602              <4>  mov [bp+2],ax
 18989 0000172F E8(C305)            <4>  call proc_fltoint16
 18990 00001732 89E0                <4>  mov ax,sp
 18991 00001734 89C5                <4>  mov bp,ax
 18992 00001736 8CC8                <4>  mov ax,%3
 18993 00001738 8ED8                <4>  mov ds,ax
 18994 0000173A 8B4604              <4>  mov ax,[bp+4]
 18995 0000173D A3[3520]            <4>  mov [%4],ax
 18996                              <4>  stkclose 0x06
 18997 00001740 83C406              <5>  add word sp, %1
 18998                              <2>  add16 %%x, %%ball_r
 18999                              <3>  add16 cs, %1, cs, %2
 19000 00001743 8CC8                <4>  mov ax,%3
 19001 00001745 8ED8                <4>  mov ds,ax
 19002 00001747 8B1E[3920]          <4>  mov bx,[%4]
 19003 0000174B 8CC8                <4>  mov ax,%1
 19004 0000174D 8ED8                <4>  mov ds,ax
 19005 0000174F 011E[3520]          <4>  add [%2],bx
 19006                              <2> 
 19007                              <2>  cmp16 %%x, %%racket_x, cl
 19008                              <3>  cmp16 cs, %1, cs, %2, %3
 19009 00001753 8CC8                <4>  mov ax,%1
 19010 00001755 8ED8                <4>  mov ds,ax
 19011 00001757 8B1E[3520]          <4>  mov bx,[%2]
 19012 0000175B 8CC8                <4>  mov ax,%3
 19013 0000175D 8ED8                <4>  mov ds,ax
 19014 0000175F 8B0E[3B20]          <4>  mov cx,[%4]
 19015                              <4> 
 19016 00001763 39CB                <4>  cmp bx,cx
 19017 00001765 7F06                <4>  jg %%above
 19018 00001767 7C08                <4>  jl %%below
 19019 00001769 B100                <4>  mov byte %5, 0
 19020 0000176B EB06                <4>  jmp %%endcmp
 19021                              <4>  %%above:
 19022 0000176D B101                <4>  mov byte %5, 1
 19023 0000176F EB02                <4>  jmp %%endcmp
 19024                              <4>  %%below:
 19025 00001771 B1FF                <4>  mov byte %5, -1
 19026                              <4>  %%endcmp:
 19027 00001773 80F900              <2>  cmp cl,0
 19028 00001776 0F8C7408            <2>  jl %%end
 19029                              <2> 
 19030                              <2>  mov16 %%racket_px2, %%racket_x
 19031                              <3>  mov16 cs, %1, cs, %2
 19032 0000177A 8CC8                <4>  mov ax,%3
 19033 0000177C 8ED8                <4>  mov ds,ax
 19034 0000177E 8B1E[3B20]          <4>  mov bx,[%4]
 19035 00001782 8CC8                <4>  mov ax,%1
 19036 00001784 8ED8                <4>  mov ds,ax
 19037 00001786 891E[3F20]          <4>  mov [%2],bx
 19038                              <2>  add16 %%racket_px2, __racket_pw
 19039                              <3>  add16 cs, %1, cs, %2
 19040 0000178A 8CC8                <4>  mov ax,%3
 19041 0000178C 8ED8                <4>  mov ds,ax
 19042 0000178E 8B1E[8C1F]          <4>  mov bx,[%4]
 19043 00001792 8CC8                <4>  mov ax,%1
 19044 00001794 8ED8                <4>  mov ds,ax
 19045 00001796 011E[3F20]          <4>  add [%2],bx
 19046                              <2>  cmp16 %%x, %%racket_px2, cl
 19047                              <3>  cmp16 cs, %1, cs, %2, %3
 19048 0000179A 8CC8                <4>  mov ax,%1
 19049 0000179C 8ED8                <4>  mov ds,ax
 19050 0000179E 8B1E[3520]          <4>  mov bx,[%2]
 19051 000017A2 8CC8                <4>  mov ax,%3
 19052 000017A4 8ED8                <4>  mov ds,ax
 19053 000017A6 8B0E[3F20]          <4>  mov cx,[%4]
 19054                              <4> 
 19055 000017AA 39CB                <4>  cmp bx,cx
 19056 000017AC 7F06                <4>  jg %%above
 19057 000017AE 7C08                <4>  jl %%below
 19058 000017B0 B100                <4>  mov byte %5, 0
 19059 000017B2 EB06                <4>  jmp %%endcmp
 19060                              <4>  %%above:
 19061 000017B4 B101                <4>  mov byte %5, 1
 19062 000017B6 EB02                <4>  jmp %%endcmp
 19063                              <4>  %%below:
 19064 000017B8 B1FF                <4>  mov byte %5, -1
 19065                              <4>  %%endcmp:
 19066 000017BA 80F900              <2>  cmp cl,0
 19067 000017BD 0F8CAA00            <2>  jl %%left
 19068                              <2> 
 19069                              <2> 
 19070                              <2>  fltoint16 __ball_x, %%x
 19071                              <3>  fltoint16 cs, %1, cs, %2
 19072                              <4>  stkopen 0x06
 19073 000017C1 83EC06              <5>  sub word sp, %1
 19074 000017C4 54                  <5>  push sp
 19075 000017C5 5D                  <5>  pop bp
 19076 000017C6 8CC8                <4>  mov ax,%1
 19077 000017C8 8ED8                <4>  mov ds,ax
 19078 000017CA A1[481A]            <4>  mov ax,[%2+2]
 19079 000017CD 894600              <4>  mov [bp+0],ax
 19080 000017D0 A1[461A]            <4>  mov ax,[%2]
 19081 000017D3 894602              <4>  mov [bp+2],ax
 19082 000017D6 E8(C305)            <4>  call proc_fltoint16
 19083 000017D9 89E0                <4>  mov ax,sp
 19084 000017DB 89C5                <4>  mov bp,ax
 19085 000017DD 8CC8                <4>  mov ax,%3
 19086 000017DF 8ED8                <4>  mov ds,ax
 19087 000017E1 8B4604              <4>  mov ax,[bp+4]
 19088 000017E4 A3[3520]            <4>  mov [%4],ax
 19089                              <4>  stkclose 0x06
 19090 000017E7 83C406              <5>  add word sp, %1
 19091                              <2>  sub16 %%x, %%ball_r
 19092                              <3>  sub16 cs, %1, cs, %2
 19093 000017EA 8CC8                <4>  mov ax,%3
 19094 000017EC 8ED8                <4>  mov ds,ax
 19095 000017EE 8B1E[3920]          <4>  mov bx,[%4]
 19096 000017F2 8CC8                <4>  mov ax,%1
 19097 000017F4 8ED8                <4>  mov ds,ax
 19098 000017F6 291E[3520]          <4>  sub [%2],bx
 19099                              <2>  cmp16 %%x, %%racket_x2, cl
 19100                              <3>  cmp16 cs, %1, cs, %2, %3
 19101 000017FA 8CC8                <4>  mov ax,%1
 19102 000017FC 8ED8                <4>  mov ds,ax
 19103 000017FE 8B1E[3520]          <4>  mov bx,[%2]
 19104 00001802 8CC8                <4>  mov ax,%3
 19105 00001804 8ED8                <4>  mov ds,ax
 19106 00001806 8B0E[3D20]          <4>  mov cx,[%4]
 19107                              <4> 
 19108 0000180A 39CB                <4>  cmp bx,cx
 19109 0000180C 7F06                <4>  jg %%above
 19110 0000180E 7C08                <4>  jl %%below
 19111 00001810 B100                <4>  mov byte %5, 0
 19112 00001812 EB06                <4>  jmp %%endcmp
 19113                              <4>  %%above:
 19114 00001814 B101                <4>  mov byte %5, 1
 19115 00001816 EB02                <4>  jmp %%endcmp
 19116                              <4>  %%below:
 19117 00001818 B1FF                <4>  mov byte %5, -1
 19118                              <4>  %%endcmp:
 19119 0000181A 80F900              <2>  cmp cl,0
 19120 0000181D 0F8FCD07            <2>  jg %%end
 19121                              <2> 
 19122                              <2>  mov16 %%racket_px2, %%racket_x2
 19123                              <3>  mov16 cs, %1, cs, %2
 19124 00001821 8CC8                <4>  mov ax,%3
 19125 00001823 8ED8                <4>  mov ds,ax
 19126 00001825 8B1E[3D20]          <4>  mov bx,[%4]
 19127 00001829 8CC8                <4>  mov ax,%1
 19128 0000182B 8ED8                <4>  mov ds,ax
 19129 0000182D 891E[3F20]          <4>  mov [%2],bx
 19130                              <2>  sub16 %%racket_px2, __racket_pw
 19131                              <3>  sub16 cs, %1, cs, %2
 19132 00001831 8CC8                <4>  mov ax,%3
 19133 00001833 8ED8                <4>  mov ds,ax
 19134 00001835 8B1E[8C1F]          <4>  mov bx,[%4]
 19135 00001839 8CC8                <4>  mov ax,%1
 19136 0000183B 8ED8                <4>  mov ds,ax
 19137 0000183D 291E[3F20]          <4>  sub [%2],bx
 19138                              <2>  cmp16 %%x, %%racket_px2, cl
 19139                              <3>  cmp16 cs, %1, cs, %2, %3
 19140 00001841 8CC8                <4>  mov ax,%1
 19141 00001843 8ED8                <4>  mov ds,ax
 19142 00001845 8B1E[3520]          <4>  mov bx,[%2]
 19143 00001849 8CC8                <4>  mov ax,%3
 19144 0000184B 8ED8                <4>  mov ds,ax
 19145 0000184D 8B0E[3F20]          <4>  mov cx,[%4]
 19146                              <4> 
 19147 00001851 39CB                <4>  cmp bx,cx
 19148 00001853 7F06                <4>  jg %%above
 19149 00001855 7C08                <4>  jl %%below
 19150 00001857 B100                <4>  mov byte %5, 0
 19151 00001859 EB06                <4>  jmp %%endcmp
 19152                              <4>  %%above:
 19153 0000185B B101                <4>  mov byte %5, 1
 19154 0000185D EB02                <4>  jmp %%endcmp
 19155                              <4>  %%below:
 19156 0000185F B1FF                <4>  mov byte %5, -1
 19157                              <4>  %%endcmp:
 19158 00001861 80F900              <2>  cmp cl,0
 19159 00001864 0F8F4403            <2>  jg %%right
 19160                              <2> 
 19161 00001868 E98206              <2>  jmp %%center
 19162                              <2> 
 19163                              <2>  %%left:
 19164                              <2>  ball_leftangle
 19165                              <3>  flinvsig __ball_angle
 19166                              <4>  flinvsig cs, %1
 19167                              <5>  stkopen 0x02
 19168 0000186B 83EC02              <6>  sub word sp, %1
 19169 0000186E 54                  <6>  push sp
 19170 0000186F 5D                  <6>  pop bp
 19171 00001870 8CC8                <5>  mov ax,%1
 19172 00001872 8ED8                <5>  mov ds,ax
 19173 00001874 A1[601A]            <5>  mov ax,[%2+2]
 19174 00001877 894600              <5>  mov word [bp+0], ax
 19175 0000187A E8(B510)            <5>  call proc_flinvsig
 19176 0000187D 54                  <5>  push sp
 19177 0000187E 5D                  <5>  pop bp
 19178 0000187F 8B4600              <5>  mov ax,[bp+0]
 19179 00001882 A3[601A]            <5>  mov word [%2+2],ax
 19180                              <5>  stkclose 0x02
 19181 00001885 83C402              <6>  add word sp, %1
 19182                              <3>  to0x360 __ball_angle
 19183                              <4>  to0x360 %1, %1
 19184                              <5>  to0x360 cs, %1, cs, %2
 19185                              <6>  stkopen 0x08
 19186 00001888 83EC08              <7>  sub word sp, %1
 19187 0000188B 54                  <7>  push sp
 19188 0000188C 5D                  <7>  pop bp
 19189 0000188D 8CC8                <6>  mov ax,%1
 19190 0000188F 8ED8                <6>  mov ds,ax
 19191 00001891 A1[601A]            <6>  mov ax,[%2+2]
 19192 00001894 894600              <6>  mov [bp+0],ax
 19193 00001897 A1[5E1A]            <6>  mov ax,[%2]
 19194 0000189A 894602              <6>  mov [bp+2],ax
 19195 0000189D E8(9512)            <6>  call proc_to0x360
 19196 000018A0 89E0                <6>  mov ax,sp
 19197 000018A2 89C5                <6>  mov bp,ax
 19198 000018A4 8CC8                <6>  mov ax,%3
 19199 000018A6 8ED8                <6>  mov ds,ax
 19200 000018A8 8B4604              <6>  mov ax,[bp+4]
 19201 000018AB A3[601A]            <6>  mov [%4+2],ax
 19202 000018AE 8B4606              <6>  mov ax,[bp+6]
 19203 000018B1 A3[5E1A]            <6>  mov [%4],ax
 19204                              <6>  stkclose 0x08
 19205 000018B4 83C408              <7>  add word sp, %1
 19206                              <3> 
 19207                              <3>  validate_subangle cl
 19208                              <4> section .data
 19209 00002041 00000000            <4>  %%angle: dd 0
 19210 00002045 DB0F4940            <4>  %%180rad: dd 0x40490FDB
 19211 00002049 E4CB9640            <4>  %%270rad: dd 0x4096CBE4
 19212 0000204D 00000000            <4>  %%aux: dd 0
 19213                              <4> section .text
 19214                              <4>  mov32 %%angle, __ball_angle
 19215                              <5>  mov32 cs, %1, cs, %2
 19216 000018B7 8CC8                <6>  mov ax,%3
 19217 000018B9 8ED8                <6>  mov ds,ax
 19218 000018BB 8B0E[601A]          <6>  mov cx,[%4+2]
 19219 000018BF 8B16[5E1A]          <6>  mov dx,[%4]
 19220 000018C3 8CC8                <6>  mov ax,%1
 19221 000018C5 8ED8                <6>  mov ds,ax
 19222 000018C7 890E[4320]          <6>  mov [%2+2],cx
 19223 000018CB 8916[4120]          <6>  mov [%2],dx
 19224                              <4>  flsub %%angle, __ball_var_angle, %%angle
 19225                              <5>  flsub cs, %1, cs, %2, cs, %3
 19226                              <6>  fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
 19227                              <7>  stkopen 0x0E
 19228 000018CF 83EC0E              <8>  sub word sp, %1
 19229 000018D2 54                  <8>  push sp
 19230 000018D3 5D                  <8>  pop bp
 19231 000018D4 8CC8                <7>  mov ax,%1
 19232 000018D6 8ED8                <7>  mov ds,ax
 19233 000018D8 A1[4320]            <7>  mov ax,[%2+2]
 19234 000018DB 894600              <7>  mov [bp+0],ax
 19235 000018DE A1[4120]            <7>  mov ax,[%2]
 19236 000018E1 894602              <7>  mov [bp+2],ax
 19237 000018E4 8CC8                <7>  mov ax,%3
 19238 000018E6 8ED8                <7>  mov ds,ax
 19239 000018E8 A1[641A]            <7>  mov ax,[%4+2]
 19240 000018EB 894604              <7>  mov [bp+4],ax
 19241 000018EE A1[621A]            <7>  mov ax,[%4]
 19242 000018F1 894606              <7>  mov [bp+6],ax
 19243 000018F4 C7460C0080          <7>  mov word [bp+0x0C], %7
 19244 000018F9 E8(510C)            <7>  call proc_fladdorsub
 19245 000018FC 89E0                <7>  mov ax,sp
 19246 000018FE 89C5                <7>  mov bp,ax
 19247 00001900 8CC8                <7>  mov ax,%5
 19248 00001902 8ED8                <7>  mov ds,ax
 19249 00001904 8B4608              <7>  mov ax,[bp+8]
 19250 00001907 A3[4320]            <7>  mov [%6+2],ax
 19251 0000190A 8B460A              <7>  mov ax,[bp+0x0A]
 19252 0000190D A3[4120]            <7>  mov [%6],ax
 19253                              <7>  stkclose 0x0E
 19254 00001910 83C40E              <8>  add word sp, %1
 19255                              <4> 
 19256                              <4>  mov32 %%aux, %%270rad
 19257                              <5>  mov32 cs, %1, cs, %2
 19258 00001913 8CC8                <6>  mov ax,%3
 19259 00001915 8ED8                <6>  mov ds,ax
 19260 00001917 8B0E[4B20]          <6>  mov cx,[%4+2]
 19261 0000191B 8B16[4920]          <6>  mov dx,[%4]
 19262 0000191F 8CC8                <6>  mov ax,%1
 19263 00001921 8ED8                <6>  mov ds,ax
 19264 00001923 890E[4F20]          <6>  mov [%2+2],cx
 19265 00001927 8916[4D20]          <6>  mov [%2],dx
 19266                              <4>  fladd %%aux, __ball_var_angle, %%aux
 19267                              <5>  fladd cs, %1, cs, %2, cs, %3
 19268                              <6>  fladdorsub %1, %2, %3, %4, %5, %6, 0
 19269                              <7>  stkopen 0x0E
 19270 0000192B 83EC0E              <8>  sub word sp, %1
 19271 0000192E 54                  <8>  push sp
 19272 0000192F 5D                  <8>  pop bp
 19273 00001930 8CC8                <7>  mov ax,%1
 19274 00001932 8ED8                <7>  mov ds,ax
 19275 00001934 A1[4F20]            <7>  mov ax,[%2+2]
 19276 00001937 894600              <7>  mov [bp+0],ax
 19277 0000193A A1[4D20]            <7>  mov ax,[%2]
 19278 0000193D 894602              <7>  mov [bp+2],ax
 19279 00001940 8CC8                <7>  mov ax,%3
 19280 00001942 8ED8                <7>  mov ds,ax
 19281 00001944 A1[641A]            <7>  mov ax,[%4+2]
 19282 00001947 894604              <7>  mov [bp+4],ax
 19283 0000194A A1[621A]            <7>  mov ax,[%4]
 19284 0000194D 894606              <7>  mov [bp+6],ax
 19285 00001950 C7460C0000          <7>  mov word [bp+0x0C], %7
 19286 00001955 E8(510C)            <7>  call proc_fladdorsub
 19287 00001958 89E0                <7>  mov ax,sp
 19288 0000195A 89C5                <7>  mov bp,ax
 19289 0000195C 8CC8                <7>  mov ax,%5
 19290 0000195E 8ED8                <7>  mov ds,ax
 19291 00001960 8B4608              <7>  mov ax,[bp+8]
 19292 00001963 A3[4F20]            <7>  mov [%6+2],ax
 19293 00001966 8B460A              <7>  mov ax,[bp+0x0A]
 19294 00001969 A3[4D20]            <7>  mov [%6],ax
 19295                              <7>  stkclose 0x0E
 19296 0000196C 83C40E              <8>  add word sp, %1
 19297                              <4>  flcmp %%angle, %%aux, cl
 19298                              <5>  flcmp cs, %1, cs, %2, %3
 19299                              <6>  stkopen 0x09
 19300 0000196F 83EC09              <7>  sub word sp, %1
 19301 00001972 54                  <7>  push sp
 19302 00001973 5D                  <7>  pop bp
 19303 00001974 8CC8                <6>  mov ax,%1
 19304 00001976 8ED8                <6>  mov ds,ax
 19305 00001978 A1[4320]            <6>  mov ax,[%2+2]
 19306 0000197B 894600              <6>  mov [bp+0],ax
 19307 0000197E A1[4120]            <6>  mov ax,[%2]
 19308 00001981 894602              <6>  mov [bp+2],ax
 19309 00001984 8CC8                <6>  mov ax,%3
 19310 00001986 8ED8                <6>  mov ds,ax
 19311 00001988 A1[4F20]            <6>  mov ax,[%4+2]
 19312 0000198B 894604              <6>  mov [bp+4],ax
 19313 0000198E A1[4D20]            <6>  mov ax,[%4]
 19314 00001991 894606              <6>  mov [bp+6],ax
 19315 00001994 E8(BC08)            <6>  call proc_flcmp
 19316 00001997 89E0                <6>  mov ax,sp
 19317 00001999 89C5                <6>  mov bp,ax
 19318 0000199B 8A4E08              <6>  mov byte %5,[bp+8]
 19319                              <6>  stkclose 0x09
 19320 0000199E 83C409              <7>  add word sp, %1
 19321 000019A1 80F900              <4>  cmp cl,0
 19322 000019A4 0F8DCE00            <4>  jge %%valid
 19323                              <4> 
 19324                              <4>  flcmp %%angle, %%270rad, cl
 19325                              <5>  flcmp cs, %1, cs, %2, %3
 19326                              <6>  stkopen 0x09
 19327 000019A8 83EC09              <7>  sub word sp, %1
 19328 000019AB 54                  <7>  push sp
 19329 000019AC 5D                  <7>  pop bp
 19330 000019AD 8CC8                <6>  mov ax,%1
 19331 000019AF 8ED8                <6>  mov ds,ax
 19332 000019B1 A1[4320]            <6>  mov ax,[%2+2]
 19333 000019B4 894600              <6>  mov [bp+0],ax
 19334 000019B7 A1[4120]            <6>  mov ax,[%2]
 19335 000019BA 894602              <6>  mov [bp+2],ax
 19336 000019BD 8CC8                <6>  mov ax,%3
 19337 000019BF 8ED8                <6>  mov ds,ax
 19338 000019C1 A1[4B20]            <6>  mov ax,[%4+2]
 19339 000019C4 894604              <6>  mov [bp+4],ax
 19340 000019C7 A1[4920]            <6>  mov ax,[%4]
 19341 000019CA 894606              <6>  mov [bp+6],ax
 19342 000019CD E8(BC08)            <6>  call proc_flcmp
 19343 000019D0 89E0                <6>  mov ax,sp
 19344 000019D2 89C5                <6>  mov bp,ax
 19345 000019D4 8A4E08              <6>  mov byte %5,[bp+8]
 19346                              <6>  stkclose 0x09
 19347 000019D7 83C409              <7>  add word sp, %1
 19348 000019DA 80F900              <4>  cmp cl,0
 19349 000019DD 0F8D9900            <4>  jge %%invalid
 19350                              <4> 
 19351                              <4>  mov32 %%aux, %%180rad
 19352                              <5>  mov32 cs, %1, cs, %2
 19353 000019E1 8CC8                <6>  mov ax,%3
 19354 000019E3 8ED8                <6>  mov ds,ax
 19355 000019E5 8B0E[4720]          <6>  mov cx,[%4+2]
 19356 000019E9 8B16[4520]          <6>  mov dx,[%4]
 19357 000019ED 8CC8                <6>  mov ax,%1
 19358 000019EF 8ED8                <6>  mov ds,ax
 19359 000019F1 890E[4F20]          <6>  mov [%2+2],cx
 19360 000019F5 8916[4D20]          <6>  mov [%2],dx
 19361                              <4>  fladd %%aux, __ball_var_angle, %%aux
 19362                              <5>  fladd cs, %1, cs, %2, cs, %3
 19363                              <6>  fladdorsub %1, %2, %3, %4, %5, %6, 0
 19364                              <7>  stkopen 0x0E
 19365 000019F9 83EC0E              <8>  sub word sp, %1
 19366 000019FC 54                  <8>  push sp
 19367 000019FD 5D                  <8>  pop bp
 19368 000019FE 8CC8                <7>  mov ax,%1
 19369 00001A00 8ED8                <7>  mov ds,ax
 19370 00001A02 A1[4F20]            <7>  mov ax,[%2+2]
 19371 00001A05 894600              <7>  mov [bp+0],ax
 19372 00001A08 A1[4D20]            <7>  mov ax,[%2]
 19373 00001A0B 894602              <7>  mov [bp+2],ax
 19374 00001A0E 8CC8                <7>  mov ax,%3
 19375 00001A10 8ED8                <7>  mov ds,ax
 19376 00001A12 A1[641A]            <7>  mov ax,[%4+2]
 19377 00001A15 894604              <7>  mov [bp+4],ax
 19378 00001A18 A1[621A]            <7>  mov ax,[%4]
 19379 00001A1B 894606              <7>  mov [bp+6],ax
 19380 00001A1E C7460C0000          <7>  mov word [bp+0x0C], %7
 19381 00001A23 E8(510C)            <7>  call proc_fladdorsub
 19382 00001A26 89E0                <7>  mov ax,sp
 19383 00001A28 89C5                <7>  mov bp,ax
 19384 00001A2A 8CC8                <7>  mov ax,%5
 19385 00001A2C 8ED8                <7>  mov ds,ax
 19386 00001A2E 8B4608              <7>  mov ax,[bp+8]
 19387 00001A31 A3[4F20]            <7>  mov [%6+2],ax
 19388 00001A34 8B460A              <7>  mov ax,[bp+0x0A]
 19389 00001A37 A3[4D20]            <7>  mov [%6],ax
 19390                              <7>  stkclose 0x0E
 19391 00001A3A 83C40E              <8>  add word sp, %1
 19392                              <4>  flcmp %%angle, %%aux, cl
 19393                              <5>  flcmp cs, %1, cs, %2, %3
 19394                              <6>  stkopen 0x09
 19395 00001A3D 83EC09              <7>  sub word sp, %1
 19396 00001A40 54                  <7>  push sp
 19397 00001A41 5D                  <7>  pop bp
 19398 00001A42 8CC8                <6>  mov ax,%1
 19399 00001A44 8ED8                <6>  mov ds,ax
 19400 00001A46 A1[4320]            <6>  mov ax,[%2+2]
 19401 00001A49 894600              <6>  mov [bp+0],ax
 19402 00001A4C A1[4120]            <6>  mov ax,[%2]
 19403 00001A4F 894602              <6>  mov [bp+2],ax
 19404 00001A52 8CC8                <6>  mov ax,%3
 19405 00001A54 8ED8                <6>  mov ds,ax
 19406 00001A56 A1[4F20]            <6>  mov ax,[%4+2]
 19407 00001A59 894604              <6>  mov [bp+4],ax
 19408 00001A5C A1[4D20]            <6>  mov ax,[%4]
 19409 00001A5F 894606              <6>  mov [bp+6],ax
 19410 00001A62 E8(BC08)            <6>  call proc_flcmp
 19411 00001A65 89E0                <6>  mov ax,sp
 19412 00001A67 89C5                <6>  mov bp,ax
 19413 00001A69 8A4E08              <6>  mov byte %5,[bp+8]
 19414                              <6>  stkclose 0x09
 19415 00001A6C 83C409              <7>  add word sp, %1
 19416 00001A6F 80F900              <4>  cmp cl,0
 19417 00001A72 7D02                <4>  jge %%valid
 19418 00001A74 EB04                <4>  jmp %%invalid
 19419                              <4> 
 19420                              <4>  %%valid:
 19421 00001A76 B100                <4>  mov byte %1, 0
 19422 00001A78 EB02                <4>  jmp %%end
 19423                              <4>  %%invalid:
 19424 00001A7A B101                <4>  mov byte %1, 1
 19425                              <4>  %%end:
 19426 00001A7C 80F900              <3>  cmp cl,0
 19427 00001A7F 7544                <3>  jnz %%altered
 19428                              <3>  flsub __ball_angle, __ball_var_angle, __ball_angle
 19429                              <4>  flsub cs, %1, cs, %2, cs, %3
 19430                              <5>  fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
 19431                              <6>  stkopen 0x0E
 19432 00001A81 83EC0E              <7>  sub word sp, %1
 19433 00001A84 54                  <7>  push sp
 19434 00001A85 5D                  <7>  pop bp
 19435 00001A86 8CC8                <6>  mov ax,%1
 19436 00001A88 8ED8                <6>  mov ds,ax
 19437 00001A8A A1[601A]            <6>  mov ax,[%2+2]
 19438 00001A8D 894600              <6>  mov [bp+0],ax
 19439 00001A90 A1[5E1A]            <6>  mov ax,[%2]
 19440 00001A93 894602              <6>  mov [bp+2],ax
 19441 00001A96 8CC8                <6>  mov ax,%3
 19442 00001A98 8ED8                <6>  mov ds,ax
 19443 00001A9A A1[641A]            <6>  mov ax,[%4+2]
 19444 00001A9D 894604              <6>  mov [bp+4],ax
 19445 00001AA0 A1[621A]            <6>  mov ax,[%4]
 19446 00001AA3 894606              <6>  mov [bp+6],ax
 19447 00001AA6 C7460C0080          <6>  mov word [bp+0x0C], %7
 19448 00001AAB E8(510C)            <6>  call proc_fladdorsub
 19449 00001AAE 89E0                <6>  mov ax,sp
 19450 00001AB0 89C5                <6>  mov bp,ax
 19451 00001AB2 8CC8                <6>  mov ax,%5
 19452 00001AB4 8ED8                <6>  mov ds,ax
 19453 00001AB6 8B4608              <6>  mov ax,[bp+8]
 19454 00001AB9 A3[601A]            <6>  mov [%6+2],ax
 19455 00001ABC 8B460A              <6>  mov ax,[bp+0x0A]
 19456 00001ABF A3[5E1A]            <6>  mov [%6],ax
 19457                              <6>  stkclose 0x0E
 19458 00001AC2 83C40E              <7>  add word sp, %1
 19459                              <3>  %%altered:
 19460                              <3> 
 19461                              <3>  ball_updateangle
 19462                              <4>  cos __ball_angle, __ball_xinc
 19463                              <5>  cos cs, %1, cs, %2
 19464                              <6>  sinorcos %1, %2, %3, %4, 0
 19465                              <7>  stkopen 0x09
 19466 00001AC5 83EC09              <8>  sub word sp, %1
 19467 00001AC8 54                  <8>  push sp
 19468 00001AC9 5D                  <8>  pop bp
 19469 00001ACA 8CC8                <7>  mov ax,%1
 19470 00001ACC 8ED8                <7>  mov ds,ax
 19471 00001ACE A1[601A]            <7>  mov ax,[%2+2]
 19472 00001AD1 894600              <7>  mov [bp+0],ax
 19473 00001AD4 A1[5E1A]            <7>  mov ax,[%2]
 19474 00001AD7 894602              <7>  mov [bp+2],ax
 19475 00001ADA C6460800            <7>  mov byte [bp+8],%5
 19476 00001ADE E8(4E14)            <7>  call proc_sinorcos
 19477 00001AE1 89E0                <7>  mov ax,sp
 19478 00001AE3 89C5                <7>  mov bp,ax
 19479 00001AE5 8CC8                <7>  mov ax,%3
 19480 00001AE7 8ED8                <7>  mov ds,ax
 19481 00001AE9 8B4604              <7>  mov ax,[bp+4]
 19482 00001AEC A3[541A]            <7>  mov [%4+2],ax
 19483 00001AEF 8B4606              <7>  mov ax,[bp+6]
 19484 00001AF2 A3[521A]            <7>  mov [%4],ax
 19485                              <7>  stkclose 0x09
 19486 00001AF5 83C409              <8>  add word sp, %1
 19487                              <4>  sin __ball_angle, __ball_yinc
 19488                              <5>  sin cs, %1, cs, %2
 19489                              <6>  sinorcos %1, %2, %3, %4, 1
 19490                              <7>  stkopen 0x09
 19491 00001AF8 83EC09              <8>  sub word sp, %1
 19492 00001AFB 54                  <8>  push sp
 19493 00001AFC 5D                  <8>  pop bp
 19494 00001AFD 8CC8                <7>  mov ax,%1
 19495 00001AFF 8ED8                <7>  mov ds,ax
 19496 00001B01 A1[601A]            <7>  mov ax,[%2+2]
 19497 00001B04 894600              <7>  mov [bp+0],ax
 19498 00001B07 A1[5E1A]            <7>  mov ax,[%2]
 19499 00001B0A 894602              <7>  mov [bp+2],ax
 19500 00001B0D C6460801            <7>  mov byte [bp+8],%5
 19501 00001B11 E8(4E14)            <7>  call proc_sinorcos
 19502 00001B14 89E0                <7>  mov ax,sp
 19503 00001B16 89C5                <7>  mov bp,ax
 19504 00001B18 8CC8                <7>  mov ax,%3
 19505 00001B1A 8ED8                <7>  mov ds,ax
 19506 00001B1C 8B4604              <7>  mov ax,[bp+4]
 19507 00001B1F A3[581A]            <7>  mov [%4+2],ax
 19508 00001B22 8B4606              <7>  mov ax,[bp+6]
 19509 00001B25 A3[561A]            <7>  mov [%4],ax
 19510                              <7>  stkclose 0x09
 19511 00001B28 83C409              <8>  add word sp, %1
 19512                              <4> 
 19513                              <4>  flmul __ball_xinc, __ball_rinc, __ball_xinc
 19514                              <5>  flmul cs, %1, cs, %2, cs, %3
 19515                              <6>  stkopen 0x0C
 19516 00001B2B 83EC0C              <7>  sub word sp, %1
 19517 00001B2E 54                  <7>  push sp
 19518 00001B2F 5D                  <7>  pop bp
 19519 00001B30 8CC8                <6>  mov ax,%1
 19520 00001B32 8ED8                <6>  mov ds,ax
 19521 00001B34 A1[541A]            <6>  mov ax,[%2+2]
 19522 00001B37 894600              <6>  mov [bp+0],ax
 19523 00001B3A A1[521A]            <6>  mov ax,[%2]
 19524 00001B3D 894602              <6>  mov [bp+2],ax
 19525 00001B40 8CC8                <6>  mov ax,%3
 19526 00001B42 8ED8                <6>  mov ds,ax
 19527 00001B44 A1[5C1A]            <6>  mov ax,[%4+2]
 19528 00001B47 894604              <6>  mov [bp+4],ax
 19529 00001B4A A1[5A1A]            <6>  mov ax,[%4]
 19530 00001B4D 894606              <6>  mov [bp+6],ax
 19531 00001B50 E8(A50A)            <6>  call proc_flmul
 19532 00001B53 89E0                <6>  mov ax,sp
 19533 00001B55 89C5                <6>  mov bp,ax
 19534 00001B57 8CC8                <6>  mov ax,%5
 19535 00001B59 8ED8                <6>  mov ds,ax
 19536 00001B5B 8B4608              <6>  mov ax,[bp+8]
 19537 00001B5E A3[541A]            <6>  mov [%6+2],ax
 19538 00001B61 8B460A              <6>  mov ax,[bp+0x0A]
 19539 00001B64 A3[521A]            <6>  mov [%6],ax
 19540                              <6>  stkclose 0x0C
 19541 00001B67 83C40C              <7>  add word sp, %1
 19542                              <4>  flmul __ball_yinc, __ball_rinc, __ball_yinc
 19543                              <5>  flmul cs, %1, cs, %2, cs, %3
 19544                              <6>  stkopen 0x0C
 19545 00001B6A 83EC0C              <7>  sub word sp, %1
 19546 00001B6D 54                  <7>  push sp
 19547 00001B6E 5D                  <7>  pop bp
 19548 00001B6F 8CC8                <6>  mov ax,%1
 19549 00001B71 8ED8                <6>  mov ds,ax
 19550 00001B73 A1[581A]            <6>  mov ax,[%2+2]
 19551 00001B76 894600              <6>  mov [bp+0],ax
 19552 00001B79 A1[561A]            <6>  mov ax,[%2]
 19553 00001B7C 894602              <6>  mov [bp+2],ax
 19554 00001B7F 8CC8                <6>  mov ax,%3
 19555 00001B81 8ED8                <6>  mov ds,ax
 19556 00001B83 A1[5C1A]            <6>  mov ax,[%4+2]
 19557 00001B86 894604              <6>  mov [bp+4],ax
 19558 00001B89 A1[5A1A]            <6>  mov ax,[%4]
 19559 00001B8C 894606              <6>  mov [bp+6],ax
 19560 00001B8F E8(A50A)            <6>  call proc_flmul
 19561 00001B92 89E0                <6>  mov ax,sp
 19562 00001B94 89C5                <6>  mov bp,ax
 19563 00001B96 8CC8                <6>  mov ax,%5
 19564 00001B98 8ED8                <6>  mov ds,ax
 19565 00001B9A 8B4608              <6>  mov ax,[bp+8]
 19566 00001B9D A3[581A]            <6>  mov [%6+2],ax
 19567 00001BA0 8B460A              <6>  mov ax,[bp+0x0A]
 19568 00001BA3 A3[561A]            <6>  mov [%6],ax
 19569                              <6>  stkclose 0x0C
 19570 00001BA6 83C40C              <7>  add word sp, %1
 19571 00001BA9 E94204              <2>  jmp %%end
 19572                              <2>  %%right:
 19573                              <2>  ball_rightangle
 19574                              <3>  flinvsig __ball_angle
 19575                              <4>  flinvsig cs, %1
 19576                              <5>  stkopen 0x02
 19577 00001BAC 83EC02              <6>  sub word sp, %1
 19578 00001BAF 54                  <6>  push sp
 19579 00001BB0 5D                  <6>  pop bp
 19580 00001BB1 8CC8                <5>  mov ax,%1
 19581 00001BB3 8ED8                <5>  mov ds,ax
 19582 00001BB5 A1[601A]            <5>  mov ax,[%2+2]
 19583 00001BB8 894600              <5>  mov word [bp+0], ax
 19584 00001BBB E8(B510)            <5>  call proc_flinvsig
 19585 00001BBE 54                  <5>  push sp
 19586 00001BBF 5D                  <5>  pop bp
 19587 00001BC0 8B4600              <5>  mov ax,[bp+0]
 19588 00001BC3 A3[601A]            <5>  mov word [%2+2],ax
 19589                              <5>  stkclose 0x02
 19590 00001BC6 83C402              <6>  add word sp, %1
 19591                              <3>  to0x360 __ball_angle
 19592                              <4>  to0x360 %1, %1
 19593                              <5>  to0x360 cs, %1, cs, %2
 19594                              <6>  stkopen 0x08
 19595 00001BC9 83EC08              <7>  sub word sp, %1
 19596 00001BCC 54                  <7>  push sp
 19597 00001BCD 5D                  <7>  pop bp
 19598 00001BCE 8CC8                <6>  mov ax,%1
 19599 00001BD0 8ED8                <6>  mov ds,ax
 19600 00001BD2 A1[601A]            <6>  mov ax,[%2+2]
 19601 00001BD5 894600              <6>  mov [bp+0],ax
 19602 00001BD8 A1[5E1A]            <6>  mov ax,[%2]
 19603 00001BDB 894602              <6>  mov [bp+2],ax
 19604 00001BDE E8(9512)            <6>  call proc_to0x360
 19605 00001BE1 89E0                <6>  mov ax,sp
 19606 00001BE3 89C5                <6>  mov bp,ax
 19607 00001BE5 8CC8                <6>  mov ax,%3
 19608 00001BE7 8ED8                <6>  mov ds,ax
 19609 00001BE9 8B4604              <6>  mov ax,[bp+4]
 19610 00001BEC A3[601A]            <6>  mov [%4+2],ax
 19611 00001BEF 8B4606              <6>  mov ax,[bp+6]
 19612 00001BF2 A3[5E1A]            <6>  mov [%4],ax
 19613                              <6>  stkclose 0x08
 19614 00001BF5 83C408              <7>  add word sp, %1
 19615                              <3> 
 19616                              <3>  validate_addangle cl
 19617                              <4> section .data
 19618 00002051 00000000            <4>  %%angle: dd 0
 19619 00002055 E4CB9640            <4>  %%270rad: dd 0x4096CBE4
 19620 00002059 DB0FC940            <4>  %%360rad: dd 0x40C90FDB
 19621 0000205D 00000000            <4>  %%aux: dd 0
 19622                              <4> section .text
 19623                              <4>  mov32 %%angle, __ball_angle
 19624                              <5>  mov32 cs, %1, cs, %2
 19625 00001BF8 8CC8                <6>  mov ax,%3
 19626 00001BFA 8ED8                <6>  mov ds,ax
 19627 00001BFC 8B0E[601A]          <6>  mov cx,[%4+2]
 19628 00001C00 8B16[5E1A]          <6>  mov dx,[%4]
 19629 00001C04 8CC8                <6>  mov ax,%1
 19630 00001C06 8ED8                <6>  mov ds,ax
 19631 00001C08 890E[5320]          <6>  mov [%2+2],cx
 19632 00001C0C 8916[5120]          <6>  mov [%2],dx
 19633                              <4>  fladd %%angle, __ball_var_angle, %%angle
 19634                              <5>  fladd cs, %1, cs, %2, cs, %3
 19635                              <6>  fladdorsub %1, %2, %3, %4, %5, %6, 0
 19636                              <7>  stkopen 0x0E
 19637 00001C10 83EC0E              <8>  sub word sp, %1
 19638 00001C13 54                  <8>  push sp
 19639 00001C14 5D                  <8>  pop bp
 19640 00001C15 8CC8                <7>  mov ax,%1
 19641 00001C17 8ED8                <7>  mov ds,ax
 19642 00001C19 A1[5320]            <7>  mov ax,[%2+2]
 19643 00001C1C 894600              <7>  mov [bp+0],ax
 19644 00001C1F A1[5120]            <7>  mov ax,[%2]
 19645 00001C22 894602              <7>  mov [bp+2],ax
 19646 00001C25 8CC8                <7>  mov ax,%3
 19647 00001C27 8ED8                <7>  mov ds,ax
 19648 00001C29 A1[641A]            <7>  mov ax,[%4+2]
 19649 00001C2C 894604              <7>  mov [bp+4],ax
 19650 00001C2F A1[621A]            <7>  mov ax,[%4]
 19651 00001C32 894606              <7>  mov [bp+6],ax
 19652 00001C35 C7460C0000          <7>  mov word [bp+0x0C], %7
 19653 00001C3A E8(510C)            <7>  call proc_fladdorsub
 19654 00001C3D 89E0                <7>  mov ax,sp
 19655 00001C3F 89C5                <7>  mov bp,ax
 19656 00001C41 8CC8                <7>  mov ax,%5
 19657 00001C43 8ED8                <7>  mov ds,ax
 19658 00001C45 8B4608              <7>  mov ax,[bp+8]
 19659 00001C48 A3[5320]            <7>  mov [%6+2],ax
 19660 00001C4B 8B460A              <7>  mov ax,[bp+0x0A]
 19661 00001C4E A3[5120]            <7>  mov [%6],ax
 19662                              <7>  stkclose 0x0E
 19663 00001C51 83C40E              <8>  add word sp, %1
 19664                              <4> 
 19665                              <4>  mov32 %%aux, %%270rad
 19666                              <5>  mov32 cs, %1, cs, %2
 19667 00001C54 8CC8                <6>  mov ax,%3
 19668 00001C56 8ED8                <6>  mov ds,ax
 19669 00001C58 8B0E[5720]          <6>  mov cx,[%4+2]
 19670 00001C5C 8B16[5520]          <6>  mov dx,[%4]
 19671 00001C60 8CC8                <6>  mov ax,%1
 19672 00001C62 8ED8                <6>  mov ds,ax
 19673 00001C64 890E[5F20]          <6>  mov [%2+2],cx
 19674 00001C68 8916[5D20]          <6>  mov [%2],dx
 19675                              <4>  flsub %%aux, __ball_var_angle, %%aux
 19676                              <5>  flsub cs, %1, cs, %2, cs, %3
 19677                              <6>  fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
 19678                              <7>  stkopen 0x0E
 19679 00001C6C 83EC0E              <8>  sub word sp, %1
 19680 00001C6F 54                  <8>  push sp
 19681 00001C70 5D                  <8>  pop bp
 19682 00001C71 8CC8                <7>  mov ax,%1
 19683 00001C73 8ED8                <7>  mov ds,ax
 19684 00001C75 A1[5F20]            <7>  mov ax,[%2+2]
 19685 00001C78 894600              <7>  mov [bp+0],ax
 19686 00001C7B A1[5D20]            <7>  mov ax,[%2]
 19687 00001C7E 894602              <7>  mov [bp+2],ax
 19688 00001C81 8CC8                <7>  mov ax,%3
 19689 00001C83 8ED8                <7>  mov ds,ax
 19690 00001C85 A1[641A]            <7>  mov ax,[%4+2]
 19691 00001C88 894604              <7>  mov [bp+4],ax
 19692 00001C8B A1[621A]            <7>  mov ax,[%4]
 19693 00001C8E 894606              <7>  mov [bp+6],ax
 19694 00001C91 C7460C0080          <7>  mov word [bp+0x0C], %7
 19695 00001C96 E8(510C)            <7>  call proc_fladdorsub
 19696 00001C99 89E0                <7>  mov ax,sp
 19697 00001C9B 89C5                <7>  mov bp,ax
 19698 00001C9D 8CC8                <7>  mov ax,%5
 19699 00001C9F 8ED8                <7>  mov ds,ax
 19700 00001CA1 8B4608              <7>  mov ax,[bp+8]
 19701 00001CA4 A3[5F20]            <7>  mov [%6+2],ax
 19702 00001CA7 8B460A              <7>  mov ax,[bp+0x0A]
 19703 00001CAA A3[5D20]            <7>  mov [%6],ax
 19704                              <7>  stkclose 0x0E
 19705 00001CAD 83C40E              <8>  add word sp, %1
 19706                              <4>  flcmp %%angle, %%aux, cl
 19707                              <5>  flcmp cs, %1, cs, %2, %3
 19708                              <6>  stkopen 0x09
 19709 00001CB0 83EC09              <7>  sub word sp, %1
 19710 00001CB3 54                  <7>  push sp
 19711 00001CB4 5D                  <7>  pop bp
 19712 00001CB5 8CC8                <6>  mov ax,%1
 19713 00001CB7 8ED8                <6>  mov ds,ax
 19714 00001CB9 A1[5320]            <6>  mov ax,[%2+2]
 19715 00001CBC 894600              <6>  mov [bp+0],ax
 19716 00001CBF A1[5120]            <6>  mov ax,[%2]
 19717 00001CC2 894602              <6>  mov [bp+2],ax
 19718 00001CC5 8CC8                <6>  mov ax,%3
 19719 00001CC7 8ED8                <6>  mov ds,ax
 19720 00001CC9 A1[5F20]            <6>  mov ax,[%4+2]
 19721 00001CCC 894604              <6>  mov [bp+4],ax
 19722 00001CCF A1[5D20]            <6>  mov ax,[%4]
 19723 00001CD2 894606              <6>  mov [bp+6],ax
 19724 00001CD5 E8(BC08)            <6>  call proc_flcmp
 19725 00001CD8 89E0                <6>  mov ax,sp
 19726 00001CDA 89C5                <6>  mov bp,ax
 19727 00001CDC 8A4E08              <6>  mov byte %5,[bp+8]
 19728                              <6>  stkclose 0x09
 19729 00001CDF 83C409              <7>  add word sp, %1
 19730 00001CE2 80F900              <4>  cmp cl,0
 19731 00001CE5 0F8ECE00            <4>  jle %%valid
 19732                              <4> 
 19733                              <4>  flcmp %%angle, %%270rad, cl
 19734                              <5>  flcmp cs, %1, cs, %2, %3
 19735                              <6>  stkopen 0x09
 19736 00001CE9 83EC09              <7>  sub word sp, %1
 19737 00001CEC 54                  <7>  push sp
 19738 00001CED 5D                  <7>  pop bp
 19739 00001CEE 8CC8                <6>  mov ax,%1
 19740 00001CF0 8ED8                <6>  mov ds,ax
 19741 00001CF2 A1[5320]            <6>  mov ax,[%2+2]
 19742 00001CF5 894600              <6>  mov [bp+0],ax
 19743 00001CF8 A1[5120]            <6>  mov ax,[%2]
 19744 00001CFB 894602              <6>  mov [bp+2],ax
 19745 00001CFE 8CC8                <6>  mov ax,%3
 19746 00001D00 8ED8                <6>  mov ds,ax
 19747 00001D02 A1[5720]            <6>  mov ax,[%4+2]
 19748 00001D05 894604              <6>  mov [bp+4],ax
 19749 00001D08 A1[5520]            <6>  mov ax,[%4]
 19750 00001D0B 894606              <6>  mov [bp+6],ax
 19751 00001D0E E8(BC08)            <6>  call proc_flcmp
 19752 00001D11 89E0                <6>  mov ax,sp
 19753 00001D13 89C5                <6>  mov bp,ax
 19754 00001D15 8A4E08              <6>  mov byte %5,[bp+8]
 19755                              <6>  stkclose 0x09
 19756 00001D18 83C409              <7>  add word sp, %1
 19757 00001D1B 80F900              <4>  cmp cl,0
 19758 00001D1E 0F8E9900            <4>  jle %%invalid
 19759                              <4> 
 19760                              <4>  mov32 %%aux, %%360rad
 19761                              <5>  mov32 cs, %1, cs, %2
 19762 00001D22 8CC8                <6>  mov ax,%3
 19763 00001D24 8ED8                <6>  mov ds,ax
 19764 00001D26 8B0E[5B20]          <6>  mov cx,[%4+2]
 19765 00001D2A 8B16[5920]          <6>  mov dx,[%4]
 19766 00001D2E 8CC8                <6>  mov ax,%1
 19767 00001D30 8ED8                <6>  mov ds,ax
 19768 00001D32 890E[5F20]          <6>  mov [%2+2],cx
 19769 00001D36 8916[5D20]          <6>  mov [%2],dx
 19770                              <4>  flsub %%aux, __ball_var_angle, %%aux
 19771                              <5>  flsub cs, %1, cs, %2, cs, %3
 19772                              <6>  fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
 19773                              <7>  stkopen 0x0E
 19774 00001D3A 83EC0E              <8>  sub word sp, %1
 19775 00001D3D 54                  <8>  push sp
 19776 00001D3E 5D                  <8>  pop bp
 19777 00001D3F 8CC8                <7>  mov ax,%1
 19778 00001D41 8ED8                <7>  mov ds,ax
 19779 00001D43 A1[5F20]            <7>  mov ax,[%2+2]
 19780 00001D46 894600              <7>  mov [bp+0],ax
 19781 00001D49 A1[5D20]            <7>  mov ax,[%2]
 19782 00001D4C 894602              <7>  mov [bp+2],ax
 19783 00001D4F 8CC8                <7>  mov ax,%3
 19784 00001D51 8ED8                <7>  mov ds,ax
 19785 00001D53 A1[641A]            <7>  mov ax,[%4+2]
 19786 00001D56 894604              <7>  mov [bp+4],ax
 19787 00001D59 A1[621A]            <7>  mov ax,[%4]
 19788 00001D5C 894606              <7>  mov [bp+6],ax
 19789 00001D5F C7460C0080          <7>  mov word [bp+0x0C], %7
 19790 00001D64 E8(510C)            <7>  call proc_fladdorsub
 19791 00001D67 89E0                <7>  mov ax,sp
 19792 00001D69 89C5                <7>  mov bp,ax
 19793 00001D6B 8CC8                <7>  mov ax,%5
 19794 00001D6D 8ED8                <7>  mov ds,ax
 19795 00001D6F 8B4608              <7>  mov ax,[bp+8]
 19796 00001D72 A3[5F20]            <7>  mov [%6+2],ax
 19797 00001D75 8B460A              <7>  mov ax,[bp+0x0A]
 19798 00001D78 A3[5D20]            <7>  mov [%6],ax
 19799                              <7>  stkclose 0x0E
 19800 00001D7B 83C40E              <8>  add word sp, %1
 19801                              <4>  flcmp %%angle, %%aux, cl
 19802                              <5>  flcmp cs, %1, cs, %2, %3
 19803                              <6>  stkopen 0x09
 19804 00001D7E 83EC09              <7>  sub word sp, %1
 19805 00001D81 54                  <7>  push sp
 19806 00001D82 5D                  <7>  pop bp
 19807 00001D83 8CC8                <6>  mov ax,%1
 19808 00001D85 8ED8                <6>  mov ds,ax
 19809 00001D87 A1[5320]            <6>  mov ax,[%2+2]
 19810 00001D8A 894600              <6>  mov [bp+0],ax
 19811 00001D8D A1[5120]            <6>  mov ax,[%2]
 19812 00001D90 894602              <6>  mov [bp+2],ax
 19813 00001D93 8CC8                <6>  mov ax,%3
 19814 00001D95 8ED8                <6>  mov ds,ax
 19815 00001D97 A1[5F20]            <6>  mov ax,[%4+2]
 19816 00001D9A 894604              <6>  mov [bp+4],ax
 19817 00001D9D A1[5D20]            <6>  mov ax,[%4]
 19818 00001DA0 894606              <6>  mov [bp+6],ax
 19819 00001DA3 E8(BC08)            <6>  call proc_flcmp
 19820 00001DA6 89E0                <6>  mov ax,sp
 19821 00001DA8 89C5                <6>  mov bp,ax
 19822 00001DAA 8A4E08              <6>  mov byte %5,[bp+8]
 19823                              <6>  stkclose 0x09
 19824 00001DAD 83C409              <7>  add word sp, %1
 19825 00001DB0 80F900              <4>  cmp cl,0
 19826 00001DB3 7E02                <4>  jle %%valid
 19827 00001DB5 EB04                <4>  jmp %%invalid
 19828                              <4> 
 19829                              <4>  %%valid:
 19830 00001DB7 B100                <4>  mov byte %1, 0
 19831 00001DB9 EB02                <4>  jmp %%end
 19832                              <4>  %%invalid:
 19833 00001DBB B101                <4>  mov byte %1, 1
 19834                              <4>  %%end:
 19835 00001DBD 80F900              <3>  cmp cl,0
 19836 00001DC0 7544                <3>  jnz %%altered
 19837                              <3>  fladd __ball_angle, __ball_var_angle, __ball_angle
 19838                              <4>  fladd cs, %1, cs, %2, cs, %3
 19839                              <5>  fladdorsub %1, %2, %3, %4, %5, %6, 0
 19840                              <6>  stkopen 0x0E
 19841 00001DC2 83EC0E              <7>  sub word sp, %1
 19842 00001DC5 54                  <7>  push sp
 19843 00001DC6 5D                  <7>  pop bp
 19844 00001DC7 8CC8                <6>  mov ax,%1
 19845 00001DC9 8ED8                <6>  mov ds,ax
 19846 00001DCB A1[601A]            <6>  mov ax,[%2+2]
 19847 00001DCE 894600              <6>  mov [bp+0],ax
 19848 00001DD1 A1[5E1A]            <6>  mov ax,[%2]
 19849 00001DD4 894602              <6>  mov [bp+2],ax
 19850 00001DD7 8CC8                <6>  mov ax,%3
 19851 00001DD9 8ED8                <6>  mov ds,ax
 19852 00001DDB A1[641A]            <6>  mov ax,[%4+2]
 19853 00001DDE 894604              <6>  mov [bp+4],ax
 19854 00001DE1 A1[621A]            <6>  mov ax,[%4]
 19855 00001DE4 894606              <6>  mov [bp+6],ax
 19856 00001DE7 C7460C0000          <6>  mov word [bp+0x0C], %7
 19857 00001DEC E8(510C)            <6>  call proc_fladdorsub
 19858 00001DEF 89E0                <6>  mov ax,sp
 19859 00001DF1 89C5                <6>  mov bp,ax
 19860 00001DF3 8CC8                <6>  mov ax,%5
 19861 00001DF5 8ED8                <6>  mov ds,ax
 19862 00001DF7 8B4608              <6>  mov ax,[bp+8]
 19863 00001DFA A3[601A]            <6>  mov [%6+2],ax
 19864 00001DFD 8B460A              <6>  mov ax,[bp+0x0A]
 19865 00001E00 A3[5E1A]            <6>  mov [%6],ax
 19866                              <6>  stkclose 0x0E
 19867 00001E03 83C40E              <7>  add word sp, %1
 19868                              <3>  %%altered:
 19869                              <3> 
 19870                              <3>  ball_updateangle
 19871                              <4>  cos __ball_angle, __ball_xinc
 19872                              <5>  cos cs, %1, cs, %2
 19873                              <6>  sinorcos %1, %2, %3, %4, 0
 19874                              <7>  stkopen 0x09
 19875 00001E06 83EC09              <8>  sub word sp, %1
 19876 00001E09 54                  <8>  push sp
 19877 00001E0A 5D                  <8>  pop bp
 19878 00001E0B 8CC8                <7>  mov ax,%1
 19879 00001E0D 8ED8                <7>  mov ds,ax
 19880 00001E0F A1[601A]            <7>  mov ax,[%2+2]
 19881 00001E12 894600              <7>  mov [bp+0],ax
 19882 00001E15 A1[5E1A]            <7>  mov ax,[%2]
 19883 00001E18 894602              <7>  mov [bp+2],ax
 19884 00001E1B C6460800            <7>  mov byte [bp+8],%5
 19885 00001E1F E8(4E14)            <7>  call proc_sinorcos
 19886 00001E22 89E0                <7>  mov ax,sp
 19887 00001E24 89C5                <7>  mov bp,ax
 19888 00001E26 8CC8                <7>  mov ax,%3
 19889 00001E28 8ED8                <7>  mov ds,ax
 19890 00001E2A 8B4604              <7>  mov ax,[bp+4]
 19891 00001E2D A3[541A]            <7>  mov [%4+2],ax
 19892 00001E30 8B4606              <7>  mov ax,[bp+6]
 19893 00001E33 A3[521A]            <7>  mov [%4],ax
 19894                              <7>  stkclose 0x09
 19895 00001E36 83C409              <8>  add word sp, %1
 19896                              <4>  sin __ball_angle, __ball_yinc
 19897                              <5>  sin cs, %1, cs, %2
 19898                              <6>  sinorcos %1, %2, %3, %4, 1
 19899                              <7>  stkopen 0x09
 19900 00001E39 83EC09              <8>  sub word sp, %1
 19901 00001E3C 54                  <8>  push sp
 19902 00001E3D 5D                  <8>  pop bp
 19903 00001E3E 8CC8                <7>  mov ax,%1
 19904 00001E40 8ED8                <7>  mov ds,ax
 19905 00001E42 A1[601A]            <7>  mov ax,[%2+2]
 19906 00001E45 894600              <7>  mov [bp+0],ax
 19907 00001E48 A1[5E1A]            <7>  mov ax,[%2]
 19908 00001E4B 894602              <7>  mov [bp+2],ax
 19909 00001E4E C6460801            <7>  mov byte [bp+8],%5
 19910 00001E52 E8(4E14)            <7>  call proc_sinorcos
 19911 00001E55 89E0                <7>  mov ax,sp
 19912 00001E57 89C5                <7>  mov bp,ax
 19913 00001E59 8CC8                <7>  mov ax,%3
 19914 00001E5B 8ED8                <7>  mov ds,ax
 19915 00001E5D 8B4604              <7>  mov ax,[bp+4]
 19916 00001E60 A3[581A]            <7>  mov [%4+2],ax
 19917 00001E63 8B4606              <7>  mov ax,[bp+6]
 19918 00001E66 A3[561A]            <7>  mov [%4],ax
 19919                              <7>  stkclose 0x09
 19920 00001E69 83C409              <8>  add word sp, %1
 19921                              <4> 
 19922                              <4>  flmul __ball_xinc, __ball_rinc, __ball_xinc
 19923                              <5>  flmul cs, %1, cs, %2, cs, %3
 19924                              <6>  stkopen 0x0C
 19925 00001E6C 83EC0C              <7>  sub word sp, %1
 19926 00001E6F 54                  <7>  push sp
 19927 00001E70 5D                  <7>  pop bp
 19928 00001E71 8CC8                <6>  mov ax,%1
 19929 00001E73 8ED8                <6>  mov ds,ax
 19930 00001E75 A1[541A]            <6>  mov ax,[%2+2]
 19931 00001E78 894600              <6>  mov [bp+0],ax
 19932 00001E7B A1[521A]            <6>  mov ax,[%2]
 19933 00001E7E 894602              <6>  mov [bp+2],ax
 19934 00001E81 8CC8                <6>  mov ax,%3
 19935 00001E83 8ED8                <6>  mov ds,ax
 19936 00001E85 A1[5C1A]            <6>  mov ax,[%4+2]
 19937 00001E88 894604              <6>  mov [bp+4],ax
 19938 00001E8B A1[5A1A]            <6>  mov ax,[%4]
 19939 00001E8E 894606              <6>  mov [bp+6],ax
 19940 00001E91 E8(A50A)            <6>  call proc_flmul
 19941 00001E94 89E0                <6>  mov ax,sp
 19942 00001E96 89C5                <6>  mov bp,ax
 19943 00001E98 8CC8                <6>  mov ax,%5
 19944 00001E9A 8ED8                <6>  mov ds,ax
 19945 00001E9C 8B4608              <6>  mov ax,[bp+8]
 19946 00001E9F A3[541A]            <6>  mov [%6+2],ax
 19947 00001EA2 8B460A              <6>  mov ax,[bp+0x0A]
 19948 00001EA5 A3[521A]            <6>  mov [%6],ax
 19949                              <6>  stkclose 0x0C
 19950 00001EA8 83C40C              <7>  add word sp, %1
 19951                              <4>  flmul __ball_yinc, __ball_rinc, __ball_yinc
 19952                              <5>  flmul cs, %1, cs, %2, cs, %3
 19953                              <6>  stkopen 0x0C
 19954 00001EAB 83EC0C              <7>  sub word sp, %1
 19955 00001EAE 54                  <7>  push sp
 19956 00001EAF 5D                  <7>  pop bp
 19957 00001EB0 8CC8                <6>  mov ax,%1
 19958 00001EB2 8ED8                <6>  mov ds,ax
 19959 00001EB4 A1[581A]            <6>  mov ax,[%2+2]
 19960 00001EB7 894600              <6>  mov [bp+0],ax
 19961 00001EBA A1[561A]            <6>  mov ax,[%2]
 19962 00001EBD 894602              <6>  mov [bp+2],ax
 19963 00001EC0 8CC8                <6>  mov ax,%3
 19964 00001EC2 8ED8                <6>  mov ds,ax
 19965 00001EC4 A1[5C1A]            <6>  mov ax,[%4+2]
 19966 00001EC7 894604              <6>  mov [bp+4],ax
 19967 00001ECA A1[5A1A]            <6>  mov ax,[%4]
 19968 00001ECD 894606              <6>  mov [bp+6],ax
 19969 00001ED0 E8(A50A)            <6>  call proc_flmul
 19970 00001ED3 89E0                <6>  mov ax,sp
 19971 00001ED5 89C5                <6>  mov bp,ax
 19972 00001ED7 8CC8                <6>  mov ax,%5
 19973 00001ED9 8ED8                <6>  mov ds,ax
 19974 00001EDB 8B4608              <6>  mov ax,[bp+8]
 19975 00001EDE A3[581A]            <6>  mov [%6+2],ax
 19976 00001EE1 8B460A              <6>  mov ax,[bp+0x0A]
 19977 00001EE4 A3[561A]            <6>  mov [%6],ax
 19978                              <6>  stkclose 0x0C
 19979 00001EE7 83C40C              <7>  add word sp, %1
 19980 00001EEA E90101              <2>  jmp %%end
 19981                              <2>  %%center:
 19982                              <2>  ball_yinvdirection
 19983                              <3>  flinvsig __ball_angle
 19984                              <4>  flinvsig cs, %1
 19985                              <5>  stkopen 0x02
 19986 00001EED 83EC02              <6>  sub word sp, %1
 19987 00001EF0 54                  <6>  push sp
 19988 00001EF1 5D                  <6>  pop bp
 19989 00001EF2 8CC8                <5>  mov ax,%1
 19990 00001EF4 8ED8                <5>  mov ds,ax
 19991 00001EF6 A1[601A]            <5>  mov ax,[%2+2]
 19992 00001EF9 894600              <5>  mov word [bp+0], ax
 19993 00001EFC E8(B510)            <5>  call proc_flinvsig
 19994 00001EFF 54                  <5>  push sp
 19995 00001F00 5D                  <5>  pop bp
 19996 00001F01 8B4600              <5>  mov ax,[bp+0]
 19997 00001F04 A3[601A]            <5>  mov word [%2+2],ax
 19998                              <5>  stkclose 0x02
 19999 00001F07 83C402              <6>  add word sp, %1
 20000                              <3>  ball_updateangle
 20001                              <4>  cos __ball_angle, __ball_xinc
 20002                              <5>  cos cs, %1, cs, %2
 20003                              <6>  sinorcos %1, %2, %3, %4, 0
 20004                              <7>  stkopen 0x09
 20005 00001F0A 83EC09              <8>  sub word sp, %1
 20006 00001F0D 54                  <8>  push sp
 20007 00001F0E 5D                  <8>  pop bp
 20008 00001F0F 8CC8                <7>  mov ax,%1
 20009 00001F11 8ED8                <7>  mov ds,ax
 20010 00001F13 A1[601A]            <7>  mov ax,[%2+2]
 20011 00001F16 894600              <7>  mov [bp+0],ax
 20012 00001F19 A1[5E1A]            <7>  mov ax,[%2]
 20013 00001F1C 894602              <7>  mov [bp+2],ax
 20014 00001F1F C6460800            <7>  mov byte [bp+8],%5
 20015 00001F23 E8(4E14)            <7>  call proc_sinorcos
 20016 00001F26 89E0                <7>  mov ax,sp
 20017 00001F28 89C5                <7>  mov bp,ax
 20018 00001F2A 8CC8                <7>  mov ax,%3
 20019 00001F2C 8ED8                <7>  mov ds,ax
 20020 00001F2E 8B4604              <7>  mov ax,[bp+4]
 20021 00001F31 A3[541A]            <7>  mov [%4+2],ax
 20022 00001F34 8B4606              <7>  mov ax,[bp+6]
 20023 00001F37 A3[521A]            <7>  mov [%4],ax
 20024                              <7>  stkclose 0x09
 20025 00001F3A 83C409              <8>  add word sp, %1
 20026                              <4>  sin __ball_angle, __ball_yinc
 20027                              <5>  sin cs, %1, cs, %2
 20028                              <6>  sinorcos %1, %2, %3, %4, 1
 20029                              <7>  stkopen 0x09
 20030 00001F3D 83EC09              <8>  sub word sp, %1
 20031 00001F40 54                  <8>  push sp
 20032 00001F41 5D                  <8>  pop bp
 20033 00001F42 8CC8                <7>  mov ax,%1
 20034 00001F44 8ED8                <7>  mov ds,ax
 20035 00001F46 A1[601A]            <7>  mov ax,[%2+2]
 20036 00001F49 894600              <7>  mov [bp+0],ax
 20037 00001F4C A1[5E1A]            <7>  mov ax,[%2]
 20038 00001F4F 894602              <7>  mov [bp+2],ax
 20039 00001F52 C6460801            <7>  mov byte [bp+8],%5
 20040 00001F56 E8(4E14)            <7>  call proc_sinorcos
 20041 00001F59 89E0                <7>  mov ax,sp
 20042 00001F5B 89C5                <7>  mov bp,ax
 20043 00001F5D 8CC8                <7>  mov ax,%3
 20044 00001F5F 8ED8                <7>  mov ds,ax
 20045 00001F61 8B4604              <7>  mov ax,[bp+4]
 20046 00001F64 A3[581A]            <7>  mov [%4+2],ax
 20047 00001F67 8B4606              <7>  mov ax,[bp+6]
 20048 00001F6A A3[561A]            <7>  mov [%4],ax
 20049                              <7>  stkclose 0x09
 20050 00001F6D 83C409              <8>  add word sp, %1
 20051                              <4> 
 20052                              <4>  flmul __ball_xinc, __ball_rinc, __ball_xinc
 20053                              <5>  flmul cs, %1, cs, %2, cs, %3
 20054                              <6>  stkopen 0x0C
 20055 00001F70 83EC0C              <7>  sub word sp, %1
 20056 00001F73 54                  <7>  push sp
 20057 00001F74 5D                  <7>  pop bp
 20058 00001F75 8CC8                <6>  mov ax,%1
 20059 00001F77 8ED8                <6>  mov ds,ax
 20060 00001F79 A1[541A]            <6>  mov ax,[%2+2]
 20061 00001F7C 894600              <6>  mov [bp+0],ax
 20062 00001F7F A1[521A]            <6>  mov ax,[%2]
 20063 00001F82 894602              <6>  mov [bp+2],ax
 20064 00001F85 8CC8                <6>  mov ax,%3
 20065 00001F87 8ED8                <6>  mov ds,ax
 20066 00001F89 A1[5C1A]            <6>  mov ax,[%4+2]
 20067 00001F8C 894604              <6>  mov [bp+4],ax
 20068 00001F8F A1[5A1A]            <6>  mov ax,[%4]
 20069 00001F92 894606              <6>  mov [bp+6],ax
 20070 00001F95 E8(A50A)            <6>  call proc_flmul
 20071 00001F98 89E0                <6>  mov ax,sp
 20072 00001F9A 89C5                <6>  mov bp,ax
 20073 00001F9C 8CC8                <6>  mov ax,%5
 20074 00001F9E 8ED8                <6>  mov ds,ax
 20075 00001FA0 8B4608              <6>  mov ax,[bp+8]
 20076 00001FA3 A3[541A]            <6>  mov [%6+2],ax
 20077 00001FA6 8B460A              <6>  mov ax,[bp+0x0A]
 20078 00001FA9 A3[521A]            <6>  mov [%6],ax
 20079                              <6>  stkclose 0x0C
 20080 00001FAC 83C40C              <7>  add word sp, %1
 20081                              <4>  flmul __ball_yinc, __ball_rinc, __ball_yinc
 20082                              <5>  flmul cs, %1, cs, %2, cs, %3
 20083                              <6>  stkopen 0x0C
 20084 00001FAF 83EC0C              <7>  sub word sp, %1
 20085 00001FB2 54                  <7>  push sp
 20086 00001FB3 5D                  <7>  pop bp
 20087 00001FB4 8CC8                <6>  mov ax,%1
 20088 00001FB6 8ED8                <6>  mov ds,ax
 20089 00001FB8 A1[581A]            <6>  mov ax,[%2+2]
 20090 00001FBB 894600              <6>  mov [bp+0],ax
 20091 00001FBE A1[561A]            <6>  mov ax,[%2]
 20092 00001FC1 894602              <6>  mov [bp+2],ax
 20093 00001FC4 8CC8                <6>  mov ax,%3
 20094 00001FC6 8ED8                <6>  mov ds,ax
 20095 00001FC8 A1[5C1A]            <6>  mov ax,[%4+2]
 20096 00001FCB 894604              <6>  mov [bp+4],ax
 20097 00001FCE A1[5A1A]            <6>  mov ax,[%4]
 20098 00001FD1 894606              <6>  mov [bp+6],ax
 20099 00001FD4 E8(A50A)            <6>  call proc_flmul
 20100 00001FD7 89E0                <6>  mov ax,sp
 20101 00001FD9 89C5                <6>  mov bp,ax
 20102 00001FDB 8CC8                <6>  mov ax,%5
 20103 00001FDD 8ED8                <6>  mov ds,ax
 20104 00001FDF 8B4608              <6>  mov ax,[bp+8]
 20105 00001FE2 A3[581A]            <6>  mov [%6+2],ax
 20106 00001FE5 8B460A              <6>  mov ax,[bp+0x0A]
 20107 00001FE8 A3[561A]            <6>  mov [%6],ax
 20108                              <6>  stkclose 0x0C
 20109 00001FEB 83C40C              <7>  add word sp, %1
 20110                              <2>  %%end:
 20111                              <1> 
 20112                              <1>  ball_move
 20113                              <2> section .data
 20114 00002061 00000000            <2>  %%xb: dd 0
 20115 00002065 00000000            <2>  %%yb: dd 0
 20116 00002069 0000                <2>  %%x: dw 0
 20117 0000206B 0000                <2>  %%y: dw 0
 20118                              <2> section .text
 20119                              <2>  mov32 %%xb, __ball_x
 20120                              <3>  mov32 cs, %1, cs, %2
 20121 00001FEE 8CC8                <4>  mov ax,%3
 20122 00001FF0 8ED8                <4>  mov ds,ax
 20123 00001FF2 8B0E[481A]          <4>  mov cx,[%4+2]
 20124 00001FF6 8B16[461A]          <4>  mov dx,[%4]
 20125 00001FFA 8CC8                <4>  mov ax,%1
 20126 00001FFC 8ED8                <4>  mov ds,ax
 20127 00001FFE 890E[6320]          <4>  mov [%2+2],cx
 20128 00002002 8916[6120]          <4>  mov [%2],dx
 20129                              <2>  mov32 %%yb, __ball_y
 20130                              <3>  mov32 cs, %1, cs, %2
 20131 00002006 8CC8                <4>  mov ax,%3
 20132 00002008 8ED8                <4>  mov ds,ax
 20133 0000200A 8B0E[4C1A]          <4>  mov cx,[%4+2]
 20134 0000200E 8B16[4A1A]          <4>  mov dx,[%4]
 20135 00002012 8CC8                <4>  mov ax,%1
 20136 00002014 8ED8                <4>  mov ds,ax
 20137 00002016 890E[6720]          <4>  mov [%2+2],cx
 20138 0000201A 8916[6520]          <4>  mov [%2],dx
 20139                              <2> 
 20140                              <2>  fladd %%xb, __ball_xinc, %%xb
 20141                              <3>  fladd cs, %1, cs, %2, cs, %3
 20142                              <4>  fladdorsub %1, %2, %3, %4, %5, %6, 0
 20143                              <5>  stkopen 0x0E
 20144 0000201E 83EC0E              <6>  sub word sp, %1
 20145 00002021 54                  <6>  push sp
 20146 00002022 5D                  <6>  pop bp
 20147 00002023 8CC8                <5>  mov ax,%1
 20148 00002025 8ED8                <5>  mov ds,ax
 20149 00002027 A1[6320]            <5>  mov ax,[%2+2]
 20150 0000202A 894600              <5>  mov [bp+0],ax
 20151 0000202D A1[6120]            <5>  mov ax,[%2]
 20152 00002030 894602              <5>  mov [bp+2],ax
 20153 00002033 8CC8                <5>  mov ax,%3
 20154 00002035 8ED8                <5>  mov ds,ax
 20155 00002037 A1[541A]            <5>  mov ax,[%4+2]
 20156 0000203A 894604              <5>  mov [bp+4],ax
 20157 0000203D A1[521A]            <5>  mov ax,[%4]
 20158 00002040 894606              <5>  mov [bp+6],ax
 20159 00002043 C7460C0000          <5>  mov word [bp+0x0C], %7
 20160 00002048 E8(510C)            <5>  call proc_fladdorsub
 20161 0000204B 89E0                <5>  mov ax,sp
 20162 0000204D 89C5                <5>  mov bp,ax
 20163 0000204F 8CC8                <5>  mov ax,%5
 20164 00002051 8ED8                <5>  mov ds,ax
 20165 00002053 8B4608              <5>  mov ax,[bp+8]
 20166 00002056 A3[6320]            <5>  mov [%6+2],ax
 20167 00002059 8B460A              <5>  mov ax,[bp+0x0A]
 20168 0000205C A3[6120]            <5>  mov [%6],ax
 20169                              <5>  stkclose 0x0E
 20170 0000205F 83C40E              <6>  add word sp, %1
 20171                              <2>  fladd %%yb, __ball_yinc, %%yb
 20172                              <3>  fladd cs, %1, cs, %2, cs, %3
 20173                              <4>  fladdorsub %1, %2, %3, %4, %5, %6, 0
 20174                              <5>  stkopen 0x0E
 20175 00002062 83EC0E              <6>  sub word sp, %1
 20176 00002065 54                  <6>  push sp
 20177 00002066 5D                  <6>  pop bp
 20178 00002067 8CC8                <5>  mov ax,%1
 20179 00002069 8ED8                <5>  mov ds,ax
 20180 0000206B A1[6720]            <5>  mov ax,[%2+2]
 20181 0000206E 894600              <5>  mov [bp+0],ax
 20182 00002071 A1[6520]            <5>  mov ax,[%2]
 20183 00002074 894602              <5>  mov [bp+2],ax
 20184 00002077 8CC8                <5>  mov ax,%3
 20185 00002079 8ED8                <5>  mov ds,ax
 20186 0000207B A1[581A]            <5>  mov ax,[%4+2]
 20187 0000207E 894604              <5>  mov [bp+4],ax
 20188 00002081 A1[561A]            <5>  mov ax,[%4]
 20189 00002084 894606              <5>  mov [bp+6],ax
 20190 00002087 C7460C0000          <5>  mov word [bp+0x0C], %7
 20191 0000208C E8(510C)            <5>  call proc_fladdorsub
 20192 0000208F 89E0                <5>  mov ax,sp
 20193 00002091 89C5                <5>  mov bp,ax
 20194 00002093 8CC8                <5>  mov ax,%5
 20195 00002095 8ED8                <5>  mov ds,ax
 20196 00002097 8B4608              <5>  mov ax,[bp+8]
 20197 0000209A A3[6720]            <5>  mov [%6+2],ax
 20198 0000209D 8B460A              <5>  mov ax,[bp+0x0A]
 20199 000020A0 A3[6520]            <5>  mov [%6],ax
 20200                              <5>  stkclose 0x0E
 20201 000020A3 83C40E              <6>  add word sp, %1
 20202                              <2> 
 20203                              <2>  fltoint16 %%xb, %%x
 20204                              <3>  fltoint16 cs, %1, cs, %2
 20205                              <4>  stkopen 0x06
 20206 000020A6 83EC06              <5>  sub word sp, %1
 20207 000020A9 54                  <5>  push sp
 20208 000020AA 5D                  <5>  pop bp
 20209 000020AB 8CC8                <4>  mov ax,%1
 20210 000020AD 8ED8                <4>  mov ds,ax
 20211 000020AF A1[6320]            <4>  mov ax,[%2+2]
 20212 000020B2 894600              <4>  mov [bp+0],ax
 20213 000020B5 A1[6120]            <4>  mov ax,[%2]
 20214 000020B8 894602              <4>  mov [bp+2],ax
 20215 000020BB E8(C305)            <4>  call proc_fltoint16
 20216 000020BE 89E0                <4>  mov ax,sp
 20217 000020C0 89C5                <4>  mov bp,ax
 20218 000020C2 8CC8                <4>  mov ax,%3
 20219 000020C4 8ED8                <4>  mov ds,ax
 20220 000020C6 8B4604              <4>  mov ax,[bp+4]
 20221 000020C9 A3[6920]            <4>  mov [%4],ax
 20222                              <4>  stkclose 0x06
 20223 000020CC 83C406              <5>  add word sp, %1
 20224                              <2>  fltoint16 %%yb, %%y
 20225                              <3>  fltoint16 cs, %1, cs, %2
 20226                              <4>  stkopen 0x06
 20227 000020CF 83EC06              <5>  sub word sp, %1
 20228 000020D2 54                  <5>  push sp
 20229 000020D3 5D                  <5>  pop bp
 20230 000020D4 8CC8                <4>  mov ax,%1
 20231 000020D6 8ED8                <4>  mov ds,ax
 20232 000020D8 A1[6720]            <4>  mov ax,[%2+2]
 20233 000020DB 894600              <4>  mov [bp+0],ax
 20234 000020DE A1[6520]            <4>  mov ax,[%2]
 20235 000020E1 894602              <4>  mov [bp+2],ax
 20236 000020E4 E8(C305)            <4>  call proc_fltoint16
 20237 000020E7 89E0                <4>  mov ax,sp
 20238 000020E9 89C5                <4>  mov bp,ax
 20239 000020EB 8CC8                <4>  mov ax,%3
 20240 000020ED 8ED8                <4>  mov ds,ax
 20241 000020EF 8B4604              <4>  mov ax,[bp+4]
 20242 000020F2 A3[6B20]            <4>  mov [%4],ax
 20243                              <4>  stkclose 0x06
 20244 000020F5 83C406              <5>  add word sp, %1
 20245                              <2> 
 20246                              <2>  flcmp %%x, __tray_x1, cl
 20247                              <3>  flcmp cs, %1, cs, %2, %3
 20248                              <4>  stkopen 0x09
 20249 000020F8 83EC09              <5>  sub word sp, %1
 20250 000020FB 54                  <5>  push sp
 20251 000020FC 5D                  <5>  pop bp
 20252 000020FD 8CC8                <4>  mov ax,%1
 20253 000020FF 8ED8                <4>  mov ds,ax
 20254 00002101 A1[6B20]            <4>  mov ax,[%2+2]
 20255 00002104 894600              <4>  mov [bp+0],ax
 20256 00002107 A1[6920]            <4>  mov ax,[%2]
 20257 0000210A 894602              <4>  mov [bp+2],ax
 20258 0000210D 8CC8                <4>  mov ax,%3
 20259 0000210F 8ED8                <4>  mov ds,ax
 20260 00002111 A1[1A1A]            <4>  mov ax,[%4+2]
 20261 00002114 894604              <4>  mov [bp+4],ax
 20262 00002117 A1[181A]            <4>  mov ax,[%4]
 20263 0000211A 894606              <4>  mov [bp+6],ax
 20264 0000211D E8(BC08)            <4>  call proc_flcmp
 20265 00002120 89E0                <4>  mov ax,sp
 20266 00002122 89C5                <4>  mov bp,ax
 20267 00002124 8A4E08              <4>  mov byte %5,[bp+8]
 20268                              <4>  stkclose 0x09
 20269 00002127 83C409              <5>  add word sp, %1
 20270 0000212A 80F900              <2>  cmp cl,0
 20271 0000212D 0F8EB100            <2>  jle %%end
 20272                              <2> 
 20273                              <2>  flcmp %%x, __tray_x2, cl
 20274                              <3>  flcmp cs, %1, cs, %2, %3
 20275                              <4>  stkopen 0x09
 20276 00002131 83EC09              <5>  sub word sp, %1
 20277 00002134 54                  <5>  push sp
 20278 00002135 5D                  <5>  pop bp
 20279 00002136 8CC8                <4>  mov ax,%1
 20280 00002138 8ED8                <4>  mov ds,ax
 20281 0000213A A1[6B20]            <4>  mov ax,[%2+2]
 20282 0000213D 894600              <4>  mov [bp+0],ax
 20283 00002140 A1[6920]            <4>  mov ax,[%2]
 20284 00002143 894602              <4>  mov [bp+2],ax
 20285 00002146 8CC8                <4>  mov ax,%3
 20286 00002148 8ED8                <4>  mov ds,ax
 20287 0000214A A1[1E1A]            <4>  mov ax,[%4+2]
 20288 0000214D 894604              <4>  mov [bp+4],ax
 20289 00002150 A1[1C1A]            <4>  mov ax,[%4]
 20290 00002153 894606              <4>  mov [bp+6],ax
 20291 00002156 E8(BC08)            <4>  call proc_flcmp
 20292 00002159 89E0                <4>  mov ax,sp
 20293 0000215B 89C5                <4>  mov bp,ax
 20294 0000215D 8A4E08              <4>  mov byte %5,[bp+8]
 20295                              <4>  stkclose 0x09
 20296 00002160 83C409              <5>  add word sp, %1
 20297 00002163 80F900              <2>  cmp cl,0
 20298 00002166 7D7A                <2>  jge %%end
 20299                              <2> 
 20300                              <2>  cmp16 %%y, __tray_y1, cl
 20301                              <3>  cmp16 cs, %1, cs, %2, %3
 20302 00002168 8CC8                <4>  mov ax,%1
 20303 0000216A 8ED8                <4>  mov ds,ax
 20304 0000216C 8B1E[6B20]          <4>  mov bx,[%2]
 20305 00002170 8CC8                <4>  mov ax,%3
 20306 00002172 8ED8                <4>  mov ds,ax
 20307 00002174 8B0E[1A1A]          <4>  mov cx,[%4]
 20308                              <4> 
 20309 00002178 39CB                <4>  cmp bx,cx
 20310 0000217A 7F06                <4>  jg %%above
 20311 0000217C 7C08                <4>  jl %%below
 20312 0000217E B100                <4>  mov byte %5, 0
 20313 00002180 EB06                <4>  jmp %%endcmp
 20314                              <4>  %%above:
 20315 00002182 B101                <4>  mov byte %5, 1
 20316 00002184 EB02                <4>  jmp %%endcmp
 20317                              <4>  %%below:
 20318 00002186 B1FF                <4>  mov byte %5, -1
 20319                              <4>  %%endcmp:
 20320 00002188 80F900              <2>  cmp cl,0
 20321 0000218B 7E55                <2>  jle %%end
 20322                              <2> 
 20323                              <2>  cmp16 %%y, __tray_y2, cl
 20324                              <3>  cmp16 cs, %1, cs, %2, %3
 20325 0000218D 8CC8                <4>  mov ax,%1
 20326 0000218F 8ED8                <4>  mov ds,ax
 20327 00002191 8B1E[6B20]          <4>  mov bx,[%2]
 20328 00002195 8CC8                <4>  mov ax,%3
 20329 00002197 8ED8                <4>  mov ds,ax
 20330 00002199 8B0E[1E1A]          <4>  mov cx,[%4]
 20331                              <4> 
 20332 0000219D 39CB                <4>  cmp bx,cx
 20333 0000219F 7F06                <4>  jg %%above
 20334 000021A1 7C08                <4>  jl %%below
 20335 000021A3 B100                <4>  mov byte %5, 0
 20336 000021A5 EB06                <4>  jmp %%endcmp
 20337                              <4>  %%above:
 20338 000021A7 B101                <4>  mov byte %5, 1
 20339 000021A9 EB02                <4>  jmp %%endcmp
 20340                              <4>  %%below:
 20341 000021AB B1FF                <4>  mov byte %5, -1
 20342                              <4>  %%endcmp:
 20343 000021AD 80F900              <2>  cmp cl,0
 20344 000021B0 7D30                <2>  jge %%end
 20345                              <2> 
 20346                              <2>  mov32 __ball_x, %%xb
 20347                              <3>  mov32 cs, %1, cs, %2
 20348 000021B2 8CC8                <4>  mov ax,%3
 20349 000021B4 8ED8                <4>  mov ds,ax
 20350 000021B6 8B0E[6320]          <4>  mov cx,[%4+2]
 20351 000021BA 8B16[6120]          <4>  mov dx,[%4]
 20352 000021BE 8CC8                <4>  mov ax,%1
 20353 000021C0 8ED8                <4>  mov ds,ax
 20354 000021C2 890E[481A]          <4>  mov [%2+2],cx
 20355 000021C6 8916[461A]          <4>  mov [%2],dx
 20356                              <2>  mov32 __ball_y, %%yb
 20357                              <3>  mov32 cs, %1, cs, %2
 20358 000021CA 8CC8                <4>  mov ax,%3
 20359 000021CC 8ED8                <4>  mov ds,ax
 20360 000021CE 8B0E[6720]          <4>  mov cx,[%4+2]
 20361 000021D2 8B16[6520]          <4>  mov dx,[%4]
 20362 000021D6 8CC8                <4>  mov ax,%1
 20363 000021D8 8ED8                <4>  mov ds,ax
 20364 000021DA 890E[4C1A]          <4>  mov [%2+2],cx
 20365 000021DE 8916[4A1A]          <4>  mov [%2],dx
 20366                              <2> 
 20367                              <2>  %%end:
 20368                                  		
 20369                                  		mov16 aux, i
 20370                              <1>  mov16 cs, %1, cs, %2
 20371 000021E2 8CC8                <2>  mov ax,%3
 20372 000021E4 8ED8                <2>  mov ds,ax
 20373 000021E6 8B1E[9C1F]          <2>  mov bx,[%4]
 20374 000021EA 8CC8                <2>  mov ax,%1
 20375 000021EC 8ED8                <2>  mov ds,ax
 20376 000021EE 891E[A01F]          <2>  mov [%2],bx
 20377                                  		mod16 aux, n
 20378                              <1>  mod16 cs, %1, cs, %2
 20379 000021F2 8CC8                <2>  mov ax,%1
 20380 000021F4 8ED8                <2>  mov ds,ax
 20381 000021F6 8B1E[A01F]          <2>  mov bx,[%2]
 20382 000021FA 8CC8                <2>  mov ax,%3
 20383 000021FC 8ED8                <2>  mov ds,ax
 20384 000021FE 8B0E[9E1F]          <2>  mov cx,[%4]
 20385                              <2> 
 20386 00002202 31D2                <2>  xor dx,dx
 20387 00002204 89D8                <2>  mov ax,bx
 20388 00002206 F7F9                <2>  idiv cx
 20389                              <2> 
 20390 00002208 8CCB                <2>  mov bx,%1
 20391 0000220A 8EDB                <2>  mov ds,bx
 20392 0000220C 8916[A01F]          <2>  mov [%2],dx
 20393                                  				
 20394                                  		int16toreg aux, ax
 20395                              <1>  int16toreg cs, %1, %2
 20396 00002210 68[A01F]            <2>  push %2
 20397 00002213 0E                  <2>  push %1
 20398 00002214 1F                  <2>  pop ds
 20399 00002215 5E                  <2>  pop si
 20400 00002216 8B04                <2>  mov word %3,[si]
 20401 00002218 83F800                  		cmp ax,0
 20402 0000221B 0F85B605                		jnz painted
 20403                                  			gui_paint
 20404                              <1>  gui_paintbg
 20405 0000221F B80000              <2>  mov ax, 0
 20406 00002222 BB0000              <2>  mov bx, 0
 20407 00002225 B94001              <2>  mov cx, 320
 20408 00002228 BAC800              <2>  mov dx, 200
 20409                              <2>  __fillrect ax, bx, cx, dx, 0
 20410                              <3>  stkopen 0x09
 20411 0000222B 83EC09              <4>  sub word sp, %1
 20412 0000222E 54                  <4>  push sp
 20413 0000222F 5D                  <4>  pop bp
 20414 00002230 894600              <3>  mov word [bp+0],%1
 20415 00002233 895E02              <3>  mov word [bp+2],%2
 20416 00002236 894E04              <3>  mov word [bp+4],%3
 20417 00002239 895606              <3>  mov word [bp+6],%4
 20418 0000223C C6460800            <3>  mov byte [bp+8],%5
 20419 00002240 E8(961B)            <3>  call proc_fillrect
 20420                              <3>  stkclose 0x09
 20421 00002243 83C409              <4>  add word sp, %1
 20422                              <1>  gui_painttray
 20423                              <2> section .data
 20424 0000206D 0000                <2>  %%cindex: dw 0
 20425 0000206F 0000                <2>  %%def_cindex: dw 0
 20426                              <2> section .text
 20427                              <2>  mov16 %%cindex, %%def_cindex
 20428                              <3>  mov16 cs, %1, cs, %2
 20429 00002246 8CC8                <4>  mov ax,%3
 20430 00002248 8ED8                <4>  mov ds,ax
 20431 0000224A 8B1E[6F20]          <4>  mov bx,[%4]
 20432 0000224E 8CC8                <4>  mov ax,%1
 20433 00002250 8ED8                <4>  mov ds,ax
 20434 00002252 891E[6D20]          <4>  mov [%2],bx
 20435                              <2> 
 20436                              <2>  fillrect __tray_x1, __tray_y1, __tray_x2, __tray_y2, __tray_color
 20437                              <3>  fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 20438                              <4>  stkopen 0x09
 20439 00002256 83EC09              <5>  sub word sp, %1
 20440 00002259 54                  <5>  push sp
 20441 0000225A 5D                  <5>  pop bp
 20442 0000225B 8CC8                <4>  mov ax,%1
 20443 0000225D 8ED8                <4>  mov ds,ax
 20444 0000225F A1[181A]            <4>  mov ax,[%2]
 20445 00002262 894600              <4>  mov [bp+0],ax
 20446 00002265 8CC8                <4>  mov ax,%3
 20447 00002267 8ED8                <4>  mov ds,ax
 20448 00002269 A1[1A1A]            <4>  mov ax,[%4]
 20449 0000226C 894602              <4>  mov [bp+2],ax
 20450 0000226F 8CC8                <4>  mov ax,%5
 20451 00002271 8ED8                <4>  mov ds,ax
 20452 00002273 A1[1C1A]            <4>  mov ax,[%6]
 20453 00002276 894604              <4>  mov [bp+4],ax
 20454 00002279 8CC8                <4>  mov ax,%7
 20455 0000227B 8ED8                <4>  mov ds,ax
 20456 0000227D A1[1E1A]            <4>  mov ax,[%8]
 20457 00002280 894606              <4>  mov [bp+6],ax
 20458 00002283 8CC8                <4>  mov ax,%9
 20459 00002285 8ED8                <4>  mov ds,ax
 20460 00002287 A0[B419]            <4>  mov al,[%10]
 20461 0000228A 884608              <4>  mov [bp+8],al
 20462 0000228D E8(961B)            <4>  call proc_fillrect
 20463                              <4>  stkclose 0x09
 20464 00002290 83C409              <5>  add word sp, %1
 20465                              <2>  drawlineh __tray_x1, __tray_y1, __tray_x2, __tray_bordercolor
 20466                              <3>  drawlineh cs, %1, cs, %2, cs, %3, cs, %4
 20467                              <4>  stkopen 0x07
 20468 00002293 83EC07              <5>  sub word sp, %1
 20469 00002296 54                  <5>  push sp
 20470 00002297 5D                  <5>  pop bp
 20471 00002298 8CC8                <4>  mov ax,%1
 20472 0000229A 8ED8                <4>  mov ds,ax
 20473 0000229C A1[181A]            <4>  mov ax,[%2]
 20474 0000229F 894600              <4>  mov [bp+0],ax
 20475 000022A2 8CC8                <4>  mov ax,%3
 20476 000022A4 8ED8                <4>  mov ds,ax
 20477 000022A6 A1[1A1A]            <4>  mov ax,[%4]
 20478 000022A9 894602              <4>  mov [bp+2],ax
 20479 000022AC 8CC8                <4>  mov ax,%5
 20480 000022AE 8ED8                <4>  mov ds,ax
 20481 000022B0 A1[1C1A]            <4>  mov ax,[%6]
 20482 000022B3 894604              <4>  mov [bp+4],ax
 20483 000022B6 8CC8                <4>  mov ax,%7
 20484 000022B8 8ED8                <4>  mov ds,ax
 20485 000022BA A0[B519]            <4>  mov al,[%8]
 20486 000022BD 884606              <4>  mov [bp+6],al
 20487 000022C0 E8(911A)            <4>  call proc_drawlineh
 20488                              <4>  stkclose 0x07
 20489 000022C3 83C407              <5>  add word sp, %1
 20490                              <2>  drawlinev __tray_x1, __tray_y1, __tray_y2, __tray_bordercolor
 20491                              <3>  drawlinev cs, %1, cs, %2, cs, %3, cs, %4
 20492                              <4>  stkopen 0x07
 20493 000022C6 83EC07              <5>  sub word sp, %1
 20494 000022C9 54                  <5>  push sp
 20495 000022CA 5D                  <5>  pop bp
 20496 000022CB 8CC8                <4>  mov ax,%1
 20497 000022CD 8ED8                <4>  mov ds,ax
 20498 000022CF A1[181A]            <4>  mov ax,[%2]
 20499 000022D2 894600              <4>  mov [bp+0],ax
 20500 000022D5 8CC8                <4>  mov ax,%3
 20501 000022D7 8ED8                <4>  mov ds,ax
 20502 000022D9 A1[1A1A]            <4>  mov ax,[%4]
 20503 000022DC 894602              <4>  mov [bp+2],ax
 20504 000022DF 8CC8                <4>  mov ax,%5
 20505 000022E1 8ED8                <4>  mov ds,ax
 20506 000022E3 A1[1E1A]            <4>  mov ax,[%6]
 20507 000022E6 894604              <4>  mov [bp+4],ax
 20508 000022E9 8CC8                <4>  mov ax,%7
 20509 000022EB 8ED8                <4>  mov ds,ax
 20510 000022ED A0[B519]            <4>  mov al,[%8]
 20511 000022F0 884606              <4>  mov [bp+6],al
 20512 000022F3 E8(C51A)            <4>  call proc_drawlinev
 20513                              <4>  stkclose 0x07
 20514 000022F6 83C407              <5>  add word sp, %1
 20515                              <2>  drawlinev __tray_x2, __tray_y1, __tray_y2, __tray_bordercolor
 20516                              <3>  drawlinev cs, %1, cs, %2, cs, %3, cs, %4
 20517                              <4>  stkopen 0x07
 20518 000022F9 83EC07              <5>  sub word sp, %1
 20519 000022FC 54                  <5>  push sp
 20520 000022FD 5D                  <5>  pop bp
 20521 000022FE 8CC8                <4>  mov ax,%1
 20522 00002300 8ED8                <4>  mov ds,ax
 20523 00002302 A1[1C1A]            <4>  mov ax,[%2]
 20524 00002305 894600              <4>  mov [bp+0],ax
 20525 00002308 8CC8                <4>  mov ax,%3
 20526 0000230A 8ED8                <4>  mov ds,ax
 20527 0000230C A1[1A1A]            <4>  mov ax,[%4]
 20528 0000230F 894602              <4>  mov [bp+2],ax
 20529 00002312 8CC8                <4>  mov ax,%5
 20530 00002314 8ED8                <4>  mov ds,ax
 20531 00002316 A1[1E1A]            <4>  mov ax,[%6]
 20532 00002319 894604              <4>  mov [bp+4],ax
 20533 0000231C 8CC8                <4>  mov ax,%7
 20534 0000231E 8ED8                <4>  mov ds,ax
 20535 00002320 A0[B519]            <4>  mov al,[%8]
 20536 00002323 884606              <4>  mov [bp+6],al
 20537 00002326 E8(C51A)            <4>  call proc_drawlinev
 20538                              <4>  stkclose 0x07
 20539 00002329 83C407              <5>  add word sp, %1
 20540                              <2> 
 20541                              <2>  mov16 __square_y, __tray_y1
 20542                              <3>  mov16 cs, %1, cs, %2
 20543 0000232C 8CC8                <4>  mov ax,%3
 20544 0000232E 8ED8                <4>  mov ds,ax
 20545 00002330 8B1E[1A1A]          <4>  mov bx,[%4]
 20546 00002334 8CC8                <4>  mov ax,%1
 20547 00002336 8ED8                <4>  mov ds,ax
 20548 00002338 891E[221A]          <4>  mov [%2],bx
 20549                              <2>  mov16 __square_y2, __square_y
 20550                              <3>  mov16 cs, %1, cs, %2
 20551 0000233C 8CC8                <4>  mov ax,%3
 20552 0000233E 8ED8                <4>  mov ds,ax
 20553 00002340 8B1E[221A]          <4>  mov bx,[%4]
 20554 00002344 8CC8                <4>  mov ax,%1
 20555 00002346 8ED8                <4>  mov ds,ax
 20556 00002348 891E[261A]          <4>  mov [%2],bx
 20557                              <2>  add16 __square_y2, __square_h
 20558                              <3>  add16 cs, %1, cs, %2
 20559 0000234C 8CC8                <4>  mov ax,%3
 20560 0000234E 8ED8                <4>  mov ds,ax
 20561 00002350 8B1E[2A1A]          <4>  mov bx,[%4]
 20562 00002354 8CC8                <4>  mov ax,%1
 20563 00002356 8ED8                <4>  mov ds,ax
 20564 00002358 011E[261A]          <4>  add [%2],bx
 20565                              <2> 
 20566 0000235C B100                <2>  mov cl,0
 20567                              <2>  %%l1:
 20568 0000235E 51                  <2>  push cx
 20569                              <2>  int16toreg __square_ycount, dx
 20570                              <3>  int16toreg cs, %1, %2
 20571 0000235F 68[301A]            <4>  push %2
 20572 00002362 0E                  <4>  push %1
 20573 00002363 1F                  <4>  pop ds
 20574 00002364 5E                  <4>  pop si
 20575 00002365 8B14                <4>  mov word %3,[si]
 20576 00002367 59                  <2>  pop cx
 20577 00002368 38D1                <2>  cmp cl,dl
 20578 0000236A 0F833B01            <2>  jae %%l2
 20579 0000236E 51                  <2>  push cx
 20580                              <2> 
 20581                              <2>  mov16 __square_x, __tray_x1
 20582                              <3>  mov16 cs, %1, cs, %2
 20583 0000236F 8CC8                <4>  mov ax,%3
 20584 00002371 8ED8                <4>  mov ds,ax
 20585 00002373 8B1E[181A]          <4>  mov bx,[%4]
 20586 00002377 8CC8                <4>  mov ax,%1
 20587 00002379 8ED8                <4>  mov ds,ax
 20588 0000237B 891E[201A]          <4>  mov [%2],bx
 20589                              <2>  mov16 __square_x2, __square_x
 20590                              <3>  mov16 cs, %1, cs, %2
 20591 0000237F 8CC8                <4>  mov ax,%3
 20592 00002381 8ED8                <4>  mov ds,ax
 20593 00002383 8B1E[201A]          <4>  mov bx,[%4]
 20594 00002387 8CC8                <4>  mov ax,%1
 20595 00002389 8ED8                <4>  mov ds,ax
 20596 0000238B 891E[241A]          <4>  mov [%2],bx
 20597                              <2>  add16 __square_x2, __square_w
 20598                              <3>  add16 cs, %1, cs, %2
 20599 0000238F 8CC8                <4>  mov ax,%3
 20600 00002391 8ED8                <4>  mov ds,ax
 20601 00002393 8B1E[281A]          <4>  mov bx,[%4]
 20602 00002397 8CC8                <4>  mov ax,%1
 20603 00002399 8ED8                <4>  mov ds,ax
 20604 0000239B 011E[241A]          <4>  add [%2],bx
 20605                              <2> 
 20606 0000239F B100                <2>  mov cl,0
 20607                              <2>  %%l1.1:
 20608 000023A1 51                  <2>  push cx
 20609                              <2>  int16toreg __square_xcount, dx
 20610                              <3>  int16toreg cs, %1, %2
 20611 000023A2 68[2E1A]            <4>  push %2
 20612 000023A5 0E                  <4>  push %1
 20613 000023A6 1F                  <4>  pop ds
 20614 000023A7 5E                  <4>  pop si
 20615 000023A8 8B14                <4>  mov word %3,[si]
 20616 000023AA 59                  <2>  pop cx
 20617 000023AB 38D1                <2>  cmp cl,dl
 20618 000023AD 0F83CA00            <2>  jae %%l1.2
 20619 000023B1 51                  <2>  push cx
 20620                              <2> 
 20621                              <2>  int16toreg __square_xcount, ax
 20622                              <3>  int16toreg cs, %1, %2
 20623 000023B2 68[2E1A]            <4>  push %2
 20624 000023B5 0E                  <4>  push %1
 20625 000023B6 1F                  <4>  pop ds
 20626 000023B7 5E                  <4>  pop si
 20627 000023B8 8B04                <4>  mov word %3,[si]
 20628 000023BA 59                  <2>  pop cx
 20629 000023BB 5B                  <2>  pop bx
 20630 000023BC 53                  <2>  push bx
 20631 000023BD 51                  <2>  push cx
 20632                              <2> 
 20633 000023BE F7E3                <2>  mul bx
 20634 000023C0 01C8                <2>  add ax,cx
 20635                              <2> 
 20636                              <2>  vlodsb __squaremap, ax, cl
 20637                              <3>  vlodsb cs, %1, %2, %3
 20638 000023C2 0E                  <4>  push %1
 20639 000023C3 1F                  <4>  pop ds
 20640 000023C4 BE[F019]            <4>  mov si,%2
 20641 000023C7 01C6                <4>  add si,%3
 20642 000023C9 8A0C                <4>  mov byte %4,[si]
 20643 000023CB 80F900              <2>  cmp cl,0
 20644 000023CE 0F848300            <2>  jz %%painted
 20645                              <2>  int16toreg %%cindex, bx
 20646                              <3>  int16toreg cs, %1, %2
 20647 000023D2 68[6D20]            <4>  push %2
 20648 000023D5 0E                  <4>  push %1
 20649 000023D6 1F                  <4>  pop ds
 20650 000023D7 5E                  <4>  pop si
 20651 000023D8 8B1C                <4>  mov word %3,[si]
 20652                              <2>  fillrect __square_x, __square_y, __square_x2, __square_y2, __square_ycolor+bx
 20653                              <3>  fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 20654                              <4>  stkopen 0x09
 20655 000023DA 83EC09              <5>  sub word sp, %1
 20656 000023DD 54                  <5>  push sp
 20657 000023DE 5D                  <5>  pop bp
 20658 000023DF 8CC8                <4>  mov ax,%1
 20659 000023E1 8ED8                <4>  mov ds,ax
 20660 000023E3 A1[201A]            <4>  mov ax,[%2]
 20661 000023E6 894600              <4>  mov [bp+0],ax
 20662 000023E9 8CC8                <4>  mov ax,%3
 20663 000023EB 8ED8                <4>  mov ds,ax
 20664 000023ED A1[221A]            <4>  mov ax,[%4]
 20665 000023F0 894602              <4>  mov [bp+2],ax
 20666 000023F3 8CC8                <4>  mov ax,%5
 20667 000023F5 8ED8                <4>  mov ds,ax
 20668 000023F7 A1[241A]            <4>  mov ax,[%6]
 20669 000023FA 894604              <4>  mov [bp+4],ax
 20670 000023FD 8CC8                <4>  mov ax,%7
 20671 000023FF 8ED8                <4>  mov ds,ax
 20672 00002401 A1[261A]            <4>  mov ax,[%8]
 20673 00002404 894606              <4>  mov [bp+6],ax
 20674 00002407 8CC8                <4>  mov ax,%9
 20675 00002409 8ED8                <4>  mov ds,ax
 20676 0000240B 8A87[B719]          <4>  mov al,[%10]
 20677 0000240F 884608              <4>  mov [bp+8],al
 20678 00002412 E8(961B)            <4>  call proc_fillrect
 20679                              <4>  stkclose 0x09
 20680 00002415 83C409              <5>  add word sp, %1
 20681                              <2>  drawrect __square_x, __square_y, __square_x2, __square_y2, __square_bordercolor
 20682                              <3>  drawrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 20683                              <4>  stkopen 0x09
 20684 00002418 83EC09              <5>  sub word sp, %1
 20685 0000241B 54                  <5>  push sp
 20686 0000241C 5D                  <5>  pop bp
 20687 0000241D 8CC8                <4>  mov ax,%1
 20688 0000241F 8ED8                <4>  mov ds,ax
 20689 00002421 A1[201A]            <4>  mov ax,[%2]
 20690 00002424 894600              <4>  mov [bp+0],ax
 20691 00002427 8CC8                <4>  mov ax,%3
 20692 00002429 8ED8                <4>  mov ds,ax
 20693 0000242B A1[221A]            <4>  mov ax,[%4]
 20694 0000242E 894602              <4>  mov [bp+2],ax
 20695 00002431 8CC8                <4>  mov ax,%5
 20696 00002433 8ED8                <4>  mov ds,ax
 20697 00002435 A1[241A]            <4>  mov ax,[%6]
 20698 00002438 894604              <4>  mov [bp+4],ax
 20699 0000243B 8CC8                <4>  mov ax,%7
 20700 0000243D 8ED8                <4>  mov ds,ax
 20701 0000243F A1[261A]            <4>  mov ax,[%8]
 20702 00002442 894606              <4>  mov [bp+6],ax
 20703 00002445 8CC8                <4>  mov ax,%9
 20704 00002447 8ED8                <4>  mov ds,ax
 20705 00002449 A0[B619]            <4>  mov al,[%10]
 20706 0000244C 884608              <4>  mov [bp+8],al
 20707 0000244F E8(F91A)            <4>  call proc_drawrect
 20708                              <4>  stkclose 0x09
 20709 00002452 83C409              <5>  add word sp, %1
 20710                              <2>  %%painted:
 20711                              <2> 
 20712                              <2>  add16 __square_x, __square_w
 20713                              <3>  add16 cs, %1, cs, %2
 20714 00002455 8CC8                <4>  mov ax,%3
 20715 00002457 8ED8                <4>  mov ds,ax
 20716 00002459 8B1E[281A]          <4>  mov bx,[%4]
 20717 0000245D 8CC8                <4>  mov ax,%1
 20718 0000245F 8ED8                <4>  mov ds,ax
 20719 00002461 011E[201A]          <4>  add [%2],bx
 20720                              <2>  add16 __square_x2, __square_w
 20721                              <3>  add16 cs, %1, cs, %2
 20722 00002465 8CC8                <4>  mov ax,%3
 20723 00002467 8ED8                <4>  mov ds,ax
 20724 00002469 8B1E[281A]          <4>  mov bx,[%4]
 20725 0000246D 8CC8                <4>  mov ax,%1
 20726 0000246F 8ED8                <4>  mov ds,ax
 20727 00002471 011E[241A]          <4>  add [%2],bx
 20728                              <2> 
 20729 00002475 59                  <2>  pop cx
 20730 00002476 FEC1                <2>  inc cl
 20731 00002478 E926FF              <2>  jmp %%l1.1
 20732                              <2>  %%l1.2:
 20733                              <2> 
 20734                              <2>  add16 __square_y, __square_h
 20735                              <3>  add16 cs, %1, cs, %2
 20736 0000247B 8CC8                <4>  mov ax,%3
 20737 0000247D 8ED8                <4>  mov ds,ax
 20738 0000247F 8B1E[2A1A]          <4>  mov bx,[%4]
 20739 00002483 8CC8                <4>  mov ax,%1
 20740 00002485 8ED8                <4>  mov ds,ax
 20741 00002487 011E[221A]          <4>  add [%2],bx
 20742                              <2>  add16 __square_y2, __square_h
 20743                              <3>  add16 cs, %1, cs, %2
 20744 0000248B 8CC8                <4>  mov ax,%3
 20745 0000248D 8ED8                <4>  mov ds,ax
 20746 0000248F 8B1E[2A1A]          <4>  mov bx,[%4]
 20747 00002493 8CC8                <4>  mov ax,%1
 20748 00002495 8ED8                <4>  mov ds,ax
 20749 00002497 011E[261A]          <4>  add [%2],bx
 20750                              <2>  inc16 %%cindex
 20751                              <3>  inc16 cs, %1
 20752 0000249B 8CC8                <4>  mov ax,%1
 20753 0000249D 8ED8                <4>  mov ds,ax
 20754 0000249F FF06[6D20]          <4>  inc word [%2]
 20755                              <2> 
 20756 000024A3 59                  <2>  pop cx
 20757 000024A4 FEC1                <2>  inc cl
 20758 000024A6 E9B5FE              <2>  jmp %%l1
 20759                              <2>  %%l2:
 20760                              <1>  gui_paintball
 20761                              <2> section .data
 20762 00002071 0000                <2>  %%x: dw 0
 20763 00002073 0000                <2>  %%y: dw 0
 20764 00002075 0000                <2>  %%r: dw 0
 20765                              <2> section .text
 20766                              <2>  fltoint16 __ball_x, %%x
 20767                              <3>  fltoint16 cs, %1, cs, %2
 20768                              <4>  stkopen 0x06
 20769 000024A9 83EC06              <5>  sub word sp, %1
 20770 000024AC 54                  <5>  push sp
 20771 000024AD 5D                  <5>  pop bp
 20772 000024AE 8CC8                <4>  mov ax,%1
 20773 000024B0 8ED8                <4>  mov ds,ax
 20774 000024B2 A1[481A]            <4>  mov ax,[%2+2]
 20775 000024B5 894600              <4>  mov [bp+0],ax
 20776 000024B8 A1[461A]            <4>  mov ax,[%2]
 20777 000024BB 894602              <4>  mov [bp+2],ax
 20778 000024BE E8(C305)            <4>  call proc_fltoint16
 20779 000024C1 89E0                <4>  mov ax,sp
 20780 000024C3 89C5                <4>  mov bp,ax
 20781 000024C5 8CC8                <4>  mov ax,%3
 20782 000024C7 8ED8                <4>  mov ds,ax
 20783 000024C9 8B4604              <4>  mov ax,[bp+4]
 20784 000024CC A3[7120]            <4>  mov [%4],ax
 20785                              <4>  stkclose 0x06
 20786 000024CF 83C406              <5>  add word sp, %1
 20787                              <2>  fltoint16 __ball_y, %%y
 20788                              <3>  fltoint16 cs, %1, cs, %2
 20789                              <4>  stkopen 0x06
 20790 000024D2 83EC06              <5>  sub word sp, %1
 20791 000024D5 54                  <5>  push sp
 20792 000024D6 5D                  <5>  pop bp
 20793 000024D7 8CC8                <4>  mov ax,%1
 20794 000024D9 8ED8                <4>  mov ds,ax
 20795 000024DB A1[4C1A]            <4>  mov ax,[%2+2]
 20796 000024DE 894600              <4>  mov [bp+0],ax
 20797 000024E1 A1[4A1A]            <4>  mov ax,[%2]
 20798 000024E4 894602              <4>  mov [bp+2],ax
 20799 000024E7 E8(C305)            <4>  call proc_fltoint16
 20800 000024EA 89E0                <4>  mov ax,sp
 20801 000024EC 89C5                <4>  mov bp,ax
 20802 000024EE 8CC8                <4>  mov ax,%3
 20803 000024F0 8ED8                <4>  mov ds,ax
 20804 000024F2 8B4604              <4>  mov ax,[bp+4]
 20805 000024F5 A3[7320]            <4>  mov [%4],ax
 20806                              <4>  stkclose 0x06
 20807 000024F8 83C406              <5>  add word sp, %1
 20808                              <2>  fltoint16 __ball_radial, %%r
 20809                              <3>  fltoint16 cs, %1, cs, %2
 20810                              <4>  stkopen 0x06
 20811 000024FB 83EC06              <5>  sub word sp, %1
 20812 000024FE 54                  <5>  push sp
 20813 000024FF 5D                  <5>  pop bp
 20814 00002500 8CC8                <4>  mov ax,%1
 20815 00002502 8ED8                <4>  mov ds,ax
 20816 00002504 A1[501A]            <4>  mov ax,[%2+2]
 20817 00002507 894600              <4>  mov [bp+0],ax
 20818 0000250A A1[4E1A]            <4>  mov ax,[%2]
 20819 0000250D 894602              <4>  mov [bp+2],ax
 20820 00002510 E8(C305)            <4>  call proc_fltoint16
 20821 00002513 89E0                <4>  mov ax,sp
 20822 00002515 89C5                <4>  mov bp,ax
 20823 00002517 8CC8                <4>  mov ax,%3
 20824 00002519 8ED8                <4>  mov ds,ax
 20825 0000251B 8B4604              <4>  mov ax,[bp+4]
 20826 0000251E A3[7520]            <4>  mov [%4],ax
 20827                              <4>  stkclose 0x06
 20828 00002521 83C406              <5>  add word sp, %1
 20829                              <2>  fillarc %%x, %%y, %%r, %%r, __ball_color
 20830                              <3>  fillarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 20831                              <4>  drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 1
 20832                              <5>  stkopen 0x0A
 20833 00002524 83EC0A              <6>  sub word sp, %1
 20834 00002527 54                  <6>  push sp
 20835 00002528 5D                  <6>  pop bp
 20836 00002529 8CC8                <5>  mov ax,%1
 20837 0000252B 8ED8                <5>  mov ds,ax
 20838 0000252D A1[7120]            <5>  mov ax,[%2]
 20839 00002530 894600              <5>  mov [bp+0],ax
 20840 00002533 8CC8                <5>  mov ax,%3
 20841 00002535 8ED8                <5>  mov ds,ax
 20842 00002537 A1[7320]            <5>  mov ax,[%4]
 20843 0000253A 894602              <5>  mov [bp+2],ax
 20844 0000253D 8CC8                <5>  mov ax,%5
 20845 0000253F 8ED8                <5>  mov ds,ax
 20846 00002541 A1[7520]            <5>  mov ax,[%6]
 20847 00002544 894604              <5>  mov [bp+4],ax
 20848 00002547 8CC8                <5>  mov ax,%7
 20849 00002549 8ED8                <5>  mov ds,ax
 20850 0000254B A1[7520]            <5>  mov ax,[%8]
 20851 0000254E 894606              <5>  mov [bp+6],ax
 20852 00002551 8CC8                <5>  mov ax,%9
 20853 00002553 8ED8                <5>  mov ds,ax
 20854 00002555 A0[B219]            <5>  mov al,[%10]
 20855 00002558 884608              <5>  mov byte [bp+8],al
 20856 0000255B C6460901            <5>  mov byte [bp+9],%11
 20857 0000255F E8(D21B)            <5>  call proc_drawarc
 20858                              <5>  stkclose 0x0A
 20859 00002562 83C40A              <6>  add word sp, %1
 20860                              <2>  drawarc %%x, %%y, %%r, %%r, __ball_bordercolor
 20861                              <3>  drawarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 20862                              <4>  drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 0
 20863                              <5>  stkopen 0x0A
 20864 00002565 83EC0A              <6>  sub word sp, %1
 20865 00002568 54                  <6>  push sp
 20866 00002569 5D                  <6>  pop bp
 20867 0000256A 8CC8                <5>  mov ax,%1
 20868 0000256C 8ED8                <5>  mov ds,ax
 20869 0000256E A1[7120]            <5>  mov ax,[%2]
 20870 00002571 894600              <5>  mov [bp+0],ax
 20871 00002574 8CC8                <5>  mov ax,%3
 20872 00002576 8ED8                <5>  mov ds,ax
 20873 00002578 A1[7320]            <5>  mov ax,[%4]
 20874 0000257B 894602              <5>  mov [bp+2],ax
 20875 0000257E 8CC8                <5>  mov ax,%5
 20876 00002580 8ED8                <5>  mov ds,ax
 20877 00002582 A1[7520]            <5>  mov ax,[%6]
 20878 00002585 894604              <5>  mov [bp+4],ax
 20879 00002588 8CC8                <5>  mov ax,%7
 20880 0000258A 8ED8                <5>  mov ds,ax
 20881 0000258C A1[7520]            <5>  mov ax,[%8]
 20882 0000258F 894606              <5>  mov [bp+6],ax
 20883 00002592 8CC8                <5>  mov ax,%9
 20884 00002594 8ED8                <5>  mov ds,ax
 20885 00002596 A0[B319]            <5>  mov al,[%10]
 20886 00002599 884608              <5>  mov byte [bp+8],al
 20887 0000259C C6460900            <5>  mov byte [bp+9],%11
 20888 000025A0 E8(D21B)            <5>  call proc_drawarc
 20889                              <5>  stkclose 0x0A
 20890 000025A3 83C40A              <6>  add word sp, %1
 20891                              <1>  gui_paintracket
 20892                              <2> section .data
 20893 00002077 0000                <2>  %%x2: dw 0
 20894 00002079 0000                <2>  %%y2: dw 0
 20895                              <2> section .text
 20896                              <2>  mov16 %%x2, __racket_x
 20897                              <3>  mov16 cs, %1, cs, %2
 20898 000025A6 8CC8                <4>  mov ax,%3
 20899 000025A8 8ED8                <4>  mov ds,ax
 20900 000025AA 8B1E[841F]          <4>  mov bx,[%4]
 20901 000025AE 8CC8                <4>  mov ax,%1
 20902 000025B0 8ED8                <4>  mov ds,ax
 20903 000025B2 891E[7720]          <4>  mov [%2],bx
 20904                              <2>  mov16 %%y2, __racket_y
 20905                              <3>  mov16 cs, %1, cs, %2
 20906 000025B6 8CC8                <4>  mov ax,%3
 20907 000025B8 8ED8                <4>  mov ds,ax
 20908 000025BA 8B1E[861F]          <4>  mov bx,[%4]
 20909 000025BE 8CC8                <4>  mov ax,%1
 20910 000025C0 8ED8                <4>  mov ds,ax
 20911 000025C2 891E[7920]          <4>  mov [%2],bx
 20912                              <2>  add16 %%x2, __racket_w
 20913                              <3>  add16 cs, %1, cs, %2
 20914 000025C6 8CC8                <4>  mov ax,%3
 20915 000025C8 8ED8                <4>  mov ds,ax
 20916 000025CA 8B1E[881F]          <4>  mov bx,[%4]
 20917 000025CE 8CC8                <4>  mov ax,%1
 20918 000025D0 8ED8                <4>  mov ds,ax
 20919 000025D2 011E[7720]          <4>  add [%2],bx
 20920                              <2>  add16 %%y2, __racket_h
 20921                              <3>  add16 cs, %1, cs, %2
 20922 000025D6 8CC8                <4>  mov ax,%3
 20923 000025D8 8ED8                <4>  mov ds,ax
 20924 000025DA 8B1E[8A1F]          <4>  mov bx,[%4]
 20925 000025DE 8CC8                <4>  mov ax,%1
 20926 000025E0 8ED8                <4>  mov ds,ax
 20927 000025E2 011E[7920]          <4>  add [%2],bx
 20928                              <2>  fillrect __racket_x, __racket_y, %%x2, %%y2, __racket_color
 20929                              <3>  fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 20930                              <4>  stkopen 0x09
 20931 000025E6 83EC09              <5>  sub word sp, %1
 20932 000025E9 54                  <5>  push sp
 20933 000025EA 5D                  <5>  pop bp
 20934 000025EB 8CC8                <4>  mov ax,%1
 20935 000025ED 8ED8                <4>  mov ds,ax
 20936 000025EF A1[841F]            <4>  mov ax,[%2]
 20937 000025F2 894600              <4>  mov [bp+0],ax
 20938 000025F5 8CC8                <4>  mov ax,%3
 20939 000025F7 8ED8                <4>  mov ds,ax
 20940 000025F9 A1[861F]            <4>  mov ax,[%4]
 20941 000025FC 894602              <4>  mov [bp+2],ax
 20942 000025FF 8CC8                <4>  mov ax,%5
 20943 00002601 8ED8                <4>  mov ds,ax
 20944 00002603 A1[7720]            <4>  mov ax,[%6]
 20945 00002606 894604              <4>  mov [bp+4],ax
 20946 00002609 8CC8                <4>  mov ax,%7
 20947 0000260B 8ED8                <4>  mov ds,ax
 20948 0000260D A1[7920]            <4>  mov ax,[%8]
 20949 00002610 894606              <4>  mov [bp+6],ax
 20950 00002613 8CC8                <4>  mov ax,%9
 20951 00002615 8ED8                <4>  mov ds,ax
 20952 00002617 A0[BB19]            <4>  mov al,[%10]
 20953 0000261A 884608              <4>  mov [bp+8],al
 20954 0000261D E8(961B)            <4>  call proc_fillrect
 20955                              <4>  stkclose 0x09
 20956 00002620 83C409              <5>  add word sp, %1
 20957                              <2>  drawrect __racket_x, __racket_y, %%x2, %%y2, __racket_bordercolor
 20958                              <3>  drawrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 20959                              <4>  stkopen 0x09
 20960 00002623 83EC09              <5>  sub word sp, %1
 20961 00002626 54                  <5>  push sp
 20962 00002627 5D                  <5>  pop bp
 20963 00002628 8CC8                <4>  mov ax,%1
 20964 0000262A 8ED8                <4>  mov ds,ax
 20965 0000262C A1[841F]            <4>  mov ax,[%2]
 20966 0000262F 894600              <4>  mov [bp+0],ax
 20967 00002632 8CC8                <4>  mov ax,%3
 20968 00002634 8ED8                <4>  mov ds,ax
 20969 00002636 A1[861F]            <4>  mov ax,[%4]
 20970 00002639 894602              <4>  mov [bp+2],ax
 20971 0000263C 8CC8                <4>  mov ax,%5
 20972 0000263E 8ED8                <4>  mov ds,ax
 20973 00002640 A1[7720]            <4>  mov ax,[%6]
 20974 00002643 894604              <4>  mov [bp+4],ax
 20975 00002646 8CC8                <4>  mov ax,%7
 20976 00002648 8ED8                <4>  mov ds,ax
 20977 0000264A A1[7920]            <4>  mov ax,[%8]
 20978 0000264D 894606              <4>  mov [bp+6],ax
 20979 00002650 8CC8                <4>  mov ax,%9
 20980 00002652 8ED8                <4>  mov ds,ax
 20981 00002654 A0[BC19]            <4>  mov al,[%10]
 20982 00002657 884608              <4>  mov [bp+8],al
 20983 0000265A E8(F91A)            <4>  call proc_drawrect
 20984                              <4>  stkclose 0x09
 20985 0000265D 83C409              <5>  add word sp, %1
 20986                              <1>  repaint
 20987 00002660 E8(2600)            <2>  call proc_repaint
 20988                              <1> 
 20989                              <1>  cmp16 __show_init_message, __ZERO, cl
 20990                              <2>  cmp16 cs, %1, cs, %2, %3
 20991 00002663 8CC8                <3>  mov ax,%1
 20992 00002665 8ED8                <3>  mov ds,ax
 20993 00002667 8B1E[941F]          <3>  mov bx,[%2]
 20994 0000266B 8CC8                <3>  mov ax,%3
 20995 0000266D 8ED8                <3>  mov ds,ax
 20996 0000266F 8B0E[AE19]          <3>  mov cx,[%4]
 20997                              <3> 
 20998 00002673 39CB                <3>  cmp bx,cx
 20999 00002675 7F06                <3>  jg %%above
 21000 00002677 7C08                <3>  jl %%below
 21001 00002679 B100                <3>  mov byte %5, 0
 21002 0000267B EB06                <3>  jmp %%endcmp
 21003                              <3>  %%above:
 21004 0000267D B101                <3>  mov byte %5, 1
 21005 0000267F EB02                <3>  jmp %%endcmp
 21006                              <3>  %%below:
 21007 00002681 B1FF                <3>  mov byte %5, -1
 21008                              <3>  %%endcmp:
 21009 00002683 80F900              <1>  cmp cl,0
 21010 00002686 7425                <1>  je %%init_message_painted
 21011                              <1>  gui_show_message 'Pressione alguma tecla..', 8, 13, __message_default_color
 21012                              <2>  section .data
 21013 0000207B 5072657373696F6E65- <2>  %%str: db %1,0
 21014 00002084 20616C67756D612074- <2>
 21015 0000208D 65636C612E2E00      <2>
 21016                              <2> section .text
 21017 00002688 8CC8                <2>  mov ax,cs
 21018 0000268A 8ED8                <2>  mov ds,ax
 21019 0000268C A0[BD19]            <2>  mov al,[%4]
 21020                              <2>  __drawstring %%str, %2, %3, al
 21021                              <3>  __drawstring cs, %1, %2, %3, %4
 21022                              <4>  stkopen 0x07
 21023 0000268F 83EC07              <5>  sub word sp, %1
 21024 00002692 54                  <5>  push sp
 21025 00002693 5D                  <5>  pop bp
 21026 00002694 8C4E00              <4>  mov word [bp+0],%1
 21027 00002697 C74602[7B20]        <4>  mov word [bp+2],%2
 21028 0000269C C6460408            <4>  mov byte [bp+4],%3
 21029 000026A0 C646050D            <4>  mov byte [bp+5],%4
 21030 000026A4 884606              <4>  mov byte [bp+6],%5
 21031 000026A7 E8(681A)            <4>  call proc_drawstring
 21032                              <4>  stkclose 0x07
 21033 000026AA 83C407              <5>  add word sp, %1
 21034                              <1>  %%init_message_painted:
 21035                              <1> 
 21036                              <1>  cmp16 __show_pause_message, __ZERO, cl
 21037                              <2>  cmp16 cs, %1, cs, %2, %3
 21038 000026AD 8CC8                <3>  mov ax,%1
 21039 000026AF 8ED8                <3>  mov ds,ax
 21040 000026B1 8B1E[9A1F]          <3>  mov bx,[%2]
 21041 000026B5 8CC8                <3>  mov ax,%3
 21042 000026B7 8ED8                <3>  mov ds,ax
 21043 000026B9 8B0E[AE19]          <3>  mov cx,[%4]
 21044                              <3> 
 21045 000026BD 39CB                <3>  cmp bx,cx
 21046 000026BF 7F06                <3>  jg %%above
 21047 000026C1 7C08                <3>  jl %%below
 21048 000026C3 B100                <3>  mov byte %5, 0
 21049 000026C5 EB06                <3>  jmp %%endcmp
 21050                              <3>  %%above:
 21051 000026C7 B101                <3>  mov byte %5, 1
 21052 000026C9 EB02                <3>  jmp %%endcmp
 21053                              <3>  %%below:
 21054 000026CB B1FF                <3>  mov byte %5, -1
 21055                              <3>  %%endcmp:
 21056 000026CD 80F900              <1>  cmp cl,0
 21057 000026D0 7425                <1>  je %%pause_message_painted
 21058                              <1>  gui_show_message 'Pausa...', 16, 14, __message_default_color
 21059                              <2>  section .data
 21060 00002094 50617573612E2E2E00  <2>  %%str: db %1,0
 21061                              <2> section .text
 21062 000026D2 8CC8                <2>  mov ax,cs
 21063 000026D4 8ED8                <2>  mov ds,ax
 21064 000026D6 A0[BD19]            <2>  mov al,[%4]
 21065                              <2>  __drawstring %%str, %2, %3, al
 21066                              <3>  __drawstring cs, %1, %2, %3, %4
 21067                              <4>  stkopen 0x07
 21068 000026D9 83EC07              <5>  sub word sp, %1
 21069 000026DC 54                  <5>  push sp
 21070 000026DD 5D                  <5>  pop bp
 21071 000026DE 8C4E00              <4>  mov word [bp+0],%1
 21072 000026E1 C74602[9420]        <4>  mov word [bp+2],%2
 21073 000026E6 C6460410            <4>  mov byte [bp+4],%3
 21074 000026EA C646050E            <4>  mov byte [bp+5],%4
 21075 000026EE 884606              <4>  mov byte [bp+6],%5
 21076 000026F1 E8(681A)            <4>  call proc_drawstring
 21077                              <4>  stkclose 0x07
 21078 000026F4 83C407              <5>  add word sp, %1
 21079                              <1>  %%pause_message_painted:
 21080                              <1> 
 21081                              <1>  cmp16 __show_win_message, __ZERO, cl
 21082                              <2>  cmp16 cs, %1, cs, %2, %3
 21083 000026F7 8CC8                <3>  mov ax,%1
 21084 000026F9 8ED8                <3>  mov ds,ax
 21085 000026FB 8B1E[961F]          <3>  mov bx,[%2]
 21086 000026FF 8CC8                <3>  mov ax,%3
 21087 00002701 8ED8                <3>  mov ds,ax
 21088 00002703 8B0E[AE19]          <3>  mov cx,[%4]
 21089                              <3> 
 21090 00002707 39CB                <3>  cmp bx,cx
 21091 00002709 7F06                <3>  jg %%above
 21092 0000270B 7C08                <3>  jl %%below
 21093 0000270D B100                <3>  mov byte %5, 0
 21094 0000270F EB06                <3>  jmp %%endcmp
 21095                              <3>  %%above:
 21096 00002711 B101                <3>  mov byte %5, 1
 21097 00002713 EB02                <3>  jmp %%endcmp
 21098                              <3>  %%below:
 21099 00002715 B1FF                <3>  mov byte %5, -1
 21100                              <3>  %%endcmp:
 21101 00002717 80F900              <1>  cmp cl,0
 21102 0000271A 744A                <1>  je %%win_message_painted
 21103                              <1>  gui_show_message 'Ganhou...', 12, 13, __message_win_color
 21104                              <2>  section .data
 21105 0000209D 47616E686F752E2E2E- <2>  %%str: db %1,0
 21106 000020A6 00                  <2>
 21107                              <2> section .text
 21108 0000271C 8CC8                <2>  mov ax,cs
 21109 0000271E 8ED8                <2>  mov ds,ax
 21110 00002720 A0[BE19]            <2>  mov al,[%4]
 21111                              <2>  __drawstring %%str, %2, %3, al
 21112                              <3>  __drawstring cs, %1, %2, %3, %4
 21113                              <4>  stkopen 0x07
 21114 00002723 83EC07              <5>  sub word sp, %1
 21115 00002726 54                  <5>  push sp
 21116 00002727 5D                  <5>  pop bp
 21117 00002728 8C4E00              <4>  mov word [bp+0],%1
 21118 0000272B C74602[9D20]        <4>  mov word [bp+2],%2
 21119 00002730 C646040C            <4>  mov byte [bp+4],%3
 21120 00002734 C646050D            <4>  mov byte [bp+5],%4
 21121 00002738 884606              <4>  mov byte [bp+6],%5
 21122 0000273B E8(681A)            <4>  call proc_drawstring
 21123                              <4>  stkclose 0x07
 21124 0000273E 83C407              <5>  add word sp, %1
 21125                              <1>  gui_show_message 'Parabens !!!', 12, 14, __message_default_color
 21126                              <2>  section .data
 21127 000020A7 5061726162656E7320- <2>  %%str: db %1,0
 21128 000020B0 21212100            <2>
 21129                              <2> section .text
 21130 00002741 8CC8                <2>  mov ax,cs
 21131 00002743 8ED8                <2>  mov ds,ax
 21132 00002745 A0[BD19]            <2>  mov al,[%4]
 21133                              <2>  __drawstring %%str, %2, %3, al
 21134                              <3>  __drawstring cs, %1, %2, %3, %4
 21135                              <4>  stkopen 0x07
 21136 00002748 83EC07              <5>  sub word sp, %1
 21137 0000274B 54                  <5>  push sp
 21138 0000274C 5D                  <5>  pop bp
 21139 0000274D 8C4E00              <4>  mov word [bp+0],%1
 21140 00002750 C74602[A720]        <4>  mov word [bp+2],%2
 21141 00002755 C646040C            <4>  mov byte [bp+4],%3
 21142 00002759 C646050E            <4>  mov byte [bp+5],%4
 21143 0000275D 884606              <4>  mov byte [bp+6],%5
 21144 00002760 E8(681A)            <4>  call proc_drawstring
 21145                              <4>  stkclose 0x07
 21146 00002763 83C407              <5>  add word sp, %1
 21147                              <1>  %%win_message_painted:
 21148                              <1> 
 21149                              <1>  cmp16 __show_lose_message, __ZERO, cl
 21150                              <2>  cmp16 cs, %1, cs, %2, %3
 21151 00002766 8CC8                <3>  mov ax,%1
 21152 00002768 8ED8                <3>  mov ds,ax
 21153 0000276A 8B1E[981F]          <3>  mov bx,[%2]
 21154 0000276E 8CC8                <3>  mov ax,%3
 21155 00002770 8ED8                <3>  mov ds,ax
 21156 00002772 8B0E[AE19]          <3>  mov cx,[%4]
 21157                              <3> 
 21158 00002776 39CB                <3>  cmp bx,cx
 21159 00002778 7F06                <3>  jg %%above
 21160 0000277A 7C08                <3>  jl %%below
 21161 0000277C B100                <3>  mov byte %5, 0
 21162 0000277E EB06                <3>  jmp %%endcmp
 21163                              <3>  %%above:
 21164 00002780 B101                <3>  mov byte %5, 1
 21165 00002782 EB02                <3>  jmp %%endcmp
 21166                              <3>  %%below:
 21167 00002784 B1FF                <3>  mov byte %5, -1
 21168                              <3>  %%endcmp:
 21169 00002786 80F900              <1>  cmp cl,0
 21170 00002789 744A                <1>  je %%lose_message_painted
 21171                              <1>  gui_show_message 'Perdeu...', 11, 13, __message_lose_color
 21172                              <2>  section .data
 21173 000020B4 5065726465752E2E2E- <2>  %%str: db %1,0
 21174 000020BD 00                  <2>
 21175                              <2> section .text
 21176 0000278B 8CC8                <2>  mov ax,cs
 21177 0000278D 8ED8                <2>  mov ds,ax
 21178 0000278F A0[BF19]            <2>  mov al,[%4]
 21179                              <2>  __drawstring %%str, %2, %3, al
 21180                              <3>  __drawstring cs, %1, %2, %3, %4
 21181                              <4>  stkopen 0x07
 21182 00002792 83EC07              <5>  sub word sp, %1
 21183 00002795 54                  <5>  push sp
 21184 00002796 5D                  <5>  pop bp
 21185 00002797 8C4E00              <4>  mov word [bp+0],%1
 21186 0000279A C74602[B420]        <4>  mov word [bp+2],%2
 21187 0000279F C646040B            <4>  mov byte [bp+4],%3
 21188 000027A3 C646050D            <4>  mov byte [bp+5],%4
 21189 000027A7 884606              <4>  mov byte [bp+6],%5
 21190 000027AA E8(681A)            <4>  call proc_drawstring
 21191                              <4>  stkclose 0x07
 21192 000027AD 83C407              <5>  add word sp, %1
 21193                              <1>  gui_show_message 'Tente novamente !', 11, 14, __message_default_color
 21194                              <2>  section .data
 21195 000020BE 54656E7465206E6F76- <2>  %%str: db %1,0
 21196 000020C7 616D656E7465202100  <2>
 21197                              <2> section .text
 21198 000027B0 8CC8                <2>  mov ax,cs
 21199 000027B2 8ED8                <2>  mov ds,ax
 21200 000027B4 A0[BD19]            <2>  mov al,[%4]
 21201                              <2>  __drawstring %%str, %2, %3, al
 21202                              <3>  __drawstring cs, %1, %2, %3, %4
 21203                              <4>  stkopen 0x07
 21204 000027B7 83EC07              <5>  sub word sp, %1
 21205 000027BA 54                  <5>  push sp
 21206 000027BB 5D                  <5>  pop bp
 21207 000027BC 8C4E00              <4>  mov word [bp+0],%1
 21208 000027BF C74602[BE20]        <4>  mov word [bp+2],%2
 21209 000027C4 C646040B            <4>  mov byte [bp+4],%3
 21210 000027C8 C646050E            <4>  mov byte [bp+5],%4
 21211 000027CC 884606              <4>  mov byte [bp+6],%5
 21212 000027CF E8(681A)            <4>  call proc_drawstring
 21213                              <4>  stkclose 0x07
 21214 000027D2 83C407              <5>  add word sp, %1
 21215                              <1>  %%lose_message_painted:
 21216                                  		painted:
 21217                                  		
 21218 000027D5 B411                    		mov ah,11h		
 21219 000027D7 CD16                    		int 16h
 21220 000027D9 0F848607                		jz continue					
 21221 000027DD B400                    			mov ah,00h
 21222 000027DF CD16                    			int 16h
 21223 000027E1 3C1B                    			cmp al,27
 21224 000027E3 0F841CD8                			je init
 21225 000027E7 3C0D                    			cmp al,13
 21226 000027E9 7409                    			je enter
 21227 000027EB 3C00                    			cmp al,0
 21228 000027ED 0F84E405                			je specialch
 21229 000027F1 E96F07                  			jmp continue					
 21230                                  			
 21231                                  			enter:
 21232                                  				game_show_pause_message
 21233                              <1>  mov16 __show_pause_message, __ONE
 21234                              <2>  mov16 cs, %1, cs, %2
 21235 000027F4 8CC8                <3>  mov ax,%3
 21236 000027F6 8ED8                <3>  mov ds,ax
 21237 000027F8 8B1E[B019]          <3>  mov bx,[%4]
 21238 000027FC 8CC8                <3>  mov ax,%1
 21239 000027FE 8ED8                <3>  mov ds,ax
 21240 00002800 891E[9A1F]          <3>  mov [%2],bx
 21241                                  				gui_paint
 21242                              <1>  gui_paintbg
 21243 00002804 B80000              <2>  mov ax, 0
 21244 00002807 BB0000              <2>  mov bx, 0
 21245 0000280A B94001              <2>  mov cx, 320
 21246 0000280D BAC800              <2>  mov dx, 200
 21247                              <2>  __fillrect ax, bx, cx, dx, 0
 21248                              <3>  stkopen 0x09
 21249 00002810 83EC09              <4>  sub word sp, %1
 21250 00002813 54                  <4>  push sp
 21251 00002814 5D                  <4>  pop bp
 21252 00002815 894600              <3>  mov word [bp+0],%1
 21253 00002818 895E02              <3>  mov word [bp+2],%2
 21254 0000281B 894E04              <3>  mov word [bp+4],%3
 21255 0000281E 895606              <3>  mov word [bp+6],%4
 21256 00002821 C6460800            <3>  mov byte [bp+8],%5
 21257 00002825 E8(961B)            <3>  call proc_fillrect
 21258                              <3>  stkclose 0x09
 21259 00002828 83C409              <4>  add word sp, %1
 21260                              <1>  gui_painttray
 21261                              <2> section .data
 21262 000020D0 0000                <2>  %%cindex: dw 0
 21263 000020D2 0000                <2>  %%def_cindex: dw 0
 21264                              <2> section .text
 21265                              <2>  mov16 %%cindex, %%def_cindex
 21266                              <3>  mov16 cs, %1, cs, %2
 21267 0000282B 8CC8                <4>  mov ax,%3
 21268 0000282D 8ED8                <4>  mov ds,ax
 21269 0000282F 8B1E[D220]          <4>  mov bx,[%4]
 21270 00002833 8CC8                <4>  mov ax,%1
 21271 00002835 8ED8                <4>  mov ds,ax
 21272 00002837 891E[D020]          <4>  mov [%2],bx
 21273                              <2> 
 21274                              <2>  fillrect __tray_x1, __tray_y1, __tray_x2, __tray_y2, __tray_color
 21275                              <3>  fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 21276                              <4>  stkopen 0x09
 21277 0000283B 83EC09              <5>  sub word sp, %1
 21278 0000283E 54                  <5>  push sp
 21279 0000283F 5D                  <5>  pop bp
 21280 00002840 8CC8                <4>  mov ax,%1
 21281 00002842 8ED8                <4>  mov ds,ax
 21282 00002844 A1[181A]            <4>  mov ax,[%2]
 21283 00002847 894600              <4>  mov [bp+0],ax
 21284 0000284A 8CC8                <4>  mov ax,%3
 21285 0000284C 8ED8                <4>  mov ds,ax
 21286 0000284E A1[1A1A]            <4>  mov ax,[%4]
 21287 00002851 894602              <4>  mov [bp+2],ax
 21288 00002854 8CC8                <4>  mov ax,%5
 21289 00002856 8ED8                <4>  mov ds,ax
 21290 00002858 A1[1C1A]            <4>  mov ax,[%6]
 21291 0000285B 894604              <4>  mov [bp+4],ax
 21292 0000285E 8CC8                <4>  mov ax,%7
 21293 00002860 8ED8                <4>  mov ds,ax
 21294 00002862 A1[1E1A]            <4>  mov ax,[%8]
 21295 00002865 894606              <4>  mov [bp+6],ax
 21296 00002868 8CC8                <4>  mov ax,%9
 21297 0000286A 8ED8                <4>  mov ds,ax
 21298 0000286C A0[B419]            <4>  mov al,[%10]
 21299 0000286F 884608              <4>  mov [bp+8],al
 21300 00002872 E8(961B)            <4>  call proc_fillrect
 21301                              <4>  stkclose 0x09
 21302 00002875 83C409              <5>  add word sp, %1
 21303                              <2>  drawlineh __tray_x1, __tray_y1, __tray_x2, __tray_bordercolor
 21304                              <3>  drawlineh cs, %1, cs, %2, cs, %3, cs, %4
 21305                              <4>  stkopen 0x07
 21306 00002878 83EC07              <5>  sub word sp, %1
 21307 0000287B 54                  <5>  push sp
 21308 0000287C 5D                  <5>  pop bp
 21309 0000287D 8CC8                <4>  mov ax,%1
 21310 0000287F 8ED8                <4>  mov ds,ax
 21311 00002881 A1[181A]            <4>  mov ax,[%2]
 21312 00002884 894600              <4>  mov [bp+0],ax
 21313 00002887 8CC8                <4>  mov ax,%3
 21314 00002889 8ED8                <4>  mov ds,ax
 21315 0000288B A1[1A1A]            <4>  mov ax,[%4]
 21316 0000288E 894602              <4>  mov [bp+2],ax
 21317 00002891 8CC8                <4>  mov ax,%5
 21318 00002893 8ED8                <4>  mov ds,ax
 21319 00002895 A1[1C1A]            <4>  mov ax,[%6]
 21320 00002898 894604              <4>  mov [bp+4],ax
 21321 0000289B 8CC8                <4>  mov ax,%7
 21322 0000289D 8ED8                <4>  mov ds,ax
 21323 0000289F A0[B519]            <4>  mov al,[%8]
 21324 000028A2 884606              <4>  mov [bp+6],al
 21325 000028A5 E8(911A)            <4>  call proc_drawlineh
 21326                              <4>  stkclose 0x07
 21327 000028A8 83C407              <5>  add word sp, %1
 21328                              <2>  drawlinev __tray_x1, __tray_y1, __tray_y2, __tray_bordercolor
 21329                              <3>  drawlinev cs, %1, cs, %2, cs, %3, cs, %4
 21330                              <4>  stkopen 0x07
 21331 000028AB 83EC07              <5>  sub word sp, %1
 21332 000028AE 54                  <5>  push sp
 21333 000028AF 5D                  <5>  pop bp
 21334 000028B0 8CC8                <4>  mov ax,%1
 21335 000028B2 8ED8                <4>  mov ds,ax
 21336 000028B4 A1[181A]            <4>  mov ax,[%2]
 21337 000028B7 894600              <4>  mov [bp+0],ax
 21338 000028BA 8CC8                <4>  mov ax,%3
 21339 000028BC 8ED8                <4>  mov ds,ax
 21340 000028BE A1[1A1A]            <4>  mov ax,[%4]
 21341 000028C1 894602              <4>  mov [bp+2],ax
 21342 000028C4 8CC8                <4>  mov ax,%5
 21343 000028C6 8ED8                <4>  mov ds,ax
 21344 000028C8 A1[1E1A]            <4>  mov ax,[%6]
 21345 000028CB 894604              <4>  mov [bp+4],ax
 21346 000028CE 8CC8                <4>  mov ax,%7
 21347 000028D0 8ED8                <4>  mov ds,ax
 21348 000028D2 A0[B519]            <4>  mov al,[%8]
 21349 000028D5 884606              <4>  mov [bp+6],al
 21350 000028D8 E8(C51A)            <4>  call proc_drawlinev
 21351                              <4>  stkclose 0x07
 21352 000028DB 83C407              <5>  add word sp, %1
 21353                              <2>  drawlinev __tray_x2, __tray_y1, __tray_y2, __tray_bordercolor
 21354                              <3>  drawlinev cs, %1, cs, %2, cs, %3, cs, %4
 21355                              <4>  stkopen 0x07
 21356 000028DE 83EC07              <5>  sub word sp, %1
 21357 000028E1 54                  <5>  push sp
 21358 000028E2 5D                  <5>  pop bp
 21359 000028E3 8CC8                <4>  mov ax,%1
 21360 000028E5 8ED8                <4>  mov ds,ax
 21361 000028E7 A1[1C1A]            <4>  mov ax,[%2]
 21362 000028EA 894600              <4>  mov [bp+0],ax
 21363 000028ED 8CC8                <4>  mov ax,%3
 21364 000028EF 8ED8                <4>  mov ds,ax
 21365 000028F1 A1[1A1A]            <4>  mov ax,[%4]
 21366 000028F4 894602              <4>  mov [bp+2],ax
 21367 000028F7 8CC8                <4>  mov ax,%5
 21368 000028F9 8ED8                <4>  mov ds,ax
 21369 000028FB A1[1E1A]            <4>  mov ax,[%6]
 21370 000028FE 894604              <4>  mov [bp+4],ax
 21371 00002901 8CC8                <4>  mov ax,%7
 21372 00002903 8ED8                <4>  mov ds,ax
 21373 00002905 A0[B519]            <4>  mov al,[%8]
 21374 00002908 884606              <4>  mov [bp+6],al
 21375 0000290B E8(C51A)            <4>  call proc_drawlinev
 21376                              <4>  stkclose 0x07
 21377 0000290E 83C407              <5>  add word sp, %1
 21378                              <2> 
 21379                              <2>  mov16 __square_y, __tray_y1
 21380                              <3>  mov16 cs, %1, cs, %2
 21381 00002911 8CC8                <4>  mov ax,%3
 21382 00002913 8ED8                <4>  mov ds,ax
 21383 00002915 8B1E[1A1A]          <4>  mov bx,[%4]
 21384 00002919 8CC8                <4>  mov ax,%1
 21385 0000291B 8ED8                <4>  mov ds,ax
 21386 0000291D 891E[221A]          <4>  mov [%2],bx
 21387                              <2>  mov16 __square_y2, __square_y
 21388                              <3>  mov16 cs, %1, cs, %2
 21389 00002921 8CC8                <4>  mov ax,%3
 21390 00002923 8ED8                <4>  mov ds,ax
 21391 00002925 8B1E[221A]          <4>  mov bx,[%4]
 21392 00002929 8CC8                <4>  mov ax,%1
 21393 0000292B 8ED8                <4>  mov ds,ax
 21394 0000292D 891E[261A]          <4>  mov [%2],bx
 21395                              <2>  add16 __square_y2, __square_h
 21396                              <3>  add16 cs, %1, cs, %2
 21397 00002931 8CC8                <4>  mov ax,%3
 21398 00002933 8ED8                <4>  mov ds,ax
 21399 00002935 8B1E[2A1A]          <4>  mov bx,[%4]
 21400 00002939 8CC8                <4>  mov ax,%1
 21401 0000293B 8ED8                <4>  mov ds,ax
 21402 0000293D 011E[261A]          <4>  add [%2],bx
 21403                              <2> 
 21404 00002941 B100                <2>  mov cl,0
 21405                              <2>  %%l1:
 21406 00002943 51                  <2>  push cx
 21407                              <2>  int16toreg __square_ycount, dx
 21408                              <3>  int16toreg cs, %1, %2
 21409 00002944 68[301A]            <4>  push %2
 21410 00002947 0E                  <4>  push %1
 21411 00002948 1F                  <4>  pop ds
 21412 00002949 5E                  <4>  pop si
 21413 0000294A 8B14                <4>  mov word %3,[si]
 21414 0000294C 59                  <2>  pop cx
 21415 0000294D 38D1                <2>  cmp cl,dl
 21416 0000294F 0F833B01            <2>  jae %%l2
 21417 00002953 51                  <2>  push cx
 21418                              <2> 
 21419                              <2>  mov16 __square_x, __tray_x1
 21420                              <3>  mov16 cs, %1, cs, %2
 21421 00002954 8CC8                <4>  mov ax,%3
 21422 00002956 8ED8                <4>  mov ds,ax
 21423 00002958 8B1E[181A]          <4>  mov bx,[%4]
 21424 0000295C 8CC8                <4>  mov ax,%1
 21425 0000295E 8ED8                <4>  mov ds,ax
 21426 00002960 891E[201A]          <4>  mov [%2],bx
 21427                              <2>  mov16 __square_x2, __square_x
 21428                              <3>  mov16 cs, %1, cs, %2
 21429 00002964 8CC8                <4>  mov ax,%3
 21430 00002966 8ED8                <4>  mov ds,ax
 21431 00002968 8B1E[201A]          <4>  mov bx,[%4]
 21432 0000296C 8CC8                <4>  mov ax,%1
 21433 0000296E 8ED8                <4>  mov ds,ax
 21434 00002970 891E[241A]          <4>  mov [%2],bx
 21435                              <2>  add16 __square_x2, __square_w
 21436                              <3>  add16 cs, %1, cs, %2
 21437 00002974 8CC8                <4>  mov ax,%3
 21438 00002976 8ED8                <4>  mov ds,ax
 21439 00002978 8B1E[281A]          <4>  mov bx,[%4]
 21440 0000297C 8CC8                <4>  mov ax,%1
 21441 0000297E 8ED8                <4>  mov ds,ax
 21442 00002980 011E[241A]          <4>  add [%2],bx
 21443                              <2> 
 21444 00002984 B100                <2>  mov cl,0
 21445                              <2>  %%l1.1:
 21446 00002986 51                  <2>  push cx
 21447                              <2>  int16toreg __square_xcount, dx
 21448                              <3>  int16toreg cs, %1, %2
 21449 00002987 68[2E1A]            <4>  push %2
 21450 0000298A 0E                  <4>  push %1
 21451 0000298B 1F                  <4>  pop ds
 21452 0000298C 5E                  <4>  pop si
 21453 0000298D 8B14                <4>  mov word %3,[si]
 21454 0000298F 59                  <2>  pop cx
 21455 00002990 38D1                <2>  cmp cl,dl
 21456 00002992 0F83CA00            <2>  jae %%l1.2
 21457 00002996 51                  <2>  push cx
 21458                              <2> 
 21459                              <2>  int16toreg __square_xcount, ax
 21460                              <3>  int16toreg cs, %1, %2
 21461 00002997 68[2E1A]            <4>  push %2
 21462 0000299A 0E                  <4>  push %1
 21463 0000299B 1F                  <4>  pop ds
 21464 0000299C 5E                  <4>  pop si
 21465 0000299D 8B04                <4>  mov word %3,[si]
 21466 0000299F 59                  <2>  pop cx
 21467 000029A0 5B                  <2>  pop bx
 21468 000029A1 53                  <2>  push bx
 21469 000029A2 51                  <2>  push cx
 21470                              <2> 
 21471 000029A3 F7E3                <2>  mul bx
 21472 000029A5 01C8                <2>  add ax,cx
 21473                              <2> 
 21474                              <2>  vlodsb __squaremap, ax, cl
 21475                              <3>  vlodsb cs, %1, %2, %3
 21476 000029A7 0E                  <4>  push %1
 21477 000029A8 1F                  <4>  pop ds
 21478 000029A9 BE[F019]            <4>  mov si,%2
 21479 000029AC 01C6                <4>  add si,%3
 21480 000029AE 8A0C                <4>  mov byte %4,[si]
 21481 000029B0 80F900              <2>  cmp cl,0
 21482 000029B3 0F848300            <2>  jz %%painted
 21483                              <2>  int16toreg %%cindex, bx
 21484                              <3>  int16toreg cs, %1, %2
 21485 000029B7 68[D020]            <4>  push %2
 21486 000029BA 0E                  <4>  push %1
 21487 000029BB 1F                  <4>  pop ds
 21488 000029BC 5E                  <4>  pop si
 21489 000029BD 8B1C                <4>  mov word %3,[si]
 21490                              <2>  fillrect __square_x, __square_y, __square_x2, __square_y2, __square_ycolor+bx
 21491                              <3>  fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 21492                              <4>  stkopen 0x09
 21493 000029BF 83EC09              <5>  sub word sp, %1
 21494 000029C2 54                  <5>  push sp
 21495 000029C3 5D                  <5>  pop bp
 21496 000029C4 8CC8                <4>  mov ax,%1
 21497 000029C6 8ED8                <4>  mov ds,ax
 21498 000029C8 A1[201A]            <4>  mov ax,[%2]
 21499 000029CB 894600              <4>  mov [bp+0],ax
 21500 000029CE 8CC8                <4>  mov ax,%3
 21501 000029D0 8ED8                <4>  mov ds,ax
 21502 000029D2 A1[221A]            <4>  mov ax,[%4]
 21503 000029D5 894602              <4>  mov [bp+2],ax
 21504 000029D8 8CC8                <4>  mov ax,%5
 21505 000029DA 8ED8                <4>  mov ds,ax
 21506 000029DC A1[241A]            <4>  mov ax,[%6]
 21507 000029DF 894604              <4>  mov [bp+4],ax
 21508 000029E2 8CC8                <4>  mov ax,%7
 21509 000029E4 8ED8                <4>  mov ds,ax
 21510 000029E6 A1[261A]            <4>  mov ax,[%8]
 21511 000029E9 894606              <4>  mov [bp+6],ax
 21512 000029EC 8CC8                <4>  mov ax,%9
 21513 000029EE 8ED8                <4>  mov ds,ax
 21514 000029F0 8A87[B719]          <4>  mov al,[%10]
 21515 000029F4 884608              <4>  mov [bp+8],al
 21516 000029F7 E8(961B)            <4>  call proc_fillrect
 21517                              <4>  stkclose 0x09
 21518 000029FA 83C409              <5>  add word sp, %1
 21519                              <2>  drawrect __square_x, __square_y, __square_x2, __square_y2, __square_bordercolor
 21520                              <3>  drawrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 21521                              <4>  stkopen 0x09
 21522 000029FD 83EC09              <5>  sub word sp, %1
 21523 00002A00 54                  <5>  push sp
 21524 00002A01 5D                  <5>  pop bp
 21525 00002A02 8CC8                <4>  mov ax,%1
 21526 00002A04 8ED8                <4>  mov ds,ax
 21527 00002A06 A1[201A]            <4>  mov ax,[%2]
 21528 00002A09 894600              <4>  mov [bp+0],ax
 21529 00002A0C 8CC8                <4>  mov ax,%3
 21530 00002A0E 8ED8                <4>  mov ds,ax
 21531 00002A10 A1[221A]            <4>  mov ax,[%4]
 21532 00002A13 894602              <4>  mov [bp+2],ax
 21533 00002A16 8CC8                <4>  mov ax,%5
 21534 00002A18 8ED8                <4>  mov ds,ax
 21535 00002A1A A1[241A]            <4>  mov ax,[%6]
 21536 00002A1D 894604              <4>  mov [bp+4],ax
 21537 00002A20 8CC8                <4>  mov ax,%7
 21538 00002A22 8ED8                <4>  mov ds,ax
 21539 00002A24 A1[261A]            <4>  mov ax,[%8]
 21540 00002A27 894606              <4>  mov [bp+6],ax
 21541 00002A2A 8CC8                <4>  mov ax,%9
 21542 00002A2C 8ED8                <4>  mov ds,ax
 21543 00002A2E A0[B619]            <4>  mov al,[%10]
 21544 00002A31 884608              <4>  mov [bp+8],al
 21545 00002A34 E8(F91A)            <4>  call proc_drawrect
 21546                              <4>  stkclose 0x09
 21547 00002A37 83C409              <5>  add word sp, %1
 21548                              <2>  %%painted:
 21549                              <2> 
 21550                              <2>  add16 __square_x, __square_w
 21551                              <3>  add16 cs, %1, cs, %2
 21552 00002A3A 8CC8                <4>  mov ax,%3
 21553 00002A3C 8ED8                <4>  mov ds,ax
 21554 00002A3E 8B1E[281A]          <4>  mov bx,[%4]
 21555 00002A42 8CC8                <4>  mov ax,%1
 21556 00002A44 8ED8                <4>  mov ds,ax
 21557 00002A46 011E[201A]          <4>  add [%2],bx
 21558                              <2>  add16 __square_x2, __square_w
 21559                              <3>  add16 cs, %1, cs, %2
 21560 00002A4A 8CC8                <4>  mov ax,%3
 21561 00002A4C 8ED8                <4>  mov ds,ax
 21562 00002A4E 8B1E[281A]          <4>  mov bx,[%4]
 21563 00002A52 8CC8                <4>  mov ax,%1
 21564 00002A54 8ED8                <4>  mov ds,ax
 21565 00002A56 011E[241A]          <4>  add [%2],bx
 21566                              <2> 
 21567 00002A5A 59                  <2>  pop cx
 21568 00002A5B FEC1                <2>  inc cl
 21569 00002A5D E926FF              <2>  jmp %%l1.1
 21570                              <2>  %%l1.2:
 21571                              <2> 
 21572                              <2>  add16 __square_y, __square_h
 21573                              <3>  add16 cs, %1, cs, %2
 21574 00002A60 8CC8                <4>  mov ax,%3
 21575 00002A62 8ED8                <4>  mov ds,ax
 21576 00002A64 8B1E[2A1A]          <4>  mov bx,[%4]
 21577 00002A68 8CC8                <4>  mov ax,%1
 21578 00002A6A 8ED8                <4>  mov ds,ax
 21579 00002A6C 011E[221A]          <4>  add [%2],bx
 21580                              <2>  add16 __square_y2, __square_h
 21581                              <3>  add16 cs, %1, cs, %2
 21582 00002A70 8CC8                <4>  mov ax,%3
 21583 00002A72 8ED8                <4>  mov ds,ax
 21584 00002A74 8B1E[2A1A]          <4>  mov bx,[%4]
 21585 00002A78 8CC8                <4>  mov ax,%1
 21586 00002A7A 8ED8                <4>  mov ds,ax
 21587 00002A7C 011E[261A]          <4>  add [%2],bx
 21588                              <2>  inc16 %%cindex
 21589                              <3>  inc16 cs, %1
 21590 00002A80 8CC8                <4>  mov ax,%1
 21591 00002A82 8ED8                <4>  mov ds,ax
 21592 00002A84 FF06[D020]          <4>  inc word [%2]
 21593                              <2> 
 21594 00002A88 59                  <2>  pop cx
 21595 00002A89 FEC1                <2>  inc cl
 21596 00002A8B E9B5FE              <2>  jmp %%l1
 21597                              <2>  %%l2:
 21598                              <1>  gui_paintball
 21599                              <2> section .data
 21600 000020D4 0000                <2>  %%x: dw 0
 21601 000020D6 0000                <2>  %%y: dw 0
 21602 000020D8 0000                <2>  %%r: dw 0
 21603                              <2> section .text
 21604                              <2>  fltoint16 __ball_x, %%x
 21605                              <3>  fltoint16 cs, %1, cs, %2
 21606                              <4>  stkopen 0x06
 21607 00002A8E 83EC06              <5>  sub word sp, %1
 21608 00002A91 54                  <5>  push sp
 21609 00002A92 5D                  <5>  pop bp
 21610 00002A93 8CC8                <4>  mov ax,%1
 21611 00002A95 8ED8                <4>  mov ds,ax
 21612 00002A97 A1[481A]            <4>  mov ax,[%2+2]
 21613 00002A9A 894600              <4>  mov [bp+0],ax
 21614 00002A9D A1[461A]            <4>  mov ax,[%2]
 21615 00002AA0 894602              <4>  mov [bp+2],ax
 21616 00002AA3 E8(C305)            <4>  call proc_fltoint16
 21617 00002AA6 89E0                <4>  mov ax,sp
 21618 00002AA8 89C5                <4>  mov bp,ax
 21619 00002AAA 8CC8                <4>  mov ax,%3
 21620 00002AAC 8ED8                <4>  mov ds,ax
 21621 00002AAE 8B4604              <4>  mov ax,[bp+4]
 21622 00002AB1 A3[D420]            <4>  mov [%4],ax
 21623                              <4>  stkclose 0x06
 21624 00002AB4 83C406              <5>  add word sp, %1
 21625                              <2>  fltoint16 __ball_y, %%y
 21626                              <3>  fltoint16 cs, %1, cs, %2
 21627                              <4>  stkopen 0x06
 21628 00002AB7 83EC06              <5>  sub word sp, %1
 21629 00002ABA 54                  <5>  push sp
 21630 00002ABB 5D                  <5>  pop bp
 21631 00002ABC 8CC8                <4>  mov ax,%1
 21632 00002ABE 8ED8                <4>  mov ds,ax
 21633 00002AC0 A1[4C1A]            <4>  mov ax,[%2+2]
 21634 00002AC3 894600              <4>  mov [bp+0],ax
 21635 00002AC6 A1[4A1A]            <4>  mov ax,[%2]
 21636 00002AC9 894602              <4>  mov [bp+2],ax
 21637 00002ACC E8(C305)            <4>  call proc_fltoint16
 21638 00002ACF 89E0                <4>  mov ax,sp
 21639 00002AD1 89C5                <4>  mov bp,ax
 21640 00002AD3 8CC8                <4>  mov ax,%3
 21641 00002AD5 8ED8                <4>  mov ds,ax
 21642 00002AD7 8B4604              <4>  mov ax,[bp+4]
 21643 00002ADA A3[D620]            <4>  mov [%4],ax
 21644                              <4>  stkclose 0x06
 21645 00002ADD 83C406              <5>  add word sp, %1
 21646                              <2>  fltoint16 __ball_radial, %%r
 21647                              <3>  fltoint16 cs, %1, cs, %2
 21648                              <4>  stkopen 0x06
 21649 00002AE0 83EC06              <5>  sub word sp, %1
 21650 00002AE3 54                  <5>  push sp
 21651 00002AE4 5D                  <5>  pop bp
 21652 00002AE5 8CC8                <4>  mov ax,%1
 21653 00002AE7 8ED8                <4>  mov ds,ax
 21654 00002AE9 A1[501A]            <4>  mov ax,[%2+2]
 21655 00002AEC 894600              <4>  mov [bp+0],ax
 21656 00002AEF A1[4E1A]            <4>  mov ax,[%2]
 21657 00002AF2 894602              <4>  mov [bp+2],ax
 21658 00002AF5 E8(C305)            <4>  call proc_fltoint16
 21659 00002AF8 89E0                <4>  mov ax,sp
 21660 00002AFA 89C5                <4>  mov bp,ax
 21661 00002AFC 8CC8                <4>  mov ax,%3
 21662 00002AFE 8ED8                <4>  mov ds,ax
 21663 00002B00 8B4604              <4>  mov ax,[bp+4]
 21664 00002B03 A3[D820]            <4>  mov [%4],ax
 21665                              <4>  stkclose 0x06
 21666 00002B06 83C406              <5>  add word sp, %1
 21667                              <2>  fillarc %%x, %%y, %%r, %%r, __ball_color
 21668                              <3>  fillarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 21669                              <4>  drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 1
 21670                              <5>  stkopen 0x0A
 21671 00002B09 83EC0A              <6>  sub word sp, %1
 21672 00002B0C 54                  <6>  push sp
 21673 00002B0D 5D                  <6>  pop bp
 21674 00002B0E 8CC8                <5>  mov ax,%1
 21675 00002B10 8ED8                <5>  mov ds,ax
 21676 00002B12 A1[D420]            <5>  mov ax,[%2]
 21677 00002B15 894600              <5>  mov [bp+0],ax
 21678 00002B18 8CC8                <5>  mov ax,%3
 21679 00002B1A 8ED8                <5>  mov ds,ax
 21680 00002B1C A1[D620]            <5>  mov ax,[%4]
 21681 00002B1F 894602              <5>  mov [bp+2],ax
 21682 00002B22 8CC8                <5>  mov ax,%5
 21683 00002B24 8ED8                <5>  mov ds,ax
 21684 00002B26 A1[D820]            <5>  mov ax,[%6]
 21685 00002B29 894604              <5>  mov [bp+4],ax
 21686 00002B2C 8CC8                <5>  mov ax,%7
 21687 00002B2E 8ED8                <5>  mov ds,ax
 21688 00002B30 A1[D820]            <5>  mov ax,[%8]
 21689 00002B33 894606              <5>  mov [bp+6],ax
 21690 00002B36 8CC8                <5>  mov ax,%9
 21691 00002B38 8ED8                <5>  mov ds,ax
 21692 00002B3A A0[B219]            <5>  mov al,[%10]
 21693 00002B3D 884608              <5>  mov byte [bp+8],al
 21694 00002B40 C6460901            <5>  mov byte [bp+9],%11
 21695 00002B44 E8(D21B)            <5>  call proc_drawarc
 21696                              <5>  stkclose 0x0A
 21697 00002B47 83C40A              <6>  add word sp, %1
 21698                              <2>  drawarc %%x, %%y, %%r, %%r, __ball_bordercolor
 21699                              <3>  drawarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 21700                              <4>  drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 0
 21701                              <5>  stkopen 0x0A
 21702 00002B4A 83EC0A              <6>  sub word sp, %1
 21703 00002B4D 54                  <6>  push sp
 21704 00002B4E 5D                  <6>  pop bp
 21705 00002B4F 8CC8                <5>  mov ax,%1
 21706 00002B51 8ED8                <5>  mov ds,ax
 21707 00002B53 A1[D420]            <5>  mov ax,[%2]
 21708 00002B56 894600              <5>  mov [bp+0],ax
 21709 00002B59 8CC8                <5>  mov ax,%3
 21710 00002B5B 8ED8                <5>  mov ds,ax
 21711 00002B5D A1[D620]            <5>  mov ax,[%4]
 21712 00002B60 894602              <5>  mov [bp+2],ax
 21713 00002B63 8CC8                <5>  mov ax,%5
 21714 00002B65 8ED8                <5>  mov ds,ax
 21715 00002B67 A1[D820]            <5>  mov ax,[%6]
 21716 00002B6A 894604              <5>  mov [bp+4],ax
 21717 00002B6D 8CC8                <5>  mov ax,%7
 21718 00002B6F 8ED8                <5>  mov ds,ax
 21719 00002B71 A1[D820]            <5>  mov ax,[%8]
 21720 00002B74 894606              <5>  mov [bp+6],ax
 21721 00002B77 8CC8                <5>  mov ax,%9
 21722 00002B79 8ED8                <5>  mov ds,ax
 21723 00002B7B A0[B319]            <5>  mov al,[%10]
 21724 00002B7E 884608              <5>  mov byte [bp+8],al
 21725 00002B81 C6460900            <5>  mov byte [bp+9],%11
 21726 00002B85 E8(D21B)            <5>  call proc_drawarc
 21727                              <5>  stkclose 0x0A
 21728 00002B88 83C40A              <6>  add word sp, %1
 21729                              <1>  gui_paintracket
 21730                              <2> section .data
 21731 000020DA 0000                <2>  %%x2: dw 0
 21732 000020DC 0000                <2>  %%y2: dw 0
 21733                              <2> section .text
 21734                              <2>  mov16 %%x2, __racket_x
 21735                              <3>  mov16 cs, %1, cs, %2
 21736 00002B8B 8CC8                <4>  mov ax,%3
 21737 00002B8D 8ED8                <4>  mov ds,ax
 21738 00002B8F 8B1E[841F]          <4>  mov bx,[%4]
 21739 00002B93 8CC8                <4>  mov ax,%1
 21740 00002B95 8ED8                <4>  mov ds,ax
 21741 00002B97 891E[DA20]          <4>  mov [%2],bx
 21742                              <2>  mov16 %%y2, __racket_y
 21743                              <3>  mov16 cs, %1, cs, %2
 21744 00002B9B 8CC8                <4>  mov ax,%3
 21745 00002B9D 8ED8                <4>  mov ds,ax
 21746 00002B9F 8B1E[861F]          <4>  mov bx,[%4]
 21747 00002BA3 8CC8                <4>  mov ax,%1
 21748 00002BA5 8ED8                <4>  mov ds,ax
 21749 00002BA7 891E[DC20]          <4>  mov [%2],bx
 21750                              <2>  add16 %%x2, __racket_w
 21751                              <3>  add16 cs, %1, cs, %2
 21752 00002BAB 8CC8                <4>  mov ax,%3
 21753 00002BAD 8ED8                <4>  mov ds,ax
 21754 00002BAF 8B1E[881F]          <4>  mov bx,[%4]
 21755 00002BB3 8CC8                <4>  mov ax,%1
 21756 00002BB5 8ED8                <4>  mov ds,ax
 21757 00002BB7 011E[DA20]          <4>  add [%2],bx
 21758                              <2>  add16 %%y2, __racket_h
 21759                              <3>  add16 cs, %1, cs, %2
 21760 00002BBB 8CC8                <4>  mov ax,%3
 21761 00002BBD 8ED8                <4>  mov ds,ax
 21762 00002BBF 8B1E[8A1F]          <4>  mov bx,[%4]
 21763 00002BC3 8CC8                <4>  mov ax,%1
 21764 00002BC5 8ED8                <4>  mov ds,ax
 21765 00002BC7 011E[DC20]          <4>  add [%2],bx
 21766                              <2>  fillrect __racket_x, __racket_y, %%x2, %%y2, __racket_color
 21767                              <3>  fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 21768                              <4>  stkopen 0x09
 21769 00002BCB 83EC09              <5>  sub word sp, %1
 21770 00002BCE 54                  <5>  push sp
 21771 00002BCF 5D                  <5>  pop bp
 21772 00002BD0 8CC8                <4>  mov ax,%1
 21773 00002BD2 8ED8                <4>  mov ds,ax
 21774 00002BD4 A1[841F]            <4>  mov ax,[%2]
 21775 00002BD7 894600              <4>  mov [bp+0],ax
 21776 00002BDA 8CC8                <4>  mov ax,%3
 21777 00002BDC 8ED8                <4>  mov ds,ax
 21778 00002BDE A1[861F]            <4>  mov ax,[%4]
 21779 00002BE1 894602              <4>  mov [bp+2],ax
 21780 00002BE4 8CC8                <4>  mov ax,%5
 21781 00002BE6 8ED8                <4>  mov ds,ax
 21782 00002BE8 A1[DA20]            <4>  mov ax,[%6]
 21783 00002BEB 894604              <4>  mov [bp+4],ax
 21784 00002BEE 8CC8                <4>  mov ax,%7
 21785 00002BF0 8ED8                <4>  mov ds,ax
 21786 00002BF2 A1[DC20]            <4>  mov ax,[%8]
 21787 00002BF5 894606              <4>  mov [bp+6],ax
 21788 00002BF8 8CC8                <4>  mov ax,%9
 21789 00002BFA 8ED8                <4>  mov ds,ax
 21790 00002BFC A0[BB19]            <4>  mov al,[%10]
 21791 00002BFF 884608              <4>  mov [bp+8],al
 21792 00002C02 E8(961B)            <4>  call proc_fillrect
 21793                              <4>  stkclose 0x09
 21794 00002C05 83C409              <5>  add word sp, %1
 21795                              <2>  drawrect __racket_x, __racket_y, %%x2, %%y2, __racket_bordercolor
 21796                              <3>  drawrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 21797                              <4>  stkopen 0x09
 21798 00002C08 83EC09              <5>  sub word sp, %1
 21799 00002C0B 54                  <5>  push sp
 21800 00002C0C 5D                  <5>  pop bp
 21801 00002C0D 8CC8                <4>  mov ax,%1
 21802 00002C0F 8ED8                <4>  mov ds,ax
 21803 00002C11 A1[841F]            <4>  mov ax,[%2]
 21804 00002C14 894600              <4>  mov [bp+0],ax
 21805 00002C17 8CC8                <4>  mov ax,%3
 21806 00002C19 8ED8                <4>  mov ds,ax
 21807 00002C1B A1[861F]            <4>  mov ax,[%4]
 21808 00002C1E 894602              <4>  mov [bp+2],ax
 21809 00002C21 8CC8                <4>  mov ax,%5
 21810 00002C23 8ED8                <4>  mov ds,ax
 21811 00002C25 A1[DA20]            <4>  mov ax,[%6]
 21812 00002C28 894604              <4>  mov [bp+4],ax
 21813 00002C2B 8CC8                <4>  mov ax,%7
 21814 00002C2D 8ED8                <4>  mov ds,ax
 21815 00002C2F A1[DC20]            <4>  mov ax,[%8]
 21816 00002C32 894606              <4>  mov [bp+6],ax
 21817 00002C35 8CC8                <4>  mov ax,%9
 21818 00002C37 8ED8                <4>  mov ds,ax
 21819 00002C39 A0[BC19]            <4>  mov al,[%10]
 21820 00002C3C 884608              <4>  mov [bp+8],al
 21821 00002C3F E8(F91A)            <4>  call proc_drawrect
 21822                              <4>  stkclose 0x09
 21823 00002C42 83C409              <5>  add word sp, %1
 21824                              <1>  repaint
 21825 00002C45 E8(2600)            <2>  call proc_repaint
 21826                              <1> 
 21827                              <1>  cmp16 __show_init_message, __ZERO, cl
 21828                              <2>  cmp16 cs, %1, cs, %2, %3
 21829 00002C48 8CC8                <3>  mov ax,%1
 21830 00002C4A 8ED8                <3>  mov ds,ax
 21831 00002C4C 8B1E[941F]          <3>  mov bx,[%2]
 21832 00002C50 8CC8                <3>  mov ax,%3
 21833 00002C52 8ED8                <3>  mov ds,ax
 21834 00002C54 8B0E[AE19]          <3>  mov cx,[%4]
 21835                              <3> 
 21836 00002C58 39CB                <3>  cmp bx,cx
 21837 00002C5A 7F06                <3>  jg %%above
 21838 00002C5C 7C08                <3>  jl %%below
 21839 00002C5E B100                <3>  mov byte %5, 0
 21840 00002C60 EB06                <3>  jmp %%endcmp
 21841                              <3>  %%above:
 21842 00002C62 B101                <3>  mov byte %5, 1
 21843 00002C64 EB02                <3>  jmp %%endcmp
 21844                              <3>  %%below:
 21845 00002C66 B1FF                <3>  mov byte %5, -1
 21846                              <3>  %%endcmp:
 21847 00002C68 80F900              <1>  cmp cl,0
 21848 00002C6B 7425                <1>  je %%init_message_painted
 21849                              <1>  gui_show_message 'Pressione alguma tecla..', 8, 13, __message_default_color
 21850                              <2>  section .data
 21851 000020DE 5072657373696F6E65- <2>  %%str: db %1,0
 21852 000020E7 20616C67756D612074- <2>
 21853 000020F0 65636C612E2E00      <2>
 21854                              <2> section .text
 21855 00002C6D 8CC8                <2>  mov ax,cs
 21856 00002C6F 8ED8                <2>  mov ds,ax
 21857 00002C71 A0[BD19]            <2>  mov al,[%4]
 21858                              <2>  __drawstring %%str, %2, %3, al
 21859                              <3>  __drawstring cs, %1, %2, %3, %4
 21860                              <4>  stkopen 0x07
 21861 00002C74 83EC07              <5>  sub word sp, %1
 21862 00002C77 54                  <5>  push sp
 21863 00002C78 5D                  <5>  pop bp
 21864 00002C79 8C4E00              <4>  mov word [bp+0],%1
 21865 00002C7C C74602[DE20]        <4>  mov word [bp+2],%2
 21866 00002C81 C6460408            <4>  mov byte [bp+4],%3
 21867 00002C85 C646050D            <4>  mov byte [bp+5],%4
 21868 00002C89 884606              <4>  mov byte [bp+6],%5
 21869 00002C8C E8(681A)            <4>  call proc_drawstring
 21870                              <4>  stkclose 0x07
 21871 00002C8F 83C407              <5>  add word sp, %1
 21872                              <1>  %%init_message_painted:
 21873                              <1> 
 21874                              <1>  cmp16 __show_pause_message, __ZERO, cl
 21875                              <2>  cmp16 cs, %1, cs, %2, %3
 21876 00002C92 8CC8                <3>  mov ax,%1
 21877 00002C94 8ED8                <3>  mov ds,ax
 21878 00002C96 8B1E[9A1F]          <3>  mov bx,[%2]
 21879 00002C9A 8CC8                <3>  mov ax,%3
 21880 00002C9C 8ED8                <3>  mov ds,ax
 21881 00002C9E 8B0E[AE19]          <3>  mov cx,[%4]
 21882                              <3> 
 21883 00002CA2 39CB                <3>  cmp bx,cx
 21884 00002CA4 7F06                <3>  jg %%above
 21885 00002CA6 7C08                <3>  jl %%below
 21886 00002CA8 B100                <3>  mov byte %5, 0
 21887 00002CAA EB06                <3>  jmp %%endcmp
 21888                              <3>  %%above:
 21889 00002CAC B101                <3>  mov byte %5, 1
 21890 00002CAE EB02                <3>  jmp %%endcmp
 21891                              <3>  %%below:
 21892 00002CB0 B1FF                <3>  mov byte %5, -1
 21893                              <3>  %%endcmp:
 21894 00002CB2 80F900              <1>  cmp cl,0
 21895 00002CB5 7425                <1>  je %%pause_message_painted
 21896                              <1>  gui_show_message 'Pausa...', 16, 14, __message_default_color
 21897                              <2>  section .data
 21898 000020F7 50617573612E2E2E00  <2>  %%str: db %1,0
 21899                              <2> section .text
 21900 00002CB7 8CC8                <2>  mov ax,cs
 21901 00002CB9 8ED8                <2>  mov ds,ax
 21902 00002CBB A0[BD19]            <2>  mov al,[%4]
 21903                              <2>  __drawstring %%str, %2, %3, al
 21904                              <3>  __drawstring cs, %1, %2, %3, %4
 21905                              <4>  stkopen 0x07
 21906 00002CBE 83EC07              <5>  sub word sp, %1
 21907 00002CC1 54                  <5>  push sp
 21908 00002CC2 5D                  <5>  pop bp
 21909 00002CC3 8C4E00              <4>  mov word [bp+0],%1
 21910 00002CC6 C74602[F720]        <4>  mov word [bp+2],%2
 21911 00002CCB C6460410            <4>  mov byte [bp+4],%3
 21912 00002CCF C646050E            <4>  mov byte [bp+5],%4
 21913 00002CD3 884606              <4>  mov byte [bp+6],%5
 21914 00002CD6 E8(681A)            <4>  call proc_drawstring
 21915                              <4>  stkclose 0x07
 21916 00002CD9 83C407              <5>  add word sp, %1
 21917                              <1>  %%pause_message_painted:
 21918                              <1> 
 21919                              <1>  cmp16 __show_win_message, __ZERO, cl
 21920                              <2>  cmp16 cs, %1, cs, %2, %3
 21921 00002CDC 8CC8                <3>  mov ax,%1
 21922 00002CDE 8ED8                <3>  mov ds,ax
 21923 00002CE0 8B1E[961F]          <3>  mov bx,[%2]
 21924 00002CE4 8CC8                <3>  mov ax,%3
 21925 00002CE6 8ED8                <3>  mov ds,ax
 21926 00002CE8 8B0E[AE19]          <3>  mov cx,[%4]
 21927                              <3> 
 21928 00002CEC 39CB                <3>  cmp bx,cx
 21929 00002CEE 7F06                <3>  jg %%above
 21930 00002CF0 7C08                <3>  jl %%below
 21931 00002CF2 B100                <3>  mov byte %5, 0
 21932 00002CF4 EB06                <3>  jmp %%endcmp
 21933                              <3>  %%above:
 21934 00002CF6 B101                <3>  mov byte %5, 1
 21935 00002CF8 EB02                <3>  jmp %%endcmp
 21936                              <3>  %%below:
 21937 00002CFA B1FF                <3>  mov byte %5, -1
 21938                              <3>  %%endcmp:
 21939 00002CFC 80F900              <1>  cmp cl,0
 21940 00002CFF 744A                <1>  je %%win_message_painted
 21941                              <1>  gui_show_message 'Ganhou...', 12, 13, __message_win_color
 21942                              <2>  section .data
 21943 00002100 47616E686F752E2E2E- <2>  %%str: db %1,0
 21944 00002109 00                  <2>
 21945                              <2> section .text
 21946 00002D01 8CC8                <2>  mov ax,cs
 21947 00002D03 8ED8                <2>  mov ds,ax
 21948 00002D05 A0[BE19]            <2>  mov al,[%4]
 21949                              <2>  __drawstring %%str, %2, %3, al
 21950                              <3>  __drawstring cs, %1, %2, %3, %4
 21951                              <4>  stkopen 0x07
 21952 00002D08 83EC07              <5>  sub word sp, %1
 21953 00002D0B 54                  <5>  push sp
 21954 00002D0C 5D                  <5>  pop bp
 21955 00002D0D 8C4E00              <4>  mov word [bp+0],%1
 21956 00002D10 C74602[0021]        <4>  mov word [bp+2],%2
 21957 00002D15 C646040C            <4>  mov byte [bp+4],%3
 21958 00002D19 C646050D            <4>  mov byte [bp+5],%4
 21959 00002D1D 884606              <4>  mov byte [bp+6],%5
 21960 00002D20 E8(681A)            <4>  call proc_drawstring
 21961                              <4>  stkclose 0x07
 21962 00002D23 83C407              <5>  add word sp, %1
 21963                              <1>  gui_show_message 'Parabens !!!', 12, 14, __message_default_color
 21964                              <2>  section .data
 21965 0000210A 5061726162656E7320- <2>  %%str: db %1,0
 21966 00002113 21212100            <2>
 21967                              <2> section .text
 21968 00002D26 8CC8                <2>  mov ax,cs
 21969 00002D28 8ED8                <2>  mov ds,ax
 21970 00002D2A A0[BD19]            <2>  mov al,[%4]
 21971                              <2>  __drawstring %%str, %2, %3, al
 21972                              <3>  __drawstring cs, %1, %2, %3, %4
 21973                              <4>  stkopen 0x07
 21974 00002D2D 83EC07              <5>  sub word sp, %1
 21975 00002D30 54                  <5>  push sp
 21976 00002D31 5D                  <5>  pop bp
 21977 00002D32 8C4E00              <4>  mov word [bp+0],%1
 21978 00002D35 C74602[0A21]        <4>  mov word [bp+2],%2
 21979 00002D3A C646040C            <4>  mov byte [bp+4],%3
 21980 00002D3E C646050E            <4>  mov byte [bp+5],%4
 21981 00002D42 884606              <4>  mov byte [bp+6],%5
 21982 00002D45 E8(681A)            <4>  call proc_drawstring
 21983                              <4>  stkclose 0x07
 21984 00002D48 83C407              <5>  add word sp, %1
 21985                              <1>  %%win_message_painted:
 21986                              <1> 
 21987                              <1>  cmp16 __show_lose_message, __ZERO, cl
 21988                              <2>  cmp16 cs, %1, cs, %2, %3
 21989 00002D4B 8CC8                <3>  mov ax,%1
 21990 00002D4D 8ED8                <3>  mov ds,ax
 21991 00002D4F 8B1E[981F]          <3>  mov bx,[%2]
 21992 00002D53 8CC8                <3>  mov ax,%3
 21993 00002D55 8ED8                <3>  mov ds,ax
 21994 00002D57 8B0E[AE19]          <3>  mov cx,[%4]
 21995                              <3> 
 21996 00002D5B 39CB                <3>  cmp bx,cx
 21997 00002D5D 7F06                <3>  jg %%above
 21998 00002D5F 7C08                <3>  jl %%below
 21999 00002D61 B100                <3>  mov byte %5, 0
 22000 00002D63 EB06                <3>  jmp %%endcmp
 22001                              <3>  %%above:
 22002 00002D65 B101                <3>  mov byte %5, 1
 22003 00002D67 EB02                <3>  jmp %%endcmp
 22004                              <3>  %%below:
 22005 00002D69 B1FF                <3>  mov byte %5, -1
 22006                              <3>  %%endcmp:
 22007 00002D6B 80F900              <1>  cmp cl,0
 22008 00002D6E 744A                <1>  je %%lose_message_painted
 22009                              <1>  gui_show_message 'Perdeu...', 11, 13, __message_lose_color
 22010                              <2>  section .data
 22011 00002117 5065726465752E2E2E- <2>  %%str: db %1,0
 22012 00002120 00                  <2>
 22013                              <2> section .text
 22014 00002D70 8CC8                <2>  mov ax,cs
 22015 00002D72 8ED8                <2>  mov ds,ax
 22016 00002D74 A0[BF19]            <2>  mov al,[%4]
 22017                              <2>  __drawstring %%str, %2, %3, al
 22018                              <3>  __drawstring cs, %1, %2, %3, %4
 22019                              <4>  stkopen 0x07
 22020 00002D77 83EC07              <5>  sub word sp, %1
 22021 00002D7A 54                  <5>  push sp
 22022 00002D7B 5D                  <5>  pop bp
 22023 00002D7C 8C4E00              <4>  mov word [bp+0],%1
 22024 00002D7F C74602[1721]        <4>  mov word [bp+2],%2
 22025 00002D84 C646040B            <4>  mov byte [bp+4],%3
 22026 00002D88 C646050D            <4>  mov byte [bp+5],%4
 22027 00002D8C 884606              <4>  mov byte [bp+6],%5
 22028 00002D8F E8(681A)            <4>  call proc_drawstring
 22029                              <4>  stkclose 0x07
 22030 00002D92 83C407              <5>  add word sp, %1
 22031                              <1>  gui_show_message 'Tente novamente !', 11, 14, __message_default_color
 22032                              <2>  section .data
 22033 00002121 54656E7465206E6F76- <2>  %%str: db %1,0
 22034 0000212A 616D656E7465202100  <2>
 22035                              <2> section .text
 22036 00002D95 8CC8                <2>  mov ax,cs
 22037 00002D97 8ED8                <2>  mov ds,ax
 22038 00002D99 A0[BD19]            <2>  mov al,[%4]
 22039                              <2>  __drawstring %%str, %2, %3, al
 22040                              <3>  __drawstring cs, %1, %2, %3, %4
 22041                              <4>  stkopen 0x07
 22042 00002D9C 83EC07              <5>  sub word sp, %1
 22043 00002D9F 54                  <5>  push sp
 22044 00002DA0 5D                  <5>  pop bp
 22045 00002DA1 8C4E00              <4>  mov word [bp+0],%1
 22046 00002DA4 C74602[2121]        <4>  mov word [bp+2],%2
 22047 00002DA9 C646040B            <4>  mov byte [bp+4],%3
 22048 00002DAD C646050E            <4>  mov byte [bp+5],%4
 22049 00002DB1 884606              <4>  mov byte [bp+6],%5
 22050 00002DB4 E8(681A)            <4>  call proc_drawstring
 22051                              <4>  stkclose 0x07
 22052 00002DB7 83C407              <5>  add word sp, %1
 22053                              <1>  %%lose_message_painted:
 22054                                  				waitenter:
 22055 00002DBA B400                    					mov ah,00h
 22056 00002DBC CD16                    					int 16h					
 22057 00002DBE 3C0D                    					cmp al,13
 22058 00002DC0 75F8                    					jne waitenter
 22059                                  				game_hide_pause_message
 22060                              <1>  mov16 __show_pause_message, __ZERO
 22061                              <2>  mov16 cs, %1, cs, %2
 22062 00002DC2 8CC8                <3>  mov ax,%3
 22063 00002DC4 8ED8                <3>  mov ds,ax
 22064 00002DC6 8B1E[AE19]          <3>  mov bx,[%4]
 22065 00002DCA 8CC8                <3>  mov ax,%1
 22066 00002DCC 8ED8                <3>  mov ds,ax
 22067 00002DCE 891E[9A1F]          <3>  mov [%2],bx
 22068 00002DD2 E98E01                  				jmp continue
 22069                                  			specialch:
 22070 00002DD5 80FC4B                  				cmp ah,4Bh
 22071 00002DD8 740A                    				je back
 22072 00002DDA 80FC4D                  				cmp ah,4Dh
 22073 00002DDD 0F84C400                				je front
 22074 00002DE1 E97F01                  				jmp continue
 22075                                  				back:
 22076                                  					game_backmoveracket				
 22077                              <1>  racket_backmove
 22078                              <2> section .data
 22079 00002133 0000                <2>  %%x: dw 0
 22080                              <2> section .text
 22081                              <2>  mov16 %%x, __racket_x
 22082                              <3>  mov16 cs, %1, cs, %2
 22083 00002DE4 8CC8                <4>  mov ax,%3
 22084 00002DE6 8ED8                <4>  mov ds,ax
 22085 00002DE8 8B1E[841F]          <4>  mov bx,[%4]
 22086 00002DEC 8CC8                <4>  mov ax,%1
 22087 00002DEE 8ED8                <4>  mov ds,ax
 22088 00002DF0 891E[3321]          <4>  mov [%2],bx
 22089                              <2>  sub16 %%x, __racket_inc
 22090                              <3>  sub16 cs, %1, cs, %2
 22091 00002DF4 8CC8                <4>  mov ax,%3
 22092 00002DF6 8ED8                <4>  mov ds,ax
 22093 00002DF8 8B1E[8E1F]          <4>  mov bx,[%4]
 22094 00002DFC 8CC8                <4>  mov ax,%1
 22095 00002DFE 8ED8                <4>  mov ds,ax
 22096 00002E00 291E[3321]          <4>  sub [%2],bx
 22097                              <2>  racket_move %%x
 22098                              <3> section .data
 22099 00002135 0000                <3>  %%max_x2: dw 0
 22100                              <3> section .text
 22101                              <3>  cmp16 %1, __tray_x1, cl
 22102                              <4>  cmp16 cs, %1, cs, %2, %3
 22103 00002E04 8CC8                <5>  mov ax,%1
 22104 00002E06 8ED8                <5>  mov ds,ax
 22105 00002E08 8B1E[3321]          <5>  mov bx,[%2]
 22106 00002E0C 8CC8                <5>  mov ax,%3
 22107 00002E0E 8ED8                <5>  mov ds,ax
 22108 00002E10 8B0E[181A]          <5>  mov cx,[%4]
 22109                              <5> 
 22110 00002E14 39CB                <5>  cmp bx,cx
 22111 00002E16 7F06                <5>  jg %%above
 22112 00002E18 7C08                <5>  jl %%below
 22113 00002E1A B100                <5>  mov byte %5, 0
 22114 00002E1C EB06                <5>  jmp %%endcmp
 22115                              <5>  %%above:
 22116 00002E1E B101                <5>  mov byte %5, 1
 22117 00002E20 EB02                <5>  jmp %%endcmp
 22118                              <5>  %%below:
 22119 00002E22 B1FF                <5>  mov byte %5, -1
 22120                              <5>  %%endcmp:
 22121 00002E24 80F900              <3>  cmp cl,0
 22122 00002E27 7C57                <3>  jl %%movesidex1
 22123                              <3> 
 22124                              <3>  mov16 %%max_x2, __tray_x2
 22125                              <4>  mov16 cs, %1, cs, %2
 22126 00002E29 8CC8                <5>  mov ax,%3
 22127 00002E2B 8ED8                <5>  mov ds,ax
 22128 00002E2D 8B1E[1C1A]          <5>  mov bx,[%4]
 22129 00002E31 8CC8                <5>  mov ax,%1
 22130 00002E33 8ED8                <5>  mov ds,ax
 22131 00002E35 891E[3521]          <5>  mov [%2],bx
 22132                              <3>  sub16 %%max_x2, __racket_w
 22133                              <4>  sub16 cs, %1, cs, %2
 22134 00002E39 8CC8                <5>  mov ax,%3
 22135 00002E3B 8ED8                <5>  mov ds,ax
 22136 00002E3D 8B1E[881F]          <5>  mov bx,[%4]
 22137 00002E41 8CC8                <5>  mov ax,%1
 22138 00002E43 8ED8                <5>  mov ds,ax
 22139 00002E45 291E[3521]          <5>  sub [%2],bx
 22140                              <3>  cmp16 %1, %%max_x2, cl
 22141                              <4>  cmp16 cs, %1, cs, %2, %3
 22142 00002E49 8CC8                <5>  mov ax,%1
 22143 00002E4B 8ED8                <5>  mov ds,ax
 22144 00002E4D 8B1E[3321]          <5>  mov bx,[%2]
 22145 00002E51 8CC8                <5>  mov ax,%3
 22146 00002E53 8ED8                <5>  mov ds,ax
 22147 00002E55 8B0E[3521]          <5>  mov cx,[%4]
 22148                              <5> 
 22149 00002E59 39CB                <5>  cmp bx,cx
 22150 00002E5B 7F06                <5>  jg %%above
 22151 00002E5D 7C08                <5>  jl %%below
 22152 00002E5F B100                <5>  mov byte %5, 0
 22153 00002E61 EB06                <5>  jmp %%endcmp
 22154                              <5>  %%above:
 22155 00002E63 B101                <5>  mov byte %5, 1
 22156 00002E65 EB02                <5>  jmp %%endcmp
 22157                              <5>  %%below:
 22158 00002E67 B1FF                <5>  mov byte %5, -1
 22159                              <5>  %%endcmp:
 22160 00002E69 80F900              <3>  cmp cl,0
 22161 00002E6C 7F24                <3>  jg %%movesidex2
 22162                              <3> 
 22163                              <3>  mov16 __racket_x, %1
 22164                              <4>  mov16 cs, %1, cs, %2
 22165 00002E6E 8CC8                <5>  mov ax,%3
 22166 00002E70 8ED8                <5>  mov ds,ax
 22167 00002E72 8B1E[3321]          <5>  mov bx,[%4]
 22168 00002E76 8CC8                <5>  mov ax,%1
 22169 00002E78 8ED8                <5>  mov ds,ax
 22170 00002E7A 891E[841F]          <5>  mov [%2],bx
 22171 00002E7E EB22                <3>  jmp %%end
 22172                              <3> 
 22173                              <3>  %%movesidex1:
 22174                              <3>  mov16 __racket_x, __tray_x1
 22175                              <4>  mov16 cs, %1, cs, %2
 22176 00002E80 8CC8                <5>  mov ax,%3
 22177 00002E82 8ED8                <5>  mov ds,ax
 22178 00002E84 8B1E[181A]          <5>  mov bx,[%4]
 22179 00002E88 8CC8                <5>  mov ax,%1
 22180 00002E8A 8ED8                <5>  mov ds,ax
 22181 00002E8C 891E[841F]          <5>  mov [%2],bx
 22182 00002E90 EB10                <3>  jmp %%end
 22183                              <3>  %%movesidex2:
 22184                              <3>  mov16 __racket_x, %%max_x2
 22185                              <4>  mov16 cs, %1, cs, %2
 22186 00002E92 8CC8                <5>  mov ax,%3
 22187 00002E94 8ED8                <5>  mov ds,ax
 22188 00002E96 8B1E[3521]          <5>  mov bx,[%4]
 22189 00002E9A 8CC8                <5>  mov ax,%1
 22190 00002E9C 8ED8                <5>  mov ds,ax
 22191 00002E9E 891E[841F]          <5>  mov [%2],bx
 22192                              <3>  %%end:
 22193 00002EA2 E9BE00                  					jmp continue
 22194                                  				front:
 22195                                  					game_frontmoveracket				
 22196                              <1>  racket_frontmove
 22197                              <2> section .data
 22198 00002137 0000                <2>  %%x: dw 0
 22199                              <2> section .text
 22200                              <2>  mov16 %%x, __racket_x
 22201                              <3>  mov16 cs, %1, cs, %2
 22202 00002EA5 8CC8                <4>  mov ax,%3
 22203 00002EA7 8ED8                <4>  mov ds,ax
 22204 00002EA9 8B1E[841F]          <4>  mov bx,[%4]
 22205 00002EAD 8CC8                <4>  mov ax,%1
 22206 00002EAF 8ED8                <4>  mov ds,ax
 22207 00002EB1 891E[3721]          <4>  mov [%2],bx
 22208                              <2>  add16 %%x, __racket_inc
 22209                              <3>  add16 cs, %1, cs, %2
 22210 00002EB5 8CC8                <4>  mov ax,%3
 22211 00002EB7 8ED8                <4>  mov ds,ax
 22212 00002EB9 8B1E[8E1F]          <4>  mov bx,[%4]
 22213 00002EBD 8CC8                <4>  mov ax,%1
 22214 00002EBF 8ED8                <4>  mov ds,ax
 22215 00002EC1 011E[3721]          <4>  add [%2],bx
 22216                              <2>  racket_move %%x
 22217                              <3> section .data
 22218 00002139 0000                <3>  %%max_x2: dw 0
 22219                              <3> section .text
 22220                              <3>  cmp16 %1, __tray_x1, cl
 22221                              <4>  cmp16 cs, %1, cs, %2, %3
 22222 00002EC5 8CC8                <5>  mov ax,%1
 22223 00002EC7 8ED8                <5>  mov ds,ax
 22224 00002EC9 8B1E[3721]          <5>  mov bx,[%2]
 22225 00002ECD 8CC8                <5>  mov ax,%3
 22226 00002ECF 8ED8                <5>  mov ds,ax
 22227 00002ED1 8B0E[181A]          <5>  mov cx,[%4]
 22228                              <5> 
 22229 00002ED5 39CB                <5>  cmp bx,cx
 22230 00002ED7 7F06                <5>  jg %%above
 22231 00002ED9 7C08                <5>  jl %%below
 22232 00002EDB B100                <5>  mov byte %5, 0
 22233 00002EDD EB06                <5>  jmp %%endcmp
 22234                              <5>  %%above:
 22235 00002EDF B101                <5>  mov byte %5, 1
 22236 00002EE1 EB02                <5>  jmp %%endcmp
 22237                              <5>  %%below:
 22238 00002EE3 B1FF                <5>  mov byte %5, -1
 22239                              <5>  %%endcmp:
 22240 00002EE5 80F900              <3>  cmp cl,0
 22241 00002EE8 7C57                <3>  jl %%movesidex1
 22242                              <3> 
 22243                              <3>  mov16 %%max_x2, __tray_x2
 22244                              <4>  mov16 cs, %1, cs, %2
 22245 00002EEA 8CC8                <5>  mov ax,%3
 22246 00002EEC 8ED8                <5>  mov ds,ax
 22247 00002EEE 8B1E[1C1A]          <5>  mov bx,[%4]
 22248 00002EF2 8CC8                <5>  mov ax,%1
 22249 00002EF4 8ED8                <5>  mov ds,ax
 22250 00002EF6 891E[3921]          <5>  mov [%2],bx
 22251                              <3>  sub16 %%max_x2, __racket_w
 22252                              <4>  sub16 cs, %1, cs, %2
 22253 00002EFA 8CC8                <5>  mov ax,%3
 22254 00002EFC 8ED8                <5>  mov ds,ax
 22255 00002EFE 8B1E[881F]          <5>  mov bx,[%4]
 22256 00002F02 8CC8                <5>  mov ax,%1
 22257 00002F04 8ED8                <5>  mov ds,ax
 22258 00002F06 291E[3921]          <5>  sub [%2],bx
 22259                              <3>  cmp16 %1, %%max_x2, cl
 22260                              <4>  cmp16 cs, %1, cs, %2, %3
 22261 00002F0A 8CC8                <5>  mov ax,%1
 22262 00002F0C 8ED8                <5>  mov ds,ax
 22263 00002F0E 8B1E[3721]          <5>  mov bx,[%2]
 22264 00002F12 8CC8                <5>  mov ax,%3
 22265 00002F14 8ED8                <5>  mov ds,ax
 22266 00002F16 8B0E[3921]          <5>  mov cx,[%4]
 22267                              <5> 
 22268 00002F1A 39CB                <5>  cmp bx,cx
 22269 00002F1C 7F06                <5>  jg %%above
 22270 00002F1E 7C08                <5>  jl %%below
 22271 00002F20 B100                <5>  mov byte %5, 0
 22272 00002F22 EB06                <5>  jmp %%endcmp
 22273                              <5>  %%above:
 22274 00002F24 B101                <5>  mov byte %5, 1
 22275 00002F26 EB02                <5>  jmp %%endcmp
 22276                              <5>  %%below:
 22277 00002F28 B1FF                <5>  mov byte %5, -1
 22278                              <5>  %%endcmp:
 22279 00002F2A 80F900              <3>  cmp cl,0
 22280 00002F2D 7F24                <3>  jg %%movesidex2
 22281                              <3> 
 22282                              <3>  mov16 __racket_x, %1
 22283                              <4>  mov16 cs, %1, cs, %2
 22284 00002F2F 8CC8                <5>  mov ax,%3
 22285 00002F31 8ED8                <5>  mov ds,ax
 22286 00002F33 8B1E[3721]          <5>  mov bx,[%4]
 22287 00002F37 8CC8                <5>  mov ax,%1
 22288 00002F39 8ED8                <5>  mov ds,ax
 22289 00002F3B 891E[841F]          <5>  mov [%2],bx
 22290 00002F3F EB22                <3>  jmp %%end
 22291                              <3> 
 22292                              <3>  %%movesidex1:
 22293                              <3>  mov16 __racket_x, __tray_x1
 22294                              <4>  mov16 cs, %1, cs, %2
 22295 00002F41 8CC8                <5>  mov ax,%3
 22296 00002F43 8ED8                <5>  mov ds,ax
 22297 00002F45 8B1E[181A]          <5>  mov bx,[%4]
 22298 00002F49 8CC8                <5>  mov ax,%1
 22299 00002F4B 8ED8                <5>  mov ds,ax
 22300 00002F4D 891E[841F]          <5>  mov [%2],bx
 22301 00002F51 EB10                <3>  jmp %%end
 22302                              <3>  %%movesidex2:
 22303                              <3>  mov16 __racket_x, %%max_x2
 22304                              <4>  mov16 cs, %1, cs, %2
 22305 00002F53 8CC8                <5>  mov ax,%3
 22306 00002F55 8ED8                <5>  mov ds,ax
 22307 00002F57 8B1E[3921]          <5>  mov bx,[%4]
 22308 00002F5B 8CC8                <5>  mov ax,%1
 22309 00002F5D 8ED8                <5>  mov ds,ax
 22310 00002F5F 891E[841F]          <5>  mov [%2],bx
 22311                              <3>  %%end:
 22312                                  										
 22313                                  		continue:	
 22314                                  		
 22315 00002F63 B486                    		mov ah,86h
 22316                                  		int16toreg sleep+2, cx
 22317                              <1>  int16toreg cs, %1, %2
 22318 00002F65 68[A61F]            <2>  push %2
 22319 00002F68 0E                  <2>  push %1
 22320 00002F69 1F                  <2>  pop ds
 22321 00002F6A 5E                  <2>  pop si
 22322 00002F6B 8B0C                <2>  mov word %3,[si]
 22323                                  		int16toreg sleep, dx
 22324                              <1>  int16toreg cs, %1, %2
 22325 00002F6D 68[A41F]            <2>  push %2
 22326 00002F70 0E                  <2>  push %1
 22327 00002F71 1F                  <2>  pop ds
 22328 00002F72 5E                  <2>  pop si
 22329 00002F73 8B14                <2>  mov word %3,[si]
 22330 00002F75 CD15                    		int 15h
 22331                                  		
 22332                                  		inc16 i
 22333                              <1>  inc16 cs, %1
 22334 00002F77 8CC8                <2>  mov ax,%1
 22335 00002F79 8ED8                <2>  mov ds,ax
 22336 00002F7B FF06[9C1F]          <2>  inc word [%2]
 22337 00002F7F E9C5D9                  		jmp run
 22338                                  	
 22339                                  	finish:		
 22340                                  		gui_paint
 22341                              <1>  gui_paintbg
 22342 00002F82 B80000              <2>  mov ax, 0
 22343 00002F85 BB0000              <2>  mov bx, 0
 22344 00002F88 B94001              <2>  mov cx, 320
 22345 00002F8B BAC800              <2>  mov dx, 200
 22346                              <2>  __fillrect ax, bx, cx, dx, 0
 22347                              <3>  stkopen 0x09
 22348 00002F8E 83EC09              <4>  sub word sp, %1
 22349 00002F91 54                  <4>  push sp
 22350 00002F92 5D                  <4>  pop bp
 22351 00002F93 894600              <3>  mov word [bp+0],%1
 22352 00002F96 895E02              <3>  mov word [bp+2],%2
 22353 00002F99 894E04              <3>  mov word [bp+4],%3
 22354 00002F9C 895606              <3>  mov word [bp+6],%4
 22355 00002F9F C6460800            <3>  mov byte [bp+8],%5
 22356 00002FA3 E8(961B)            <3>  call proc_fillrect
 22357                              <3>  stkclose 0x09
 22358 00002FA6 83C409              <4>  add word sp, %1
 22359                              <1>  gui_painttray
 22360                              <2> section .data
 22361 0000213B 0000                <2>  %%cindex: dw 0
 22362 0000213D 0000                <2>  %%def_cindex: dw 0
 22363                              <2> section .text
 22364                              <2>  mov16 %%cindex, %%def_cindex
 22365                              <3>  mov16 cs, %1, cs, %2
 22366 00002FA9 8CC8                <4>  mov ax,%3
 22367 00002FAB 8ED8                <4>  mov ds,ax
 22368 00002FAD 8B1E[3D21]          <4>  mov bx,[%4]
 22369 00002FB1 8CC8                <4>  mov ax,%1
 22370 00002FB3 8ED8                <4>  mov ds,ax
 22371 00002FB5 891E[3B21]          <4>  mov [%2],bx
 22372                              <2> 
 22373                              <2>  fillrect __tray_x1, __tray_y1, __tray_x2, __tray_y2, __tray_color
 22374                              <3>  fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 22375                              <4>  stkopen 0x09
 22376 00002FB9 83EC09              <5>  sub word sp, %1
 22377 00002FBC 54                  <5>  push sp
 22378 00002FBD 5D                  <5>  pop bp
 22379 00002FBE 8CC8                <4>  mov ax,%1
 22380 00002FC0 8ED8                <4>  mov ds,ax
 22381 00002FC2 A1[181A]            <4>  mov ax,[%2]
 22382 00002FC5 894600              <4>  mov [bp+0],ax
 22383 00002FC8 8CC8                <4>  mov ax,%3
 22384 00002FCA 8ED8                <4>  mov ds,ax
 22385 00002FCC A1[1A1A]            <4>  mov ax,[%4]
 22386 00002FCF 894602              <4>  mov [bp+2],ax
 22387 00002FD2 8CC8                <4>  mov ax,%5
 22388 00002FD4 8ED8                <4>  mov ds,ax
 22389 00002FD6 A1[1C1A]            <4>  mov ax,[%6]
 22390 00002FD9 894604              <4>  mov [bp+4],ax
 22391 00002FDC 8CC8                <4>  mov ax,%7
 22392 00002FDE 8ED8                <4>  mov ds,ax
 22393 00002FE0 A1[1E1A]            <4>  mov ax,[%8]
 22394 00002FE3 894606              <4>  mov [bp+6],ax
 22395 00002FE6 8CC8                <4>  mov ax,%9
 22396 00002FE8 8ED8                <4>  mov ds,ax
 22397 00002FEA A0[B419]            <4>  mov al,[%10]
 22398 00002FED 884608              <4>  mov [bp+8],al
 22399 00002FF0 E8(961B)            <4>  call proc_fillrect
 22400                              <4>  stkclose 0x09
 22401 00002FF3 83C409              <5>  add word sp, %1
 22402                              <2>  drawlineh __tray_x1, __tray_y1, __tray_x2, __tray_bordercolor
 22403                              <3>  drawlineh cs, %1, cs, %2, cs, %3, cs, %4
 22404                              <4>  stkopen 0x07
 22405 00002FF6 83EC07              <5>  sub word sp, %1
 22406 00002FF9 54                  <5>  push sp
 22407 00002FFA 5D                  <5>  pop bp
 22408 00002FFB 8CC8                <4>  mov ax,%1
 22409 00002FFD 8ED8                <4>  mov ds,ax
 22410 00002FFF A1[181A]            <4>  mov ax,[%2]
 22411 00003002 894600              <4>  mov [bp+0],ax
 22412 00003005 8CC8                <4>  mov ax,%3
 22413 00003007 8ED8                <4>  mov ds,ax
 22414 00003009 A1[1A1A]            <4>  mov ax,[%4]
 22415 0000300C 894602              <4>  mov [bp+2],ax
 22416 0000300F 8CC8                <4>  mov ax,%5
 22417 00003011 8ED8                <4>  mov ds,ax
 22418 00003013 A1[1C1A]            <4>  mov ax,[%6]
 22419 00003016 894604              <4>  mov [bp+4],ax
 22420 00003019 8CC8                <4>  mov ax,%7
 22421 0000301B 8ED8                <4>  mov ds,ax
 22422 0000301D A0[B519]            <4>  mov al,[%8]
 22423 00003020 884606              <4>  mov [bp+6],al
 22424 00003023 E8(911A)            <4>  call proc_drawlineh
 22425                              <4>  stkclose 0x07
 22426 00003026 83C407              <5>  add word sp, %1
 22427                              <2>  drawlinev __tray_x1, __tray_y1, __tray_y2, __tray_bordercolor
 22428                              <3>  drawlinev cs, %1, cs, %2, cs, %3, cs, %4
 22429                              <4>  stkopen 0x07
 22430 00003029 83EC07              <5>  sub word sp, %1
 22431 0000302C 54                  <5>  push sp
 22432 0000302D 5D                  <5>  pop bp
 22433 0000302E 8CC8                <4>  mov ax,%1
 22434 00003030 8ED8                <4>  mov ds,ax
 22435 00003032 A1[181A]            <4>  mov ax,[%2]
 22436 00003035 894600              <4>  mov [bp+0],ax
 22437 00003038 8CC8                <4>  mov ax,%3
 22438 0000303A 8ED8                <4>  mov ds,ax
 22439 0000303C A1[1A1A]            <4>  mov ax,[%4]
 22440 0000303F 894602              <4>  mov [bp+2],ax
 22441 00003042 8CC8                <4>  mov ax,%5
 22442 00003044 8ED8                <4>  mov ds,ax
 22443 00003046 A1[1E1A]            <4>  mov ax,[%6]
 22444 00003049 894604              <4>  mov [bp+4],ax
 22445 0000304C 8CC8                <4>  mov ax,%7
 22446 0000304E 8ED8                <4>  mov ds,ax
 22447 00003050 A0[B519]            <4>  mov al,[%8]
 22448 00003053 884606              <4>  mov [bp+6],al
 22449 00003056 E8(C51A)            <4>  call proc_drawlinev
 22450                              <4>  stkclose 0x07
 22451 00003059 83C407              <5>  add word sp, %1
 22452                              <2>  drawlinev __tray_x2, __tray_y1, __tray_y2, __tray_bordercolor
 22453                              <3>  drawlinev cs, %1, cs, %2, cs, %3, cs, %4
 22454                              <4>  stkopen 0x07
 22455 0000305C 83EC07              <5>  sub word sp, %1
 22456 0000305F 54                  <5>  push sp
 22457 00003060 5D                  <5>  pop bp
 22458 00003061 8CC8                <4>  mov ax,%1
 22459 00003063 8ED8                <4>  mov ds,ax
 22460 00003065 A1[1C1A]            <4>  mov ax,[%2]
 22461 00003068 894600              <4>  mov [bp+0],ax
 22462 0000306B 8CC8                <4>  mov ax,%3
 22463 0000306D 8ED8                <4>  mov ds,ax
 22464 0000306F A1[1A1A]            <4>  mov ax,[%4]
 22465 00003072 894602              <4>  mov [bp+2],ax
 22466 00003075 8CC8                <4>  mov ax,%5
 22467 00003077 8ED8                <4>  mov ds,ax
 22468 00003079 A1[1E1A]            <4>  mov ax,[%6]
 22469 0000307C 894604              <4>  mov [bp+4],ax
 22470 0000307F 8CC8                <4>  mov ax,%7
 22471 00003081 8ED8                <4>  mov ds,ax
 22472 00003083 A0[B519]            <4>  mov al,[%8]
 22473 00003086 884606              <4>  mov [bp+6],al
 22474 00003089 E8(C51A)            <4>  call proc_drawlinev
 22475                              <4>  stkclose 0x07
 22476 0000308C 83C407              <5>  add word sp, %1
 22477                              <2> 
 22478                              <2>  mov16 __square_y, __tray_y1
 22479                              <3>  mov16 cs, %1, cs, %2
 22480 0000308F 8CC8                <4>  mov ax,%3
 22481 00003091 8ED8                <4>  mov ds,ax
 22482 00003093 8B1E[1A1A]          <4>  mov bx,[%4]
 22483 00003097 8CC8                <4>  mov ax,%1
 22484 00003099 8ED8                <4>  mov ds,ax
 22485 0000309B 891E[221A]          <4>  mov [%2],bx
 22486                              <2>  mov16 __square_y2, __square_y
 22487                              <3>  mov16 cs, %1, cs, %2
 22488 0000309F 8CC8                <4>  mov ax,%3
 22489 000030A1 8ED8                <4>  mov ds,ax
 22490 000030A3 8B1E[221A]          <4>  mov bx,[%4]
 22491 000030A7 8CC8                <4>  mov ax,%1
 22492 000030A9 8ED8                <4>  mov ds,ax
 22493 000030AB 891E[261A]          <4>  mov [%2],bx
 22494                              <2>  add16 __square_y2, __square_h
 22495                              <3>  add16 cs, %1, cs, %2
 22496 000030AF 8CC8                <4>  mov ax,%3
 22497 000030B1 8ED8                <4>  mov ds,ax
 22498 000030B3 8B1E[2A1A]          <4>  mov bx,[%4]
 22499 000030B7 8CC8                <4>  mov ax,%1
 22500 000030B9 8ED8                <4>  mov ds,ax
 22501 000030BB 011E[261A]          <4>  add [%2],bx
 22502                              <2> 
 22503 000030BF B100                <2>  mov cl,0
 22504                              <2>  %%l1:
 22505 000030C1 51                  <2>  push cx
 22506                              <2>  int16toreg __square_ycount, dx
 22507                              <3>  int16toreg cs, %1, %2
 22508 000030C2 68[301A]            <4>  push %2
 22509 000030C5 0E                  <4>  push %1
 22510 000030C6 1F                  <4>  pop ds
 22511 000030C7 5E                  <4>  pop si
 22512 000030C8 8B14                <4>  mov word %3,[si]
 22513 000030CA 59                  <2>  pop cx
 22514 000030CB 38D1                <2>  cmp cl,dl
 22515 000030CD 0F833B01            <2>  jae %%l2
 22516 000030D1 51                  <2>  push cx
 22517                              <2> 
 22518                              <2>  mov16 __square_x, __tray_x1
 22519                              <3>  mov16 cs, %1, cs, %2
 22520 000030D2 8CC8                <4>  mov ax,%3
 22521 000030D4 8ED8                <4>  mov ds,ax
 22522 000030D6 8B1E[181A]          <4>  mov bx,[%4]
 22523 000030DA 8CC8                <4>  mov ax,%1
 22524 000030DC 8ED8                <4>  mov ds,ax
 22525 000030DE 891E[201A]          <4>  mov [%2],bx
 22526                              <2>  mov16 __square_x2, __square_x
 22527                              <3>  mov16 cs, %1, cs, %2
 22528 000030E2 8CC8                <4>  mov ax,%3
 22529 000030E4 8ED8                <4>  mov ds,ax
 22530 000030E6 8B1E[201A]          <4>  mov bx,[%4]
 22531 000030EA 8CC8                <4>  mov ax,%1
 22532 000030EC 8ED8                <4>  mov ds,ax
 22533 000030EE 891E[241A]          <4>  mov [%2],bx
 22534                              <2>  add16 __square_x2, __square_w
 22535                              <3>  add16 cs, %1, cs, %2
 22536 000030F2 8CC8                <4>  mov ax,%3
 22537 000030F4 8ED8                <4>  mov ds,ax
 22538 000030F6 8B1E[281A]          <4>  mov bx,[%4]
 22539 000030FA 8CC8                <4>  mov ax,%1
 22540 000030FC 8ED8                <4>  mov ds,ax
 22541 000030FE 011E[241A]          <4>  add [%2],bx
 22542                              <2> 
 22543 00003102 B100                <2>  mov cl,0
 22544                              <2>  %%l1.1:
 22545 00003104 51                  <2>  push cx
 22546                              <2>  int16toreg __square_xcount, dx
 22547                              <3>  int16toreg cs, %1, %2
 22548 00003105 68[2E1A]            <4>  push %2
 22549 00003108 0E                  <4>  push %1
 22550 00003109 1F                  <4>  pop ds
 22551 0000310A 5E                  <4>  pop si
 22552 0000310B 8B14                <4>  mov word %3,[si]
 22553 0000310D 59                  <2>  pop cx
 22554 0000310E 38D1                <2>  cmp cl,dl
 22555 00003110 0F83CA00            <2>  jae %%l1.2
 22556 00003114 51                  <2>  push cx
 22557                              <2> 
 22558                              <2>  int16toreg __square_xcount, ax
 22559                              <3>  int16toreg cs, %1, %2
 22560 00003115 68[2E1A]            <4>  push %2
 22561 00003118 0E                  <4>  push %1
 22562 00003119 1F                  <4>  pop ds
 22563 0000311A 5E                  <4>  pop si
 22564 0000311B 8B04                <4>  mov word %3,[si]
 22565 0000311D 59                  <2>  pop cx
 22566 0000311E 5B                  <2>  pop bx
 22567 0000311F 53                  <2>  push bx
 22568 00003120 51                  <2>  push cx
 22569                              <2> 
 22570 00003121 F7E3                <2>  mul bx
 22571 00003123 01C8                <2>  add ax,cx
 22572                              <2> 
 22573                              <2>  vlodsb __squaremap, ax, cl
 22574                              <3>  vlodsb cs, %1, %2, %3
 22575 00003125 0E                  <4>  push %1
 22576 00003126 1F                  <4>  pop ds
 22577 00003127 BE[F019]            <4>  mov si,%2
 22578 0000312A 01C6                <4>  add si,%3
 22579 0000312C 8A0C                <4>  mov byte %4,[si]
 22580 0000312E 80F900              <2>  cmp cl,0
 22581 00003131 0F848300            <2>  jz %%painted
 22582                              <2>  int16toreg %%cindex, bx
 22583                              <3>  int16toreg cs, %1, %2
 22584 00003135 68[3B21]            <4>  push %2
 22585 00003138 0E                  <4>  push %1
 22586 00003139 1F                  <4>  pop ds
 22587 0000313A 5E                  <4>  pop si
 22588 0000313B 8B1C                <4>  mov word %3,[si]
 22589                              <2>  fillrect __square_x, __square_y, __square_x2, __square_y2, __square_ycolor+bx
 22590                              <3>  fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 22591                              <4>  stkopen 0x09
 22592 0000313D 83EC09              <5>  sub word sp, %1
 22593 00003140 54                  <5>  push sp
 22594 00003141 5D                  <5>  pop bp
 22595 00003142 8CC8                <4>  mov ax,%1
 22596 00003144 8ED8                <4>  mov ds,ax
 22597 00003146 A1[201A]            <4>  mov ax,[%2]
 22598 00003149 894600              <4>  mov [bp+0],ax
 22599 0000314C 8CC8                <4>  mov ax,%3
 22600 0000314E 8ED8                <4>  mov ds,ax
 22601 00003150 A1[221A]            <4>  mov ax,[%4]
 22602 00003153 894602              <4>  mov [bp+2],ax
 22603 00003156 8CC8                <4>  mov ax,%5
 22604 00003158 8ED8                <4>  mov ds,ax
 22605 0000315A A1[241A]            <4>  mov ax,[%6]
 22606 0000315D 894604              <4>  mov [bp+4],ax
 22607 00003160 8CC8                <4>  mov ax,%7
 22608 00003162 8ED8                <4>  mov ds,ax
 22609 00003164 A1[261A]            <4>  mov ax,[%8]
 22610 00003167 894606              <4>  mov [bp+6],ax
 22611 0000316A 8CC8                <4>  mov ax,%9
 22612 0000316C 8ED8                <4>  mov ds,ax
 22613 0000316E 8A87[B719]          <4>  mov al,[%10]
 22614 00003172 884608              <4>  mov [bp+8],al
 22615 00003175 E8(961B)            <4>  call proc_fillrect
 22616                              <4>  stkclose 0x09
 22617 00003178 83C409              <5>  add word sp, %1
 22618                              <2>  drawrect __square_x, __square_y, __square_x2, __square_y2, __square_bordercolor
 22619                              <3>  drawrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 22620                              <4>  stkopen 0x09
 22621 0000317B 83EC09              <5>  sub word sp, %1
 22622 0000317E 54                  <5>  push sp
 22623 0000317F 5D                  <5>  pop bp
 22624 00003180 8CC8                <4>  mov ax,%1
 22625 00003182 8ED8                <4>  mov ds,ax
 22626 00003184 A1[201A]            <4>  mov ax,[%2]
 22627 00003187 894600              <4>  mov [bp+0],ax
 22628 0000318A 8CC8                <4>  mov ax,%3
 22629 0000318C 8ED8                <4>  mov ds,ax
 22630 0000318E A1[221A]            <4>  mov ax,[%4]
 22631 00003191 894602              <4>  mov [bp+2],ax
 22632 00003194 8CC8                <4>  mov ax,%5
 22633 00003196 8ED8                <4>  mov ds,ax
 22634 00003198 A1[241A]            <4>  mov ax,[%6]
 22635 0000319B 894604              <4>  mov [bp+4],ax
 22636 0000319E 8CC8                <4>  mov ax,%7
 22637 000031A0 8ED8                <4>  mov ds,ax
 22638 000031A2 A1[261A]            <4>  mov ax,[%8]
 22639 000031A5 894606              <4>  mov [bp+6],ax
 22640 000031A8 8CC8                <4>  mov ax,%9
 22641 000031AA 8ED8                <4>  mov ds,ax
 22642 000031AC A0[B619]            <4>  mov al,[%10]
 22643 000031AF 884608              <4>  mov [bp+8],al
 22644 000031B2 E8(F91A)            <4>  call proc_drawrect
 22645                              <4>  stkclose 0x09
 22646 000031B5 83C409              <5>  add word sp, %1
 22647                              <2>  %%painted:
 22648                              <2> 
 22649                              <2>  add16 __square_x, __square_w
 22650                              <3>  add16 cs, %1, cs, %2
 22651 000031B8 8CC8                <4>  mov ax,%3
 22652 000031BA 8ED8                <4>  mov ds,ax
 22653 000031BC 8B1E[281A]          <4>  mov bx,[%4]
 22654 000031C0 8CC8                <4>  mov ax,%1
 22655 000031C2 8ED8                <4>  mov ds,ax
 22656 000031C4 011E[201A]          <4>  add [%2],bx
 22657                              <2>  add16 __square_x2, __square_w
 22658                              <3>  add16 cs, %1, cs, %2
 22659 000031C8 8CC8                <4>  mov ax,%3
 22660 000031CA 8ED8                <4>  mov ds,ax
 22661 000031CC 8B1E[281A]          <4>  mov bx,[%4]
 22662 000031D0 8CC8                <4>  mov ax,%1
 22663 000031D2 8ED8                <4>  mov ds,ax
 22664 000031D4 011E[241A]          <4>  add [%2],bx
 22665                              <2> 
 22666 000031D8 59                  <2>  pop cx
 22667 000031D9 FEC1                <2>  inc cl
 22668 000031DB E926FF              <2>  jmp %%l1.1
 22669                              <2>  %%l1.2:
 22670                              <2> 
 22671                              <2>  add16 __square_y, __square_h
 22672                              <3>  add16 cs, %1, cs, %2
 22673 000031DE 8CC8                <4>  mov ax,%3
 22674 000031E0 8ED8                <4>  mov ds,ax
 22675 000031E2 8B1E[2A1A]          <4>  mov bx,[%4]
 22676 000031E6 8CC8                <4>  mov ax,%1
 22677 000031E8 8ED8                <4>  mov ds,ax
 22678 000031EA 011E[221A]          <4>  add [%2],bx
 22679                              <2>  add16 __square_y2, __square_h
 22680                              <3>  add16 cs, %1, cs, %2
 22681 000031EE 8CC8                <4>  mov ax,%3
 22682 000031F0 8ED8                <4>  mov ds,ax
 22683 000031F2 8B1E[2A1A]          <4>  mov bx,[%4]
 22684 000031F6 8CC8                <4>  mov ax,%1
 22685 000031F8 8ED8                <4>  mov ds,ax
 22686 000031FA 011E[261A]          <4>  add [%2],bx
 22687                              <2>  inc16 %%cindex
 22688                              <3>  inc16 cs, %1
 22689 000031FE 8CC8                <4>  mov ax,%1
 22690 00003200 8ED8                <4>  mov ds,ax
 22691 00003202 FF06[3B21]          <4>  inc word [%2]
 22692                              <2> 
 22693 00003206 59                  <2>  pop cx
 22694 00003207 FEC1                <2>  inc cl
 22695 00003209 E9B5FE              <2>  jmp %%l1
 22696                              <2>  %%l2:
 22697                              <1>  gui_paintball
 22698                              <2> section .data
 22699 0000213F 0000                <2>  %%x: dw 0
 22700 00002141 0000                <2>  %%y: dw 0
 22701 00002143 0000                <2>  %%r: dw 0
 22702                              <2> section .text
 22703                              <2>  fltoint16 __ball_x, %%x
 22704                              <3>  fltoint16 cs, %1, cs, %2
 22705                              <4>  stkopen 0x06
 22706 0000320C 83EC06              <5>  sub word sp, %1
 22707 0000320F 54                  <5>  push sp
 22708 00003210 5D                  <5>  pop bp
 22709 00003211 8CC8                <4>  mov ax,%1
 22710 00003213 8ED8                <4>  mov ds,ax
 22711 00003215 A1[481A]            <4>  mov ax,[%2+2]
 22712 00003218 894600              <4>  mov [bp+0],ax
 22713 0000321B A1[461A]            <4>  mov ax,[%2]
 22714 0000321E 894602              <4>  mov [bp+2],ax
 22715 00003221 E8(C305)            <4>  call proc_fltoint16
 22716 00003224 89E0                <4>  mov ax,sp
 22717 00003226 89C5                <4>  mov bp,ax
 22718 00003228 8CC8                <4>  mov ax,%3
 22719 0000322A 8ED8                <4>  mov ds,ax
 22720 0000322C 8B4604              <4>  mov ax,[bp+4]
 22721 0000322F A3[3F21]            <4>  mov [%4],ax
 22722                              <4>  stkclose 0x06
 22723 00003232 83C406              <5>  add word sp, %1
 22724                              <2>  fltoint16 __ball_y, %%y
 22725                              <3>  fltoint16 cs, %1, cs, %2
 22726                              <4>  stkopen 0x06
 22727 00003235 83EC06              <5>  sub word sp, %1
 22728 00003238 54                  <5>  push sp
 22729 00003239 5D                  <5>  pop bp
 22730 0000323A 8CC8                <4>  mov ax,%1
 22731 0000323C 8ED8                <4>  mov ds,ax
 22732 0000323E A1[4C1A]            <4>  mov ax,[%2+2]
 22733 00003241 894600              <4>  mov [bp+0],ax
 22734 00003244 A1[4A1A]            <4>  mov ax,[%2]
 22735 00003247 894602              <4>  mov [bp+2],ax
 22736 0000324A E8(C305)            <4>  call proc_fltoint16
 22737 0000324D 89E0                <4>  mov ax,sp
 22738 0000324F 89C5                <4>  mov bp,ax
 22739 00003251 8CC8                <4>  mov ax,%3
 22740 00003253 8ED8                <4>  mov ds,ax
 22741 00003255 8B4604              <4>  mov ax,[bp+4]
 22742 00003258 A3[4121]            <4>  mov [%4],ax
 22743                              <4>  stkclose 0x06
 22744 0000325B 83C406              <5>  add word sp, %1
 22745                              <2>  fltoint16 __ball_radial, %%r
 22746                              <3>  fltoint16 cs, %1, cs, %2
 22747                              <4>  stkopen 0x06
 22748 0000325E 83EC06              <5>  sub word sp, %1
 22749 00003261 54                  <5>  push sp
 22750 00003262 5D                  <5>  pop bp
 22751 00003263 8CC8                <4>  mov ax,%1
 22752 00003265 8ED8                <4>  mov ds,ax
 22753 00003267 A1[501A]            <4>  mov ax,[%2+2]
 22754 0000326A 894600              <4>  mov [bp+0],ax
 22755 0000326D A1[4E1A]            <4>  mov ax,[%2]
 22756 00003270 894602              <4>  mov [bp+2],ax
 22757 00003273 E8(C305)            <4>  call proc_fltoint16
 22758 00003276 89E0                <4>  mov ax,sp
 22759 00003278 89C5                <4>  mov bp,ax
 22760 0000327A 8CC8                <4>  mov ax,%3
 22761 0000327C 8ED8                <4>  mov ds,ax
 22762 0000327E 8B4604              <4>  mov ax,[bp+4]
 22763 00003281 A3[4321]            <4>  mov [%4],ax
 22764                              <4>  stkclose 0x06
 22765 00003284 83C406              <5>  add word sp, %1
 22766                              <2>  fillarc %%x, %%y, %%r, %%r, __ball_color
 22767                              <3>  fillarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 22768                              <4>  drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 1
 22769                              <5>  stkopen 0x0A
 22770 00003287 83EC0A              <6>  sub word sp, %1
 22771 0000328A 54                  <6>  push sp
 22772 0000328B 5D                  <6>  pop bp
 22773 0000328C 8CC8                <5>  mov ax,%1
 22774 0000328E 8ED8                <5>  mov ds,ax
 22775 00003290 A1[3F21]            <5>  mov ax,[%2]
 22776 00003293 894600              <5>  mov [bp+0],ax
 22777 00003296 8CC8                <5>  mov ax,%3
 22778 00003298 8ED8                <5>  mov ds,ax
 22779 0000329A A1[4121]            <5>  mov ax,[%4]
 22780 0000329D 894602              <5>  mov [bp+2],ax
 22781 000032A0 8CC8                <5>  mov ax,%5
 22782 000032A2 8ED8                <5>  mov ds,ax
 22783 000032A4 A1[4321]            <5>  mov ax,[%6]
 22784 000032A7 894604              <5>  mov [bp+4],ax
 22785 000032AA 8CC8                <5>  mov ax,%7
 22786 000032AC 8ED8                <5>  mov ds,ax
 22787 000032AE A1[4321]            <5>  mov ax,[%8]
 22788 000032B1 894606              <5>  mov [bp+6],ax
 22789 000032B4 8CC8                <5>  mov ax,%9
 22790 000032B6 8ED8                <5>  mov ds,ax
 22791 000032B8 A0[B219]            <5>  mov al,[%10]
 22792 000032BB 884608              <5>  mov byte [bp+8],al
 22793 000032BE C6460901            <5>  mov byte [bp+9],%11
 22794 000032C2 E8(D21B)            <5>  call proc_drawarc
 22795                              <5>  stkclose 0x0A
 22796 000032C5 83C40A              <6>  add word sp, %1
 22797                              <2>  drawarc %%x, %%y, %%r, %%r, __ball_bordercolor
 22798                              <3>  drawarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 22799                              <4>  drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 0
 22800                              <5>  stkopen 0x0A
 22801 000032C8 83EC0A              <6>  sub word sp, %1
 22802 000032CB 54                  <6>  push sp
 22803 000032CC 5D                  <6>  pop bp
 22804 000032CD 8CC8                <5>  mov ax,%1
 22805 000032CF 8ED8                <5>  mov ds,ax
 22806 000032D1 A1[3F21]            <5>  mov ax,[%2]
 22807 000032D4 894600              <5>  mov [bp+0],ax
 22808 000032D7 8CC8                <5>  mov ax,%3
 22809 000032D9 8ED8                <5>  mov ds,ax
 22810 000032DB A1[4121]            <5>  mov ax,[%4]
 22811 000032DE 894602              <5>  mov [bp+2],ax
 22812 000032E1 8CC8                <5>  mov ax,%5
 22813 000032E3 8ED8                <5>  mov ds,ax
 22814 000032E5 A1[4321]            <5>  mov ax,[%6]
 22815 000032E8 894604              <5>  mov [bp+4],ax
 22816 000032EB 8CC8                <5>  mov ax,%7
 22817 000032ED 8ED8                <5>  mov ds,ax
 22818 000032EF A1[4321]            <5>  mov ax,[%8]
 22819 000032F2 894606              <5>  mov [bp+6],ax
 22820 000032F5 8CC8                <5>  mov ax,%9
 22821 000032F7 8ED8                <5>  mov ds,ax
 22822 000032F9 A0[B319]            <5>  mov al,[%10]
 22823 000032FC 884608              <5>  mov byte [bp+8],al
 22824 000032FF C6460900            <5>  mov byte [bp+9],%11
 22825 00003303 E8(D21B)            <5>  call proc_drawarc
 22826                              <5>  stkclose 0x0A
 22827 00003306 83C40A              <6>  add word sp, %1
 22828                              <1>  gui_paintracket
 22829                              <2> section .data
 22830 00002145 0000                <2>  %%x2: dw 0
 22831 00002147 0000                <2>  %%y2: dw 0
 22832                              <2> section .text
 22833                              <2>  mov16 %%x2, __racket_x
 22834                              <3>  mov16 cs, %1, cs, %2
 22835 00003309 8CC8                <4>  mov ax,%3
 22836 0000330B 8ED8                <4>  mov ds,ax
 22837 0000330D 8B1E[841F]          <4>  mov bx,[%4]
 22838 00003311 8CC8                <4>  mov ax,%1
 22839 00003313 8ED8                <4>  mov ds,ax
 22840 00003315 891E[4521]          <4>  mov [%2],bx
 22841                              <2>  mov16 %%y2, __racket_y
 22842                              <3>  mov16 cs, %1, cs, %2
 22843 00003319 8CC8                <4>  mov ax,%3
 22844 0000331B 8ED8                <4>  mov ds,ax
 22845 0000331D 8B1E[861F]          <4>  mov bx,[%4]
 22846 00003321 8CC8                <4>  mov ax,%1
 22847 00003323 8ED8                <4>  mov ds,ax
 22848 00003325 891E[4721]          <4>  mov [%2],bx
 22849                              <2>  add16 %%x2, __racket_w
 22850                              <3>  add16 cs, %1, cs, %2
 22851 00003329 8CC8                <4>  mov ax,%3
 22852 0000332B 8ED8                <4>  mov ds,ax
 22853 0000332D 8B1E[881F]          <4>  mov bx,[%4]
 22854 00003331 8CC8                <4>  mov ax,%1
 22855 00003333 8ED8                <4>  mov ds,ax
 22856 00003335 011E[4521]          <4>  add [%2],bx
 22857                              <2>  add16 %%y2, __racket_h
 22858                              <3>  add16 cs, %1, cs, %2
 22859 00003339 8CC8                <4>  mov ax,%3
 22860 0000333B 8ED8                <4>  mov ds,ax
 22861 0000333D 8B1E[8A1F]          <4>  mov bx,[%4]
 22862 00003341 8CC8                <4>  mov ax,%1
 22863 00003343 8ED8                <4>  mov ds,ax
 22864 00003345 011E[4721]          <4>  add [%2],bx
 22865                              <2>  fillrect __racket_x, __racket_y, %%x2, %%y2, __racket_color
 22866                              <3>  fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 22867                              <4>  stkopen 0x09
 22868 00003349 83EC09              <5>  sub word sp, %1
 22869 0000334C 54                  <5>  push sp
 22870 0000334D 5D                  <5>  pop bp
 22871 0000334E 8CC8                <4>  mov ax,%1
 22872 00003350 8ED8                <4>  mov ds,ax
 22873 00003352 A1[841F]            <4>  mov ax,[%2]
 22874 00003355 894600              <4>  mov [bp+0],ax
 22875 00003358 8CC8                <4>  mov ax,%3
 22876 0000335A 8ED8                <4>  mov ds,ax
 22877 0000335C A1[861F]            <4>  mov ax,[%4]
 22878 0000335F 894602              <4>  mov [bp+2],ax
 22879 00003362 8CC8                <4>  mov ax,%5
 22880 00003364 8ED8                <4>  mov ds,ax
 22881 00003366 A1[4521]            <4>  mov ax,[%6]
 22882 00003369 894604              <4>  mov [bp+4],ax
 22883 0000336C 8CC8                <4>  mov ax,%7
 22884 0000336E 8ED8                <4>  mov ds,ax
 22885 00003370 A1[4721]            <4>  mov ax,[%8]
 22886 00003373 894606              <4>  mov [bp+6],ax
 22887 00003376 8CC8                <4>  mov ax,%9
 22888 00003378 8ED8                <4>  mov ds,ax
 22889 0000337A A0[BB19]            <4>  mov al,[%10]
 22890 0000337D 884608              <4>  mov [bp+8],al
 22891 00003380 E8(961B)            <4>  call proc_fillrect
 22892                              <4>  stkclose 0x09
 22893 00003383 83C409              <5>  add word sp, %1
 22894                              <2>  drawrect __racket_x, __racket_y, %%x2, %%y2, __racket_bordercolor
 22895                              <3>  drawrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 22896                              <4>  stkopen 0x09
 22897 00003386 83EC09              <5>  sub word sp, %1
 22898 00003389 54                  <5>  push sp
 22899 0000338A 5D                  <5>  pop bp
 22900 0000338B 8CC8                <4>  mov ax,%1
 22901 0000338D 8ED8                <4>  mov ds,ax
 22902 0000338F A1[841F]            <4>  mov ax,[%2]
 22903 00003392 894600              <4>  mov [bp+0],ax
 22904 00003395 8CC8                <4>  mov ax,%3
 22905 00003397 8ED8                <4>  mov ds,ax
 22906 00003399 A1[861F]            <4>  mov ax,[%4]
 22907 0000339C 894602              <4>  mov [bp+2],ax
 22908 0000339F 8CC8                <4>  mov ax,%5
 22909 000033A1 8ED8                <4>  mov ds,ax
 22910 000033A3 A1[4521]            <4>  mov ax,[%6]
 22911 000033A6 894604              <4>  mov [bp+4],ax
 22912 000033A9 8CC8                <4>  mov ax,%7
 22913 000033AB 8ED8                <4>  mov ds,ax
 22914 000033AD A1[4721]            <4>  mov ax,[%8]
 22915 000033B0 894606              <4>  mov [bp+6],ax
 22916 000033B3 8CC8                <4>  mov ax,%9
 22917 000033B5 8ED8                <4>  mov ds,ax
 22918 000033B7 A0[BC19]            <4>  mov al,[%10]
 22919 000033BA 884608              <4>  mov [bp+8],al
 22920 000033BD E8(F91A)            <4>  call proc_drawrect
 22921                              <4>  stkclose 0x09
 22922 000033C0 83C409              <5>  add word sp, %1
 22923                              <1>  repaint
 22924 000033C3 E8(2600)            <2>  call proc_repaint
 22925                              <1> 
 22926                              <1>  cmp16 __show_init_message, __ZERO, cl
 22927                              <2>  cmp16 cs, %1, cs, %2, %3
 22928 000033C6 8CC8                <3>  mov ax,%1
 22929 000033C8 8ED8                <3>  mov ds,ax
 22930 000033CA 8B1E[941F]          <3>  mov bx,[%2]
 22931 000033CE 8CC8                <3>  mov ax,%3
 22932 000033D0 8ED8                <3>  mov ds,ax
 22933 000033D2 8B0E[AE19]          <3>  mov cx,[%4]
 22934                              <3> 
 22935 000033D6 39CB                <3>  cmp bx,cx
 22936 000033D8 7F06                <3>  jg %%above
 22937 000033DA 7C08                <3>  jl %%below
 22938 000033DC B100                <3>  mov byte %5, 0
 22939 000033DE EB06                <3>  jmp %%endcmp
 22940                              <3>  %%above:
 22941 000033E0 B101                <3>  mov byte %5, 1
 22942 000033E2 EB02                <3>  jmp %%endcmp
 22943                              <3>  %%below:
 22944 000033E4 B1FF                <3>  mov byte %5, -1
 22945                              <3>  %%endcmp:
 22946 000033E6 80F900              <1>  cmp cl,0
 22947 000033E9 7425                <1>  je %%init_message_painted
 22948                              <1>  gui_show_message 'Pressione alguma tecla..', 8, 13, __message_default_color
 22949                              <2>  section .data
 22950 00002149 5072657373696F6E65- <2>  %%str: db %1,0
 22951 00002152 20616C67756D612074- <2>
 22952 0000215B 65636C612E2E00      <2>
 22953                              <2> section .text
 22954 000033EB 8CC8                <2>  mov ax,cs
 22955 000033ED 8ED8                <2>  mov ds,ax
 22956 000033EF A0[BD19]            <2>  mov al,[%4]
 22957                              <2>  __drawstring %%str, %2, %3, al
 22958                              <3>  __drawstring cs, %1, %2, %3, %4
 22959                              <4>  stkopen 0x07
 22960 000033F2 83EC07              <5>  sub word sp, %1
 22961 000033F5 54                  <5>  push sp
 22962 000033F6 5D                  <5>  pop bp
 22963 000033F7 8C4E00              <4>  mov word [bp+0],%1
 22964 000033FA C74602[4921]        <4>  mov word [bp+2],%2
 22965 000033FF C6460408            <4>  mov byte [bp+4],%3
 22966 00003403 C646050D            <4>  mov byte [bp+5],%4
 22967 00003407 884606              <4>  mov byte [bp+6],%5
 22968 0000340A E8(681A)            <4>  call proc_drawstring
 22969                              <4>  stkclose 0x07
 22970 0000340D 83C407              <5>  add word sp, %1
 22971                              <1>  %%init_message_painted:
 22972                              <1> 
 22973                              <1>  cmp16 __show_pause_message, __ZERO, cl
 22974                              <2>  cmp16 cs, %1, cs, %2, %3
 22975 00003410 8CC8                <3>  mov ax,%1
 22976 00003412 8ED8                <3>  mov ds,ax
 22977 00003414 8B1E[9A1F]          <3>  mov bx,[%2]
 22978 00003418 8CC8                <3>  mov ax,%3
 22979 0000341A 8ED8                <3>  mov ds,ax
 22980 0000341C 8B0E[AE19]          <3>  mov cx,[%4]
 22981                              <3> 
 22982 00003420 39CB                <3>  cmp bx,cx
 22983 00003422 7F06                <3>  jg %%above
 22984 00003424 7C08                <3>  jl %%below
 22985 00003426 B100                <3>  mov byte %5, 0
 22986 00003428 EB06                <3>  jmp %%endcmp
 22987                              <3>  %%above:
 22988 0000342A B101                <3>  mov byte %5, 1
 22989 0000342C EB02                <3>  jmp %%endcmp
 22990                              <3>  %%below:
 22991 0000342E B1FF                <3>  mov byte %5, -1
 22992                              <3>  %%endcmp:
 22993 00003430 80F900              <1>  cmp cl,0
 22994 00003433 7425                <1>  je %%pause_message_painted
 22995                              <1>  gui_show_message 'Pausa...', 16, 14, __message_default_color
 22996                              <2>  section .data
 22997 00002162 50617573612E2E2E00  <2>  %%str: db %1,0
 22998                              <2> section .text
 22999 00003435 8CC8                <2>  mov ax,cs
 23000 00003437 8ED8                <2>  mov ds,ax
 23001 00003439 A0[BD19]            <2>  mov al,[%4]
 23002                              <2>  __drawstring %%str, %2, %3, al
 23003                              <3>  __drawstring cs, %1, %2, %3, %4
 23004                              <4>  stkopen 0x07
 23005 0000343C 83EC07              <5>  sub word sp, %1
 23006 0000343F 54                  <5>  push sp
 23007 00003440 5D                  <5>  pop bp
 23008 00003441 8C4E00              <4>  mov word [bp+0],%1
 23009 00003444 C74602[6221]        <4>  mov word [bp+2],%2
 23010 00003449 C6460410            <4>  mov byte [bp+4],%3
 23011 0000344D C646050E            <4>  mov byte [bp+5],%4
 23012 00003451 884606              <4>  mov byte [bp+6],%5
 23013 00003454 E8(681A)            <4>  call proc_drawstring
 23014                              <4>  stkclose 0x07
 23015 00003457 83C407              <5>  add word sp, %1
 23016                              <1>  %%pause_message_painted:
 23017                              <1> 
 23018                              <1>  cmp16 __show_win_message, __ZERO, cl
 23019                              <2>  cmp16 cs, %1, cs, %2, %3
 23020 0000345A 8CC8                <3>  mov ax,%1
 23021 0000345C 8ED8                <3>  mov ds,ax
 23022 0000345E 8B1E[961F]          <3>  mov bx,[%2]
 23023 00003462 8CC8                <3>  mov ax,%3
 23024 00003464 8ED8                <3>  mov ds,ax
 23025 00003466 8B0E[AE19]          <3>  mov cx,[%4]
 23026                              <3> 
 23027 0000346A 39CB                <3>  cmp bx,cx
 23028 0000346C 7F06                <3>  jg %%above
 23029 0000346E 7C08                <3>  jl %%below
 23030 00003470 B100                <3>  mov byte %5, 0
 23031 00003472 EB06                <3>  jmp %%endcmp
 23032                              <3>  %%above:
 23033 00003474 B101                <3>  mov byte %5, 1
 23034 00003476 EB02                <3>  jmp %%endcmp
 23035                              <3>  %%below:
 23036 00003478 B1FF                <3>  mov byte %5, -1
 23037                              <3>  %%endcmp:
 23038 0000347A 80F900              <1>  cmp cl,0
 23039 0000347D 744A                <1>  je %%win_message_painted
 23040                              <1>  gui_show_message 'Ganhou...', 12, 13, __message_win_color
 23041                              <2>  section .data
 23042 0000216B 47616E686F752E2E2E- <2>  %%str: db %1,0
 23043 00002174 00                  <2>
 23044                              <2> section .text
 23045 0000347F 8CC8                <2>  mov ax,cs
 23046 00003481 8ED8                <2>  mov ds,ax
 23047 00003483 A0[BE19]            <2>  mov al,[%4]
 23048                              <2>  __drawstring %%str, %2, %3, al
 23049                              <3>  __drawstring cs, %1, %2, %3, %4
 23050                              <4>  stkopen 0x07
 23051 00003486 83EC07              <5>  sub word sp, %1
 23052 00003489 54                  <5>  push sp
 23053 0000348A 5D                  <5>  pop bp
 23054 0000348B 8C4E00              <4>  mov word [bp+0],%1
 23055 0000348E C74602[6B21]        <4>  mov word [bp+2],%2
 23056 00003493 C646040C            <4>  mov byte [bp+4],%3
 23057 00003497 C646050D            <4>  mov byte [bp+5],%4
 23058 0000349B 884606              <4>  mov byte [bp+6],%5
 23059 0000349E E8(681A)            <4>  call proc_drawstring
 23060                              <4>  stkclose 0x07
 23061 000034A1 83C407              <5>  add word sp, %1
 23062                              <1>  gui_show_message 'Parabens !!!', 12, 14, __message_default_color
 23063                              <2>  section .data
 23064 00002175 5061726162656E7320- <2>  %%str: db %1,0
 23065 0000217E 21212100            <2>
 23066                              <2> section .text
 23067 000034A4 8CC8                <2>  mov ax,cs
 23068 000034A6 8ED8                <2>  mov ds,ax
 23069 000034A8 A0[BD19]            <2>  mov al,[%4]
 23070                              <2>  __drawstring %%str, %2, %3, al
 23071                              <3>  __drawstring cs, %1, %2, %3, %4
 23072                              <4>  stkopen 0x07
 23073 000034AB 83EC07              <5>  sub word sp, %1
 23074 000034AE 54                  <5>  push sp
 23075 000034AF 5D                  <5>  pop bp
 23076 000034B0 8C4E00              <4>  mov word [bp+0],%1
 23077 000034B3 C74602[7521]        <4>  mov word [bp+2],%2
 23078 000034B8 C646040C            <4>  mov byte [bp+4],%3
 23079 000034BC C646050E            <4>  mov byte [bp+5],%4
 23080 000034C0 884606              <4>  mov byte [bp+6],%5
 23081 000034C3 E8(681A)            <4>  call proc_drawstring
 23082                              <4>  stkclose 0x07
 23083 000034C6 83C407              <5>  add word sp, %1
 23084                              <1>  %%win_message_painted:
 23085                              <1> 
 23086                              <1>  cmp16 __show_lose_message, __ZERO, cl
 23087                              <2>  cmp16 cs, %1, cs, %2, %3
 23088 000034C9 8CC8                <3>  mov ax,%1
 23089 000034CB 8ED8                <3>  mov ds,ax
 23090 000034CD 8B1E[981F]          <3>  mov bx,[%2]
 23091 000034D1 8CC8                <3>  mov ax,%3
 23092 000034D3 8ED8                <3>  mov ds,ax
 23093 000034D5 8B0E[AE19]          <3>  mov cx,[%4]
 23094                              <3> 
 23095 000034D9 39CB                <3>  cmp bx,cx
 23096 000034DB 7F06                <3>  jg %%above
 23097 000034DD 7C08                <3>  jl %%below
 23098 000034DF B100                <3>  mov byte %5, 0
 23099 000034E1 EB06                <3>  jmp %%endcmp
 23100                              <3>  %%above:
 23101 000034E3 B101                <3>  mov byte %5, 1
 23102 000034E5 EB02                <3>  jmp %%endcmp
 23103                              <3>  %%below:
 23104 000034E7 B1FF                <3>  mov byte %5, -1
 23105                              <3>  %%endcmp:
 23106 000034E9 80F900              <1>  cmp cl,0
 23107 000034EC 744A                <1>  je %%lose_message_painted
 23108                              <1>  gui_show_message 'Perdeu...', 11, 13, __message_lose_color
 23109                              <2>  section .data
 23110 00002182 5065726465752E2E2E- <2>  %%str: db %1,0
 23111 0000218B 00                  <2>
 23112                              <2> section .text
 23113 000034EE 8CC8                <2>  mov ax,cs
 23114 000034F0 8ED8                <2>  mov ds,ax
 23115 000034F2 A0[BF19]            <2>  mov al,[%4]
 23116                              <2>  __drawstring %%str, %2, %3, al
 23117                              <3>  __drawstring cs, %1, %2, %3, %4
 23118                              <4>  stkopen 0x07
 23119 000034F5 83EC07              <5>  sub word sp, %1
 23120 000034F8 54                  <5>  push sp
 23121 000034F9 5D                  <5>  pop bp
 23122 000034FA 8C4E00              <4>  mov word [bp+0],%1
 23123 000034FD C74602[8221]        <4>  mov word [bp+2],%2
 23124 00003502 C646040B            <4>  mov byte [bp+4],%3
 23125 00003506 C646050D            <4>  mov byte [bp+5],%4
 23126 0000350A 884606              <4>  mov byte [bp+6],%5
 23127 0000350D E8(681A)            <4>  call proc_drawstring
 23128                              <4>  stkclose 0x07
 23129 00003510 83C407              <5>  add word sp, %1
 23130                              <1>  gui_show_message 'Tente novamente !', 11, 14, __message_default_color
 23131                              <2>  section .data
 23132 0000218C 54656E7465206E6F76- <2>  %%str: db %1,0
 23133 00002195 616D656E7465202100  <2>
 23134                              <2> section .text
 23135 00003513 8CC8                <2>  mov ax,cs
 23136 00003515 8ED8                <2>  mov ds,ax
 23137 00003517 A0[BD19]            <2>  mov al,[%4]
 23138                              <2>  __drawstring %%str, %2, %3, al
 23139                              <3>  __drawstring cs, %1, %2, %3, %4
 23140                              <4>  stkopen 0x07
 23141 0000351A 83EC07              <5>  sub word sp, %1
 23142 0000351D 54                  <5>  push sp
 23143 0000351E 5D                  <5>  pop bp
 23144 0000351F 8C4E00              <4>  mov word [bp+0],%1
 23145 00003522 C74602[8C21]        <4>  mov word [bp+2],%2
 23146 00003527 C646040B            <4>  mov byte [bp+4],%3
 23147 0000352B C646050E            <4>  mov byte [bp+5],%4
 23148 0000352F 884606              <4>  mov byte [bp+6],%5
 23149 00003532 E8(681A)            <4>  call proc_drawstring
 23150                              <4>  stkclose 0x07
 23151 00003535 83C407              <5>  add word sp, %1
 23152                              <1>  %%lose_message_painted:
 23153 00003538 B400                    		mov ah,00h
 23154 0000353A CD16                    		int 16h
 23155                                  	
 23156                                  		mov16 reinited, __ONE
 23157                              <1>  mov16 cs, %1, cs, %2
 23158 0000353C 8CC8                <2>  mov ax,%3
 23159 0000353E 8ED8                <2>  mov ds,ax
 23160 00003540 8B1E[B019]          <2>  mov bx,[%4]
 23161 00003544 8CC8                <2>  mov ax,%1
 23162 00003546 8ED8                <2>  mov ds,ax
 23163 00003548 891E[A21F]          <2>  mov [%2],bx
 23164 0000354C E9B4CA                  		jmp init
 23165                                  	
 23166 0000354F EBFE                    	jmp $

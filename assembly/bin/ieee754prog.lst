     1                                  
     2                                  %include "lib/system.mac"
     3                              <1>  
     4                              <1> %ifndef SYSTEM_MAC
     5                              <1>  	%define SYSTEM_MAC
     6                              <1>  	
     7                              <1> 	%ifndef TRUE
     8                              <1> 		%define TRUE 01h
     9                              <1> 	%endif
    10                              <1> 	%ifndef FALSE
    11                              <1> 		%define FALSE 00h
    12                              <1> 	%endif 	
    13                              <1>  	
    14                              <1> %macro int16toreg 2
    15                              <1> 	int16toreg cs, %1, %2
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro regtoint16 2
    19                              <1> 	regtoint16 %1, cs, %2
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> %macro int16toreg 3
    23                              <1> 	push %2
    24                              <1> 	push %1
    25                              <1> 	pop ds
    26                              <1> 	pop si
    27                              <1> 	mov word %3,[si]	
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro regtoint16 3
    31                              <1> 	push %3
    32                              <1> 	push %2
    33                              <1> 	pop ds
    34                              <1> 	pop si
    35                              <1> 	mov word [si],%1	
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> %macro mov32 2
    39                              <1> 	mov32 cs, %1, cs, %2
    40                              <1> %endmacro
    41                              <1> 
    42                              <1> %macro mov16 2
    43                              <1> 	mov16 cs, %1, cs, %2
    44                              <1> %endmacro
    45                              <1> 
    46                              <1> %macro mov32 4
    47                              <1> 	mov ax,%3
    48                              <1> 	mov ds,ax
    49                              <1> 	mov cx,[%4+2]
    50                              <1> 	mov dx,[%4]
    51                              <1> 	mov ax,%1
    52                              <1> 	mov ds,ax
    53                              <1> 	mov [%2+2],cx
    54                              <1> 	mov [%2],dx
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro mov16 4
    58                              <1> 	mov ax,%3
    59                              <1> 	mov ds,ax
    60                              <1> 	mov bx,[%4]
    61                              <1> 	mov ax,%1
    62                              <1> 	mov ds,ax
    63                              <1> 	mov [%2],bx
    64                              <1> %endmacro
    65                              <1>  	 	
    66                              <1> %macro mformat 4
    67                              <1> 	stkopen 8
    68                              <1> 	mov word [ bp + 0 ], %1
    69                              <1> 	mov word [ bp + 2 ], %2
    70                              <1> 	mov word [ bp + 4 ], %3
    71                              <1> 	mov word [ bp + 6 ], %4
    72                              <1> 	call kernel_segment:mformat
    73                              <1> 	stkclose 8
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro malloc 6
    77                              <1> 	stkopen 0Bh
    78                              <1> 	mov word [ bp + 4 ], %3
    79                              <1> 	mov word [ bp + 6 ], %4
    80                              <1> 	mov word [ bp + 8 ], %5	
    81                              <1> 	call kernel_segment:malloc
    82                              <1> 	push sp
    83                              <1> 	pop bp
    84                              <1> 	mov word %1, [ bp ]
    85                              <1> 	mov word %2, [ bp + 2 ]
    86                              <1> 	mov byte %6, [ bp + 0x0A ]
    87                              <1> 	stkclose 0Bh
    88                              <1> %endmacro 	
    89                              <1> 
    90                              <1> %macro laddr 2
    91                              <1> 	laddr %1, %2, %1, %2
    92                              <1> %endmacro
    93                              <1> 
    94                              <1> %macro faddr 2
    95                              <1> 	faddr %1, %2, %1, %2
    96                              <1> %endmacro
    97                              <1>  	
    98                              <1> %macro laddr 4
    99                              <1> 	stkopen 8
   100                              <1> 	mov word [ bp + 4 ], %3
   101                              <1> 	mov word [ bp + 6 ], %4	
   102                              <1> 	call kernel_segment:laddr
   103                              <1> 	push sp
   104                              <1> 	pop bp
   105                              <1> 	mov word %1, [ bp + 0 ]
   106                              <1> 	mov word %2, [ bp + 2 ]	
   107                              <1> 	stkclose 8
   108                              <1> %endmacro
   109                              <1> 
   110                              <1> %macro faddr 4
   111                              <1> 	stkopen 8
   112                              <1> 	mov word [ bp + 4 ], %3
   113                              <1> 	mov word [ bp + 6 ], %4	
   114                              <1> 	call kernel_segment:faddr
   115                              <1> 	push sp
   116                              <1> 	pop bp
   117                              <1> 	mov word %1, [ bp + 0 ]
   118                              <1> 	mov word %2, [ bp + 2 ]	
   119                              <1> 	stkclose 8
   120                              <1> %endmacro	
   121                              <1>  
   122                              <1> 
   123                              <1> %macro stkopen 1		
   124                              <1> 	sub word sp, %1
   125                              <1> 	push sp
   126                              <1> 	pop bp
   127                              <1> %endmacro
   128                              <1> 
   129                              <1> %macro stkclose 1
   130                              <1> 	add word sp, %1
   131                              <1> %endmacro
   132                              <1> 
   133                              <1> %macro stkload 1-* 	
   134                              <1>  	%rep %0
   135                              <1>  	 	%rotate -1
   136                              <1>  		pop %1
   137                              <1>  	%endrep
   138                              <1>  	%rep %0
   139                              <1>  		push %1
   140                              <1>  		%rotate 1
   141                              <1>  	%endrep
   142                              <1> %endmacro
   143                              <1> 
   144                              <1> %macro stkpush 1-* 	
   145                              <1>  	%rep %0
   146                              <1>  		push %1
   147                              <1>  		%rotate 1
   148                              <1>  	%endrep 	
   149                              <1> %endmacro
   150                              <1>  
   151                              <1> %macro stkpop 1-*
   152                              <1>  	%rep %0
   153                              <1>  	 	%rotate -1
   154                              <1>  		pop %1
   155                              <1>  	%endrep 	 	
   156                              <1> %endmacro
   157                              <1> 
   158                              <1> %endif 
   159                                  %include "lib/stdio.mac"
   160                              <1> 
   161                              <1> %ifndef STDIO_MAC
   162                              <1> 	%define STDIO_MAC
   163                              <1> 	
   164                              <1> 	%include "lib/stdio.asm"
   165                              <2> 
   166                              <2> %ifndef STDIO_ASM
   167                              <2> 	%define STDIO_ASM
   168                              <2> 	
   169                              <2> 	%include "lib/system.mac"
   170                              <3>  
   171                              <3> %ifndef SYSTEM_MAC
   172                              <3>  	%define SYSTEM_MAC
   173                              <3>  	
   174                              <3> 	%ifndef TRUE
   175                              <3> 		%define TRUE 01h
   176                              <3> 	%endif
   177                              <3> 	%ifndef FALSE
   178                              <3> 		%define FALSE 00h
   179                              <3> 	%endif 	
   180                              <3>  	
   181                              <3> %macro int16toreg 2
   182                              <3> 	int16toreg cs, %1, %2
   183                              <3> %endmacro
   184                              <3> 
   185                              <3> %macro regtoint16 2
   186                              <3> 	regtoint16 %1, cs, %2
   187                              <3> %endmacro
   188                              <3> 
   189                              <3> %macro int16toreg 3
   190                              <3> 	push %2
   191                              <3> 	push %1
   192                              <3> 	pop ds
   193                              <3> 	pop si
   194                              <3> 	mov word %3,[si]	
   195                              <3> %endmacro
   196                              <3> 
   197                              <3> %macro regtoint16 3
   198                              <3> 	push %3
   199                              <3> 	push %2
   200                              <3> 	pop ds
   201                              <3> 	pop si
   202                              <3> 	mov word [si],%1	
   203                              <3> %endmacro
   204                              <3> 
   205                              <3> %macro mov32 2
   206                              <3> 	mov32 cs, %1, cs, %2
   207                              <3> %endmacro
   208                              <3> 
   209                              <3> %macro mov16 2
   210                              <3> 	mov16 cs, %1, cs, %2
   211                              <3> %endmacro
   212                              <3> 
   213                              <3> %macro mov32 4
   214                              <3> 	mov ax,%3
   215                              <3> 	mov ds,ax
   216                              <3> 	mov cx,[%4+2]
   217                              <3> 	mov dx,[%4]
   218                              <3> 	mov ax,%1
   219                              <3> 	mov ds,ax
   220                              <3> 	mov [%2+2],cx
   221                              <3> 	mov [%2],dx
   222                              <3> %endmacro
   223                              <3> 
   224                              <3> %macro mov16 4
   225                              <3> 	mov ax,%3
   226                              <3> 	mov ds,ax
   227                              <3> 	mov bx,[%4]
   228                              <3> 	mov ax,%1
   229                              <3> 	mov ds,ax
   230                              <3> 	mov [%2],bx
   231                              <3> %endmacro
   232                              <3>  	 	
   233                              <3> %macro mformat 4
   234                              <3> 	stkopen 8
   235                              <3> 	mov word [ bp + 0 ], %1
   236                              <3> 	mov word [ bp + 2 ], %2
   237                              <3> 	mov word [ bp + 4 ], %3
   238                              <3> 	mov word [ bp + 6 ], %4
   239                              <3> 	call kernel_segment:mformat
   240                              <3> 	stkclose 8
   241                              <3> %endmacro
   242                              <3> 
   243                              <3> %macro malloc 6
   244                              <3> 	stkopen 0Bh
   245                              <3> 	mov word [ bp + 4 ], %3
   246                              <3> 	mov word [ bp + 6 ], %4
   247                              <3> 	mov word [ bp + 8 ], %5	
   248                              <3> 	call kernel_segment:malloc
   249                              <3> 	push sp
   250                              <3> 	pop bp
   251                              <3> 	mov word %1, [ bp ]
   252                              <3> 	mov word %2, [ bp + 2 ]
   253                              <3> 	mov byte %6, [ bp + 0x0A ]
   254                              <3> 	stkclose 0Bh
   255                              <3> %endmacro 	
   256                              <3> 
   257                              <3> %macro laddr 2
   258                              <3> 	laddr %1, %2, %1, %2
   259                              <3> %endmacro
   260                              <3> 
   261                              <3> %macro faddr 2
   262                              <3> 	faddr %1, %2, %1, %2
   263                              <3> %endmacro
   264                              <3>  	
   265                              <3> %macro laddr 4
   266                              <3> 	stkopen 8
   267                              <3> 	mov word [ bp + 4 ], %3
   268                              <3> 	mov word [ bp + 6 ], %4	
   269                              <3> 	call kernel_segment:laddr
   270                              <3> 	push sp
   271                              <3> 	pop bp
   272                              <3> 	mov word %1, [ bp + 0 ]
   273                              <3> 	mov word %2, [ bp + 2 ]	
   274                              <3> 	stkclose 8
   275                              <3> %endmacro
   276                              <3> 
   277                              <3> %macro faddr 4
   278                              <3> 	stkopen 8
   279                              <3> 	mov word [ bp + 4 ], %3
   280                              <3> 	mov word [ bp + 6 ], %4	
   281                              <3> 	call kernel_segment:faddr
   282                              <3> 	push sp
   283                              <3> 	pop bp
   284                              <3> 	mov word %1, [ bp + 0 ]
   285                              <3> 	mov word %2, [ bp + 2 ]	
   286                              <3> 	stkclose 8
   287                              <3> %endmacro	
   288                              <3>  
   289                              <3> 
   290                              <3> %macro stkopen 1		
   291                              <3> 	sub word sp, %1
   292                              <3> 	push sp
   293                              <3> 	pop bp
   294                              <3> %endmacro
   295                              <3> 
   296                              <3> %macro stkclose 1
   297                              <3> 	add word sp, %1
   298                              <3> %endmacro
   299                              <3> 
   300                              <3> %macro stkload 1-* 	
   301                              <3>  	%rep %0
   302                              <3>  	 	%rotate -1
   303                              <3>  		pop %1
   304                              <3>  	%endrep
   305                              <3>  	%rep %0
   306                              <3>  		push %1
   307                              <3>  		%rotate 1
   308                              <3>  	%endrep
   309                              <3> %endmacro
   310                              <3> 
   311                              <3> %macro stkpush 1-* 	
   312                              <3>  	%rep %0
   313                              <3>  		push %1
   314                              <3>  		%rotate 1
   315                              <3>  	%endrep 	
   316                              <3> %endmacro
   317                              <3>  
   318                              <3> %macro stkpop 1-*
   319                              <3>  	%rep %0
   320                              <3>  	 	%rotate -1
   321                              <3>  		pop %1
   322                              <3>  	%endrep 	 	
   323                              <3> %endmacro
   324                              <3> 
   325                              <3> %endif 
   326                              <2> 	
   327                              <2> %macro __prtch 1	
   328                              <2> 	stkopen 1	
   329                              <2> 	mov byte [ bp ], %1
   330                              <2> 	call proc_prtch
   331                              <2> 	stkclose 1
   332                              <2> %endmacro
   333                              <2> 
   334                              <2> %macro __prtln 0
   335                              <2> 	call proc_prtln
   336                              <2> %endmacro	
   337                              <2> 
   338                              <2> %macro __prtsubbin8 3
   339                              <2> 	stkopen 3
   340                              <2> 	mov byte [bp+0],%1
   341                              <2> 	mov byte [bp+1],%2
   342                              <2> 	mov byte [bp+2],%3
   343                              <2> 	call proc_prtsubbin8
   344                              <2> 	stkclose 3
   345                              <2> %endmacro
   346                              <2> 	
   347                              <2> section .data
   348                              <2> 	
   349                              <2> proc_prtIEEE754:
   350 00000000 89E0                <2> 	mov ax,sp
   351 00000002 89C5                <2> 	mov bp,ax			
   352 00000004 8B4602              <2> 	mov ax,[bp+2]	
   353 00000007 50                  <2> 	push ax
   354 00000008 50                  <2> 	push ax
   355 00000009 50                  <2> 	push ax
   356 0000000A 50                  <2> 	push ax	
   357 0000000B 50                  <2> 	push ax
   358                              <2> 	
   359                              <2> 	__prtsubbin8 ah,0,1
   360                              <3>  stkopen 3
   361 0000000C 83EC03              <4>  sub word sp, %1
   362 0000000F 54                  <4>  push sp
   363 00000010 5D                  <4>  pop bp
   364 00000011 886600              <3>  mov byte [bp+0],%1
   365 00000014 C6460100            <3>  mov byte [bp+1],%2
   366 00000018 C6460201            <3>  mov byte [bp+2],%3
   367 0000001C E87201              <3>  call proc_prtsubbin8
   368                              <3>  stkclose 3
   369 0000001F 83C403              <4>  add word sp, %1
   370                              <2> 	__prtch 20h
   371                              <3>  stkopen 1
   372 00000022 83EC01              <4>  sub word sp, %1
   373 00000025 54                  <4>  push sp
   374 00000026 5D                  <4>  pop bp
   375 00000027 C6460020            <3>  mov byte [ bp ], %1
   376 0000002B E82004              <3>  call proc_prtch
   377                              <3>  stkclose 1
   378 0000002E 83C401              <4>  add word sp, %1
   379                              <2> 	__prtch 20h
   380                              <3>  stkopen 1
   381 00000031 83EC01              <4>  sub word sp, %1
   382 00000034 54                  <4>  push sp
   383 00000035 5D                  <4>  pop bp
   384 00000036 C6460020            <3>  mov byte [ bp ], %1
   385 0000003A E81104              <3>  call proc_prtch
   386                              <3>  stkclose 1
   387 0000003D 83C401              <4>  add word sp, %1
   388 00000040 58                  <2> 	pop ax
   389                              <2> 	__prtsubbin8 ah,1,5
   390                              <3>  stkopen 3
   391 00000041 83EC03              <4>  sub word sp, %1
   392 00000044 54                  <4>  push sp
   393 00000045 5D                  <4>  pop bp
   394 00000046 886600              <3>  mov byte [bp+0],%1
   395 00000049 C6460101            <3>  mov byte [bp+1],%2
   396 0000004D C6460205            <3>  mov byte [bp+2],%3
   397 00000051 E83D01              <3>  call proc_prtsubbin8
   398                              <3>  stkclose 3
   399 00000054 83C403              <4>  add word sp, %1
   400 00000057 58                  <2> 	pop ax
   401                              <2> 	__prtsubbin8 ah,5,8
   402                              <3>  stkopen 3
   403 00000058 83EC03              <4>  sub word sp, %1
   404 0000005B 54                  <4>  push sp
   405 0000005C 5D                  <4>  pop bp
   406 0000005D 886600              <3>  mov byte [bp+0],%1
   407 00000060 C6460105            <3>  mov byte [bp+1],%2
   408 00000064 C6460208            <3>  mov byte [bp+2],%3
   409 00000068 E82601              <3>  call proc_prtsubbin8
   410                              <3>  stkclose 3
   411 0000006B 83C403              <4>  add word sp, %1
   412                              <2> 	
   413 0000006E 58                  <2> 	pop ax
   414                              <2> 	__prtsubbin8 al,0,1
   415                              <3>  stkopen 3
   416 0000006F 83EC03              <4>  sub word sp, %1
   417 00000072 54                  <4>  push sp
   418 00000073 5D                  <4>  pop bp
   419 00000074 884600              <3>  mov byte [bp+0],%1
   420 00000077 C6460100            <3>  mov byte [bp+1],%2
   421 0000007B C6460201            <3>  mov byte [bp+2],%3
   422 0000007F E80F01              <3>  call proc_prtsubbin8
   423                              <3>  stkclose 3
   424 00000082 83C403              <4>  add word sp, %1
   425                              <2> 	__prtch 20h
   426                              <3>  stkopen 1
   427 00000085 83EC01              <4>  sub word sp, %1
   428 00000088 54                  <4>  push sp
   429 00000089 5D                  <4>  pop bp
   430 0000008A C6460020            <3>  mov byte [ bp ], %1
   431 0000008E E8BD03              <3>  call proc_prtch
   432                              <3>  stkclose 1
   433 00000091 83C401              <4>  add word sp, %1
   434                              <2> 	__prtch 20h
   435                              <3>  stkopen 1
   436 00000094 83EC01              <4>  sub word sp, %1
   437 00000097 54                  <4>  push sp
   438 00000098 5D                  <4>  pop bp
   439 00000099 C6460020            <3>  mov byte [ bp ], %1
   440 0000009D E8AE03              <3>  call proc_prtch
   441                              <3>  stkclose 1
   442 000000A0 83C401              <4>  add word sp, %1
   443 000000A3 58                  <2> 	pop ax
   444                              <2> 	__prtsubbin8 al,1,4
   445                              <3>  stkopen 3
   446 000000A4 83EC03              <4>  sub word sp, %1
   447 000000A7 54                  <4>  push sp
   448 000000A8 5D                  <4>  pop bp
   449 000000A9 884600              <3>  mov byte [bp+0],%1
   450 000000AC C6460101            <3>  mov byte [bp+1],%2
   451 000000B0 C6460204            <3>  mov byte [bp+2],%3
   452 000000B4 E8DA00              <3>  call proc_prtsubbin8
   453                              <3>  stkclose 3
   454 000000B7 83C403              <4>  add word sp, %1
   455                              <2> 	__prtch 20h
   456                              <3>  stkopen 1
   457 000000BA 83EC01              <4>  sub word sp, %1
   458 000000BD 54                  <4>  push sp
   459 000000BE 5D                  <4>  pop bp
   460 000000BF C6460020            <3>  mov byte [ bp ], %1
   461 000000C3 E88803              <3>  call proc_prtch
   462                              <3>  stkclose 1
   463 000000C6 83C401              <4>  add word sp, %1
   464 000000C9 58                  <2> 	pop ax
   465                              <2> 	__prtsubbin8 al,4,8
   466                              <3>  stkopen 3
   467 000000CA 83EC03              <4>  sub word sp, %1
   468 000000CD 54                  <4>  push sp
   469 000000CE 5D                  <4>  pop bp
   470 000000CF 884600              <3>  mov byte [bp+0],%1
   471 000000D2 C6460104            <3>  mov byte [bp+1],%2
   472 000000D6 C6460208            <3>  mov byte [bp+2],%3
   473 000000DA E8B400              <3>  call proc_prtsubbin8
   474                              <3>  stkclose 3
   475 000000DD 83C403              <4>  add word sp, %1
   476                              <2> 	__prtch 20h
   477                              <3>  stkopen 1
   478 000000E0 83EC01              <4>  sub word sp, %1
   479 000000E3 54                  <4>  push sp
   480 000000E4 5D                  <4>  pop bp
   481 000000E5 C6460020            <3>  mov byte [ bp ], %1
   482 000000E9 E86203              <3>  call proc_prtch
   483                              <3>  stkclose 1
   484 000000EC 83C401              <4>  add word sp, %1
   485                              <2> 	
   486 000000EF 89E0                <2> 	mov ax,sp
   487 000000F1 89C5                <2> 	mov bp,ax			
   488 000000F3 8B4604              <2> 	mov ax,[bp+4]
   489 000000F6 50                  <2> 	push ax
   490 000000F7 50                  <2> 	push ax
   491 000000F8 50                  <2> 	push ax
   492                              <2> 	
   493                              <2> 	__prtsubbin8 ah,0,4
   494                              <3>  stkopen 3
   495 000000F9 83EC03              <4>  sub word sp, %1
   496 000000FC 54                  <4>  push sp
   497 000000FD 5D                  <4>  pop bp
   498 000000FE 886600              <3>  mov byte [bp+0],%1
   499 00000101 C6460100            <3>  mov byte [bp+1],%2
   500 00000105 C6460204            <3>  mov byte [bp+2],%3
   501 00000109 E88500              <3>  call proc_prtsubbin8
   502                              <3>  stkclose 3
   503 0000010C 83C403              <4>  add word sp, %1
   504                              <2> 	__prtch 20h
   505                              <3>  stkopen 1
   506 0000010F 83EC01              <4>  sub word sp, %1
   507 00000112 54                  <4>  push sp
   508 00000113 5D                  <4>  pop bp
   509 00000114 C6460020            <3>  mov byte [ bp ], %1
   510 00000118 E83303              <3>  call proc_prtch
   511                              <3>  stkclose 1
   512 0000011B 83C401              <4>  add word sp, %1
   513 0000011E 58                  <2> 	pop ax
   514                              <2> 	__prtsubbin8 ah,4,8
   515                              <3>  stkopen 3
   516 0000011F 83EC03              <4>  sub word sp, %1
   517 00000122 54                  <4>  push sp
   518 00000123 5D                  <4>  pop bp
   519 00000124 886600              <3>  mov byte [bp+0],%1
   520 00000127 C6460104            <3>  mov byte [bp+1],%2
   521 0000012B C6460208            <3>  mov byte [bp+2],%3
   522 0000012F E85F00              <3>  call proc_prtsubbin8
   523                              <3>  stkclose 3
   524 00000132 83C403              <4>  add word sp, %1
   525                              <2> 	__prtch 20h
   526                              <3>  stkopen 1
   527 00000135 83EC01              <4>  sub word sp, %1
   528 00000138 54                  <4>  push sp
   529 00000139 5D                  <4>  pop bp
   530 0000013A C6460020            <3>  mov byte [ bp ], %1
   531 0000013E E80D03              <3>  call proc_prtch
   532                              <3>  stkclose 1
   533 00000141 83C401              <4>  add word sp, %1
   534                              <2> 	
   535 00000144 58                  <2> 	pop ax
   536                              <2> 	__prtsubbin8 al,0,4
   537                              <3>  stkopen 3
   538 00000145 83EC03              <4>  sub word sp, %1
   539 00000148 54                  <4>  push sp
   540 00000149 5D                  <4>  pop bp
   541 0000014A 884600              <3>  mov byte [bp+0],%1
   542 0000014D C6460100            <3>  mov byte [bp+1],%2
   543 00000151 C6460204            <3>  mov byte [bp+2],%3
   544 00000155 E83900              <3>  call proc_prtsubbin8
   545                              <3>  stkclose 3
   546 00000158 83C403              <4>  add word sp, %1
   547                              <2> 	__prtch 20h
   548                              <3>  stkopen 1
   549 0000015B 83EC01              <4>  sub word sp, %1
   550 0000015E 54                  <4>  push sp
   551 0000015F 5D                  <4>  pop bp
   552 00000160 C6460020            <3>  mov byte [ bp ], %1
   553 00000164 E8E702              <3>  call proc_prtch
   554                              <3>  stkclose 1
   555 00000167 83C401              <4>  add word sp, %1
   556 0000016A 58                  <2> 	pop ax
   557                              <2> 	__prtsubbin8 al,4,8
   558                              <3>  stkopen 3
   559 0000016B 83EC03              <4>  sub word sp, %1
   560 0000016E 54                  <4>  push sp
   561 0000016F 5D                  <4>  pop bp
   562 00000170 884600              <3>  mov byte [bp+0],%1
   563 00000173 C6460104            <3>  mov byte [bp+1],%2
   564 00000177 C6460208            <3>  mov byte [bp+2],%3
   565 0000017B E81300              <3>  call proc_prtsubbin8
   566                              <3>  stkclose 3
   567 0000017E 83C403              <4>  add word sp, %1
   568                              <2> 	__prtch 20h
   569                              <3>  stkopen 1
   570 00000181 83EC01              <4>  sub word sp, %1
   571 00000184 54                  <4>  push sp
   572 00000185 5D                  <4>  pop bp
   573 00000186 C6460020            <3>  mov byte [ bp ], %1
   574 0000018A E8C102              <3>  call proc_prtch
   575                              <3>  stkclose 1
   576 0000018D 83C401              <4>  add word sp, %1
   577                              <2> 	
   578 00000190 C3                  <2> 	ret
   579                              <2> 	
   580                              <2> proc_prtsubbin8:
   581 00000191 89E0                <2> 	mov ax,sp
   582 00000193 89C5                <2> 	mov bp,ax
   583                              <2> 	
   584 00000195 8A4602              <2> 	mov al,[bp+2]
   585 00000198 50                  <2> 	push ax
   586                              <2> 	
   587 00000199 8A4E03              <2> 	mov cl,[bp+3]
   588 0000019C 8A6E04              <2> 	mov ch,[bp+4]
   589 0000019F 80FD08              <2> 	cmp ch,8
   590 000001A2 7602                <2> 	jbe .l1	
   591 000001A4 B508                <2> 		mov ch,8
   592                              <2> 	.l1:		
   593 000001A6 38E9                <2> 		cmp cl,ch		
   594 000001A8 731D                <2> 		jae .l2
   595                              <2> 		
   596 000001AA 58                  <2> 		pop ax
   597 000001AB 50                  <2> 		push ax
   598 000001AC D2E0                <2> 		shl al,cl
   599 000001AE C0E807              <2> 		shr al,7		
   600 000001B1 0430                <2> 		add al,30h
   601                              <2> 		
   602 000001B3 51                  <2> 		push cx
   603                              <2> 		__prtch al
   604                              <3>  stkopen 1
   605 000001B4 83EC01              <4>  sub word sp, %1
   606 000001B7 54                  <4>  push sp
   607 000001B8 5D                  <4>  pop bp
   608 000001B9 884600              <3>  mov byte [ bp ], %1
   609 000001BC E88F02              <3>  call proc_prtch
   610                              <3>  stkclose 1
   611 000001BF 83C401              <4>  add word sp, %1
   612 000001C2 59                  <2> 		pop cx
   613                              <2> 		
   614 000001C3 FEC1                <2> 		inc cl
   615 000001C5 EBDF                <2> 		jmp .l1
   616                              <2> 	.l2:	
   617 000001C7 58                  <2> 	pop ax
   618                              <2> 	
   619 000001C8 C3                  <2> 	ret
   620                              <2> 	
   621                              <2> proc_prtbin16:
   622 000001C9 89E0                <2> 	mov ax,sp
   623 000001CB 89C5                <2> 	mov bp,ax
   624                              <2> 		
   625 000001CD 8A7E04              <2> 	mov bh, [bp+4]
   626 000001D0 B300                <2> 	mov bl,0
   627 000001D2 B201                <2> 	mov dl,TRUE
   628 000001D4 30ED                <2> 	xor ch,ch
   629 000001D6 B102                <2> 	mov cl,2
   630                              <2> 	.l1:
   631 000001D8 80F900              <2> 		cmp cl,0
   632 000001DB 744B                <2> 		jz .l2		
   633                              <2> 		
   634 000001DD 55                  <2> 		push bp
   635 000001DE 01CD                <2> 		add bp,cx
   636 000001E0 45                  <2> 		inc bp
   637                              <2> 		
   638 000001E1 0A5E00              <2> 		or byte bl, [bp]
   639 000001E4 08FB                <2> 		or byte bl, bh
   640 000001E6 743B                <2> 		jz .prted											
   641 000001E8 53                  <2> 			push bx
   642 000001E9 51                  <2> 			push cx	
   643 000001EA 80FA01              <2> 			cmp dl, TRUE
   644 000001ED 7402                <2> 			je .first
   645 000001EF EB10                <2> 			jmp .nfirst
   646                              <2> 			.first:
   647 000001F1 B200                <2> 				mov dl, FALSE
   648 000001F3 52                  <2> 				push dx
   649                              <2> 				
   650 000001F4 88FC                <2> 				mov ah, bh
   651 000001F6 8A4600              <2> 				mov byte al, [bp]
   652 000001F9 50                  <2> 				push ax
   653 000001FA E84000              <2> 				call proc_prtbin8
   654 000001FD 58                  <2> 				pop ax
   655                              <2> 							
   656 000001FE 5A                  <2> 				pop dx
   657 000001FF EB0C                <2> 				jmp .endfirst
   658                              <2> 			.nfirst:
   659 00000201 52                  <2> 				push dx
   660                              <2> 				
   661 00000202 B401                <2> 				mov ah, TRUE
   662 00000204 8A4600              <2> 				mov byte al, [bp]
   663 00000207 50                  <2> 				push ax
   664 00000208 E83200              <2> 				call proc_prtbin8
   665 0000020B 58                  <2> 				pop ax
   666                              <2> 								
   667 0000020C 5A                  <2> 				pop dx
   668                              <2> 			.endfirst:	
   669 0000020D 59                  <2> 			pop cx
   670 0000020E 5B                  <2> 			pop bx		
   671                              <2> 			
   672 0000020F 80F901              <2> 			cmp cl,1
   673 00000212 760F                <2> 			jbe .spaceprted
   674                              <2> 				__prtch 20h
   675                              <3>  stkopen 1
   676 00000214 83EC01              <4>  sub word sp, %1
   677 00000217 54                  <4>  push sp
   678 00000218 5D                  <4>  pop bp
   679 00000219 C6460020            <3>  mov byte [ bp ], %1
   680 0000021D E82E02              <3>  call proc_prtch
   681                              <3>  stkclose 1
   682 00000220 83C401              <4>  add word sp, %1
   683                              <2> 			.spaceprted:
   684                              <2> 		.prted:
   685                              <2> 		
   686 00000223 5D                  <2> 		pop bp
   687                              <2> 		
   688 00000224 FEC9                <2> 		dec cl
   689 00000226 EBB0                <2> 		jmp .l1
   690                              <2> 	.l2:
   691                              <2> 	
   692 00000228 80FB00              <2> 	cmp bl,0
   693 0000022B 750F                <2> 	jnz .end
   694                              <2> 		__prtch 30h
   695                              <3>  stkopen 1
   696 0000022D 83EC01              <4>  sub word sp, %1
   697 00000230 54                  <4>  push sp
   698 00000231 5D                  <4>  pop bp
   699 00000232 C6460030            <3>  mov byte [ bp ], %1
   700 00000236 E81502              <3>  call proc_prtch
   701                              <3>  stkclose 1
   702 00000239 83C401              <4>  add word sp, %1
   703                              <2> 	.end:
   704                              <2> 	
   705 0000023C C3                  <2> 	ret	
   706                              <2> 	
   707                              <2> proc_prtbin8:
   708 0000023D 89E0                <2> 	mov ax,sp
   709 0000023F 89C5                <2> 	mov bp,ax
   710 00000241 8A4602              <2> 	mov byte al, [bp+2]
   711 00000244 3C00                <2> 	cmp al, 0
   712 00000246 0F858700            <2> 	jnz .nzero
   713                              <2> 		__prtch 30h
   714                              <3>  stkopen 1
   715 0000024A 83EC01              <4>  sub word sp, %1
   716 0000024D 54                  <4>  push sp
   717 0000024E 5D                  <4>  pop bp
   718 0000024F C6460030            <3>  mov byte [ bp ], %1
   719 00000253 E8F801              <3>  call proc_prtch
   720                              <3>  stkclose 1
   721 00000256 83C401              <4>  add word sp, %1
   722                              <2> 		
   723 00000259 89E0                <2> 		mov ax,sp
   724 0000025B 89C5                <2> 		mov bp,ax
   725 0000025D 8A4603              <2> 		mov byte al, [bp+3]		
   726 00000260 3C00                <2> 		cmp al, FALSE
   727 00000262 0F84C500            <2> 		je .end
   728                              <2> 			__prtch 30h
   729                              <3>  stkopen 1
   730 00000266 83EC01              <4>  sub word sp, %1
   731 00000269 54                  <4>  push sp
   732 0000026A 5D                  <4>  pop bp
   733 0000026B C6460030            <3>  mov byte [ bp ], %1
   734 0000026F E8DC01              <3>  call proc_prtch
   735                              <3>  stkclose 1
   736 00000272 83C401              <4>  add word sp, %1
   737                              <2> 			__prtch 30h
   738                              <3>  stkopen 1
   739 00000275 83EC01              <4>  sub word sp, %1
   740 00000278 54                  <4>  push sp
   741 00000279 5D                  <4>  pop bp
   742 0000027A C6460030            <3>  mov byte [ bp ], %1
   743 0000027E E8CD01              <3>  call proc_prtch
   744                              <3>  stkclose 1
   745 00000281 83C401              <4>  add word sp, %1
   746                              <2> 			__prtch 30h
   747                              <3>  stkopen 1
   748 00000284 83EC01              <4>  sub word sp, %1
   749 00000287 54                  <4>  push sp
   750 00000288 5D                  <4>  pop bp
   751 00000289 C6460030            <3>  mov byte [ bp ], %1
   752 0000028D E8BE01              <3>  call proc_prtch
   753                              <3>  stkclose 1
   754 00000290 83C401              <4>  add word sp, %1
   755                              <2> 			__prtch 30h
   756                              <3>  stkopen 1
   757 00000293 83EC01              <4>  sub word sp, %1
   758 00000296 54                  <4>  push sp
   759 00000297 5D                  <4>  pop bp
   760 00000298 C6460030            <3>  mov byte [ bp ], %1
   761 0000029C E8AF01              <3>  call proc_prtch
   762                              <3>  stkclose 1
   763 0000029F 83C401              <4>  add word sp, %1
   764                              <2> 			__prtch 30h
   765                              <3>  stkopen 1
   766 000002A2 83EC01              <4>  sub word sp, %1
   767 000002A5 54                  <4>  push sp
   768 000002A6 5D                  <4>  pop bp
   769 000002A7 C6460030            <3>  mov byte [ bp ], %1
   770 000002AB E8A001              <3>  call proc_prtch
   771                              <3>  stkclose 1
   772 000002AE 83C401              <4>  add word sp, %1
   773                              <2> 			__prtch 30h
   774                              <3>  stkopen 1
   775 000002B1 83EC01              <4>  sub word sp, %1
   776 000002B4 54                  <4>  push sp
   777 000002B5 5D                  <4>  pop bp
   778 000002B6 C6460030            <3>  mov byte [ bp ], %1
   779 000002BA E89101              <3>  call proc_prtch
   780                              <3>  stkclose 1
   781 000002BD 83C401              <4>  add word sp, %1
   782                              <2> 			__prtch 30h
   783                              <3>  stkopen 1
   784 000002C0 83EC01              <4>  sub word sp, %1
   785 000002C3 54                  <4>  push sp
   786 000002C4 5D                  <4>  pop bp
   787 000002C5 C6460030            <3>  mov byte [ bp ], %1
   788 000002C9 E88201              <3>  call proc_prtch
   789                              <3>  stkclose 1
   790 000002CC 83C401              <4>  add word sp, %1
   791 000002CF EB5A                <2> 			jmp .end		
   792                              <2> 	.nzero:
   793                              <2> 
   794 000002D1 B000                <2> 	mov byte al, FALSE
   795 000002D3 50                  <2> 	push ax
   796                              <2> 
   797 000002D4 89E0                <2> 	mov ax,sp
   798 000002D6 89C5                <2> 	mov bp,ax
   799 000002D8 8A5E04              <2> 	mov byte bl, [bp+4]
   800 000002DB B100                <2> 	mov cl,0
   801                              <2> 	.l1:
   802 000002DD 80F908              <2> 		cmp cl,8
   803 000002E0 7348                <2> 		jae .l2
   804                              <2> 		
   805 000002E2 88C8                <2> 		mov al,cl
   806                              <2> 		
   807 000002E4 88DA                <2> 		mov dl, bl		
   808                              <2> 		
   809                              <2> 		.l1.1:
   810 000002E6 3C00                <2> 			cmp al,0
   811 000002E8 7406                <2> 			jz .l1.2
   812                              <2> 							
   813 000002EA D0E2                <2> 			shl dl,1
   814                              <2> 			
   815 000002EC FEC8                <2> 			dec al
   816 000002EE EBF6                <2> 			jmp .l1.1
   817                              <2> 		.l1.2:
   818                              <2> 						
   819 000002F0 C0EA07              <2> 		shr dl,7
   820                              <2> 		
   821 000002F3 89E0                <2> 		mov ax,sp
   822 000002F5 89C5                <2> 		mov bp,ax			
   823 000002F7 8A4605              <2> 		mov byte al, [bp+5]
   824 000002FA 3C01                <2> 		cmp al, TRUE
   825 000002FC 7413                <2> 		je .endzero		
   826 000002FE 80FA00              <2> 			cmp dl,0
   827 00000301 7402                <2> 			jz .zero
   828 00000303 EB08                <2> 			jmp .notzero
   829                              <2> 			.zero:
   830 00000305 58                  <2> 				pop ax
   831 00000306 50                  <2> 				push ax
   832 00000307 3C01                <2> 				cmp al, TRUE				
   833 00000309 7406                <2> 				je .endzero
   834 0000030B EB19                <2> 				jmp .inc
   835                              <2> 			.notzero:
   836 0000030D 58                  <2> 				pop ax
   837 0000030E B001                <2> 				mov al, TRUE	
   838 00000310 50                  <2> 				push ax				
   839                              <2> 		.endzero:
   840                              <2> 									
   841 00000311 80C230              <2> 		add dl,30h
   842                              <2> 
   843 00000314 51                  <2> 		push cx
   844 00000315 52                  <2> 		push dx
   845                              <2> 		__prtch dl
   846                              <3>  stkopen 1
   847 00000316 83EC01              <4>  sub word sp, %1
   848 00000319 54                  <4>  push sp
   849 0000031A 5D                  <4>  pop bp
   850 0000031B 885600              <3>  mov byte [ bp ], %1
   851 0000031E E82D01              <3>  call proc_prtch
   852                              <3>  stkclose 1
   853 00000321 83C401              <4>  add word sp, %1
   854 00000324 5A                  <2> 		pop dx
   855 00000325 59                  <2> 		pop cx	
   856                              <2> 
   857                              <2> 		.inc:
   858                              <2> 	
   859 00000326 FEC1                <2> 		inc cl
   860 00000328 EBB3                <2> 		jmp .l1	
   861                              <2> 	.l2:
   862                              <2> 	
   863 0000032A 58                  <2> 	pop ax
   864                              <2> 	
   865                              <2> 	.end:
   866                              <2> 	
   867 0000032B C3                  <2> 	ret	
   868                              <2> 
   869                              <2> proc_prthex16:
   870 0000032C 89E0                <2> 	mov ax,sp
   871 0000032E 89C5                <2> 	mov bp,ax
   872                              <2> 
   873 00000330 8A7E04              <2> 	mov byte bh, [bp+4]		
   874 00000333 B300                <2> 	mov bl,0	
   875 00000335 B201                <2> 	mov dl,TRUE
   876 00000337 30ED                <2> 	xor ch,ch
   877 00000339 B102                <2> 	mov cl, 2	
   878                              <2> 	.l1:			
   879 0000033B 80F900              <2> 		cmp cl,0
   880 0000033E 7437                <2> 		jz .l2
   881                              <2> 							
   882 00000340 55                  <2> 		push bp		
   883 00000341 01CD                <2> 		add bp,cx
   884 00000343 45                  <2> 		inc bp		
   885                              <2> 		
   886 00000344 0A5E00              <2> 		or byte bl, [bp]
   887 00000347 08FB                <2> 		or byte bl, bh
   888 00000349 7427                <2> 		jz .prted							
   889 0000034B 53                  <2> 			push bx
   890 0000034C 51                  <2> 			push cx	
   891 0000034D 80FA01              <2> 			cmp dl, TRUE
   892 00000350 7402                <2> 			je .first
   893 00000352 EB10                <2> 			jmp .nfirst
   894                              <2> 			.first:
   895 00000354 B200                <2> 				mov dl, FALSE
   896 00000356 52                  <2> 				push dx
   897                              <2> 				
   898 00000357 88FC                <2> 				mov ah, bh
   899 00000359 8A4600              <2> 				mov byte al, [bp]
   900 0000035C 50                  <2> 				push ax
   901 0000035D E82C00              <2> 				call proc_prthex8
   902 00000360 58                  <2> 				pop ax
   903                              <2> 							
   904 00000361 5A                  <2> 				pop dx
   905 00000362 EB0C                <2> 				jmp .endfirst
   906                              <2> 			.nfirst:
   907 00000364 52                  <2> 				push dx
   908                              <2> 				
   909 00000365 B401                <2> 				mov ah, TRUE
   910 00000367 8A4600              <2> 				mov byte al, [bp]
   911 0000036A 50                  <2> 				push ax
   912 0000036B E81E00              <2> 				call proc_prthex8
   913 0000036E 58                  <2> 				pop ax
   914                              <2> 								
   915 0000036F 5A                  <2> 				pop dx
   916                              <2> 			.endfirst:	
   917 00000370 59                  <2> 			pop cx
   918 00000371 5B                  <2> 			pop bx		
   919                              <2> 		.prted:
   920                              <2> 		
   921 00000372 5D                  <2> 		pop bp
   922                              <2> 	
   923 00000373 FEC9                <2> 		dec cl
   924 00000375 EBC4                <2> 		jmp .l1		
   925                              <2> 	.l2:
   926                              <2> 	
   927 00000377 80FB00              <2> 	cmp bl,0
   928 0000037A 750F                <2> 	jnz .end
   929                              <2> 		__prtch 30h
   930                              <3>  stkopen 1
   931 0000037C 83EC01              <4>  sub word sp, %1
   932 0000037F 54                  <4>  push sp
   933 00000380 5D                  <4>  pop bp
   934 00000381 C6460030            <3>  mov byte [ bp ], %1
   935 00000385 E8C600              <3>  call proc_prtch
   936                              <3>  stkclose 1
   937 00000388 83C401              <4>  add word sp, %1
   938                              <2> 	.end:
   939                              <2> 	
   940 0000038B C3                  <2> 	ret
   941                              <2> 	
   942                              <2> proc_prthex8:
   943 0000038C 89E0                <2> 	mov ax,sp
   944 0000038E 89C5                <2> 	mov bp,ax
   945 00000390 8A4602              <2> 	mov byte al, [bp+2]
   946 00000393 3C00                <2> 	cmp al, 0
   947 00000395 752B                <2> 	jnz .nzero
   948                              <2> 		__prtch 30h
   949                              <3>  stkopen 1
   950 00000397 83EC01              <4>  sub word sp, %1
   951 0000039A 54                  <4>  push sp
   952 0000039B 5D                  <4>  pop bp
   953 0000039C C6460030            <3>  mov byte [ bp ], %1
   954 000003A0 E8AB00              <3>  call proc_prtch
   955                              <3>  stkclose 1
   956 000003A3 83C401              <4>  add word sp, %1
   957                              <2> 		
   958 000003A6 89E0                <2> 		mov ax,sp
   959 000003A8 89C5                <2> 		mov bp,ax
   960 000003AA 8A4603              <2> 		mov byte al, [bp+3]		
   961 000003AD 3C00                <2> 		cmp al, FALSE
   962 000003AF 7476                <2> 		je .end
   963                              <2> 			__prtch 30h
   964                              <3>  stkopen 1
   965 000003B1 83EC01              <4>  sub word sp, %1
   966 000003B4 54                  <4>  push sp
   967 000003B5 5D                  <4>  pop bp
   968 000003B6 C6460030            <3>  mov byte [ bp ], %1
   969 000003BA E89100              <3>  call proc_prtch
   970                              <3>  stkclose 1
   971 000003BD 83C401              <4>  add word sp, %1
   972 000003C0 EB65                <2> 			jmp .end		
   973                              <2> 	.nzero:
   974                              <2> 
   975 000003C2 B000                <2> 	mov byte al, FALSE
   976 000003C4 50                  <2> 	push ax
   977                              <2> 
   978 000003C5 89E0                <2> 	mov ax,sp
   979 000003C7 89C5                <2> 	mov bp,ax
   980 000003C9 8A5E04              <2> 	mov byte bl, [bp+4]
   981 000003CC B102                <2> 	mov cl,2
   982                              <2> 	.l1:
   983 000003CE 80F900              <2> 		cmp cl,0
   984 000003D1 7453                <2> 		jz .l2
   985                              <2> 		
   986 000003D3 B002                <2> 		mov al,2
   987 000003D5 28C8                <2> 		sub al,cl
   988                              <2> 		
   989 000003D7 88DA                <2> 		mov dl, bl	
   990                              <2> 		
   991                              <2> 		.l1.1:
   992 000003D9 3C00                <2> 			cmp al,0
   993 000003DB 7407                <2> 			jz .l1.2
   994                              <2> 							
   995 000003DD C0E204              <2> 			shl dl,4
   996                              <2> 			
   997 000003E0 FEC8                <2> 			dec al
   998 000003E2 EBF5                <2> 			jmp .l1.1
   999                              <2> 		.l1.2:
  1000                              <2> 						
  1001 000003E4 C0EA04              <2> 		shr dl,4
  1002                              <2> 
  1003 000003E7 89E0                <2> 		mov ax,sp
  1004 000003E9 89C5                <2> 		mov bp,ax			
  1005 000003EB 8A4605              <2> 		mov byte al, [bp+5]
  1006 000003EE 3C01                <2> 		cmp al, TRUE
  1007 000003F0 7413                <2> 		je .endzero		
  1008 000003F2 80FA00              <2> 			cmp dl,0
  1009 000003F5 7402                <2> 			jz .zero
  1010 000003F7 EB08                <2> 			jmp .notzero
  1011                              <2> 			.zero:
  1012 000003F9 58                  <2> 				pop ax
  1013 000003FA 50                  <2> 				push ax
  1014 000003FB 3C01                <2> 				cmp al, TRUE				
  1015 000003FD 7406                <2> 				je .endzero
  1016 000003FF EB21                <2> 				jmp .dec
  1017                              <2> 			.notzero:
  1018 00000401 58                  <2> 				pop ax
  1019 00000402 B001                <2> 				mov al, TRUE	
  1020 00000404 50                  <2> 				push ax				
  1021                              <2> 		.endzero:
  1022                              <2> 						
  1023 00000405 80FA09              <2> 		cmp dl,9
  1024 00000408 7603                <2> 		jbe .endsumseven  		
  1025 0000040A 80C207              <2> 		add dl,7
  1026                              <2> 		.endsumseven:
  1027                              <2> 						
  1028 0000040D 80C230              <2> 		add dl,30h
  1029                              <2> 
  1030 00000410 51                  <2> 		push cx
  1031 00000411 52                  <2> 		push dx
  1032                              <2> 		__prtch dl
  1033                              <3>  stkopen 1
  1034 00000412 83EC01              <4>  sub word sp, %1
  1035 00000415 54                  <4>  push sp
  1036 00000416 5D                  <4>  pop bp
  1037 00000417 885600              <3>  mov byte [ bp ], %1
  1038 0000041A E83100              <3>  call proc_prtch
  1039                              <3>  stkclose 1
  1040 0000041D 83C401              <4>  add word sp, %1
  1041 00000420 5A                  <2> 		pop dx
  1042 00000421 59                  <2> 		pop cx	
  1043                              <2> 
  1044                              <2> 		.dec:
  1045                              <2> 	
  1046 00000422 FEC9                <2> 		dec cl
  1047 00000424 EBA8                <2> 		jmp .l1	
  1048                              <2> 	.l2:
  1049                              <2> 	
  1050 00000426 58                  <2> 	pop ax
  1051                              <2> 	
  1052                              <2> 	.end:
  1053                              <2> 	
  1054 00000427 C3                  <2> 	ret
  1055                              <2> 
  1056                              <2> proc_prtstr:
  1057 00000428 89E0                <2> 	mov ax,sp
  1058 0000042A 89C5                <2> 	mov bp,ax
  1059                              <2> 	
  1060 0000042C 8B4602              <2> 	mov ax, [bp+2]
  1061 0000042F 8ED8                <2> 	mov ds, ax
  1062 00000431 8B7604              <2> 	mov si, [bp+4]						
  1063                              <2> 	.loop:
  1064 00000434 AC                  <2> 		lodsb
  1065 00000435 3C00                <2> 		cmp al,0h
  1066 00000437 7414                <2> 		jz .done
  1067                              <2> 		
  1068 00000439 1E                  <2> 		push ds
  1069 0000043A 56                  <2> 		push si
  1070                              <2> 					
  1071                              <2> 		__prtch al										
  1072                              <3>  stkopen 1
  1073 0000043B 83EC01              <4>  sub word sp, %1
  1074 0000043E 54                  <4>  push sp
  1075 0000043F 5D                  <4>  pop bp
  1076 00000440 884600              <3>  mov byte [ bp ], %1
  1077 00000443 E80800              <3>  call proc_prtch
  1078                              <3>  stkclose 1
  1079 00000446 83C401              <4>  add word sp, %1
  1080                              <2> 									
  1081 00000449 5E                  <2> 		pop si
  1082 0000044A 1F                  <2> 		pop ds
  1083                              <2> 											
  1084 0000044B EBE7                <2> 		jmp .loop 
  1085                              <2> 	.done:
  1086                              <2> 	
  1087 0000044D C3                  <2> 	ret	
  1088                              <2> 	
  1089                              <2> proc_prtch:
  1090 0000044E 89E0                <2> 	mov ax,sp
  1091 00000450 89C5                <2> 	mov bp,ax
  1092                              <2> 
  1093 00000452 8A4602              <2> 	mov al,[bp+2]
  1094 00000455 B40E                <2> 	mov ah,0Eh
  1095 00000457 B700                <2> 	mov bh,00h
  1096 00000459 CD10                <2> 	int 10h	
  1097                              <2> 	
  1098 0000045B C3                  <2> 	ret
  1099                              <2> 
  1100                              <2> proc_prtln:
  1101 0000045C B403                <2> 	mov ah,03h
  1102 0000045E B700                <2> 	mov bh,00h
  1103 00000460 CD10                <2> 	int 10h
  1104                              <2> 	
  1105 00000462 B402                <2> 	mov ah,02h
  1106 00000464 FEC6                <2> 	inc dh
  1107 00000466 B200                <2> 	mov dl,00h
  1108 00000468 CD10                <2> 	int 10h	
  1109                              <2> 	
  1110 0000046A C3                  <2> 	ret
  1111                              <2> 	
  1112                              <2> %endif
  1113                              <1>  	%include "lib/system.mac"
  1114                              <2>  
  1115                              <2> %ifndef SYSTEM_MAC
  1116                              <2>  	%define SYSTEM_MAC
  1117                              <2>  	
  1118                              <2> 	%ifndef TRUE
  1119                              <2> 		%define TRUE 01h
  1120                              <2> 	%endif
  1121                              <2> 	%ifndef FALSE
  1122                              <2> 		%define FALSE 00h
  1123                              <2> 	%endif 	
  1124                              <2>  	
  1125                              <2> %macro int16toreg 2
  1126                              <2> 	int16toreg cs, %1, %2
  1127                              <2> %endmacro
  1128                              <2> 
  1129                              <2> %macro regtoint16 2
  1130                              <2> 	regtoint16 %1, cs, %2
  1131                              <2> %endmacro
  1132                              <2> 
  1133                              <2> %macro int16toreg 3
  1134                              <2> 	push %2
  1135                              <2> 	push %1
  1136                              <2> 	pop ds
  1137                              <2> 	pop si
  1138                              <2> 	mov word %3,[si]	
  1139                              <2> %endmacro
  1140                              <2> 
  1141                              <2> %macro regtoint16 3
  1142                              <2> 	push %3
  1143                              <2> 	push %2
  1144                              <2> 	pop ds
  1145                              <2> 	pop si
  1146                              <2> 	mov word [si],%1	
  1147                              <2> %endmacro
  1148                              <2> 
  1149                              <2> %macro mov32 2
  1150                              <2> 	mov32 cs, %1, cs, %2
  1151                              <2> %endmacro
  1152                              <2> 
  1153                              <2> %macro mov16 2
  1154                              <2> 	mov16 cs, %1, cs, %2
  1155                              <2> %endmacro
  1156                              <2> 
  1157                              <2> %macro mov32 4
  1158                              <2> 	mov ax,%3
  1159                              <2> 	mov ds,ax
  1160                              <2> 	mov cx,[%4+2]
  1161                              <2> 	mov dx,[%4]
  1162                              <2> 	mov ax,%1
  1163                              <2> 	mov ds,ax
  1164                              <2> 	mov [%2+2],cx
  1165                              <2> 	mov [%2],dx
  1166                              <2> %endmacro
  1167                              <2> 
  1168                              <2> %macro mov16 4
  1169                              <2> 	mov ax,%3
  1170                              <2> 	mov ds,ax
  1171                              <2> 	mov bx,[%4]
  1172                              <2> 	mov ax,%1
  1173                              <2> 	mov ds,ax
  1174                              <2> 	mov [%2],bx
  1175                              <2> %endmacro
  1176                              <2>  	 	
  1177                              <2> %macro mformat 4
  1178                              <2> 	stkopen 8
  1179                              <2> 	mov word [ bp + 0 ], %1
  1180                              <2> 	mov word [ bp + 2 ], %2
  1181                              <2> 	mov word [ bp + 4 ], %3
  1182                              <2> 	mov word [ bp + 6 ], %4
  1183                              <2> 	call kernel_segment:mformat
  1184                              <2> 	stkclose 8
  1185                              <2> %endmacro
  1186                              <2> 
  1187                              <2> %macro malloc 6
  1188                              <2> 	stkopen 0Bh
  1189                              <2> 	mov word [ bp + 4 ], %3
  1190                              <2> 	mov word [ bp + 6 ], %4
  1191                              <2> 	mov word [ bp + 8 ], %5	
  1192                              <2> 	call kernel_segment:malloc
  1193                              <2> 	push sp
  1194                              <2> 	pop bp
  1195                              <2> 	mov word %1, [ bp ]
  1196                              <2> 	mov word %2, [ bp + 2 ]
  1197                              <2> 	mov byte %6, [ bp + 0x0A ]
  1198                              <2> 	stkclose 0Bh
  1199                              <2> %endmacro 	
  1200                              <2> 
  1201                              <2> %macro laddr 2
  1202                              <2> 	laddr %1, %2, %1, %2
  1203                              <2> %endmacro
  1204                              <2> 
  1205                              <2> %macro faddr 2
  1206                              <2> 	faddr %1, %2, %1, %2
  1207                              <2> %endmacro
  1208                              <2>  	
  1209                              <2> %macro laddr 4
  1210                              <2> 	stkopen 8
  1211                              <2> 	mov word [ bp + 4 ], %3
  1212                              <2> 	mov word [ bp + 6 ], %4	
  1213                              <2> 	call kernel_segment:laddr
  1214                              <2> 	push sp
  1215                              <2> 	pop bp
  1216                              <2> 	mov word %1, [ bp + 0 ]
  1217                              <2> 	mov word %2, [ bp + 2 ]	
  1218                              <2> 	stkclose 8
  1219                              <2> %endmacro
  1220                              <2> 
  1221                              <2> %macro faddr 4
  1222                              <2> 	stkopen 8
  1223                              <2> 	mov word [ bp + 4 ], %3
  1224                              <2> 	mov word [ bp + 6 ], %4	
  1225                              <2> 	call kernel_segment:faddr
  1226                              <2> 	push sp
  1227                              <2> 	pop bp
  1228                              <2> 	mov word %1, [ bp + 0 ]
  1229                              <2> 	mov word %2, [ bp + 2 ]	
  1230                              <2> 	stkclose 8
  1231                              <2> %endmacro	
  1232                              <2>  
  1233                              <2> 
  1234                              <2> %macro stkopen 1		
  1235                              <2> 	sub word sp, %1
  1236                              <2> 	push sp
  1237                              <2> 	pop bp
  1238                              <2> %endmacro
  1239                              <2> 
  1240                              <2> %macro stkclose 1
  1241                              <2> 	add word sp, %1
  1242                              <2> %endmacro
  1243                              <2> 
  1244                              <2> %macro stkload 1-* 	
  1245                              <2>  	%rep %0
  1246                              <2>  	 	%rotate -1
  1247                              <2>  		pop %1
  1248                              <2>  	%endrep
  1249                              <2>  	%rep %0
  1250                              <2>  		push %1
  1251                              <2>  		%rotate 1
  1252                              <2>  	%endrep
  1253                              <2> %endmacro
  1254                              <2> 
  1255                              <2> %macro stkpush 1-* 	
  1256                              <2>  	%rep %0
  1257                              <2>  		push %1
  1258                              <2>  		%rotate 1
  1259                              <2>  	%endrep 	
  1260                              <2> %endmacro
  1261                              <2>  
  1262                              <2> %macro stkpop 1-*
  1263                              <2>  	%rep %0
  1264                              <2>  	 	%rotate -1
  1265                              <2>  		pop %1
  1266                              <2>  	%endrep 	 	
  1267                              <2> %endmacro
  1268                              <2> 
  1269                              <2> %endif 
  1270                              <1> 
  1271                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1272                              <1> %macro printf 1-*	
  1273                              <1> 	%rep %0					
  1274                              <1> 		__printf %1
  1275                              <1> 		%rotate 1		
  1276                              <1> 	%endrep
  1277                              <1> %endmacro	
  1278                              <1> 
  1279                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1280                              <1> %macro __printf 1
  1281                              <1> 	section .data
  1282                              <1> 		%%str: db %1,0
  1283                              <1> 	section .text
  1284                              <1> 		prtstr cs, %%str				
  1285                              <1> %endmacro
  1286                              <1> 
  1287                              <1> %macro prtstr 2
  1288                              <1> 	stkopen 4
  1289                              <1> 	mov word [bp], %1
  1290                              <1> 	mov word [bp+2], %2
  1291                              <1> 	call proc_prtstr
  1292                              <1> 	stkclose 4
  1293                              <1> %endmacro
  1294                              <1> 
  1295                              <1> 
  1296                              <1> %macro prtIEEE754 1
  1297                              <1> 	prtIEEE754 cs, %1
  1298                              <1> %endmacro
  1299                              <1> 
  1300                              <1> %macro prtIEEE754 2
  1301                              <1> 	stkopen 4
  1302                              <1> 	mov ax,%1
  1303                              <1> 	mov ds,ax
  1304                              <1> 	mov ax, [%2+2]
  1305                              <1> 	mov word [bp+0], ax
  1306                              <1> 	mov ax, [%2]
  1307                              <1> 	mov word [bp+2], ax
  1308                              <1> 	call proc_prtIEEE754
  1309                              <1> 	stkclose 4
  1310                              <1> %endmacro
  1311                              <1> 
  1312                              <1> %macro prtbool 1	
  1313                              <1> 	cmp byte %1, TRUE
  1314                              <1> 	je .true
  1315                              <1> 	jmp .false
  1316                              <1> 	.true:
  1317                              <1> 		prtf "true"
  1318                              <1> 		jmp .endcmp
  1319                              <1> 	.false:
  1320                              <1> 		prtf "false"
  1321                              <1> 	.endcmp:	
  1322                              <1> %endmacro
  1323                              <1> 
  1324                              <1> %macro prtptr 2-3 TRUE
  1325                              <1> 	stkopen 3
  1326                              <1> 	mov word [ bp + 0 ], %2
  1327                              <1> 	mov byte [ bp + 2 ], %3
  1328                              <1> 	prthex16 %1, %3
  1329                              <1> 	writechar ':'
  1330                              <1> 	push sp
  1331                              <1> 	pop bp
  1332                              <1> 	mov word ax, [ bp + 0 ]
  1333                              <1> 	mov byte bl, [ bp + 2 ]
  1334                              <1> 	prthex16 ax, bl
  1335                              <1> 	stkclose 3
  1336                              <1> %endmacro
  1337                              <1> 
  1338                              <1> %macro prtfptr 2-3 TRUE
  1339                              <1> 	stkopen 3
  1340                              <1> 	mov word [ bp + 0 ], %1
  1341                              <1> 	mov byte [ bp + 2 ], %3
  1342                              <1> 	prthex16 %2, %3
  1343                              <1> 	push sp
  1344                              <1> 	pop bp
  1345                              <1> 	mov word ax, [ bp + 0 ]
  1346                              <1> 	mov byte bl, [ bp + 2 ]
  1347                              <1> 	prthex16 ax, bl
  1348                              <1> 	stkclose 3
  1349                              <1> %endmacro
  1350                              <1> 
  1351                              <1> %macro prtbin32 1
  1352                              <1> 	prtbin32 cs, %1
  1353                              <1> %endmacro
  1354                              <1> 
  1355                              <1> %macro prtbin32 2
  1356                              <1> 	mov ax,%1
  1357                              <1> 	mov ds,ax
  1358                              <1> 	mov word ax,[%2+2]
  1359                              <1> 	prtbin16 ax
  1360                              <1> 	prtch 20h
  1361                              <1> 	mov ax,%1
  1362                              <1> 	mov ds,ax
  1363                              <1> 	mov word ax,[%2]
  1364                              <1> 	prtbin16 ax
  1365                              <1> %endmacro
  1366                              <1> 
  1367                              <1> %macro prthex32 1
  1368                              <1> 	prthex32 cs, %1
  1369                              <1> %endmacro
  1370                              <1> 
  1371                              <1> %macro iprthex32 1
  1372                              <1> 	iprthex32 cs, %1
  1373                              <1> %endmacro
  1374                              <1> 
  1375                              <1> %macro prthex32 2
  1376                              <1> 	mov ax,%1
  1377                              <1> 	mov ds,ax
  1378                              <1> 	mov word ax,[%2+2]
  1379                              <1> 	prthex16 ax	
  1380                              <1> 	mov ax,%1
  1381                              <1> 	mov ds,ax
  1382                              <1> 	mov word ax,[%2]
  1383                              <1> 	prthex16 ax
  1384                              <1> %endmacro
  1385                              <1> 
  1386                              <1> %macro iprthex32 2
  1387                              <1> 	mov ax,%1
  1388                              <1> 	mov ds,ax
  1389                              <1> 	mov word ax,[%2+2]
  1390                              <1> 	mov word bx,ax
  1391                              <1> 	and ax,0x7FFF
  1392                              <1> 	push ax
  1393                              <1> 	and bx,0x8000
  1394                              <1> 	cmp bx,0
  1395                              <1> 	jz %%prt
  1396                              <1> 		prtch '-'		
  1397                              <1> 	%%prt:	
  1398                              <1> 	pop ax
  1399                              <1> 	prthex16 ax
  1400                              <1> 	mov ax,%1
  1401                              <1> 	mov ds,ax
  1402                              <1> 	mov word ax,[%2]
  1403                              <1> 	prthex16 ax	
  1404                              <1> %endmacro
  1405                              <1> 
  1406                              <1> %macro prtsubbin8 3
  1407                              <1> 	__prtsubbin8 %1,%2,%3
  1408                              <1> %endmacro
  1409                              <1> 
  1410                              <1> %macro prtbin16 1
  1411                              <1> 	stkopen 3
  1412                              <1> 	mov word [bp], %1
  1413                              <1> 	mov byte [bp+2], TRUE
  1414                              <1> 	call proc_prtbin16
  1415                              <1> 	stkclose 3
  1416                              <1> %endmacro
  1417                              <1> 
  1418                              <1> %macro prtbin8 1
  1419                              <1> 	stkopen 2
  1420                              <1> 	mov byte [bp], %1
  1421                              <1> 	mov byte [bp+1], TRUE
  1422                              <1> 	call proc_prtbin8
  1423                              <1> 	stkclose 2
  1424                              <1> %endmacro
  1425                              <1> 
  1426                              <1> %macro prthex16 1
  1427                              <1> 	stkopen 3
  1428                              <1> 	mov word [bp], %1
  1429                              <1> 	mov byte [bp+2], TRUE
  1430                              <1> 	call proc_prthex16
  1431                              <1> 	stkclose 3
  1432                              <1> %endmacro
  1433                              <1> 
  1434                              <1> %macro prthex8 1
  1435                              <1> 	stkopen 2
  1436                              <1> 	mov byte [bp], %1
  1437                              <1> 	mov byte [bp+1], TRUE
  1438                              <1> 	call proc_prthex8
  1439                              <1> 	stkclose 2
  1440                              <1> %endmacro
  1441                              <1> 
  1442                              <1> %macro prtch 1
  1443                              <1> 	__prtch %1
  1444                              <1> %endmacro
  1445                              <1> 
  1446                              <1> %macro prtln 0
  1447                              <1> 	__prtln
  1448                              <1> %endmacro	
  1449                              <1> 
  1450                              <1> 
  1451                              <1> %macro prtstk 0
  1452                              <1> 	printf "stack ---> "
  1453                              <1> 	mov ax,sp
  1454                              <1> 	prthex16 ax
  1455                              <1> %endmacro  
  1456                              <1> 
  1457                              <1> %endif
  1458                                  %include "lib/math.mac"
  1459                              <1> 
  1460                              <1> %ifndef MATH_MAC
  1461                              <1> 	%define MATH_MAC
  1462                              <1> 	
  1463                              <1> 	%include "lib/math.asm"
  1464                              <2> 
  1465                              <2> %ifndef MATH_ASM
  1466                              <2> 	%define MATH_ASM
  1467                              <2> 
  1468                              <2> %macro __int16to32 3
  1469                              <2> 	stkopen 0x06
  1470                              <2> 	mov word [bp+0],%1
  1471                              <2> 	call proc_int16to32
  1472                              <2> 	push sp
  1473                              <2> 	pop bp
  1474                              <2> 	mov word %2, [bp+2]
  1475                              <2> 	mov word %3, [bp+4]
  1476                              <2> 	stkclose 0x06
  1477                              <2> %endmacro
  1478                              <2> 
  1479                              <2> %macro __int32to16 3
  1480                              <2> 	stkopen 0x06
  1481                              <2> 	mov word [bp+0], %1
  1482                              <2> 	mov word [bp+2], %2
  1483                              <2> 	call proc_int32to16
  1484                              <2> 	push sp
  1485                              <2> 	pop bp
  1486                              <2> 	mov word %3, [bp+4]
  1487                              <2> 	stkclose 0x06
  1488                              <2> %endmacro
  1489                              <2> 
  1490                              <2> %macro __add32 6
  1491                              <2> 	stkopen 0x0C
  1492                              <2> 	mov word [bp+0], %1
  1493                              <2> 	mov word [bp+2], %2
  1494                              <2> 	mov word [bp+4], %3
  1495                              <2> 	mov word [bp+6], %4	
  1496                              <2> 	call proc_add32
  1497                              <2> 	push sp
  1498                              <2> 	pop bp
  1499                              <2> 	mov word %5, [bp+8]
  1500                              <2> 	mov word %6, [bp+0x0A]
  1501                              <2> 	stkclose 0x0C
  1502                              <2> %endmacro
  1503                              <2> 
  1504                              <2> %macro __sub32 6
  1505                              <2> 	stkopen 0x0C
  1506                              <2> 	mov word [bp+0], %1
  1507                              <2> 	mov word [bp+2], %2
  1508                              <2> 	mov word [bp+4], %3
  1509                              <2> 	mov word [bp+6], %4	
  1510                              <2> 	call proc_sub32
  1511                              <2> 	push sp
  1512                              <2> 	pop bp
  1513                              <2> 	mov word %5, [bp+8]
  1514                              <2> 	mov word %6, [bp+0x0A]
  1515                              <2> 	stkclose 0x0C
  1516                              <2> %endmacro
  1517                              <2> 
  1518                              <2> %macro __mul32 6
  1519                              <2> 	stkopen 0x0C
  1520                              <2> 	mov word [bp+0], %1
  1521                              <2> 	mov word [bp+2], %2
  1522                              <2> 	mov word [bp+4], %3
  1523                              <2> 	mov word [bp+6], %4	
  1524                              <2> 	call proc_mul32
  1525                              <2> 	push sp
  1526                              <2> 	pop bp
  1527                              <2> 	mov word %5, [bp+8]
  1528                              <2> 	mov word %6, [bp+0x0A]
  1529                              <2> 	stkclose 0x0C
  1530                              <2> %endmacro
  1531                              <2> 
  1532                              <2> %macro __div32 9
  1533                              <2> 	stkopen 0x11
  1534                              <2> 	mov word [bp+0], %1
  1535                              <2> 	mov word [bp+2], %2
  1536                              <2> 	mov word [bp+4], %3
  1537                              <2> 	mov word [bp+6], %4
  1538                              <2> 	mov word [bp+8], %5
  1539                              <2> 	mov word [bp+0x0A], %6	
  1540                              <2> 	call proc_div32
  1541                              <2> 	push sp
  1542                              <2> 	pop bp
  1543                              <2> 	mov word %7, [bp+0x0C]
  1544                              <2> 	mov word %8, [bp+0x0E]
  1545                              <2> 	mov byte %9, [bp+0x10]
  1546                              <2> 	stkclose 0x11
  1547                              <2> %endmacro
  1548                              <2> 
  1549                              <2> %macro __cmp32 5
  1550                              <2> 	stkopen 9
  1551                              <2> 	mov word [bp+0], %1
  1552                              <2> 	mov word [bp+2], %2
  1553                              <2> 	mov word [bp+4], %3
  1554                              <2> 	mov word [bp+6], %4
  1555                              <2> 	call proc_cmp32
  1556                              <2> 	push sp
  1557                              <2> 	pop bp
  1558                              <2> 	mov byte %5, [bp+8]
  1559                              <2> 	stkclose 9	
  1560                              <2> %endmacro
  1561                              <2> 
  1562                              <2> %macro __shl32 3
  1563                              <2> 	stkopen 5
  1564                              <2> 	mov word [bp+0], %1
  1565                              <2> 	mov word [bp+2], %2
  1566                              <2> 	mov byte [bp+4], %3
  1567                              <2> 	call proc_shl32
  1568                              <2> 	push sp
  1569                              <2> 	pop bp
  1570                              <2> 	mov word %1, [bp+0]
  1571                              <2> 	mov word %2, [bp+2]
  1572                              <2> 	stkclose 5
  1573                              <2> %endmacro
  1574                              <2> 
  1575                              <2> %macro __shr32 3
  1576                              <2> 	stkopen 5
  1577                              <2> 	mov word [bp+0], %1
  1578                              <2> 	mov word [bp+2], %2
  1579                              <2> 	mov byte [bp+4], %3
  1580                              <2> 	call proc_shr32
  1581                              <2> 	push sp
  1582                              <2> 	pop bp
  1583                              <2> 	mov word %1, [bp+0]
  1584                              <2> 	mov word %2, [bp+2]
  1585                              <2> 	stkclose 5
  1586                              <2> %endmacro
  1587                              <2> 
  1588                              <2> %macro __lzcount32 3	
  1589                              <2> 	push %2		
  1590                              <2> 	__lzcount16 %1, cl	
  1591                              <2> 	pop ax
  1592                              <2> 	cmp cl,4
  1593                              <2> 	jb .end
  1594                              <2> 		push cx		
  1595                              <2> 		__lzcount16 ax, al		
  1596                              <2> 		pop cx
  1597                              <2> 		add cl,al
  1598                              <2> 	.end:	
  1599                              <2> 	mov byte %3, cl 
  1600                              <2> %endmacro
  1601                              <2> 
  1602                              <2> %macro __lzcount16 2
  1603                              <2> 	stkopen 3
  1604                              <2> 	mov word [bp+0], %1
  1605                              <2> 	call proc__lzcount16
  1606                              <2> 	push sp
  1607                              <2> 	pop bp
  1608                              <2> 	mov byte %2, [bp+2]	
  1609                              <2> 	stkclose 3
  1610                              <2> %endmacro
  1611                              <2> 
  1612                              <2> %macro __lzbitcount32 3	
  1613                              <2> 	push %2		
  1614                              <2> 	__lzbitcount16 %1, cl
  1615                              <2> 	pop ax
  1616                              <2> 	cmp cl,16
  1617                              <2> 	jb .end
  1618                              <2> 		push cx		
  1619                              <2> 		__lzbitcount16 ax, al		
  1620                              <2> 		pop cx
  1621                              <2> 		add cl,al
  1622                              <2> 	.end:	
  1623                              <2> 	mov byte %3, cl 
  1624                              <2> %endmacro
  1625                              <2> 		
  1626                              <2> %macro __lzbitcount16 2
  1627                              <2> 	stkopen 3
  1628                              <2> 	mov word [bp+0], %1
  1629                              <2> 	call proc__lzbitcount16
  1630                              <2> 	push sp
  1631                              <2> 	pop bp
  1632                              <2> 	mov byte %2, [bp+2]	
  1633                              <2> 	stkclose 3
  1634                              <2> %endmacro	
  1635                              <2> 
  1636                              <2> %macro __calc_dividendo1 7
  1637                              <2> 	stkopen 0x0D
  1638                              <2> 	mov word [bp+0], %1
  1639                              <2> 	mov word [bp+2], %2
  1640                              <2> 	mov word [bp+4], %3
  1641                              <2> 	mov word [bp+6], %4
  1642                              <2> 	call proc_calc_dividendo1
  1643                              <2> 	push sp
  1644                              <2> 	pop bp
  1645                              <2> 	mov word %5, [bp+0x08]
  1646                              <2> 	mov word %6, [bp+0x0A]
  1647                              <2> 	mov byte %7, [bp+0x0C]
  1648                              <2> 	stkclose 0x0D
  1649                              <2> %endmacro
  1650                              <2> 
  1651                              <2> %macro __calc__prox_dividendo 5
  1652                              <2> 	stkopen 9
  1653                              <2> 	mov word [bp+0], %1
  1654                              <2> 	mov word [bp+2], %2
  1655                              <2> 	mov word [bp+4], %3
  1656                              <2> 	mov word [bp+6], %4
  1657                              <2> 	mov word [bp+8], %5
  1658                              <2> 	call proc_calc_prox_dividendo
  1659                              <2> 	push sp
  1660                              <2> 	pop bp
  1661                              <2> 	mov word %3, [bp+4]
  1662                              <2> 	mov word %4, [bp+6]
  1663                              <2> 	mov byte %5, [bp+8]
  1664                              <2> 	stkclose 9
  1665                              <2> %endmacro
  1666                              <2> 				
  1667                              <2> section .data
  1668                              <2> 
  1669                              <2> proc_int16to32:
  1670 0000046B 89E0                <2> 	mov ax,sp
  1671 0000046D 89C5                <2> 	mov bp,ax
  1672                              <2> 	
  1673 0000046F 8B4602              <2> 	mov ax,[bp+2]			
  1674 00000472 89C3                <2> 	mov bx,ax
  1675 00000474 250080              <2> 	and ax,0x8000
  1676 00000477 83F800              <2> 	cmp ax,0
  1677 0000047A 7402                <2> 	jz .zero
  1678 0000047C EB08                <2> 	jmp .one
  1679                              <2> 	.zero:
  1680 0000047E 81E3FF7F            <2> 		and bx,0x7FFF
  1681 00000482 89DA                <2> 		mov dx,bx			
  1682 00000484 EB06                <2> 		jmp .endcmp
  1683                              <2> 	.one:				
  1684 00000486 BAFFFF              <2> 		mov dx,0xFFFF
  1685 00000489 29DA                <2> 		sub dx,bx
  1686 0000048B 42                  <2> 		inc dx
  1687                              <2> 	.endcmp:
  1688 0000048C 894604              <2> 	mov [bp+4],ax
  1689 0000048F 895606              <2> 	mov [bp+6],dx
  1690                              <2> 	
  1691 00000492 C3                  <2> 	ret
  1692                              <2> 	
  1693                              <2> proc_int32to16:
  1694 00000493 89E0                <2> 	mov ax,sp
  1695 00000495 89C5                <2> 	mov bp,ax
  1696                              <2> 	
  1697 00000497 8B4602              <2> 	mov ax,[bp+2]
  1698 0000049A 8B5E04              <2> 	mov bx,[bp+4]		
  1699 0000049D 250080              <2> 	and ax,0x8000
  1700 000004A0 81E3FF7F            <2> 	and bx,0x7FFF	
  1701 000004A4 83F800              <2> 	cmp ax,0
  1702 000004A7 7402                <2> 	jz .zero
  1703 000004A9 EB04                <2> 	jmp .one
  1704                              <2> 	.zero:		
  1705 000004AB 01D8                <2> 		add ax,bx
  1706 000004AD EB05                <2> 		jmp .endcmp
  1707                              <2> 	.one:		
  1708 000004AF B8FFFF              <2> 		mov ax,0xFFFF
  1709 000004B2 29D8                <2> 		sub ax,bx
  1710                              <2> 	.endcmp:	
  1711 000004B4 894606              <2> 	mov word [bp+6], ax	
  1712                              <2> 	
  1713 000004B7 C3                  <2> 	ret
  1714                              <2> 
  1715                              <2> proc_setsig:
  1716 000004B8 89E0                <2> 	mov ax,sp
  1717 000004BA 89C5                <2> 	mov bp,ax
  1718                              <2> 	
  1719 000004BC 816602FF7F          <2> 	and word [bp+2],0x7FFF
  1720 000004C1 8146020080          <2> 	add word [bp+2],0x8000	
  1721                              <2> 	
  1722 000004C6 C3                  <2> 	ret
  1723                              <2> 	
  1724                              <2> proc_clrsig:
  1725 000004C7 89E0                <2> 	mov ax,sp
  1726 000004C9 89C5                <2> 	mov bp,ax
  1727                              <2> 	
  1728 000004CB 816602FF7F          <2> 	and word [bp+2],0x7FFF
  1729                              <2> 
  1730 000004D0 C3                  <2> 	ret
  1731                              <2> 
  1732                              <2> proc_idiv32:
  1733                              <2> 	stkopen 0x11
  1734 000004D1 83EC11              <3>  sub word sp, %1
  1735 000004D4 54                  <3>  push sp
  1736 000004D5 5D                  <3>  pop bp
  1737 000004D6 8B4613              <2> 	mov ax,[bp+0x13]
  1738 000004D9 25FF7F              <2> 	and ax,0x7FFF
  1739 000004DC 894600              <2> 	mov [bp+0],ax
  1740 000004DF 8B4615              <2> 	mov ax,[bp+0x15]
  1741 000004E2 894602              <2> 	mov [bp+2],ax
  1742 000004E5 8B4617              <2> 	mov ax,[bp+0x17]
  1743 000004E8 25FF7F              <2> 	and ax,0x7FFF
  1744 000004EB 894604              <2> 	mov [bp+4],ax
  1745 000004EE 8B4619              <2> 	mov ax,[bp+0x19]
  1746 000004F1 894606              <2> 	mov [bp+6],ax 
  1747 000004F4 E8B300              <2> 	call proc_div32
  1748 000004F7 89E0                <2> 	mov ax,sp
  1749 000004F9 89C5                <2> 	mov bp,ax
  1750 000004FB 8B4608              <2> 	mov ax,[bp+8]
  1751 000004FE 89461B              <2> 	mov [bp+0x1B], ax
  1752 00000501 8B460A              <2> 	mov ax,[bp+0x0A]
  1753 00000504 89461D              <2> 	mov [bp+0x1D], ax
  1754 00000507 8B460C              <2> 	mov ax,[bp+0x0C]
  1755 0000050A 89461F              <2> 	mov [bp+0x1F], ax
  1756 0000050D 8B460E              <2> 	mov ax,[bp+0x0E]
  1757 00000510 894621              <2> 	mov [bp+0x21], ax
  1758 00000513 8A4610              <2> 	mov al,[bp+0x10]
  1759 00000516 884623              <2> 	mov byte [bp+0x23], al
  1760                              <2> 	stkclose 0x11
  1761 00000519 83C411              <3>  add word sp, %1
  1762                              <2> 	
  1763 0000051C 54                  <2> 	push sp
  1764 0000051D 5D                  <2> 	pop bp
  1765                              <2> 		
  1766 0000051E 8B4E02              <2> 	mov cx,[bp+2]
  1767 00000521 8B5606              <2> 	mov dx,[bp+6]
  1768 00000524 81E10080            <2> 	and cx,0x8000
  1769 00000528 81E20080            <2> 	and dx,0x8000
  1770 0000052C 31D1                <2> 	xor cx,dx
  1771                              <2> 	
  1772 0000052E 837E0A00            <2> 	cmp word [bp+0x0A],0
  1773 00000532 7506                <2> 	jnz .signal1
  1774 00000534 837E0C00            <2> 	cmp word [bp+0x0C],0
  1775 00000538 7403                <2> 	jz .endsignal1
  1776                              <2> 	.signal1:
  1777 0000053A 014E0A              <2> 		add word [bp+0x0A],cx
  1778                              <2> 	.endsignal1:
  1779                              <2> 	
  1780 0000053D 837E0E00            <2> 	cmp word [bp+0x0E],0
  1781 00000541 7506                <2> 	jnz .signal2
  1782 00000543 837E1000            <2> 	cmp word [bp+0x10],0
  1783 00000547 7403                <2> 	jz .endsignal2
  1784                              <2> 	.signal2:
  1785 00000549 014E0E              <2> 		add word [bp+0x0E],cx	
  1786                              <2> 	.endsignal2:
  1787                              <2> 		
  1788 0000054C C3                  <2> 	ret	
  1789                              <2> 
  1790                              <2> proc_imul32:		
  1791                              <2> 	stkopen 0x0C
  1792 0000054D 83EC0C              <3>  sub word sp, %1
  1793 00000550 54                  <3>  push sp
  1794 00000551 5D                  <3>  pop bp
  1795 00000552 8B460E              <2> 	mov ax,[bp+0x0E]
  1796 00000555 25FF7F              <2> 	and ax,0x7FFF
  1797 00000558 894600              <2> 	mov [bp+0],ax
  1798 0000055B 8B4610              <2> 	mov ax,[bp+0x10]
  1799 0000055E 894602              <2> 	mov [bp+2],ax
  1800 00000561 8B4612              <2> 	mov ax,[bp+0x12]
  1801 00000564 25FF7F              <2> 	and ax,0x7FFF
  1802 00000567 894604              <2> 	mov [bp+4],ax
  1803 0000056A 8B4614              <2> 	mov ax,[bp+0x14]
  1804 0000056D 894606              <2> 	mov [bp+6],ax 
  1805 00000570 E8B901              <2> 	call proc_mul32
  1806 00000573 89E0                <2> 	mov ax,sp
  1807 00000575 89C5                <2> 	mov bp,ax
  1808 00000577 8B4608              <2> 	mov ax,[bp+8]
  1809 0000057A 8B5E0A              <2> 	mov bx,[bp+0x0A]
  1810                              <2> 	stkclose 0x0C
  1811 0000057D 83C40C              <3>  add word sp, %1
  1812                              <2> 	
  1813 00000580 89E1                <2> 	mov cx,sp
  1814 00000582 89CD                <2> 	mov bp,cx		
  1815                              <2> 		
  1816 00000584 89460A              <2> 	mov [bp+0x0A],ax
  1817 00000587 895E0C              <2> 	mov [bp+0x0C],bx
  1818                              <2> 	
  1819 0000058A 837E0A00            <2> 	cmp word [bp+0x0A],0
  1820 0000058E 7506                <2> 	jnz .signal1
  1821 00000590 837E0C00            <2> 	cmp word [bp+0x0C],0
  1822 00000594 7413                <2> 	jz .endsignal1
  1823                              <2> 	.signal1:
  1824 00000596 8B4E02              <2> 		mov cx,[bp+2]
  1825 00000599 8B5606              <2> 		mov dx,[bp+6]
  1826 0000059C 81E10080            <2> 		and cx,0x8000
  1827 000005A0 81E20080            <2> 		and dx,0x8000
  1828 000005A4 31D1                <2> 		xor cx,dx
  1829 000005A6 014E0A              <2> 		add word [bp+0x0A],cx
  1830                              <2> 	.endsignal1:
  1831                              <2> 	
  1832 000005A9 C3                  <2> 	ret
  1833                              <2> 
  1834                              <2> proc_div32:
  1835 000005AA 89E0                <2> 	mov ax,sp
  1836 000005AC 89C5                <2> 	mov bp,ax
  1837                              <2> 	
  1838 000005AE 8B4606              <2> 	mov ax,[bp+6]
  1839 000005B1 034608              <2> 	add ax,[bp+8]
  1840 000005B4 83F800              <2> 	cmp ax,0
  1841 000005B7 0F846C01            <2> 	jz .divbyzero
  1842                              <2> 	
  1843 000005BB 837E0200            <2> 	cmp word [bp+2], 0
  1844 000005BF 7521                <2> 	jnz .div2
  1845 000005C1 837E0600            <2> 	cmp word [bp+6], 0
  1846 000005C5 751B                <2> 	jnz .div2
  1847 000005C7 31D2                <2> 		xor dx,dx
  1848 000005C9 8B4604              <2> 		mov ax, [bp+4]
  1849 000005CC F77608              <2> 		div word [bp+8]
  1850 000005CF C7460A0000          <2> 		mov word [bp+0x0A], 0
  1851 000005D4 89460C              <2> 		mov word [bp+0x0C], ax
  1852 000005D7 C7460E0000          <2> 		mov word [bp+0x0E], 0
  1853 000005DC 895610              <2> 		mov word [bp+0x10], dx
  1854 000005DF E93F01              <2> 		jmp .enddiv
  1855                              <2> 	.div2:
  1856 000005E2 8B4602              <2> 		mov ax,[bp+2]
  1857 000005E5 3B4606              <2> 		cmp ax,[bp+6]
  1858 000005E8 0F821F01            <2> 		jb .qzero
  1859 000005EC 770A                <2> 		ja .div
  1860 000005EE 8B4604              <2> 		mov ax,[bp+4]
  1861 000005F1 3B4608              <2> 		cmp ax,[bp+8]
  1862 000005F4 0F821301            <2> 		jb .qzero
  1863                              <2> 		
  1864                              <2> 		.div:
  1865                              <2> 		
  1866 000005F8 C7460A0000          <2> 		mov word [bp+0x0A], 0
  1867 000005FD C7460C0000          <2> 		mov word [bp+0x0C], 0		
  1868 00000602 C7460E0000          <2> 		mov word [bp+0x0E], 0
  1869 00000607 C746100000          <2> 		mov word [bp+0x10], 0
  1870                              <2> 		
  1871 0000060C 8B4602              <2> 		mov ax,[bp+2]
  1872 0000060F 8B5E04              <2> 		mov bx,[bp+4]
  1873 00000612 8B4E06              <2> 		mov cx,[bp+6]
  1874 00000615 8B5608              <2> 		mov dx,[bp+8]		
  1875                              <2> 		__calc_dividendo1 ax, bx, cx, dx, ax, bx, cl
  1876                              <3>  stkopen 0x0D
  1877 00000618 83EC0D              <4>  sub word sp, %1
  1878 0000061B 54                  <4>  push sp
  1879 0000061C 5D                  <4>  pop bp
  1880 0000061D 894600              <3>  mov word [bp+0], %1
  1881 00000620 895E02              <3>  mov word [bp+2], %2
  1882 00000623 894E04              <3>  mov word [bp+4], %3
  1883 00000626 895606              <3>  mov word [bp+6], %4
  1884 00000629 E89A02              <3>  call proc_calc_dividendo1
  1885 0000062C 54                  <3>  push sp
  1886 0000062D 5D                  <3>  pop bp
  1887 0000062E 8B4608              <3>  mov word %5, [bp+0x08]
  1888 00000631 8B5E0A              <3>  mov word %6, [bp+0x0A]
  1889 00000634 8A4E0C              <3>  mov byte %7, [bp+0x0C]
  1890                              <3>  stkclose 0x0D
  1891 00000637 83C40D              <4>  add word sp, %1
  1892                              <2> 
  1893 0000063A 89E2                <2> 		mov dx,sp
  1894 0000063C 89D5                <2> 		mov bp,dx
  1895 0000063E 89460E              <2> 		mov word [bp+0x0E], ax
  1896 00000641 895E10              <2> 		mov word [bp+0x10], bx
  1897                              <2> 		
  1898 00000644 51                  <2> 		push cx
  1899                              <2> 		.l1:							
  1900 00000645 89E2                <2> 			mov dx,sp
  1901 00000647 89D5                <2> 			mov bp,dx		
  1902 00000649 83C502              <2> 			add bp,2
  1903 0000064C 8B460E              <2> 			mov ax, [bp+0x0E]
  1904 0000064F 8B5E10              <2> 			mov bx, [bp+0x10]
  1905 00000652 8B4E06              <2> 			mov cx, [bp+6]
  1906 00000655 8B5608              <2> 			mov dx, [bp+8]
  1907                              <2> 			__cmp32 ax, bx, cx, dx, cl
  1908                              <3>  stkopen 9
  1909 00000658 83EC09              <4>  sub word sp, %1
  1910 0000065B 54                  <4>  push sp
  1911 0000065C 5D                  <4>  pop bp
  1912 0000065D 894600              <3>  mov word [bp+0], %1
  1913 00000660 895E02              <3>  mov word [bp+2], %2
  1914 00000663 894E04              <3>  mov word [bp+4], %3
  1915 00000666 895606              <3>  mov word [bp+6], %4
  1916 00000669 E81F01              <3>  call proc_cmp32
  1917 0000066C 54                  <3>  push sp
  1918 0000066D 5D                  <3>  pop bp
  1919 0000066E 8A4E08              <3>  mov byte %5, [bp+8]
  1920                              <3>  stkclose 9
  1921 00000671 83C409              <4>  add word sp, %1
  1922                              <2> 			
  1923 00000674 51                  <2> 			push cx
  1924 00000675 89E2                <2> 			mov dx,sp
  1925 00000677 89D5                <2> 			mov bp,dx
  1926 00000679 83C504              <2> 			add bp,4
  1927 0000067C 8B460A              <2> 			mov ax,[bp+0x0A]
  1928 0000067F 8B5E0C              <2> 			mov bx,[bp+0x0C]
  1929 00000682 55                  <2> 			push bp
  1930                              <2> 			__shl32 ax, bx, 1
  1931                              <3>  stkopen 5
  1932 00000683 83EC05              <4>  sub word sp, %1
  1933 00000686 54                  <4>  push sp
  1934 00000687 5D                  <4>  pop bp
  1935 00000688 894600              <3>  mov word [bp+0], %1
  1936 0000068B 895E02              <3>  mov word [bp+2], %2
  1937 0000068E C6460401            <3>  mov byte [bp+4], %3
  1938 00000692 E82101              <3>  call proc_shl32
  1939 00000695 54                  <3>  push sp
  1940 00000696 5D                  <3>  pop bp
  1941 00000697 8B4600              <3>  mov word %1, [bp+0]
  1942 0000069A 8B5E02              <3>  mov word %2, [bp+2]
  1943                              <3>  stkclose 5
  1944 0000069D 83C405              <4>  add word sp, %1
  1945 000006A0 5D                  <2> 			pop bp				
  1946 000006A1 59                  <2> 			pop cx	
  1947                              <2> 									
  1948 000006A2 80F900              <2> 			cmp cl,0
  1949 000006A5 7C12                <2> 			jl .l11
  1950 000006A7 83C301              <2> 				add bx,1
  1951 000006AA 83D000              <2> 				adc ax,0	
  1952                              <2> 				
  1953 000006AD 8B4E06              <2> 				mov cx,[bp+6]
  1954 000006B0 8B5608              <2> 				mov dx,[bp+8]
  1955 000006B3 295610              <2> 				sub [bp+0x10],dx
  1956 000006B6 194E0E              <2> 				sbb [bp+0x0E],cx							
  1957                              <2> 			.l11:							
  1958 000006B9 89460A              <2> 			mov word [bp+0x0A], ax
  1959 000006BC 895E0C              <2> 			mov word [bp+0x0C], bx					
  1960                              <2> 					
  1961 000006BF 59                  <2> 			pop cx
  1962 000006C0 51                  <2> 			push cx												
  1963                              <2> 			
  1964 000006C1 80F920              <2> 			cmp cl,32
  1965 000006C4 7342                <2> 			jae .l2
  1966                              <2> 						
  1967 000006C6 59                  <2> 			pop cx
  1968                              <2> 			stkopen 9
  1969 000006C7 83EC09              <3>  sub word sp, %1
  1970 000006CA 54                  <3>  push sp
  1971 000006CB 5D                  <3>  pop bp
  1972 000006CC 8B460B              <2> 			mov ax,[bp+0x0B]
  1973 000006CF 894600              <2> 			mov word [bp+0], ax
  1974 000006D2 8B460D              <2> 			mov ax,[bp+0x0D]
  1975 000006D5 894602              <2> 			mov word [bp+2], ax
  1976 000006D8 8B4617              <2> 			mov ax,[bp+0x17]
  1977 000006DB 894604              <2> 			mov word [bp+4], ax
  1978 000006DE 8B4619              <2> 			mov ax,[bp+0x19]
  1979 000006E1 894606              <2> 			mov word [bp+6], ax
  1980 000006E4 884E08              <2> 			mov byte [bp+8], cl
  1981 000006E7 E8AD02              <2> 			call proc_calc_prox_dividendo
  1982 000006EA 89E0                <2> 			mov ax,sp
  1983 000006EC 89C5                <2> 			mov bp,ax
  1984 000006EE 8B4604              <2> 			mov word ax,[bp+4]
  1985 000006F1 8B5E06              <2> 			mov word bx,[bp+6]
  1986 000006F4 8A4E08              <2> 			mov byte cl,[bp+8] 
  1987                              <2> 			stkclose 9
  1988 000006F7 83C409              <3>  add word sp, %1
  1989 000006FA 89E2                <2> 			mov dx,sp
  1990 000006FC 89D5                <2> 			mov bp,dx
  1991 000006FE 89460E              <2> 			mov [bp+0x0E],ax
  1992 00000701 895E10              <2> 			mov [bp+0x10],bx
  1993 00000704 51                  <2> 			push cx
  1994 00000705 E93DFF              <2> 			jmp .l1
  1995                              <2> 		.l2:	
  1996 00000708 59                  <2> 		pop cx
  1997                              <2> 			
  1998 00000709 EB16                <2> 		jmp .enddiv
  1999                              <2> 	.qzero:
  2000 0000070B C7460A0000          <2> 		mov word [bp+0x0A], 0
  2001 00000710 C7460C0000          <2> 		mov word [bp+0x0C], 0
  2002 00000715 8B4602              <2> 		mov ax,[bp+2]
  2003 00000718 89460E              <2> 		mov word [bp+0x0E], ax
  2004 0000071B 8B4604              <2> 		mov ax,[bp+4]
  2005 0000071E 894610              <2> 		mov word [bp+0x10], ax	
  2006                              <2> 	.enddiv:
  2007 00000721 C6461200            <2> 		mov byte [bp+0x12], 0
  2008 00000725 EB04                <2> 		jmp .end
  2009                              <2> 	.divbyzero:
  2010 00000727 C6461201            <2> 		mov byte [bp+0x12], 1						
  2011                              <2> 	.end:		
  2012                              <2> 			
  2013 0000072B C3                  <2> 	ret
  2014                              <2> 		
  2015                              <2> proc_mul32:
  2016 0000072C 89E0                <2> 	mov ax,sp
  2017 0000072E 89C5                <2> 	mov bp,ax
  2018                              <2> 	
  2019 00000730 31D2                <2> 	xor dx,dx
  2020 00000732 8B4604              <2> 	mov ax,[bp+4]
  2021 00000735 F76608              <2> 	mul word [bp+8]
  2022                              <2> 	
  2023 00000738 89560A              <2> 	mov word [bp+0x0A], dx
  2024 0000073B 89460C              <2> 	mov word [bp+0x0C], ax	
  2025                              <2> 	
  2026 0000073E 31D2                <2> 	xor dx,dx
  2027 00000740 8B4604              <2> 	mov ax,[bp+4]
  2028 00000743 F76606              <2> 	mul word [bp+6]
  2029                              <2> 		
  2030 00000746 01460A              <2> 	add word [bp+0x0A],ax
  2031                              <2> 	
  2032 00000749 31D2                <2> 	xor dx,dx
  2033 0000074B 8B4602              <2> 	mov ax,[bp+2]
  2034 0000074E F76608              <2> 	mul word [bp+8]
  2035                              <2> 	
  2036 00000751 01460A              <2> 	add word [bp+0x0A],ax
  2037                              <2> 	
  2038 00000754 C3                  <2> 	ret
  2039                              <2> 
  2040                              <2> proc_add32:
  2041 00000755 89E0                <2> 	mov ax,sp
  2042 00000757 89C5                <2> 	mov bp,ax
  2043                              <2> 	
  2044 00000759 8B4602              <2> 	mov ax,[bp+2]
  2045 0000075C 8B5E04              <2> 	mov bx,[bp+4]
  2046 0000075F 8B4E06              <2> 	mov cx,[bp+6]
  2047 00000762 8B5608              <2> 	mov dx,[bp+8]
  2048                              <2> 	
  2049 00000765 01D3                <2> 	add bx,dx
  2050 00000767 11C8                <2> 	adc ax,cx
  2051                              <2> 	
  2052 00000769 89460A              <2> 	mov [bp+0x0A],ax
  2053 0000076C 895E0C              <2> 	mov [bp+0x0C],bx	
  2054                              <2> 	
  2055 0000076F C3                  <2> 	ret
  2056                              <2> 	
  2057                              <2> proc_sub32:
  2058 00000770 89E0                <2> 	mov ax,sp
  2059 00000772 89C5                <2> 	mov bp,ax
  2060                              <2> 	
  2061 00000774 8B4602              <2> 	mov ax,[bp+2]
  2062 00000777 8B5E04              <2> 	mov bx,[bp+4]
  2063 0000077A 8B4E06              <2> 	mov cx,[bp+6]
  2064 0000077D 8B5608              <2> 	mov dx,[bp+8]
  2065                              <2> 	
  2066 00000780 29D3                <2> 	sub bx,dx
  2067 00000782 19C8                <2> 	sbb ax,cx
  2068                              <2> 	
  2069 00000784 89460A              <2> 	mov [bp+0x0A],ax
  2070 00000787 895E0C              <2> 	mov [bp+0x0C],bx	
  2071                              <2> 	
  2072 0000078A C3                  <2> 	ret
  2073                              <2> 		
  2074                              <2> proc_cmp32:
  2075 0000078B 89E0                <2> 	mov ax,sp
  2076 0000078D 89C5                <2> 	mov bp,ax		
  2077                              <2> 		
  2078 0000078F 8B4602              <2> 	mov ax,[bp+2]
  2079 00000792 3B4606              <2> 	cmp word ax,[bp+6]
  2080 00000795 7F04                <2> 	jg .above
  2081 00000797 7C08                <2> 	jl .below
  2082 00000799 740C                <2> 	je .equal
  2083                              <2> 	.above:
  2084 0000079B C6460A01            <2> 		mov byte [bp+0x0A], 00000001b
  2085 0000079F EB14                <2> 		jmp .endcmp
  2086                              <2> 	.below:
  2087 000007A1 C6460A81            <2> 		mov byte [bp+0x0A], 10000001b
  2088 000007A5 EB0E                <2> 		jmp .endcmp
  2089                              <2> 	.equal:
  2090 000007A7 8B4604              <2> 		mov ax,[bp+4]
  2091 000007AA 3B4608              <2> 		cmp word ax,[bp+8]
  2092 000007AD 7FEC                <2> 		jg .above
  2093 000007AF 7CF0                <2> 		jl .below
  2094 000007B1 C6460A00            <2> 		mov byte [bp+0x0A], 00000000b
  2095                              <2> 	.endcmp:		
  2096 000007B5 C3                  <2> 	ret
  2097                              <2> 
  2098                              <2> proc_shl32:
  2099 000007B6 89E0                <2> 	mov ax,sp
  2100 000007B8 89C5                <2> 	mov bp,ax
  2101                              <2> 	
  2102 000007BA 31C0                <2> 	xor ax,ax
  2103 000007BC 8A4606              <2> 	mov byte al,[bp+6]
  2104 000007BF B310                <2> 	mov bl,10h
  2105 000007C1 F6F3                <2> 	div bl
  2106                              <2> 					
  2107 000007C3 3C01                <2> 	cmp al,1
  2108 000007C5 7204                <2> 	jb .zero
  2109 000007C7 7418                <2> 	je .one	
  2110 000007C9 EB27                <2> 	jmp .above
  2111                              <2> 	.zero:	
  2112 000007CB B110                <2> 		mov cl,10h
  2113 000007CD 28E1                <2> 		sub cl,ah
  2114 000007CF 8B5E04              <2> 		mov bx,[bp+4]		
  2115 000007D2 D3EB                <2> 		shr bx,cl
  2116                              <2> 		
  2117 000007D4 88E1                <2> 		mov cl,ah		
  2118 000007D6 D36602              <2> 		shl word [bp+2],cl
  2119 000007D9 015E02              <2> 		add word [bp+2],bx				
  2120 000007DC D36604              <2> 		shl word [bp+4],cl
  2121 000007DF EB1B                <2> 		jmp .endzo
  2122                              <2> 	.one:
  2123 000007E1 88E1                <2> 		mov cl,ah
  2124 000007E3 8B5E04              <2> 		mov bx, [bp+4]				
  2125 000007E6 D3E3                <2> 		shl bx, cl 
  2126 000007E8 895E02              <2> 		mov word [bp+2], bx
  2127 000007EB C746040000          <2> 		mov word [bp+4], 0
  2128 000007F0 EB0A                <2> 		jmp .endzo
  2129                              <2> 	.above:		
  2130 000007F2 C746020000          <2> 		mov word [bp+2], 0
  2131 000007F7 C746040000          <2> 		mov word [bp+4], 0
  2132                              <2> 	.endzo:	
  2133                              <2> 	
  2134 000007FC C3                  <2> 	ret
  2135                              <2> 	
  2136                              <2> proc_shr32:
  2137 000007FD 89E0                <2> 	mov ax,sp
  2138 000007FF 89C5                <2> 	mov bp,ax
  2139                              <2> 	
  2140 00000801 31C0                <2> 	xor ax,ax
  2141 00000803 8A4606              <2> 	mov byte al,[bp+6]
  2142 00000806 B310                <2> 	mov bl,10h
  2143 00000808 F6F3                <2> 	div bl
  2144                              <2> 					
  2145 0000080A 3C01                <2> 	cmp al,1
  2146 0000080C 7204                <2> 	jb .zero
  2147 0000080E 7418                <2> 	je .one	
  2148 00000810 EB27                <2> 	jmp .above
  2149                              <2> 	.zero:	
  2150 00000812 B110                <2> 		mov cl,10h
  2151 00000814 28E1                <2> 		sub cl,ah		
  2152 00000816 8B5E02              <2> 		mov bx,[bp+2]		
  2153 00000819 D3E3                <2> 		shl bx,cl
  2154                              <2> 		
  2155 0000081B 88E1                <2> 		mov cl,ah		
  2156 0000081D D36E02              <2> 		shr word [bp+2],cl
  2157 00000820 D36E04              <2> 		shr word [bp+4],cl
  2158 00000823 015E04              <2> 		add word [bp+4],bx	
  2159 00000826 EB1B                <2> 		jmp .endzo
  2160                              <2> 	.one:			
  2161 00000828 88E1                <2> 		mov cl,ah
  2162 0000082A 8B5E02              <2> 		mov bx,[bp+2]
  2163 0000082D D3EB                <2> 		shr bx,cl
  2164 0000082F C746020000          <2> 		mov word [bp+2],0 
  2165 00000834 895E04              <2> 		mov word [bp+4],bx
  2166 00000837 EB0A                <2> 		jmp .endzo
  2167                              <2> 	.above:		
  2168 00000839 C746020000          <2> 		mov word [bp+2],0
  2169 0000083E C746040000          <2> 		mov word [bp+4],0
  2170                              <2> 	.endzo:		
  2171                              <2> 
  2172 00000843 C3                  <2> 	ret
  2173                              <2> 	
  2174                              <2> proc__lzcount16:
  2175 00000844 89E0                <2> 	mov ax,sp
  2176 00000846 89C5                <2> 	mov bp,ax
  2177                              <2> 	
  2178 00000848 B100                <2> 	mov cl,0
  2179                              <2> 		
  2180 0000084A 8A6603              <2> 	mov ah, [bp+3]	
  2181 0000084D 80E4F0              <2> 	and ah,0xF0
  2182 00000850 80FC00              <2> 	cmp ah,0
  2183 00000853 7529                <2> 	jnz .end
  2184 00000855 FEC1                <2> 	inc cl
  2185                              <2> 	
  2186 00000857 8A6603              <2> 	mov ah, [bp+3]
  2187 0000085A 80E40F              <2> 	and ah,0x0F
  2188 0000085D 80FC00              <2> 	cmp ah,0
  2189 00000860 751C                <2> 	jnz .end
  2190 00000862 FEC1                <2> 	inc cl
  2191                              <2> 	
  2192 00000864 8A6602              <2> 	mov ah, [bp+2]
  2193 00000867 80E4F0              <2> 	and ah,0xF0
  2194 0000086A 80FC00              <2> 	cmp ah,0
  2195 0000086D 750F                <2> 	jnz .end
  2196 0000086F FEC1                <2> 	inc cl
  2197                              <2> 	
  2198 00000871 8A6602              <2> 	mov ah, [bp+2]
  2199 00000874 80E40F              <2> 	and ah,0x0F
  2200 00000877 80FC00              <2> 	cmp ah,0
  2201 0000087A 7502                <2> 	jnz .end
  2202 0000087C FEC1                <2> 	inc cl
  2203                              <2> 		
  2204                              <2> 	.end:
  2205 0000087E 884E04              <2> 	mov byte [bp+4], cl
  2206                              <2> 	
  2207 00000881 C3                  <2> 	ret
  2208                              <2> 
  2209                              <2> proc__lzbitcount16:
  2210 00000882 89E0                <2> 	mov ax,sp
  2211 00000884 89C5                <2> 	mov bp,ax
  2212                              <2> 	
  2213 00000886 8B4602              <2> 	mov word ax,[bp+2]
  2214                              <2> 		
  2215 00000889 B100                <2> 	mov cl,0
  2216                              <2> 	.l1:
  2217 0000088B 80F910              <2> 		cmp cl,16
  2218 0000088E 7310                <2> 		jae .l2
  2219                              <2> 		
  2220 00000890 89C3                <2> 		mov bx,ax
  2221 00000892 D3E3                <2> 		shl bx,cl
  2222 00000894 C1EB0F              <2> 		shr bx,15
  2223                              <2> 		
  2224 00000897 83FB00              <2> 		cmp bx,0
  2225 0000089A 7504                <2> 		jnz .l2
  2226                              <2> 		
  2227 0000089C FEC1                <2> 		inc cl		
  2228 0000089E EBEB                <2> 		jmp .l1
  2229                              <2> 	.l2:
  2230                              <2> 	
  2231 000008A0 884E04              <2> 	mov byte [bp+4], cl
  2232                              <2> 	
  2233 000008A3 C3                  <2> 	ret
  2234                              <2> 	
  2235                              <2> proc__lzbitcount8:
  2236 000008A4 89E0                <2> 	mov ax,sp
  2237 000008A6 89C5                <2> 	mov bp,ax
  2238                              <2> 	
  2239 000008A8 8A4602              <2> 	mov byte al,[bp+2]
  2240                              <2> 	
  2241 000008AB B100                <2> 	mov cl,0
  2242                              <2> 	.l1:
  2243 000008AD 80F908              <2> 		cmp cl,8
  2244 000008B0 7410                <2> 		je .l2
  2245                              <2> 		
  2246 000008B2 88C3                <2> 		mov bl,al
  2247 000008B4 D2E3                <2> 		shl bl,cl
  2248 000008B6 C0EB07              <2> 		shr bl,7
  2249                              <2> 		
  2250 000008B9 80FB00              <2> 		cmp bl,0
  2251 000008BC 7504                <2> 		jnz .l2
  2252                              <2> 		
  2253 000008BE FEC1                <2> 		inc cl		
  2254 000008C0 EBEB                <2> 		jmp .l1
  2255                              <2> 	.l2:
  2256                              <2> 	
  2257 000008C2 884E03              <2> 	mov byte [bp+3], cl
  2258                              <2> 		
  2259 000008C5 C3                  <2> 	ret
  2260                              <2> 	
  2261                              <2> proc_calc_dividendo1:
  2262 000008C6 89E0                <2> 	mov ax,sp
  2263 000008C8 89C5                <2> 	mov bp,ax
  2264                              <2> 	
  2265 000008CA 8B4606              <2> 	mov ax,[bp+6]
  2266 000008CD 8B5E08              <2> 	mov bx,[bp+8]
  2267 000008D0 55                  <2> 	push bp
  2268                              <2> 	__lzbitcount32 ax, bx, cl
  2269 000008D1 53                  <3>  push %2
  2270                              <3>  __lzbitcount16 %1, cl
  2271                              <4>  stkopen 3
  2272 000008D2 83EC03              <5>  sub word sp, %1
  2273 000008D5 54                  <5>  push sp
  2274 000008D6 5D                  <5>  pop bp
  2275 000008D7 894600              <4>  mov word [bp+0], %1
  2276 000008DA E8A5FF              <4>  call proc__lzbitcount16
  2277 000008DD 54                  <4>  push sp
  2278 000008DE 5D                  <4>  pop bp
  2279 000008DF 8A4E02              <4>  mov byte %2, [bp+2]
  2280                              <4>  stkclose 3
  2281 000008E2 83C403              <5>  add word sp, %1
  2282 000008E5 58                  <3>  pop ax
  2283 000008E6 80F910              <3>  cmp cl,16
  2284 000008E9 7217                <3>  jb .end
  2285 000008EB 51                  <3>  push cx
  2286                              <3>  __lzbitcount16 ax, al
  2287                              <4>  stkopen 3
  2288 000008EC 83EC03              <5>  sub word sp, %1
  2289 000008EF 54                  <5>  push sp
  2290 000008F0 5D                  <5>  pop bp
  2291 000008F1 894600              <4>  mov word [bp+0], %1
  2292 000008F4 E88BFF              <4>  call proc__lzbitcount16
  2293 000008F7 54                  <4>  push sp
  2294 000008F8 5D                  <4>  pop bp
  2295 000008F9 8A4602              <4>  mov byte %2, [bp+2]
  2296                              <4>  stkclose 3
  2297 000008FC 83C403              <5>  add word sp, %1
  2298 000008FF 59                  <3>  pop cx
  2299 00000900 00C1                <3>  add cl,al
  2300                              <3>  .end:
  2301 00000902 88C9                <3>  mov byte %3, cl
  2302 00000904 5D                  <2> 	pop bp
  2303 00000905 B320                <2> 	mov bl,32
  2304 00000907 28CB                <2> 	sub bl,cl
  2305 00000909 53                  <2> 	push bx
  2306                              <2> 		
  2307 0000090A 8B4602              <2> 	mov ax,[bp+2]
  2308 0000090D 8B5604              <2> 	mov dx,[bp+4]
  2309 00000910 55                  <2> 	push bp
  2310                              <2> 	__shr32 ax, dx, cl
  2311                              <3>  stkopen 5
  2312 00000911 83EC05              <4>  sub word sp, %1
  2313 00000914 54                  <4>  push sp
  2314 00000915 5D                  <4>  pop bp
  2315 00000916 894600              <3>  mov word [bp+0], %1
  2316 00000919 895602              <3>  mov word [bp+2], %2
  2317 0000091C 884E04              <3>  mov byte [bp+4], %3
  2318 0000091F E8DBFE              <3>  call proc_shr32
  2319 00000922 54                  <3>  push sp
  2320 00000923 5D                  <3>  pop bp
  2321 00000924 8B4600              <3>  mov word %1, [bp+0]
  2322 00000927 8B5602              <3>  mov word %2, [bp+2]
  2323                              <3>  stkclose 5
  2324 0000092A 83C405              <4>  add word sp, %1
  2325 0000092D 5D                  <2> 	pop bp
  2326 0000092E 50                  <2> 	push ax
  2327 0000092F 52                  <2> 	push dx	
  2328                              <2> 	
  2329 00000930 8B4E06              <2> 	mov cx,[bp+6]
  2330 00000933 8B5E08              <2> 	mov bx,[bp+8]
  2331                              <2> 	
  2332 00000936 55                  <2> 	push bp
  2333                              <2> 	__cmp32 ax, dx, cx, bx, cl
  2334                              <3>  stkopen 9
  2335 00000937 83EC09              <4>  sub word sp, %1
  2336 0000093A 54                  <4>  push sp
  2337 0000093B 5D                  <4>  pop bp
  2338 0000093C 894600              <3>  mov word [bp+0], %1
  2339 0000093F 895602              <3>  mov word [bp+2], %2
  2340 00000942 894E04              <3>  mov word [bp+4], %3
  2341 00000945 895E06              <3>  mov word [bp+6], %4
  2342 00000948 E840FE              <3>  call proc_cmp32
  2343 0000094B 54                  <3>  push sp
  2344 0000094C 5D                  <3>  pop bp
  2345 0000094D 8A4E08              <3>  mov byte %5, [bp+8]
  2346                              <3>  stkclose 9
  2347 00000950 83C409              <4>  add word sp, %1
  2348 00000953 5D                  <2> 	pop bp
  2349 00000954 5A                  <2> 	pop dx
  2350 00000955 58                  <2> 	pop ax
  2351 00000956 5B                  <2> 	pop bx
  2352                              <2> 		
  2353 00000957 80F900              <2> 	cmp cl,0
  2354 0000095A 7D2D                <2> 	jge .l1
  2355                              <2> 		stkopen 9
  2356 0000095C 83EC09              <3>  sub word sp, %1
  2357 0000095F 54                  <3>  push sp
  2358 00000960 5D                  <3>  pop bp
  2359 00000961 8B4E0B              <2> 		mov cx,[bp+0x0B]
  2360 00000964 894E00              <2> 		mov word [bp+0], cx
  2361 00000967 8B4E0D              <2> 		mov cx,[bp+0x0D]
  2362 0000096A 894E02              <2> 		mov word [bp+2], cx
  2363 0000096D 894604              <2> 		mov word [bp+4], ax
  2364 00000970 895606              <2> 		mov word [bp+6], dx
  2365 00000973 885E08              <2> 		mov byte [bp+8], bl
  2366 00000976 E81E00              <2> 		call proc_calc_prox_dividendo
  2367 00000979 89E0                <2> 		mov ax,sp
  2368 0000097B 89C5                <2> 		mov bp,ax
  2369 0000097D 8B4604              <2> 		mov word ax,[bp+4]
  2370 00000980 8B5606              <2> 		mov word dx,[bp+6]
  2371 00000983 8A5E08              <2> 		mov byte bl,[bp+8] 
  2372                              <2> 		stkclose 9		 
  2373 00000986 83C409              <3>  add word sp, %1
  2374                              <2> 	.l1:
  2375                              <2> 	
  2376 00000989 89E1                <2> 	mov cx,sp
  2377 0000098B 89CD                <2> 	mov bp,cx
  2378 0000098D 89460A              <2> 	mov word [bp+0x0A], ax
  2379 00000990 89560C              <2> 	mov word [bp+0x0C], dx
  2380 00000993 885E0E              <2> 	mov byte [bp+0x0E], bl	 
  2381                              <2> 	
  2382 00000996 C3                  <2> 	ret
  2383                              <2> 
  2384                              <2> proc_calc_prox_dividendo:
  2385 00000997 89E0                <2> 	mov ax,sp
  2386 00000999 89C5                <2> 	mov bp,ax
  2387                              <2> 	
  2388 0000099B 30E4                <2> 	xor ah,ah	
  2389 0000099D 8A460A              <2> 	mov al,[bp+0x0A]
  2390 000009A0 B310                <2> 	mov bl,10h
  2391 000009A2 F6F3                <2> 	div bl
  2392                              <2> 	
  2393 000009A4 3C00                <2> 	cmp al,0
  2394 000009A6 7402                <2> 	jz .zero
  2395 000009A8 EB05                <2> 	jmp .one
  2396                              <2> 	.zero:
  2397 000009AA 8B5E02              <2> 		mov bx,[bp+2]
  2398 000009AD EB03                <2> 		jmp .endcmp
  2399                              <2> 	.one:
  2400 000009AF 8B5E04              <2> 		mov bx,[bp+4]		
  2401                              <2> 	.endcmp:
  2402                              <2> 		
  2403 000009B2 88E1                <2> 	mov cl,ah
  2404 000009B4 D3E3                <2> 	shl bx,cl
  2405 000009B6 C1EB0F              <2> 	shr bx,15
  2406                              <2> 	
  2407 000009B9 8B4606              <2> 	mov ax,[bp+6]
  2408 000009BC 8B5608              <2> 	mov dx,[bp+8]
  2409 000009BF 53                  <2> 	push bx
  2410                              <2> 	__shl32 ax, dx, 1
  2411                              <3>  stkopen 5
  2412 000009C0 83EC05              <4>  sub word sp, %1
  2413 000009C3 54                  <4>  push sp
  2414 000009C4 5D                  <4>  pop bp
  2415 000009C5 894600              <3>  mov word [bp+0], %1
  2416 000009C8 895602              <3>  mov word [bp+2], %2
  2417 000009CB C6460401            <3>  mov byte [bp+4], %3
  2418 000009CF E8E4FD              <3>  call proc_shl32
  2419 000009D2 54                  <3>  push sp
  2420 000009D3 5D                  <3>  pop bp
  2421 000009D4 8B4600              <3>  mov word %1, [bp+0]
  2422 000009D7 8B5602              <3>  mov word %2, [bp+2]
  2423                              <3>  stkclose 5
  2424 000009DA 83C405              <4>  add word sp, %1
  2425 000009DD 5B                  <2> 	pop bx
  2426                              <2> 	
  2427 000009DE 01DA                <2> 	add dx,bx
  2428 000009E0 83D000              <2> 	adc ax,0
  2429                              <2> 
  2430 000009E3 89E1                <2> 	mov cx,sp
  2431 000009E5 89CD                <2> 	mov bp,cx	
  2432 000009E7 894606              <2> 	mov [bp+6],ax
  2433 000009EA 895608              <2> 	mov [bp+8],dx
  2434                              <2> 	
  2435 000009ED FE460A              <2> 	inc byte [bp+0x0A]
  2436                              <2> 	
  2437 000009F0 C3                  <2> 	ret
  2438                              <2> 	
  2439                              <2> %endif
  2440                              <1> 	%include "lib/system.mac"
  2441                              <2>  
  2442                              <2> %ifndef SYSTEM_MAC
  2443                              <2>  	%define SYSTEM_MAC
  2444                              <2>  	
  2445                              <2> 	%ifndef TRUE
  2446                              <2> 		%define TRUE 01h
  2447                              <2> 	%endif
  2448                              <2> 	%ifndef FALSE
  2449                              <2> 		%define FALSE 00h
  2450                              <2> 	%endif 	
  2451                              <2>  	
  2452                              <2> %macro int16toreg 2
  2453                              <2> 	int16toreg cs, %1, %2
  2454                              <2> %endmacro
  2455                              <2> 
  2456                              <2> %macro regtoint16 2
  2457                              <2> 	regtoint16 %1, cs, %2
  2458                              <2> %endmacro
  2459                              <2> 
  2460                              <2> %macro int16toreg 3
  2461                              <2> 	push %2
  2462                              <2> 	push %1
  2463                              <2> 	pop ds
  2464                              <2> 	pop si
  2465                              <2> 	mov word %3,[si]	
  2466                              <2> %endmacro
  2467                              <2> 
  2468                              <2> %macro regtoint16 3
  2469                              <2> 	push %3
  2470                              <2> 	push %2
  2471                              <2> 	pop ds
  2472                              <2> 	pop si
  2473                              <2> 	mov word [si],%1	
  2474                              <2> %endmacro
  2475                              <2> 
  2476                              <2> %macro mov32 2
  2477                              <2> 	mov32 cs, %1, cs, %2
  2478                              <2> %endmacro
  2479                              <2> 
  2480                              <2> %macro mov16 2
  2481                              <2> 	mov16 cs, %1, cs, %2
  2482                              <2> %endmacro
  2483                              <2> 
  2484                              <2> %macro mov32 4
  2485                              <2> 	mov ax,%3
  2486                              <2> 	mov ds,ax
  2487                              <2> 	mov cx,[%4+2]
  2488                              <2> 	mov dx,[%4]
  2489                              <2> 	mov ax,%1
  2490                              <2> 	mov ds,ax
  2491                              <2> 	mov [%2+2],cx
  2492                              <2> 	mov [%2],dx
  2493                              <2> %endmacro
  2494                              <2> 
  2495                              <2> %macro mov16 4
  2496                              <2> 	mov ax,%3
  2497                              <2> 	mov ds,ax
  2498                              <2> 	mov bx,[%4]
  2499                              <2> 	mov ax,%1
  2500                              <2> 	mov ds,ax
  2501                              <2> 	mov [%2],bx
  2502                              <2> %endmacro
  2503                              <2>  	 	
  2504                              <2> %macro mformat 4
  2505                              <2> 	stkopen 8
  2506                              <2> 	mov word [ bp + 0 ], %1
  2507                              <2> 	mov word [ bp + 2 ], %2
  2508                              <2> 	mov word [ bp + 4 ], %3
  2509                              <2> 	mov word [ bp + 6 ], %4
  2510                              <2> 	call kernel_segment:mformat
  2511                              <2> 	stkclose 8
  2512                              <2> %endmacro
  2513                              <2> 
  2514                              <2> %macro malloc 6
  2515                              <2> 	stkopen 0Bh
  2516                              <2> 	mov word [ bp + 4 ], %3
  2517                              <2> 	mov word [ bp + 6 ], %4
  2518                              <2> 	mov word [ bp + 8 ], %5	
  2519                              <2> 	call kernel_segment:malloc
  2520                              <2> 	push sp
  2521                              <2> 	pop bp
  2522                              <2> 	mov word %1, [ bp ]
  2523                              <2> 	mov word %2, [ bp + 2 ]
  2524                              <2> 	mov byte %6, [ bp + 0x0A ]
  2525                              <2> 	stkclose 0Bh
  2526                              <2> %endmacro 	
  2527                              <2> 
  2528                              <2> %macro laddr 2
  2529                              <2> 	laddr %1, %2, %1, %2
  2530                              <2> %endmacro
  2531                              <2> 
  2532                              <2> %macro faddr 2
  2533                              <2> 	faddr %1, %2, %1, %2
  2534                              <2> %endmacro
  2535                              <2>  	
  2536                              <2> %macro laddr 4
  2537                              <2> 	stkopen 8
  2538                              <2> 	mov word [ bp + 4 ], %3
  2539                              <2> 	mov word [ bp + 6 ], %4	
  2540                              <2> 	call kernel_segment:laddr
  2541                              <2> 	push sp
  2542                              <2> 	pop bp
  2543                              <2> 	mov word %1, [ bp + 0 ]
  2544                              <2> 	mov word %2, [ bp + 2 ]	
  2545                              <2> 	stkclose 8
  2546                              <2> %endmacro
  2547                              <2> 
  2548                              <2> %macro faddr 4
  2549                              <2> 	stkopen 8
  2550                              <2> 	mov word [ bp + 4 ], %3
  2551                              <2> 	mov word [ bp + 6 ], %4	
  2552                              <2> 	call kernel_segment:faddr
  2553                              <2> 	push sp
  2554                              <2> 	pop bp
  2555                              <2> 	mov word %1, [ bp + 0 ]
  2556                              <2> 	mov word %2, [ bp + 2 ]	
  2557                              <2> 	stkclose 8
  2558                              <2> %endmacro	
  2559                              <2>  
  2560                              <2> 
  2561                              <2> %macro stkopen 1		
  2562                              <2> 	sub word sp, %1
  2563                              <2> 	push sp
  2564                              <2> 	pop bp
  2565                              <2> %endmacro
  2566                              <2> 
  2567                              <2> %macro stkclose 1
  2568                              <2> 	add word sp, %1
  2569                              <2> %endmacro
  2570                              <2> 
  2571                              <2> %macro stkload 1-* 	
  2572                              <2>  	%rep %0
  2573                              <2>  	 	%rotate -1
  2574                              <2>  		pop %1
  2575                              <2>  	%endrep
  2576                              <2>  	%rep %0
  2577                              <2>  		push %1
  2578                              <2>  		%rotate 1
  2579                              <2>  	%endrep
  2580                              <2> %endmacro
  2581                              <2> 
  2582                              <2> %macro stkpush 1-* 	
  2583                              <2>  	%rep %0
  2584                              <2>  		push %1
  2585                              <2>  		%rotate 1
  2586                              <2>  	%endrep 	
  2587                              <2> %endmacro
  2588                              <2>  
  2589                              <2> %macro stkpop 1-*
  2590                              <2>  	%rep %0
  2591                              <2>  	 	%rotate -1
  2592                              <2>  		pop %1
  2593                              <2>  	%endrep 	 	
  2594                              <2> %endmacro
  2595                              <2> 
  2596                              <2> %endif 
  2597                              <1> 
  2598                              <1> %macro cmp16 3
  2599                              <1> 	cmp16 cs, %1, cs, %2, %3
  2600                              <1> %endmacro
  2601                              <1> 
  2602                              <1> %macro add16 2
  2603                              <1> 	add16 cs, %1, cs, %2
  2604                              <1> %endmacro
  2605                              <1> 
  2606                              <1> %macro sub16 2
  2607                              <1> 	sub16 cs, %1, cs, %2
  2608                              <1> %endmacro
  2609                              <1> 
  2610                              <1> %macro int32to16 2
  2611                              <1> 	int32to16 cs, %1, %2
  2612                              <1> %endmacro
  2613                              <1> 
  2614                              <1> %macro int16to32 2
  2615                              <1> 	int16to32 %1, cs, %2
  2616                              <1> %endmacro
  2617                              <1> 
  2618                              <1> %macro setsig 1
  2619                              <1> 	setsig cs, %1
  2620                              <1> %endmacro
  2621                              <1> 
  2622                              <1> %macro clrsig 1
  2623                              <1> 	clrsig cs, %1
  2624                              <1> %endmacro
  2625                              <1> 
  2626                              <1> %macro idiv32 5
  2627                              <1> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2628                              <1> %endmacro
  2629                              <1> 
  2630                              <1> %macro imul32 3
  2631                              <1> 	imul32 cs, %1, cs, %2, cs, %3
  2632                              <1> %endmacro
  2633                              <1> 
  2634                              <1> %macro div32 5
  2635                              <1> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2636                              <1> %endmacro
  2637                              <1> 
  2638                              <1> %macro mul32 3
  2639                              <1> 	mul32 cs, %1, cs, %2, cs, %3
  2640                              <1> %endmacro
  2641                              <1> 	
  2642                              <1> %macro add32 3
  2643                              <1> 	add32 cs, %1, cs, %2, cs, %3
  2644                              <1> %endmacro
  2645                              <1> 
  2646                              <1> %macro sub32 3
  2647                              <1> 	sub32 cs, %1, cs, %2, cs, %3
  2648                              <1> %endmacro
  2649                              <1> 
  2650                              <1> %macro int32to16 3
  2651                              <1> 	stkopen 0x06
  2652                              <1> 	mov ax,%1
  2653                              <1> 	mov ds,ax
  2654                              <1> 	mov ax,[%2+2]
  2655                              <1> 	mov word [bp+0], ax
  2656                              <1> 	mov ax,[%2]	
  2657                              <1> 	mov word [bp+2], ax
  2658                              <1> 	call proc_int32to16
  2659                              <1> 	mov ax,sp
  2660                              <1> 	mov bp,ax
  2661                              <1> 	mov ax,[bp+4]
  2662                              <1> 	mov word %3, ax	
  2663                              <1> 	stkclose 0x06
  2664                              <1> %endmacro
  2665                              <1> 
  2666                              <1> %macro int16to32 3
  2667                              <1> 	stkopen 0x06
  2668                              <1> 	mov word [bp+0], %1	
  2669                              <1> 	call proc_int16to32
  2670                              <1> 	mov ax,sp
  2671                              <1> 	mov bp,ax
  2672                              <1> 	mov ax,%2
  2673                              <1> 	mov ds,ax
  2674                              <1> 	mov ax,[bp+2]
  2675                              <1> 	mov [%3+2],ax
  2676                              <1> 	mov ax,[bp+4]
  2677                              <1> 	mov [%3],ax	
  2678                              <1> 	stkclose 0x06
  2679                              <1> %endmacro
  2680                              <1> 
  2681                              <1> %macro setsig 2
  2682                              <1> 	stkopen 0x02
  2683                              <1> 	mov ax,%1
  2684                              <1> 	mov ds,ax
  2685                              <1> 	mov ax,[%2+2]
  2686                              <1> 	mov word [bp+0], ax
  2687                              <1> 	call proc_setsig
  2688                              <1> 	mov ax,sp
  2689                              <1> 	mov bp,ax
  2690                              <1> 	mov ax,%1
  2691                              <1> 	mov ds,ax
  2692                              <1> 	mov ax,[bp+0]
  2693                              <1> 	mov word [%2+2], ax
  2694                              <1> 	stkclose 0x02
  2695                              <1> %endmacro
  2696                              <1> 
  2697                              <1> %macro clrsig 2
  2698                              <1> 	stkopen 0x02
  2699                              <1> 	mov ax,%1
  2700                              <1> 	mov ds,ax
  2701                              <1> 	mov ax,[%2+2]
  2702                              <1> 	mov word [bp+0], ax
  2703                              <1> 	call proc_clrsig
  2704                              <1> 	mov ax,sp
  2705                              <1> 	mov bp,ax
  2706                              <1> 	mov ax,%1
  2707                              <1> 	mov ds,ax
  2708                              <1> 	mov ax,[bp+0]
  2709                              <1> 	mov word [%2+2], ax
  2710                              <1> 	stkclose 0x02
  2711                              <1> %endmacro
  2712                              <1> 
  2713                              <1> %macro div32 10
  2714                              <1> 	stkopen 0x11
  2715                              <1> 	mov ax,%1
  2716                              <1> 	mov ds,ax
  2717                              <1> 	mov ax,[%2+2]
  2718                              <1> 	mov word [bp+0], ax
  2719                              <1> 	mov ax,[%2]
  2720                              <1> 	mov word [bp+2], ax
  2721                              <1> 	mov ax,%3
  2722                              <1> 	mov ds,ax
  2723                              <1> 	mov ax,[%4+2]
  2724                              <1> 	mov word [bp+4], ax
  2725                              <1> 	mov ax,[%4]
  2726                              <1> 	mov word [bp+6], ax
  2727                              <1> 	call proc_div32
  2728                              <1> 	mov ax,sp
  2729                              <1> 	mov bp,ax
  2730                              <1> 	mov ax,%5
  2731                              <1> 	mov ds,ax
  2732                              <1> 	mov word ax, [bp+8]
  2733                              <1> 	mov word [%6+2], ax
  2734                              <1> 	mov word ax, [bp+0x0A]
  2735                              <1> 	mov word [%6], ax
  2736                              <1> 	mov ax,%7
  2737                              <1> 	mov ds,ax
  2738                              <1> 	mov word ax,[bp+0x0C]
  2739                              <1> 	mov word [%8+2],ax
  2740                              <1> 	mov word ax,[bp+0x0E]
  2741                              <1> 	mov word [%8],ax
  2742                              <1> 	mov ax,%9
  2743                              <1> 	mov ds,ax
  2744                              <1> 	mov byte al,[bp+0x10]
  2745                              <1> 	mov byte [%10],al
  2746                              <1> 	stkclose 0x11
  2747                              <1> %endmacro
  2748                              <1> 	
  2749                              <1> %macro mul32 6
  2750                              <1> 	stkopen 0x0C
  2751                              <1> 	mov ax,%1
  2752                              <1> 	mov ds,ax
  2753                              <1> 	mov ax,[%2+2]
  2754                              <1> 	mov word [bp+0], ax
  2755                              <1> 	mov ax,[%2]
  2756                              <1> 	mov word [bp+2], ax
  2757                              <1> 	mov ax,%3
  2758                              <1> 	mov ds,ax
  2759                              <1> 	mov ax,[%4+2]
  2760                              <1> 	mov word [bp+4], ax
  2761                              <1> 	mov ax,[%4]
  2762                              <1> 	mov word [bp+6], ax
  2763                              <1> 	call proc_mul32
  2764                              <1> 	mov ax,sp
  2765                              <1> 	mov bp,ax
  2766                              <1> 	mov ax,%5
  2767                              <1> 	mov ds,ax
  2768                              <1> 	mov word ax, [bp+8]
  2769                              <1> 	mov word [%6+2], ax
  2770                              <1> 	mov word ax, [bp+0x0A]
  2771                              <1> 	mov word [%6], ax
  2772                              <1> 	stkclose 0x0C
  2773                              <1> %endmacro	
  2774                              <1> 	
  2775                              <1> %macro add32 6
  2776                              <1> 	stkopen 0x0C
  2777                              <1> 	mov ax,%1
  2778                              <1> 	mov ds,ax
  2779                              <1> 	mov ax,[%2+2]
  2780                              <1> 	mov word [bp+0], ax
  2781                              <1> 	mov ax,[%2]
  2782                              <1> 	mov word [bp+2], ax
  2783                              <1> 	mov ax,%3
  2784                              <1> 	mov ds,ax
  2785                              <1> 	mov ax,[%4+2]
  2786                              <1> 	mov word [bp+4], ax
  2787                              <1> 	mov ax,[%4]
  2788                              <1> 	mov word [bp+6], ax
  2789                              <1> 	call proc_add32
  2790                              <1> 	mov ax,sp
  2791                              <1> 	mov bp,ax
  2792                              <1> 	mov ax,%5
  2793                              <1> 	mov ds,ax
  2794                              <1> 	mov word ax, [bp+8]
  2795                              <1> 	mov word [%6+2], ax
  2796                              <1> 	mov word ax, [bp+0x0A]
  2797                              <1> 	mov word [%6], ax
  2798                              <1> 	stkclose 0x0C
  2799                              <1> %endmacro
  2800                              <1> 
  2801                              <1> %macro sub32 6
  2802                              <1> 	stkopen 0x0C
  2803                              <1> 	mov ax,%1
  2804                              <1> 	mov ds,ax
  2805                              <1> 	mov ax,[%2+2]
  2806                              <1> 	mov word [bp+0], ax
  2807                              <1> 	mov ax,[%2]
  2808                              <1> 	mov word [bp+2], ax
  2809                              <1> 	mov ax,%3
  2810                              <1> 	mov ds,ax
  2811                              <1> 	mov ax,[%4+2]
  2812                              <1> 	mov word [bp+4], ax
  2813                              <1> 	mov ax,[%4]
  2814                              <1> 	mov word [bp+6], ax
  2815                              <1> 	call proc_sub32
  2816                              <1> 	mov ax,sp
  2817                              <1> 	mov bp,ax
  2818                              <1> 	mov ax,%5
  2819                              <1> 	mov ds,ax
  2820                              <1> 	mov word ax, [bp+8]
  2821                              <1> 	mov word [%6+2], ax
  2822                              <1> 	mov word ax, [bp+0x0A]
  2823                              <1> 	mov word [%6], ax
  2824                              <1> 	stkclose 0x0C
  2825                              <1> %endmacro
  2826                              <1> 
  2827                              <1> %macro idiv32 10
  2828                              <1> 	stkopen 0x11
  2829                              <1> 	mov ax,%1
  2830                              <1> 	mov ds,ax
  2831                              <1> 	mov ax,[%2+2]
  2832                              <1> 	mov word [bp+0], ax
  2833                              <1> 	mov ax,[%2]
  2834                              <1> 	mov word [bp+2], ax
  2835                              <1> 	mov ax,%3
  2836                              <1> 	mov ds,ax
  2837                              <1> 	mov ax,[%4+2]
  2838                              <1> 	mov word [bp+4], ax
  2839                              <1> 	mov ax,[%4]
  2840                              <1> 	mov word [bp+6], ax
  2841                              <1> 	call proc_idiv32
  2842                              <1> 	mov ax,sp
  2843                              <1> 	mov bp,ax
  2844                              <1> 	mov ax,%5
  2845                              <1> 	mov ds,ax
  2846                              <1> 	mov word ax, [bp+8]
  2847                              <1> 	mov word [%6+2], ax
  2848                              <1> 	mov word ax, [bp+0x0A]
  2849                              <1> 	mov word [%6], ax
  2850                              <1> 	mov ax,%7
  2851                              <1> 	mov ds,ax
  2852                              <1> 	mov word ax,[bp+0x0C]
  2853                              <1> 	mov word [%8+2],ax
  2854                              <1> 	mov word ax,[bp+0x0E]
  2855                              <1> 	mov word [%8],ax
  2856                              <1> 	mov ax,%9
  2857                              <1> 	mov ds,ax
  2858                              <1> 	mov byte al,[bp+0x10]
  2859                              <1> 	mov byte [%10],al
  2860                              <1> 	stkclose 0x11
  2861                              <1> %endmacro
  2862                              <1> 
  2863                              <1> %macro imul32 6
  2864                              <1> 	stkopen 0x0C
  2865                              <1> 	mov ax,%1
  2866                              <1> 	mov ds,ax
  2867                              <1> 	mov ax,[%2+2]
  2868                              <1> 	mov word [bp+0], ax
  2869                              <1> 	mov ax,[%2]
  2870                              <1> 	mov word [bp+2], ax
  2871                              <1> 	mov ax,%3
  2872                              <1> 	mov ds,ax
  2873                              <1> 	mov ax,[%4+2]
  2874                              <1> 	mov word [bp+4], ax
  2875                              <1> 	mov ax,[%4]
  2876                              <1> 	mov word [bp+6], ax
  2877                              <1> 	call proc_imul32
  2878                              <1> 	mov ax,sp
  2879                              <1> 	mov bp,ax
  2880                              <1> 	mov ax,%5
  2881                              <1> 	mov ds,ax
  2882                              <1> 	mov word ax, [bp+8]
  2883                              <1> 	mov word [%6+2], ax
  2884                              <1> 	mov word ax, [bp+0x0A]
  2885                              <1> 	mov word [%6], ax
  2886                              <1> 	stkclose 0x0C
  2887                              <1> %endmacro
  2888                              <1> 	
  2889                              <1> %macro cmp32 3
  2890                              <1> 	cmp32 cs, %1, cs, %2, %3
  2891                              <1> %endmacro	
  2892                              <1> 	
  2893                              <1> %macro cmp32 5
  2894                              <1> 	stkopen 9
  2895                              <1> 	mov ax,%1
  2896                              <1> 	mov ds,ax
  2897                              <1> 	mov word ax,[%2+2]
  2898                              <1> 	mov word [bp+0], ax
  2899                              <1> 	mov word ax,[%2]
  2900                              <1> 	mov word [bp+2], ax	
  2901                              <1> 	mov ax,%3
  2902                              <1> 	mov ds,ax
  2903                              <1> 	mov word ax,[%4+2]
  2904                              <1> 	mov word [bp+4], ax
  2905                              <1> 	mov word ax,[%4]
  2906                              <1> 	mov word [bp+6], ax	
  2907                              <1> 	call proc_cmp32
  2908                              <1> 	mov ax,sp
  2909                              <1> 	mov bp,ax
  2910                              <1> 	mov al,[bp+8]
  2911                              <1> 	mov byte %5,al
  2912                              <1> 	stkclose 9
  2913                              <1> %endmacro
  2914                              <1> 	
  2915                              <1> %macro shl32 2
  2916                              <1> 	shl32 cs, %1, %2
  2917                              <1> %endmacro	
  2918                              <1> 	
  2919                              <1> %macro shl32 3
  2920                              <1> 	stkopen 5
  2921                              <1> 	mov ax,%1
  2922                              <1> 	mov ds,ax
  2923                              <1> 	mov word ax,[%2+2]
  2924                              <1> 	mov word [bp+0], ax
  2925                              <1> 	mov word ax,[%2]
  2926                              <1> 	mov word [bp+2], ax
  2927                              <1> 	mov byte al, %3
  2928                              <1> 	mov byte [bp+4], al 
  2929                              <1> 	call proc_shl32
  2930                              <1> 	mov ax,sp
  2931                              <1> 	mov bp,ax
  2932                              <1> 	mov ax,%1
  2933                              <1> 	mov ds,ax
  2934                              <1> 	mov ax,[bp+0]
  2935                              <1> 	mov word [%2+2],ax
  2936                              <1> 	mov ax,[bp+2]
  2937                              <1> 	mov word [%2],ax
  2938                              <1> 	stkclose 5
  2939                              <1> %endmacro
  2940                              <1> 
  2941                              <1> 
  2942                              <1> %macro shr32 2
  2943                              <1> 	shr32 cs, %1, %2
  2944                              <1> %endmacro	
  2945                              <1> 	
  2946                              <1> %macro shr32 3
  2947                              <1> 	stkopen 5
  2948                              <1> 	mov ax,%1
  2949                              <1> 	mov ds,ax
  2950                              <1> 	mov word ax,[%2+2]
  2951                              <1> 	mov word [bp+0], ax
  2952                              <1> 	mov word ax,[%2]
  2953                              <1> 	mov word [bp+2], ax
  2954                              <1> 	mov byte al, %3
  2955                              <1> 	mov byte [bp+4], al 
  2956                              <1> 	call proc_shr32
  2957                              <1> 	mov ax,sp
  2958                              <1> 	mov bp,ax
  2959                              <1> 	mov ax,%1
  2960                              <1> 	mov ds,ax
  2961                              <1> 	mov ax,[bp+0]
  2962                              <1> 	mov word [%2+2],ax
  2963                              <1> 	mov ax,[bp+2]
  2964                              <1> 	mov word [%2],ax
  2965                              <1> 	stkclose 5
  2966                              <1> %endmacro
  2967                              <1> 
  2968                              <1> %macro add16 4
  2969                              <1> 	mov ax,%1
  2970                              <1> 	mov ds,ax
  2971                              <1> 	mov bx,[%2]
  2972                              <1> 	mov ax,%3
  2973                              <1> 	mov ds,ax
  2974                              <1> 	add bx,[%4]
  2975                              <1> 	
  2976                              <1> 	mov ax,%1
  2977                              <1> 	mov ds,ax
  2978                              <1> 	mov [%2],bx
  2979                              <1> %endmacro
  2980                              <1> 
  2981                              <1> %macro sub16 4
  2982                              <1> 	mov ax,%1
  2983                              <1> 	mov ds,ax
  2984                              <1> 	mov bx,[%2]
  2985                              <1> 	mov ax,%3
  2986                              <1> 	mov ds,ax
  2987                              <1> 	sub bx,[%4]
  2988                              <1> 	
  2989                              <1> 	mov ax,%1
  2990                              <1> 	mov ds,ax
  2991                              <1> 	mov [%2],bx
  2992                              <1> %endmacro
  2993                              <1> 
  2994                              <1> %macro cmp16 5
  2995                              <1> 	mov ax,%1
  2996                              <1> 	mov ds,ax
  2997                              <1> 	mov bx,[%2]
  2998                              <1> 	mov ax,%3
  2999                              <1> 	mov ds,ax
  3000                              <1> 	mov	cx,[%4]
  3001                              <1> 	
  3002                              <1> 	cmp bx,cx
  3003                              <1> 	jg %%above
  3004                              <1> 	jl %%below
  3005                              <1> 		mov byte %5, 0
  3006                              <1> 		jmp %%endcmp
  3007                              <1> 	%%above:
  3008                              <1> 		mov byte %5, 1
  3009                              <1> 		jmp %%endcmp
  3010                              <1> 	%%below:
  3011                              <1> 		mov byte %5, -1
  3012                              <1> 	%%endcmp:
  3013                              <1> %endmacro
  3014                              <1> 	
  3015                              <1> %endif
  3016                                  %include "lib/float.mac"
  3017                              <1> 
  3018                              <1> %ifndef FLOAT_MAC
  3019                              <1> 	%define FLOAT_MAC
  3020                              <1> 	
  3021                              <1> 	%include "lib/float.asm"
  3022                              <2> 
  3023                              <2> %ifndef FLOAT_ASM
  3024                              <2> 	%define FLOAT_ASM
  3025                              <2> 	
  3026                              <2> 	%include "lib/system.mac"
  3027                              <3>  
  3028                              <3> %ifndef SYSTEM_MAC
  3029                              <3>  	%define SYSTEM_MAC
  3030                              <3>  	
  3031                              <3> 	%ifndef TRUE
  3032                              <3> 		%define TRUE 01h
  3033                              <3> 	%endif
  3034                              <3> 	%ifndef FALSE
  3035                              <3> 		%define FALSE 00h
  3036                              <3> 	%endif 	
  3037                              <3>  	
  3038                              <3> %macro int16toreg 2
  3039                              <3> 	int16toreg cs, %1, %2
  3040                              <3> %endmacro
  3041                              <3> 
  3042                              <3> %macro regtoint16 2
  3043                              <3> 	regtoint16 %1, cs, %2
  3044                              <3> %endmacro
  3045                              <3> 
  3046                              <3> %macro int16toreg 3
  3047                              <3> 	push %2
  3048                              <3> 	push %1
  3049                              <3> 	pop ds
  3050                              <3> 	pop si
  3051                              <3> 	mov word %3,[si]	
  3052                              <3> %endmacro
  3053                              <3> 
  3054                              <3> %macro regtoint16 3
  3055                              <3> 	push %3
  3056                              <3> 	push %2
  3057                              <3> 	pop ds
  3058                              <3> 	pop si
  3059                              <3> 	mov word [si],%1	
  3060                              <3> %endmacro
  3061                              <3> 
  3062                              <3> %macro mov32 2
  3063                              <3> 	mov32 cs, %1, cs, %2
  3064                              <3> %endmacro
  3065                              <3> 
  3066                              <3> %macro mov16 2
  3067                              <3> 	mov16 cs, %1, cs, %2
  3068                              <3> %endmacro
  3069                              <3> 
  3070                              <3> %macro mov32 4
  3071                              <3> 	mov ax,%3
  3072                              <3> 	mov ds,ax
  3073                              <3> 	mov cx,[%4+2]
  3074                              <3> 	mov dx,[%4]
  3075                              <3> 	mov ax,%1
  3076                              <3> 	mov ds,ax
  3077                              <3> 	mov [%2+2],cx
  3078                              <3> 	mov [%2],dx
  3079                              <3> %endmacro
  3080                              <3> 
  3081                              <3> %macro mov16 4
  3082                              <3> 	mov ax,%3
  3083                              <3> 	mov ds,ax
  3084                              <3> 	mov bx,[%4]
  3085                              <3> 	mov ax,%1
  3086                              <3> 	mov ds,ax
  3087                              <3> 	mov [%2],bx
  3088                              <3> %endmacro
  3089                              <3>  	 	
  3090                              <3> %macro mformat 4
  3091                              <3> 	stkopen 8
  3092                              <3> 	mov word [ bp + 0 ], %1
  3093                              <3> 	mov word [ bp + 2 ], %2
  3094                              <3> 	mov word [ bp + 4 ], %3
  3095                              <3> 	mov word [ bp + 6 ], %4
  3096                              <3> 	call kernel_segment:mformat
  3097                              <3> 	stkclose 8
  3098                              <3> %endmacro
  3099                              <3> 
  3100                              <3> %macro malloc 6
  3101                              <3> 	stkopen 0Bh
  3102                              <3> 	mov word [ bp + 4 ], %3
  3103                              <3> 	mov word [ bp + 6 ], %4
  3104                              <3> 	mov word [ bp + 8 ], %5	
  3105                              <3> 	call kernel_segment:malloc
  3106                              <3> 	push sp
  3107                              <3> 	pop bp
  3108                              <3> 	mov word %1, [ bp ]
  3109                              <3> 	mov word %2, [ bp + 2 ]
  3110                              <3> 	mov byte %6, [ bp + 0x0A ]
  3111                              <3> 	stkclose 0Bh
  3112                              <3> %endmacro 	
  3113                              <3> 
  3114                              <3> %macro laddr 2
  3115                              <3> 	laddr %1, %2, %1, %2
  3116                              <3> %endmacro
  3117                              <3> 
  3118                              <3> %macro faddr 2
  3119                              <3> 	faddr %1, %2, %1, %2
  3120                              <3> %endmacro
  3121                              <3>  	
  3122                              <3> %macro laddr 4
  3123                              <3> 	stkopen 8
  3124                              <3> 	mov word [ bp + 4 ], %3
  3125                              <3> 	mov word [ bp + 6 ], %4	
  3126                              <3> 	call kernel_segment:laddr
  3127                              <3> 	push sp
  3128                              <3> 	pop bp
  3129                              <3> 	mov word %1, [ bp + 0 ]
  3130                              <3> 	mov word %2, [ bp + 2 ]	
  3131                              <3> 	stkclose 8
  3132                              <3> %endmacro
  3133                              <3> 
  3134                              <3> %macro faddr 4
  3135                              <3> 	stkopen 8
  3136                              <3> 	mov word [ bp + 4 ], %3
  3137                              <3> 	mov word [ bp + 6 ], %4	
  3138                              <3> 	call kernel_segment:faddr
  3139                              <3> 	push sp
  3140                              <3> 	pop bp
  3141                              <3> 	mov word %1, [ bp + 0 ]
  3142                              <3> 	mov word %2, [ bp + 2 ]	
  3143                              <3> 	stkclose 8
  3144                              <3> %endmacro	
  3145                              <3>  
  3146                              <3> 
  3147                              <3> %macro stkopen 1		
  3148                              <3> 	sub word sp, %1
  3149                              <3> 	push sp
  3150                              <3> 	pop bp
  3151                              <3> %endmacro
  3152                              <3> 
  3153                              <3> %macro stkclose 1
  3154                              <3> 	add word sp, %1
  3155                              <3> %endmacro
  3156                              <3> 
  3157                              <3> %macro stkload 1-* 	
  3158                              <3>  	%rep %0
  3159                              <3>  	 	%rotate -1
  3160                              <3>  		pop %1
  3161                              <3>  	%endrep
  3162                              <3>  	%rep %0
  3163                              <3>  		push %1
  3164                              <3>  		%rotate 1
  3165                              <3>  	%endrep
  3166                              <3> %endmacro
  3167                              <3> 
  3168                              <3> %macro stkpush 1-* 	
  3169                              <3>  	%rep %0
  3170                              <3>  		push %1
  3171                              <3>  		%rotate 1
  3172                              <3>  	%endrep 	
  3173                              <3> %endmacro
  3174                              <3>  
  3175                              <3> %macro stkpop 1-*
  3176                              <3>  	%rep %0
  3177                              <3>  	 	%rotate -1
  3178                              <3>  		pop %1
  3179                              <3>  	%endrep 	 	
  3180                              <3> %endmacro
  3181                              <3> 
  3182                              <3> %endif 
  3183                              <2> 	%include "lib/math.mac"
  3184                              <3> 
  3185                              <3> %ifndef MATH_MAC
  3186                              <3> 	%define MATH_MAC
  3187                              <3> 	
  3188                              <3> 	%include "lib/math.asm"
  3189                              <3> 	%include "lib/system.mac"
  3190                              <3> 
  3191                              <3> %macro cmp16 3
  3192                              <3> 	cmp16 cs, %1, cs, %2, %3
  3193                              <3> %endmacro
  3194                              <3> 
  3195                              <3> %macro add16 2
  3196                              <3> 	add16 cs, %1, cs, %2
  3197                              <3> %endmacro
  3198                              <3> 
  3199                              <3> %macro sub16 2
  3200                              <3> 	sub16 cs, %1, cs, %2
  3201                              <3> %endmacro
  3202                              <3> 
  3203                              <3> %macro int32to16 2
  3204                              <3> 	int32to16 cs, %1, %2
  3205                              <3> %endmacro
  3206                              <3> 
  3207                              <3> %macro int16to32 2
  3208                              <3> 	int16to32 %1, cs, %2
  3209                              <3> %endmacro
  3210                              <3> 
  3211                              <3> %macro setsig 1
  3212                              <3> 	setsig cs, %1
  3213                              <3> %endmacro
  3214                              <3> 
  3215                              <3> %macro clrsig 1
  3216                              <3> 	clrsig cs, %1
  3217                              <3> %endmacro
  3218                              <3> 
  3219                              <3> %macro idiv32 5
  3220                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  3221                              <3> %endmacro
  3222                              <3> 
  3223                              <3> %macro imul32 3
  3224                              <3> 	imul32 cs, %1, cs, %2, cs, %3
  3225                              <3> %endmacro
  3226                              <3> 
  3227                              <3> %macro div32 5
  3228                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  3229                              <3> %endmacro
  3230                              <3> 
  3231                              <3> %macro mul32 3
  3232                              <3> 	mul32 cs, %1, cs, %2, cs, %3
  3233                              <3> %endmacro
  3234                              <3> 	
  3235                              <3> %macro add32 3
  3236                              <3> 	add32 cs, %1, cs, %2, cs, %3
  3237                              <3> %endmacro
  3238                              <3> 
  3239                              <3> %macro sub32 3
  3240                              <3> 	sub32 cs, %1, cs, %2, cs, %3
  3241                              <3> %endmacro
  3242                              <3> 
  3243                              <3> %macro int32to16 3
  3244                              <3> 	stkopen 0x06
  3245                              <3> 	mov ax,%1
  3246                              <3> 	mov ds,ax
  3247                              <3> 	mov ax,[%2+2]
  3248                              <3> 	mov word [bp+0], ax
  3249                              <3> 	mov ax,[%2]	
  3250                              <3> 	mov word [bp+2], ax
  3251                              <3> 	call proc_int32to16
  3252                              <3> 	mov ax,sp
  3253                              <3> 	mov bp,ax
  3254                              <3> 	mov ax,[bp+4]
  3255                              <3> 	mov word %3, ax	
  3256                              <3> 	stkclose 0x06
  3257                              <3> %endmacro
  3258                              <3> 
  3259                              <3> %macro int16to32 3
  3260                              <3> 	stkopen 0x06
  3261                              <3> 	mov word [bp+0], %1	
  3262                              <3> 	call proc_int16to32
  3263                              <3> 	mov ax,sp
  3264                              <3> 	mov bp,ax
  3265                              <3> 	mov ax,%2
  3266                              <3> 	mov ds,ax
  3267                              <3> 	mov ax,[bp+2]
  3268                              <3> 	mov [%3+2],ax
  3269                              <3> 	mov ax,[bp+4]
  3270                              <3> 	mov [%3],ax	
  3271                              <3> 	stkclose 0x06
  3272                              <3> %endmacro
  3273                              <3> 
  3274                              <3> %macro setsig 2
  3275                              <3> 	stkopen 0x02
  3276                              <3> 	mov ax,%1
  3277                              <3> 	mov ds,ax
  3278                              <3> 	mov ax,[%2+2]
  3279                              <3> 	mov word [bp+0], ax
  3280                              <3> 	call proc_setsig
  3281                              <3> 	mov ax,sp
  3282                              <3> 	mov bp,ax
  3283                              <3> 	mov ax,%1
  3284                              <3> 	mov ds,ax
  3285                              <3> 	mov ax,[bp+0]
  3286                              <3> 	mov word [%2+2], ax
  3287                              <3> 	stkclose 0x02
  3288                              <3> %endmacro
  3289                              <3> 
  3290                              <3> %macro clrsig 2
  3291                              <3> 	stkopen 0x02
  3292                              <3> 	mov ax,%1
  3293                              <3> 	mov ds,ax
  3294                              <3> 	mov ax,[%2+2]
  3295                              <3> 	mov word [bp+0], ax
  3296                              <3> 	call proc_clrsig
  3297                              <3> 	mov ax,sp
  3298                              <3> 	mov bp,ax
  3299                              <3> 	mov ax,%1
  3300                              <3> 	mov ds,ax
  3301                              <3> 	mov ax,[bp+0]
  3302                              <3> 	mov word [%2+2], ax
  3303                              <3> 	stkclose 0x02
  3304                              <3> %endmacro
  3305                              <3> 
  3306                              <3> %macro div32 10
  3307                              <3> 	stkopen 0x11
  3308                              <3> 	mov ax,%1
  3309                              <3> 	mov ds,ax
  3310                              <3> 	mov ax,[%2+2]
  3311                              <3> 	mov word [bp+0], ax
  3312                              <3> 	mov ax,[%2]
  3313                              <3> 	mov word [bp+2], ax
  3314                              <3> 	mov ax,%3
  3315                              <3> 	mov ds,ax
  3316                              <3> 	mov ax,[%4+2]
  3317                              <3> 	mov word [bp+4], ax
  3318                              <3> 	mov ax,[%4]
  3319                              <3> 	mov word [bp+6], ax
  3320                              <3> 	call proc_div32
  3321                              <3> 	mov ax,sp
  3322                              <3> 	mov bp,ax
  3323                              <3> 	mov ax,%5
  3324                              <3> 	mov ds,ax
  3325                              <3> 	mov word ax, [bp+8]
  3326                              <3> 	mov word [%6+2], ax
  3327                              <3> 	mov word ax, [bp+0x0A]
  3328                              <3> 	mov word [%6], ax
  3329                              <3> 	mov ax,%7
  3330                              <3> 	mov ds,ax
  3331                              <3> 	mov word ax,[bp+0x0C]
  3332                              <3> 	mov word [%8+2],ax
  3333                              <3> 	mov word ax,[bp+0x0E]
  3334                              <3> 	mov word [%8],ax
  3335                              <3> 	mov ax,%9
  3336                              <3> 	mov ds,ax
  3337                              <3> 	mov byte al,[bp+0x10]
  3338                              <3> 	mov byte [%10],al
  3339                              <3> 	stkclose 0x11
  3340                              <3> %endmacro
  3341                              <3> 	
  3342                              <3> %macro mul32 6
  3343                              <3> 	stkopen 0x0C
  3344                              <3> 	mov ax,%1
  3345                              <3> 	mov ds,ax
  3346                              <3> 	mov ax,[%2+2]
  3347                              <3> 	mov word [bp+0], ax
  3348                              <3> 	mov ax,[%2]
  3349                              <3> 	mov word [bp+2], ax
  3350                              <3> 	mov ax,%3
  3351                              <3> 	mov ds,ax
  3352                              <3> 	mov ax,[%4+2]
  3353                              <3> 	mov word [bp+4], ax
  3354                              <3> 	mov ax,[%4]
  3355                              <3> 	mov word [bp+6], ax
  3356                              <3> 	call proc_mul32
  3357                              <3> 	mov ax,sp
  3358                              <3> 	mov bp,ax
  3359                              <3> 	mov ax,%5
  3360                              <3> 	mov ds,ax
  3361                              <3> 	mov word ax, [bp+8]
  3362                              <3> 	mov word [%6+2], ax
  3363                              <3> 	mov word ax, [bp+0x0A]
  3364                              <3> 	mov word [%6], ax
  3365                              <3> 	stkclose 0x0C
  3366                              <3> %endmacro	
  3367                              <3> 	
  3368                              <3> %macro add32 6
  3369                              <3> 	stkopen 0x0C
  3370                              <3> 	mov ax,%1
  3371                              <3> 	mov ds,ax
  3372                              <3> 	mov ax,[%2+2]
  3373                              <3> 	mov word [bp+0], ax
  3374                              <3> 	mov ax,[%2]
  3375                              <3> 	mov word [bp+2], ax
  3376                              <3> 	mov ax,%3
  3377                              <3> 	mov ds,ax
  3378                              <3> 	mov ax,[%4+2]
  3379                              <3> 	mov word [bp+4], ax
  3380                              <3> 	mov ax,[%4]
  3381                              <3> 	mov word [bp+6], ax
  3382                              <3> 	call proc_add32
  3383                              <3> 	mov ax,sp
  3384                              <3> 	mov bp,ax
  3385                              <3> 	mov ax,%5
  3386                              <3> 	mov ds,ax
  3387                              <3> 	mov word ax, [bp+8]
  3388                              <3> 	mov word [%6+2], ax
  3389                              <3> 	mov word ax, [bp+0x0A]
  3390                              <3> 	mov word [%6], ax
  3391                              <3> 	stkclose 0x0C
  3392                              <3> %endmacro
  3393                              <3> 
  3394                              <3> %macro sub32 6
  3395                              <3> 	stkopen 0x0C
  3396                              <3> 	mov ax,%1
  3397                              <3> 	mov ds,ax
  3398                              <3> 	mov ax,[%2+2]
  3399                              <3> 	mov word [bp+0], ax
  3400                              <3> 	mov ax,[%2]
  3401                              <3> 	mov word [bp+2], ax
  3402                              <3> 	mov ax,%3
  3403                              <3> 	mov ds,ax
  3404                              <3> 	mov ax,[%4+2]
  3405                              <3> 	mov word [bp+4], ax
  3406                              <3> 	mov ax,[%4]
  3407                              <3> 	mov word [bp+6], ax
  3408                              <3> 	call proc_sub32
  3409                              <3> 	mov ax,sp
  3410                              <3> 	mov bp,ax
  3411                              <3> 	mov ax,%5
  3412                              <3> 	mov ds,ax
  3413                              <3> 	mov word ax, [bp+8]
  3414                              <3> 	mov word [%6+2], ax
  3415                              <3> 	mov word ax, [bp+0x0A]
  3416                              <3> 	mov word [%6], ax
  3417                              <3> 	stkclose 0x0C
  3418                              <3> %endmacro
  3419                              <3> 
  3420                              <3> %macro idiv32 10
  3421                              <3> 	stkopen 0x11
  3422                              <3> 	mov ax,%1
  3423                              <3> 	mov ds,ax
  3424                              <3> 	mov ax,[%2+2]
  3425                              <3> 	mov word [bp+0], ax
  3426                              <3> 	mov ax,[%2]
  3427                              <3> 	mov word [bp+2], ax
  3428                              <3> 	mov ax,%3
  3429                              <3> 	mov ds,ax
  3430                              <3> 	mov ax,[%4+2]
  3431                              <3> 	mov word [bp+4], ax
  3432                              <3> 	mov ax,[%4]
  3433                              <3> 	mov word [bp+6], ax
  3434                              <3> 	call proc_idiv32
  3435                              <3> 	mov ax,sp
  3436                              <3> 	mov bp,ax
  3437                              <3> 	mov ax,%5
  3438                              <3> 	mov ds,ax
  3439                              <3> 	mov word ax, [bp+8]
  3440                              <3> 	mov word [%6+2], ax
  3441                              <3> 	mov word ax, [bp+0x0A]
  3442                              <3> 	mov word [%6], ax
  3443                              <3> 	mov ax,%7
  3444                              <3> 	mov ds,ax
  3445                              <3> 	mov word ax,[bp+0x0C]
  3446                              <3> 	mov word [%8+2],ax
  3447                              <3> 	mov word ax,[bp+0x0E]
  3448                              <3> 	mov word [%8],ax
  3449                              <3> 	mov ax,%9
  3450                              <3> 	mov ds,ax
  3451                              <3> 	mov byte al,[bp+0x10]
  3452                              <3> 	mov byte [%10],al
  3453                              <3> 	stkclose 0x11
  3454                              <3> %endmacro
  3455                              <3> 
  3456                              <3> %macro imul32 6
  3457                              <3> 	stkopen 0x0C
  3458                              <3> 	mov ax,%1
  3459                              <3> 	mov ds,ax
  3460                              <3> 	mov ax,[%2+2]
  3461                              <3> 	mov word [bp+0], ax
  3462                              <3> 	mov ax,[%2]
  3463                              <3> 	mov word [bp+2], ax
  3464                              <3> 	mov ax,%3
  3465                              <3> 	mov ds,ax
  3466                              <3> 	mov ax,[%4+2]
  3467                              <3> 	mov word [bp+4], ax
  3468                              <3> 	mov ax,[%4]
  3469                              <3> 	mov word [bp+6], ax
  3470                              <3> 	call proc_imul32
  3471                              <3> 	mov ax,sp
  3472                              <3> 	mov bp,ax
  3473                              <3> 	mov ax,%5
  3474                              <3> 	mov ds,ax
  3475                              <3> 	mov word ax, [bp+8]
  3476                              <3> 	mov word [%6+2], ax
  3477                              <3> 	mov word ax, [bp+0x0A]
  3478                              <3> 	mov word [%6], ax
  3479                              <3> 	stkclose 0x0C
  3480                              <3> %endmacro
  3481                              <3> 	
  3482                              <3> %macro cmp32 3
  3483                              <3> 	cmp32 cs, %1, cs, %2, %3
  3484                              <3> %endmacro	
  3485                              <3> 	
  3486                              <3> %macro cmp32 5
  3487                              <3> 	stkopen 9
  3488                              <3> 	mov ax,%1
  3489                              <3> 	mov ds,ax
  3490                              <3> 	mov word ax,[%2+2]
  3491                              <3> 	mov word [bp+0], ax
  3492                              <3> 	mov word ax,[%2]
  3493                              <3> 	mov word [bp+2], ax	
  3494                              <3> 	mov ax,%3
  3495                              <3> 	mov ds,ax
  3496                              <3> 	mov word ax,[%4+2]
  3497                              <3> 	mov word [bp+4], ax
  3498                              <3> 	mov word ax,[%4]
  3499                              <3> 	mov word [bp+6], ax	
  3500                              <3> 	call proc_cmp32
  3501                              <3> 	mov ax,sp
  3502                              <3> 	mov bp,ax
  3503                              <3> 	mov al,[bp+8]
  3504                              <3> 	mov byte %5,al
  3505                              <3> 	stkclose 9
  3506                              <3> %endmacro
  3507                              <3> 	
  3508                              <3> %macro shl32 2
  3509                              <3> 	shl32 cs, %1, %2
  3510                              <3> %endmacro	
  3511                              <3> 	
  3512                              <3> %macro shl32 3
  3513                              <3> 	stkopen 5
  3514                              <3> 	mov ax,%1
  3515                              <3> 	mov ds,ax
  3516                              <3> 	mov word ax,[%2+2]
  3517                              <3> 	mov word [bp+0], ax
  3518                              <3> 	mov word ax,[%2]
  3519                              <3> 	mov word [bp+2], ax
  3520                              <3> 	mov byte al, %3
  3521                              <3> 	mov byte [bp+4], al 
  3522                              <3> 	call proc_shl32
  3523                              <3> 	mov ax,sp
  3524                              <3> 	mov bp,ax
  3525                              <3> 	mov ax,%1
  3526                              <3> 	mov ds,ax
  3527                              <3> 	mov ax,[bp+0]
  3528                              <3> 	mov word [%2+2],ax
  3529                              <3> 	mov ax,[bp+2]
  3530                              <3> 	mov word [%2],ax
  3531                              <3> 	stkclose 5
  3532                              <3> %endmacro
  3533                              <3> 
  3534                              <3> 
  3535                              <3> %macro shr32 2
  3536                              <3> 	shr32 cs, %1, %2
  3537                              <3> %endmacro	
  3538                              <3> 	
  3539                              <3> %macro shr32 3
  3540                              <3> 	stkopen 5
  3541                              <3> 	mov ax,%1
  3542                              <3> 	mov ds,ax
  3543                              <3> 	mov word ax,[%2+2]
  3544                              <3> 	mov word [bp+0], ax
  3545                              <3> 	mov word ax,[%2]
  3546                              <3> 	mov word [bp+2], ax
  3547                              <3> 	mov byte al, %3
  3548                              <3> 	mov byte [bp+4], al 
  3549                              <3> 	call proc_shr32
  3550                              <3> 	mov ax,sp
  3551                              <3> 	mov bp,ax
  3552                              <3> 	mov ax,%1
  3553                              <3> 	mov ds,ax
  3554                              <3> 	mov ax,[bp+0]
  3555                              <3> 	mov word [%2+2],ax
  3556                              <3> 	mov ax,[bp+2]
  3557                              <3> 	mov word [%2],ax
  3558                              <3> 	stkclose 5
  3559                              <3> %endmacro
  3560                              <3> 
  3561                              <3> %macro add16 4
  3562                              <3> 	mov ax,%1
  3563                              <3> 	mov ds,ax
  3564                              <3> 	mov bx,[%2]
  3565                              <3> 	mov ax,%3
  3566                              <3> 	mov ds,ax
  3567                              <3> 	add bx,[%4]
  3568                              <3> 	
  3569                              <3> 	mov ax,%1
  3570                              <3> 	mov ds,ax
  3571                              <3> 	mov [%2],bx
  3572                              <3> %endmacro
  3573                              <3> 
  3574                              <3> %macro sub16 4
  3575                              <3> 	mov ax,%1
  3576                              <3> 	mov ds,ax
  3577                              <3> 	mov bx,[%2]
  3578                              <3> 	mov ax,%3
  3579                              <3> 	mov ds,ax
  3580                              <3> 	sub bx,[%4]
  3581                              <3> 	
  3582                              <3> 	mov ax,%1
  3583                              <3> 	mov ds,ax
  3584                              <3> 	mov [%2],bx
  3585                              <3> %endmacro
  3586                              <3> 
  3587                              <3> %macro cmp16 5
  3588                              <3> 	mov ax,%1
  3589                              <3> 	mov ds,ax
  3590                              <3> 	mov bx,[%2]
  3591                              <3> 	mov ax,%3
  3592                              <3> 	mov ds,ax
  3593                              <3> 	mov	cx,[%4]
  3594                              <3> 	
  3595                              <3> 	cmp bx,cx
  3596                              <3> 	jg %%above
  3597                              <3> 	jl %%below
  3598                              <3> 		mov byte %5, 0
  3599                              <3> 		jmp %%endcmp
  3600                              <3> 	%%above:
  3601                              <3> 		mov byte %5, 1
  3602                              <3> 		jmp %%endcmp
  3603                              <3> 	%%below:
  3604                              <3> 		mov byte %5, -1
  3605                              <3> 	%%endcmp:
  3606                              <3> %endmacro
  3607                              <3> 	
  3608                              <3> %endif
  3609                              <2> 	
  3610                              <2> %macro __fltoint16 3
  3611                              <2> 	stkopen 0x06
  3612                              <2> 	mov word [bp+0],%1
  3613                              <2> 	mov word [bp+2],%2
  3614                              <2> 	call proc_fltoint16
  3615                              <2> 	push sp
  3616                              <2> 	pop bp
  3617                              <2> 	mov word %3,[bp+4]
  3618                              <2> 	stkclose 0x06
  3619                              <2> %endmacro
  3620                              <2> 
  3621                              <2> %macro __int16tofl 3	
  3622                              <2> 	stkopen 0x06
  3623                              <2> 	mov word [bp+0],%1
  3624                              <2> 	call proc_int16tofl
  3625                              <2> 	push sp
  3626                              <2> 	pop bp
  3627                              <2> 	mov word %2,[bp+2]
  3628                              <2> 	mov word %3,[bp+4]
  3629                              <2> 	stkclose 0x06
  3630                              <2> %endmacro
  3631                              <2> 		
  3632                              <2> %macro __fltoint32 4
  3633                              <2> 	stkopen 0x08
  3634                              <2> 	mov word [bp+0],%1
  3635                              <2> 	mov word [bp+2],%2
  3636                              <2> 	call proc_fltoint32
  3637                              <2> 	push sp
  3638                              <2> 	pop bp
  3639                              <2> 	mov word %3,[bp+4]
  3640                              <2> 	mov word %4,[bp+6]
  3641                              <2> 	stkclose 0x08
  3642                              <2> %endmacro
  3643                              <2> 
  3644                              <2> %macro __int32tofl 4
  3645                              <2> 	stkopen 0x08
  3646                              <2> 	mov word [bp+0],%1
  3647                              <2> 	mov word [bp+2],%2
  3648                              <2> 	call proc_int32tofl
  3649                              <2> 	push sp
  3650                              <2> 	pop bp
  3651                              <2> 	mov word %3,[bp+4]
  3652                              <2> 	mov word %4,[bp+6]
  3653                              <2> 	stkclose 0x08
  3654                              <2> %endmacro	
  3655                              <2> 
  3656                              <2> %macro __flcmp 5
  3657                              <2> 	stkopen 0x09
  3658                              <2> 	mov word [bp+0],%1
  3659                              <2> 	mov word [bp+2],%2
  3660                              <2> 	mov word [bp+4],%3
  3661                              <2> 	mov word [bp+6],%4
  3662                              <2> 	call proc_flcmp
  3663                              <2> 	push sp
  3664                              <2> 	pop bp
  3665                              <2> 	mov byte %5, [bp+8]
  3666                              <2> 	stkclose 0x09
  3667                              <2> %endmacro
  3668                              <2> 	
  3669                              <2> %macro __fladd 6
  3670                              <2> 	stkopen 0x0E
  3671                              <2> 	mov word [bp+0],%1
  3672                              <2> 	mov word [bp+2],%2
  3673                              <2> 	mov word [bp+4],%3
  3674                              <2> 	mov word [bp+6],%4
  3675                              <2> 	mov word [bp+0x0C],0
  3676                              <2> 	call proc_fladdorsub
  3677                              <2> 	push sp
  3678                              <2> 	pop bp
  3679                              <2> 	mov word %5,[bp+8]
  3680                              <2> 	mov word %6,[bp+0x0A]
  3681                              <2> 	stkclose 0x0E
  3682                              <2> %endmacro
  3683                              <2> 
  3684                              <2> %macro __flsub 6
  3685                              <2> 	stkopen 0x0E
  3686                              <2> 	mov word [bp+0],%1
  3687                              <2> 	mov word [bp+2],%2
  3688                              <2> 	mov word [bp+4],%3
  3689                              <2> 	mov word [bp+6],%4
  3690                              <2> 	mov word [bp+0x0C],0x8000
  3691                              <2> 	call proc_fladdorsub
  3692                              <2> 	push sp
  3693                              <2> 	pop bp
  3694                              <2> 	mov word %5,[bp+8]
  3695                              <2> 	mov word %6,[bp+0x0A]
  3696                              <2> 	stkclose 0x0E
  3697                              <2> %endmacro
  3698                              <2> 
  3699                              <2> %macro __flmul 6
  3700                              <2> 	stkopen 0x0E
  3701                              <2> 	mov word [bp+0],%1
  3702                              <2> 	mov word [bp+2],%2
  3703                              <2> 	mov word [bp+4],%3
  3704                              <2> 	mov word [bp+6],%4
  3705                              <2> 	call proc_flmul
  3706                              <2> 	push sp
  3707                              <2> 	pop bp
  3708                              <2> 	mov word %5,[bp+8]
  3709                              <2> 	mov word %6,[bp+0x0A]
  3710                              <2> 	stkclose 0x0E
  3711                              <2> %endmacro
  3712                              <2> 
  3713                              <2> %macro __fldiv 6
  3714                              <2> 	stkopen 0x0E
  3715                              <2> 	mov word [bp+0],%1
  3716                              <2> 	mov word [bp+2],%2
  3717                              <2> 	mov word [bp+4],%3
  3718                              <2> 	mov word [bp+6],%4
  3719                              <2> 	call proc_fldiv
  3720                              <2> 	push sp
  3721                              <2> 	pop bp
  3722                              <2> 	mov word %5,[bp+8]
  3723                              <2> 	mov word %6,[bp+0x0A]
  3724                              <2> 	stkclose 0x0E
  3725                              <2> %endmacro
  3726                              <2> 
  3727                              <2> %macro __validate 7
  3728                              <2> 	stkopen 0x0D
  3729                              <2> 	mov word [bp+0],%1
  3730                              <2> 	mov word [bp+2],%2
  3731                              <2> 	mov word [bp+4],%3
  3732                              <2> 	mov word [bp+6],%4
  3733                              <2> 	call proc__validate
  3734                              <2> 	push sp
  3735                              <2> 	pop bp
  3736                              <2> 	mov word %5,[bp+8]
  3737                              <2> 	mov word %6,[bp+0x0A]
  3738                              <2> 	mov byte %7,[bp+0x0C]
  3739                              <2> 	stkclose 0x0D
  3740                              <2> %endmacro
  3741                              <2> 
  3742                              <2> %macro __div_validate 7
  3743                              <2> 	stkopen 0x0D
  3744                              <2> 	mov word [bp+0],%1
  3745                              <2> 	mov word [bp+2],%2
  3746                              <2> 	mov word [bp+4],%3
  3747                              <2> 	mov word [bp+6],%4
  3748                              <2> 	call proc__div_validate
  3749                              <2> 	push sp
  3750                              <2> 	pop bp
  3751                              <2> 	mov word %5,[bp+8]
  3752                              <2> 	mov word %6,[bp+0x0A]
  3753                              <2> 	mov byte %7,[bp+0x0C]
  3754                              <2> 	stkclose 0x0D
  3755                              <2> %endmacro
  3756                              <2> 
  3757                              <2> %macro __mul_validate 5
  3758                              <2> 	stkopen 0x09
  3759                              <2> 	mov word [bp+0],%1
  3760                              <2> 	mov word [bp+2],%2
  3761                              <2> 	call proc__mul_validate
  3762                              <2> 	push sp
  3763                              <2> 	pop bp
  3764                              <2> 	mov word %3,[bp+4]
  3765                              <2> 	mov word %4,[bp+6]
  3766                              <2> 	mov byte %5,[bp+8]
  3767                              <2> 	stkclose 0x09
  3768                              <2> %endmacro
  3769                              <2> 
  3770                              <2> %macro __addorsub_validate 7
  3771                              <2> 	stkopen 0x0D
  3772                              <2> 	mov word [bp+0],%1
  3773                              <2> 	mov word [bp+2],%2
  3774                              <2> 	mov word [bp+4],%3
  3775                              <2> 	mov word [bp+6],%4
  3776                              <2> 	call proc__addorsub_validate
  3777                              <2> 	push sp
  3778                              <2> 	pop bp
  3779                              <2> 	mov word %5,[bp+8]
  3780                              <2> 	mov word %6,[bp+0x0A]
  3781                              <2> 	mov byte %7,[bp+0x0C]
  3782                              <2> 	stkclose 0x0D
  3783                              <2> %endmacro
  3784                              <2> 
  3785                              <2> %macro __iaddorsub32 7
  3786                              <2> 	stkopen 0x0D
  3787                              <2> 	mov word [bp+0],%1
  3788                              <2> 	mov word [bp+2],%2
  3789                              <2> 	mov word [bp+4],%3
  3790                              <2> 	mov word [bp+6],%4
  3791                              <2> 	mov word [bp+0x0C], %7
  3792                              <2> 	call proc__iaddorsub32
  3793                              <2> 	push sp
  3794                              <2> 	pop bp
  3795                              <2> 	mov word %5,[bp+8]
  3796                              <2> 	mov word %6,[bp+0x0A]
  3797                              <2> 	stkclose 0x0D
  3798                              <2> %endmacro
  3799                              <2> 
  3800                              <2> %macro __fldiv32 6
  3801                              <2> 	stkopen 0x11
  3802                              <2> 	mov word [bp+0],%1
  3803                              <2> 	mov word [bp+2],%2
  3804                              <2> 	mov word [bp+4],%3
  3805                              <2> 	mov word [bp+6],%4
  3806                              <2> 	call proc__fldiv32
  3807                              <2> 	push sp
  3808                              <2> 	pop bp
  3809                              <2> 	mov word %5,[bp+8]
  3810                              <2> 	mov word %6,[bp+0x0A]
  3811                              <2> 	stkclose 0x11
  3812                              <2> %endmacro
  3813                              <2> 
  3814                              <2> %macro __mul32_64 8
  3815                              <2> 	stkopen 0x10
  3816                              <2> 	mov word [bp+0],%1
  3817                              <2> 	mov word [bp+2],%2
  3818                              <2> 	mov word [bp+4],%3
  3819                              <2> 	mov word [bp+6],%4
  3820                              <2> 	call proc__mul32_64
  3821                              <2> 	push sp
  3822                              <2> 	pop bp
  3823                              <2> 	mov word %5,[bp+8]
  3824                              <2> 	mov word %6,[bp+0x0A]
  3825                              <2> 	mov word %7,[bp+0x0C]
  3826                              <2> 	mov word %8,[bp+0x0E]
  3827                              <2> 	stkclose 0x10
  3828                              <2> %endmacro
  3829                              <2> 
  3830                              <2> %macro __normalize 3
  3831                              <2> 	stkopen 0x06
  3832                              <2> 	mov word [bp+0],%1
  3833                              <2> 	mov word [bp+2],%2
  3834                              <2> 	mov word [bp+4],%3
  3835                              <2> 	call proc__normalize
  3836                              <2> 	push sp
  3837                              <2> 	pop bp
  3838                              <2> 	mov word %1,[bp+0]
  3839                              <2> 	mov word %2,[bp+2]
  3840                              <2> 	stkclose 0x06
  3841                              <2> %endmacro
  3842                              <2> 
  3843                              <2> %macro __setsig 3
  3844                              <2> 	stkopen 0x0C
  3845                              <2> 	mov word [bp+0],%1
  3846                              <2> 	mov word [bp+2],%2
  3847                              <2> 	call proc_setsig
  3848                              <2> 	push sp
  3849                              <2> 	pop bp
  3850                              <2> 	mov word %2,[bp+4]
  3851                              <2> 	stkclose 0x0C
  3852                              <2> %endmacro
  3853                              <2> 	
  3854                              <2> section .data
  3855                              <2> 
  3856                              <2> proc_fltoint16:
  3857 000009F1 89E0                <2> 	mov ax,sp
  3858 000009F3 89C5                <2> 	mov bp,ax
  3859                              <2> 	
  3860 000009F5 8B4602              <2> 	mov ax,[bp+2]
  3861 000009F8 8B5E04              <2> 	mov bx,[bp+4]
  3862                              <2> 	__fltoint32 ax, ax, ax, bx
  3863                              <3>  stkopen 0x08
  3864 000009FB 83EC08              <4>  sub word sp, %1
  3865 000009FE 54                  <4>  push sp
  3866 000009FF 5D                  <4>  pop bp
  3867 00000A00 894600              <3>  mov word [bp+0],%1
  3868 00000A03 894602              <3>  mov word [bp+2],%2
  3869 00000A06 E86A00              <3>  call proc_fltoint32
  3870 00000A09 54                  <3>  push sp
  3871 00000A0A 5D                  <3>  pop bp
  3872 00000A0B 8B4604              <3>  mov word %3,[bp+4]
  3873 00000A0E 8B5E06              <3>  mov word %4,[bp+6]
  3874                              <3>  stkclose 0x08
  3875 00000A11 83C408              <4>  add word sp, %1
  3876                              <2> 	__int32to16 ax, bx, cx
  3877                              <3>  stkopen 0x06
  3878 00000A14 83EC06              <4>  sub word sp, %1
  3879 00000A17 54                  <4>  push sp
  3880 00000A18 5D                  <4>  pop bp
  3881 00000A19 894600              <3>  mov word [bp+0], %1
  3882 00000A1C 895E02              <3>  mov word [bp+2], %2
  3883 00000A1F E871FA              <3>  call proc_int32to16
  3884 00000A22 54                  <3>  push sp
  3885 00000A23 5D                  <3>  pop bp
  3886 00000A24 8B4E04              <3>  mov word %3, [bp+4]
  3887                              <3>  stkclose 0x06
  3888 00000A27 83C406              <4>  add word sp, %1
  3889                              <2> 	
  3890 00000A2A 89E0                <2> 	mov ax,sp
  3891 00000A2C 89C5                <2> 	mov bp,ax
  3892 00000A2E 894E06              <2> 	mov [bp+6],cx
  3893                              <2> 	
  3894 00000A31 C3                  <2> 	ret
  3895                              <2> 	
  3896                              <2> proc_int16tofl:
  3897 00000A32 89E0                <2> 	mov ax,sp
  3898 00000A34 89C5                <2> 	mov bp,ax
  3899                              <2> 	
  3900 00000A36 8B4602              <2> 	mov ax,[bp+2]
  3901                              <2> 	__int16to32 ax, ax, bx
  3902                              <3>  stkopen 0x06
  3903 00000A39 83EC06              <4>  sub word sp, %1
  3904 00000A3C 54                  <4>  push sp
  3905 00000A3D 5D                  <4>  pop bp
  3906 00000A3E 894600              <3>  mov word [bp+0],%1
  3907 00000A41 E827FA              <3>  call proc_int16to32
  3908 00000A44 54                  <3>  push sp
  3909 00000A45 5D                  <3>  pop bp
  3910 00000A46 8B4602              <3>  mov word %2, [bp+2]
  3911 00000A49 8B5E04              <3>  mov word %3, [bp+4]
  3912                              <3>  stkclose 0x06
  3913 00000A4C 83C406              <4>  add word sp, %1
  3914                              <2> 	__int32tofl ax, bx, cx, dx
  3915                              <3>  stkopen 0x08
  3916 00000A4F 83EC08              <4>  sub word sp, %1
  3917 00000A52 54                  <4>  push sp
  3918 00000A53 5D                  <4>  pop bp
  3919 00000A54 894600              <3>  mov word [bp+0],%1
  3920 00000A57 895E02              <3>  mov word [bp+2],%2
  3921 00000A5A E88B00              <3>  call proc_int32tofl
  3922 00000A5D 54                  <3>  push sp
  3923 00000A5E 5D                  <3>  pop bp
  3924 00000A5F 8B4E04              <3>  mov word %3,[bp+4]
  3925 00000A62 8B5606              <3>  mov word %4,[bp+6]
  3926                              <3>  stkclose 0x08
  3927 00000A65 83C408              <4>  add word sp, %1
  3928                              <2> 	
  3929 00000A68 89E0                <2> 	mov ax,sp
  3930 00000A6A 89C5                <2> 	mov bp,ax
  3931 00000A6C 894E04              <2> 	mov [bp+4],cx
  3932 00000A6F 895606              <2> 	mov [bp+6],dx
  3933                              <2> 
  3934 00000A72 C3                  <2> 	ret
  3935                              <2> 
  3936                              <2> proc_fltoint32:
  3937 00000A73 89E0                <2> 	mov ax,sp
  3938 00000A75 89C5                <2> 	mov bp,ax
  3939                              <2> 
  3940 00000A77 8B4602              <2> 	mov ax,[bp+2]
  3941 00000A7A 8B5E04              <2> 	mov bx,[bp+4]
  3942 00000A7D 25FF7F              <2> 	and ax,0x7FFF
  3943 00000A80 09D8                <2> 	or ax,bx
  3944 00000A82 83F800              <2> 	cmp ax,0
  3945 00000A85 7510                <2> 	jnz .continue
  3946                              <2> 	.zero:
  3947 00000A87 8B4602              <2> 		mov ax,[bp+2]
  3948 00000A8A 250080              <2> 		and ax,0x8000
  3949 00000A8D 894606              <2> 		mov word [bp+6],ax
  3950 00000A90 C746080000          <2> 		mov word [bp+8],0
  3951 00000A95 EB50                <2> 		jmp .done
  3952                              <2> 	.continue:
  3953                              <2> 	
  3954 00000A97 8B4E02              <2> 	mov cx,[bp+2]
  3955 00000A9A D1E1                <2> 	shl cx,1
  3956 00000A9C 80ED7F              <2> 	sub ch,0x7F
  3957 00000A9F 80FD00              <2> 	cmp ch,0
  3958 00000AA2 7CE3                <2> 	jl .zero
  3959                              <2> 	
  3960 00000AA4 B117                <2> 	mov cl,23	
  3961 00000AA6 38CD                <2> 	cmp ch,cl
  3962 00000AA8 7302                <2> 	jae .endexp
  3963 00000AAA 28E9                <2> 		sub cl,ch
  3964                              <2> 	.endexp:
  3965                              <2> 	
  3966 00000AAC 8B4602              <2> 	mov ax,[bp+2]
  3967 00000AAF 83E07F              <2> 	and ax,0x007F
  3968 00000AB2 0D8000              <2> 	or ax,0x0080
  3969                              <2> 	
  3970 00000AB5 8B5E04              <2> 	mov bx,[bp+4]
  3971                              <2> 		
  3972                              <2> 	__shr32 ax, bx, cl
  3973                              <3>  stkopen 5
  3974 00000AB8 83EC05              <4>  sub word sp, %1
  3975 00000ABB 54                  <4>  push sp
  3976 00000ABC 5D                  <4>  pop bp
  3977 00000ABD 894600              <3>  mov word [bp+0], %1
  3978 00000AC0 895E02              <3>  mov word [bp+2], %2
  3979 00000AC3 884E04              <3>  mov byte [bp+4], %3
  3980 00000AC6 E834FD              <3>  call proc_shr32
  3981 00000AC9 54                  <3>  push sp
  3982 00000ACA 5D                  <3>  pop bp
  3983 00000ACB 8B4600              <3>  mov word %1, [bp+0]
  3984 00000ACE 8B5E02              <3>  mov word %2, [bp+2]
  3985                              <3>  stkclose 5
  3986 00000AD1 83C405              <4>  add word sp, %1
  3987                              <2> 		
  3988 00000AD4 89E2                <2> 	mov dx,sp
  3989 00000AD6 89D5                <2> 	mov bp,dx
  3990                              <2> 	
  3991 00000AD8 8B4E02              <2> 	mov cx,[bp+2]
  3992 00000ADB 81E10080            <2> 	and cx,0x8000
  3993 00000ADF 01C8                <2> 	add ax,cx
  3994                              <2> 	 
  3995 00000AE1 894606              <2> 	mov [bp+6],ax
  3996 00000AE4 895E08              <2> 	mov [bp+8],bx
  3997                              <2> 	
  3998                              <2> 	.done:
  3999                              <2> 	
  4000 00000AE7 C3                  <2> 	ret
  4001                              <2> 	
  4002                              <2> proc_int32tofl:
  4003 00000AE8 89E0                <2> 	mov ax,sp
  4004 00000AEA 89C5                <2> 	mov bp,ax
  4005                              <2> 	
  4006 00000AEC 8B4602              <2> 	mov ax,[bp+2]
  4007 00000AEF 8B5E04              <2> 	mov bx,[bp+4]
  4008                              <2> 	
  4009 00000AF2 89C1                <2> 	mov cx,ax
  4010 00000AF4 81E1FF7F            <2> 	and cx,0x7FFF
  4011 00000AF8 09D9                <2> 	or cx,bx
  4012 00000AFA 83F900              <2> 	cmp cx,0
  4013 00000AFD 7511                <2> 	jnz .continue
  4014 00000AFF 8B4602              <2> 		mov ax,[bp+2]
  4015 00000B02 250080              <2> 		and ax,0x8000
  4016 00000B05 894606              <2> 		mov word [bp+6],ax
  4017 00000B08 C746080000          <2> 		mov word [bp+8],0
  4018 00000B0D E99100              <2> 		jmp .done
  4019                              <2> 	.continue:
  4020                              <2> 	
  4021 00000B10 83E07F              <2> 	and ax,0x007F	
  4022                              <2> 	
  4023 00000B13 894606              <2> 	mov [bp+6],ax
  4024 00000B16 895E08              <2> 	mov [bp+8],bx	
  4025                              <2> 		
  4026                              <2> 	__lzbitcount32 ax, bx, ch		
  4027 00000B19 53                  <3>  push %2
  4028                              <3>  __lzbitcount16 %1, cl
  4029                              <4>  stkopen 3
  4030 00000B1A 83EC03              <5>  sub word sp, %1
  4031 00000B1D 54                  <5>  push sp
  4032 00000B1E 5D                  <5>  pop bp
  4033 00000B1F 894600              <4>  mov word [bp+0], %1
  4034 00000B22 E85DFD              <4>  call proc__lzbitcount16
  4035 00000B25 54                  <4>  push sp
  4036 00000B26 5D                  <4>  pop bp
  4037 00000B27 8A4E02              <4>  mov byte %2, [bp+2]
  4038                              <4>  stkclose 3
  4039 00000B2A 83C403              <5>  add word sp, %1
  4040 00000B2D 58                  <3>  pop ax
  4041 00000B2E 80F910              <3>  cmp cl,16
  4042 00000B31 7217                <3>  jb .end
  4043 00000B33 51                  <3>  push cx
  4044                              <3>  __lzbitcount16 ax, al
  4045                              <4>  stkopen 3
  4046 00000B34 83EC03              <5>  sub word sp, %1
  4047 00000B37 54                  <5>  push sp
  4048 00000B38 5D                  <5>  pop bp
  4049 00000B39 894600              <4>  mov word [bp+0], %1
  4050 00000B3C E843FD              <4>  call proc__lzbitcount16
  4051 00000B3F 54                  <4>  push sp
  4052 00000B40 5D                  <4>  pop bp
  4053 00000B41 8A4602              <4>  mov byte %2, [bp+2]
  4054                              <4>  stkclose 3
  4055 00000B44 83C403              <5>  add word sp, %1
  4056 00000B47 59                  <3>  pop cx
  4057 00000B48 00C1                <3>  add cl,al
  4058                              <3>  .end:
  4059 00000B4A 88CD                <3>  mov byte %3, cl
  4060 00000B4C B120                <2> 	mov cl,32
  4061 00000B4E 28E9                <2> 	sub cl,ch
  4062                              <2> 	
  4063 00000B50 80F918              <2> 	cmp cl,24
  4064 00000B53 732C                <2> 	jae .endmantissa
  4065                              <2> 	
  4066 00000B55 B218                <2> 	mov dl,24
  4067 00000B57 28CA                <2> 	sub dl,cl				
  4068                              <2> 	
  4069 00000B59 89E0                <2> 	mov ax,sp
  4070 00000B5B 89C5                <2> 	mov bp,ax
  4071 00000B5D 8B4606              <2> 	mov ax,[bp+6]
  4072 00000B60 8B5E08              <2> 	mov bx,[bp+8]
  4073                              <2> 	
  4074 00000B63 51                  <2> 	push cx	
  4075                              <2> 	__shl32 ax, bx, dl	
  4076                              <3>  stkopen 5
  4077 00000B64 83EC05              <4>  sub word sp, %1
  4078 00000B67 54                  <4>  push sp
  4079 00000B68 5D                  <4>  pop bp
  4080 00000B69 894600              <3>  mov word [bp+0], %1
  4081 00000B6C 895E02              <3>  mov word [bp+2], %2
  4082 00000B6F 885604              <3>  mov byte [bp+4], %3
  4083 00000B72 E841FC              <3>  call proc_shl32
  4084 00000B75 54                  <3>  push sp
  4085 00000B76 5D                  <3>  pop bp
  4086 00000B77 8B4600              <3>  mov word %1, [bp+0]
  4087 00000B7A 8B5E02              <3>  mov word %2, [bp+2]
  4088                              <3>  stkclose 5
  4089 00000B7D 83C405              <4>  add word sp, %1
  4090 00000B80 59                  <2> 	pop cx
  4091                              <2> 	
  4092                              <2> 	.endmantissa:
  4093                              <2> 	
  4094 00000B81 83E07F              <2> 	and ax,0x007F
  4095                              <2> 		
  4096 00000B84 80C17E              <2> 	add cl,0x7E
  4097 00000B87 C1E108              <2> 	shl cx,8
  4098 00000B8A D1E9                <2> 	shr cx,1
  4099 00000B8C 01C8                <2> 	add ax,cx
  4100                              <2> 	
  4101 00000B8E 89E1                <2> 	mov cx,sp
  4102 00000B90 89CD                <2> 	mov bp,cx
  4103                              <2> 	
  4104 00000B92 8B4E02              <2> 	mov cx,[bp+2]
  4105 00000B95 81E10080            <2> 	and cx,0x8000	
  4106 00000B99 01C8                <2> 	add ax,cx
  4107                              <2> 		
  4108 00000B9B 894606              <2> 	mov [bp+6],ax
  4109 00000B9E 895E08              <2> 	mov [bp+8],bx
  4110                              <2> 	
  4111                              <2> 	.done:		
  4112                              <2> 	
  4113 00000BA1 C3                  <2> 	ret
  4114                              <2> 	
  4115                              <2> proc_flcmp:
  4116 00000BA2 89E0                <2> 	mov ax,sp
  4117 00000BA4 89C5                <2> 	mov bp,ax
  4118                              <2> 	
  4119 00000BA6 8B4602              <2> 	mov ax,[bp+2]
  4120 00000BA9 8B5E06              <2> 	mov bx,[bp+6]
  4121 00000BAC 250080              <2> 	and ax,0x8000
  4122 00000BAF 81E30080            <2> 	and bx,0x8000	
  4123 00000BB3 39D8                <2> 	cmp ax,bx
  4124 00000BB5 7740                <2> 	ja .above
  4125 00000BB7 7242                <2> 	jb .below
  4126                              <2> 	
  4127 00000BB9 8B4602              <2> 	mov ax,[bp+2]
  4128 00000BBC 8B5E06              <2> 	mov bx,[bp+6]
  4129 00000BBF D1E0                <2> 	shl ax,1
  4130 00000BC1 D1E3                <2> 	shl bx,1
  4131 00000BC3 38FC                <2> 	cmp ah,bh
  4132 00000BC5 7730                <2> 	ja .above
  4133 00000BC7 7232                <2> 	jb .below
  4134                              <2> 	
  4135 00000BC9 8B4602              <2> 	mov ax,[bp+2]
  4136 00000BCC 8B5E04              <2> 	mov bx,[bp+4]
  4137 00000BCF 8B4E06              <2> 	mov cx,[bp+6]
  4138 00000BD2 8B5608              <2> 	mov dx,[bp+8]
  4139                              <2> 	
  4140                              <2> 	__cmp32 ax, bx, cx, dx, cl
  4141                              <3>  stkopen 9
  4142 00000BD5 83EC09              <4>  sub word sp, %1
  4143 00000BD8 54                  <4>  push sp
  4144 00000BD9 5D                  <4>  pop bp
  4145 00000BDA 894600              <3>  mov word [bp+0], %1
  4146 00000BDD 895E02              <3>  mov word [bp+2], %2
  4147 00000BE0 894E04              <3>  mov word [bp+4], %3
  4148 00000BE3 895606              <3>  mov word [bp+6], %4
  4149 00000BE6 E8A2FB              <3>  call proc_cmp32
  4150 00000BE9 54                  <3>  push sp
  4151 00000BEA 5D                  <3>  pop bp
  4152 00000BEB 8A4E08              <3>  mov byte %5, [bp+8]
  4153                              <3>  stkclose 9
  4154 00000BEE 83C409              <4>  add word sp, %1
  4155 00000BF1 89E0                <2> 	mov ax,sp
  4156 00000BF3 89C5                <2> 	mov bp,ax
  4157 00000BF5 EB0A                <2> 	jmp .endcmp
  4158                              <2> 		
  4159                              <2> 	.above:
  4160 00000BF7 B101                <2> 		mov cl, 1
  4161 00000BF9 EB06                <2> 		jmp .endcmp
  4162                              <2> 	.below:
  4163 00000BFB B1FF                <2> 		mov cl, -1
  4164 00000BFD EB02                <2> 		jmp .endcmp
  4165                              <2> 	.equal:	
  4166 00000BFF B100                <2> 		mov cl, 0	
  4167                              <2> 	.endcmp:
  4168                              <2> 	
  4169 00000C01 884E0A              <2> 	mov byte [bp+0x0A], cl
  4170                              <2> 					
  4171 00000C04 C3                  <2> 	ret
  4172                              <2> 
  4173                              <2> proc_fldiv:
  4174 00000C05 89E0                <2> 	mov ax,sp
  4175 00000C07 89C5                <2> 	mov bp,ax
  4176                              <2> 				
  4177                              <2> 	; sinal
  4178                              <2> 	
  4179 00000C09 8B4602              <2> 	mov ax,[bp+2]
  4180 00000C0C 8B5E06              <2> 	mov bx,[bp+6]
  4181 00000C0F 250080              <2> 	and ax,0x8000
  4182 00000C12 81E30080            <2> 	and bx,0x8000
  4183 00000C16 31D8                <2> 	xor ax,bx
  4184 00000C18 89460A              <2> 	mov word [bp+0x0A],ax
  4185                              <2> 		
  4186                              <2> 	; sinal calculado e setado
  4187                              <2> 
  4188                              <2> 	; valores especiais
  4189                              <2> 	
  4190 00000C1B 8B4602              <2> 	mov ax,[bp+2]
  4191 00000C1E 8B5E04              <2> 	mov bx,[bp+4]
  4192 00000C21 8B4E06              <2> 	mov cx,[bp+6]
  4193 00000C24 8B5608              <2> 	mov dx,[bp+8]
  4194                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  4195                              <3>  stkopen 0x0D
  4196 00000C27 83EC0D              <4>  sub word sp, %1
  4197 00000C2A 54                  <4>  push sp
  4198 00000C2B 5D                  <4>  pop bp
  4199 00000C2C 894600              <3>  mov word [bp+0],%1
  4200 00000C2F 895E02              <3>  mov word [bp+2],%2
  4201 00000C32 894E04              <3>  mov word [bp+4],%3
  4202 00000C35 895606              <3>  mov word [bp+6],%4
  4203 00000C38 E8FC06              <3>  call proc__validate
  4204 00000C3B 54                  <3>  push sp
  4205 00000C3C 5D                  <3>  pop bp
  4206 00000C3D 8B4608              <3>  mov word %5,[bp+8]
  4207 00000C40 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4208 00000C43 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4209                              <3>  stkclose 0x0D
  4210 00000C46 83C40D              <4>  add word sp, %1
  4211 00000C49 80F900              <2> 	cmp cl,0
  4212 00000C4C 750D                <2> 	jnz .continue
  4213 00000C4E 89E2                <2> 		mov dx,sp
  4214 00000C50 89D5                <2> 		mov bp,dx
  4215 00000C52 01460A              <2> 		add word [bp+0x0A],ax
  4216 00000C55 895E0C              <2> 		mov word [bp+0x0C],bx						
  4217 00000C58 E9C800              <2> 		jmp .done	
  4218                              <2> 	.continue:
  4219                              <2> 	
  4220 00000C5B 89E0                <2> 	mov ax,sp
  4221 00000C5D 89C5                <2> 	mov bp,ax
  4222 00000C5F 8B4602              <2> 	mov ax,[bp+2]
  4223 00000C62 8B5E04              <2> 	mov bx,[bp+4]
  4224 00000C65 8B4E06              <2> 	mov cx,[bp+6]
  4225 00000C68 8B5608              <2> 	mov dx,[bp+8]
  4226                              <2> 	__div_validate ax, bx, cx, dx, ax, bx, cl
  4227                              <3>  stkopen 0x0D
  4228 00000C6B 83EC0D              <4>  sub word sp, %1
  4229 00000C6E 54                  <4>  push sp
  4230 00000C6F 5D                  <4>  pop bp
  4231 00000C70 894600              <3>  mov word [bp+0],%1
  4232 00000C73 895E02              <3>  mov word [bp+2],%2
  4233 00000C76 894E04              <3>  mov word [bp+4],%3
  4234 00000C79 895606              <3>  mov word [bp+6],%4
  4235 00000C7C E81F07              <3>  call proc__div_validate
  4236 00000C7F 54                  <3>  push sp
  4237 00000C80 5D                  <3>  pop bp
  4238 00000C81 8B4608              <3>  mov word %5,[bp+8]
  4239 00000C84 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4240 00000C87 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4241                              <3>  stkclose 0x0D
  4242 00000C8A 83C40D              <4>  add word sp, %1
  4243 00000C8D 80F900              <2> 	cmp cl,0
  4244 00000C90 750D                <2> 	jnz .continue2
  4245 00000C92 89E2                <2> 		mov dx,sp
  4246 00000C94 89D5                <2> 		mov bp,dx
  4247 00000C96 01460A              <2> 		add word [bp+0x0A],ax
  4248 00000C99 895E0C              <2> 		mov word [bp+0x0C],bx				
  4249 00000C9C E98400              <2> 		jmp .done	
  4250                              <2> 	.continue2:
  4251                              <2> 	; valores especiais tratados
  4252                              <2> 			
  4253                              <2> 	; expoente parcial
  4254                              <2> 
  4255 00000C9F 89E0                <2> 	mov ax,sp
  4256 00000CA1 89C5                <2> 	mov bp,ax
  4257 00000CA3 8B4602              <2> 	mov ax,[bp+2]
  4258 00000CA6 8B5E06              <2> 	mov bx,[bp+6]
  4259 00000CA9 25807F              <2> 	and ax,0x7F80
  4260 00000CAC 81E3807F            <2> 	and bx,0x7F80
  4261 00000CB0 D1E0                <2> 	shl ax,1
  4262 00000CB2 D1E3                <2> 	shl bx,1		
  4263                              <2> 			
  4264 00000CB4 28FC                <2> 	sub ah,bh		
  4265 00000CB6 80C47F              <2> 	add ah,0x7F
  4266                              <2> 	
  4267 00000CB9 50                  <2> 	push ax
  4268                              <2> 		
  4269                              <2> 	; expoente parcial calculado
  4270                              <2> 	
  4271                              <2> 	; mantissa
  4272                              <2> 
  4273 00000CBA 8B4602              <2> 	mov ax,[bp+2]
  4274 00000CBD 8B5E04              <2> 	mov bx,[bp+4]
  4275 00000CC0 8B4E06              <2> 	mov cx,[bp+6]
  4276 00000CC3 8B5608              <2> 	mov dx,[bp+8]
  4277 00000CC6 83E07F              <2> 	and ax,0x007F
  4278 00000CC9 83E17F              <2> 	and cx,0x007F
  4279 00000CCC 0D8000              <2> 	or ax,0x0080
  4280 00000CCF 81C98000            <2> 	or cx,0x0080
  4281                              <2> 	
  4282                              <2> 	__fldiv32 ax, bx, cx, dx, cx, dx
  4283                              <3>  stkopen 0x11
  4284 00000CD3 83EC11              <4>  sub word sp, %1
  4285 00000CD6 54                  <4>  push sp
  4286 00000CD7 5D                  <4>  pop bp
  4287 00000CD8 894600              <3>  mov word [bp+0],%1
  4288 00000CDB 895E02              <3>  mov word [bp+2],%2
  4289 00000CDE 894E04              <3>  mov word [bp+4],%3
  4290 00000CE1 895606              <3>  mov word [bp+6],%4
  4291 00000CE4 E87505              <3>  call proc__fldiv32
  4292 00000CE7 54                  <3>  push sp
  4293 00000CE8 5D                  <3>  pop bp
  4294 00000CE9 8B4E08              <3>  mov word %5,[bp+8]
  4295 00000CEC 8B560A              <3>  mov word %6,[bp+0x0A]
  4296                              <3>  stkclose 0x11
  4297 00000CEF 83C411              <4>  add word sp, %1
  4298                              <2> 		
  4299 00000CF2 89E0                <2> 	mov ax,sp
  4300 00000CF4 89C5                <2> 	mov bp,ax
  4301 00000CF6 83C502              <2> 	add bp,2
  4302                              <2> 	
  4303 00000CF9 034E0A              <2> 	add cx,[bp+0x0A]
  4304                              <2> 			
  4305 00000CFC 58                  <2> 	pop ax	
  4306                              <2> 	__normalize cx, dx, ax
  4307                              <3>  stkopen 0x06
  4308 00000CFD 83EC06              <4>  sub word sp, %1
  4309 00000D00 54                  <4>  push sp
  4310 00000D01 5D                  <4>  pop bp
  4311 00000D02 894E00              <3>  mov word [bp+0],%1
  4312 00000D05 895602              <3>  mov word [bp+2],%2
  4313 00000D08 894604              <3>  mov word [bp+4],%3
  4314 00000D0B E8B303              <3>  call proc__normalize
  4315 00000D0E 54                  <3>  push sp
  4316 00000D0F 5D                  <3>  pop bp
  4317 00000D10 8B4E00              <3>  mov word %1,[bp+0]
  4318 00000D13 8B5602              <3>  mov word %2,[bp+2]
  4319                              <3>  stkclose 0x06
  4320 00000D16 83C406              <4>  add word sp, %1
  4321                              <2> 	
  4322 00000D19 89E0                <2> 	mov ax,sp
  4323 00000D1B 89C5                <2> 	mov bp,ax
  4324 00000D1D 894E0A              <2> 	mov [bp+0x0A],cx
  4325 00000D20 89560C              <2> 	mov [bp+0x0C],dx
  4326                              <2> 	
  4327                              <2> 	.done:
  4328                              <2> 			
  4329 00000D23 C3                  <2> 	ret
  4330                              <2> 
  4331                              <2> proc_flmul:
  4332 00000D24 89E0                <2> 	mov ax,sp
  4333 00000D26 89C5                <2> 	mov bp,ax
  4334                              <2> 	
  4335                              <2> 	; sinal
  4336                              <2> 	
  4337 00000D28 8B4602              <2> 	mov ax,[bp+2]
  4338 00000D2B 8B5E06              <2> 	mov bx,[bp+6]
  4339 00000D2E 250080              <2> 	and ax,0x8000
  4340 00000D31 81E30080            <2> 	and bx,0x8000
  4341 00000D35 31D8                <2> 	xor ax,bx
  4342 00000D37 89460A              <2> 	mov word [bp+0x0A],ax
  4343                              <2> 	
  4344                              <2> 	; sinal calculado e setado
  4345                              <2> 
  4346                              <2> 	; valores especiais
  4347                              <2> 
  4348 00000D3A 8B4602              <2> 	mov ax,[bp+2]
  4349 00000D3D 8B5E04              <2> 	mov bx,[bp+4]
  4350 00000D40 8B4E06              <2> 	mov cx,[bp+6]
  4351 00000D43 8B5608              <2> 	mov dx,[bp+8]
  4352                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  4353                              <3>  stkopen 0x0D
  4354 00000D46 83EC0D              <4>  sub word sp, %1
  4355 00000D49 54                  <4>  push sp
  4356 00000D4A 5D                  <4>  pop bp
  4357 00000D4B 894600              <3>  mov word [bp+0],%1
  4358 00000D4E 895E02              <3>  mov word [bp+2],%2
  4359 00000D51 894E04              <3>  mov word [bp+4],%3
  4360 00000D54 895606              <3>  mov word [bp+6],%4
  4361 00000D57 E8DD05              <3>  call proc__validate
  4362 00000D5A 54                  <3>  push sp
  4363 00000D5B 5D                  <3>  pop bp
  4364 00000D5C 8B4608              <3>  mov word %5,[bp+8]
  4365 00000D5F 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4366 00000D62 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4367                              <3>  stkclose 0x0D
  4368 00000D65 83C40D              <4>  add word sp, %1
  4369 00000D68 80F900              <2> 	cmp cl,0
  4370 00000D6B 750D                <2> 	jnz .continue
  4371 00000D6D 89E2                <2> 		mov dx,sp
  4372 00000D6F 89D5                <2> 		mov bp,dx
  4373 00000D71 01460A              <2> 		add word [bp+0x0A],ax
  4374 00000D74 895E0C              <2> 		mov word [bp+0x0C],bx						
  4375 00000D77 E95501              <2> 		jmp .done	
  4376                              <2> 	.continue:
  4377                              <2> 
  4378 00000D7A 89E0                <2> 	mov ax,sp
  4379 00000D7C 89C5                <2> 	mov bp,ax
  4380 00000D7E 8B4602              <2> 	mov ax,[bp+2]
  4381 00000D81 8B4E06              <2> 	mov cx,[bp+6]
  4382                              <2> 	__mul_validate ax, cx, ax, bx, cl
  4383                              <3>  stkopen 0x09
  4384 00000D84 83EC09              <4>  sub word sp, %1
  4385 00000D87 54                  <4>  push sp
  4386 00000D88 5D                  <4>  pop bp
  4387 00000D89 894600              <3>  mov word [bp+0],%1
  4388 00000D8C 894E02              <3>  mov word [bp+2],%2
  4389 00000D8F E86606              <3>  call proc__mul_validate
  4390 00000D92 54                  <3>  push sp
  4391 00000D93 5D                  <3>  pop bp
  4392 00000D94 8B4604              <3>  mov word %3,[bp+4]
  4393 00000D97 8B5E06              <3>  mov word %4,[bp+6]
  4394 00000D9A 8A4E08              <3>  mov byte %5,[bp+8]
  4395                              <3>  stkclose 0x09
  4396 00000D9D 83C409              <4>  add word sp, %1
  4397 00000DA0 80F900              <2> 	cmp cl,0
  4398 00000DA3 750D                <2> 	jnz .continue2
  4399 00000DA5 89E2                <2> 		mov dx,sp
  4400 00000DA7 89D5                <2> 		mov bp,dx
  4401 00000DA9 01460A              <2> 		add word [bp+0x0A],ax
  4402 00000DAC 895E0C              <2> 		mov word [bp+0x0C],bx				
  4403 00000DAF E91D01              <2> 		jmp .done	
  4404                              <2> 	.continue2:
  4405                              <2> 	; valores especiais tratados
  4406                              <2> 		
  4407                              <2> 	; expoente parcial
  4408                              <2> 
  4409 00000DB2 89E0                <2> 	mov ax,sp
  4410 00000DB4 89C5                <2> 	mov bp,ax
  4411 00000DB6 8B4602              <2> 	mov ax,[bp+2]
  4412 00000DB9 8B5E06              <2> 	mov bx,[bp+6]
  4413 00000DBC 25807F              <2> 	and ax,0x7F80
  4414 00000DBF 81E3807F            <2> 	and bx,0x7F80
  4415 00000DC3 D1E0                <2> 	shl ax,1
  4416 00000DC5 D1E3                <2> 	shl bx,1		
  4417                              <2> 			
  4418 00000DC7 80EC7F              <2> 	sub ah,0x7F
  4419 00000DCA 80EF7F              <2> 	sub bh,0x7F
  4420                              <2> 				
  4421 00000DCD 00FC                <2> 	add ah,bh
  4422 00000DCF 80C47F              <2> 	add ah,0x7F
  4423                              <2> 	
  4424 00000DD2 50                  <2> 	push ax
  4425                              <2> 	
  4426                              <2> 	; expoente parcial calculado	
  4427                              <2> 	
  4428                              <2> 	; mantissa
  4429                              <2> 	
  4430 00000DD3 8B4602              <2> 	mov ax,[bp+2]
  4431 00000DD6 8B5E04              <2> 	mov bx,[bp+4]
  4432 00000DD9 8B4E06              <2> 	mov cx,[bp+6]
  4433 00000DDC 8B5608              <2> 	mov dx,[bp+8]	
  4434                              <2> 	
  4435 00000DDF 83E07F              <2> 	and ax, 0x007F
  4436 00000DE2 83E17F              <2> 	and cx, 0x007F
  4437 00000DE5 0D8000              <2> 	or ax, 0x0080
  4438 00000DE8 81C98000            <2> 	or cx, 0x0080
  4439                              <2> 		
  4440                              <2> 	__mul32_64 ax, bx, cx, dx, ax, bx, cx, dx
  4441                              <3>  stkopen 0x10
  4442 00000DEC 83EC10              <4>  sub word sp, %1
  4443 00000DEF 54                  <4>  push sp
  4444 00000DF0 5D                  <4>  pop bp
  4445 00000DF1 894600              <3>  mov word [bp+0],%1
  4446 00000DF4 895E02              <3>  mov word [bp+2],%2
  4447 00000DF7 894E04              <3>  mov word [bp+4],%3
  4448 00000DFA 895606              <3>  mov word [bp+6],%4
  4449 00000DFD E81104              <3>  call proc__mul32_64
  4450 00000E00 54                  <3>  push sp
  4451 00000E01 5D                  <3>  pop bp
  4452 00000E02 8B4608              <3>  mov word %5,[bp+8]
  4453 00000E05 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4454 00000E08 8B4E0C              <3>  mov word %7,[bp+0x0C]
  4455 00000E0B 8B560E              <3>  mov word %8,[bp+0x0E]
  4456                              <3>  stkclose 0x10
  4457 00000E0E 83C410              <4>  add word sp, %1
  4458                              <2> 	
  4459 00000E11 51                  <2> 	push cx
  4460                              <2> 	__shl32 ax, bx, 8
  4461                              <3>  stkopen 5
  4462 00000E12 83EC05              <4>  sub word sp, %1
  4463 00000E15 54                  <4>  push sp
  4464 00000E16 5D                  <4>  pop bp
  4465 00000E17 894600              <3>  mov word [bp+0], %1
  4466 00000E1A 895E02              <3>  mov word [bp+2], %2
  4467 00000E1D C6460408            <3>  mov byte [bp+4], %3
  4468 00000E21 E892F9              <3>  call proc_shl32
  4469 00000E24 54                  <3>  push sp
  4470 00000E25 5D                  <3>  pop bp
  4471 00000E26 8B4600              <3>  mov word %1, [bp+0]
  4472 00000E29 8B5E02              <3>  mov word %2, [bp+2]
  4473                              <3>  stkclose 5
  4474 00000E2C 83C405              <4>  add word sp, %1
  4475 00000E2F 59                  <2> 	pop cx
  4476 00000E30 88EB                <2> 	mov bl,ch
  4477                              <2> 								
  4478 00000E32 50                  <2> 	push ax
  4479 00000E33 53                  <2> 	push bx
  4480                              <2> 	__lzbitcount32 ax, bx, cl
  4481 00000E34 53                  <3>  push %2
  4482                              <3>  __lzbitcount16 %1, cl
  4483                              <4>  stkopen 3
  4484 00000E35 83EC03              <5>  sub word sp, %1
  4485 00000E38 54                  <5>  push sp
  4486 00000E39 5D                  <5>  pop bp
  4487 00000E3A 894600              <4>  mov word [bp+0], %1
  4488 00000E3D E842FA              <4>  call proc__lzbitcount16
  4489 00000E40 54                  <4>  push sp
  4490 00000E41 5D                  <4>  pop bp
  4491 00000E42 8A4E02              <4>  mov byte %2, [bp+2]
  4492                              <4>  stkclose 3
  4493 00000E45 83C403              <5>  add word sp, %1
  4494 00000E48 58                  <3>  pop ax
  4495 00000E49 80F910              <3>  cmp cl,16
  4496 00000E4C 7217                <3>  jb .end
  4497 00000E4E 51                  <3>  push cx
  4498                              <3>  __lzbitcount16 ax, al
  4499                              <4>  stkopen 3
  4500 00000E4F 83EC03              <5>  sub word sp, %1
  4501 00000E52 54                  <5>  push sp
  4502 00000E53 5D                  <5>  pop bp
  4503 00000E54 894600              <4>  mov word [bp+0], %1
  4504 00000E57 E828FA              <4>  call proc__lzbitcount16
  4505 00000E5A 54                  <4>  push sp
  4506 00000E5B 5D                  <4>  pop bp
  4507 00000E5C 8A4602              <4>  mov byte %2, [bp+2]
  4508                              <4>  stkclose 3
  4509 00000E5F 83C403              <5>  add word sp, %1
  4510 00000E62 59                  <3>  pop cx
  4511 00000E63 00C1                <3>  add cl,al
  4512                              <3>  .end:
  4513 00000E65 88C9                <3>  mov byte %3, cl
  4514 00000E67 5B                  <2> 	pop bx
  4515 00000E68 58                  <2> 	pop ax
  4516                              <2> 		
  4517 00000E69 80E908              <2> 	sub cl,8	
  4518 00000E6C 80F908              <2> 	cmp cl,8
  4519 00000E6F 7402                <2> 	je .equal
  4520 00000E71 7F06                <2> 	jg .great
  4521                              <2> 	.equal:	
  4522 00000E73 5A                  <2> 		pop dx
  4523 00000E74 FEC6                <2> 		inc dh
  4524 00000E76 52                  <2> 		push dx
  4525 00000E77 EB1C                <2> 		jmp .endcmp
  4526                              <2> 	.great:
  4527                              <2> 		__shl32 ax, bx, cl
  4528                              <3>  stkopen 5
  4529 00000E79 83EC05              <4>  sub word sp, %1
  4530 00000E7C 54                  <4>  push sp
  4531 00000E7D 5D                  <4>  pop bp
  4532 00000E7E 894600              <3>  mov word [bp+0], %1
  4533 00000E81 895E02              <3>  mov word [bp+2], %2
  4534 00000E84 884E04              <3>  mov byte [bp+4], %3
  4535 00000E87 E82CF9              <3>  call proc_shl32
  4536 00000E8A 54                  <3>  push sp
  4537 00000E8B 5D                  <3>  pop bp
  4538 00000E8C 8B4600              <3>  mov word %1, [bp+0]
  4539 00000E8F 8B5E02              <3>  mov word %2, [bp+2]
  4540                              <3>  stkclose 5
  4541 00000E92 83C405              <4>  add word sp, %1
  4542                              <2> 	.endcmp:
  4543                              <2> 	
  4544 00000E95 89E1                <2> 	mov cx,sp
  4545 00000E97 89CD                <2> 	mov bp,cx
  4546 00000E99 83C502              <2> 	add bp,2
  4547                              <2> 	
  4548 00000E9C 01460A              <2> 	add word [bp+0x0A],ax
  4549 00000E9F 895E0C              <2> 	mov word [bp+0x0C],bx
  4550                              <2> 	
  4551                              <2> 	; mantissa setada e expoente calculado
  4552                              <2> 				
  4553 00000EA2 8B4E0A              <2> 	mov cx,[bp+0x0A]
  4554 00000EA5 8B560C              <2> 	mov dx,[bp+0x0C]
  4555                              <2> 	
  4556 00000EA8 58                  <2> 	pop ax						
  4557                              <2> 	__normalize cx, dx, ax	; normaliza, preserva sinal e seta expoente	
  4558                              <3>  stkopen 0x06
  4559 00000EA9 83EC06              <4>  sub word sp, %1
  4560 00000EAC 54                  <4>  push sp
  4561 00000EAD 5D                  <4>  pop bp
  4562 00000EAE 894E00              <3>  mov word [bp+0],%1
  4563 00000EB1 895602              <3>  mov word [bp+2],%2
  4564 00000EB4 894604              <3>  mov word [bp+4],%3
  4565 00000EB7 E80702              <3>  call proc__normalize
  4566 00000EBA 54                  <3>  push sp
  4567 00000EBB 5D                  <3>  pop bp
  4568 00000EBC 8B4E00              <3>  mov word %1,[bp+0]
  4569 00000EBF 8B5602              <3>  mov word %2,[bp+2]
  4570                              <3>  stkclose 0x06
  4571 00000EC2 83C406              <4>  add word sp, %1
  4572                              <2> 		
  4573 00000EC5 89E0                <2> 	mov ax,sp
  4574 00000EC7 89C5                <2> 	mov bp,ax
  4575 00000EC9 894E0A              <2> 	mov [bp+0x0A],cx
  4576 00000ECC 89560C              <2> 	mov [bp+0x0C],dx		
  4577                              <2> 
  4578                              <2> 	.done:
  4579                              <2> 																	
  4580 00000ECF C3                  <2> 	ret
  4581                              <2> 	
  4582                              <2> proc_fladdorsub:	
  4583                              <2> 	; valores especiais
  4584 00000ED0 89E0                <2> 	mov ax,sp
  4585 00000ED2 89C5                <2> 	mov bp,ax
  4586 00000ED4 8B4602              <2> 	mov ax,[bp+2]
  4587 00000ED7 8B5E04              <2> 	mov bx,[bp+4]
  4588 00000EDA 8B4E06              <2> 	mov cx,[bp+6]
  4589 00000EDD 81E10080            <2> 	and cx,0x8000
  4590 00000EE1 334E0E              <2> 	xor word cx,[bp+0x0E]	
  4591 00000EE4 8B5606              <2> 	mov dx,[bp+6]
  4592 00000EE7 81E2FF7F            <2> 	and dx,0x7FFF
  4593 00000EEB 01D1                <2> 	add cx,dx	
  4594 00000EED 8B5608              <2> 	mov dx,[bp+8]
  4595                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  4596                              <3>  stkopen 0x0D
  4597 00000EF0 83EC0D              <4>  sub word sp, %1
  4598 00000EF3 54                  <4>  push sp
  4599 00000EF4 5D                  <4>  pop bp
  4600 00000EF5 894600              <3>  mov word [bp+0],%1
  4601 00000EF8 895E02              <3>  mov word [bp+2],%2
  4602 00000EFB 894E04              <3>  mov word [bp+4],%3
  4603 00000EFE 895606              <3>  mov word [bp+6],%4
  4604 00000F01 E83304              <3>  call proc__validate
  4605 00000F04 54                  <3>  push sp
  4606 00000F05 5D                  <3>  pop bp
  4607 00000F06 8B4608              <3>  mov word %5,[bp+8]
  4608 00000F09 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4609 00000F0C 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4610                              <3>  stkclose 0x0D
  4611 00000F0F 83C40D              <4>  add word sp, %1
  4612 00000F12 80F900              <2> 	cmp cl,0
  4613 00000F15 750D                <2> 	jnz .continue
  4614 00000F17 89E2                <2> 		mov dx,sp
  4615 00000F19 89D5                <2> 		mov bp,dx		
  4616 00000F1B 89460A              <2> 		mov word [bp+0x0A],ax
  4617 00000F1E 895E0C              <2> 		mov word [bp+0x0C],bx										
  4618 00000F21 E99C01              <2> 		jmp .done	
  4619                              <2> 	.continue:
  4620                              <2> 	
  4621 00000F24 89E0                <2> 	mov ax,sp
  4622 00000F26 89C5                <2> 	mov bp,ax
  4623 00000F28 8B4602              <2> 	mov ax,[bp+2]
  4624 00000F2B 8B5E04              <2> 	mov bx,[bp+4]
  4625 00000F2E 8B4E06              <2> 	mov cx,[bp+6]
  4626 00000F31 81E10080            <2> 	and cx,0x8000
  4627 00000F35 334E0E              <2> 	xor word cx,[bp+0x0E]	
  4628 00000F38 8B5606              <2> 	mov dx,[bp+6]
  4629 00000F3B 81E2FF7F            <2> 	and dx,0x7FFF
  4630 00000F3F 01D1                <2> 	add cx,dx
  4631 00000F41 8B5608              <2> 	mov dx,[bp+8]
  4632                              <2> 	__addorsub_validate ax, bx, cx, dx, ax, bx, cl
  4633                              <3>  stkopen 0x0D
  4634 00000F44 83EC0D              <4>  sub word sp, %1
  4635 00000F47 54                  <4>  push sp
  4636 00000F48 5D                  <4>  pop bp
  4637 00000F49 894600              <3>  mov word [bp+0],%1
  4638 00000F4C 895E02              <3>  mov word [bp+2],%2
  4639 00000F4F 894E04              <3>  mov word [bp+4],%3
  4640 00000F52 895606              <3>  mov word [bp+6],%4
  4641 00000F55 E8D104              <3>  call proc__addorsub_validate
  4642 00000F58 54                  <3>  push sp
  4643 00000F59 5D                  <3>  pop bp
  4644 00000F5A 8B4608              <3>  mov word %5,[bp+8]
  4645 00000F5D 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4646 00000F60 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4647                              <3>  stkclose 0x0D
  4648 00000F63 83C40D              <4>  add word sp, %1
  4649 00000F66 80F900              <2> 	cmp cl,0
  4650 00000F69 750D                <2> 	jnz .continue2
  4651 00000F6B 89E2                <2> 		mov dx,sp
  4652 00000F6D 89D5                <2> 		mov bp,dx					
  4653 00000F6F 89460A              <2> 		mov word [bp+0x0A],ax
  4654 00000F72 895E0C              <2> 		mov word [bp+0x0C],bx
  4655 00000F75 E94801              <2> 		jmp .done	
  4656                              <2> 	.continue2:
  4657                              <2> 	
  4658                              <2> 	; valores especiais tratados	
  4659                              <2> 
  4660 00000F78 89E0                <2> 	mov ax,sp
  4661 00000F7A 89C5                <2> 	mov bp,ax	
  4662 00000F7C 8B4602              <2> 	mov ax,[bp+2]
  4663 00000F7F 8B5E06              <2> 	mov bx,[bp+6]
  4664                              <2> 	
  4665 00000F82 D1E0                <2> 	shl ax,1
  4666 00000F84 D1E3                <2> 	shl bx,1
  4667 00000F86 88E5                <2> 	mov ch,ah	
  4668 00000F88 28FD                <2> 	sub ch,bh	
  4669                              <2> 		
  4670 00000F8A 80FD00              <2> 	cmp ch,0
  4671 00000F8D 7402                <2> 	jz .expzero
  4672 00000F8F EB1E                <2> 	jmp .expnzero
  4673                              <2> 	.expzero:
  4674 00000F91 50                  <2> 		push ax
  4675 00000F92 8B4602              <2> 		mov ax,[bp+2]
  4676 00000F95 8B5E04              <2> 		mov bx,[bp+4]
  4677 00000F98 8B4E06              <2> 		mov cx,[bp+6]
  4678 00000F9B 8B5608              <2> 		mov dx,[bp+8]
  4679 00000F9E 257F80              <2> 		and ax,0x807F
  4680 00000FA1 81E17F80            <2> 		and cx,0x807F
  4681 00000FA5 0D8000              <2> 		or ax,0x0080
  4682 00000FA8 81C98000            <2> 		or cx,0x0080
  4683                              <2> 												
  4684 00000FAC E99A00              <2> 		jmp .endexpcmp
  4685                              <2> 	.expnzero:
  4686                              <2> 				
  4687 00000FAF 80FD00              <2> 		cmp ch,0
  4688 00000FB2 7F05                <2> 		jg .exp1great
  4689 00000FB4 7C49                <2> 		jl .exp1less
  4690 00000FB6 E99000              <2> 		jmp .endexpcmp
  4691                              <2> 		.exp1great:					
  4692 00000FB9 50                  <2> 			push ax
  4693                              <2> 		
  4694 00000FBA 8B4606              <2> 			mov ax,[bp+6]
  4695 00000FBD 8B5E08              <2> 			mov bx,[bp+8]
  4696 00000FC0 83E07F              <2> 			and ax,0x007F
  4697 00000FC3 0D8000              <2> 			or ax,0x0080
  4698                              <2> 						
  4699 00000FC6 55                  <2> 			push bp
  4700                              <2> 			__shr32 ax, bx, ch
  4701                              <3>  stkopen 5
  4702 00000FC7 83EC05              <4>  sub word sp, %1
  4703 00000FCA 54                  <4>  push sp
  4704 00000FCB 5D                  <4>  pop bp
  4705 00000FCC 894600              <3>  mov word [bp+0], %1
  4706 00000FCF 895E02              <3>  mov word [bp+2], %2
  4707 00000FD2 886E04              <3>  mov byte [bp+4], %3
  4708 00000FD5 E825F8              <3>  call proc_shr32
  4709 00000FD8 54                  <3>  push sp
  4710 00000FD9 5D                  <3>  pop bp
  4711 00000FDA 8B4600              <3>  mov word %1, [bp+0]
  4712 00000FDD 8B5E02              <3>  mov word %2, [bp+2]
  4713                              <3>  stkclose 5
  4714 00000FE0 83C405              <4>  add word sp, %1
  4715 00000FE3 5D                  <2> 			pop bp		
  4716                              <2> 				
  4717 00000FE4 8B5606              <2> 			mov dx,[bp+6]
  4718 00000FE7 81E20080            <2> 			and dx,0x8000
  4719 00000FEB 01D0                <2> 			add ax,dx			
  4720                              <2> 			
  4721 00000FED 89C1                <2> 			mov cx,ax
  4722 00000FEF 89DA                <2> 			mov dx,bx
  4723 00000FF1 8B4602              <2> 			mov ax,[bp+2]
  4724 00000FF4 8B5E04              <2> 			mov bx,[bp+4]										
  4725                              <2> 									
  4726 00000FF7 257F80              <2> 			and ax,0x807F
  4727 00000FFA 0D8000              <2> 			or ax,0x0080
  4728                              <2> 						
  4729 00000FFD EB4A                <2> 			jmp .endexp1cmp	
  4730                              <2> 		.exp1less:
  4731 00000FFF 88E9                <2> 			mov cl,ch
  4732 00001001 B5FF                <2> 			mov ch,0xFF
  4733 00001003 28CD                <2> 			sub ch,cl
  4734 00001005 FEC5                <2> 			inc ch
  4735 00001007 53                  <2> 			push bx		
  4736                              <2> 		
  4737 00001008 8B4602              <2> 			mov ax,[bp+2]
  4738 0000100B 8B5E04              <2> 			mov bx,[bp+4]
  4739 0000100E 83E07F              <2> 			and ax,0x007F
  4740 00001011 0D8000              <2> 			or ax,0x0080
  4741                              <2> 						
  4742 00001014 55                  <2> 			push bp
  4743                              <2> 			__shr32 ax, bx, ch
  4744                              <3>  stkopen 5
  4745 00001015 83EC05              <4>  sub word sp, %1
  4746 00001018 54                  <4>  push sp
  4747 00001019 5D                  <4>  pop bp
  4748 0000101A 894600              <3>  mov word [bp+0], %1
  4749 0000101D 895E02              <3>  mov word [bp+2], %2
  4750 00001020 886E04              <3>  mov byte [bp+4], %3
  4751 00001023 E8D7F7              <3>  call proc_shr32
  4752 00001026 54                  <3>  push sp
  4753 00001027 5D                  <3>  pop bp
  4754 00001028 8B4600              <3>  mov word %1, [bp+0]
  4755 0000102B 8B5E02              <3>  mov word %2, [bp+2]
  4756                              <3>  stkclose 5
  4757 0000102E 83C405              <4>  add word sp, %1
  4758 00001031 5D                  <2> 			pop bp
  4759                              <2> 								
  4760 00001032 8B5602              <2> 			mov dx,[bp+2]
  4761 00001035 81E20080            <2> 			and dx,0x8000
  4762 00001039 01D0                <2> 			add ax,dx			
  4763                              <2> 			
  4764 0000103B 8B4E06              <2> 			mov cx,[bp+6]
  4765 0000103E 8B5608              <2> 			mov dx,[bp+8]										
  4766                              <2> 									
  4767 00001041 81E17F80            <2> 			and cx,0x807F
  4768 00001045 81C98000            <2> 			or cx,0x0080
  4769                              <2> 									
  4770                              <2> 		.endexp1cmp:
  4771                              <2> 		
  4772                              <2> 	.endexpcmp:			
  4773                              <2> 	
  4774 00001049 837E0E00            <2> 	cmp word [bp+0x0E],0
  4775 0000104D 7526                <2> 	jnz .sub
  4776                              <2> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0
  4777                              <3>  stkopen 0x0D
  4778 0000104F 83EC0D              <4>  sub word sp, %1
  4779 00001052 54                  <4>  push sp
  4780 00001053 5D                  <4>  pop bp
  4781 00001054 894600              <3>  mov word [bp+0],%1
  4782 00001057 895E02              <3>  mov word [bp+2],%2
  4783 0000105A 894E04              <3>  mov word [bp+4],%3
  4784 0000105D 895606              <3>  mov word [bp+6],%4
  4785 00001060 C7460C0000          <3>  mov word [bp+0x0C], %7
  4786 00001065 E81201              <3>  call proc__iaddorsub32
  4787 00001068 54                  <3>  push sp
  4788 00001069 5D                  <3>  pop bp
  4789 0000106A 8B4608              <3>  mov word %5,[bp+8]
  4790 0000106D 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4791                              <3>  stkclose 0x0D
  4792 00001070 83C40D              <4>  add word sp, %1
  4793 00001073 EB24                <2> 		jmp .endop
  4794                              <2> 	.sub:
  4795                              <2> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0x8000
  4796                              <3>  stkopen 0x0D
  4797 00001075 83EC0D              <4>  sub word sp, %1
  4798 00001078 54                  <4>  push sp
  4799 00001079 5D                  <4>  pop bp
  4800 0000107A 894600              <3>  mov word [bp+0],%1
  4801 0000107D 895E02              <3>  mov word [bp+2],%2
  4802 00001080 894E04              <3>  mov word [bp+4],%3
  4803 00001083 895606              <3>  mov word [bp+6],%4
  4804 00001086 C7460C0080          <3>  mov word [bp+0x0C], %7
  4805 0000108B E8EC00              <3>  call proc__iaddorsub32
  4806 0000108E 54                  <3>  push sp
  4807 0000108F 5D                  <3>  pop bp
  4808 00001090 8B4608              <3>  mov word %5,[bp+8]
  4809 00001093 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4810                              <3>  stkclose 0x0D
  4811 00001096 83C40D              <4>  add word sp, %1
  4812                              <2> 	.endop:
  4813                              <2> 						
  4814 00001099 59                  <2> 	pop cx
  4815                              <2> 	
  4816                              <2> 	__normalize ax, bx, cx
  4817                              <3>  stkopen 0x06
  4818 0000109A 83EC06              <4>  sub word sp, %1
  4819 0000109D 54                  <4>  push sp
  4820 0000109E 5D                  <4>  pop bp
  4821 0000109F 894600              <3>  mov word [bp+0],%1
  4822 000010A2 895E02              <3>  mov word [bp+2],%2
  4823 000010A5 894E04              <3>  mov word [bp+4],%3
  4824 000010A8 E81600              <3>  call proc__normalize
  4825 000010AB 54                  <3>  push sp
  4826 000010AC 5D                  <3>  pop bp
  4827 000010AD 8B4600              <3>  mov word %1,[bp+0]
  4828 000010B0 8B5E02              <3>  mov word %2,[bp+2]
  4829                              <3>  stkclose 0x06
  4830 000010B3 83C406              <4>  add word sp, %1
  4831                              <2> 	
  4832 000010B6 89E1                <2> 	mov cx,sp
  4833 000010B8 89CD                <2> 	mov bp,cx
  4834 000010BA 89460A              <2> 	mov word [bp+0x0A],ax
  4835 000010BD 895E0C              <2> 	mov word [bp+0x0C],bx
  4836                              <2> 									
  4837                              <2> 	.done:		
  4838                              <2> 							
  4839 000010C0 C3                  <2> 	ret
  4840                              <2> 	
  4841                              <2> proc__normalize:
  4842 000010C1 89E0                <2> 	mov ax,sp
  4843 000010C3 89C5                <2> 	mov bp,ax	
  4844                              <2> 
  4845 000010C5 8B4E02              <2> 	mov cx,[bp+2]	
  4846 000010C8 8B5604              <2> 	mov dx,[bp+4]
  4847 000010CB 8B5E06              <2> 	mov bx,[bp+6]
  4848                              <2> 					
  4849 000010CE 89C8                <2> 	mov ax,cx
  4850 000010D0 250080              <2> 	and ax,0x8000			
  4851 000010D3 894602              <2> 	mov [bp+2],ax	
  4852                              <2> 					
  4853 000010D6 81E1FF7F            <2> 	and cx,0x7FFF
  4854                              <2> 			
  4855 000010DA 51                  <2> 	push cx
  4856 000010DB 52                  <2> 	push dx
  4857 000010DC 53                  <2> 	push bx
  4858                              <2> 	__lzbitcount32 cx, dx, al	
  4859 000010DD 52                  <3>  push %2
  4860                              <3>  __lzbitcount16 %1, cl
  4861                              <4>  stkopen 3
  4862 000010DE 83EC03              <5>  sub word sp, %1
  4863 000010E1 54                  <5>  push sp
  4864 000010E2 5D                  <5>  pop bp
  4865 000010E3 894E00              <4>  mov word [bp+0], %1
  4866 000010E6 E899F7              <4>  call proc__lzbitcount16
  4867 000010E9 54                  <4>  push sp
  4868 000010EA 5D                  <4>  pop bp
  4869 000010EB 8A4E02              <4>  mov byte %2, [bp+2]
  4870                              <4>  stkclose 3
  4871 000010EE 83C403              <5>  add word sp, %1
  4872 000010F1 58                  <3>  pop ax
  4873 000010F2 80F910              <3>  cmp cl,16
  4874 000010F5 7217                <3>  jb .end
  4875 000010F7 51                  <3>  push cx
  4876                              <3>  __lzbitcount16 ax, al
  4877                              <4>  stkopen 3
  4878 000010F8 83EC03              <5>  sub word sp, %1
  4879 000010FB 54                  <5>  push sp
  4880 000010FC 5D                  <5>  pop bp
  4881 000010FD 894600              <4>  mov word [bp+0], %1
  4882 00001100 E87FF7              <4>  call proc__lzbitcount16
  4883 00001103 54                  <4>  push sp
  4884 00001104 5D                  <4>  pop bp
  4885 00001105 8A4602              <4>  mov byte %2, [bp+2]
  4886                              <4>  stkclose 3
  4887 00001108 83C403              <5>  add word sp, %1
  4888 0000110B 59                  <3>  pop cx
  4889 0000110C 00C1                <3>  add cl,al
  4890                              <3>  .end:
  4891 0000110E 88C8                <3>  mov byte %3, cl
  4892 00001110 5B                  <2> 	pop bx
  4893 00001111 5A                  <2> 	pop dx
  4894 00001112 59                  <2> 	pop cx								
  4895                              <2> 		
  4896 00001113 3C08                <2> 	cmp al,8					
  4897 00001115 7204                <2> 	jb .shr
  4898 00001117 7728                <2> 	ja .shl
  4899 00001119 EB4A                <2> 	jmp .endshrl
  4900                              <2> 	.shr:			
  4901 0000111B B408                <2> 		mov ah,0x08
  4902 0000111D 28C4                <2> 		sub ah,al
  4903 0000111F 00E7                <2> 		add bh,ah
  4904 00001121 53                  <2> 		push bx
  4905                              <2> 		__shr32 cx, dx, ah
  4906                              <3>  stkopen 5
  4907 00001122 83EC05              <4>  sub word sp, %1
  4908 00001125 54                  <4>  push sp
  4909 00001126 5D                  <4>  pop bp
  4910 00001127 894E00              <3>  mov word [bp+0], %1
  4911 0000112A 895602              <3>  mov word [bp+2], %2
  4912 0000112D 886604              <3>  mov byte [bp+4], %3
  4913 00001130 E8CAF6              <3>  call proc_shr32
  4914 00001133 54                  <3>  push sp
  4915 00001134 5D                  <3>  pop bp
  4916 00001135 8B4E00              <3>  mov word %1, [bp+0]
  4917 00001138 8B5602              <3>  mov word %2, [bp+2]
  4918                              <3>  stkclose 5
  4919 0000113B 83C405              <4>  add word sp, %1
  4920 0000113E 5B                  <2> 		pop bx
  4921 0000113F EB24                <2> 		jmp .endshrl
  4922                              <2> 	.shl:		
  4923 00001141 B408                <2> 		mov ah,0x08
  4924 00001143 28E0                <2> 		sub al,ah
  4925 00001145 28C7                <2> 		sub bh,al			
  4926 00001147 53                  <2> 		push bx
  4927                              <2> 		__shl32 cx, dx, al
  4928                              <3>  stkopen 5
  4929 00001148 83EC05              <4>  sub word sp, %1
  4930 0000114B 54                  <4>  push sp
  4931 0000114C 5D                  <4>  pop bp
  4932 0000114D 894E00              <3>  mov word [bp+0], %1
  4933 00001150 895602              <3>  mov word [bp+2], %2
  4934 00001153 884604              <3>  mov byte [bp+4], %3
  4935 00001156 E85DF6              <3>  call proc_shl32
  4936 00001159 54                  <3>  push sp
  4937 0000115A 5D                  <3>  pop bp
  4938 0000115B 8B4E00              <3>  mov word %1, [bp+0]
  4939 0000115E 8B5602              <3>  mov word %2, [bp+2]
  4940                              <3>  stkclose 5
  4941 00001161 83C405              <4>  add word sp, %1
  4942 00001164 5B                  <2> 		pop bx			
  4943                              <2> 	.endshrl:											
  4944                              <2> 								
  4945 00001165 30DB                <2> 	xor bl,bl
  4946 00001167 D1EB                <2> 	shr bx,1	
  4947 00001169 83E17F              <2> 	and cx,0x007F	
  4948                              <2> 		
  4949 0000116C 89E0                <2> 	mov ax,sp
  4950 0000116E 89C5                <2> 	mov bp,ax
  4951 00001170 015E02              <2> 	add word [bp+2],bx
  4952 00001173 014E02              <2> 	add word [bp+2],cx	
  4953 00001176 895604              <2> 	mov word [bp+4],dx
  4954                              <2> 	
  4955 00001179 C3                  <2> 	ret
  4956                              <2> 
  4957                              <2> proc__iaddorsub32:
  4958 0000117A 89E0                <2> 	mov ax,sp
  4959 0000117C 89C5                <2> 	mov bp,ax
  4960                              <2> 	
  4961 0000117E 8B4602              <2> 	mov ax,[bp+2]
  4962 00001181 8B5E04              <2> 	mov bx,[bp+4]
  4963 00001184 8B4E06              <2> 	mov cx,[bp+6]
  4964 00001187 8B5608              <2> 	mov dx,[bp+8]	
  4965                              <2> 	
  4966 0000118A 50                  <2> 	push ax	
  4967 0000118B 250080              <2> 	and ax, 0x8000
  4968 0000118E 83F800              <2> 	cmp ax,0
  4969 00001191 741B                <2> 	jz .endv1neg
  4970 00001193 58                  <2> 		pop ax
  4971 00001194 51                  <2> 		push cx
  4972 00001195 52                  <2> 		push dx
  4973                              <2> 		
  4974 00001196 B9FFFF              <2> 		mov cx,0xFFFF
  4975 00001199 BAFFFF              <2> 		mov dx,0xFFFF
  4976 0000119C 25FF7F              <2> 		and ax,0x7FFF
  4977 0000119F 29DA                <2> 		sub dx,bx
  4978 000011A1 19C1                <2> 		sbb cx,ax
  4979 000011A3 42                  <2> 		inc dx
  4980 000011A4 83D100              <2> 		adc cx,0
  4981 000011A7 89C8                <2> 		mov ax,cx
  4982 000011A9 89D3                <2> 		mov bx,dx
  4983                              <2> 		
  4984 000011AB 5A                  <2> 		pop dx
  4985 000011AC 59                  <2> 		pop cx
  4986 000011AD 50                  <2> 		push ax	
  4987                              <2> 	.endv1neg:		
  4988 000011AE 58                  <2> 	pop ax	
  4989                              <2> 		
  4990 000011AF 51                  <2> 	push cx
  4991 000011B0 81E10080            <2> 	and cx,0x8000
  4992 000011B4 83F900              <2> 	cmp cx,0
  4993 000011B7 741C                <2> 	jz .endv2neg
  4994 000011B9 59                  <2> 		pop cx
  4995 000011BA 50                  <2> 		push ax
  4996 000011BB 53                  <2> 		push bx
  4997                              <2> 		
  4998 000011BC B8FFFF              <2> 		mov ax,0xFFFF
  4999 000011BF BBFFFF              <2> 		mov bx,0xFFFF
  5000 000011C2 81E1FF7F            <2> 		and cx,0x7FFF
  5001 000011C6 29D3                <2> 		sub bx,dx
  5002 000011C8 19C8                <2> 		sbb ax,cx
  5003 000011CA 43                  <2> 		inc bx
  5004 000011CB 83D000              <2> 		adc ax,0
  5005 000011CE 89C1                <2> 		mov cx,ax
  5006 000011D0 89DA                <2> 		mov dx,bx
  5007                              <2> 		
  5008 000011D2 5B                  <2> 		pop bx
  5009 000011D3 58                  <2> 		pop ax
  5010 000011D4 51                  <2> 		push cx
  5011                              <2> 	.endv2neg:	
  5012 000011D5 59                  <2> 	pop cx
  5013                              <2> 					
  5014 000011D6 837E0E00            <2> 	cmp word [bp+0x0E],0
  5015 000011DA 7506                <2> 	jnz .sub
  5016 000011DC 01D3                <2> 		add bx, dx
  5017 000011DE 11C8                <2> 		adc ax, cx				
  5018 000011E0 EB04                <2> 		jmp .endop
  5019                              <2> 	.sub:
  5020 000011E2 29D3                <2> 		sub bx, dx
  5021 000011E4 19C8                <2> 		sbb ax, cx
  5022                              <2> 	.endop:
  5023                              <2> 	
  5024 000011E6 89C1                <2> 	mov cx,ax
  5025 000011E8 81E10080            <2> 	and cx,0x8000
  5026 000011EC 83F900              <2> 	cmp cx,0
  5027 000011EF 7415                <2> 	jz .endresneg
  5028 000011F1 B9FFFF              <2> 		mov cx,0xFFFF
  5029 000011F4 BAFFFF              <2> 		mov dx,0xFFFF
  5030 000011F7 29DA                <2> 		sub dx,bx
  5031 000011F9 19C1                <2> 		sbb cx,ax
  5032 000011FB 42                  <2> 		inc dx
  5033 000011FC 83D100              <2> 		adc cx,0
  5034 000011FF 89C8                <2> 		mov ax,cx
  5035 00001201 89D3                <2> 		mov bx,dx
  5036                              <2> 		
  5037 00001203 050080              <2> 		add ax,0x8000
  5038                              <2> 	.endresneg:
  5039                              <2> 	
  5040 00001206 89E1                <2> 	mov cx,sp
  5041 00001208 89CD                <2> 	mov bp,cx
  5042 0000120A 89460A              <2> 	mov [bp+0x0A], ax
  5043 0000120D 895E0C              <2> 	mov [bp+0x0C], bx
  5044                              <2> 	
  5045 00001210 C3                  <2> 	ret	
  5046                              <2> 	
  5047                              <2> proc__mul32_64:
  5048 00001211 89E0                <2> 	mov ax,sp
  5049 00001213 89C5                <2> 	mov bp,ax
  5050                              <2> 		
  5051 00001215 31D2                <2> 	xor dx,dx
  5052 00001217 8B4604              <2> 	mov ax,[bp+4]
  5053 0000121A F76608              <2> 	mul word [bp+8]
  5054                              <2> 	
  5055 0000121D C7460A0000          <2> 	mov word [bp+0x0A], 0
  5056 00001222 C7460C0000          <2> 	mov word [bp+0x0C], 0
  5057 00001227 89560E              <2> 	mov word [bp+0x0E], dx
  5058 0000122A 894610              <2> 	mov word [bp+0x10], ax
  5059                              <2> 		
  5060 0000122D 31D2                <2> 	xor dx,dx
  5061 0000122F 8B4604              <2> 	mov ax,[bp+4]
  5062 00001232 F76606              <2> 	mul word [bp+6]
  5063                              <2> 	
  5064 00001235 01460E              <2> 	add [bp+0x0E],ax
  5065 00001238 11560C              <2> 	adc [bp+0x0C],dx
  5066 0000123B 83560A00            <2> 	adc word [bp+0x0A],0
  5067                              <2> 	
  5068 0000123F 31D2                <2> 	xor dx,dx
  5069 00001241 8B4602              <2> 	mov ax,[bp+2]
  5070 00001244 F76608              <2> 	mul word [bp+8]
  5071                              <2> 	
  5072 00001247 01460E              <2> 	add [bp+0x0E],ax
  5073 0000124A 11560C              <2> 	adc [bp+0x0C],dx
  5074                              <2> 	
  5075 0000124D 31D2                <2> 	xor dx,dx
  5076 0000124F 8B4602              <2> 	mov ax,[bp+2]
  5077 00001252 F76606              <2> 	mul word [bp+6]
  5078                              <2> 	
  5079 00001255 01460C              <2> 	add [bp+0x0C],ax
  5080 00001258 11560A              <2> 	adc [bp+0x0A],dx
  5081                              <2> 	
  5082 0000125B C3                  <2> 	ret
  5083                              <2> 	
  5084                              <2> proc__fldiv32:
  5085 0000125C 89E0                <2> 	mov ax,sp
  5086 0000125E 89C5                <2> 	mov bp,ax
  5087                              <2> 	
  5088 00001260 8B4602              <2> 	mov ax,[bp+2]
  5089 00001263 8B5E04              <2> 	mov bx,[bp+4]
  5090 00001266 C7460A0000          <2> 	mov word [bp+0x0A],0
  5091 0000126B C7460C0000          <2> 	mov word [bp+0x0C],0
  5092                              <2> 	
  5093 00001270 B118                <2> 	mov cl,24
  5094                              <2> 	.l1:
  5095 00001272 80F900              <2> 		cmp cl,0
  5096 00001275 0F84AC00            <2> 		jz .l2
  5097 00001279 51                  <2> 		push cx
  5098                              <2> 		
  5099 0000127A 8B4E0A              <2> 		mov cx,[bp+0x0A]
  5100 0000127D 8B560C              <2> 		mov dx,[bp+0x0C]
  5101 00001280 55                  <2> 		push bp
  5102 00001281 50                  <2> 		push ax
  5103 00001282 53                  <2> 		push bx
  5104                              <2> 		__shl32 cx, dx, 1
  5105                              <3>  stkopen 5
  5106 00001283 83EC05              <4>  sub word sp, %1
  5107 00001286 54                  <4>  push sp
  5108 00001287 5D                  <4>  pop bp
  5109 00001288 894E00              <3>  mov word [bp+0], %1
  5110 0000128B 895602              <3>  mov word [bp+2], %2
  5111 0000128E C6460401            <3>  mov byte [bp+4], %3
  5112 00001292 E821F5              <3>  call proc_shl32
  5113 00001295 54                  <3>  push sp
  5114 00001296 5D                  <3>  pop bp
  5115 00001297 8B4E00              <3>  mov word %1, [bp+0]
  5116 0000129A 8B5602              <3>  mov word %2, [bp+2]
  5117                              <3>  stkclose 5
  5118 0000129D 83C405              <4>  add word sp, %1
  5119 000012A0 5B                  <2> 		pop bx
  5120 000012A1 58                  <2> 		pop ax
  5121 000012A2 5D                  <2> 		pop bp
  5122 000012A3 894E0A              <2> 		mov [bp+0x0A],cx
  5123 000012A6 89560C              <2> 		mov [bp+0x0C],dx
  5124                              <2> 				
  5125 000012A9 8B4E06              <2> 		mov cx,[bp+6]
  5126 000012AC 8B5608              <2> 		mov dx,[bp+8]
  5127 000012AF 50                  <2> 		push ax
  5128 000012B0 53                  <2> 		push bx
  5129 000012B1 55                  <2> 		push bp
  5130                              <2> 		__cmp32 ax, bx, cx, dx, dl
  5131                              <3>  stkopen 9
  5132 000012B2 83EC09              <4>  sub word sp, %1
  5133 000012B5 54                  <4>  push sp
  5134 000012B6 5D                  <4>  pop bp
  5135 000012B7 894600              <3>  mov word [bp+0], %1
  5136 000012BA 895E02              <3>  mov word [bp+2], %2
  5137 000012BD 894E04              <3>  mov word [bp+4], %3
  5138 000012C0 895606              <3>  mov word [bp+6], %4
  5139 000012C3 E8C5F4              <3>  call proc_cmp32
  5140 000012C6 54                  <3>  push sp
  5141 000012C7 5D                  <3>  pop bp
  5142 000012C8 8A5608              <3>  mov byte %5, [bp+8]
  5143                              <3>  stkclose 9
  5144 000012CB 83C409              <4>  add word sp, %1
  5145 000012CE 5D                  <2> 		pop bp
  5146 000012CF 5B                  <2> 		pop bx
  5147 000012D0 58                  <2> 		pop ax				
  5148                              <2> 		
  5149 000012D1 80FA00              <2> 		cmp dl,0
  5150 000012D4 7C2A                <2> 		jl .endsub
  5151 000012D6 8B4E06              <2> 			mov cx,[bp+6]
  5152 000012D9 8B5608              <2> 			mov dx,[bp+8]
  5153 000012DC 55                  <2> 			push bp									
  5154                              <2> 			__sub32 ax, bx, cx, dx, ax, bx						
  5155                              <3>  stkopen 0x0C
  5156 000012DD 83EC0C              <4>  sub word sp, %1
  5157 000012E0 54                  <4>  push sp
  5158 000012E1 5D                  <4>  pop bp
  5159 000012E2 894600              <3>  mov word [bp+0], %1
  5160 000012E5 895E02              <3>  mov word [bp+2], %2
  5161 000012E8 894E04              <3>  mov word [bp+4], %3
  5162 000012EB 895606              <3>  mov word [bp+6], %4
  5163 000012EE E87FF4              <3>  call proc_sub32
  5164 000012F1 54                  <3>  push sp
  5165 000012F2 5D                  <3>  pop bp
  5166 000012F3 8B4608              <3>  mov word %5, [bp+8]
  5167 000012F6 8B5E0A              <3>  mov word %6, [bp+0x0A]
  5168                              <3>  stkclose 0x0C
  5169 000012F9 83C40C              <4>  add word sp, %1
  5170 000012FC 5D                  <2> 			pop bp			
  5171 000012FD FF460C              <2> 			inc word [bp+0x0C]			
  5172                              <2> 		.endsub:
  5173                              <2> 				
  5174 00001300 55                  <2> 		push bp
  5175                              <2> 		__shl32 ax, bx, 1
  5176                              <3>  stkopen 5
  5177 00001301 83EC05              <4>  sub word sp, %1
  5178 00001304 54                  <4>  push sp
  5179 00001305 5D                  <4>  pop bp
  5180 00001306 894600              <3>  mov word [bp+0], %1
  5181 00001309 895E02              <3>  mov word [bp+2], %2
  5182 0000130C C6460401            <3>  mov byte [bp+4], %3
  5183 00001310 E8A3F4              <3>  call proc_shl32
  5184 00001313 54                  <3>  push sp
  5185 00001314 5D                  <3>  pop bp
  5186 00001315 8B4600              <3>  mov word %1, [bp+0]
  5187 00001318 8B5E02              <3>  mov word %2, [bp+2]
  5188                              <3>  stkclose 5
  5189 0000131B 83C405              <4>  add word sp, %1
  5190 0000131E 5D                  <2> 		pop bp
  5191                              <2> 		
  5192 0000131F 59                  <2> 		pop cx
  5193 00001320 FEC9                <2> 		dec cl
  5194 00001322 E94DFF              <2> 		jmp .l1
  5195                              <2> 	.l2:
  5196                              <2> 	
  5197 00001325 C3                  <2> 	ret
  5198                              <2> 
  5199                              <2> proc_flsetsig:
  5200 00001326 89E0                <2> 	mov ax,sp
  5201 00001328 89C5                <2> 	mov bp,ax
  5202                              <2> 
  5203 0000132A 8B4602              <2> 	mov ax,[bp+2]
  5204 0000132D 25FF7F              <2> 	and ax,0x7FFF
  5205 00001330 034604              <2> 	add ax,[bp+4]
  5206 00001333 894602              <2> 	mov [bp+2],ax
  5207                              <2> 				
  5208 00001336 C3                  <2> 	ret
  5209                              <2> 
  5210                              <2> proc__validate:
  5211 00001337 89E0                <2> 	mov ax,sp
  5212 00001339 89C5                <2> 	mov bp,ax
  5213                              <2> 	
  5214 0000133B 8B4602              <2> 	mov ax,[bp+2]
  5215 0000133E 25FF7F              <2> 	and ax,0x7FFF
  5216 00001341 3DFF7F              <2> 	cmp ax,0x7FFF
  5217 00001344 750A                <2> 	jne .isnumber1
  5218                              <2> 
  5219 00001346 8B4604              <2> 	mov ax,[bp+4]
  5220 00001349 83F8FF              <2> 	cmp ax,0xFFFF
  5221 0000134C 7502                <2> 	jnz .isnumber1
  5222                              <2> 	
  5223 0000134E EB37                <2> 	jmp .NaN
  5224                              <2> 	
  5225                              <2> 	.isnumber1:
  5226                              <2> 	
  5227 00001350 8B4606              <2> 	mov ax,[bp+6]
  5228 00001353 25FF7F              <2> 	and ax,0x7FFF
  5229 00001356 3DFF7F              <2> 	cmp ax,0x7FFF
  5230 00001359 750A                <2> 	jne .isnumber2
  5231                              <2> 
  5232 0000135B 8B4608              <2> 	mov ax,[bp+8]
  5233 0000135E 83F8FF              <2> 	cmp ax,0xFFFF
  5234 00001361 7502                <2> 	jnz .isnumber2
  5235                              <2> 	
  5236 00001363 EB22                <2> 	jmp .NaN
  5237                              <2> 	
  5238                              <2> 	.isnumber2:
  5239                              <2> 	
  5240 00001365 8B4602              <2> 	mov ax,[bp+2]
  5241 00001368 D1E0                <2> 	shl ax,1
  5242 0000136A 80FCFF              <2> 	cmp ah,0xFF
  5243 0000136D 740C                <2> 	je .infinity
  5244                              <2> 
  5245 0000136F 8B5E06              <2> 	mov bx,[bp+6]
  5246 00001372 D1E3                <2> 	shl bx,1
  5247 00001374 80FFFF              <2> 	cmp bh,0xFF
  5248 00001377 7402                <2> 	je .infinity			
  5249                              <2> 	
  5250 00001379 EB18                <2> 	jmp .ok	
  5251                              <2> 	
  5252                              <2> 	.infinity:		
  5253 0000137B C7460A807F          <2> 		mov word [bp+0x0A],0x7F80
  5254 00001380 C7460C0000          <2> 		mov word [bp+0x0C],0
  5255 00001385 EB12                <2> 		jmp .done
  5256                              <2> 	.NaN:
  5257 00001387 C7460AFF7F          <2> 		mov word [bp+0x0A],0x7FFF
  5258 0000138C C7460CFFFF          <2> 		mov word [bp+0x0C],0xFFFF
  5259 00001391 EB06                <2> 		jmp .done
  5260                              <2> 			
  5261                              <2> 	.ok:
  5262 00001393 C6460E01            <2> 		mov byte [bp+0x0E],1
  5263 00001397 EB04                <2> 		jmp .end
  5264                              <2> 	.done:
  5265 00001399 C6460E00            <2> 		mov byte [bp+0x0E],0		
  5266                              <2> 	.end:
  5267                              <2> 	
  5268 0000139D C3                  <2> 	ret
  5269                              <2> 
  5270                              <2> proc__div_validate:
  5271 0000139E 89E0                <2> 	mov ax,sp
  5272 000013A0 89C5                <2> 	mov bp,ax
  5273                              <2> 	
  5274 000013A2 8B4602              <2> 	mov ax,[bp+2]
  5275 000013A5 8B5E06              <2> 	mov bx,[bp+6]
  5276 000013A8 D1E0                <2> 	shl ax,1
  5277 000013AA D1E3                <2> 	shl bx,1
  5278 000013AC 08FC                <2> 	or ah,bh
  5279 000013AE 80FC00              <2> 	cmp ah,0
  5280 000013B1 7422                <2> 	jz .NaN
  5281                              <2> 	
  5282 000013B3 8B4602              <2> 	mov ax,[bp+2]
  5283 000013B6 D1E0                <2> 	shl ax,1
  5284 000013B8 80FC00              <2> 	cmp ah,0
  5285 000013BB 7424                <2> 	jz .zero
  5286 000013BD 8B5E06              <2> 	mov bx,[bp+6]
  5287 000013C0 D1E3                <2> 	shl bx,1
  5288 000013C2 80FF00              <2> 	cmp bh,0	
  5289 000013C5 7402                <2> 	jz .infinity		
  5290                              <2> 		
  5291 000013C7 EB24                <2> 	jmp .ok
  5292                              <2> 	
  5293                              <2> 	.infinity:		
  5294 000013C9 C7460A807F          <2> 		mov word [bp+0x0A],0x7F80
  5295 000013CE C7460C0000          <2> 		mov word [bp+0x0C],0
  5296 000013D3 EB1E                <2> 		jmp .done
  5297                              <2> 	.NaN:
  5298 000013D5 C7460AFF7F          <2> 		mov word [bp+0x0A],0x7FFF
  5299 000013DA C7460CFFFF          <2> 		mov word [bp+0x0C],0xFFFF
  5300 000013DF EB12                <2> 		jmp .done
  5301                              <2> 	.zero:
  5302 000013E1 C7460A0000          <2> 		mov word [bp+0x0A],0
  5303 000013E6 C7460C0000          <2> 		mov word [bp+0x0C],0
  5304 000013EB EB06                <2> 		jmp .done	
  5305                              <2> 			
  5306                              <2> 	.ok:
  5307 000013ED C6460E01            <2> 		mov byte [bp+0x0E],1
  5308 000013F1 EB04                <2> 		jmp .end
  5309                              <2> 	.done:	
  5310 000013F3 C6460E00            <2> 		mov byte [bp+0x0E],0
  5311                              <2> 	.end:	
  5312                              <2> 		
  5313 000013F7 C3                  <2> 	ret
  5314                              <2> 	
  5315                              <2> proc__mul_validate:
  5316 000013F8 89E0                <2> 	mov ax,sp
  5317 000013FA 89C5                <2> 	mov bp,ax
  5318                              <2> 	
  5319 000013FC 8B4602              <2> 	mov ax,[bp+2]
  5320 000013FF D1E0                <2> 	shl ax,1	
  5321 00001401 80FC00              <2> 	cmp ah,0	
  5322 00001404 740C                <2> 	jz .zero		
  5323                              <2> 
  5324 00001406 8B5E04              <2> 	mov bx,[bp+4]
  5325 00001409 D1E3                <2> 	shl bx,1
  5326 0000140B 80FF00              <2> 	cmp bh,0
  5327 0000140E 7402                <2> 	jz .zero
  5328                              <2> 			
  5329 00001410 EB0C                <2> 	jmp .ok
  5330                              <2> 	
  5331                              <2> 	.zero:		
  5332 00001412 C746060000          <2> 		mov word [bp+6],0
  5333 00001417 C746080000          <2> 		mov word [bp+8],0
  5334 0000141C EB06                <2> 		jmp .done
  5335                              <2> 			
  5336                              <2> 	.ok:
  5337 0000141E C6460A01            <2> 		mov byte [bp+0x0A],1
  5338 00001422 EB04                <2> 		jmp .end
  5339                              <2> 	.done:	
  5340 00001424 C6460A00            <2> 		mov byte [bp+0x0A],0
  5341                              <2> 	.end:	
  5342                              <2> 		
  5343 00001428 C3                  <2> 	ret
  5344                              <2> 	
  5345                              <2> proc__addorsub_validate:
  5346 00001429 89E0                <2> 	mov ax,sp
  5347 0000142B 89C5                <2> 	mov bp,ax
  5348                              <2> 	
  5349 0000142D 8B4602              <2> 	mov ax,[bp+2]
  5350 00001430 8B5E06              <2> 	mov bx,[bp+6]	
  5351 00001433 D1E0                <2> 	shl ax,1
  5352 00001435 D1E3                <2> 	shl bx,1
  5353 00001437 08FC                <2> 	or ah,bh
  5354 00001439 80FC00              <2> 	cmp ah,0
  5355 0000143C 7416                <2> 	jz .zero
  5356                              <2> 	
  5357 0000143E 8B4602              <2> 	mov ax,[bp+2]
  5358 00001441 D1E0                <2> 	shl ax,1
  5359 00001443 80FC00              <2> 	cmp ah,0		
  5360 00001446 7426                <2> 	jz .value2
  5361                              <2> 	
  5362 00001448 8B4606              <2> 	mov ax,[bp+6]
  5363 0000144B D1E0                <2> 	shl ax,1
  5364 0000144D 80FC00              <2> 	cmp ah,0
  5365 00001450 740E                <2> 	jz .value1	
  5366                              <2> 		
  5367 00001452 EB28                <2> 	jmp .ok
  5368                              <2> 	
  5369                              <2> 	.zero:		
  5370 00001454 C7460A0000          <2> 		mov word [bp+0x0A],0
  5371 00001459 C7460C0000          <2> 		mov word [bp+0x0C],0
  5372 0000145E EB22                <2> 		jmp .done
  5373                              <2> 	.value1:
  5374 00001460 8B4602              <2> 		mov ax,[bp+2]
  5375 00001463 8B5E04              <2> 		mov bx,[bp+4]
  5376 00001466 89460A              <2> 		mov word [bp+0x0A],ax
  5377 00001469 895E0C              <2> 		mov word [bp+0x0C],bx		
  5378 0000146C EB14                <2> 		jmp .done
  5379                              <2> 	.value2:		
  5380 0000146E 8B4606              <2> 		mov ax,[bp+6]
  5381 00001471 8B5E08              <2> 		mov bx,[bp+8]
  5382 00001474 89460A              <2> 		mov word [bp+0x0A],ax
  5383 00001477 895E0C              <2> 		mov word [bp+0x0C],bx
  5384 0000147A EB06                <2> 		jmp .done
  5385                              <2> 			
  5386                              <2> 	.ok:
  5387 0000147C C6460E01            <2> 		mov byte [bp+0x0E],1
  5388 00001480 EB04                <2> 		jmp .end
  5389                              <2> 	.done:	
  5390 00001482 C6460E00            <2> 		mov byte [bp+0x0E],0
  5391                              <2> 	.end:	
  5392                              <2> 		
  5393 00001486 C3                  <2> 	ret
  5394                              <2> 	
  5395                              <2> %endif
  5396                              <1> 
  5397                              <1> %macro flsetsig 1
  5398                              <1> 	flsetsig cs, %1
  5399                              <1> %endmacro
  5400                              <1> 
  5401                              <1> %macro flclrsig 1
  5402                              <1> 	flclrsig cs, %1
  5403                              <1> %endmacro
  5404                              <1> 
  5405                              <1> %macro int16tofl 2
  5406                              <1> 	int16tofl cs, %1, cs, %2
  5407                              <1> %endmacro
  5408                              <1> 
  5409                              <1> %macro fltoint16 2
  5410                              <1> 	fltoint16 cs, %1, cs, %2
  5411                              <1> %endmacro
  5412                              <1> 
  5413                              <1> %macro fltoint32 1
  5414                              <1> 	fltoint32 %1, %1
  5415                              <1> %endmacro
  5416                              <1> 
  5417                              <1> %macro fltoint32 2
  5418                              <1> 	fltoint32 cs, %1, cs, %2
  5419                              <1> %endmacro
  5420                              <1> 
  5421                              <1> %macro int32tofl 1
  5422                              <1> 	int32tofl %1, %1
  5423                              <1> %endmacro
  5424                              <1> 
  5425                              <1> %macro int32tofl 2
  5426                              <1> 	int32tofl cs, %1, cs, %2
  5427                              <1> %endmacro
  5428                              <1> 
  5429                              <1> %macro flcmp 3
  5430                              <1> 	flcmp cs, %1, cs, %2, cs, %3
  5431                              <1> %endmacro
  5432                              <1> 
  5433                              <1> %macro fladd 3
  5434                              <1> 	fladd cs, %1, cs, %2, cs, %3
  5435                              <1> %endmacro
  5436                              <1> 
  5437                              <1> %macro flsub 3
  5438                              <1> 	flsub cs, %1, cs, %2, cs, %3
  5439                              <1> %endmacro	
  5440                              <1> 
  5441                              <1> %macro flmul 3
  5442                              <1> 	flmul cs, %1, cs, %2, cs, %3
  5443                              <1> %endmacro
  5444                              <1> 
  5445                              <1> %macro fldiv 3
  5446                              <1> 	fldiv cs, %1, cs, %2, cs, %3
  5447                              <1> %endmacro	
  5448                              <1> 
  5449                              <1> %macro fladd 6
  5450                              <1> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  5451                              <1> %endmacro
  5452                              <1> 
  5453                              <1> %macro flsub 6
  5454                              <1> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  5455                              <1> %endmacro
  5456                              <1> 
  5457                              <1> %macro fltoint16 4
  5458                              <1> 	stkopen 0x06
  5459                              <1> 	mov ax,%1
  5460                              <1> 	mov ds,ax
  5461                              <1> 	mov ax,[%2+2]
  5462                              <1> 	mov [bp+0],ax
  5463                              <1> 	mov ax,[%2]
  5464                              <1> 	mov [bp+2],ax	
  5465                              <1> 	call proc_fltoint16
  5466                              <1> 	mov ax,sp
  5467                              <1> 	mov bp,ax
  5468                              <1> 	mov ax,%3
  5469                              <1> 	mov ds,ax
  5470                              <1> 	mov ax,[bp+4]
  5471                              <1> 	mov [%4],ax
  5472                              <1> 	stkclose 0x06
  5473                              <1> %endmacro
  5474                              <1> 
  5475                              <1> %macro int16tofl 4	
  5476                              <1> 	stkopen 0x06
  5477                              <1> 	mov ax,%1
  5478                              <1> 	mov ds,ax
  5479                              <1> 	mov ax,[%2]
  5480                              <1> 	mov [bp+0],ax	
  5481                              <1> 	call proc_int16tofl
  5482                              <1> 	mov ax,sp
  5483                              <1> 	mov bp,ax
  5484                              <1> 	mov ax,%3
  5485                              <1> 	mov ds,ax
  5486                              <1> 	mov ax,[bp+2]
  5487                              <1> 	mov [%4+2],ax
  5488                              <1> 	mov ax,[bp+4]
  5489                              <1> 	mov [%4],ax
  5490                              <1> 	stkclose 0x06
  5491                              <1> %endmacro
  5492                              <1> 
  5493                              <1> %macro fltoint32 4
  5494                              <1> 	stkopen 0x08
  5495                              <1> 	mov ax,%1
  5496                              <1> 	mov ds,ax
  5497                              <1> 	mov ax,[%2+2]
  5498                              <1> 	mov [bp+0],ax
  5499                              <1> 	mov ax,[%2]
  5500                              <1> 	mov [bp+2],ax	
  5501                              <1> 	call proc_fltoint32
  5502                              <1> 	mov ax,sp
  5503                              <1> 	mov bp,ax
  5504                              <1> 	mov ax,%3
  5505                              <1> 	mov ds,ax
  5506                              <1> 	mov ax,[bp+4]
  5507                              <1> 	mov [%4+2],ax
  5508                              <1> 	mov ax,[bp+6]
  5509                              <1> 	mov [%4],ax
  5510                              <1> 	stkclose 0x08
  5511                              <1> %endmacro
  5512                              <1> 
  5513                              <1> %macro int32tofl 4
  5514                              <1> 	stkopen 0x08
  5515                              <1> 	mov ax,%1
  5516                              <1> 	mov ds,ax
  5517                              <1> 	mov ax,[%2+2]
  5518                              <1> 	mov [bp+0],ax
  5519                              <1> 	mov ax,[%2]
  5520                              <1> 	mov [bp+2],ax	
  5521                              <1> 	call proc_int32tofl
  5522                              <1> 	mov ax,sp
  5523                              <1> 	mov bp,ax
  5524                              <1> 	mov ax,%3
  5525                              <1> 	mov ds,ax
  5526                              <1> 	mov ax,[bp+4]
  5527                              <1> 	mov [%4+2],ax
  5528                              <1> 	mov ax,[bp+6]
  5529                              <1> 	mov [%4],ax
  5530                              <1> 	stkclose 0x08
  5531                              <1> %endmacro
  5532                              <1> 
  5533                              <1> %macro flsetsig 2
  5534                              <1> 	stkopen 0x04
  5535                              <1> 	mov ax,%1
  5536                              <1> 	mov ds,ax
  5537                              <1> 	mov ax,[%2+2]
  5538                              <1> 	mov word [bp+0], ax
  5539                              <1> 	mov word [bp+2], 0x8000
  5540                              <1> 	call proc_flsetsig
  5541                              <1> 	push sp
  5542                              <1> 	pop bp
  5543                              <1> 	mov ax,[bp+0]
  5544                              <1> 	mov word [%2+2],ax
  5545                              <1> 	stkclose 0x04	
  5546                              <1> %endmacro
  5547                              <1> 
  5548                              <1> %macro flclrsig 2
  5549                              <1> 	stkopen 0x04
  5550                              <1> 	mov ax,%1
  5551                              <1> 	mov ds,ax
  5552                              <1> 	mov ax,[%2+2]
  5553                              <1> 	mov word [bp+0], ax
  5554                              <1> 	mov word [bp+2], 0x0000
  5555                              <1> 	call proc_flsetsig
  5556                              <1> 	push sp
  5557                              <1> 	pop bp
  5558                              <1> 	mov ax,[bp+0]
  5559                              <1> 	mov word [%2+2],ax
  5560                              <1> 	stkclose 0x04	
  5561                              <1> %endmacro
  5562                              <1> 
  5563                              <1> %macro flcmp 6	
  5564                              <1> 	stkopen 0x09
  5565                              <1> 	mov ax,%1
  5566                              <1> 	mov ds,ax
  5567                              <1> 	mov ax,[%2+2]
  5568                              <1> 	mov [bp+0],ax
  5569                              <1> 	mov ax,[%2]
  5570                              <1> 	mov [bp+2],ax
  5571                              <1> 	mov ax,%3
  5572                              <1> 	mov ds,ax
  5573                              <1> 	mov ax,[%4+2]
  5574                              <1> 	mov [bp+4],ax
  5575                              <1> 	mov ax,[%4]
  5576                              <1> 	mov [bp+6],ax
  5577                              <1> 	call proc_fldiv
  5578                              <1> 	mov ax,sp
  5579                              <1> 	mov bp,ax
  5580                              <1> 	mov ax,%5
  5581                              <1> 	mov ds,ax
  5582                              <1> 	mov al,[bp+8]
  5583                              <1> 	mov [%6],al
  5584                              <1> 	stkclose 0x09
  5585                              <1> %endmacro
  5586                              <1> 
  5587                              <1> %macro fldiv 6	
  5588                              <1> 	stkopen 0x0C
  5589                              <1> 	mov ax,%1
  5590                              <1> 	mov ds,ax
  5591                              <1> 	mov ax,[%2+2]
  5592                              <1> 	mov [bp+0],ax
  5593                              <1> 	mov ax,[%2]
  5594                              <1> 	mov [bp+2],ax
  5595                              <1> 	mov ax,%3
  5596                              <1> 	mov ds,ax
  5597                              <1> 	mov ax,[%4+2]
  5598                              <1> 	mov [bp+4],ax
  5599                              <1> 	mov ax,[%4]
  5600                              <1> 	mov [bp+6],ax
  5601                              <1> 	call proc_fldiv
  5602                              <1> 	mov ax,sp
  5603                              <1> 	mov bp,ax
  5604                              <1> 	mov ax,%5
  5605                              <1> 	mov ds,ax
  5606                              <1> 	mov ax,[bp+8]
  5607                              <1> 	mov [%6+2],ax
  5608                              <1> 	mov ax,[bp+0x0A]
  5609                              <1> 	mov [%6],ax
  5610                              <1> 	stkclose 0x0C
  5611                              <1> %endmacro
  5612                              <1> 
  5613                              <1> %macro flmul 6	
  5614                              <1> 	stkopen 0x0C
  5615                              <1> 	mov ax,%1
  5616                              <1> 	mov ds,ax
  5617                              <1> 	mov ax,[%2+2]
  5618                              <1> 	mov [bp+0],ax
  5619                              <1> 	mov ax,[%2]
  5620                              <1> 	mov [bp+2],ax
  5621                              <1> 	mov ax,%3
  5622                              <1> 	mov ds,ax
  5623                              <1> 	mov ax,[%4+2]
  5624                              <1> 	mov [bp+4],ax
  5625                              <1> 	mov ax,[%4]
  5626                              <1> 	mov [bp+6],ax
  5627                              <1> 	call proc_flmul
  5628                              <1> 	mov ax,sp
  5629                              <1> 	mov bp,ax
  5630                              <1> 	mov ax,%5
  5631                              <1> 	mov ds,ax
  5632                              <1> 	mov ax,[bp+8]
  5633                              <1> 	mov [%6+2],ax
  5634                              <1> 	mov ax,[bp+0x0A]
  5635                              <1> 	mov [%6],ax
  5636                              <1> 	stkclose 0x0C
  5637                              <1> %endmacro
  5638                              <1> 	
  5639                              <1> %macro fladdorsub 7
  5640                              <1> 	stkopen 0x0E
  5641                              <1> 	mov ax,%1
  5642                              <1> 	mov ds,ax
  5643                              <1> 	mov ax,[%2+2]
  5644                              <1> 	mov [bp+0],ax
  5645                              <1> 	mov ax,[%2]
  5646                              <1> 	mov [bp+2],ax
  5647                              <1> 	mov ax,%3
  5648                              <1> 	mov ds,ax
  5649                              <1> 	mov ax,[%4+2]
  5650                              <1> 	mov [bp+4],ax
  5651                              <1> 	mov ax,[%4]
  5652                              <1> 	mov [bp+6],ax
  5653                              <1> 	mov word [bp+0x0C], %7
  5654                              <1> 	call proc_fladdorsub
  5655                              <1> 	mov ax,sp
  5656                              <1> 	mov bp,ax
  5657                              <1> 	mov ax,%5
  5658                              <1> 	mov ds,ax
  5659                              <1> 	mov ax,[bp+8]
  5660                              <1> 	mov [%6+2],ax
  5661                              <1> 	mov ax,[bp+0x0A]
  5662                              <1> 	mov [%6],ax
  5663                              <1> 	stkclose 0x0E
  5664                              <1> %endmacro
  5665                              <1> 	
  5666                              <1> %endif
  5667                                  		
  5668                                  section .data
  5669 00001487 00009642                	n1: dd 75.0
  5670 0000148B 0000B442                	n2: dd 90.0
  5671 0000148F 00000000                	n3: dd 0
  5672 00001493 000070C1                	n4: dd -15.0
  5673 00001497 00000000                	n5: dd 0
  5674                                  section .text
  5675                                  	global _start
  5676                                  	
  5677                                  _start:		
  5678                                  	prtstk
  5679                              <1>  printf "stack ---> "
  5680                              <2>  %rep %0
  5681                              <2>  __printf %1
  5682                              <2>  %rotate 1
  5683                              <2>  %endrep
  5684                              <3>  __printf %1
  5685                              <4>  section .data
  5686 0000149B 737461636B202D2D2D- <4>  %%str: db %1,0
  5687 000014A4 3E2000              <4>
  5688                              <4>  section .text
  5689                              <4>  prtstr cs, %%str
  5690                              <5>  stkopen 4
  5691 00000000 83EC04              <6>  sub word sp, %1
  5692 00000003 54                  <6>  push sp
  5693 00000004 5D                  <6>  pop bp
  5694 00000005 8C4E00              <5>  mov word [bp], %1
  5695 00000008 C74602[9B14]        <5>  mov word [bp+2], %2
  5696 0000000D E8(2804)            <5>  call proc_prtstr
  5697                              <5>  stkclose 4
  5698 00000010 83C404              <6>  add word sp, %1
  5699                              <3>  %rotate 1
  5700 00000013 89E0                <1>  mov ax,sp
  5701                              <1>  prthex16 ax
  5702                              <2>  stkopen 3
  5703 00000015 83EC03              <3>  sub word sp, %1
  5704 00000018 54                  <3>  push sp
  5705 00000019 5D                  <3>  pop bp
  5706 0000001A 894600              <2>  mov word [bp], %1
  5707 0000001D C6460201            <2>  mov byte [bp+2], TRUE
  5708 00000021 E8(2C03)            <2>  call proc_prthex16
  5709                              <2>  stkclose 3
  5710 00000024 83C403              <3>  add word sp, %1
  5711                                  	prtln
  5712                              <1>  __prtln
  5713 00000027 E8(5C04)            <2>  call proc_prtln
  5714                                  	prtln
  5715                              <1>  __prtln
  5716 0000002A E8(5C04)            <2>  call proc_prtln
  5717                                  				
  5718                                  	flsub n1, n2, n3
  5719                              <1>  flsub cs, %1, cs, %2, cs, %3
  5720                              <2>  fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  5721                              <3>  stkopen 0x0E
  5722 0000002D 83EC0E              <4>  sub word sp, %1
  5723 00000030 54                  <4>  push sp
  5724 00000031 5D                  <4>  pop bp
  5725 00000032 8CC8                <3>  mov ax,%1
  5726 00000034 8ED8                <3>  mov ds,ax
  5727 00000036 A1[8914]            <3>  mov ax,[%2+2]
  5728 00000039 894600              <3>  mov [bp+0],ax
  5729 0000003C A1[8714]            <3>  mov ax,[%2]
  5730 0000003F 894602              <3>  mov [bp+2],ax
  5731 00000042 8CC8                <3>  mov ax,%3
  5732 00000044 8ED8                <3>  mov ds,ax
  5733 00000046 A1[8D14]            <3>  mov ax,[%4+2]
  5734 00000049 894604              <3>  mov [bp+4],ax
  5735 0000004C A1[8B14]            <3>  mov ax,[%4]
  5736 0000004F 894606              <3>  mov [bp+6],ax
  5737 00000052 C7460C0080          <3>  mov word [bp+0x0C], %7
  5738 00000057 E8(D00E)            <3>  call proc_fladdorsub
  5739 0000005A 89E0                <3>  mov ax,sp
  5740 0000005C 89C5                <3>  mov bp,ax
  5741 0000005E 8CC8                <3>  mov ax,%5
  5742 00000060 8ED8                <3>  mov ds,ax
  5743 00000062 8B4608              <3>  mov ax,[bp+8]
  5744 00000065 A3[9114]            <3>  mov [%6+2],ax
  5745 00000068 8B460A              <3>  mov ax,[bp+0x0A]
  5746 0000006B A3[8F14]            <3>  mov [%6],ax
  5747                              <3>  stkclose 0x0E
  5748 0000006E 83C40E              <4>  add word sp, %1
  5749                                  	fltoint32 n1, n5
  5750                              <1>  fltoint32 cs, %1, cs, %2
  5751                              <2>  stkopen 0x08
  5752 00000071 83EC08              <3>  sub word sp, %1
  5753 00000074 54                  <3>  push sp
  5754 00000075 5D                  <3>  pop bp
  5755 00000076 8CC8                <2>  mov ax,%1
  5756 00000078 8ED8                <2>  mov ds,ax
  5757 0000007A A1[8914]            <2>  mov ax,[%2+2]
  5758 0000007D 894600              <2>  mov [bp+0],ax
  5759 00000080 A1[8714]            <2>  mov ax,[%2]
  5760 00000083 894602              <2>  mov [bp+2],ax
  5761 00000086 E8(730A)            <2>  call proc_fltoint32
  5762 00000089 89E0                <2>  mov ax,sp
  5763 0000008B 89C5                <2>  mov bp,ax
  5764 0000008D 8CC8                <2>  mov ax,%3
  5765 0000008F 8ED8                <2>  mov ds,ax
  5766 00000091 8B4604              <2>  mov ax,[bp+4]
  5767 00000094 A3[9914]            <2>  mov [%4+2],ax
  5768 00000097 8B4606              <2>  mov ax,[bp+6]
  5769 0000009A A3[9714]            <2>  mov [%4],ax
  5770                              <2>  stkclose 0x08
  5771 0000009D 83C408              <3>  add word sp, %1
  5772                                  		 
  5773                                  	prthex32 n1
  5774                              <1>  prthex32 cs, %1
  5775 000000A0 8CC8                <2>  mov ax,%1
  5776 000000A2 8ED8                <2>  mov ds,ax
  5777 000000A4 A1[8914]            <2>  mov word ax,[%2+2]
  5778                              <2>  prthex16 ax
  5779                              <3>  stkopen 3
  5780 000000A7 83EC03              <4>  sub word sp, %1
  5781 000000AA 54                  <4>  push sp
  5782 000000AB 5D                  <4>  pop bp
  5783 000000AC 894600              <3>  mov word [bp], %1
  5784 000000AF C6460201            <3>  mov byte [bp+2], TRUE
  5785 000000B3 E8(2C03)            <3>  call proc_prthex16
  5786                              <3>  stkclose 3
  5787 000000B6 83C403              <4>  add word sp, %1
  5788 000000B9 8CC8                <2>  mov ax,%1
  5789 000000BB 8ED8                <2>  mov ds,ax
  5790 000000BD A1[8714]            <2>  mov word ax,[%2]
  5791                              <2>  prthex16 ax
  5792                              <3>  stkopen 3
  5793 000000C0 83EC03              <4>  sub word sp, %1
  5794 000000C3 54                  <4>  push sp
  5795 000000C4 5D                  <4>  pop bp
  5796 000000C5 894600              <3>  mov word [bp], %1
  5797 000000C8 C6460201            <3>  mov byte [bp+2], TRUE
  5798 000000CC E8(2C03)            <3>  call proc_prthex16
  5799                              <3>  stkclose 3
  5800 000000CF 83C403              <4>  add word sp, %1
  5801                                  	printf " --> "
  5802                              <1>  %rep %0
  5803                              <1>  __printf %1
  5804                              <1>  %rotate 1
  5805                              <1>  %endrep
  5806                              <2>  __printf %1
  5807                              <3>  section .data
  5808 000014A7 202D2D3E2000        <3>  %%str: db %1,0
  5809                              <3>  section .text
  5810                              <3>  prtstr cs, %%str
  5811                              <4>  stkopen 4
  5812 000000D2 83EC04              <5>  sub word sp, %1
  5813 000000D5 54                  <5>  push sp
  5814 000000D6 5D                  <5>  pop bp
  5815 000000D7 8C4E00              <4>  mov word [bp], %1
  5816 000000DA C74602[A714]        <4>  mov word [bp+2], %2
  5817 000000DF E8(2804)            <4>  call proc_prtstr
  5818                              <4>  stkclose 4
  5819 000000E2 83C404              <5>  add word sp, %1
  5820                              <2>  %rotate 1
  5821                                  	prtIEEE754 n1
  5822                              <1>  prtIEEE754 cs, %1
  5823                              <2>  stkopen 4
  5824 000000E5 83EC04              <3>  sub word sp, %1
  5825 000000E8 54                  <3>  push sp
  5826 000000E9 5D                  <3>  pop bp
  5827 000000EA 8CC8                <2>  mov ax,%1
  5828 000000EC 8ED8                <2>  mov ds,ax
  5829 000000EE A1[8914]            <2>  mov ax, [%2+2]
  5830 000000F1 894600              <2>  mov word [bp+0], ax
  5831 000000F4 A1[8714]            <2>  mov ax, [%2]
  5832 000000F7 894602              <2>  mov word [bp+2], ax
  5833 000000FA E8(0000)            <2>  call proc_prtIEEE754
  5834                              <2>  stkclose 4
  5835 000000FD 83C404              <3>  add word sp, %1
  5836                                  	prtln
  5837                              <1>  __prtln
  5838 00000100 E8(5C04)            <2>  call proc_prtln
  5839                                  	prthex32 n2
  5840                              <1>  prthex32 cs, %1
  5841 00000103 8CC8                <2>  mov ax,%1
  5842 00000105 8ED8                <2>  mov ds,ax
  5843 00000107 A1[8D14]            <2>  mov word ax,[%2+2]
  5844                              <2>  prthex16 ax
  5845                              <3>  stkopen 3
  5846 0000010A 83EC03              <4>  sub word sp, %1
  5847 0000010D 54                  <4>  push sp
  5848 0000010E 5D                  <4>  pop bp
  5849 0000010F 894600              <3>  mov word [bp], %1
  5850 00000112 C6460201            <3>  mov byte [bp+2], TRUE
  5851 00000116 E8(2C03)            <3>  call proc_prthex16
  5852                              <3>  stkclose 3
  5853 00000119 83C403              <4>  add word sp, %1
  5854 0000011C 8CC8                <2>  mov ax,%1
  5855 0000011E 8ED8                <2>  mov ds,ax
  5856 00000120 A1[8B14]            <2>  mov word ax,[%2]
  5857                              <2>  prthex16 ax
  5858                              <3>  stkopen 3
  5859 00000123 83EC03              <4>  sub word sp, %1
  5860 00000126 54                  <4>  push sp
  5861 00000127 5D                  <4>  pop bp
  5862 00000128 894600              <3>  mov word [bp], %1
  5863 0000012B C6460201            <3>  mov byte [bp+2], TRUE
  5864 0000012F E8(2C03)            <3>  call proc_prthex16
  5865                              <3>  stkclose 3
  5866 00000132 83C403              <4>  add word sp, %1
  5867                                  	printf " --> "
  5868                              <1>  %rep %0
  5869                              <1>  __printf %1
  5870                              <1>  %rotate 1
  5871                              <1>  %endrep
  5872                              <2>  __printf %1
  5873                              <3>  section .data
  5874 000014AD 202D2D3E2000        <3>  %%str: db %1,0
  5875                              <3>  section .text
  5876                              <3>  prtstr cs, %%str
  5877                              <4>  stkopen 4
  5878 00000135 83EC04              <5>  sub word sp, %1
  5879 00000138 54                  <5>  push sp
  5880 00000139 5D                  <5>  pop bp
  5881 0000013A 8C4E00              <4>  mov word [bp], %1
  5882 0000013D C74602[AD14]        <4>  mov word [bp+2], %2
  5883 00000142 E8(2804)            <4>  call proc_prtstr
  5884                              <4>  stkclose 4
  5885 00000145 83C404              <5>  add word sp, %1
  5886                              <2>  %rotate 1
  5887                                  	prtIEEE754 n2
  5888                              <1>  prtIEEE754 cs, %1
  5889                              <2>  stkopen 4
  5890 00000148 83EC04              <3>  sub word sp, %1
  5891 0000014B 54                  <3>  push sp
  5892 0000014C 5D                  <3>  pop bp
  5893 0000014D 8CC8                <2>  mov ax,%1
  5894 0000014F 8ED8                <2>  mov ds,ax
  5895 00000151 A1[8D14]            <2>  mov ax, [%2+2]
  5896 00000154 894600              <2>  mov word [bp+0], ax
  5897 00000157 A1[8B14]            <2>  mov ax, [%2]
  5898 0000015A 894602              <2>  mov word [bp+2], ax
  5899 0000015D E8(0000)            <2>  call proc_prtIEEE754
  5900                              <2>  stkclose 4
  5901 00000160 83C404              <3>  add word sp, %1
  5902                                  	prtln
  5903                              <1>  __prtln
  5904 00000163 E8(5C04)            <2>  call proc_prtln
  5905                                  	prtln
  5906                              <1>  __prtln
  5907 00000166 E8(5C04)            <2>  call proc_prtln
  5908                                  	prthex32 n3
  5909                              <1>  prthex32 cs, %1
  5910 00000169 8CC8                <2>  mov ax,%1
  5911 0000016B 8ED8                <2>  mov ds,ax
  5912 0000016D A1[9114]            <2>  mov word ax,[%2+2]
  5913                              <2>  prthex16 ax
  5914                              <3>  stkopen 3
  5915 00000170 83EC03              <4>  sub word sp, %1
  5916 00000173 54                  <4>  push sp
  5917 00000174 5D                  <4>  pop bp
  5918 00000175 894600              <3>  mov word [bp], %1
  5919 00000178 C6460201            <3>  mov byte [bp+2], TRUE
  5920 0000017C E8(2C03)            <3>  call proc_prthex16
  5921                              <3>  stkclose 3
  5922 0000017F 83C403              <4>  add word sp, %1
  5923 00000182 8CC8                <2>  mov ax,%1
  5924 00000184 8ED8                <2>  mov ds,ax
  5925 00000186 A1[8F14]            <2>  mov word ax,[%2]
  5926                              <2>  prthex16 ax
  5927                              <3>  stkopen 3
  5928 00000189 83EC03              <4>  sub word sp, %1
  5929 0000018C 54                  <4>  push sp
  5930 0000018D 5D                  <4>  pop bp
  5931 0000018E 894600              <3>  mov word [bp], %1
  5932 00000191 C6460201            <3>  mov byte [bp+2], TRUE
  5933 00000195 E8(2C03)            <3>  call proc_prthex16
  5934                              <3>  stkclose 3
  5935 00000198 83C403              <4>  add word sp, %1
  5936                                  	printf " --> "
  5937                              <1>  %rep %0
  5938                              <1>  __printf %1
  5939                              <1>  %rotate 1
  5940                              <1>  %endrep
  5941                              <2>  __printf %1
  5942                              <3>  section .data
  5943 000014B3 202D2D3E2000        <3>  %%str: db %1,0
  5944                              <3>  section .text
  5945                              <3>  prtstr cs, %%str
  5946                              <4>  stkopen 4
  5947 0000019B 83EC04              <5>  sub word sp, %1
  5948 0000019E 54                  <5>  push sp
  5949 0000019F 5D                  <5>  pop bp
  5950 000001A0 8C4E00              <4>  mov word [bp], %1
  5951 000001A3 C74602[B314]        <4>  mov word [bp+2], %2
  5952 000001A8 E8(2804)            <4>  call proc_prtstr
  5953                              <4>  stkclose 4
  5954 000001AB 83C404              <5>  add word sp, %1
  5955                              <2>  %rotate 1
  5956                                  	prtIEEE754 n3
  5957                              <1>  prtIEEE754 cs, %1
  5958                              <2>  stkopen 4
  5959 000001AE 83EC04              <3>  sub word sp, %1
  5960 000001B1 54                  <3>  push sp
  5961 000001B2 5D                  <3>  pop bp
  5962 000001B3 8CC8                <2>  mov ax,%1
  5963 000001B5 8ED8                <2>  mov ds,ax
  5964 000001B7 A1[9114]            <2>  mov ax, [%2+2]
  5965 000001BA 894600              <2>  mov word [bp+0], ax
  5966 000001BD A1[8F14]            <2>  mov ax, [%2]
  5967 000001C0 894602              <2>  mov word [bp+2], ax
  5968 000001C3 E8(0000)            <2>  call proc_prtIEEE754
  5969                              <2>  stkclose 4
  5970 000001C6 83C404              <3>  add word sp, %1
  5971                                  	prtln
  5972                              <1>  __prtln
  5973 000001C9 E8(5C04)            <2>  call proc_prtln
  5974                                  	prthex32 n4
  5975                              <1>  prthex32 cs, %1
  5976 000001CC 8CC8                <2>  mov ax,%1
  5977 000001CE 8ED8                <2>  mov ds,ax
  5978 000001D0 A1[9514]            <2>  mov word ax,[%2+2]
  5979                              <2>  prthex16 ax
  5980                              <3>  stkopen 3
  5981 000001D3 83EC03              <4>  sub word sp, %1
  5982 000001D6 54                  <4>  push sp
  5983 000001D7 5D                  <4>  pop bp
  5984 000001D8 894600              <3>  mov word [bp], %1
  5985 000001DB C6460201            <3>  mov byte [bp+2], TRUE
  5986 000001DF E8(2C03)            <3>  call proc_prthex16
  5987                              <3>  stkclose 3
  5988 000001E2 83C403              <4>  add word sp, %1
  5989 000001E5 8CC8                <2>  mov ax,%1
  5990 000001E7 8ED8                <2>  mov ds,ax
  5991 000001E9 A1[9314]            <2>  mov word ax,[%2]
  5992                              <2>  prthex16 ax
  5993                              <3>  stkopen 3
  5994 000001EC 83EC03              <4>  sub word sp, %1
  5995 000001EF 54                  <4>  push sp
  5996 000001F0 5D                  <4>  pop bp
  5997 000001F1 894600              <3>  mov word [bp], %1
  5998 000001F4 C6460201            <3>  mov byte [bp+2], TRUE
  5999 000001F8 E8(2C03)            <3>  call proc_prthex16
  6000                              <3>  stkclose 3
  6001 000001FB 83C403              <4>  add word sp, %1
  6002                                  	printf " --> "
  6003                              <1>  %rep %0
  6004                              <1>  __printf %1
  6005                              <1>  %rotate 1
  6006                              <1>  %endrep
  6007                              <2>  __printf %1
  6008                              <3>  section .data
  6009 000014B9 202D2D3E2000        <3>  %%str: db %1,0
  6010                              <3>  section .text
  6011                              <3>  prtstr cs, %%str
  6012                              <4>  stkopen 4
  6013 000001FE 83EC04              <5>  sub word sp, %1
  6014 00000201 54                  <5>  push sp
  6015 00000202 5D                  <5>  pop bp
  6016 00000203 8C4E00              <4>  mov word [bp], %1
  6017 00000206 C74602[B914]        <4>  mov word [bp+2], %2
  6018 0000020B E8(2804)            <4>  call proc_prtstr
  6019                              <4>  stkclose 4
  6020 0000020E 83C404              <5>  add word sp, %1
  6021                              <2>  %rotate 1
  6022                                  	prtIEEE754 n4
  6023                              <1>  prtIEEE754 cs, %1
  6024                              <2>  stkopen 4
  6025 00000211 83EC04              <3>  sub word sp, %1
  6026 00000214 54                  <3>  push sp
  6027 00000215 5D                  <3>  pop bp
  6028 00000216 8CC8                <2>  mov ax,%1
  6029 00000218 8ED8                <2>  mov ds,ax
  6030 0000021A A1[9514]            <2>  mov ax, [%2+2]
  6031 0000021D 894600              <2>  mov word [bp+0], ax
  6032 00000220 A1[9314]            <2>  mov ax, [%2]
  6033 00000223 894602              <2>  mov word [bp+2], ax
  6034 00000226 E8(0000)            <2>  call proc_prtIEEE754
  6035                              <2>  stkclose 4
  6036 00000229 83C404              <3>  add word sp, %1
  6037                                  	prtln
  6038                              <1>  __prtln
  6039 0000022C E8(5C04)            <2>  call proc_prtln
  6040                                  	prthex32 n5
  6041                              <1>  prthex32 cs, %1
  6042 0000022F 8CC8                <2>  mov ax,%1
  6043 00000231 8ED8                <2>  mov ds,ax
  6044 00000233 A1[9914]            <2>  mov word ax,[%2+2]
  6045                              <2>  prthex16 ax
  6046                              <3>  stkopen 3
  6047 00000236 83EC03              <4>  sub word sp, %1
  6048 00000239 54                  <4>  push sp
  6049 0000023A 5D                  <4>  pop bp
  6050 0000023B 894600              <3>  mov word [bp], %1
  6051 0000023E C6460201            <3>  mov byte [bp+2], TRUE
  6052 00000242 E8(2C03)            <3>  call proc_prthex16
  6053                              <3>  stkclose 3
  6054 00000245 83C403              <4>  add word sp, %1
  6055 00000248 8CC8                <2>  mov ax,%1
  6056 0000024A 8ED8                <2>  mov ds,ax
  6057 0000024C A1[9714]            <2>  mov word ax,[%2]
  6058                              <2>  prthex16 ax
  6059                              <3>  stkopen 3
  6060 0000024F 83EC03              <4>  sub word sp, %1
  6061 00000252 54                  <4>  push sp
  6062 00000253 5D                  <4>  pop bp
  6063 00000254 894600              <3>  mov word [bp], %1
  6064 00000257 C6460201            <3>  mov byte [bp+2], TRUE
  6065 0000025B E8(2C03)            <3>  call proc_prthex16
  6066                              <3>  stkclose 3
  6067 0000025E 83C403              <4>  add word sp, %1
  6068                                  	prtln
  6069                              <1>  __prtln
  6070 00000261 E8(5C04)            <2>  call proc_prtln
  6071                                  	prtbin32 n5
  6072                              <1>  prtbin32 cs, %1
  6073 00000264 8CC8                <2>  mov ax,%1
  6074 00000266 8ED8                <2>  mov ds,ax
  6075 00000268 A1[9914]            <2>  mov word ax,[%2+2]
  6076                              <2>  prtbin16 ax
  6077                              <3>  stkopen 3
  6078 0000026B 83EC03              <4>  sub word sp, %1
  6079 0000026E 54                  <4>  push sp
  6080 0000026F 5D                  <4>  pop bp
  6081 00000270 894600              <3>  mov word [bp], %1
  6082 00000273 C6460201            <3>  mov byte [bp+2], TRUE
  6083 00000277 E8(C901)            <3>  call proc_prtbin16
  6084                              <3>  stkclose 3
  6085 0000027A 83C403              <4>  add word sp, %1
  6086                              <2>  prtch 20h
  6087                              <3>  __prtch %1
  6088                              <4>  stkopen 1
  6089 0000027D 83EC01              <5>  sub word sp, %1
  6090 00000280 54                  <5>  push sp
  6091 00000281 5D                  <5>  pop bp
  6092 00000282 C6460020            <4>  mov byte [ bp ], %1
  6093 00000286 E8(4E04)            <4>  call proc_prtch
  6094                              <4>  stkclose 1
  6095 00000289 83C401              <5>  add word sp, %1
  6096 0000028C 8CC8                <2>  mov ax,%1
  6097 0000028E 8ED8                <2>  mov ds,ax
  6098 00000290 A1[9714]            <2>  mov word ax,[%2]
  6099                              <2>  prtbin16 ax
  6100                              <3>  stkopen 3
  6101 00000293 83EC03              <4>  sub word sp, %1
  6102 00000296 54                  <4>  push sp
  6103 00000297 5D                  <4>  pop bp
  6104 00000298 894600              <3>  mov word [bp], %1
  6105 0000029B C6460201            <3>  mov byte [bp+2], TRUE
  6106 0000029F E8(C901)            <3>  call proc_prtbin16
  6107                              <3>  stkclose 3
  6108 000002A2 83C403              <4>  add word sp, %1
  6109                                  	prtln
  6110                              <1>  __prtln
  6111 000002A5 E8(5C04)            <2>  call proc_prtln
  6112                                  	
  6113                                  	int32tofl n5
  6114                              <1>  int32tofl %1, %1
  6115                              <2>  int32tofl cs, %1, cs, %2
  6116                              <3>  stkopen 0x08
  6117 000002A8 83EC08              <4>  sub word sp, %1
  6118 000002AB 54                  <4>  push sp
  6119 000002AC 5D                  <4>  pop bp
  6120 000002AD 8CC8                <3>  mov ax,%1
  6121 000002AF 8ED8                <3>  mov ds,ax
  6122 000002B1 A1[9914]            <3>  mov ax,[%2+2]
  6123 000002B4 894600              <3>  mov [bp+0],ax
  6124 000002B7 A1[9714]            <3>  mov ax,[%2]
  6125 000002BA 894602              <3>  mov [bp+2],ax
  6126 000002BD E8(E80A)            <3>  call proc_int32tofl
  6127 000002C0 89E0                <3>  mov ax,sp
  6128 000002C2 89C5                <3>  mov bp,ax
  6129 000002C4 8CC8                <3>  mov ax,%3
  6130 000002C6 8ED8                <3>  mov ds,ax
  6131 000002C8 8B4604              <3>  mov ax,[bp+4]
  6132 000002CB A3[9914]            <3>  mov [%4+2],ax
  6133 000002CE 8B4606              <3>  mov ax,[bp+6]
  6134 000002D1 A3[9714]            <3>  mov [%4],ax
  6135                              <3>  stkclose 0x08
  6136 000002D4 83C408              <4>  add word sp, %1
  6137                                  	
  6138                                  	prtIEEE754 n5
  6139                              <1>  prtIEEE754 cs, %1
  6140                              <2>  stkopen 4
  6141 000002D7 83EC04              <3>  sub word sp, %1
  6142 000002DA 54                  <3>  push sp
  6143 000002DB 5D                  <3>  pop bp
  6144 000002DC 8CC8                <2>  mov ax,%1
  6145 000002DE 8ED8                <2>  mov ds,ax
  6146 000002E0 A1[9914]            <2>  mov ax, [%2+2]
  6147 000002E3 894600              <2>  mov word [bp+0], ax
  6148 000002E6 A1[9714]            <2>  mov ax, [%2]
  6149 000002E9 894602              <2>  mov word [bp+2], ax
  6150 000002EC E8(0000)            <2>  call proc_prtIEEE754
  6151                              <2>  stkclose 4
  6152 000002EF 83C404              <3>  add word sp, %1
  6153                                  	prtln
  6154                              <1>  __prtln
  6155 000002F2 E8(5C04)            <2>  call proc_prtln
  6156                                  	 		
  6157                                  	prtln
  6158                              <1>  __prtln
  6159 000002F5 E8(5C04)            <2>  call proc_prtln
  6160                                  	prtln
  6161                              <1>  __prtln
  6162 000002F8 E8(5C04)            <2>  call proc_prtln
  6163                                  	prtstk			
  6164                              <1>  printf "stack ---> "
  6165                              <2>  %rep %0
  6166                              <2>  __printf %1
  6167                              <2>  %rotate 1
  6168                              <2>  %endrep
  6169                              <3>  __printf %1
  6170                              <4>  section .data
  6171 000014BF 737461636B202D2D2D- <4>  %%str: db %1,0
  6172 000014C8 3E2000              <4>
  6173                              <4>  section .text
  6174                              <4>  prtstr cs, %%str
  6175                              <5>  stkopen 4
  6176 000002FB 83EC04              <6>  sub word sp, %1
  6177 000002FE 54                  <6>  push sp
  6178 000002FF 5D                  <6>  pop bp
  6179 00000300 8C4E00              <5>  mov word [bp], %1
  6180 00000303 C74602[BF14]        <5>  mov word [bp+2], %2
  6181 00000308 E8(2804)            <5>  call proc_prtstr
  6182                              <5>  stkclose 4
  6183 0000030B 83C404              <6>  add word sp, %1
  6184                              <3>  %rotate 1
  6185 0000030E 89E0                <1>  mov ax,sp
  6186                              <1>  prthex16 ax
  6187                              <2>  stkopen 3
  6188 00000310 83EC03              <3>  sub word sp, %1
  6189 00000313 54                  <3>  push sp
  6190 00000314 5D                  <3>  pop bp
  6191 00000315 894600              <2>  mov word [bp], %1
  6192 00000318 C6460201            <2>  mov byte [bp+2], TRUE
  6193 0000031C E8(2C03)            <2>  call proc_prthex16
  6194                              <2>  stkclose 3
  6195 0000031F 83C403              <3>  add word sp, %1
  6196                                  	
  6197 00000322 EBFE                    	jmp $		

     1                                  %include "lib/system.mac"
     2                              <1>  
     3                              <1> %ifndef SYSTEM_MAC
     4                              <1>  	%define SYSTEM_MAC
     5                              <1>  	
     6                              <1> 	%ifndef TRUE
     7                              <1> 		%define TRUE 01h
     8                              <1> 	%endif
     9                              <1> 	%ifndef FALSE
    10                              <1> 		%define FALSE 00h
    11                              <1> 	%endif
    12                              <1> 	
    13                              <1> %macro vlodsb 3
    14                              <1> 	vlodsb cs, %1, %2, %3
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro vstosb 3
    18                              <1> 	vstosb cs, %1, %2, %3
    19                              <1> %endmacro
    20                              <1> 	 	
    21                              <1> %macro int16toreg 2
    22                              <1> 	int16toreg cs, %1, %2
    23                              <1> %endmacro
    24                              <1> 
    25                              <1> %macro regtoint16 2
    26                              <1> 	regtoint16 %1, cs, %2
    27                              <1> %endmacro
    28                              <1> 
    29                              <1> %macro vstosb 4
    30                              <1> 	push %1
    31                              <1> 	pop ds
    32                              <1> 	mov si,%2
    33                              <1> 	add si,%3
    34                              <1> 	mov byte [si],%4	
    35                              <1> %endmacro
    36                              <1> 
    37                              <1> %macro vlodsb 4
    38                              <1> 	push %1
    39                              <1> 	pop ds
    40                              <1> 	mov si,%2
    41                              <1> 	add si,%3
    42                              <1> 	mov byte %4,[si]	
    43                              <1> %endmacro 	 
    44                              <1> 
    45                              <1> %macro int16toreg 3
    46                              <1> 	push %2
    47                              <1> 	push %1
    48                              <1> 	pop ds
    49                              <1> 	pop si
    50                              <1> 	mov word %3,[si]	
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro regtoint16 3
    54                              <1> 	push %3
    55                              <1> 	push %2
    56                              <1> 	pop ds
    57                              <1> 	pop si
    58                              <1> 	mov word [si],%1	
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro mov32 2
    62                              <1> 	mov32 cs, %1, cs, %2
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro mov16 2
    66                              <1> 	mov16 cs, %1, cs, %2
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro mov32 4
    70                              <1> 	mov ax,%3
    71                              <1> 	mov ds,ax
    72                              <1> 	mov cx,[%4+2]
    73                              <1> 	mov dx,[%4]
    74                              <1> 	mov ax,%1
    75                              <1> 	mov ds,ax
    76                              <1> 	mov [%2+2],cx
    77                              <1> 	mov [%2],dx
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro mov16 4
    81                              <1> 	mov ax,%3
    82                              <1> 	mov ds,ax
    83                              <1> 	mov bx,[%4]
    84                              <1> 	mov ax,%1
    85                              <1> 	mov ds,ax
    86                              <1> 	mov [%2],bx
    87                              <1> %endmacro
    88                              <1>  	 	
    89                              <1> %macro mformat 4
    90                              <1> 	stkopen 8
    91                              <1> 	mov word [ bp + 0 ], %1
    92                              <1> 	mov word [ bp + 2 ], %2
    93                              <1> 	mov word [ bp + 4 ], %3
    94                              <1> 	mov word [ bp + 6 ], %4
    95                              <1> 	call kernel_segment:mformat
    96                              <1> 	stkclose 8
    97                              <1> %endmacro
    98                              <1> 
    99                              <1> %macro malloc 6
   100                              <1> 	stkopen 0Bh
   101                              <1> 	mov word [ bp + 4 ], %3
   102                              <1> 	mov word [ bp + 6 ], %4
   103                              <1> 	mov word [ bp + 8 ], %5	
   104                              <1> 	call kernel_segment:malloc
   105                              <1> 	push sp
   106                              <1> 	pop bp
   107                              <1> 	mov word %1, [ bp ]
   108                              <1> 	mov word %2, [ bp + 2 ]
   109                              <1> 	mov byte %6, [ bp + 0x0A ]
   110                              <1> 	stkclose 0Bh
   111                              <1> %endmacro 	
   112                              <1> 
   113                              <1> %macro laddr 2
   114                              <1> 	laddr %1, %2, %1, %2
   115                              <1> %endmacro
   116                              <1> 
   117                              <1> %macro faddr 2
   118                              <1> 	faddr %1, %2, %1, %2
   119                              <1> %endmacro
   120                              <1>  	
   121                              <1> %macro laddr 4
   122                              <1> 	stkopen 8
   123                              <1> 	mov word [ bp + 4 ], %3
   124                              <1> 	mov word [ bp + 6 ], %4	
   125                              <1> 	call kernel_segment:laddr
   126                              <1> 	push sp
   127                              <1> 	pop bp
   128                              <1> 	mov word %1, [ bp + 0 ]
   129                              <1> 	mov word %2, [ bp + 2 ]	
   130                              <1> 	stkclose 8
   131                              <1> %endmacro
   132                              <1> 
   133                              <1> %macro faddr 4
   134                              <1> 	stkopen 8
   135                              <1> 	mov word [ bp + 4 ], %3
   136                              <1> 	mov word [ bp + 6 ], %4	
   137                              <1> 	call kernel_segment:faddr
   138                              <1> 	push sp
   139                              <1> 	pop bp
   140                              <1> 	mov word %1, [ bp + 0 ]
   141                              <1> 	mov word %2, [ bp + 2 ]	
   142                              <1> 	stkclose 8
   143                              <1> %endmacro	
   144                              <1>  
   145                              <1> 
   146                              <1> %macro stkopen 1		
   147                              <1> 	sub word sp, %1
   148                              <1> 	push sp
   149                              <1> 	pop bp
   150                              <1> %endmacro
   151                              <1> 
   152                              <1> %macro stkclose 1
   153                              <1> 	add word sp, %1
   154                              <1> %endmacro
   155                              <1> 
   156                              <1> %macro stkload 1-* 	
   157                              <1>  	%rep %0
   158                              <1>  	 	%rotate -1
   159                              <1>  		pop %1
   160                              <1>  	%endrep
   161                              <1>  	%rep %0
   162                              <1>  		push %1
   163                              <1>  		%rotate 1
   164                              <1>  	%endrep
   165                              <1> %endmacro
   166                              <1> 
   167                              <1> %macro stkpush 1-* 	
   168                              <1>  	%rep %0
   169                              <1>  		push %1
   170                              <1>  		%rotate 1
   171                              <1>  	%endrep 	
   172                              <1> %endmacro
   173                              <1>  
   174                              <1> %macro stkpop 1-*
   175                              <1>  	%rep %0
   176                              <1>  	 	%rotate -1
   177                              <1>  		pop %1
   178                              <1>  	%endrep 	 	
   179                              <1> %endmacro
   180                              <1> 
   181                              <1> %endif 
   182                                  %include "lib/stdio.mac"
   183                              <1> 
   184                              <1> %ifndef STDIO_MAC
   185                              <1> 	%define STDIO_MAC
   186                              <1> 	
   187                              <1> 	%include "lib/stdio.asm"
   188                              <2> 
   189                              <2> %ifndef STDIO_ASM
   190                              <2> 	%define STDIO_ASM
   191                              <2> 	
   192                              <2> 	%include "lib/system.mac"
   193                              <3>  
   194                              <3> %ifndef SYSTEM_MAC
   195                              <3>  	%define SYSTEM_MAC
   196                              <3>  	
   197                              <3> 	%ifndef TRUE
   198                              <3> 		%define TRUE 01h
   199                              <3> 	%endif
   200                              <3> 	%ifndef FALSE
   201                              <3> 		%define FALSE 00h
   202                              <3> 	%endif
   203                              <3> 	
   204                              <3> %macro vlodsb 3
   205                              <3> 	vlodsb cs, %1, %2, %3
   206                              <3> %endmacro
   207                              <3> 
   208                              <3> %macro vstosb 3
   209                              <3> 	vstosb cs, %1, %2, %3
   210                              <3> %endmacro
   211                              <3> 	 	
   212                              <3> %macro int16toreg 2
   213                              <3> 	int16toreg cs, %1, %2
   214                              <3> %endmacro
   215                              <3> 
   216                              <3> %macro regtoint16 2
   217                              <3> 	regtoint16 %1, cs, %2
   218                              <3> %endmacro
   219                              <3> 
   220                              <3> %macro vstosb 4
   221                              <3> 	push %1
   222                              <3> 	pop ds
   223                              <3> 	mov si,%2
   224                              <3> 	add si,%3
   225                              <3> 	mov byte [si],%4	
   226                              <3> %endmacro
   227                              <3> 
   228                              <3> %macro vlodsb 4
   229                              <3> 	push %1
   230                              <3> 	pop ds
   231                              <3> 	mov si,%2
   232                              <3> 	add si,%3
   233                              <3> 	mov byte %4,[si]	
   234                              <3> %endmacro 	 
   235                              <3> 
   236                              <3> %macro int16toreg 3
   237                              <3> 	push %2
   238                              <3> 	push %1
   239                              <3> 	pop ds
   240                              <3> 	pop si
   241                              <3> 	mov word %3,[si]	
   242                              <3> %endmacro
   243                              <3> 
   244                              <3> %macro regtoint16 3
   245                              <3> 	push %3
   246                              <3> 	push %2
   247                              <3> 	pop ds
   248                              <3> 	pop si
   249                              <3> 	mov word [si],%1	
   250                              <3> %endmacro
   251                              <3> 
   252                              <3> %macro mov32 2
   253                              <3> 	mov32 cs, %1, cs, %2
   254                              <3> %endmacro
   255                              <3> 
   256                              <3> %macro mov16 2
   257                              <3> 	mov16 cs, %1, cs, %2
   258                              <3> %endmacro
   259                              <3> 
   260                              <3> %macro mov32 4
   261                              <3> 	mov ax,%3
   262                              <3> 	mov ds,ax
   263                              <3> 	mov cx,[%4+2]
   264                              <3> 	mov dx,[%4]
   265                              <3> 	mov ax,%1
   266                              <3> 	mov ds,ax
   267                              <3> 	mov [%2+2],cx
   268                              <3> 	mov [%2],dx
   269                              <3> %endmacro
   270                              <3> 
   271                              <3> %macro mov16 4
   272                              <3> 	mov ax,%3
   273                              <3> 	mov ds,ax
   274                              <3> 	mov bx,[%4]
   275                              <3> 	mov ax,%1
   276                              <3> 	mov ds,ax
   277                              <3> 	mov [%2],bx
   278                              <3> %endmacro
   279                              <3>  	 	
   280                              <3> %macro mformat 4
   281                              <3> 	stkopen 8
   282                              <3> 	mov word [ bp + 0 ], %1
   283                              <3> 	mov word [ bp + 2 ], %2
   284                              <3> 	mov word [ bp + 4 ], %3
   285                              <3> 	mov word [ bp + 6 ], %4
   286                              <3> 	call kernel_segment:mformat
   287                              <3> 	stkclose 8
   288                              <3> %endmacro
   289                              <3> 
   290                              <3> %macro malloc 6
   291                              <3> 	stkopen 0Bh
   292                              <3> 	mov word [ bp + 4 ], %3
   293                              <3> 	mov word [ bp + 6 ], %4
   294                              <3> 	mov word [ bp + 8 ], %5	
   295                              <3> 	call kernel_segment:malloc
   296                              <3> 	push sp
   297                              <3> 	pop bp
   298                              <3> 	mov word %1, [ bp ]
   299                              <3> 	mov word %2, [ bp + 2 ]
   300                              <3> 	mov byte %6, [ bp + 0x0A ]
   301                              <3> 	stkclose 0Bh
   302                              <3> %endmacro 	
   303                              <3> 
   304                              <3> %macro laddr 2
   305                              <3> 	laddr %1, %2, %1, %2
   306                              <3> %endmacro
   307                              <3> 
   308                              <3> %macro faddr 2
   309                              <3> 	faddr %1, %2, %1, %2
   310                              <3> %endmacro
   311                              <3>  	
   312                              <3> %macro laddr 4
   313                              <3> 	stkopen 8
   314                              <3> 	mov word [ bp + 4 ], %3
   315                              <3> 	mov word [ bp + 6 ], %4	
   316                              <3> 	call kernel_segment:laddr
   317                              <3> 	push sp
   318                              <3> 	pop bp
   319                              <3> 	mov word %1, [ bp + 0 ]
   320                              <3> 	mov word %2, [ bp + 2 ]	
   321                              <3> 	stkclose 8
   322                              <3> %endmacro
   323                              <3> 
   324                              <3> %macro faddr 4
   325                              <3> 	stkopen 8
   326                              <3> 	mov word [ bp + 4 ], %3
   327                              <3> 	mov word [ bp + 6 ], %4	
   328                              <3> 	call kernel_segment:faddr
   329                              <3> 	push sp
   330                              <3> 	pop bp
   331                              <3> 	mov word %1, [ bp + 0 ]
   332                              <3> 	mov word %2, [ bp + 2 ]	
   333                              <3> 	stkclose 8
   334                              <3> %endmacro	
   335                              <3>  
   336                              <3> 
   337                              <3> %macro stkopen 1		
   338                              <3> 	sub word sp, %1
   339                              <3> 	push sp
   340                              <3> 	pop bp
   341                              <3> %endmacro
   342                              <3> 
   343                              <3> %macro stkclose 1
   344                              <3> 	add word sp, %1
   345                              <3> %endmacro
   346                              <3> 
   347                              <3> %macro stkload 1-* 	
   348                              <3>  	%rep %0
   349                              <3>  	 	%rotate -1
   350                              <3>  		pop %1
   351                              <3>  	%endrep
   352                              <3>  	%rep %0
   353                              <3>  		push %1
   354                              <3>  		%rotate 1
   355                              <3>  	%endrep
   356                              <3> %endmacro
   357                              <3> 
   358                              <3> %macro stkpush 1-* 	
   359                              <3>  	%rep %0
   360                              <3>  		push %1
   361                              <3>  		%rotate 1
   362                              <3>  	%endrep 	
   363                              <3> %endmacro
   364                              <3>  
   365                              <3> %macro stkpop 1-*
   366                              <3>  	%rep %0
   367                              <3>  	 	%rotate -1
   368                              <3>  		pop %1
   369                              <3>  	%endrep 	 	
   370                              <3> %endmacro
   371                              <3> 
   372                              <3> %endif 
   373                              <2> 	
   374                              <2> %macro __prtch 1	
   375                              <2> 	stkopen 1	
   376                              <2> 	mov byte [ bp ], %1
   377                              <2> 	call proc_prtch
   378                              <2> 	stkclose 1
   379                              <2> %endmacro
   380                              <2> 
   381                              <2> %macro __prtln 0
   382                              <2> 	call proc_prtln
   383                              <2> %endmacro	
   384                              <2> 
   385                              <2> %macro __prtsubbin8 3
   386                              <2> 	stkopen 3
   387                              <2> 	mov byte [bp+0],%1
   388                              <2> 	mov byte [bp+1],%2
   389                              <2> 	mov byte [bp+2],%3
   390                              <2> 	call proc_prtsubbin8
   391                              <2> 	stkclose 3
   392                              <2> %endmacro
   393                              <2> 	
   394                              <2> section .data
   395                              <2> 	
   396                              <2> proc_prtIEEE754:
   397 00000000 89E0                <2> 	mov ax,sp
   398 00000002 89C5                <2> 	mov bp,ax			
   399 00000004 8B4602              <2> 	mov ax,[bp+2]	
   400 00000007 50                  <2> 	push ax
   401 00000008 50                  <2> 	push ax
   402 00000009 50                  <2> 	push ax
   403 0000000A 50                  <2> 	push ax	
   404 0000000B 50                  <2> 	push ax
   405                              <2> 	
   406                              <2> 	__prtsubbin8 ah,0,1
   407                              <3>  stkopen 3
   408 0000000C 83EC03              <4>  sub word sp, %1
   409 0000000F 54                  <4>  push sp
   410 00000010 5D                  <4>  pop bp
   411 00000011 886600              <3>  mov byte [bp+0],%1
   412 00000014 C6460100            <3>  mov byte [bp+1],%2
   413 00000018 C6460201            <3>  mov byte [bp+2],%3
   414 0000001C E87201              <3>  call proc_prtsubbin8
   415                              <3>  stkclose 3
   416 0000001F 83C403              <4>  add word sp, %1
   417                              <2> 	__prtch 20h
   418                              <3>  stkopen 1
   419 00000022 83EC01              <4>  sub word sp, %1
   420 00000025 54                  <4>  push sp
   421 00000026 5D                  <4>  pop bp
   422 00000027 C6460020            <3>  mov byte [ bp ], %1
   423 0000002B E82004              <3>  call proc_prtch
   424                              <3>  stkclose 1
   425 0000002E 83C401              <4>  add word sp, %1
   426                              <2> 	__prtch 20h
   427                              <3>  stkopen 1
   428 00000031 83EC01              <4>  sub word sp, %1
   429 00000034 54                  <4>  push sp
   430 00000035 5D                  <4>  pop bp
   431 00000036 C6460020            <3>  mov byte [ bp ], %1
   432 0000003A E81104              <3>  call proc_prtch
   433                              <3>  stkclose 1
   434 0000003D 83C401              <4>  add word sp, %1
   435 00000040 58                  <2> 	pop ax
   436                              <2> 	__prtsubbin8 ah,1,5
   437                              <3>  stkopen 3
   438 00000041 83EC03              <4>  sub word sp, %1
   439 00000044 54                  <4>  push sp
   440 00000045 5D                  <4>  pop bp
   441 00000046 886600              <3>  mov byte [bp+0],%1
   442 00000049 C6460101            <3>  mov byte [bp+1],%2
   443 0000004D C6460205            <3>  mov byte [bp+2],%3
   444 00000051 E83D01              <3>  call proc_prtsubbin8
   445                              <3>  stkclose 3
   446 00000054 83C403              <4>  add word sp, %1
   447 00000057 58                  <2> 	pop ax
   448                              <2> 	__prtsubbin8 ah,5,8
   449                              <3>  stkopen 3
   450 00000058 83EC03              <4>  sub word sp, %1
   451 0000005B 54                  <4>  push sp
   452 0000005C 5D                  <4>  pop bp
   453 0000005D 886600              <3>  mov byte [bp+0],%1
   454 00000060 C6460105            <3>  mov byte [bp+1],%2
   455 00000064 C6460208            <3>  mov byte [bp+2],%3
   456 00000068 E82601              <3>  call proc_prtsubbin8
   457                              <3>  stkclose 3
   458 0000006B 83C403              <4>  add word sp, %1
   459                              <2> 	
   460 0000006E 58                  <2> 	pop ax
   461                              <2> 	__prtsubbin8 al,0,1
   462                              <3>  stkopen 3
   463 0000006F 83EC03              <4>  sub word sp, %1
   464 00000072 54                  <4>  push sp
   465 00000073 5D                  <4>  pop bp
   466 00000074 884600              <3>  mov byte [bp+0],%1
   467 00000077 C6460100            <3>  mov byte [bp+1],%2
   468 0000007B C6460201            <3>  mov byte [bp+2],%3
   469 0000007F E80F01              <3>  call proc_prtsubbin8
   470                              <3>  stkclose 3
   471 00000082 83C403              <4>  add word sp, %1
   472                              <2> 	__prtch 20h
   473                              <3>  stkopen 1
   474 00000085 83EC01              <4>  sub word sp, %1
   475 00000088 54                  <4>  push sp
   476 00000089 5D                  <4>  pop bp
   477 0000008A C6460020            <3>  mov byte [ bp ], %1
   478 0000008E E8BD03              <3>  call proc_prtch
   479                              <3>  stkclose 1
   480 00000091 83C401              <4>  add word sp, %1
   481                              <2> 	__prtch 20h
   482                              <3>  stkopen 1
   483 00000094 83EC01              <4>  sub word sp, %1
   484 00000097 54                  <4>  push sp
   485 00000098 5D                  <4>  pop bp
   486 00000099 C6460020            <3>  mov byte [ bp ], %1
   487 0000009D E8AE03              <3>  call proc_prtch
   488                              <3>  stkclose 1
   489 000000A0 83C401              <4>  add word sp, %1
   490 000000A3 58                  <2> 	pop ax
   491                              <2> 	__prtsubbin8 al,1,4
   492                              <3>  stkopen 3
   493 000000A4 83EC03              <4>  sub word sp, %1
   494 000000A7 54                  <4>  push sp
   495 000000A8 5D                  <4>  pop bp
   496 000000A9 884600              <3>  mov byte [bp+0],%1
   497 000000AC C6460101            <3>  mov byte [bp+1],%2
   498 000000B0 C6460204            <3>  mov byte [bp+2],%3
   499 000000B4 E8DA00              <3>  call proc_prtsubbin8
   500                              <3>  stkclose 3
   501 000000B7 83C403              <4>  add word sp, %1
   502                              <2> 	__prtch 20h
   503                              <3>  stkopen 1
   504 000000BA 83EC01              <4>  sub word sp, %1
   505 000000BD 54                  <4>  push sp
   506 000000BE 5D                  <4>  pop bp
   507 000000BF C6460020            <3>  mov byte [ bp ], %1
   508 000000C3 E88803              <3>  call proc_prtch
   509                              <3>  stkclose 1
   510 000000C6 83C401              <4>  add word sp, %1
   511 000000C9 58                  <2> 	pop ax
   512                              <2> 	__prtsubbin8 al,4,8
   513                              <3>  stkopen 3
   514 000000CA 83EC03              <4>  sub word sp, %1
   515 000000CD 54                  <4>  push sp
   516 000000CE 5D                  <4>  pop bp
   517 000000CF 884600              <3>  mov byte [bp+0],%1
   518 000000D2 C6460104            <3>  mov byte [bp+1],%2
   519 000000D6 C6460208            <3>  mov byte [bp+2],%3
   520 000000DA E8B400              <3>  call proc_prtsubbin8
   521                              <3>  stkclose 3
   522 000000DD 83C403              <4>  add word sp, %1
   523                              <2> 	__prtch 20h
   524                              <3>  stkopen 1
   525 000000E0 83EC01              <4>  sub word sp, %1
   526 000000E3 54                  <4>  push sp
   527 000000E4 5D                  <4>  pop bp
   528 000000E5 C6460020            <3>  mov byte [ bp ], %1
   529 000000E9 E86203              <3>  call proc_prtch
   530                              <3>  stkclose 1
   531 000000EC 83C401              <4>  add word sp, %1
   532                              <2> 	
   533 000000EF 89E0                <2> 	mov ax,sp
   534 000000F1 89C5                <2> 	mov bp,ax			
   535 000000F3 8B4604              <2> 	mov ax,[bp+4]
   536 000000F6 50                  <2> 	push ax
   537 000000F7 50                  <2> 	push ax
   538 000000F8 50                  <2> 	push ax
   539                              <2> 	
   540                              <2> 	__prtsubbin8 ah,0,4
   541                              <3>  stkopen 3
   542 000000F9 83EC03              <4>  sub word sp, %1
   543 000000FC 54                  <4>  push sp
   544 000000FD 5D                  <4>  pop bp
   545 000000FE 886600              <3>  mov byte [bp+0],%1
   546 00000101 C6460100            <3>  mov byte [bp+1],%2
   547 00000105 C6460204            <3>  mov byte [bp+2],%3
   548 00000109 E88500              <3>  call proc_prtsubbin8
   549                              <3>  stkclose 3
   550 0000010C 83C403              <4>  add word sp, %1
   551                              <2> 	__prtch 20h
   552                              <3>  stkopen 1
   553 0000010F 83EC01              <4>  sub word sp, %1
   554 00000112 54                  <4>  push sp
   555 00000113 5D                  <4>  pop bp
   556 00000114 C6460020            <3>  mov byte [ bp ], %1
   557 00000118 E83303              <3>  call proc_prtch
   558                              <3>  stkclose 1
   559 0000011B 83C401              <4>  add word sp, %1
   560 0000011E 58                  <2> 	pop ax
   561                              <2> 	__prtsubbin8 ah,4,8
   562                              <3>  stkopen 3
   563 0000011F 83EC03              <4>  sub word sp, %1
   564 00000122 54                  <4>  push sp
   565 00000123 5D                  <4>  pop bp
   566 00000124 886600              <3>  mov byte [bp+0],%1
   567 00000127 C6460104            <3>  mov byte [bp+1],%2
   568 0000012B C6460208            <3>  mov byte [bp+2],%3
   569 0000012F E85F00              <3>  call proc_prtsubbin8
   570                              <3>  stkclose 3
   571 00000132 83C403              <4>  add word sp, %1
   572                              <2> 	__prtch 20h
   573                              <3>  stkopen 1
   574 00000135 83EC01              <4>  sub word sp, %1
   575 00000138 54                  <4>  push sp
   576 00000139 5D                  <4>  pop bp
   577 0000013A C6460020            <3>  mov byte [ bp ], %1
   578 0000013E E80D03              <3>  call proc_prtch
   579                              <3>  stkclose 1
   580 00000141 83C401              <4>  add word sp, %1
   581                              <2> 	
   582 00000144 58                  <2> 	pop ax
   583                              <2> 	__prtsubbin8 al,0,4
   584                              <3>  stkopen 3
   585 00000145 83EC03              <4>  sub word sp, %1
   586 00000148 54                  <4>  push sp
   587 00000149 5D                  <4>  pop bp
   588 0000014A 884600              <3>  mov byte [bp+0],%1
   589 0000014D C6460100            <3>  mov byte [bp+1],%2
   590 00000151 C6460204            <3>  mov byte [bp+2],%3
   591 00000155 E83900              <3>  call proc_prtsubbin8
   592                              <3>  stkclose 3
   593 00000158 83C403              <4>  add word sp, %1
   594                              <2> 	__prtch 20h
   595                              <3>  stkopen 1
   596 0000015B 83EC01              <4>  sub word sp, %1
   597 0000015E 54                  <4>  push sp
   598 0000015F 5D                  <4>  pop bp
   599 00000160 C6460020            <3>  mov byte [ bp ], %1
   600 00000164 E8E702              <3>  call proc_prtch
   601                              <3>  stkclose 1
   602 00000167 83C401              <4>  add word sp, %1
   603 0000016A 58                  <2> 	pop ax
   604                              <2> 	__prtsubbin8 al,4,8
   605                              <3>  stkopen 3
   606 0000016B 83EC03              <4>  sub word sp, %1
   607 0000016E 54                  <4>  push sp
   608 0000016F 5D                  <4>  pop bp
   609 00000170 884600              <3>  mov byte [bp+0],%1
   610 00000173 C6460104            <3>  mov byte [bp+1],%2
   611 00000177 C6460208            <3>  mov byte [bp+2],%3
   612 0000017B E81300              <3>  call proc_prtsubbin8
   613                              <3>  stkclose 3
   614 0000017E 83C403              <4>  add word sp, %1
   615                              <2> 	__prtch 20h
   616                              <3>  stkopen 1
   617 00000181 83EC01              <4>  sub word sp, %1
   618 00000184 54                  <4>  push sp
   619 00000185 5D                  <4>  pop bp
   620 00000186 C6460020            <3>  mov byte [ bp ], %1
   621 0000018A E8C102              <3>  call proc_prtch
   622                              <3>  stkclose 1
   623 0000018D 83C401              <4>  add word sp, %1
   624                              <2> 	
   625 00000190 C3                  <2> 	ret
   626                              <2> 	
   627                              <2> proc_prtsubbin8:
   628 00000191 89E0                <2> 	mov ax,sp
   629 00000193 89C5                <2> 	mov bp,ax
   630                              <2> 	
   631 00000195 8A4602              <2> 	mov al,[bp+2]
   632 00000198 50                  <2> 	push ax
   633                              <2> 	
   634 00000199 8A4E03              <2> 	mov cl,[bp+3]
   635 0000019C 8A6E04              <2> 	mov ch,[bp+4]
   636 0000019F 80FD08              <2> 	cmp ch,8
   637 000001A2 7602                <2> 	jbe .l1	
   638 000001A4 B508                <2> 		mov ch,8
   639                              <2> 	.l1:		
   640 000001A6 38E9                <2> 		cmp cl,ch		
   641 000001A8 731D                <2> 		jae .l2
   642                              <2> 		
   643 000001AA 58                  <2> 		pop ax
   644 000001AB 50                  <2> 		push ax
   645 000001AC D2E0                <2> 		shl al,cl
   646 000001AE C0E807              <2> 		shr al,7		
   647 000001B1 0430                <2> 		add al,30h
   648                              <2> 		
   649 000001B3 51                  <2> 		push cx
   650                              <2> 		__prtch al
   651                              <3>  stkopen 1
   652 000001B4 83EC01              <4>  sub word sp, %1
   653 000001B7 54                  <4>  push sp
   654 000001B8 5D                  <4>  pop bp
   655 000001B9 884600              <3>  mov byte [ bp ], %1
   656 000001BC E88F02              <3>  call proc_prtch
   657                              <3>  stkclose 1
   658 000001BF 83C401              <4>  add word sp, %1
   659 000001C2 59                  <2> 		pop cx
   660                              <2> 		
   661 000001C3 FEC1                <2> 		inc cl
   662 000001C5 EBDF                <2> 		jmp .l1
   663                              <2> 	.l2:	
   664 000001C7 58                  <2> 	pop ax
   665                              <2> 	
   666 000001C8 C3                  <2> 	ret
   667                              <2> 	
   668                              <2> proc_prtbin16:
   669 000001C9 89E0                <2> 	mov ax,sp
   670 000001CB 89C5                <2> 	mov bp,ax
   671                              <2> 		
   672 000001CD 8A7E04              <2> 	mov bh, [bp+4]
   673 000001D0 B300                <2> 	mov bl,0
   674 000001D2 B201                <2> 	mov dl,TRUE
   675 000001D4 30ED                <2> 	xor ch,ch
   676 000001D6 B102                <2> 	mov cl,2
   677                              <2> 	.l1:
   678 000001D8 80F900              <2> 		cmp cl,0
   679 000001DB 744B                <2> 		jz .l2		
   680                              <2> 		
   681 000001DD 55                  <2> 		push bp
   682 000001DE 01CD                <2> 		add bp,cx
   683 000001E0 45                  <2> 		inc bp
   684                              <2> 		
   685 000001E1 0A5E00              <2> 		or byte bl, [bp]
   686 000001E4 08FB                <2> 		or byte bl, bh
   687 000001E6 743B                <2> 		jz .prted											
   688 000001E8 53                  <2> 			push bx
   689 000001E9 51                  <2> 			push cx	
   690 000001EA 80FA01              <2> 			cmp dl, TRUE
   691 000001ED 7402                <2> 			je .first
   692 000001EF EB10                <2> 			jmp .nfirst
   693                              <2> 			.first:
   694 000001F1 B200                <2> 				mov dl, FALSE
   695 000001F3 52                  <2> 				push dx
   696                              <2> 				
   697 000001F4 88FC                <2> 				mov ah, bh
   698 000001F6 8A4600              <2> 				mov byte al, [bp]
   699 000001F9 50                  <2> 				push ax
   700 000001FA E84000              <2> 				call proc_prtbin8
   701 000001FD 58                  <2> 				pop ax
   702                              <2> 							
   703 000001FE 5A                  <2> 				pop dx
   704 000001FF EB0C                <2> 				jmp .endfirst
   705                              <2> 			.nfirst:
   706 00000201 52                  <2> 				push dx
   707                              <2> 				
   708 00000202 B401                <2> 				mov ah, TRUE
   709 00000204 8A4600              <2> 				mov byte al, [bp]
   710 00000207 50                  <2> 				push ax
   711 00000208 E83200              <2> 				call proc_prtbin8
   712 0000020B 58                  <2> 				pop ax
   713                              <2> 								
   714 0000020C 5A                  <2> 				pop dx
   715                              <2> 			.endfirst:	
   716 0000020D 59                  <2> 			pop cx
   717 0000020E 5B                  <2> 			pop bx		
   718                              <2> 			
   719 0000020F 80F901              <2> 			cmp cl,1
   720 00000212 760F                <2> 			jbe .spaceprted
   721                              <2> 				__prtch 20h
   722                              <3>  stkopen 1
   723 00000214 83EC01              <4>  sub word sp, %1
   724 00000217 54                  <4>  push sp
   725 00000218 5D                  <4>  pop bp
   726 00000219 C6460020            <3>  mov byte [ bp ], %1
   727 0000021D E82E02              <3>  call proc_prtch
   728                              <3>  stkclose 1
   729 00000220 83C401              <4>  add word sp, %1
   730                              <2> 			.spaceprted:
   731                              <2> 		.prted:
   732                              <2> 		
   733 00000223 5D                  <2> 		pop bp
   734                              <2> 		
   735 00000224 FEC9                <2> 		dec cl
   736 00000226 EBB0                <2> 		jmp .l1
   737                              <2> 	.l2:
   738                              <2> 	
   739 00000228 80FB00              <2> 	cmp bl,0
   740 0000022B 750F                <2> 	jnz .end
   741                              <2> 		__prtch 30h
   742                              <3>  stkopen 1
   743 0000022D 83EC01              <4>  sub word sp, %1
   744 00000230 54                  <4>  push sp
   745 00000231 5D                  <4>  pop bp
   746 00000232 C6460030            <3>  mov byte [ bp ], %1
   747 00000236 E81502              <3>  call proc_prtch
   748                              <3>  stkclose 1
   749 00000239 83C401              <4>  add word sp, %1
   750                              <2> 	.end:
   751                              <2> 	
   752 0000023C C3                  <2> 	ret	
   753                              <2> 	
   754                              <2> proc_prtbin8:
   755 0000023D 89E0                <2> 	mov ax,sp
   756 0000023F 89C5                <2> 	mov bp,ax
   757 00000241 8A4602              <2> 	mov byte al, [bp+2]
   758 00000244 3C00                <2> 	cmp al, 0
   759 00000246 0F858700            <2> 	jnz .nzero
   760                              <2> 		__prtch 30h
   761                              <3>  stkopen 1
   762 0000024A 83EC01              <4>  sub word sp, %1
   763 0000024D 54                  <4>  push sp
   764 0000024E 5D                  <4>  pop bp
   765 0000024F C6460030            <3>  mov byte [ bp ], %1
   766 00000253 E8F801              <3>  call proc_prtch
   767                              <3>  stkclose 1
   768 00000256 83C401              <4>  add word sp, %1
   769                              <2> 		
   770 00000259 89E0                <2> 		mov ax,sp
   771 0000025B 89C5                <2> 		mov bp,ax
   772 0000025D 8A4603              <2> 		mov byte al, [bp+3]		
   773 00000260 3C00                <2> 		cmp al, FALSE
   774 00000262 0F84C500            <2> 		je .end
   775                              <2> 			__prtch 30h
   776                              <3>  stkopen 1
   777 00000266 83EC01              <4>  sub word sp, %1
   778 00000269 54                  <4>  push sp
   779 0000026A 5D                  <4>  pop bp
   780 0000026B C6460030            <3>  mov byte [ bp ], %1
   781 0000026F E8DC01              <3>  call proc_prtch
   782                              <3>  stkclose 1
   783 00000272 83C401              <4>  add word sp, %1
   784                              <2> 			__prtch 30h
   785                              <3>  stkopen 1
   786 00000275 83EC01              <4>  sub word sp, %1
   787 00000278 54                  <4>  push sp
   788 00000279 5D                  <4>  pop bp
   789 0000027A C6460030            <3>  mov byte [ bp ], %1
   790 0000027E E8CD01              <3>  call proc_prtch
   791                              <3>  stkclose 1
   792 00000281 83C401              <4>  add word sp, %1
   793                              <2> 			__prtch 30h
   794                              <3>  stkopen 1
   795 00000284 83EC01              <4>  sub word sp, %1
   796 00000287 54                  <4>  push sp
   797 00000288 5D                  <4>  pop bp
   798 00000289 C6460030            <3>  mov byte [ bp ], %1
   799 0000028D E8BE01              <3>  call proc_prtch
   800                              <3>  stkclose 1
   801 00000290 83C401              <4>  add word sp, %1
   802                              <2> 			__prtch 30h
   803                              <3>  stkopen 1
   804 00000293 83EC01              <4>  sub word sp, %1
   805 00000296 54                  <4>  push sp
   806 00000297 5D                  <4>  pop bp
   807 00000298 C6460030            <3>  mov byte [ bp ], %1
   808 0000029C E8AF01              <3>  call proc_prtch
   809                              <3>  stkclose 1
   810 0000029F 83C401              <4>  add word sp, %1
   811                              <2> 			__prtch 30h
   812                              <3>  stkopen 1
   813 000002A2 83EC01              <4>  sub word sp, %1
   814 000002A5 54                  <4>  push sp
   815 000002A6 5D                  <4>  pop bp
   816 000002A7 C6460030            <3>  mov byte [ bp ], %1
   817 000002AB E8A001              <3>  call proc_prtch
   818                              <3>  stkclose 1
   819 000002AE 83C401              <4>  add word sp, %1
   820                              <2> 			__prtch 30h
   821                              <3>  stkopen 1
   822 000002B1 83EC01              <4>  sub word sp, %1
   823 000002B4 54                  <4>  push sp
   824 000002B5 5D                  <4>  pop bp
   825 000002B6 C6460030            <3>  mov byte [ bp ], %1
   826 000002BA E89101              <3>  call proc_prtch
   827                              <3>  stkclose 1
   828 000002BD 83C401              <4>  add word sp, %1
   829                              <2> 			__prtch 30h
   830                              <3>  stkopen 1
   831 000002C0 83EC01              <4>  sub word sp, %1
   832 000002C3 54                  <4>  push sp
   833 000002C4 5D                  <4>  pop bp
   834 000002C5 C6460030            <3>  mov byte [ bp ], %1
   835 000002C9 E88201              <3>  call proc_prtch
   836                              <3>  stkclose 1
   837 000002CC 83C401              <4>  add word sp, %1
   838 000002CF EB5A                <2> 			jmp .end		
   839                              <2> 	.nzero:
   840                              <2> 
   841 000002D1 B000                <2> 	mov byte al, FALSE
   842 000002D3 50                  <2> 	push ax
   843                              <2> 
   844 000002D4 89E0                <2> 	mov ax,sp
   845 000002D6 89C5                <2> 	mov bp,ax
   846 000002D8 8A5E04              <2> 	mov byte bl, [bp+4]
   847 000002DB B100                <2> 	mov cl,0
   848                              <2> 	.l1:
   849 000002DD 80F908              <2> 		cmp cl,8
   850 000002E0 7348                <2> 		jae .l2
   851                              <2> 		
   852 000002E2 88C8                <2> 		mov al,cl
   853                              <2> 		
   854 000002E4 88DA                <2> 		mov dl, bl		
   855                              <2> 		
   856                              <2> 		.l1.1:
   857 000002E6 3C00                <2> 			cmp al,0
   858 000002E8 7406                <2> 			jz .l1.2
   859                              <2> 							
   860 000002EA D0E2                <2> 			shl dl,1
   861                              <2> 			
   862 000002EC FEC8                <2> 			dec al
   863 000002EE EBF6                <2> 			jmp .l1.1
   864                              <2> 		.l1.2:
   865                              <2> 						
   866 000002F0 C0EA07              <2> 		shr dl,7
   867                              <2> 		
   868 000002F3 89E0                <2> 		mov ax,sp
   869 000002F5 89C5                <2> 		mov bp,ax			
   870 000002F7 8A4605              <2> 		mov byte al, [bp+5]
   871 000002FA 3C01                <2> 		cmp al, TRUE
   872 000002FC 7413                <2> 		je .endzero		
   873 000002FE 80FA00              <2> 			cmp dl,0
   874 00000301 7402                <2> 			jz .zero
   875 00000303 EB08                <2> 			jmp .notzero
   876                              <2> 			.zero:
   877 00000305 58                  <2> 				pop ax
   878 00000306 50                  <2> 				push ax
   879 00000307 3C01                <2> 				cmp al, TRUE				
   880 00000309 7406                <2> 				je .endzero
   881 0000030B EB19                <2> 				jmp .inc
   882                              <2> 			.notzero:
   883 0000030D 58                  <2> 				pop ax
   884 0000030E B001                <2> 				mov al, TRUE	
   885 00000310 50                  <2> 				push ax				
   886                              <2> 		.endzero:
   887                              <2> 									
   888 00000311 80C230              <2> 		add dl,30h
   889                              <2> 
   890 00000314 51                  <2> 		push cx
   891 00000315 52                  <2> 		push dx
   892                              <2> 		__prtch dl
   893                              <3>  stkopen 1
   894 00000316 83EC01              <4>  sub word sp, %1
   895 00000319 54                  <4>  push sp
   896 0000031A 5D                  <4>  pop bp
   897 0000031B 885600              <3>  mov byte [ bp ], %1
   898 0000031E E82D01              <3>  call proc_prtch
   899                              <3>  stkclose 1
   900 00000321 83C401              <4>  add word sp, %1
   901 00000324 5A                  <2> 		pop dx
   902 00000325 59                  <2> 		pop cx	
   903                              <2> 
   904                              <2> 		.inc:
   905                              <2> 	
   906 00000326 FEC1                <2> 		inc cl
   907 00000328 EBB3                <2> 		jmp .l1	
   908                              <2> 	.l2:
   909                              <2> 	
   910 0000032A 58                  <2> 	pop ax
   911                              <2> 	
   912                              <2> 	.end:
   913                              <2> 	
   914 0000032B C3                  <2> 	ret	
   915                              <2> 
   916                              <2> proc_prthex16:
   917 0000032C 89E0                <2> 	mov ax,sp
   918 0000032E 89C5                <2> 	mov bp,ax
   919                              <2> 
   920 00000330 8A7E04              <2> 	mov byte bh, [bp+4]		
   921 00000333 B300                <2> 	mov bl,0	
   922 00000335 B201                <2> 	mov dl,TRUE
   923 00000337 30ED                <2> 	xor ch,ch
   924 00000339 B102                <2> 	mov cl, 2	
   925                              <2> 	.l1:			
   926 0000033B 80F900              <2> 		cmp cl,0
   927 0000033E 7437                <2> 		jz .l2
   928                              <2> 							
   929 00000340 55                  <2> 		push bp		
   930 00000341 01CD                <2> 		add bp,cx
   931 00000343 45                  <2> 		inc bp		
   932                              <2> 		
   933 00000344 0A5E00              <2> 		or byte bl, [bp]
   934 00000347 08FB                <2> 		or byte bl, bh
   935 00000349 7427                <2> 		jz .prted							
   936 0000034B 53                  <2> 			push bx
   937 0000034C 51                  <2> 			push cx	
   938 0000034D 80FA01              <2> 			cmp dl, TRUE
   939 00000350 7402                <2> 			je .first
   940 00000352 EB10                <2> 			jmp .nfirst
   941                              <2> 			.first:
   942 00000354 B200                <2> 				mov dl, FALSE
   943 00000356 52                  <2> 				push dx
   944                              <2> 				
   945 00000357 88FC                <2> 				mov ah, bh
   946 00000359 8A4600              <2> 				mov byte al, [bp]
   947 0000035C 50                  <2> 				push ax
   948 0000035D E82C00              <2> 				call proc_prthex8
   949 00000360 58                  <2> 				pop ax
   950                              <2> 							
   951 00000361 5A                  <2> 				pop dx
   952 00000362 EB0C                <2> 				jmp .endfirst
   953                              <2> 			.nfirst:
   954 00000364 52                  <2> 				push dx
   955                              <2> 				
   956 00000365 B401                <2> 				mov ah, TRUE
   957 00000367 8A4600              <2> 				mov byte al, [bp]
   958 0000036A 50                  <2> 				push ax
   959 0000036B E81E00              <2> 				call proc_prthex8
   960 0000036E 58                  <2> 				pop ax
   961                              <2> 								
   962 0000036F 5A                  <2> 				pop dx
   963                              <2> 			.endfirst:	
   964 00000370 59                  <2> 			pop cx
   965 00000371 5B                  <2> 			pop bx		
   966                              <2> 		.prted:
   967                              <2> 		
   968 00000372 5D                  <2> 		pop bp
   969                              <2> 	
   970 00000373 FEC9                <2> 		dec cl
   971 00000375 EBC4                <2> 		jmp .l1		
   972                              <2> 	.l2:
   973                              <2> 	
   974 00000377 80FB00              <2> 	cmp bl,0
   975 0000037A 750F                <2> 	jnz .end
   976                              <2> 		__prtch 30h
   977                              <3>  stkopen 1
   978 0000037C 83EC01              <4>  sub word sp, %1
   979 0000037F 54                  <4>  push sp
   980 00000380 5D                  <4>  pop bp
   981 00000381 C6460030            <3>  mov byte [ bp ], %1
   982 00000385 E8C600              <3>  call proc_prtch
   983                              <3>  stkclose 1
   984 00000388 83C401              <4>  add word sp, %1
   985                              <2> 	.end:
   986                              <2> 	
   987 0000038B C3                  <2> 	ret
   988                              <2> 	
   989                              <2> proc_prthex8:
   990 0000038C 89E0                <2> 	mov ax,sp
   991 0000038E 89C5                <2> 	mov bp,ax
   992 00000390 8A4602              <2> 	mov byte al, [bp+2]
   993 00000393 3C00                <2> 	cmp al, 0
   994 00000395 752B                <2> 	jnz .nzero
   995                              <2> 		__prtch 30h
   996                              <3>  stkopen 1
   997 00000397 83EC01              <4>  sub word sp, %1
   998 0000039A 54                  <4>  push sp
   999 0000039B 5D                  <4>  pop bp
  1000 0000039C C6460030            <3>  mov byte [ bp ], %1
  1001 000003A0 E8AB00              <3>  call proc_prtch
  1002                              <3>  stkclose 1
  1003 000003A3 83C401              <4>  add word sp, %1
  1004                              <2> 		
  1005 000003A6 89E0                <2> 		mov ax,sp
  1006 000003A8 89C5                <2> 		mov bp,ax
  1007 000003AA 8A4603              <2> 		mov byte al, [bp+3]		
  1008 000003AD 3C00                <2> 		cmp al, FALSE
  1009 000003AF 7476                <2> 		je .end
  1010                              <2> 			__prtch 30h
  1011                              <3>  stkopen 1
  1012 000003B1 83EC01              <4>  sub word sp, %1
  1013 000003B4 54                  <4>  push sp
  1014 000003B5 5D                  <4>  pop bp
  1015 000003B6 C6460030            <3>  mov byte [ bp ], %1
  1016 000003BA E89100              <3>  call proc_prtch
  1017                              <3>  stkclose 1
  1018 000003BD 83C401              <4>  add word sp, %1
  1019 000003C0 EB65                <2> 			jmp .end		
  1020                              <2> 	.nzero:
  1021                              <2> 
  1022 000003C2 B000                <2> 	mov byte al, FALSE
  1023 000003C4 50                  <2> 	push ax
  1024                              <2> 
  1025 000003C5 89E0                <2> 	mov ax,sp
  1026 000003C7 89C5                <2> 	mov bp,ax
  1027 000003C9 8A5E04              <2> 	mov byte bl, [bp+4]
  1028 000003CC B102                <2> 	mov cl,2
  1029                              <2> 	.l1:
  1030 000003CE 80F900              <2> 		cmp cl,0
  1031 000003D1 7453                <2> 		jz .l2
  1032                              <2> 		
  1033 000003D3 B002                <2> 		mov al,2
  1034 000003D5 28C8                <2> 		sub al,cl
  1035                              <2> 		
  1036 000003D7 88DA                <2> 		mov dl, bl	
  1037                              <2> 		
  1038                              <2> 		.l1.1:
  1039 000003D9 3C00                <2> 			cmp al,0
  1040 000003DB 7407                <2> 			jz .l1.2
  1041                              <2> 							
  1042 000003DD C0E204              <2> 			shl dl,4
  1043                              <2> 			
  1044 000003E0 FEC8                <2> 			dec al
  1045 000003E2 EBF5                <2> 			jmp .l1.1
  1046                              <2> 		.l1.2:
  1047                              <2> 						
  1048 000003E4 C0EA04              <2> 		shr dl,4
  1049                              <2> 
  1050 000003E7 89E0                <2> 		mov ax,sp
  1051 000003E9 89C5                <2> 		mov bp,ax			
  1052 000003EB 8A4605              <2> 		mov byte al, [bp+5]
  1053 000003EE 3C01                <2> 		cmp al, TRUE
  1054 000003F0 7413                <2> 		je .endzero		
  1055 000003F2 80FA00              <2> 			cmp dl,0
  1056 000003F5 7402                <2> 			jz .zero
  1057 000003F7 EB08                <2> 			jmp .notzero
  1058                              <2> 			.zero:
  1059 000003F9 58                  <2> 				pop ax
  1060 000003FA 50                  <2> 				push ax
  1061 000003FB 3C01                <2> 				cmp al, TRUE				
  1062 000003FD 7406                <2> 				je .endzero
  1063 000003FF EB21                <2> 				jmp .dec
  1064                              <2> 			.notzero:
  1065 00000401 58                  <2> 				pop ax
  1066 00000402 B001                <2> 				mov al, TRUE	
  1067 00000404 50                  <2> 				push ax				
  1068                              <2> 		.endzero:
  1069                              <2> 						
  1070 00000405 80FA09              <2> 		cmp dl,9
  1071 00000408 7603                <2> 		jbe .endsumseven  		
  1072 0000040A 80C207              <2> 		add dl,7
  1073                              <2> 		.endsumseven:
  1074                              <2> 						
  1075 0000040D 80C230              <2> 		add dl,30h
  1076                              <2> 
  1077 00000410 51                  <2> 		push cx
  1078 00000411 52                  <2> 		push dx
  1079                              <2> 		__prtch dl
  1080                              <3>  stkopen 1
  1081 00000412 83EC01              <4>  sub word sp, %1
  1082 00000415 54                  <4>  push sp
  1083 00000416 5D                  <4>  pop bp
  1084 00000417 885600              <3>  mov byte [ bp ], %1
  1085 0000041A E83100              <3>  call proc_prtch
  1086                              <3>  stkclose 1
  1087 0000041D 83C401              <4>  add word sp, %1
  1088 00000420 5A                  <2> 		pop dx
  1089 00000421 59                  <2> 		pop cx	
  1090                              <2> 
  1091                              <2> 		.dec:
  1092                              <2> 	
  1093 00000422 FEC9                <2> 		dec cl
  1094 00000424 EBA8                <2> 		jmp .l1	
  1095                              <2> 	.l2:
  1096                              <2> 	
  1097 00000426 58                  <2> 	pop ax
  1098                              <2> 	
  1099                              <2> 	.end:
  1100                              <2> 	
  1101 00000427 C3                  <2> 	ret
  1102                              <2> 
  1103                              <2> proc_prtstr:
  1104 00000428 89E0                <2> 	mov ax,sp
  1105 0000042A 89C5                <2> 	mov bp,ax
  1106                              <2> 	
  1107 0000042C 8B4602              <2> 	mov ax, [bp+2]
  1108 0000042F 8ED8                <2> 	mov ds, ax
  1109 00000431 8B7604              <2> 	mov si, [bp+4]						
  1110                              <2> 	.loop:
  1111 00000434 AC                  <2> 		lodsb
  1112 00000435 3C00                <2> 		cmp al,0h
  1113 00000437 7414                <2> 		jz .done
  1114                              <2> 		
  1115 00000439 1E                  <2> 		push ds
  1116 0000043A 56                  <2> 		push si
  1117                              <2> 					
  1118                              <2> 		__prtch al										
  1119                              <3>  stkopen 1
  1120 0000043B 83EC01              <4>  sub word sp, %1
  1121 0000043E 54                  <4>  push sp
  1122 0000043F 5D                  <4>  pop bp
  1123 00000440 884600              <3>  mov byte [ bp ], %1
  1124 00000443 E80800              <3>  call proc_prtch
  1125                              <3>  stkclose 1
  1126 00000446 83C401              <4>  add word sp, %1
  1127                              <2> 									
  1128 00000449 5E                  <2> 		pop si
  1129 0000044A 1F                  <2> 		pop ds
  1130                              <2> 											
  1131 0000044B EBE7                <2> 		jmp .loop 
  1132                              <2> 	.done:
  1133                              <2> 	
  1134 0000044D C3                  <2> 	ret	
  1135                              <2> 	
  1136                              <2> proc_prtch:
  1137 0000044E 89E0                <2> 	mov ax,sp
  1138 00000450 89C5                <2> 	mov bp,ax
  1139                              <2> 
  1140 00000452 8A4602              <2> 	mov al,[bp+2]
  1141 00000455 B40E                <2> 	mov ah,0Eh
  1142 00000457 B700                <2> 	mov bh,00h
  1143 00000459 CD10                <2> 	int 10h	
  1144                              <2> 	
  1145 0000045B C3                  <2> 	ret
  1146                              <2> 
  1147                              <2> proc_prtln:
  1148 0000045C B403                <2> 	mov ah,03h
  1149 0000045E B700                <2> 	mov bh,00h
  1150 00000460 CD10                <2> 	int 10h
  1151                              <2> 	
  1152 00000462 B402                <2> 	mov ah,02h
  1153 00000464 FEC6                <2> 	inc dh
  1154 00000466 B200                <2> 	mov dl,00h
  1155 00000468 CD10                <2> 	int 10h	
  1156                              <2> 	
  1157 0000046A C3                  <2> 	ret
  1158                              <2> 	
  1159                              <2> %endif
  1160                              <1>  	%include "lib/system.mac"
  1161                              <2>  
  1162                              <2> %ifndef SYSTEM_MAC
  1163                              <2>  	%define SYSTEM_MAC
  1164                              <2>  	
  1165                              <2> 	%ifndef TRUE
  1166                              <2> 		%define TRUE 01h
  1167                              <2> 	%endif
  1168                              <2> 	%ifndef FALSE
  1169                              <2> 		%define FALSE 00h
  1170                              <2> 	%endif
  1171                              <2> 	
  1172                              <2> %macro vlodsb 3
  1173                              <2> 	vlodsb cs, %1, %2, %3
  1174                              <2> %endmacro
  1175                              <2> 
  1176                              <2> %macro vstosb 3
  1177                              <2> 	vstosb cs, %1, %2, %3
  1178                              <2> %endmacro
  1179                              <2> 	 	
  1180                              <2> %macro int16toreg 2
  1181                              <2> 	int16toreg cs, %1, %2
  1182                              <2> %endmacro
  1183                              <2> 
  1184                              <2> %macro regtoint16 2
  1185                              <2> 	regtoint16 %1, cs, %2
  1186                              <2> %endmacro
  1187                              <2> 
  1188                              <2> %macro vstosb 4
  1189                              <2> 	push %1
  1190                              <2> 	pop ds
  1191                              <2> 	mov si,%2
  1192                              <2> 	add si,%3
  1193                              <2> 	mov byte [si],%4	
  1194                              <2> %endmacro
  1195                              <2> 
  1196                              <2> %macro vlodsb 4
  1197                              <2> 	push %1
  1198                              <2> 	pop ds
  1199                              <2> 	mov si,%2
  1200                              <2> 	add si,%3
  1201                              <2> 	mov byte %4,[si]	
  1202                              <2> %endmacro 	 
  1203                              <2> 
  1204                              <2> %macro int16toreg 3
  1205                              <2> 	push %2
  1206                              <2> 	push %1
  1207                              <2> 	pop ds
  1208                              <2> 	pop si
  1209                              <2> 	mov word %3,[si]	
  1210                              <2> %endmacro
  1211                              <2> 
  1212                              <2> %macro regtoint16 3
  1213                              <2> 	push %3
  1214                              <2> 	push %2
  1215                              <2> 	pop ds
  1216                              <2> 	pop si
  1217                              <2> 	mov word [si],%1	
  1218                              <2> %endmacro
  1219                              <2> 
  1220                              <2> %macro mov32 2
  1221                              <2> 	mov32 cs, %1, cs, %2
  1222                              <2> %endmacro
  1223                              <2> 
  1224                              <2> %macro mov16 2
  1225                              <2> 	mov16 cs, %1, cs, %2
  1226                              <2> %endmacro
  1227                              <2> 
  1228                              <2> %macro mov32 4
  1229                              <2> 	mov ax,%3
  1230                              <2> 	mov ds,ax
  1231                              <2> 	mov cx,[%4+2]
  1232                              <2> 	mov dx,[%4]
  1233                              <2> 	mov ax,%1
  1234                              <2> 	mov ds,ax
  1235                              <2> 	mov [%2+2],cx
  1236                              <2> 	mov [%2],dx
  1237                              <2> %endmacro
  1238                              <2> 
  1239                              <2> %macro mov16 4
  1240                              <2> 	mov ax,%3
  1241                              <2> 	mov ds,ax
  1242                              <2> 	mov bx,[%4]
  1243                              <2> 	mov ax,%1
  1244                              <2> 	mov ds,ax
  1245                              <2> 	mov [%2],bx
  1246                              <2> %endmacro
  1247                              <2>  	 	
  1248                              <2> %macro mformat 4
  1249                              <2> 	stkopen 8
  1250                              <2> 	mov word [ bp + 0 ], %1
  1251                              <2> 	mov word [ bp + 2 ], %2
  1252                              <2> 	mov word [ bp + 4 ], %3
  1253                              <2> 	mov word [ bp + 6 ], %4
  1254                              <2> 	call kernel_segment:mformat
  1255                              <2> 	stkclose 8
  1256                              <2> %endmacro
  1257                              <2> 
  1258                              <2> %macro malloc 6
  1259                              <2> 	stkopen 0Bh
  1260                              <2> 	mov word [ bp + 4 ], %3
  1261                              <2> 	mov word [ bp + 6 ], %4
  1262                              <2> 	mov word [ bp + 8 ], %5	
  1263                              <2> 	call kernel_segment:malloc
  1264                              <2> 	push sp
  1265                              <2> 	pop bp
  1266                              <2> 	mov word %1, [ bp ]
  1267                              <2> 	mov word %2, [ bp + 2 ]
  1268                              <2> 	mov byte %6, [ bp + 0x0A ]
  1269                              <2> 	stkclose 0Bh
  1270                              <2> %endmacro 	
  1271                              <2> 
  1272                              <2> %macro laddr 2
  1273                              <2> 	laddr %1, %2, %1, %2
  1274                              <2> %endmacro
  1275                              <2> 
  1276                              <2> %macro faddr 2
  1277                              <2> 	faddr %1, %2, %1, %2
  1278                              <2> %endmacro
  1279                              <2>  	
  1280                              <2> %macro laddr 4
  1281                              <2> 	stkopen 8
  1282                              <2> 	mov word [ bp + 4 ], %3
  1283                              <2> 	mov word [ bp + 6 ], %4	
  1284                              <2> 	call kernel_segment:laddr
  1285                              <2> 	push sp
  1286                              <2> 	pop bp
  1287                              <2> 	mov word %1, [ bp + 0 ]
  1288                              <2> 	mov word %2, [ bp + 2 ]	
  1289                              <2> 	stkclose 8
  1290                              <2> %endmacro
  1291                              <2> 
  1292                              <2> %macro faddr 4
  1293                              <2> 	stkopen 8
  1294                              <2> 	mov word [ bp + 4 ], %3
  1295                              <2> 	mov word [ bp + 6 ], %4	
  1296                              <2> 	call kernel_segment:faddr
  1297                              <2> 	push sp
  1298                              <2> 	pop bp
  1299                              <2> 	mov word %1, [ bp + 0 ]
  1300                              <2> 	mov word %2, [ bp + 2 ]	
  1301                              <2> 	stkclose 8
  1302                              <2> %endmacro	
  1303                              <2>  
  1304                              <2> 
  1305                              <2> %macro stkopen 1		
  1306                              <2> 	sub word sp, %1
  1307                              <2> 	push sp
  1308                              <2> 	pop bp
  1309                              <2> %endmacro
  1310                              <2> 
  1311                              <2> %macro stkclose 1
  1312                              <2> 	add word sp, %1
  1313                              <2> %endmacro
  1314                              <2> 
  1315                              <2> %macro stkload 1-* 	
  1316                              <2>  	%rep %0
  1317                              <2>  	 	%rotate -1
  1318                              <2>  		pop %1
  1319                              <2>  	%endrep
  1320                              <2>  	%rep %0
  1321                              <2>  		push %1
  1322                              <2>  		%rotate 1
  1323                              <2>  	%endrep
  1324                              <2> %endmacro
  1325                              <2> 
  1326                              <2> %macro stkpush 1-* 	
  1327                              <2>  	%rep %0
  1328                              <2>  		push %1
  1329                              <2>  		%rotate 1
  1330                              <2>  	%endrep 	
  1331                              <2> %endmacro
  1332                              <2>  
  1333                              <2> %macro stkpop 1-*
  1334                              <2>  	%rep %0
  1335                              <2>  	 	%rotate -1
  1336                              <2>  		pop %1
  1337                              <2>  	%endrep 	 	
  1338                              <2> %endmacro
  1339                              <2> 
  1340                              <2> %endif 
  1341                              <1> 
  1342                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1343                              <1> %macro printf 1-*	
  1344                              <1> 	%rep %0					
  1345                              <1> 		__printf %1
  1346                              <1> 		%rotate 1		
  1347                              <1> 	%endrep
  1348                              <1> %endmacro	
  1349                              <1> 
  1350                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1351                              <1> %macro __printf 1
  1352                              <1> 	section .data
  1353                              <1> 		%%str: db %1,0
  1354                              <1> 	section .text
  1355                              <1> 		prtstr cs, %%str				
  1356                              <1> %endmacro
  1357                              <1> 
  1358                              <1> %macro prtstr 2
  1359                              <1> 	stkopen 4
  1360                              <1> 	mov word [bp], %1
  1361                              <1> 	mov word [bp+2], %2
  1362                              <1> 	call proc_prtstr
  1363                              <1> 	stkclose 4
  1364                              <1> %endmacro
  1365                              <1> 
  1366                              <1> 
  1367                              <1> %macro prtIEEE754 1
  1368                              <1> 	prtIEEE754 cs, %1
  1369                              <1> %endmacro
  1370                              <1> 
  1371                              <1> %macro prtIEEE754 2
  1372                              <1> 	stkopen 4
  1373                              <1> 	mov ax,%1
  1374                              <1> 	mov ds,ax
  1375                              <1> 	mov ax, [%2+2]
  1376                              <1> 	mov word [bp+0], ax
  1377                              <1> 	mov ax, [%2]
  1378                              <1> 	mov word [bp+2], ax
  1379                              <1> 	call proc_prtIEEE754
  1380                              <1> 	stkclose 4
  1381                              <1> %endmacro
  1382                              <1> 
  1383                              <1> %macro prtbool 1	
  1384                              <1> 	cmp byte %1, TRUE
  1385                              <1> 	je .true
  1386                              <1> 	jmp .false
  1387                              <1> 	.true:
  1388                              <1> 		prtf "true"
  1389                              <1> 		jmp .endcmp
  1390                              <1> 	.false:
  1391                              <1> 		prtf "false"
  1392                              <1> 	.endcmp:	
  1393                              <1> %endmacro
  1394                              <1> 
  1395                              <1> %macro prtptr 2-3 TRUE
  1396                              <1> 	stkopen 3
  1397                              <1> 	mov word [ bp + 0 ], %2
  1398                              <1> 	mov byte [ bp + 2 ], %3
  1399                              <1> 	prthex16 %1, %3
  1400                              <1> 	writechar ':'
  1401                              <1> 	push sp
  1402                              <1> 	pop bp
  1403                              <1> 	mov word ax, [ bp + 0 ]
  1404                              <1> 	mov byte bl, [ bp + 2 ]
  1405                              <1> 	prthex16 ax, bl
  1406                              <1> 	stkclose 3
  1407                              <1> %endmacro
  1408                              <1> 
  1409                              <1> %macro prtfptr 2-3 TRUE
  1410                              <1> 	stkopen 3
  1411                              <1> 	mov word [ bp + 0 ], %1
  1412                              <1> 	mov byte [ bp + 2 ], %3
  1413                              <1> 	prthex16 %2, %3
  1414                              <1> 	push sp
  1415                              <1> 	pop bp
  1416                              <1> 	mov word ax, [ bp + 0 ]
  1417                              <1> 	mov byte bl, [ bp + 2 ]
  1418                              <1> 	prthex16 ax, bl
  1419                              <1> 	stkclose 3
  1420                              <1> %endmacro
  1421                              <1> 
  1422                              <1> %macro prtbin32 1
  1423                              <1> 	prtbin32 cs, %1
  1424                              <1> %endmacro
  1425                              <1> 
  1426                              <1> %macro prtbin32 2
  1427                              <1> 	mov ax,%1
  1428                              <1> 	mov ds,ax
  1429                              <1> 	mov word ax,[%2+2]
  1430                              <1> 	prtbin16 ax
  1431                              <1> 	prtch 20h
  1432                              <1> 	mov ax,%1
  1433                              <1> 	mov ds,ax
  1434                              <1> 	mov word ax,[%2]
  1435                              <1> 	prtbin16 ax
  1436                              <1> %endmacro
  1437                              <1> 
  1438                              <1> %macro prthex32 1
  1439                              <1> 	prthex32 cs, %1
  1440                              <1> %endmacro
  1441                              <1> 
  1442                              <1> %macro iprthex32 1
  1443                              <1> 	iprthex32 cs, %1
  1444                              <1> %endmacro
  1445                              <1> 
  1446                              <1> %macro prthex32 2
  1447                              <1> 	mov ax,%1
  1448                              <1> 	mov ds,ax
  1449                              <1> 	mov word ax,[%2+2]
  1450                              <1> 	prthex16 ax	
  1451                              <1> 	mov ax,%1
  1452                              <1> 	mov ds,ax
  1453                              <1> 	mov word ax,[%2]
  1454                              <1> 	prthex16 ax
  1455                              <1> %endmacro
  1456                              <1> 
  1457                              <1> %macro iprthex32 2
  1458                              <1> 	mov ax,%1
  1459                              <1> 	mov ds,ax
  1460                              <1> 	mov word ax,[%2+2]
  1461                              <1> 	mov word bx,ax
  1462                              <1> 	and ax,0x7FFF
  1463                              <1> 	push ax
  1464                              <1> 	and bx,0x8000
  1465                              <1> 	cmp bx,0
  1466                              <1> 	jz %%prt
  1467                              <1> 		prtch '-'		
  1468                              <1> 	%%prt:	
  1469                              <1> 	pop ax
  1470                              <1> 	prthex16 ax
  1471                              <1> 	mov ax,%1
  1472                              <1> 	mov ds,ax
  1473                              <1> 	mov word ax,[%2]
  1474                              <1> 	prthex16 ax	
  1475                              <1> %endmacro
  1476                              <1> 
  1477                              <1> %macro prtsubbin8 3
  1478                              <1> 	__prtsubbin8 %1,%2,%3
  1479                              <1> %endmacro
  1480                              <1> 
  1481                              <1> %macro prtbin16 1
  1482                              <1> 	stkopen 3
  1483                              <1> 	mov word [bp], %1
  1484                              <1> 	mov byte [bp+2], TRUE
  1485                              <1> 	call proc_prtbin16
  1486                              <1> 	stkclose 3
  1487                              <1> %endmacro
  1488                              <1> 
  1489                              <1> %macro prtbin8 1
  1490                              <1> 	stkopen 2
  1491                              <1> 	mov byte [bp], %1
  1492                              <1> 	mov byte [bp+1], TRUE
  1493                              <1> 	call proc_prtbin8
  1494                              <1> 	stkclose 2
  1495                              <1> %endmacro
  1496                              <1> 
  1497                              <1> %macro prthex16 1
  1498                              <1> 	stkopen 3
  1499                              <1> 	mov word [bp], %1
  1500                              <1> 	mov byte [bp+2], TRUE
  1501                              <1> 	call proc_prthex16
  1502                              <1> 	stkclose 3
  1503                              <1> %endmacro
  1504                              <1> 
  1505                              <1> %macro prthex8 1
  1506                              <1> 	stkopen 2
  1507                              <1> 	mov byte [bp], %1
  1508                              <1> 	mov byte [bp+1], TRUE
  1509                              <1> 	call proc_prthex8
  1510                              <1> 	stkclose 2
  1511                              <1> %endmacro
  1512                              <1> 
  1513                              <1> %macro prtch 1
  1514                              <1> 	__prtch %1
  1515                              <1> %endmacro
  1516                              <1> 
  1517                              <1> %macro prtln 0
  1518                              <1> 	__prtln
  1519                              <1> %endmacro	
  1520                              <1> 
  1521                              <1> 
  1522                              <1> %macro prtstk 0
  1523                              <1> 	printf "stack ---> "
  1524                              <1> 	mov ax,sp
  1525                              <1> 	prthex16 ax
  1526                              <1> %endmacro  
  1527                              <1> 
  1528                              <1> %endif
  1529                                  %include "lib/math.mac"
  1530                              <1> 
  1531                              <1> %ifndef MATH_MAC
  1532                              <1> 	%define MATH_MAC
  1533                              <1> 	
  1534                              <1> 	%include "lib/math.asm"
  1535                              <2> 
  1536                              <2> %ifndef MATH_ASM
  1537                              <2> 	%define MATH_ASM
  1538                              <2> 
  1539                              <2> %macro __int16to32 3
  1540                              <2> 	stkopen 0x06
  1541                              <2> 	mov word [bp+0],%1
  1542                              <2> 	call proc_int16to32
  1543                              <2> 	push sp
  1544                              <2> 	pop bp
  1545                              <2> 	mov word %2, [bp+2]
  1546                              <2> 	mov word %3, [bp+4]
  1547                              <2> 	stkclose 0x06
  1548                              <2> %endmacro
  1549                              <2> 
  1550                              <2> %macro __int32to16 3
  1551                              <2> 	stkopen 0x06
  1552                              <2> 	mov word [bp+0], %1
  1553                              <2> 	mov word [bp+2], %2
  1554                              <2> 	call proc_int32to16
  1555                              <2> 	push sp
  1556                              <2> 	pop bp
  1557                              <2> 	mov word %3, [bp+4]
  1558                              <2> 	stkclose 0x06
  1559                              <2> %endmacro
  1560                              <2> 
  1561                              <2> %macro __add32 6
  1562                              <2> 	stkopen 0x0C
  1563                              <2> 	mov word [bp+0], %1
  1564                              <2> 	mov word [bp+2], %2
  1565                              <2> 	mov word [bp+4], %3
  1566                              <2> 	mov word [bp+6], %4	
  1567                              <2> 	call proc_add32
  1568                              <2> 	push sp
  1569                              <2> 	pop bp
  1570                              <2> 	mov word %5, [bp+8]
  1571                              <2> 	mov word %6, [bp+0x0A]
  1572                              <2> 	stkclose 0x0C
  1573                              <2> %endmacro
  1574                              <2> 
  1575                              <2> %macro __sub32 6
  1576                              <2> 	stkopen 0x0C
  1577                              <2> 	mov word [bp+0], %1
  1578                              <2> 	mov word [bp+2], %2
  1579                              <2> 	mov word [bp+4], %3
  1580                              <2> 	mov word [bp+6], %4	
  1581                              <2> 	call proc_sub32
  1582                              <2> 	push sp
  1583                              <2> 	pop bp
  1584                              <2> 	mov word %5, [bp+8]
  1585                              <2> 	mov word %6, [bp+0x0A]
  1586                              <2> 	stkclose 0x0C
  1587                              <2> %endmacro
  1588                              <2> 
  1589                              <2> %macro __mul32 6
  1590                              <2> 	stkopen 0x0C
  1591                              <2> 	mov word [bp+0], %1
  1592                              <2> 	mov word [bp+2], %2
  1593                              <2> 	mov word [bp+4], %3
  1594                              <2> 	mov word [bp+6], %4	
  1595                              <2> 	call proc_mul32
  1596                              <2> 	push sp
  1597                              <2> 	pop bp
  1598                              <2> 	mov word %5, [bp+8]
  1599                              <2> 	mov word %6, [bp+0x0A]
  1600                              <2> 	stkclose 0x0C
  1601                              <2> %endmacro
  1602                              <2> 
  1603                              <2> %macro __div32 9
  1604                              <2> 	stkopen 0x11
  1605                              <2> 	mov word [bp+0], %1
  1606                              <2> 	mov word [bp+2], %2
  1607                              <2> 	mov word [bp+4], %3
  1608                              <2> 	mov word [bp+6], %4
  1609                              <2> 	mov word [bp+8], %5
  1610                              <2> 	mov word [bp+0x0A], %6	
  1611                              <2> 	call proc_div32
  1612                              <2> 	push sp
  1613                              <2> 	pop bp
  1614                              <2> 	mov word %7, [bp+0x0C]
  1615                              <2> 	mov word %8, [bp+0x0E]
  1616                              <2> 	mov byte %9, [bp+0x10]
  1617                              <2> 	stkclose 0x11
  1618                              <2> %endmacro
  1619                              <2> 
  1620                              <2> %macro __cmp32 5
  1621                              <2> 	stkopen 9
  1622                              <2> 	mov word [bp+0], %1
  1623                              <2> 	mov word [bp+2], %2
  1624                              <2> 	mov word [bp+4], %3
  1625                              <2> 	mov word [bp+6], %4
  1626                              <2> 	call proc_cmp32
  1627                              <2> 	push sp
  1628                              <2> 	pop bp
  1629                              <2> 	mov byte %5, [bp+8]
  1630                              <2> 	stkclose 9	
  1631                              <2> %endmacro
  1632                              <2> 
  1633                              <2> %macro __shl32 3
  1634                              <2> 	stkopen 5
  1635                              <2> 	mov word [bp+0], %1
  1636                              <2> 	mov word [bp+2], %2
  1637                              <2> 	mov byte [bp+4], %3
  1638                              <2> 	call proc_shl32
  1639                              <2> 	push sp
  1640                              <2> 	pop bp
  1641                              <2> 	mov word %1, [bp+0]
  1642                              <2> 	mov word %2, [bp+2]
  1643                              <2> 	stkclose 5
  1644                              <2> %endmacro
  1645                              <2> 
  1646                              <2> %macro __shr32 3
  1647                              <2> 	stkopen 5
  1648                              <2> 	mov word [bp+0], %1
  1649                              <2> 	mov word [bp+2], %2
  1650                              <2> 	mov byte [bp+4], %3
  1651                              <2> 	call proc_shr32
  1652                              <2> 	push sp
  1653                              <2> 	pop bp
  1654                              <2> 	mov word %1, [bp+0]
  1655                              <2> 	mov word %2, [bp+2]
  1656                              <2> 	stkclose 5
  1657                              <2> %endmacro
  1658                              <2> 
  1659                              <2> %macro __lzcount32 3	
  1660                              <2> 	push %2		
  1661                              <2> 	__lzcount16 %1, cl	
  1662                              <2> 	pop ax
  1663                              <2> 	cmp cl,4
  1664                              <2> 	jb .end
  1665                              <2> 		push cx		
  1666                              <2> 		__lzcount16 ax, al		
  1667                              <2> 		pop cx
  1668                              <2> 		add cl,al
  1669                              <2> 	.end:	
  1670                              <2> 	mov byte %3, cl 
  1671                              <2> %endmacro
  1672                              <2> 
  1673                              <2> %macro __lzcount16 2
  1674                              <2> 	stkopen 3
  1675                              <2> 	mov word [bp+0], %1
  1676                              <2> 	call proc__lzcount16
  1677                              <2> 	push sp
  1678                              <2> 	pop bp
  1679                              <2> 	mov byte %2, [bp+2]	
  1680                              <2> 	stkclose 3
  1681                              <2> %endmacro
  1682                              <2> 
  1683                              <2> %macro __lzbitcount32 3	
  1684                              <2> 	push %2		
  1685                              <2> 	__lzbitcount16 %1, cl
  1686                              <2> 	pop ax
  1687                              <2> 	cmp cl,16
  1688                              <2> 	jb .end
  1689                              <2> 		push cx		
  1690                              <2> 		__lzbitcount16 ax, al		
  1691                              <2> 		pop cx
  1692                              <2> 		add cl,al
  1693                              <2> 	.end:	
  1694                              <2> 	mov byte %3, cl 
  1695                              <2> %endmacro
  1696                              <2> 		
  1697                              <2> %macro __lzbitcount16 2
  1698                              <2> 	stkopen 3
  1699                              <2> 	mov word [bp+0], %1
  1700                              <2> 	call proc__lzbitcount16
  1701                              <2> 	push sp
  1702                              <2> 	pop bp
  1703                              <2> 	mov byte %2, [bp+2]	
  1704                              <2> 	stkclose 3
  1705                              <2> %endmacro	
  1706                              <2> 
  1707                              <2> %macro __calc_dividendo1 7
  1708                              <2> 	stkopen 0x0D
  1709                              <2> 	mov word [bp+0], %1
  1710                              <2> 	mov word [bp+2], %2
  1711                              <2> 	mov word [bp+4], %3
  1712                              <2> 	mov word [bp+6], %4
  1713                              <2> 	call proc_calc_dividendo1
  1714                              <2> 	push sp
  1715                              <2> 	pop bp
  1716                              <2> 	mov word %5, [bp+0x08]
  1717                              <2> 	mov word %6, [bp+0x0A]
  1718                              <2> 	mov byte %7, [bp+0x0C]
  1719                              <2> 	stkclose 0x0D
  1720                              <2> %endmacro
  1721                              <2> 
  1722                              <2> %macro __calc__prox_dividendo 5
  1723                              <2> 	stkopen 9
  1724                              <2> 	mov word [bp+0], %1
  1725                              <2> 	mov word [bp+2], %2
  1726                              <2> 	mov word [bp+4], %3
  1727                              <2> 	mov word [bp+6], %4
  1728                              <2> 	mov word [bp+8], %5
  1729                              <2> 	call proc_calc_prox_dividendo
  1730                              <2> 	push sp
  1731                              <2> 	pop bp
  1732                              <2> 	mov word %3, [bp+4]
  1733                              <2> 	mov word %4, [bp+6]
  1734                              <2> 	mov byte %5, [bp+8]
  1735                              <2> 	stkclose 9
  1736                              <2> %endmacro
  1737                              <2> 				
  1738                              <2> section .data
  1739                              <2> 
  1740                              <2> proc_int16to32:
  1741 0000046B 89E0                <2> 	mov ax,sp
  1742 0000046D 89C5                <2> 	mov bp,ax
  1743                              <2> 	
  1744 0000046F 8B4602              <2> 	mov ax,[bp+2]			
  1745 00000472 89C3                <2> 	mov bx,ax
  1746 00000474 250080              <2> 	and ax,0x8000
  1747 00000477 83F800              <2> 	cmp ax,0
  1748 0000047A 7402                <2> 	jz .zero
  1749 0000047C EB08                <2> 	jmp .one
  1750                              <2> 	.zero:
  1751 0000047E 81E3FF7F            <2> 		and bx,0x7FFF
  1752 00000482 89DA                <2> 		mov dx,bx			
  1753 00000484 EB06                <2> 		jmp .endcmp
  1754                              <2> 	.one:				
  1755 00000486 BAFFFF              <2> 		mov dx,0xFFFF
  1756 00000489 29DA                <2> 		sub dx,bx
  1757 0000048B 42                  <2> 		inc dx
  1758                              <2> 	.endcmp:
  1759 0000048C 894604              <2> 	mov [bp+4],ax
  1760 0000048F 895606              <2> 	mov [bp+6],dx
  1761                              <2> 	
  1762 00000492 C3                  <2> 	ret
  1763                              <2> 	
  1764                              <2> proc_int32to16:
  1765 00000493 89E0                <2> 	mov ax,sp
  1766 00000495 89C5                <2> 	mov bp,ax
  1767                              <2> 	
  1768 00000497 8B4602              <2> 	mov ax,[bp+2]
  1769 0000049A 8B5E04              <2> 	mov bx,[bp+4]		
  1770 0000049D 250080              <2> 	and ax,0x8000
  1771 000004A0 81E3FF7F            <2> 	and bx,0x7FFF	
  1772 000004A4 83F800              <2> 	cmp ax,0
  1773 000004A7 7402                <2> 	jz .zero
  1774 000004A9 EB04                <2> 	jmp .one
  1775                              <2> 	.zero:		
  1776 000004AB 01D8                <2> 		add ax,bx
  1777 000004AD EB05                <2> 		jmp .endcmp
  1778                              <2> 	.one:		
  1779 000004AF B8FFFF              <2> 		mov ax,0xFFFF
  1780 000004B2 29D8                <2> 		sub ax,bx
  1781                              <2> 	.endcmp:	
  1782 000004B4 894606              <2> 	mov word [bp+6], ax	
  1783                              <2> 	
  1784 000004B7 C3                  <2> 	ret
  1785                              <2> 
  1786                              <2> proc_setsig:
  1787 000004B8 89E0                <2> 	mov ax,sp
  1788 000004BA 89C5                <2> 	mov bp,ax
  1789                              <2> 	
  1790 000004BC 816602FF7F          <2> 	and word [bp+2],0x7FFF
  1791 000004C1 8146020080          <2> 	add word [bp+2],0x8000	
  1792                              <2> 	
  1793 000004C6 C3                  <2> 	ret
  1794                              <2> 	
  1795                              <2> proc_clrsig:
  1796 000004C7 89E0                <2> 	mov ax,sp
  1797 000004C9 89C5                <2> 	mov bp,ax
  1798                              <2> 	
  1799 000004CB 816602FF7F          <2> 	and word [bp+2],0x7FFF
  1800                              <2> 
  1801 000004D0 C3                  <2> 	ret
  1802                              <2> 
  1803                              <2> proc_idiv32:
  1804                              <2> 	stkopen 0x11
  1805 000004D1 83EC11              <3>  sub word sp, %1
  1806 000004D4 54                  <3>  push sp
  1807 000004D5 5D                  <3>  pop bp
  1808 000004D6 8B4613              <2> 	mov ax,[bp+0x13]
  1809 000004D9 25FF7F              <2> 	and ax,0x7FFF
  1810 000004DC 894600              <2> 	mov [bp+0],ax
  1811 000004DF 8B4615              <2> 	mov ax,[bp+0x15]
  1812 000004E2 894602              <2> 	mov [bp+2],ax
  1813 000004E5 8B4617              <2> 	mov ax,[bp+0x17]
  1814 000004E8 25FF7F              <2> 	and ax,0x7FFF
  1815 000004EB 894604              <2> 	mov [bp+4],ax
  1816 000004EE 8B4619              <2> 	mov ax,[bp+0x19]
  1817 000004F1 894606              <2> 	mov [bp+6],ax 
  1818 000004F4 E8B300              <2> 	call proc_div32
  1819 000004F7 89E0                <2> 	mov ax,sp
  1820 000004F9 89C5                <2> 	mov bp,ax
  1821 000004FB 8B4608              <2> 	mov ax,[bp+8]
  1822 000004FE 89461B              <2> 	mov [bp+0x1B], ax
  1823 00000501 8B460A              <2> 	mov ax,[bp+0x0A]
  1824 00000504 89461D              <2> 	mov [bp+0x1D], ax
  1825 00000507 8B460C              <2> 	mov ax,[bp+0x0C]
  1826 0000050A 89461F              <2> 	mov [bp+0x1F], ax
  1827 0000050D 8B460E              <2> 	mov ax,[bp+0x0E]
  1828 00000510 894621              <2> 	mov [bp+0x21], ax
  1829 00000513 8A4610              <2> 	mov al,[bp+0x10]
  1830 00000516 884623              <2> 	mov byte [bp+0x23], al
  1831                              <2> 	stkclose 0x11
  1832 00000519 83C411              <3>  add word sp, %1
  1833                              <2> 	
  1834 0000051C 54                  <2> 	push sp
  1835 0000051D 5D                  <2> 	pop bp
  1836                              <2> 		
  1837 0000051E 8B4E02              <2> 	mov cx,[bp+2]
  1838 00000521 8B5606              <2> 	mov dx,[bp+6]
  1839 00000524 81E10080            <2> 	and cx,0x8000
  1840 00000528 81E20080            <2> 	and dx,0x8000
  1841 0000052C 31D1                <2> 	xor cx,dx
  1842                              <2> 	
  1843 0000052E 837E0A00            <2> 	cmp word [bp+0x0A],0
  1844 00000532 7506                <2> 	jnz .signal1
  1845 00000534 837E0C00            <2> 	cmp word [bp+0x0C],0
  1846 00000538 7403                <2> 	jz .endsignal1
  1847                              <2> 	.signal1:
  1848 0000053A 014E0A              <2> 		add word [bp+0x0A],cx
  1849                              <2> 	.endsignal1:
  1850                              <2> 	
  1851 0000053D 837E0E00            <2> 	cmp word [bp+0x0E],0
  1852 00000541 7506                <2> 	jnz .signal2
  1853 00000543 837E1000            <2> 	cmp word [bp+0x10],0
  1854 00000547 7403                <2> 	jz .endsignal2
  1855                              <2> 	.signal2:
  1856 00000549 014E0E              <2> 		add word [bp+0x0E],cx	
  1857                              <2> 	.endsignal2:
  1858                              <2> 		
  1859 0000054C C3                  <2> 	ret	
  1860                              <2> 
  1861                              <2> proc_imul32:		
  1862                              <2> 	stkopen 0x0C
  1863 0000054D 83EC0C              <3>  sub word sp, %1
  1864 00000550 54                  <3>  push sp
  1865 00000551 5D                  <3>  pop bp
  1866 00000552 8B460E              <2> 	mov ax,[bp+0x0E]
  1867 00000555 25FF7F              <2> 	and ax,0x7FFF
  1868 00000558 894600              <2> 	mov [bp+0],ax
  1869 0000055B 8B4610              <2> 	mov ax,[bp+0x10]
  1870 0000055E 894602              <2> 	mov [bp+2],ax
  1871 00000561 8B4612              <2> 	mov ax,[bp+0x12]
  1872 00000564 25FF7F              <2> 	and ax,0x7FFF
  1873 00000567 894604              <2> 	mov [bp+4],ax
  1874 0000056A 8B4614              <2> 	mov ax,[bp+0x14]
  1875 0000056D 894606              <2> 	mov [bp+6],ax 
  1876 00000570 E8B901              <2> 	call proc_mul32
  1877 00000573 89E0                <2> 	mov ax,sp
  1878 00000575 89C5                <2> 	mov bp,ax
  1879 00000577 8B4608              <2> 	mov ax,[bp+8]
  1880 0000057A 8B5E0A              <2> 	mov bx,[bp+0x0A]
  1881                              <2> 	stkclose 0x0C
  1882 0000057D 83C40C              <3>  add word sp, %1
  1883                              <2> 	
  1884 00000580 89E1                <2> 	mov cx,sp
  1885 00000582 89CD                <2> 	mov bp,cx		
  1886                              <2> 		
  1887 00000584 89460A              <2> 	mov [bp+0x0A],ax
  1888 00000587 895E0C              <2> 	mov [bp+0x0C],bx
  1889                              <2> 	
  1890 0000058A 837E0A00            <2> 	cmp word [bp+0x0A],0
  1891 0000058E 7506                <2> 	jnz .signal1
  1892 00000590 837E0C00            <2> 	cmp word [bp+0x0C],0
  1893 00000594 7413                <2> 	jz .endsignal1
  1894                              <2> 	.signal1:
  1895 00000596 8B4E02              <2> 		mov cx,[bp+2]
  1896 00000599 8B5606              <2> 		mov dx,[bp+6]
  1897 0000059C 81E10080            <2> 		and cx,0x8000
  1898 000005A0 81E20080            <2> 		and dx,0x8000
  1899 000005A4 31D1                <2> 		xor cx,dx
  1900 000005A6 014E0A              <2> 		add word [bp+0x0A],cx
  1901                              <2> 	.endsignal1:
  1902                              <2> 	
  1903 000005A9 C3                  <2> 	ret
  1904                              <2> 
  1905                              <2> proc_div32:
  1906 000005AA 89E0                <2> 	mov ax,sp
  1907 000005AC 89C5                <2> 	mov bp,ax
  1908                              <2> 	
  1909 000005AE 8B4606              <2> 	mov ax,[bp+6]
  1910 000005B1 034608              <2> 	add ax,[bp+8]
  1911 000005B4 83F800              <2> 	cmp ax,0
  1912 000005B7 0F846C01            <2> 	jz .divbyzero
  1913                              <2> 	
  1914 000005BB 837E0200            <2> 	cmp word [bp+2], 0
  1915 000005BF 7521                <2> 	jnz .div2
  1916 000005C1 837E0600            <2> 	cmp word [bp+6], 0
  1917 000005C5 751B                <2> 	jnz .div2
  1918 000005C7 31D2                <2> 		xor dx,dx
  1919 000005C9 8B4604              <2> 		mov ax, [bp+4]
  1920 000005CC F77608              <2> 		div word [bp+8]
  1921 000005CF C7460A0000          <2> 		mov word [bp+0x0A], 0
  1922 000005D4 89460C              <2> 		mov word [bp+0x0C], ax
  1923 000005D7 C7460E0000          <2> 		mov word [bp+0x0E], 0
  1924 000005DC 895610              <2> 		mov word [bp+0x10], dx
  1925 000005DF E93F01              <2> 		jmp .enddiv
  1926                              <2> 	.div2:
  1927 000005E2 8B4602              <2> 		mov ax,[bp+2]
  1928 000005E5 3B4606              <2> 		cmp ax,[bp+6]
  1929 000005E8 0F821F01            <2> 		jb .qzero
  1930 000005EC 770A                <2> 		ja .div
  1931 000005EE 8B4604              <2> 		mov ax,[bp+4]
  1932 000005F1 3B4608              <2> 		cmp ax,[bp+8]
  1933 000005F4 0F821301            <2> 		jb .qzero
  1934                              <2> 		
  1935                              <2> 		.div:
  1936                              <2> 		
  1937 000005F8 C7460A0000          <2> 		mov word [bp+0x0A], 0
  1938 000005FD C7460C0000          <2> 		mov word [bp+0x0C], 0		
  1939 00000602 C7460E0000          <2> 		mov word [bp+0x0E], 0
  1940 00000607 C746100000          <2> 		mov word [bp+0x10], 0
  1941                              <2> 		
  1942 0000060C 8B4602              <2> 		mov ax,[bp+2]
  1943 0000060F 8B5E04              <2> 		mov bx,[bp+4]
  1944 00000612 8B4E06              <2> 		mov cx,[bp+6]
  1945 00000615 8B5608              <2> 		mov dx,[bp+8]		
  1946                              <2> 		__calc_dividendo1 ax, bx, cx, dx, ax, bx, cl
  1947                              <3>  stkopen 0x0D
  1948 00000618 83EC0D              <4>  sub word sp, %1
  1949 0000061B 54                  <4>  push sp
  1950 0000061C 5D                  <4>  pop bp
  1951 0000061D 894600              <3>  mov word [bp+0], %1
  1952 00000620 895E02              <3>  mov word [bp+2], %2
  1953 00000623 894E04              <3>  mov word [bp+4], %3
  1954 00000626 895606              <3>  mov word [bp+6], %4
  1955 00000629 E89A02              <3>  call proc_calc_dividendo1
  1956 0000062C 54                  <3>  push sp
  1957 0000062D 5D                  <3>  pop bp
  1958 0000062E 8B4608              <3>  mov word %5, [bp+0x08]
  1959 00000631 8B5E0A              <3>  mov word %6, [bp+0x0A]
  1960 00000634 8A4E0C              <3>  mov byte %7, [bp+0x0C]
  1961                              <3>  stkclose 0x0D
  1962 00000637 83C40D              <4>  add word sp, %1
  1963                              <2> 
  1964 0000063A 89E2                <2> 		mov dx,sp
  1965 0000063C 89D5                <2> 		mov bp,dx
  1966 0000063E 89460E              <2> 		mov word [bp+0x0E], ax
  1967 00000641 895E10              <2> 		mov word [bp+0x10], bx
  1968                              <2> 		
  1969 00000644 51                  <2> 		push cx
  1970                              <2> 		.l1:							
  1971 00000645 89E2                <2> 			mov dx,sp
  1972 00000647 89D5                <2> 			mov bp,dx		
  1973 00000649 83C502              <2> 			add bp,2
  1974 0000064C 8B460E              <2> 			mov ax, [bp+0x0E]
  1975 0000064F 8B5E10              <2> 			mov bx, [bp+0x10]
  1976 00000652 8B4E06              <2> 			mov cx, [bp+6]
  1977 00000655 8B5608              <2> 			mov dx, [bp+8]
  1978                              <2> 			__cmp32 ax, bx, cx, dx, cl
  1979                              <3>  stkopen 9
  1980 00000658 83EC09              <4>  sub word sp, %1
  1981 0000065B 54                  <4>  push sp
  1982 0000065C 5D                  <4>  pop bp
  1983 0000065D 894600              <3>  mov word [bp+0], %1
  1984 00000660 895E02              <3>  mov word [bp+2], %2
  1985 00000663 894E04              <3>  mov word [bp+4], %3
  1986 00000666 895606              <3>  mov word [bp+6], %4
  1987 00000669 E81F01              <3>  call proc_cmp32
  1988 0000066C 54                  <3>  push sp
  1989 0000066D 5D                  <3>  pop bp
  1990 0000066E 8A4E08              <3>  mov byte %5, [bp+8]
  1991                              <3>  stkclose 9
  1992 00000671 83C409              <4>  add word sp, %1
  1993                              <2> 			
  1994 00000674 51                  <2> 			push cx
  1995 00000675 89E2                <2> 			mov dx,sp
  1996 00000677 89D5                <2> 			mov bp,dx
  1997 00000679 83C504              <2> 			add bp,4
  1998 0000067C 8B460A              <2> 			mov ax,[bp+0x0A]
  1999 0000067F 8B5E0C              <2> 			mov bx,[bp+0x0C]
  2000 00000682 55                  <2> 			push bp
  2001                              <2> 			__shl32 ax, bx, 1
  2002                              <3>  stkopen 5
  2003 00000683 83EC05              <4>  sub word sp, %1
  2004 00000686 54                  <4>  push sp
  2005 00000687 5D                  <4>  pop bp
  2006 00000688 894600              <3>  mov word [bp+0], %1
  2007 0000068B 895E02              <3>  mov word [bp+2], %2
  2008 0000068E C6460401            <3>  mov byte [bp+4], %3
  2009 00000692 E82101              <3>  call proc_shl32
  2010 00000695 54                  <3>  push sp
  2011 00000696 5D                  <3>  pop bp
  2012 00000697 8B4600              <3>  mov word %1, [bp+0]
  2013 0000069A 8B5E02              <3>  mov word %2, [bp+2]
  2014                              <3>  stkclose 5
  2015 0000069D 83C405              <4>  add word sp, %1
  2016 000006A0 5D                  <2> 			pop bp				
  2017 000006A1 59                  <2> 			pop cx	
  2018                              <2> 									
  2019 000006A2 80F900              <2> 			cmp cl,0
  2020 000006A5 7C12                <2> 			jl .l11
  2021 000006A7 83C301              <2> 				add bx,1
  2022 000006AA 83D000              <2> 				adc ax,0	
  2023                              <2> 				
  2024 000006AD 8B4E06              <2> 				mov cx,[bp+6]
  2025 000006B0 8B5608              <2> 				mov dx,[bp+8]
  2026 000006B3 295610              <2> 				sub [bp+0x10],dx
  2027 000006B6 194E0E              <2> 				sbb [bp+0x0E],cx							
  2028                              <2> 			.l11:							
  2029 000006B9 89460A              <2> 			mov word [bp+0x0A], ax
  2030 000006BC 895E0C              <2> 			mov word [bp+0x0C], bx					
  2031                              <2> 					
  2032 000006BF 59                  <2> 			pop cx
  2033 000006C0 51                  <2> 			push cx												
  2034                              <2> 			
  2035 000006C1 80F920              <2> 			cmp cl,32
  2036 000006C4 7342                <2> 			jae .l2
  2037                              <2> 						
  2038 000006C6 59                  <2> 			pop cx
  2039                              <2> 			stkopen 9
  2040 000006C7 83EC09              <3>  sub word sp, %1
  2041 000006CA 54                  <3>  push sp
  2042 000006CB 5D                  <3>  pop bp
  2043 000006CC 8B460B              <2> 			mov ax,[bp+0x0B]
  2044 000006CF 894600              <2> 			mov word [bp+0], ax
  2045 000006D2 8B460D              <2> 			mov ax,[bp+0x0D]
  2046 000006D5 894602              <2> 			mov word [bp+2], ax
  2047 000006D8 8B4617              <2> 			mov ax,[bp+0x17]
  2048 000006DB 894604              <2> 			mov word [bp+4], ax
  2049 000006DE 8B4619              <2> 			mov ax,[bp+0x19]
  2050 000006E1 894606              <2> 			mov word [bp+6], ax
  2051 000006E4 884E08              <2> 			mov byte [bp+8], cl
  2052 000006E7 E8AD02              <2> 			call proc_calc_prox_dividendo
  2053 000006EA 89E0                <2> 			mov ax,sp
  2054 000006EC 89C5                <2> 			mov bp,ax
  2055 000006EE 8B4604              <2> 			mov word ax,[bp+4]
  2056 000006F1 8B5E06              <2> 			mov word bx,[bp+6]
  2057 000006F4 8A4E08              <2> 			mov byte cl,[bp+8] 
  2058                              <2> 			stkclose 9
  2059 000006F7 83C409              <3>  add word sp, %1
  2060 000006FA 89E2                <2> 			mov dx,sp
  2061 000006FC 89D5                <2> 			mov bp,dx
  2062 000006FE 89460E              <2> 			mov [bp+0x0E],ax
  2063 00000701 895E10              <2> 			mov [bp+0x10],bx
  2064 00000704 51                  <2> 			push cx
  2065 00000705 E93DFF              <2> 			jmp .l1
  2066                              <2> 		.l2:	
  2067 00000708 59                  <2> 		pop cx
  2068                              <2> 			
  2069 00000709 EB16                <2> 		jmp .enddiv
  2070                              <2> 	.qzero:
  2071 0000070B C7460A0000          <2> 		mov word [bp+0x0A], 0
  2072 00000710 C7460C0000          <2> 		mov word [bp+0x0C], 0
  2073 00000715 8B4602              <2> 		mov ax,[bp+2]
  2074 00000718 89460E              <2> 		mov word [bp+0x0E], ax
  2075 0000071B 8B4604              <2> 		mov ax,[bp+4]
  2076 0000071E 894610              <2> 		mov word [bp+0x10], ax	
  2077                              <2> 	.enddiv:
  2078 00000721 C6461200            <2> 		mov byte [bp+0x12], 0
  2079 00000725 EB04                <2> 		jmp .end
  2080                              <2> 	.divbyzero:
  2081 00000727 C6461201            <2> 		mov byte [bp+0x12], 1						
  2082                              <2> 	.end:		
  2083                              <2> 			
  2084 0000072B C3                  <2> 	ret
  2085                              <2> 		
  2086                              <2> proc_mul32:
  2087 0000072C 89E0                <2> 	mov ax,sp
  2088 0000072E 89C5                <2> 	mov bp,ax
  2089                              <2> 	
  2090 00000730 31D2                <2> 	xor dx,dx
  2091 00000732 8B4604              <2> 	mov ax,[bp+4]
  2092 00000735 F76608              <2> 	mul word [bp+8]
  2093                              <2> 	
  2094 00000738 89560A              <2> 	mov word [bp+0x0A], dx
  2095 0000073B 89460C              <2> 	mov word [bp+0x0C], ax	
  2096                              <2> 	
  2097 0000073E 31D2                <2> 	xor dx,dx
  2098 00000740 8B4604              <2> 	mov ax,[bp+4]
  2099 00000743 F76606              <2> 	mul word [bp+6]
  2100                              <2> 		
  2101 00000746 01460A              <2> 	add word [bp+0x0A],ax
  2102                              <2> 	
  2103 00000749 31D2                <2> 	xor dx,dx
  2104 0000074B 8B4602              <2> 	mov ax,[bp+2]
  2105 0000074E F76608              <2> 	mul word [bp+8]
  2106                              <2> 	
  2107 00000751 01460A              <2> 	add word [bp+0x0A],ax
  2108                              <2> 	
  2109 00000754 C3                  <2> 	ret
  2110                              <2> 
  2111                              <2> proc_add32:
  2112 00000755 89E0                <2> 	mov ax,sp
  2113 00000757 89C5                <2> 	mov bp,ax
  2114                              <2> 	
  2115 00000759 8B4602              <2> 	mov ax,[bp+2]
  2116 0000075C 8B5E04              <2> 	mov bx,[bp+4]
  2117 0000075F 8B4E06              <2> 	mov cx,[bp+6]
  2118 00000762 8B5608              <2> 	mov dx,[bp+8]
  2119                              <2> 	
  2120 00000765 01D3                <2> 	add bx,dx
  2121 00000767 11C8                <2> 	adc ax,cx
  2122                              <2> 	
  2123 00000769 89460A              <2> 	mov [bp+0x0A],ax
  2124 0000076C 895E0C              <2> 	mov [bp+0x0C],bx	
  2125                              <2> 	
  2126 0000076F C3                  <2> 	ret
  2127                              <2> 	
  2128                              <2> proc_sub32:
  2129 00000770 89E0                <2> 	mov ax,sp
  2130 00000772 89C5                <2> 	mov bp,ax
  2131                              <2> 	
  2132 00000774 8B4602              <2> 	mov ax,[bp+2]
  2133 00000777 8B5E04              <2> 	mov bx,[bp+4]
  2134 0000077A 8B4E06              <2> 	mov cx,[bp+6]
  2135 0000077D 8B5608              <2> 	mov dx,[bp+8]
  2136                              <2> 	
  2137 00000780 29D3                <2> 	sub bx,dx
  2138 00000782 19C8                <2> 	sbb ax,cx
  2139                              <2> 	
  2140 00000784 89460A              <2> 	mov [bp+0x0A],ax
  2141 00000787 895E0C              <2> 	mov [bp+0x0C],bx	
  2142                              <2> 	
  2143 0000078A C3                  <2> 	ret
  2144                              <2> 		
  2145                              <2> proc_cmp32:
  2146 0000078B 89E0                <2> 	mov ax,sp
  2147 0000078D 89C5                <2> 	mov bp,ax		
  2148                              <2> 		
  2149 0000078F 8B4602              <2> 	mov ax,[bp+2]
  2150 00000792 3B4606              <2> 	cmp word ax,[bp+6]
  2151 00000795 7F04                <2> 	jg .above
  2152 00000797 7C08                <2> 	jl .below
  2153 00000799 740C                <2> 	je .equal
  2154                              <2> 	.above:
  2155 0000079B C6460A01            <2> 		mov byte [bp+0x0A], 00000001b
  2156 0000079F EB14                <2> 		jmp .endcmp
  2157                              <2> 	.below:
  2158 000007A1 C6460A81            <2> 		mov byte [bp+0x0A], 10000001b
  2159 000007A5 EB0E                <2> 		jmp .endcmp
  2160                              <2> 	.equal:
  2161 000007A7 8B4604              <2> 		mov ax,[bp+4]
  2162 000007AA 3B4608              <2> 		cmp word ax,[bp+8]
  2163 000007AD 7FEC                <2> 		jg .above
  2164 000007AF 7CF0                <2> 		jl .below
  2165 000007B1 C6460A00            <2> 		mov byte [bp+0x0A], 00000000b
  2166                              <2> 	.endcmp:		
  2167 000007B5 C3                  <2> 	ret
  2168                              <2> 
  2169                              <2> proc_shl32:
  2170 000007B6 89E0                <2> 	mov ax,sp
  2171 000007B8 89C5                <2> 	mov bp,ax
  2172                              <2> 	
  2173 000007BA 31C0                <2> 	xor ax,ax
  2174 000007BC 8A4606              <2> 	mov byte al,[bp+6]
  2175 000007BF B310                <2> 	mov bl,10h
  2176 000007C1 F6F3                <2> 	div bl
  2177                              <2> 					
  2178 000007C3 3C01                <2> 	cmp al,1
  2179 000007C5 7204                <2> 	jb .zero
  2180 000007C7 7418                <2> 	je .one	
  2181 000007C9 EB27                <2> 	jmp .above
  2182                              <2> 	.zero:	
  2183 000007CB B110                <2> 		mov cl,10h
  2184 000007CD 28E1                <2> 		sub cl,ah
  2185 000007CF 8B5E04              <2> 		mov bx,[bp+4]		
  2186 000007D2 D3EB                <2> 		shr bx,cl
  2187                              <2> 		
  2188 000007D4 88E1                <2> 		mov cl,ah		
  2189 000007D6 D36602              <2> 		shl word [bp+2],cl
  2190 000007D9 015E02              <2> 		add word [bp+2],bx				
  2191 000007DC D36604              <2> 		shl word [bp+4],cl
  2192 000007DF EB1B                <2> 		jmp .endzo
  2193                              <2> 	.one:
  2194 000007E1 88E1                <2> 		mov cl,ah
  2195 000007E3 8B5E04              <2> 		mov bx, [bp+4]				
  2196 000007E6 D3E3                <2> 		shl bx, cl 
  2197 000007E8 895E02              <2> 		mov word [bp+2], bx
  2198 000007EB C746040000          <2> 		mov word [bp+4], 0
  2199 000007F0 EB0A                <2> 		jmp .endzo
  2200                              <2> 	.above:		
  2201 000007F2 C746020000          <2> 		mov word [bp+2], 0
  2202 000007F7 C746040000          <2> 		mov word [bp+4], 0
  2203                              <2> 	.endzo:	
  2204                              <2> 	
  2205 000007FC C3                  <2> 	ret
  2206                              <2> 	
  2207                              <2> proc_shr32:
  2208 000007FD 89E0                <2> 	mov ax,sp
  2209 000007FF 89C5                <2> 	mov bp,ax
  2210                              <2> 	
  2211 00000801 31C0                <2> 	xor ax,ax
  2212 00000803 8A4606              <2> 	mov byte al,[bp+6]
  2213 00000806 B310                <2> 	mov bl,10h
  2214 00000808 F6F3                <2> 	div bl
  2215                              <2> 					
  2216 0000080A 3C01                <2> 	cmp al,1
  2217 0000080C 7204                <2> 	jb .zero
  2218 0000080E 7418                <2> 	je .one	
  2219 00000810 EB27                <2> 	jmp .above
  2220                              <2> 	.zero:	
  2221 00000812 B110                <2> 		mov cl,10h
  2222 00000814 28E1                <2> 		sub cl,ah		
  2223 00000816 8B5E02              <2> 		mov bx,[bp+2]		
  2224 00000819 D3E3                <2> 		shl bx,cl
  2225                              <2> 		
  2226 0000081B 88E1                <2> 		mov cl,ah		
  2227 0000081D D36E02              <2> 		shr word [bp+2],cl
  2228 00000820 D36E04              <2> 		shr word [bp+4],cl
  2229 00000823 015E04              <2> 		add word [bp+4],bx	
  2230 00000826 EB1B                <2> 		jmp .endzo
  2231                              <2> 	.one:			
  2232 00000828 88E1                <2> 		mov cl,ah
  2233 0000082A 8B5E02              <2> 		mov bx,[bp+2]
  2234 0000082D D3EB                <2> 		shr bx,cl
  2235 0000082F C746020000          <2> 		mov word [bp+2],0 
  2236 00000834 895E04              <2> 		mov word [bp+4],bx
  2237 00000837 EB0A                <2> 		jmp .endzo
  2238                              <2> 	.above:		
  2239 00000839 C746020000          <2> 		mov word [bp+2],0
  2240 0000083E C746040000          <2> 		mov word [bp+4],0
  2241                              <2> 	.endzo:		
  2242                              <2> 
  2243 00000843 C3                  <2> 	ret
  2244                              <2> 	
  2245                              <2> proc__lzcount16:
  2246 00000844 89E0                <2> 	mov ax,sp
  2247 00000846 89C5                <2> 	mov bp,ax
  2248                              <2> 	
  2249 00000848 B100                <2> 	mov cl,0
  2250                              <2> 		
  2251 0000084A 8A6603              <2> 	mov ah, [bp+3]	
  2252 0000084D 80E4F0              <2> 	and ah,0xF0
  2253 00000850 80FC00              <2> 	cmp ah,0
  2254 00000853 7529                <2> 	jnz .end
  2255 00000855 FEC1                <2> 	inc cl
  2256                              <2> 	
  2257 00000857 8A6603              <2> 	mov ah, [bp+3]
  2258 0000085A 80E40F              <2> 	and ah,0x0F
  2259 0000085D 80FC00              <2> 	cmp ah,0
  2260 00000860 751C                <2> 	jnz .end
  2261 00000862 FEC1                <2> 	inc cl
  2262                              <2> 	
  2263 00000864 8A6602              <2> 	mov ah, [bp+2]
  2264 00000867 80E4F0              <2> 	and ah,0xF0
  2265 0000086A 80FC00              <2> 	cmp ah,0
  2266 0000086D 750F                <2> 	jnz .end
  2267 0000086F FEC1                <2> 	inc cl
  2268                              <2> 	
  2269 00000871 8A6602              <2> 	mov ah, [bp+2]
  2270 00000874 80E40F              <2> 	and ah,0x0F
  2271 00000877 80FC00              <2> 	cmp ah,0
  2272 0000087A 7502                <2> 	jnz .end
  2273 0000087C FEC1                <2> 	inc cl
  2274                              <2> 		
  2275                              <2> 	.end:
  2276 0000087E 884E04              <2> 	mov byte [bp+4], cl
  2277                              <2> 	
  2278 00000881 C3                  <2> 	ret
  2279                              <2> 
  2280                              <2> proc__lzbitcount16:
  2281 00000882 89E0                <2> 	mov ax,sp
  2282 00000884 89C5                <2> 	mov bp,ax
  2283                              <2> 	
  2284 00000886 8B4602              <2> 	mov word ax,[bp+2]
  2285                              <2> 		
  2286 00000889 B100                <2> 	mov cl,0
  2287                              <2> 	.l1:
  2288 0000088B 80F910              <2> 		cmp cl,16
  2289 0000088E 7310                <2> 		jae .l2
  2290                              <2> 		
  2291 00000890 89C3                <2> 		mov bx,ax
  2292 00000892 D3E3                <2> 		shl bx,cl
  2293 00000894 C1EB0F              <2> 		shr bx,15
  2294                              <2> 		
  2295 00000897 83FB00              <2> 		cmp bx,0
  2296 0000089A 7504                <2> 		jnz .l2
  2297                              <2> 		
  2298 0000089C FEC1                <2> 		inc cl		
  2299 0000089E EBEB                <2> 		jmp .l1
  2300                              <2> 	.l2:
  2301                              <2> 	
  2302 000008A0 884E04              <2> 	mov byte [bp+4], cl
  2303                              <2> 	
  2304 000008A3 C3                  <2> 	ret
  2305                              <2> 	
  2306                              <2> proc__lzbitcount8:
  2307 000008A4 89E0                <2> 	mov ax,sp
  2308 000008A6 89C5                <2> 	mov bp,ax
  2309                              <2> 	
  2310 000008A8 8A4602              <2> 	mov byte al,[bp+2]
  2311                              <2> 	
  2312 000008AB B100                <2> 	mov cl,0
  2313                              <2> 	.l1:
  2314 000008AD 80F908              <2> 		cmp cl,8
  2315 000008B0 7410                <2> 		je .l2
  2316                              <2> 		
  2317 000008B2 88C3                <2> 		mov bl,al
  2318 000008B4 D2E3                <2> 		shl bl,cl
  2319 000008B6 C0EB07              <2> 		shr bl,7
  2320                              <2> 		
  2321 000008B9 80FB00              <2> 		cmp bl,0
  2322 000008BC 7504                <2> 		jnz .l2
  2323                              <2> 		
  2324 000008BE FEC1                <2> 		inc cl		
  2325 000008C0 EBEB                <2> 		jmp .l1
  2326                              <2> 	.l2:
  2327                              <2> 	
  2328 000008C2 884E03              <2> 	mov byte [bp+3], cl
  2329                              <2> 		
  2330 000008C5 C3                  <2> 	ret
  2331                              <2> 	
  2332                              <2> proc_calc_dividendo1:
  2333 000008C6 89E0                <2> 	mov ax,sp
  2334 000008C8 89C5                <2> 	mov bp,ax
  2335                              <2> 	
  2336 000008CA 8B4606              <2> 	mov ax,[bp+6]
  2337 000008CD 8B5E08              <2> 	mov bx,[bp+8]
  2338 000008D0 55                  <2> 	push bp
  2339                              <2> 	__lzbitcount32 ax, bx, cl
  2340 000008D1 53                  <3>  push %2
  2341                              <3>  __lzbitcount16 %1, cl
  2342                              <4>  stkopen 3
  2343 000008D2 83EC03              <5>  sub word sp, %1
  2344 000008D5 54                  <5>  push sp
  2345 000008D6 5D                  <5>  pop bp
  2346 000008D7 894600              <4>  mov word [bp+0], %1
  2347 000008DA E8A5FF              <4>  call proc__lzbitcount16
  2348 000008DD 54                  <4>  push sp
  2349 000008DE 5D                  <4>  pop bp
  2350 000008DF 8A4E02              <4>  mov byte %2, [bp+2]
  2351                              <4>  stkclose 3
  2352 000008E2 83C403              <5>  add word sp, %1
  2353 000008E5 58                  <3>  pop ax
  2354 000008E6 80F910              <3>  cmp cl,16
  2355 000008E9 7217                <3>  jb .end
  2356 000008EB 51                  <3>  push cx
  2357                              <3>  __lzbitcount16 ax, al
  2358                              <4>  stkopen 3
  2359 000008EC 83EC03              <5>  sub word sp, %1
  2360 000008EF 54                  <5>  push sp
  2361 000008F0 5D                  <5>  pop bp
  2362 000008F1 894600              <4>  mov word [bp+0], %1
  2363 000008F4 E88BFF              <4>  call proc__lzbitcount16
  2364 000008F7 54                  <4>  push sp
  2365 000008F8 5D                  <4>  pop bp
  2366 000008F9 8A4602              <4>  mov byte %2, [bp+2]
  2367                              <4>  stkclose 3
  2368 000008FC 83C403              <5>  add word sp, %1
  2369 000008FF 59                  <3>  pop cx
  2370 00000900 00C1                <3>  add cl,al
  2371                              <3>  .end:
  2372 00000902 88C9                <3>  mov byte %3, cl
  2373 00000904 5D                  <2> 	pop bp
  2374 00000905 B320                <2> 	mov bl,32
  2375 00000907 28CB                <2> 	sub bl,cl
  2376 00000909 53                  <2> 	push bx
  2377                              <2> 		
  2378 0000090A 8B4602              <2> 	mov ax,[bp+2]
  2379 0000090D 8B5604              <2> 	mov dx,[bp+4]
  2380 00000910 55                  <2> 	push bp
  2381                              <2> 	__shr32 ax, dx, cl
  2382                              <3>  stkopen 5
  2383 00000911 83EC05              <4>  sub word sp, %1
  2384 00000914 54                  <4>  push sp
  2385 00000915 5D                  <4>  pop bp
  2386 00000916 894600              <3>  mov word [bp+0], %1
  2387 00000919 895602              <3>  mov word [bp+2], %2
  2388 0000091C 884E04              <3>  mov byte [bp+4], %3
  2389 0000091F E8DBFE              <3>  call proc_shr32
  2390 00000922 54                  <3>  push sp
  2391 00000923 5D                  <3>  pop bp
  2392 00000924 8B4600              <3>  mov word %1, [bp+0]
  2393 00000927 8B5602              <3>  mov word %2, [bp+2]
  2394                              <3>  stkclose 5
  2395 0000092A 83C405              <4>  add word sp, %1
  2396 0000092D 5D                  <2> 	pop bp
  2397 0000092E 50                  <2> 	push ax
  2398 0000092F 52                  <2> 	push dx	
  2399                              <2> 	
  2400 00000930 8B4E06              <2> 	mov cx,[bp+6]
  2401 00000933 8B5E08              <2> 	mov bx,[bp+8]
  2402                              <2> 	
  2403 00000936 55                  <2> 	push bp
  2404                              <2> 	__cmp32 ax, dx, cx, bx, cl
  2405                              <3>  stkopen 9
  2406 00000937 83EC09              <4>  sub word sp, %1
  2407 0000093A 54                  <4>  push sp
  2408 0000093B 5D                  <4>  pop bp
  2409 0000093C 894600              <3>  mov word [bp+0], %1
  2410 0000093F 895602              <3>  mov word [bp+2], %2
  2411 00000942 894E04              <3>  mov word [bp+4], %3
  2412 00000945 895E06              <3>  mov word [bp+6], %4
  2413 00000948 E840FE              <3>  call proc_cmp32
  2414 0000094B 54                  <3>  push sp
  2415 0000094C 5D                  <3>  pop bp
  2416 0000094D 8A4E08              <3>  mov byte %5, [bp+8]
  2417                              <3>  stkclose 9
  2418 00000950 83C409              <4>  add word sp, %1
  2419 00000953 5D                  <2> 	pop bp
  2420 00000954 5A                  <2> 	pop dx
  2421 00000955 58                  <2> 	pop ax
  2422 00000956 5B                  <2> 	pop bx
  2423                              <2> 		
  2424 00000957 80F900              <2> 	cmp cl,0
  2425 0000095A 7D2D                <2> 	jge .l1
  2426                              <2> 		stkopen 9
  2427 0000095C 83EC09              <3>  sub word sp, %1
  2428 0000095F 54                  <3>  push sp
  2429 00000960 5D                  <3>  pop bp
  2430 00000961 8B4E0B              <2> 		mov cx,[bp+0x0B]
  2431 00000964 894E00              <2> 		mov word [bp+0], cx
  2432 00000967 8B4E0D              <2> 		mov cx,[bp+0x0D]
  2433 0000096A 894E02              <2> 		mov word [bp+2], cx
  2434 0000096D 894604              <2> 		mov word [bp+4], ax
  2435 00000970 895606              <2> 		mov word [bp+6], dx
  2436 00000973 885E08              <2> 		mov byte [bp+8], bl
  2437 00000976 E81E00              <2> 		call proc_calc_prox_dividendo
  2438 00000979 89E0                <2> 		mov ax,sp
  2439 0000097B 89C5                <2> 		mov bp,ax
  2440 0000097D 8B4604              <2> 		mov word ax,[bp+4]
  2441 00000980 8B5606              <2> 		mov word dx,[bp+6]
  2442 00000983 8A5E08              <2> 		mov byte bl,[bp+8] 
  2443                              <2> 		stkclose 9		 
  2444 00000986 83C409              <3>  add word sp, %1
  2445                              <2> 	.l1:
  2446                              <2> 	
  2447 00000989 89E1                <2> 	mov cx,sp
  2448 0000098B 89CD                <2> 	mov bp,cx
  2449 0000098D 89460A              <2> 	mov word [bp+0x0A], ax
  2450 00000990 89560C              <2> 	mov word [bp+0x0C], dx
  2451 00000993 885E0E              <2> 	mov byte [bp+0x0E], bl	 
  2452                              <2> 	
  2453 00000996 C3                  <2> 	ret
  2454                              <2> 
  2455                              <2> proc_calc_prox_dividendo:
  2456 00000997 89E0                <2> 	mov ax,sp
  2457 00000999 89C5                <2> 	mov bp,ax
  2458                              <2> 	
  2459 0000099B 30E4                <2> 	xor ah,ah	
  2460 0000099D 8A460A              <2> 	mov al,[bp+0x0A]
  2461 000009A0 B310                <2> 	mov bl,10h
  2462 000009A2 F6F3                <2> 	div bl
  2463                              <2> 	
  2464 000009A4 3C00                <2> 	cmp al,0
  2465 000009A6 7402                <2> 	jz .zero
  2466 000009A8 EB05                <2> 	jmp .one
  2467                              <2> 	.zero:
  2468 000009AA 8B5E02              <2> 		mov bx,[bp+2]
  2469 000009AD EB03                <2> 		jmp .endcmp
  2470                              <2> 	.one:
  2471 000009AF 8B5E04              <2> 		mov bx,[bp+4]		
  2472                              <2> 	.endcmp:
  2473                              <2> 		
  2474 000009B2 88E1                <2> 	mov cl,ah
  2475 000009B4 D3E3                <2> 	shl bx,cl
  2476 000009B6 C1EB0F              <2> 	shr bx,15
  2477                              <2> 	
  2478 000009B9 8B4606              <2> 	mov ax,[bp+6]
  2479 000009BC 8B5608              <2> 	mov dx,[bp+8]
  2480 000009BF 53                  <2> 	push bx
  2481                              <2> 	__shl32 ax, dx, 1
  2482                              <3>  stkopen 5
  2483 000009C0 83EC05              <4>  sub word sp, %1
  2484 000009C3 54                  <4>  push sp
  2485 000009C4 5D                  <4>  pop bp
  2486 000009C5 894600              <3>  mov word [bp+0], %1
  2487 000009C8 895602              <3>  mov word [bp+2], %2
  2488 000009CB C6460401            <3>  mov byte [bp+4], %3
  2489 000009CF E8E4FD              <3>  call proc_shl32
  2490 000009D2 54                  <3>  push sp
  2491 000009D3 5D                  <3>  pop bp
  2492 000009D4 8B4600              <3>  mov word %1, [bp+0]
  2493 000009D7 8B5602              <3>  mov word %2, [bp+2]
  2494                              <3>  stkclose 5
  2495 000009DA 83C405              <4>  add word sp, %1
  2496 000009DD 5B                  <2> 	pop bx
  2497                              <2> 	
  2498 000009DE 01DA                <2> 	add dx,bx
  2499 000009E0 83D000              <2> 	adc ax,0
  2500                              <2> 
  2501 000009E3 89E1                <2> 	mov cx,sp
  2502 000009E5 89CD                <2> 	mov bp,cx	
  2503 000009E7 894606              <2> 	mov [bp+6],ax
  2504 000009EA 895608              <2> 	mov [bp+8],dx
  2505                              <2> 	
  2506 000009ED FE460A              <2> 	inc byte [bp+0x0A]
  2507                              <2> 	
  2508 000009F0 C3                  <2> 	ret
  2509                              <2> 	
  2510                              <2> %endif
  2511                              <1> 	%include "lib/system.mac"
  2512                              <2>  
  2513                              <2> %ifndef SYSTEM_MAC
  2514                              <2>  	%define SYSTEM_MAC
  2515                              <2>  	
  2516                              <2> 	%ifndef TRUE
  2517                              <2> 		%define TRUE 01h
  2518                              <2> 	%endif
  2519                              <2> 	%ifndef FALSE
  2520                              <2> 		%define FALSE 00h
  2521                              <2> 	%endif
  2522                              <2> 	
  2523                              <2> %macro vlodsb 3
  2524                              <2> 	vlodsb cs, %1, %2, %3
  2525                              <2> %endmacro
  2526                              <2> 
  2527                              <2> %macro vstosb 3
  2528                              <2> 	vstosb cs, %1, %2, %3
  2529                              <2> %endmacro
  2530                              <2> 	 	
  2531                              <2> %macro int16toreg 2
  2532                              <2> 	int16toreg cs, %1, %2
  2533                              <2> %endmacro
  2534                              <2> 
  2535                              <2> %macro regtoint16 2
  2536                              <2> 	regtoint16 %1, cs, %2
  2537                              <2> %endmacro
  2538                              <2> 
  2539                              <2> %macro vstosb 4
  2540                              <2> 	push %1
  2541                              <2> 	pop ds
  2542                              <2> 	mov si,%2
  2543                              <2> 	add si,%3
  2544                              <2> 	mov byte [si],%4	
  2545                              <2> %endmacro
  2546                              <2> 
  2547                              <2> %macro vlodsb 4
  2548                              <2> 	push %1
  2549                              <2> 	pop ds
  2550                              <2> 	mov si,%2
  2551                              <2> 	add si,%3
  2552                              <2> 	mov byte %4,[si]	
  2553                              <2> %endmacro 	 
  2554                              <2> 
  2555                              <2> %macro int16toreg 3
  2556                              <2> 	push %2
  2557                              <2> 	push %1
  2558                              <2> 	pop ds
  2559                              <2> 	pop si
  2560                              <2> 	mov word %3,[si]	
  2561                              <2> %endmacro
  2562                              <2> 
  2563                              <2> %macro regtoint16 3
  2564                              <2> 	push %3
  2565                              <2> 	push %2
  2566                              <2> 	pop ds
  2567                              <2> 	pop si
  2568                              <2> 	mov word [si],%1	
  2569                              <2> %endmacro
  2570                              <2> 
  2571                              <2> %macro mov32 2
  2572                              <2> 	mov32 cs, %1, cs, %2
  2573                              <2> %endmacro
  2574                              <2> 
  2575                              <2> %macro mov16 2
  2576                              <2> 	mov16 cs, %1, cs, %2
  2577                              <2> %endmacro
  2578                              <2> 
  2579                              <2> %macro mov32 4
  2580                              <2> 	mov ax,%3
  2581                              <2> 	mov ds,ax
  2582                              <2> 	mov cx,[%4+2]
  2583                              <2> 	mov dx,[%4]
  2584                              <2> 	mov ax,%1
  2585                              <2> 	mov ds,ax
  2586                              <2> 	mov [%2+2],cx
  2587                              <2> 	mov [%2],dx
  2588                              <2> %endmacro
  2589                              <2> 
  2590                              <2> %macro mov16 4
  2591                              <2> 	mov ax,%3
  2592                              <2> 	mov ds,ax
  2593                              <2> 	mov bx,[%4]
  2594                              <2> 	mov ax,%1
  2595                              <2> 	mov ds,ax
  2596                              <2> 	mov [%2],bx
  2597                              <2> %endmacro
  2598                              <2>  	 	
  2599                              <2> %macro mformat 4
  2600                              <2> 	stkopen 8
  2601                              <2> 	mov word [ bp + 0 ], %1
  2602                              <2> 	mov word [ bp + 2 ], %2
  2603                              <2> 	mov word [ bp + 4 ], %3
  2604                              <2> 	mov word [ bp + 6 ], %4
  2605                              <2> 	call kernel_segment:mformat
  2606                              <2> 	stkclose 8
  2607                              <2> %endmacro
  2608                              <2> 
  2609                              <2> %macro malloc 6
  2610                              <2> 	stkopen 0Bh
  2611                              <2> 	mov word [ bp + 4 ], %3
  2612                              <2> 	mov word [ bp + 6 ], %4
  2613                              <2> 	mov word [ bp + 8 ], %5	
  2614                              <2> 	call kernel_segment:malloc
  2615                              <2> 	push sp
  2616                              <2> 	pop bp
  2617                              <2> 	mov word %1, [ bp ]
  2618                              <2> 	mov word %2, [ bp + 2 ]
  2619                              <2> 	mov byte %6, [ bp + 0x0A ]
  2620                              <2> 	stkclose 0Bh
  2621                              <2> %endmacro 	
  2622                              <2> 
  2623                              <2> %macro laddr 2
  2624                              <2> 	laddr %1, %2, %1, %2
  2625                              <2> %endmacro
  2626                              <2> 
  2627                              <2> %macro faddr 2
  2628                              <2> 	faddr %1, %2, %1, %2
  2629                              <2> %endmacro
  2630                              <2>  	
  2631                              <2> %macro laddr 4
  2632                              <2> 	stkopen 8
  2633                              <2> 	mov word [ bp + 4 ], %3
  2634                              <2> 	mov word [ bp + 6 ], %4	
  2635                              <2> 	call kernel_segment:laddr
  2636                              <2> 	push sp
  2637                              <2> 	pop bp
  2638                              <2> 	mov word %1, [ bp + 0 ]
  2639                              <2> 	mov word %2, [ bp + 2 ]	
  2640                              <2> 	stkclose 8
  2641                              <2> %endmacro
  2642                              <2> 
  2643                              <2> %macro faddr 4
  2644                              <2> 	stkopen 8
  2645                              <2> 	mov word [ bp + 4 ], %3
  2646                              <2> 	mov word [ bp + 6 ], %4	
  2647                              <2> 	call kernel_segment:faddr
  2648                              <2> 	push sp
  2649                              <2> 	pop bp
  2650                              <2> 	mov word %1, [ bp + 0 ]
  2651                              <2> 	mov word %2, [ bp + 2 ]	
  2652                              <2> 	stkclose 8
  2653                              <2> %endmacro	
  2654                              <2>  
  2655                              <2> 
  2656                              <2> %macro stkopen 1		
  2657                              <2> 	sub word sp, %1
  2658                              <2> 	push sp
  2659                              <2> 	pop bp
  2660                              <2> %endmacro
  2661                              <2> 
  2662                              <2> %macro stkclose 1
  2663                              <2> 	add word sp, %1
  2664                              <2> %endmacro
  2665                              <2> 
  2666                              <2> %macro stkload 1-* 	
  2667                              <2>  	%rep %0
  2668                              <2>  	 	%rotate -1
  2669                              <2>  		pop %1
  2670                              <2>  	%endrep
  2671                              <2>  	%rep %0
  2672                              <2>  		push %1
  2673                              <2>  		%rotate 1
  2674                              <2>  	%endrep
  2675                              <2> %endmacro
  2676                              <2> 
  2677                              <2> %macro stkpush 1-* 	
  2678                              <2>  	%rep %0
  2679                              <2>  		push %1
  2680                              <2>  		%rotate 1
  2681                              <2>  	%endrep 	
  2682                              <2> %endmacro
  2683                              <2>  
  2684                              <2> %macro stkpop 1-*
  2685                              <2>  	%rep %0
  2686                              <2>  	 	%rotate -1
  2687                              <2>  		pop %1
  2688                              <2>  	%endrep 	 	
  2689                              <2> %endmacro
  2690                              <2> 
  2691                              <2> %endif 
  2692                              <1> 
  2693                              <1> %macro chgsig 1
  2694                              <1> 	chgsig cs, %1
  2695                              <1> %endmacro
  2696                              <1> 
  2697                              <1> %macro cmp16 3
  2698                              <1> 	cmp16 cs, %1, cs, %2, %3
  2699                              <1> %endmacro
  2700                              <1> 
  2701                              <1> %macro mul16 2
  2702                              <1> 	mul16 cs, %1, cs, %2
  2703                              <1> %endmacro
  2704                              <1> 
  2705                              <1> %macro div16 2
  2706                              <1> 	div16 cs, %1, cs, %2
  2707                              <1> %endmacro
  2708                              <1> 
  2709                              <1> %macro mod16 2
  2710                              <1> 	mod16 cs, %1, cs, %2
  2711                              <1> %endmacro
  2712                              <1> 
  2713                              <1> %macro inc16 1
  2714                              <1> 	inc16 cs, %1
  2715                              <1> %endmacro
  2716                              <1> 
  2717                              <1> %macro dec16 1
  2718                              <1> 	dec16 cs, %1
  2719                              <1> %endmacro
  2720                              <1> 
  2721                              <1> %macro add16 2
  2722                              <1> 	add16 cs, %1, cs, %2
  2723                              <1> %endmacro
  2724                              <1> 
  2725                              <1> %macro sub16 2
  2726                              <1> 	sub16 cs, %1, cs, %2
  2727                              <1> %endmacro
  2728                              <1> 
  2729                              <1> %macro int32to16 2
  2730                              <1> 	int32to16 cs, %1, %2
  2731                              <1> %endmacro
  2732                              <1> 
  2733                              <1> %macro int16to32 2
  2734                              <1> 	int16to32 %1, cs, %2
  2735                              <1> %endmacro
  2736                              <1> 
  2737                              <1> %macro setsig 1
  2738                              <1> 	setsig cs, %1
  2739                              <1> %endmacro
  2740                              <1> 
  2741                              <1> %macro clrsig 1
  2742                              <1> 	clrsig cs, %1
  2743                              <1> %endmacro
  2744                              <1> 
  2745                              <1> %macro idiv32 5
  2746                              <1> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2747                              <1> %endmacro
  2748                              <1> 
  2749                              <1> %macro imul32 3
  2750                              <1> 	imul32 cs, %1, cs, %2, cs, %3
  2751                              <1> %endmacro
  2752                              <1> 
  2753                              <1> %macro div32 5
  2754                              <1> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2755                              <1> %endmacro
  2756                              <1> 
  2757                              <1> %macro mul32 3
  2758                              <1> 	mul32 cs, %1, cs, %2, cs, %3
  2759                              <1> %endmacro
  2760                              <1> 	
  2761                              <1> %macro add32 3
  2762                              <1> 	add32 cs, %1, cs, %2, cs, %3
  2763                              <1> %endmacro
  2764                              <1> 
  2765                              <1> %macro sub32 3
  2766                              <1> 	sub32 cs, %1, cs, %2, cs, %3
  2767                              <1> %endmacro
  2768                              <1> 
  2769                              <1> %macro int32to16 3
  2770                              <1> 	stkopen 0x06
  2771                              <1> 	mov ax,%1
  2772                              <1> 	mov ds,ax
  2773                              <1> 	mov ax,[%2+2]
  2774                              <1> 	mov word [bp+0], ax
  2775                              <1> 	mov ax,[%2]	
  2776                              <1> 	mov word [bp+2], ax
  2777                              <1> 	call proc_int32to16
  2778                              <1> 	mov ax,sp
  2779                              <1> 	mov bp,ax
  2780                              <1> 	mov ax,[bp+4]
  2781                              <1> 	mov word %3, ax	
  2782                              <1> 	stkclose 0x06
  2783                              <1> %endmacro
  2784                              <1> 
  2785                              <1> %macro int16to32 3
  2786                              <1> 	stkopen 0x06
  2787                              <1> 	mov word [bp+0], %1	
  2788                              <1> 	call proc_int16to32
  2789                              <1> 	mov ax,sp
  2790                              <1> 	mov bp,ax
  2791                              <1> 	mov ax,%2
  2792                              <1> 	mov ds,ax
  2793                              <1> 	mov ax,[bp+2]
  2794                              <1> 	mov [%3+2],ax
  2795                              <1> 	mov ax,[bp+4]
  2796                              <1> 	mov [%3],ax	
  2797                              <1> 	stkclose 0x06
  2798                              <1> %endmacro
  2799                              <1> 
  2800                              <1> %macro setsig 2
  2801                              <1> 	stkopen 0x02
  2802                              <1> 	mov ax,%1
  2803                              <1> 	mov ds,ax
  2804                              <1> 	mov ax,[%2+2]
  2805                              <1> 	mov word [bp+0], ax
  2806                              <1> 	call proc_setsig
  2807                              <1> 	mov ax,sp
  2808                              <1> 	mov bp,ax
  2809                              <1> 	mov ax,%1
  2810                              <1> 	mov ds,ax
  2811                              <1> 	mov ax,[bp+0]
  2812                              <1> 	mov word [%2+2], ax
  2813                              <1> 	stkclose 0x02
  2814                              <1> %endmacro
  2815                              <1> 
  2816                              <1> %macro clrsig 2
  2817                              <1> 	stkopen 0x02
  2818                              <1> 	mov ax,%1
  2819                              <1> 	mov ds,ax
  2820                              <1> 	mov ax,[%2+2]
  2821                              <1> 	mov word [bp+0], ax
  2822                              <1> 	call proc_clrsig
  2823                              <1> 	mov ax,sp
  2824                              <1> 	mov bp,ax
  2825                              <1> 	mov ax,%1
  2826                              <1> 	mov ds,ax
  2827                              <1> 	mov ax,[bp+0]
  2828                              <1> 	mov word [%2+2], ax
  2829                              <1> 	stkclose 0x02
  2830                              <1> %endmacro
  2831                              <1> 
  2832                              <1> %macro div32 10
  2833                              <1> 	stkopen 0x11
  2834                              <1> 	mov ax,%1
  2835                              <1> 	mov ds,ax
  2836                              <1> 	mov ax,[%2+2]
  2837                              <1> 	mov word [bp+0], ax
  2838                              <1> 	mov ax,[%2]
  2839                              <1> 	mov word [bp+2], ax
  2840                              <1> 	mov ax,%3
  2841                              <1> 	mov ds,ax
  2842                              <1> 	mov ax,[%4+2]
  2843                              <1> 	mov word [bp+4], ax
  2844                              <1> 	mov ax,[%4]
  2845                              <1> 	mov word [bp+6], ax
  2846                              <1> 	call proc_div32
  2847                              <1> 	mov ax,sp
  2848                              <1> 	mov bp,ax
  2849                              <1> 	mov ax,%5
  2850                              <1> 	mov ds,ax
  2851                              <1> 	mov word ax, [bp+8]
  2852                              <1> 	mov word [%6+2], ax
  2853                              <1> 	mov word ax, [bp+0x0A]
  2854                              <1> 	mov word [%6], ax
  2855                              <1> 	mov ax,%7
  2856                              <1> 	mov ds,ax
  2857                              <1> 	mov word ax,[bp+0x0C]
  2858                              <1> 	mov word [%8+2],ax
  2859                              <1> 	mov word ax,[bp+0x0E]
  2860                              <1> 	mov word [%8],ax
  2861                              <1> 	mov ax,%9
  2862                              <1> 	mov ds,ax
  2863                              <1> 	mov byte al,[bp+0x10]
  2864                              <1> 	mov byte [%10],al
  2865                              <1> 	stkclose 0x11
  2866                              <1> %endmacro
  2867                              <1> 	
  2868                              <1> %macro mul32 6
  2869                              <1> 	stkopen 0x0C
  2870                              <1> 	mov ax,%1
  2871                              <1> 	mov ds,ax
  2872                              <1> 	mov ax,[%2+2]
  2873                              <1> 	mov word [bp+0], ax
  2874                              <1> 	mov ax,[%2]
  2875                              <1> 	mov word [bp+2], ax
  2876                              <1> 	mov ax,%3
  2877                              <1> 	mov ds,ax
  2878                              <1> 	mov ax,[%4+2]
  2879                              <1> 	mov word [bp+4], ax
  2880                              <1> 	mov ax,[%4]
  2881                              <1> 	mov word [bp+6], ax
  2882                              <1> 	call proc_mul32
  2883                              <1> 	mov ax,sp
  2884                              <1> 	mov bp,ax
  2885                              <1> 	mov ax,%5
  2886                              <1> 	mov ds,ax
  2887                              <1> 	mov word ax, [bp+8]
  2888                              <1> 	mov word [%6+2], ax
  2889                              <1> 	mov word ax, [bp+0x0A]
  2890                              <1> 	mov word [%6], ax
  2891                              <1> 	stkclose 0x0C
  2892                              <1> %endmacro	
  2893                              <1> 	
  2894                              <1> %macro add32 6
  2895                              <1> 	stkopen 0x0C
  2896                              <1> 	mov ax,%1
  2897                              <1> 	mov ds,ax
  2898                              <1> 	mov ax,[%2+2]
  2899                              <1> 	mov word [bp+0], ax
  2900                              <1> 	mov ax,[%2]
  2901                              <1> 	mov word [bp+2], ax
  2902                              <1> 	mov ax,%3
  2903                              <1> 	mov ds,ax
  2904                              <1> 	mov ax,[%4+2]
  2905                              <1> 	mov word [bp+4], ax
  2906                              <1> 	mov ax,[%4]
  2907                              <1> 	mov word [bp+6], ax
  2908                              <1> 	call proc_add32
  2909                              <1> 	mov ax,sp
  2910                              <1> 	mov bp,ax
  2911                              <1> 	mov ax,%5
  2912                              <1> 	mov ds,ax
  2913                              <1> 	mov word ax, [bp+8]
  2914                              <1> 	mov word [%6+2], ax
  2915                              <1> 	mov word ax, [bp+0x0A]
  2916                              <1> 	mov word [%6], ax
  2917                              <1> 	stkclose 0x0C
  2918                              <1> %endmacro
  2919                              <1> 
  2920                              <1> %macro sub32 6
  2921                              <1> 	stkopen 0x0C
  2922                              <1> 	mov ax,%1
  2923                              <1> 	mov ds,ax
  2924                              <1> 	mov ax,[%2+2]
  2925                              <1> 	mov word [bp+0], ax
  2926                              <1> 	mov ax,[%2]
  2927                              <1> 	mov word [bp+2], ax
  2928                              <1> 	mov ax,%3
  2929                              <1> 	mov ds,ax
  2930                              <1> 	mov ax,[%4+2]
  2931                              <1> 	mov word [bp+4], ax
  2932                              <1> 	mov ax,[%4]
  2933                              <1> 	mov word [bp+6], ax
  2934                              <1> 	call proc_sub32
  2935                              <1> 	mov ax,sp
  2936                              <1> 	mov bp,ax
  2937                              <1> 	mov ax,%5
  2938                              <1> 	mov ds,ax
  2939                              <1> 	mov word ax, [bp+8]
  2940                              <1> 	mov word [%6+2], ax
  2941                              <1> 	mov word ax, [bp+0x0A]
  2942                              <1> 	mov word [%6], ax
  2943                              <1> 	stkclose 0x0C
  2944                              <1> %endmacro
  2945                              <1> 
  2946                              <1> %macro idiv32 10
  2947                              <1> 	stkopen 0x11
  2948                              <1> 	mov ax,%1
  2949                              <1> 	mov ds,ax
  2950                              <1> 	mov ax,[%2+2]
  2951                              <1> 	mov word [bp+0], ax
  2952                              <1> 	mov ax,[%2]
  2953                              <1> 	mov word [bp+2], ax
  2954                              <1> 	mov ax,%3
  2955                              <1> 	mov ds,ax
  2956                              <1> 	mov ax,[%4+2]
  2957                              <1> 	mov word [bp+4], ax
  2958                              <1> 	mov ax,[%4]
  2959                              <1> 	mov word [bp+6], ax
  2960                              <1> 	call proc_idiv32
  2961                              <1> 	mov ax,sp
  2962                              <1> 	mov bp,ax
  2963                              <1> 	mov ax,%5
  2964                              <1> 	mov ds,ax
  2965                              <1> 	mov word ax, [bp+8]
  2966                              <1> 	mov word [%6+2], ax
  2967                              <1> 	mov word ax, [bp+0x0A]
  2968                              <1> 	mov word [%6], ax
  2969                              <1> 	mov ax,%7
  2970                              <1> 	mov ds,ax
  2971                              <1> 	mov word ax,[bp+0x0C]
  2972                              <1> 	mov word [%8+2],ax
  2973                              <1> 	mov word ax,[bp+0x0E]
  2974                              <1> 	mov word [%8],ax
  2975                              <1> 	mov ax,%9
  2976                              <1> 	mov ds,ax
  2977                              <1> 	mov byte al,[bp+0x10]
  2978                              <1> 	mov byte [%10],al
  2979                              <1> 	stkclose 0x11
  2980                              <1> %endmacro
  2981                              <1> 
  2982                              <1> %macro imul32 6
  2983                              <1> 	stkopen 0x0C
  2984                              <1> 	mov ax,%1
  2985                              <1> 	mov ds,ax
  2986                              <1> 	mov ax,[%2+2]
  2987                              <1> 	mov word [bp+0], ax
  2988                              <1> 	mov ax,[%2]
  2989                              <1> 	mov word [bp+2], ax
  2990                              <1> 	mov ax,%3
  2991                              <1> 	mov ds,ax
  2992                              <1> 	mov ax,[%4+2]
  2993                              <1> 	mov word [bp+4], ax
  2994                              <1> 	mov ax,[%4]
  2995                              <1> 	mov word [bp+6], ax
  2996                              <1> 	call proc_imul32
  2997                              <1> 	mov ax,sp
  2998                              <1> 	mov bp,ax
  2999                              <1> 	mov ax,%5
  3000                              <1> 	mov ds,ax
  3001                              <1> 	mov word ax, [bp+8]
  3002                              <1> 	mov word [%6+2], ax
  3003                              <1> 	mov word ax, [bp+0x0A]
  3004                              <1> 	mov word [%6], ax
  3005                              <1> 	stkclose 0x0C
  3006                              <1> %endmacro
  3007                              <1> 	
  3008                              <1> %macro cmp32 3
  3009                              <1> 	cmp32 cs, %1, cs, %2, %3
  3010                              <1> %endmacro	
  3011                              <1> 	
  3012                              <1> %macro cmp32 5
  3013                              <1> 	stkopen 9
  3014                              <1> 	mov ax,%1
  3015                              <1> 	mov ds,ax
  3016                              <1> 	mov word ax,[%2+2]
  3017                              <1> 	mov word [bp+0], ax
  3018                              <1> 	mov word ax,[%2]
  3019                              <1> 	mov word [bp+2], ax	
  3020                              <1> 	mov ax,%3
  3021                              <1> 	mov ds,ax
  3022                              <1> 	mov word ax,[%4+2]
  3023                              <1> 	mov word [bp+4], ax
  3024                              <1> 	mov word ax,[%4]
  3025                              <1> 	mov word [bp+6], ax	
  3026                              <1> 	call proc_cmp32
  3027                              <1> 	mov ax,sp
  3028                              <1> 	mov bp,ax
  3029                              <1> 	mov al,[bp+8]
  3030                              <1> 	mov byte %5,al
  3031                              <1> 	stkclose 9
  3032                              <1> %endmacro
  3033                              <1> 	
  3034                              <1> %macro shl32 2
  3035                              <1> 	shl32 cs, %1, %2
  3036                              <1> %endmacro	
  3037                              <1> 	
  3038                              <1> %macro shl32 3
  3039                              <1> 	stkopen 5
  3040                              <1> 	mov ax,%1
  3041                              <1> 	mov ds,ax
  3042                              <1> 	mov word ax,[%2+2]
  3043                              <1> 	mov word [bp+0], ax
  3044                              <1> 	mov word ax,[%2]
  3045                              <1> 	mov word [bp+2], ax
  3046                              <1> 	mov byte al, %3
  3047                              <1> 	mov byte [bp+4], al 
  3048                              <1> 	call proc_shl32
  3049                              <1> 	mov ax,sp
  3050                              <1> 	mov bp,ax
  3051                              <1> 	mov ax,%1
  3052                              <1> 	mov ds,ax
  3053                              <1> 	mov ax,[bp+0]
  3054                              <1> 	mov word [%2+2],ax
  3055                              <1> 	mov ax,[bp+2]
  3056                              <1> 	mov word [%2],ax
  3057                              <1> 	stkclose 5
  3058                              <1> %endmacro
  3059                              <1> 
  3060                              <1> 
  3061                              <1> %macro shr32 2
  3062                              <1> 	shr32 cs, %1, %2
  3063                              <1> %endmacro	
  3064                              <1> 	
  3065                              <1> %macro shr32 3
  3066                              <1> 	stkopen 5
  3067                              <1> 	mov ax,%1
  3068                              <1> 	mov ds,ax
  3069                              <1> 	mov word ax,[%2+2]
  3070                              <1> 	mov word [bp+0], ax
  3071                              <1> 	mov word ax,[%2]
  3072                              <1> 	mov word [bp+2], ax
  3073                              <1> 	mov byte al, %3
  3074                              <1> 	mov byte [bp+4], al 
  3075                              <1> 	call proc_shr32
  3076                              <1> 	mov ax,sp
  3077                              <1> 	mov bp,ax
  3078                              <1> 	mov ax,%1
  3079                              <1> 	mov ds,ax
  3080                              <1> 	mov ax,[bp+0]
  3081                              <1> 	mov word [%2+2],ax
  3082                              <1> 	mov ax,[bp+2]
  3083                              <1> 	mov word [%2],ax
  3084                              <1> 	stkclose 5
  3085                              <1> %endmacro
  3086                              <1> 
  3087                              <1> %macro inc16 2
  3088                              <1> 	mov ax,%1
  3089                              <1> 	mov ds,ax
  3090                              <1> 	inc word [%2]
  3091                              <1> %endmacro
  3092                              <1> 
  3093                              <1> %macro dec16 2
  3094                              <1> 	mov ax,%1
  3095                              <1> 	mov ds,ax
  3096                              <1> 	dec word [%2]
  3097                              <1> %endmacro
  3098                              <1> 
  3099                              <1> %macro add16 4	
  3100                              <1> 	mov ax,%3
  3101                              <1> 	mov ds,ax
  3102                              <1> 	mov bx,[%4]	
  3103                              <1> 	mov ax,%1
  3104                              <1> 	mov ds,ax	
  3105                              <1> 	add [%2],bx
  3106                              <1> %endmacro
  3107                              <1> 
  3108                              <1> %macro sub16 4
  3109                              <1> 	mov ax,%3
  3110                              <1> 	mov ds,ax
  3111                              <1> 	mov bx,[%4]
  3112                              <1> 	mov ax,%1
  3113                              <1> 	mov ds,ax
  3114                              <1> 	sub [%2],bx
  3115                              <1> %endmacro
  3116                              <1> 
  3117                              <1> %macro mul16 4
  3118                              <1> 	mov ax,%1
  3119                              <1> 	mov ds,ax
  3120                              <1> 	mov bx,[%2]
  3121                              <1> 	mov ax,%3
  3122                              <1> 	mov ds,ax
  3123                              <1> 	mov cx,[%4]
  3124                              <1> 	
  3125                              <1> 	mov ax,bx
  3126                              <1> 	imul cx
  3127                              <1> 	
  3128                              <1> 	mov dx,%1
  3129                              <1> 	mov ds,dx
  3130                              <1> 	mov [%2],ax
  3131                              <1> %endmacro
  3132                              <1> 
  3133                              <1> %macro div16 4
  3134                              <1> 	mov ax,%1
  3135                              <1> 	mov ds,ax
  3136                              <1> 	mov bx,[%2]
  3137                              <1> 	mov ax,%3
  3138                              <1> 	mov ds,ax
  3139                              <1> 	mov cx,[%4]
  3140                              <1> 	
  3141                              <1> 	xor dx,dx
  3142                              <1> 	mov ax,bx
  3143                              <1> 	idiv cx
  3144                              <1> 	
  3145                              <1> 	mov dx,%1
  3146                              <1> 	mov ds,dx
  3147                              <1> 	mov [%2],ax
  3148                              <1> %endmacro
  3149                              <1> 
  3150                              <1> 
  3151                              <1> %macro mod16 4
  3152                              <1> 	mov ax,%1
  3153                              <1> 	mov ds,ax
  3154                              <1> 	mov bx,[%2]
  3155                              <1> 	mov ax,%3
  3156                              <1> 	mov ds,ax
  3157                              <1> 	mov cx,[%4]
  3158                              <1> 	
  3159                              <1> 	xor dx,dx
  3160                              <1> 	mov ax,bx
  3161                              <1> 	idiv cx
  3162                              <1> 	
  3163                              <1> 	mov bx,%1
  3164                              <1> 	mov ds,bx
  3165                              <1> 	mov [%2],dx
  3166                              <1> %endmacro
  3167                              <1> 
  3168                              <1> %macro cmp16 5
  3169                              <1> 	mov ax,%1
  3170                              <1> 	mov ds,ax
  3171                              <1> 	mov bx,[%2]
  3172                              <1> 	mov ax,%3
  3173                              <1> 	mov ds,ax
  3174                              <1> 	mov	cx,[%4]
  3175                              <1> 	
  3176                              <1> 	cmp bx,cx
  3177                              <1> 	jg %%above
  3178                              <1> 	jl %%below
  3179                              <1> 		mov byte %5, 0
  3180                              <1> 		jmp %%endcmp
  3181                              <1> 	%%above:
  3182                              <1> 		mov byte %5, 1
  3183                              <1> 		jmp %%endcmp
  3184                              <1> 	%%below:
  3185                              <1> 		mov byte %5, -1
  3186                              <1> 	%%endcmp:
  3187                              <1> %endmacro
  3188                              <1> 
  3189                              <1> %macro chgsig 2
  3190                              <1> 	mov ax,%1
  3191                              <1> 	mov ds,ax
  3192                              <1> 	mov ax,[%2]
  3193                              <1> 	mov bx,0xFFFF
  3194                              <1> 	sub bx,ax
  3195                              <1> 	inc bx
  3196                              <1> 	mov [%2],bx
  3197                              <1> %endmacro
  3198                              <1> 	
  3199                              <1> %endif
  3200                                  %include "lib/float.mac"
  3201                              <1> 
  3202                              <1> %ifndef FLOAT_MAC
  3203                              <1> 	%define FLOAT_MAC
  3204                              <1> 	
  3205                              <1> 	%include "lib/float.asm"
  3206                              <2> 
  3207                              <2> %ifndef FLOAT_ASM
  3208                              <2> 	%define FLOAT_ASM
  3209                              <2> 	
  3210                              <2> 	%include "lib/system.mac"
  3211                              <3>  
  3212                              <3> %ifndef SYSTEM_MAC
  3213                              <3>  	%define SYSTEM_MAC
  3214                              <3>  	
  3215                              <3> 	%ifndef TRUE
  3216                              <3> 		%define TRUE 01h
  3217                              <3> 	%endif
  3218                              <3> 	%ifndef FALSE
  3219                              <3> 		%define FALSE 00h
  3220                              <3> 	%endif
  3221                              <3> 	
  3222                              <3> %macro vlodsb 3
  3223                              <3> 	vlodsb cs, %1, %2, %3
  3224                              <3> %endmacro
  3225                              <3> 
  3226                              <3> %macro vstosb 3
  3227                              <3> 	vstosb cs, %1, %2, %3
  3228                              <3> %endmacro
  3229                              <3> 	 	
  3230                              <3> %macro int16toreg 2
  3231                              <3> 	int16toreg cs, %1, %2
  3232                              <3> %endmacro
  3233                              <3> 
  3234                              <3> %macro regtoint16 2
  3235                              <3> 	regtoint16 %1, cs, %2
  3236                              <3> %endmacro
  3237                              <3> 
  3238                              <3> %macro vstosb 4
  3239                              <3> 	push %1
  3240                              <3> 	pop ds
  3241                              <3> 	mov si,%2
  3242                              <3> 	add si,%3
  3243                              <3> 	mov byte [si],%4	
  3244                              <3> %endmacro
  3245                              <3> 
  3246                              <3> %macro vlodsb 4
  3247                              <3> 	push %1
  3248                              <3> 	pop ds
  3249                              <3> 	mov si,%2
  3250                              <3> 	add si,%3
  3251                              <3> 	mov byte %4,[si]	
  3252                              <3> %endmacro 	 
  3253                              <3> 
  3254                              <3> %macro int16toreg 3
  3255                              <3> 	push %2
  3256                              <3> 	push %1
  3257                              <3> 	pop ds
  3258                              <3> 	pop si
  3259                              <3> 	mov word %3,[si]	
  3260                              <3> %endmacro
  3261                              <3> 
  3262                              <3> %macro regtoint16 3
  3263                              <3> 	push %3
  3264                              <3> 	push %2
  3265                              <3> 	pop ds
  3266                              <3> 	pop si
  3267                              <3> 	mov word [si],%1	
  3268                              <3> %endmacro
  3269                              <3> 
  3270                              <3> %macro mov32 2
  3271                              <3> 	mov32 cs, %1, cs, %2
  3272                              <3> %endmacro
  3273                              <3> 
  3274                              <3> %macro mov16 2
  3275                              <3> 	mov16 cs, %1, cs, %2
  3276                              <3> %endmacro
  3277                              <3> 
  3278                              <3> %macro mov32 4
  3279                              <3> 	mov ax,%3
  3280                              <3> 	mov ds,ax
  3281                              <3> 	mov cx,[%4+2]
  3282                              <3> 	mov dx,[%4]
  3283                              <3> 	mov ax,%1
  3284                              <3> 	mov ds,ax
  3285                              <3> 	mov [%2+2],cx
  3286                              <3> 	mov [%2],dx
  3287                              <3> %endmacro
  3288                              <3> 
  3289                              <3> %macro mov16 4
  3290                              <3> 	mov ax,%3
  3291                              <3> 	mov ds,ax
  3292                              <3> 	mov bx,[%4]
  3293                              <3> 	mov ax,%1
  3294                              <3> 	mov ds,ax
  3295                              <3> 	mov [%2],bx
  3296                              <3> %endmacro
  3297                              <3>  	 	
  3298                              <3> %macro mformat 4
  3299                              <3> 	stkopen 8
  3300                              <3> 	mov word [ bp + 0 ], %1
  3301                              <3> 	mov word [ bp + 2 ], %2
  3302                              <3> 	mov word [ bp + 4 ], %3
  3303                              <3> 	mov word [ bp + 6 ], %4
  3304                              <3> 	call kernel_segment:mformat
  3305                              <3> 	stkclose 8
  3306                              <3> %endmacro
  3307                              <3> 
  3308                              <3> %macro malloc 6
  3309                              <3> 	stkopen 0Bh
  3310                              <3> 	mov word [ bp + 4 ], %3
  3311                              <3> 	mov word [ bp + 6 ], %4
  3312                              <3> 	mov word [ bp + 8 ], %5	
  3313                              <3> 	call kernel_segment:malloc
  3314                              <3> 	push sp
  3315                              <3> 	pop bp
  3316                              <3> 	mov word %1, [ bp ]
  3317                              <3> 	mov word %2, [ bp + 2 ]
  3318                              <3> 	mov byte %6, [ bp + 0x0A ]
  3319                              <3> 	stkclose 0Bh
  3320                              <3> %endmacro 	
  3321                              <3> 
  3322                              <3> %macro laddr 2
  3323                              <3> 	laddr %1, %2, %1, %2
  3324                              <3> %endmacro
  3325                              <3> 
  3326                              <3> %macro faddr 2
  3327                              <3> 	faddr %1, %2, %1, %2
  3328                              <3> %endmacro
  3329                              <3>  	
  3330                              <3> %macro laddr 4
  3331                              <3> 	stkopen 8
  3332                              <3> 	mov word [ bp + 4 ], %3
  3333                              <3> 	mov word [ bp + 6 ], %4	
  3334                              <3> 	call kernel_segment:laddr
  3335                              <3> 	push sp
  3336                              <3> 	pop bp
  3337                              <3> 	mov word %1, [ bp + 0 ]
  3338                              <3> 	mov word %2, [ bp + 2 ]	
  3339                              <3> 	stkclose 8
  3340                              <3> %endmacro
  3341                              <3> 
  3342                              <3> %macro faddr 4
  3343                              <3> 	stkopen 8
  3344                              <3> 	mov word [ bp + 4 ], %3
  3345                              <3> 	mov word [ bp + 6 ], %4	
  3346                              <3> 	call kernel_segment:faddr
  3347                              <3> 	push sp
  3348                              <3> 	pop bp
  3349                              <3> 	mov word %1, [ bp + 0 ]
  3350                              <3> 	mov word %2, [ bp + 2 ]	
  3351                              <3> 	stkclose 8
  3352                              <3> %endmacro	
  3353                              <3>  
  3354                              <3> 
  3355                              <3> %macro stkopen 1		
  3356                              <3> 	sub word sp, %1
  3357                              <3> 	push sp
  3358                              <3> 	pop bp
  3359                              <3> %endmacro
  3360                              <3> 
  3361                              <3> %macro stkclose 1
  3362                              <3> 	add word sp, %1
  3363                              <3> %endmacro
  3364                              <3> 
  3365                              <3> %macro stkload 1-* 	
  3366                              <3>  	%rep %0
  3367                              <3>  	 	%rotate -1
  3368                              <3>  		pop %1
  3369                              <3>  	%endrep
  3370                              <3>  	%rep %0
  3371                              <3>  		push %1
  3372                              <3>  		%rotate 1
  3373                              <3>  	%endrep
  3374                              <3> %endmacro
  3375                              <3> 
  3376                              <3> %macro stkpush 1-* 	
  3377                              <3>  	%rep %0
  3378                              <3>  		push %1
  3379                              <3>  		%rotate 1
  3380                              <3>  	%endrep 	
  3381                              <3> %endmacro
  3382                              <3>  
  3383                              <3> %macro stkpop 1-*
  3384                              <3>  	%rep %0
  3385                              <3>  	 	%rotate -1
  3386                              <3>  		pop %1
  3387                              <3>  	%endrep 	 	
  3388                              <3> %endmacro
  3389                              <3> 
  3390                              <3> %endif 
  3391                              <2> 	%include "lib/math.mac"
  3392                              <3> 
  3393                              <3> %ifndef MATH_MAC
  3394                              <3> 	%define MATH_MAC
  3395                              <3> 	
  3396                              <3> 	%include "lib/math.asm"
  3397                              <3> 	%include "lib/system.mac"
  3398                              <3> 
  3399                              <3> %macro chgsig 1
  3400                              <3> 	chgsig cs, %1
  3401                              <3> %endmacro
  3402                              <3> 
  3403                              <3> %macro cmp16 3
  3404                              <3> 	cmp16 cs, %1, cs, %2, %3
  3405                              <3> %endmacro
  3406                              <3> 
  3407                              <3> %macro mul16 2
  3408                              <3> 	mul16 cs, %1, cs, %2
  3409                              <3> %endmacro
  3410                              <3> 
  3411                              <3> %macro div16 2
  3412                              <3> 	div16 cs, %1, cs, %2
  3413                              <3> %endmacro
  3414                              <3> 
  3415                              <3> %macro mod16 2
  3416                              <3> 	mod16 cs, %1, cs, %2
  3417                              <3> %endmacro
  3418                              <3> 
  3419                              <3> %macro inc16 1
  3420                              <3> 	inc16 cs, %1
  3421                              <3> %endmacro
  3422                              <3> 
  3423                              <3> %macro dec16 1
  3424                              <3> 	dec16 cs, %1
  3425                              <3> %endmacro
  3426                              <3> 
  3427                              <3> %macro add16 2
  3428                              <3> 	add16 cs, %1, cs, %2
  3429                              <3> %endmacro
  3430                              <3> 
  3431                              <3> %macro sub16 2
  3432                              <3> 	sub16 cs, %1, cs, %2
  3433                              <3> %endmacro
  3434                              <3> 
  3435                              <3> %macro int32to16 2
  3436                              <3> 	int32to16 cs, %1, %2
  3437                              <3> %endmacro
  3438                              <3> 
  3439                              <3> %macro int16to32 2
  3440                              <3> 	int16to32 %1, cs, %2
  3441                              <3> %endmacro
  3442                              <3> 
  3443                              <3> %macro setsig 1
  3444                              <3> 	setsig cs, %1
  3445                              <3> %endmacro
  3446                              <3> 
  3447                              <3> %macro clrsig 1
  3448                              <3> 	clrsig cs, %1
  3449                              <3> %endmacro
  3450                              <3> 
  3451                              <3> %macro idiv32 5
  3452                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  3453                              <3> %endmacro
  3454                              <3> 
  3455                              <3> %macro imul32 3
  3456                              <3> 	imul32 cs, %1, cs, %2, cs, %3
  3457                              <3> %endmacro
  3458                              <3> 
  3459                              <3> %macro div32 5
  3460                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  3461                              <3> %endmacro
  3462                              <3> 
  3463                              <3> %macro mul32 3
  3464                              <3> 	mul32 cs, %1, cs, %2, cs, %3
  3465                              <3> %endmacro
  3466                              <3> 	
  3467                              <3> %macro add32 3
  3468                              <3> 	add32 cs, %1, cs, %2, cs, %3
  3469                              <3> %endmacro
  3470                              <3> 
  3471                              <3> %macro sub32 3
  3472                              <3> 	sub32 cs, %1, cs, %2, cs, %3
  3473                              <3> %endmacro
  3474                              <3> 
  3475                              <3> %macro int32to16 3
  3476                              <3> 	stkopen 0x06
  3477                              <3> 	mov ax,%1
  3478                              <3> 	mov ds,ax
  3479                              <3> 	mov ax,[%2+2]
  3480                              <3> 	mov word [bp+0], ax
  3481                              <3> 	mov ax,[%2]	
  3482                              <3> 	mov word [bp+2], ax
  3483                              <3> 	call proc_int32to16
  3484                              <3> 	mov ax,sp
  3485                              <3> 	mov bp,ax
  3486                              <3> 	mov ax,[bp+4]
  3487                              <3> 	mov word %3, ax	
  3488                              <3> 	stkclose 0x06
  3489                              <3> %endmacro
  3490                              <3> 
  3491                              <3> %macro int16to32 3
  3492                              <3> 	stkopen 0x06
  3493                              <3> 	mov word [bp+0], %1	
  3494                              <3> 	call proc_int16to32
  3495                              <3> 	mov ax,sp
  3496                              <3> 	mov bp,ax
  3497                              <3> 	mov ax,%2
  3498                              <3> 	mov ds,ax
  3499                              <3> 	mov ax,[bp+2]
  3500                              <3> 	mov [%3+2],ax
  3501                              <3> 	mov ax,[bp+4]
  3502                              <3> 	mov [%3],ax	
  3503                              <3> 	stkclose 0x06
  3504                              <3> %endmacro
  3505                              <3> 
  3506                              <3> %macro setsig 2
  3507                              <3> 	stkopen 0x02
  3508                              <3> 	mov ax,%1
  3509                              <3> 	mov ds,ax
  3510                              <3> 	mov ax,[%2+2]
  3511                              <3> 	mov word [bp+0], ax
  3512                              <3> 	call proc_setsig
  3513                              <3> 	mov ax,sp
  3514                              <3> 	mov bp,ax
  3515                              <3> 	mov ax,%1
  3516                              <3> 	mov ds,ax
  3517                              <3> 	mov ax,[bp+0]
  3518                              <3> 	mov word [%2+2], ax
  3519                              <3> 	stkclose 0x02
  3520                              <3> %endmacro
  3521                              <3> 
  3522                              <3> %macro clrsig 2
  3523                              <3> 	stkopen 0x02
  3524                              <3> 	mov ax,%1
  3525                              <3> 	mov ds,ax
  3526                              <3> 	mov ax,[%2+2]
  3527                              <3> 	mov word [bp+0], ax
  3528                              <3> 	call proc_clrsig
  3529                              <3> 	mov ax,sp
  3530                              <3> 	mov bp,ax
  3531                              <3> 	mov ax,%1
  3532                              <3> 	mov ds,ax
  3533                              <3> 	mov ax,[bp+0]
  3534                              <3> 	mov word [%2+2], ax
  3535                              <3> 	stkclose 0x02
  3536                              <3> %endmacro
  3537                              <3> 
  3538                              <3> %macro div32 10
  3539                              <3> 	stkopen 0x11
  3540                              <3> 	mov ax,%1
  3541                              <3> 	mov ds,ax
  3542                              <3> 	mov ax,[%2+2]
  3543                              <3> 	mov word [bp+0], ax
  3544                              <3> 	mov ax,[%2]
  3545                              <3> 	mov word [bp+2], ax
  3546                              <3> 	mov ax,%3
  3547                              <3> 	mov ds,ax
  3548                              <3> 	mov ax,[%4+2]
  3549                              <3> 	mov word [bp+4], ax
  3550                              <3> 	mov ax,[%4]
  3551                              <3> 	mov word [bp+6], ax
  3552                              <3> 	call proc_div32
  3553                              <3> 	mov ax,sp
  3554                              <3> 	mov bp,ax
  3555                              <3> 	mov ax,%5
  3556                              <3> 	mov ds,ax
  3557                              <3> 	mov word ax, [bp+8]
  3558                              <3> 	mov word [%6+2], ax
  3559                              <3> 	mov word ax, [bp+0x0A]
  3560                              <3> 	mov word [%6], ax
  3561                              <3> 	mov ax,%7
  3562                              <3> 	mov ds,ax
  3563                              <3> 	mov word ax,[bp+0x0C]
  3564                              <3> 	mov word [%8+2],ax
  3565                              <3> 	mov word ax,[bp+0x0E]
  3566                              <3> 	mov word [%8],ax
  3567                              <3> 	mov ax,%9
  3568                              <3> 	mov ds,ax
  3569                              <3> 	mov byte al,[bp+0x10]
  3570                              <3> 	mov byte [%10],al
  3571                              <3> 	stkclose 0x11
  3572                              <3> %endmacro
  3573                              <3> 	
  3574                              <3> %macro mul32 6
  3575                              <3> 	stkopen 0x0C
  3576                              <3> 	mov ax,%1
  3577                              <3> 	mov ds,ax
  3578                              <3> 	mov ax,[%2+2]
  3579                              <3> 	mov word [bp+0], ax
  3580                              <3> 	mov ax,[%2]
  3581                              <3> 	mov word [bp+2], ax
  3582                              <3> 	mov ax,%3
  3583                              <3> 	mov ds,ax
  3584                              <3> 	mov ax,[%4+2]
  3585                              <3> 	mov word [bp+4], ax
  3586                              <3> 	mov ax,[%4]
  3587                              <3> 	mov word [bp+6], ax
  3588                              <3> 	call proc_mul32
  3589                              <3> 	mov ax,sp
  3590                              <3> 	mov bp,ax
  3591                              <3> 	mov ax,%5
  3592                              <3> 	mov ds,ax
  3593                              <3> 	mov word ax, [bp+8]
  3594                              <3> 	mov word [%6+2], ax
  3595                              <3> 	mov word ax, [bp+0x0A]
  3596                              <3> 	mov word [%6], ax
  3597                              <3> 	stkclose 0x0C
  3598                              <3> %endmacro	
  3599                              <3> 	
  3600                              <3> %macro add32 6
  3601                              <3> 	stkopen 0x0C
  3602                              <3> 	mov ax,%1
  3603                              <3> 	mov ds,ax
  3604                              <3> 	mov ax,[%2+2]
  3605                              <3> 	mov word [bp+0], ax
  3606                              <3> 	mov ax,[%2]
  3607                              <3> 	mov word [bp+2], ax
  3608                              <3> 	mov ax,%3
  3609                              <3> 	mov ds,ax
  3610                              <3> 	mov ax,[%4+2]
  3611                              <3> 	mov word [bp+4], ax
  3612                              <3> 	mov ax,[%4]
  3613                              <3> 	mov word [bp+6], ax
  3614                              <3> 	call proc_add32
  3615                              <3> 	mov ax,sp
  3616                              <3> 	mov bp,ax
  3617                              <3> 	mov ax,%5
  3618                              <3> 	mov ds,ax
  3619                              <3> 	mov word ax, [bp+8]
  3620                              <3> 	mov word [%6+2], ax
  3621                              <3> 	mov word ax, [bp+0x0A]
  3622                              <3> 	mov word [%6], ax
  3623                              <3> 	stkclose 0x0C
  3624                              <3> %endmacro
  3625                              <3> 
  3626                              <3> %macro sub32 6
  3627                              <3> 	stkopen 0x0C
  3628                              <3> 	mov ax,%1
  3629                              <3> 	mov ds,ax
  3630                              <3> 	mov ax,[%2+2]
  3631                              <3> 	mov word [bp+0], ax
  3632                              <3> 	mov ax,[%2]
  3633                              <3> 	mov word [bp+2], ax
  3634                              <3> 	mov ax,%3
  3635                              <3> 	mov ds,ax
  3636                              <3> 	mov ax,[%4+2]
  3637                              <3> 	mov word [bp+4], ax
  3638                              <3> 	mov ax,[%4]
  3639                              <3> 	mov word [bp+6], ax
  3640                              <3> 	call proc_sub32
  3641                              <3> 	mov ax,sp
  3642                              <3> 	mov bp,ax
  3643                              <3> 	mov ax,%5
  3644                              <3> 	mov ds,ax
  3645                              <3> 	mov word ax, [bp+8]
  3646                              <3> 	mov word [%6+2], ax
  3647                              <3> 	mov word ax, [bp+0x0A]
  3648                              <3> 	mov word [%6], ax
  3649                              <3> 	stkclose 0x0C
  3650                              <3> %endmacro
  3651                              <3> 
  3652                              <3> %macro idiv32 10
  3653                              <3> 	stkopen 0x11
  3654                              <3> 	mov ax,%1
  3655                              <3> 	mov ds,ax
  3656                              <3> 	mov ax,[%2+2]
  3657                              <3> 	mov word [bp+0], ax
  3658                              <3> 	mov ax,[%2]
  3659                              <3> 	mov word [bp+2], ax
  3660                              <3> 	mov ax,%3
  3661                              <3> 	mov ds,ax
  3662                              <3> 	mov ax,[%4+2]
  3663                              <3> 	mov word [bp+4], ax
  3664                              <3> 	mov ax,[%4]
  3665                              <3> 	mov word [bp+6], ax
  3666                              <3> 	call proc_idiv32
  3667                              <3> 	mov ax,sp
  3668                              <3> 	mov bp,ax
  3669                              <3> 	mov ax,%5
  3670                              <3> 	mov ds,ax
  3671                              <3> 	mov word ax, [bp+8]
  3672                              <3> 	mov word [%6+2], ax
  3673                              <3> 	mov word ax, [bp+0x0A]
  3674                              <3> 	mov word [%6], ax
  3675                              <3> 	mov ax,%7
  3676                              <3> 	mov ds,ax
  3677                              <3> 	mov word ax,[bp+0x0C]
  3678                              <3> 	mov word [%8+2],ax
  3679                              <3> 	mov word ax,[bp+0x0E]
  3680                              <3> 	mov word [%8],ax
  3681                              <3> 	mov ax,%9
  3682                              <3> 	mov ds,ax
  3683                              <3> 	mov byte al,[bp+0x10]
  3684                              <3> 	mov byte [%10],al
  3685                              <3> 	stkclose 0x11
  3686                              <3> %endmacro
  3687                              <3> 
  3688                              <3> %macro imul32 6
  3689                              <3> 	stkopen 0x0C
  3690                              <3> 	mov ax,%1
  3691                              <3> 	mov ds,ax
  3692                              <3> 	mov ax,[%2+2]
  3693                              <3> 	mov word [bp+0], ax
  3694                              <3> 	mov ax,[%2]
  3695                              <3> 	mov word [bp+2], ax
  3696                              <3> 	mov ax,%3
  3697                              <3> 	mov ds,ax
  3698                              <3> 	mov ax,[%4+2]
  3699                              <3> 	mov word [bp+4], ax
  3700                              <3> 	mov ax,[%4]
  3701                              <3> 	mov word [bp+6], ax
  3702                              <3> 	call proc_imul32
  3703                              <3> 	mov ax,sp
  3704                              <3> 	mov bp,ax
  3705                              <3> 	mov ax,%5
  3706                              <3> 	mov ds,ax
  3707                              <3> 	mov word ax, [bp+8]
  3708                              <3> 	mov word [%6+2], ax
  3709                              <3> 	mov word ax, [bp+0x0A]
  3710                              <3> 	mov word [%6], ax
  3711                              <3> 	stkclose 0x0C
  3712                              <3> %endmacro
  3713                              <3> 	
  3714                              <3> %macro cmp32 3
  3715                              <3> 	cmp32 cs, %1, cs, %2, %3
  3716                              <3> %endmacro	
  3717                              <3> 	
  3718                              <3> %macro cmp32 5
  3719                              <3> 	stkopen 9
  3720                              <3> 	mov ax,%1
  3721                              <3> 	mov ds,ax
  3722                              <3> 	mov word ax,[%2+2]
  3723                              <3> 	mov word [bp+0], ax
  3724                              <3> 	mov word ax,[%2]
  3725                              <3> 	mov word [bp+2], ax	
  3726                              <3> 	mov ax,%3
  3727                              <3> 	mov ds,ax
  3728                              <3> 	mov word ax,[%4+2]
  3729                              <3> 	mov word [bp+4], ax
  3730                              <3> 	mov word ax,[%4]
  3731                              <3> 	mov word [bp+6], ax	
  3732                              <3> 	call proc_cmp32
  3733                              <3> 	mov ax,sp
  3734                              <3> 	mov bp,ax
  3735                              <3> 	mov al,[bp+8]
  3736                              <3> 	mov byte %5,al
  3737                              <3> 	stkclose 9
  3738                              <3> %endmacro
  3739                              <3> 	
  3740                              <3> %macro shl32 2
  3741                              <3> 	shl32 cs, %1, %2
  3742                              <3> %endmacro	
  3743                              <3> 	
  3744                              <3> %macro shl32 3
  3745                              <3> 	stkopen 5
  3746                              <3> 	mov ax,%1
  3747                              <3> 	mov ds,ax
  3748                              <3> 	mov word ax,[%2+2]
  3749                              <3> 	mov word [bp+0], ax
  3750                              <3> 	mov word ax,[%2]
  3751                              <3> 	mov word [bp+2], ax
  3752                              <3> 	mov byte al, %3
  3753                              <3> 	mov byte [bp+4], al 
  3754                              <3> 	call proc_shl32
  3755                              <3> 	mov ax,sp
  3756                              <3> 	mov bp,ax
  3757                              <3> 	mov ax,%1
  3758                              <3> 	mov ds,ax
  3759                              <3> 	mov ax,[bp+0]
  3760                              <3> 	mov word [%2+2],ax
  3761                              <3> 	mov ax,[bp+2]
  3762                              <3> 	mov word [%2],ax
  3763                              <3> 	stkclose 5
  3764                              <3> %endmacro
  3765                              <3> 
  3766                              <3> 
  3767                              <3> %macro shr32 2
  3768                              <3> 	shr32 cs, %1, %2
  3769                              <3> %endmacro	
  3770                              <3> 	
  3771                              <3> %macro shr32 3
  3772                              <3> 	stkopen 5
  3773                              <3> 	mov ax,%1
  3774                              <3> 	mov ds,ax
  3775                              <3> 	mov word ax,[%2+2]
  3776                              <3> 	mov word [bp+0], ax
  3777                              <3> 	mov word ax,[%2]
  3778                              <3> 	mov word [bp+2], ax
  3779                              <3> 	mov byte al, %3
  3780                              <3> 	mov byte [bp+4], al 
  3781                              <3> 	call proc_shr32
  3782                              <3> 	mov ax,sp
  3783                              <3> 	mov bp,ax
  3784                              <3> 	mov ax,%1
  3785                              <3> 	mov ds,ax
  3786                              <3> 	mov ax,[bp+0]
  3787                              <3> 	mov word [%2+2],ax
  3788                              <3> 	mov ax,[bp+2]
  3789                              <3> 	mov word [%2],ax
  3790                              <3> 	stkclose 5
  3791                              <3> %endmacro
  3792                              <3> 
  3793                              <3> %macro inc16 2
  3794                              <3> 	mov ax,%1
  3795                              <3> 	mov ds,ax
  3796                              <3> 	inc word [%2]
  3797                              <3> %endmacro
  3798                              <3> 
  3799                              <3> %macro dec16 2
  3800                              <3> 	mov ax,%1
  3801                              <3> 	mov ds,ax
  3802                              <3> 	dec word [%2]
  3803                              <3> %endmacro
  3804                              <3> 
  3805                              <3> %macro add16 4	
  3806                              <3> 	mov ax,%3
  3807                              <3> 	mov ds,ax
  3808                              <3> 	mov bx,[%4]	
  3809                              <3> 	mov ax,%1
  3810                              <3> 	mov ds,ax	
  3811                              <3> 	add [%2],bx
  3812                              <3> %endmacro
  3813                              <3> 
  3814                              <3> %macro sub16 4
  3815                              <3> 	mov ax,%3
  3816                              <3> 	mov ds,ax
  3817                              <3> 	mov bx,[%4]
  3818                              <3> 	mov ax,%1
  3819                              <3> 	mov ds,ax
  3820                              <3> 	sub [%2],bx
  3821                              <3> %endmacro
  3822                              <3> 
  3823                              <3> %macro mul16 4
  3824                              <3> 	mov ax,%1
  3825                              <3> 	mov ds,ax
  3826                              <3> 	mov bx,[%2]
  3827                              <3> 	mov ax,%3
  3828                              <3> 	mov ds,ax
  3829                              <3> 	mov cx,[%4]
  3830                              <3> 	
  3831                              <3> 	mov ax,bx
  3832                              <3> 	imul cx
  3833                              <3> 	
  3834                              <3> 	mov dx,%1
  3835                              <3> 	mov ds,dx
  3836                              <3> 	mov [%2],ax
  3837                              <3> %endmacro
  3838                              <3> 
  3839                              <3> %macro div16 4
  3840                              <3> 	mov ax,%1
  3841                              <3> 	mov ds,ax
  3842                              <3> 	mov bx,[%2]
  3843                              <3> 	mov ax,%3
  3844                              <3> 	mov ds,ax
  3845                              <3> 	mov cx,[%4]
  3846                              <3> 	
  3847                              <3> 	xor dx,dx
  3848                              <3> 	mov ax,bx
  3849                              <3> 	idiv cx
  3850                              <3> 	
  3851                              <3> 	mov dx,%1
  3852                              <3> 	mov ds,dx
  3853                              <3> 	mov [%2],ax
  3854                              <3> %endmacro
  3855                              <3> 
  3856                              <3> 
  3857                              <3> %macro mod16 4
  3858                              <3> 	mov ax,%1
  3859                              <3> 	mov ds,ax
  3860                              <3> 	mov bx,[%2]
  3861                              <3> 	mov ax,%3
  3862                              <3> 	mov ds,ax
  3863                              <3> 	mov cx,[%4]
  3864                              <3> 	
  3865                              <3> 	xor dx,dx
  3866                              <3> 	mov ax,bx
  3867                              <3> 	idiv cx
  3868                              <3> 	
  3869                              <3> 	mov bx,%1
  3870                              <3> 	mov ds,bx
  3871                              <3> 	mov [%2],dx
  3872                              <3> %endmacro
  3873                              <3> 
  3874                              <3> %macro cmp16 5
  3875                              <3> 	mov ax,%1
  3876                              <3> 	mov ds,ax
  3877                              <3> 	mov bx,[%2]
  3878                              <3> 	mov ax,%3
  3879                              <3> 	mov ds,ax
  3880                              <3> 	mov	cx,[%4]
  3881                              <3> 	
  3882                              <3> 	cmp bx,cx
  3883                              <3> 	jg %%above
  3884                              <3> 	jl %%below
  3885                              <3> 		mov byte %5, 0
  3886                              <3> 		jmp %%endcmp
  3887                              <3> 	%%above:
  3888                              <3> 		mov byte %5, 1
  3889                              <3> 		jmp %%endcmp
  3890                              <3> 	%%below:
  3891                              <3> 		mov byte %5, -1
  3892                              <3> 	%%endcmp:
  3893                              <3> %endmacro
  3894                              <3> 
  3895                              <3> %macro chgsig 2
  3896                              <3> 	mov ax,%1
  3897                              <3> 	mov ds,ax
  3898                              <3> 	mov ax,[%2]
  3899                              <3> 	mov bx,0xFFFF
  3900                              <3> 	sub bx,ax
  3901                              <3> 	inc bx
  3902                              <3> 	mov [%2],bx
  3903                              <3> %endmacro
  3904                              <3> 	
  3905                              <3> %endif
  3906                              <2> 	
  3907                              <2> %macro __fltoint16 3
  3908                              <2> 	stkopen 0x06
  3909                              <2> 	mov word [bp+0],%1
  3910                              <2> 	mov word [bp+2],%2
  3911                              <2> 	call proc_fltoint16
  3912                              <2> 	push sp
  3913                              <2> 	pop bp
  3914                              <2> 	mov word %3,[bp+4]
  3915                              <2> 	stkclose 0x06
  3916                              <2> %endmacro
  3917                              <2> 
  3918                              <2> %macro __int16tofl 3	
  3919                              <2> 	stkopen 0x06
  3920                              <2> 	mov word [bp+0],%1
  3921                              <2> 	call proc_int16tofl
  3922                              <2> 	push sp
  3923                              <2> 	pop bp
  3924                              <2> 	mov word %2,[bp+2]
  3925                              <2> 	mov word %3,[bp+4]
  3926                              <2> 	stkclose 0x06
  3927                              <2> %endmacro
  3928                              <2> 		
  3929                              <2> %macro __fltoint32 4
  3930                              <2> 	stkopen 0x08
  3931                              <2> 	mov word [bp+0],%1
  3932                              <2> 	mov word [bp+2],%2
  3933                              <2> 	call proc_fltoint32
  3934                              <2> 	push sp
  3935                              <2> 	pop bp
  3936                              <2> 	mov word %3,[bp+4]
  3937                              <2> 	mov word %4,[bp+6]
  3938                              <2> 	stkclose 0x08
  3939                              <2> %endmacro
  3940                              <2> 
  3941                              <2> %macro __int32tofl 4
  3942                              <2> 	stkopen 0x08
  3943                              <2> 	mov word [bp+0],%1
  3944                              <2> 	mov word [bp+2],%2
  3945                              <2> 	call proc_int32tofl
  3946                              <2> 	push sp
  3947                              <2> 	pop bp
  3948                              <2> 	mov word %3,[bp+4]
  3949                              <2> 	mov word %4,[bp+6]
  3950                              <2> 	stkclose 0x08
  3951                              <2> %endmacro	
  3952                              <2> 
  3953                              <2> %macro __flcmp 5
  3954                              <2> 	stkopen 0x09
  3955                              <2> 	mov word [bp+0],%1
  3956                              <2> 	mov word [bp+2],%2
  3957                              <2> 	mov word [bp+4],%3
  3958                              <2> 	mov word [bp+6],%4
  3959                              <2> 	call proc_flcmp
  3960                              <2> 	push sp
  3961                              <2> 	pop bp
  3962                              <2> 	mov byte %5, [bp+8]
  3963                              <2> 	stkclose 0x09
  3964                              <2> %endmacro
  3965                              <2> 	
  3966                              <2> %macro __flshl 1
  3967                              <2> 	stkopen 0x02
  3968                              <2> 	mov word [bp+0],%1
  3969                              <2> 	call proc_flshl
  3970                              <2> 	push sp
  3971                              <2> 	pop bp
  3972                              <2> 	mov word %1,[bp+0]
  3973                              <2> 	stkclose 0x02
  3974                              <2> %endmacro	
  3975                              <2> 
  3976                              <2> %macro __flshr 1
  3977                              <2> 	stkopen 0x02
  3978                              <2> 	mov word [bp+0],%1
  3979                              <2> 	call proc_flshr
  3980                              <2> 	push sp
  3981                              <2> 	pop bp
  3982                              <2> 	mov word %1,[bp+0]
  3983                              <2> 	stkclose 0x02
  3984                              <2> %endmacro	
  3985                              <2> 	
  3986                              <2> %macro __fladd 6
  3987                              <2> 	stkopen 0x0E
  3988                              <2> 	mov word [bp+0],%1
  3989                              <2> 	mov word [bp+2],%2
  3990                              <2> 	mov word [bp+4],%3
  3991                              <2> 	mov word [bp+6],%4
  3992                              <2> 	mov word [bp+0x0C],0
  3993                              <2> 	call proc_fladdorsub
  3994                              <2> 	push sp
  3995                              <2> 	pop bp
  3996                              <2> 	mov word %5,[bp+8]
  3997                              <2> 	mov word %6,[bp+0x0A]
  3998                              <2> 	stkclose 0x0E
  3999                              <2> %endmacro
  4000                              <2> 
  4001                              <2> %macro __flsub 6
  4002                              <2> 	stkopen 0x0E
  4003                              <2> 	mov word [bp+0],%1
  4004                              <2> 	mov word [bp+2],%2
  4005                              <2> 	mov word [bp+4],%3
  4006                              <2> 	mov word [bp+6],%4
  4007                              <2> 	mov word [bp+0x0C],0x8000
  4008                              <2> 	call proc_fladdorsub
  4009                              <2> 	push sp
  4010                              <2> 	pop bp
  4011                              <2> 	mov word %5,[bp+8]
  4012                              <2> 	mov word %6,[bp+0x0A]
  4013                              <2> 	stkclose 0x0E
  4014                              <2> %endmacro
  4015                              <2> 
  4016                              <2> %macro __flmul 6
  4017                              <2> 	stkopen 0x0E
  4018                              <2> 	mov word [bp+0],%1
  4019                              <2> 	mov word [bp+2],%2
  4020                              <2> 	mov word [bp+4],%3
  4021                              <2> 	mov word [bp+6],%4
  4022                              <2> 	call proc_flmul
  4023                              <2> 	push sp
  4024                              <2> 	pop bp
  4025                              <2> 	mov word %5,[bp+8]
  4026                              <2> 	mov word %6,[bp+0x0A]
  4027                              <2> 	stkclose 0x0E
  4028                              <2> %endmacro
  4029                              <2> 
  4030                              <2> %macro __fldiv 6
  4031                              <2> 	stkopen 0x0E
  4032                              <2> 	mov word [bp+0],%1
  4033                              <2> 	mov word [bp+2],%2
  4034                              <2> 	mov word [bp+4],%3
  4035                              <2> 	mov word [bp+6],%4
  4036                              <2> 	call proc_fldiv
  4037                              <2> 	push sp
  4038                              <2> 	pop bp
  4039                              <2> 	mov word %5,[bp+8]
  4040                              <2> 	mov word %6,[bp+0x0A]
  4041                              <2> 	stkclose 0x0E
  4042                              <2> %endmacro
  4043                              <2> 
  4044                              <2> %macro __validate 7
  4045                              <2> 	stkopen 0x0D
  4046                              <2> 	mov word [bp+0],%1
  4047                              <2> 	mov word [bp+2],%2
  4048                              <2> 	mov word [bp+4],%3
  4049                              <2> 	mov word [bp+6],%4
  4050                              <2> 	call proc__validate
  4051                              <2> 	push sp
  4052                              <2> 	pop bp
  4053                              <2> 	mov word %5,[bp+8]
  4054                              <2> 	mov word %6,[bp+0x0A]
  4055                              <2> 	mov byte %7,[bp+0x0C]
  4056                              <2> 	stkclose 0x0D
  4057                              <2> %endmacro
  4058                              <2> 
  4059                              <2> %macro __div_validate 7
  4060                              <2> 	stkopen 0x0D
  4061                              <2> 	mov word [bp+0],%1
  4062                              <2> 	mov word [bp+2],%2
  4063                              <2> 	mov word [bp+4],%3
  4064                              <2> 	mov word [bp+6],%4
  4065                              <2> 	call proc__div_validate
  4066                              <2> 	push sp
  4067                              <2> 	pop bp
  4068                              <2> 	mov word %5,[bp+8]
  4069                              <2> 	mov word %6,[bp+0x0A]
  4070                              <2> 	mov byte %7,[bp+0x0C]
  4071                              <2> 	stkclose 0x0D
  4072                              <2> %endmacro
  4073                              <2> 
  4074                              <2> %macro __mul_validate 5
  4075                              <2> 	stkopen 0x09
  4076                              <2> 	mov word [bp+0],%1
  4077                              <2> 	mov word [bp+2],%2
  4078                              <2> 	call proc__mul_validate
  4079                              <2> 	push sp
  4080                              <2> 	pop bp
  4081                              <2> 	mov word %3,[bp+4]
  4082                              <2> 	mov word %4,[bp+6]
  4083                              <2> 	mov byte %5,[bp+8]
  4084                              <2> 	stkclose 0x09
  4085                              <2> %endmacro
  4086                              <2> 
  4087                              <2> %macro __addorsub_validate 7
  4088                              <2> 	stkopen 0x0D
  4089                              <2> 	mov word [bp+0],%1
  4090                              <2> 	mov word [bp+2],%2
  4091                              <2> 	mov word [bp+4],%3
  4092                              <2> 	mov word [bp+6],%4
  4093                              <2> 	call proc__addorsub_validate
  4094                              <2> 	push sp
  4095                              <2> 	pop bp
  4096                              <2> 	mov word %5,[bp+8]
  4097                              <2> 	mov word %6,[bp+0x0A]
  4098                              <2> 	mov byte %7,[bp+0x0C]
  4099                              <2> 	stkclose 0x0D
  4100                              <2> %endmacro
  4101                              <2> 
  4102                              <2> %macro __iaddorsub32 7
  4103                              <2> 	stkopen 0x0D
  4104                              <2> 	mov word [bp+0],%1
  4105                              <2> 	mov word [bp+2],%2
  4106                              <2> 	mov word [bp+4],%3
  4107                              <2> 	mov word [bp+6],%4
  4108                              <2> 	mov word [bp+0x0C], %7
  4109                              <2> 	call proc__iaddorsub32
  4110                              <2> 	push sp
  4111                              <2> 	pop bp
  4112                              <2> 	mov word %5,[bp+8]
  4113                              <2> 	mov word %6,[bp+0x0A]
  4114                              <2> 	stkclose 0x0D
  4115                              <2> %endmacro
  4116                              <2> 
  4117                              <2> %macro __fldiv32 6
  4118                              <2> 	stkopen 0x11
  4119                              <2> 	mov word [bp+0],%1
  4120                              <2> 	mov word [bp+2],%2
  4121                              <2> 	mov word [bp+4],%3
  4122                              <2> 	mov word [bp+6],%4
  4123                              <2> 	call proc__fldiv32
  4124                              <2> 	push sp
  4125                              <2> 	pop bp
  4126                              <2> 	mov word %5,[bp+8]
  4127                              <2> 	mov word %6,[bp+0x0A]
  4128                              <2> 	stkclose 0x11
  4129                              <2> %endmacro
  4130                              <2> 
  4131                              <2> %macro __mul32_64 8
  4132                              <2> 	stkopen 0x10
  4133                              <2> 	mov word [bp+0],%1
  4134                              <2> 	mov word [bp+2],%2
  4135                              <2> 	mov word [bp+4],%3
  4136                              <2> 	mov word [bp+6],%4
  4137                              <2> 	call proc__mul32_64
  4138                              <2> 	push sp
  4139                              <2> 	pop bp
  4140                              <2> 	mov word %5,[bp+8]
  4141                              <2> 	mov word %6,[bp+0x0A]
  4142                              <2> 	mov word %7,[bp+0x0C]
  4143                              <2> 	mov word %8,[bp+0x0E]
  4144                              <2> 	stkclose 0x10
  4145                              <2> %endmacro
  4146                              <2> 
  4147                              <2> %macro __normalize 3
  4148                              <2> 	stkopen 0x06
  4149                              <2> 	mov word [bp+0],%1
  4150                              <2> 	mov word [bp+2],%2
  4151                              <2> 	mov word [bp+4],%3
  4152                              <2> 	call proc__normalize
  4153                              <2> 	push sp
  4154                              <2> 	pop bp
  4155                              <2> 	mov word %1,[bp+0]
  4156                              <2> 	mov word %2,[bp+2]
  4157                              <2> 	stkclose 0x06
  4158                              <2> %endmacro
  4159                              <2> 
  4160                              <2> %macro __setsig 3
  4161                              <2> 	stkopen 0x0C
  4162                              <2> 	mov word [bp+0],%1
  4163                              <2> 	mov word [bp+2],%2
  4164                              <2> 	call proc_setsig
  4165                              <2> 	push sp
  4166                              <2> 	pop bp
  4167                              <2> 	mov word %2,[bp+4]
  4168                              <2> 	stkclose 0x0C
  4169                              <2> %endmacro
  4170                              <2> 	
  4171                              <2> section .data
  4172                              <2> 
  4173                              <2> proc_fltoint16:
  4174 000009F1 89E0                <2> 	mov ax,sp
  4175 000009F3 89C5                <2> 	mov bp,ax
  4176                              <2> 	
  4177 000009F5 8B4602              <2> 	mov ax,[bp+2]
  4178 000009F8 8B5E04              <2> 	mov bx,[bp+4]
  4179                              <2> 	__fltoint32 ax, ax, ax, bx
  4180                              <3>  stkopen 0x08
  4181 000009FB 83EC08              <4>  sub word sp, %1
  4182 000009FE 54                  <4>  push sp
  4183 000009FF 5D                  <4>  pop bp
  4184 00000A00 894600              <3>  mov word [bp+0],%1
  4185 00000A03 894602              <3>  mov word [bp+2],%2
  4186 00000A06 E86A00              <3>  call proc_fltoint32
  4187 00000A09 54                  <3>  push sp
  4188 00000A0A 5D                  <3>  pop bp
  4189 00000A0B 8B4604              <3>  mov word %3,[bp+4]
  4190 00000A0E 8B5E06              <3>  mov word %4,[bp+6]
  4191                              <3>  stkclose 0x08
  4192 00000A11 83C408              <4>  add word sp, %1
  4193                              <2> 	__int32to16 ax, bx, cx
  4194                              <3>  stkopen 0x06
  4195 00000A14 83EC06              <4>  sub word sp, %1
  4196 00000A17 54                  <4>  push sp
  4197 00000A18 5D                  <4>  pop bp
  4198 00000A19 894600              <3>  mov word [bp+0], %1
  4199 00000A1C 895E02              <3>  mov word [bp+2], %2
  4200 00000A1F E871FA              <3>  call proc_int32to16
  4201 00000A22 54                  <3>  push sp
  4202 00000A23 5D                  <3>  pop bp
  4203 00000A24 8B4E04              <3>  mov word %3, [bp+4]
  4204                              <3>  stkclose 0x06
  4205 00000A27 83C406              <4>  add word sp, %1
  4206                              <2> 	
  4207 00000A2A 89E0                <2> 	mov ax,sp
  4208 00000A2C 89C5                <2> 	mov bp,ax
  4209 00000A2E 894E06              <2> 	mov [bp+6],cx
  4210                              <2> 	
  4211 00000A31 C3                  <2> 	ret
  4212                              <2> 	
  4213                              <2> proc_int16tofl:
  4214 00000A32 89E0                <2> 	mov ax,sp
  4215 00000A34 89C5                <2> 	mov bp,ax
  4216                              <2> 	
  4217 00000A36 8B4602              <2> 	mov ax,[bp+2]
  4218                              <2> 	__int16to32 ax, ax, bx
  4219                              <3>  stkopen 0x06
  4220 00000A39 83EC06              <4>  sub word sp, %1
  4221 00000A3C 54                  <4>  push sp
  4222 00000A3D 5D                  <4>  pop bp
  4223 00000A3E 894600              <3>  mov word [bp+0],%1
  4224 00000A41 E827FA              <3>  call proc_int16to32
  4225 00000A44 54                  <3>  push sp
  4226 00000A45 5D                  <3>  pop bp
  4227 00000A46 8B4602              <3>  mov word %2, [bp+2]
  4228 00000A49 8B5E04              <3>  mov word %3, [bp+4]
  4229                              <3>  stkclose 0x06
  4230 00000A4C 83C406              <4>  add word sp, %1
  4231                              <2> 	__int32tofl ax, bx, cx, dx
  4232                              <3>  stkopen 0x08
  4233 00000A4F 83EC08              <4>  sub word sp, %1
  4234 00000A52 54                  <4>  push sp
  4235 00000A53 5D                  <4>  pop bp
  4236 00000A54 894600              <3>  mov word [bp+0],%1
  4237 00000A57 895E02              <3>  mov word [bp+2],%2
  4238 00000A5A E88B00              <3>  call proc_int32tofl
  4239 00000A5D 54                  <3>  push sp
  4240 00000A5E 5D                  <3>  pop bp
  4241 00000A5F 8B4E04              <3>  mov word %3,[bp+4]
  4242 00000A62 8B5606              <3>  mov word %4,[bp+6]
  4243                              <3>  stkclose 0x08
  4244 00000A65 83C408              <4>  add word sp, %1
  4245                              <2> 	
  4246 00000A68 89E0                <2> 	mov ax,sp
  4247 00000A6A 89C5                <2> 	mov bp,ax
  4248 00000A6C 894E04              <2> 	mov [bp+4],cx
  4249 00000A6F 895606              <2> 	mov [bp+6],dx
  4250                              <2> 
  4251 00000A72 C3                  <2> 	ret
  4252                              <2> 
  4253                              <2> proc_fltoint32:
  4254 00000A73 89E0                <2> 	mov ax,sp
  4255 00000A75 89C5                <2> 	mov bp,ax
  4256                              <2> 
  4257 00000A77 8B4602              <2> 	mov ax,[bp+2]
  4258 00000A7A 8B5E04              <2> 	mov bx,[bp+4]
  4259 00000A7D 25FF7F              <2> 	and ax,0x7FFF
  4260 00000A80 09D8                <2> 	or ax,bx
  4261 00000A82 83F800              <2> 	cmp ax,0
  4262 00000A85 7510                <2> 	jnz .continue
  4263                              <2> 	.zero:
  4264 00000A87 8B4602              <2> 		mov ax,[bp+2]
  4265 00000A8A 250080              <2> 		and ax,0x8000
  4266 00000A8D 894606              <2> 		mov word [bp+6],ax
  4267 00000A90 C746080000          <2> 		mov word [bp+8],0
  4268 00000A95 EB50                <2> 		jmp .done
  4269                              <2> 	.continue:
  4270                              <2> 	
  4271 00000A97 8B4E02              <2> 	mov cx,[bp+2]
  4272 00000A9A D1E1                <2> 	shl cx,1
  4273 00000A9C 80ED7F              <2> 	sub ch,0x7F
  4274 00000A9F 80FD00              <2> 	cmp ch,0
  4275 00000AA2 7CE3                <2> 	jl .zero
  4276                              <2> 	
  4277 00000AA4 B117                <2> 	mov cl,23	
  4278 00000AA6 38CD                <2> 	cmp ch,cl
  4279 00000AA8 7302                <2> 	jae .endexp
  4280 00000AAA 28E9                <2> 		sub cl,ch
  4281                              <2> 	.endexp:
  4282                              <2> 	
  4283 00000AAC 8B4602              <2> 	mov ax,[bp+2]
  4284 00000AAF 83E07F              <2> 	and ax,0x007F
  4285 00000AB2 0D8000              <2> 	or ax,0x0080
  4286                              <2> 	
  4287 00000AB5 8B5E04              <2> 	mov bx,[bp+4]
  4288                              <2> 		
  4289                              <2> 	__shr32 ax, bx, cl
  4290                              <3>  stkopen 5
  4291 00000AB8 83EC05              <4>  sub word sp, %1
  4292 00000ABB 54                  <4>  push sp
  4293 00000ABC 5D                  <4>  pop bp
  4294 00000ABD 894600              <3>  mov word [bp+0], %1
  4295 00000AC0 895E02              <3>  mov word [bp+2], %2
  4296 00000AC3 884E04              <3>  mov byte [bp+4], %3
  4297 00000AC6 E834FD              <3>  call proc_shr32
  4298 00000AC9 54                  <3>  push sp
  4299 00000ACA 5D                  <3>  pop bp
  4300 00000ACB 8B4600              <3>  mov word %1, [bp+0]
  4301 00000ACE 8B5E02              <3>  mov word %2, [bp+2]
  4302                              <3>  stkclose 5
  4303 00000AD1 83C405              <4>  add word sp, %1
  4304                              <2> 		
  4305 00000AD4 89E2                <2> 	mov dx,sp
  4306 00000AD6 89D5                <2> 	mov bp,dx
  4307                              <2> 	
  4308 00000AD8 8B4E02              <2> 	mov cx,[bp+2]
  4309 00000ADB 81E10080            <2> 	and cx,0x8000
  4310 00000ADF 01C8                <2> 	add ax,cx
  4311                              <2> 	 
  4312 00000AE1 894606              <2> 	mov [bp+6],ax
  4313 00000AE4 895E08              <2> 	mov [bp+8],bx
  4314                              <2> 	
  4315                              <2> 	.done:
  4316                              <2> 	
  4317 00000AE7 C3                  <2> 	ret
  4318                              <2> 	
  4319                              <2> proc_int32tofl:
  4320 00000AE8 89E0                <2> 	mov ax,sp
  4321 00000AEA 89C5                <2> 	mov bp,ax
  4322                              <2> 	
  4323 00000AEC 8B4602              <2> 	mov ax,[bp+2]
  4324 00000AEF 8B5E04              <2> 	mov bx,[bp+4]
  4325                              <2> 	
  4326 00000AF2 89C1                <2> 	mov cx,ax
  4327 00000AF4 81E1FF7F            <2> 	and cx,0x7FFF
  4328 00000AF8 09D9                <2> 	or cx,bx
  4329 00000AFA 83F900              <2> 	cmp cx,0
  4330 00000AFD 7511                <2> 	jnz .continue
  4331 00000AFF 8B4602              <2> 		mov ax,[bp+2]
  4332 00000B02 250080              <2> 		and ax,0x8000
  4333 00000B05 894606              <2> 		mov word [bp+6],ax
  4334 00000B08 C746080000          <2> 		mov word [bp+8],0
  4335 00000B0D E99100              <2> 		jmp .done
  4336                              <2> 	.continue:
  4337                              <2> 	
  4338 00000B10 83E07F              <2> 	and ax,0x007F	
  4339                              <2> 	
  4340 00000B13 894606              <2> 	mov [bp+6],ax
  4341 00000B16 895E08              <2> 	mov [bp+8],bx	
  4342                              <2> 		
  4343                              <2> 	__lzbitcount32 ax, bx, ch		
  4344 00000B19 53                  <3>  push %2
  4345                              <3>  __lzbitcount16 %1, cl
  4346                              <4>  stkopen 3
  4347 00000B1A 83EC03              <5>  sub word sp, %1
  4348 00000B1D 54                  <5>  push sp
  4349 00000B1E 5D                  <5>  pop bp
  4350 00000B1F 894600              <4>  mov word [bp+0], %1
  4351 00000B22 E85DFD              <4>  call proc__lzbitcount16
  4352 00000B25 54                  <4>  push sp
  4353 00000B26 5D                  <4>  pop bp
  4354 00000B27 8A4E02              <4>  mov byte %2, [bp+2]
  4355                              <4>  stkclose 3
  4356 00000B2A 83C403              <5>  add word sp, %1
  4357 00000B2D 58                  <3>  pop ax
  4358 00000B2E 80F910              <3>  cmp cl,16
  4359 00000B31 7217                <3>  jb .end
  4360 00000B33 51                  <3>  push cx
  4361                              <3>  __lzbitcount16 ax, al
  4362                              <4>  stkopen 3
  4363 00000B34 83EC03              <5>  sub word sp, %1
  4364 00000B37 54                  <5>  push sp
  4365 00000B38 5D                  <5>  pop bp
  4366 00000B39 894600              <4>  mov word [bp+0], %1
  4367 00000B3C E843FD              <4>  call proc__lzbitcount16
  4368 00000B3F 54                  <4>  push sp
  4369 00000B40 5D                  <4>  pop bp
  4370 00000B41 8A4602              <4>  mov byte %2, [bp+2]
  4371                              <4>  stkclose 3
  4372 00000B44 83C403              <5>  add word sp, %1
  4373 00000B47 59                  <3>  pop cx
  4374 00000B48 00C1                <3>  add cl,al
  4375                              <3>  .end:
  4376 00000B4A 88CD                <3>  mov byte %3, cl
  4377 00000B4C B120                <2> 	mov cl,32
  4378 00000B4E 28E9                <2> 	sub cl,ch
  4379                              <2> 	
  4380 00000B50 80F918              <2> 	cmp cl,24
  4381 00000B53 732C                <2> 	jae .endmantissa
  4382                              <2> 	
  4383 00000B55 B218                <2> 	mov dl,24
  4384 00000B57 28CA                <2> 	sub dl,cl				
  4385                              <2> 	
  4386 00000B59 89E0                <2> 	mov ax,sp
  4387 00000B5B 89C5                <2> 	mov bp,ax
  4388 00000B5D 8B4606              <2> 	mov ax,[bp+6]
  4389 00000B60 8B5E08              <2> 	mov bx,[bp+8]
  4390                              <2> 	
  4391 00000B63 51                  <2> 	push cx	
  4392                              <2> 	__shl32 ax, bx, dl	
  4393                              <3>  stkopen 5
  4394 00000B64 83EC05              <4>  sub word sp, %1
  4395 00000B67 54                  <4>  push sp
  4396 00000B68 5D                  <4>  pop bp
  4397 00000B69 894600              <3>  mov word [bp+0], %1
  4398 00000B6C 895E02              <3>  mov word [bp+2], %2
  4399 00000B6F 885604              <3>  mov byte [bp+4], %3
  4400 00000B72 E841FC              <3>  call proc_shl32
  4401 00000B75 54                  <3>  push sp
  4402 00000B76 5D                  <3>  pop bp
  4403 00000B77 8B4600              <3>  mov word %1, [bp+0]
  4404 00000B7A 8B5E02              <3>  mov word %2, [bp+2]
  4405                              <3>  stkclose 5
  4406 00000B7D 83C405              <4>  add word sp, %1
  4407 00000B80 59                  <2> 	pop cx
  4408                              <2> 	
  4409                              <2> 	.endmantissa:
  4410                              <2> 	
  4411 00000B81 83E07F              <2> 	and ax,0x007F
  4412                              <2> 		
  4413 00000B84 80C17E              <2> 	add cl,0x7E
  4414 00000B87 C1E108              <2> 	shl cx,8
  4415 00000B8A D1E9                <2> 	shr cx,1
  4416 00000B8C 01C8                <2> 	add ax,cx
  4417                              <2> 	
  4418 00000B8E 89E1                <2> 	mov cx,sp
  4419 00000B90 89CD                <2> 	mov bp,cx
  4420                              <2> 	
  4421 00000B92 8B4E02              <2> 	mov cx,[bp+2]
  4422 00000B95 81E10080            <2> 	and cx,0x8000	
  4423 00000B99 01C8                <2> 	add ax,cx
  4424                              <2> 		
  4425 00000B9B 894606              <2> 	mov [bp+6],ax
  4426 00000B9E 895E08              <2> 	mov [bp+8],bx
  4427                              <2> 	
  4428                              <2> 	.done:		
  4429                              <2> 	
  4430 00000BA1 C3                  <2> 	ret
  4431                              <2> 	
  4432                              <2> proc_flcmp:
  4433 00000BA2 89E0                <2> 	mov ax,sp
  4434 00000BA4 89C5                <2> 	mov bp,ax
  4435                              <2> 	
  4436 00000BA6 8B4602              <2> 	mov ax,[bp+2]
  4437 00000BA9 8B5E06              <2> 	mov bx,[bp+6]
  4438 00000BAC 250080              <2> 	and ax,0x8000
  4439 00000BAF 81E30080            <2> 	and bx,0x8000	
  4440 00000BB3 39D8                <2> 	cmp ax,bx
  4441 00000BB5 7740                <2> 	ja .above
  4442 00000BB7 7242                <2> 	jb .below
  4443                              <2> 	
  4444 00000BB9 8B4602              <2> 	mov ax,[bp+2]
  4445 00000BBC 8B5E06              <2> 	mov bx,[bp+6]
  4446 00000BBF D1E0                <2> 	shl ax,1
  4447 00000BC1 D1E3                <2> 	shl bx,1
  4448 00000BC3 38FC                <2> 	cmp ah,bh
  4449 00000BC5 7730                <2> 	ja .above
  4450 00000BC7 7232                <2> 	jb .below
  4451                              <2> 	
  4452 00000BC9 8B4602              <2> 	mov ax,[bp+2]
  4453 00000BCC 8B5E04              <2> 	mov bx,[bp+4]
  4454 00000BCF 8B4E06              <2> 	mov cx,[bp+6]
  4455 00000BD2 8B5608              <2> 	mov dx,[bp+8]
  4456                              <2> 	
  4457                              <2> 	__cmp32 ax, bx, cx, dx, cl
  4458                              <3>  stkopen 9
  4459 00000BD5 83EC09              <4>  sub word sp, %1
  4460 00000BD8 54                  <4>  push sp
  4461 00000BD9 5D                  <4>  pop bp
  4462 00000BDA 894600              <3>  mov word [bp+0], %1
  4463 00000BDD 895E02              <3>  mov word [bp+2], %2
  4464 00000BE0 894E04              <3>  mov word [bp+4], %3
  4465 00000BE3 895606              <3>  mov word [bp+6], %4
  4466 00000BE6 E8A2FB              <3>  call proc_cmp32
  4467 00000BE9 54                  <3>  push sp
  4468 00000BEA 5D                  <3>  pop bp
  4469 00000BEB 8A4E08              <3>  mov byte %5, [bp+8]
  4470                              <3>  stkclose 9
  4471 00000BEE 83C409              <4>  add word sp, %1
  4472 00000BF1 89E0                <2> 	mov ax,sp
  4473 00000BF3 89C5                <2> 	mov bp,ax
  4474 00000BF5 EB0A                <2> 	jmp .endcmp
  4475                              <2> 		
  4476                              <2> 	.above:
  4477 00000BF7 B101                <2> 		mov cl, 1
  4478 00000BF9 EB06                <2> 		jmp .endcmp
  4479                              <2> 	.below:
  4480 00000BFB B1FF                <2> 		mov cl, -1
  4481 00000BFD EB02                <2> 		jmp .endcmp
  4482                              <2> 	.equal:	
  4483 00000BFF B100                <2> 		mov cl, 0	
  4484                              <2> 	.endcmp:
  4485                              <2> 	
  4486 00000C01 884E0A              <2> 	mov byte [bp+0x0A], cl
  4487                              <2> 					
  4488 00000C04 C3                  <2> 	ret
  4489                              <2> 
  4490                              <2> proc_flshl:
  4491 00000C05 89E0                <2> 	mov ax,sp
  4492 00000C07 89C5                <2> 	mov bp,ax
  4493                              <2> 	
  4494 00000C09 8B4602              <2> 	mov ax,[bp+2]
  4495 00000C0C 25807F              <2> 	and ax,0x7F80
  4496 00000C0F D1E0                <2> 	shl ax,1
  4497 00000C11 FEC4                <2> 	inc ah	
  4498 00000C13 D1E8                <2> 	shr ax,1
  4499                              <2> 	
  4500 00000C15 8B5E02              <2> 	mov bx,[bp+2]
  4501 00000C18 81E37F80            <2> 	and bx,0x807F
  4502 00000C1C 01C3                <2> 	add bx,ax
  4503                              <2> 	
  4504 00000C1E 895E02              <2> 	mov [bp+2],bx		
  4505                              <2> 	
  4506 00000C21 C3                  <2> 	ret
  4507                              <2> 
  4508                              <2> proc_flshr:
  4509 00000C22 89E0                <2> 	mov ax,sp
  4510 00000C24 89C5                <2> 	mov bp,ax
  4511                              <2> 	
  4512 00000C26 8B4602              <2> 	mov ax,[bp+2]
  4513 00000C29 25807F              <2> 	and ax,0x7F80
  4514 00000C2C D1E0                <2> 	shl ax,1
  4515 00000C2E FECC                <2> 	dec ah	
  4516 00000C30 D1E8                <2> 	shr ax,1
  4517                              <2> 	
  4518 00000C32 8B5E02              <2> 	mov bx,[bp+2]
  4519 00000C35 81E37F80            <2> 	and bx,0x807F
  4520 00000C39 01C3                <2> 	add bx,ax
  4521                              <2> 	
  4522 00000C3B 895E02              <2> 	mov [bp+2],bx	
  4523                              <2> 	
  4524 00000C3E C3                  <2> 	ret
  4525                              <2> 
  4526                              <2> proc_fldiv:
  4527 00000C3F 89E0                <2> 	mov ax,sp
  4528 00000C41 89C5                <2> 	mov bp,ax
  4529                              <2> 				
  4530                              <2> 	; sinal
  4531                              <2> 	
  4532 00000C43 8B4602              <2> 	mov ax,[bp+2]
  4533 00000C46 8B5E06              <2> 	mov bx,[bp+6]
  4534 00000C49 250080              <2> 	and ax,0x8000
  4535 00000C4C 81E30080            <2> 	and bx,0x8000
  4536 00000C50 31D8                <2> 	xor ax,bx
  4537 00000C52 89460A              <2> 	mov word [bp+0x0A],ax
  4538                              <2> 		
  4539                              <2> 	; sinal calculado e setado
  4540                              <2> 
  4541                              <2> 	; valores especiais
  4542                              <2> 	
  4543 00000C55 8B4602              <2> 	mov ax,[bp+2]
  4544 00000C58 8B5E04              <2> 	mov bx,[bp+4]
  4545 00000C5B 8B4E06              <2> 	mov cx,[bp+6]
  4546 00000C5E 8B5608              <2> 	mov dx,[bp+8]
  4547                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  4548                              <3>  stkopen 0x0D
  4549 00000C61 83EC0D              <4>  sub word sp, %1
  4550 00000C64 54                  <4>  push sp
  4551 00000C65 5D                  <4>  pop bp
  4552 00000C66 894600              <3>  mov word [bp+0],%1
  4553 00000C69 895E02              <3>  mov word [bp+2],%2
  4554 00000C6C 894E04              <3>  mov word [bp+4],%3
  4555 00000C6F 895606              <3>  mov word [bp+6],%4
  4556 00000C72 E8FC06              <3>  call proc__validate
  4557 00000C75 54                  <3>  push sp
  4558 00000C76 5D                  <3>  pop bp
  4559 00000C77 8B4608              <3>  mov word %5,[bp+8]
  4560 00000C7A 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4561 00000C7D 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4562                              <3>  stkclose 0x0D
  4563 00000C80 83C40D              <4>  add word sp, %1
  4564 00000C83 80F900              <2> 	cmp cl,0
  4565 00000C86 750D                <2> 	jnz .continue
  4566 00000C88 89E2                <2> 		mov dx,sp
  4567 00000C8A 89D5                <2> 		mov bp,dx
  4568 00000C8C 01460A              <2> 		add word [bp+0x0A],ax
  4569 00000C8F 895E0C              <2> 		mov word [bp+0x0C],bx						
  4570 00000C92 E9C800              <2> 		jmp .done	
  4571                              <2> 	.continue:
  4572                              <2> 	
  4573 00000C95 89E0                <2> 	mov ax,sp
  4574 00000C97 89C5                <2> 	mov bp,ax
  4575 00000C99 8B4602              <2> 	mov ax,[bp+2]
  4576 00000C9C 8B5E04              <2> 	mov bx,[bp+4]
  4577 00000C9F 8B4E06              <2> 	mov cx,[bp+6]
  4578 00000CA2 8B5608              <2> 	mov dx,[bp+8]
  4579                              <2> 	__div_validate ax, bx, cx, dx, ax, bx, cl
  4580                              <3>  stkopen 0x0D
  4581 00000CA5 83EC0D              <4>  sub word sp, %1
  4582 00000CA8 54                  <4>  push sp
  4583 00000CA9 5D                  <4>  pop bp
  4584 00000CAA 894600              <3>  mov word [bp+0],%1
  4585 00000CAD 895E02              <3>  mov word [bp+2],%2
  4586 00000CB0 894E04              <3>  mov word [bp+4],%3
  4587 00000CB3 895606              <3>  mov word [bp+6],%4
  4588 00000CB6 E81F07              <3>  call proc__div_validate
  4589 00000CB9 54                  <3>  push sp
  4590 00000CBA 5D                  <3>  pop bp
  4591 00000CBB 8B4608              <3>  mov word %5,[bp+8]
  4592 00000CBE 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4593 00000CC1 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4594                              <3>  stkclose 0x0D
  4595 00000CC4 83C40D              <4>  add word sp, %1
  4596 00000CC7 80F900              <2> 	cmp cl,0
  4597 00000CCA 750D                <2> 	jnz .continue2
  4598 00000CCC 89E2                <2> 		mov dx,sp
  4599 00000CCE 89D5                <2> 		mov bp,dx
  4600 00000CD0 01460A              <2> 		add word [bp+0x0A],ax
  4601 00000CD3 895E0C              <2> 		mov word [bp+0x0C],bx				
  4602 00000CD6 E98400              <2> 		jmp .done	
  4603                              <2> 	.continue2:
  4604                              <2> 	; valores especiais tratados
  4605                              <2> 			
  4606                              <2> 	; expoente parcial
  4607                              <2> 
  4608 00000CD9 89E0                <2> 	mov ax,sp
  4609 00000CDB 89C5                <2> 	mov bp,ax
  4610 00000CDD 8B4602              <2> 	mov ax,[bp+2]
  4611 00000CE0 8B5E06              <2> 	mov bx,[bp+6]
  4612 00000CE3 25807F              <2> 	and ax,0x7F80
  4613 00000CE6 81E3807F            <2> 	and bx,0x7F80
  4614 00000CEA D1E0                <2> 	shl ax,1
  4615 00000CEC D1E3                <2> 	shl bx,1		
  4616                              <2> 			
  4617 00000CEE 28FC                <2> 	sub ah,bh		
  4618 00000CF0 80C47F              <2> 	add ah,0x7F
  4619                              <2> 	
  4620 00000CF3 50                  <2> 	push ax
  4621                              <2> 		
  4622                              <2> 	; expoente parcial calculado
  4623                              <2> 	
  4624                              <2> 	; mantissa
  4625                              <2> 
  4626 00000CF4 8B4602              <2> 	mov ax,[bp+2]
  4627 00000CF7 8B5E04              <2> 	mov bx,[bp+4]
  4628 00000CFA 8B4E06              <2> 	mov cx,[bp+6]
  4629 00000CFD 8B5608              <2> 	mov dx,[bp+8]
  4630 00000D00 83E07F              <2> 	and ax,0x007F
  4631 00000D03 83E17F              <2> 	and cx,0x007F
  4632 00000D06 0D8000              <2> 	or ax,0x0080
  4633 00000D09 81C98000            <2> 	or cx,0x0080
  4634                              <2> 	
  4635                              <2> 	__fldiv32 ax, bx, cx, dx, cx, dx
  4636                              <3>  stkopen 0x11
  4637 00000D0D 83EC11              <4>  sub word sp, %1
  4638 00000D10 54                  <4>  push sp
  4639 00000D11 5D                  <4>  pop bp
  4640 00000D12 894600              <3>  mov word [bp+0],%1
  4641 00000D15 895E02              <3>  mov word [bp+2],%2
  4642 00000D18 894E04              <3>  mov word [bp+4],%3
  4643 00000D1B 895606              <3>  mov word [bp+6],%4
  4644 00000D1E E87505              <3>  call proc__fldiv32
  4645 00000D21 54                  <3>  push sp
  4646 00000D22 5D                  <3>  pop bp
  4647 00000D23 8B4E08              <3>  mov word %5,[bp+8]
  4648 00000D26 8B560A              <3>  mov word %6,[bp+0x0A]
  4649                              <3>  stkclose 0x11
  4650 00000D29 83C411              <4>  add word sp, %1
  4651                              <2> 		
  4652 00000D2C 89E0                <2> 	mov ax,sp
  4653 00000D2E 89C5                <2> 	mov bp,ax
  4654 00000D30 83C502              <2> 	add bp,2
  4655                              <2> 	
  4656 00000D33 034E0A              <2> 	add cx,[bp+0x0A]
  4657                              <2> 			
  4658 00000D36 58                  <2> 	pop ax	
  4659                              <2> 	__normalize cx, dx, ax
  4660                              <3>  stkopen 0x06
  4661 00000D37 83EC06              <4>  sub word sp, %1
  4662 00000D3A 54                  <4>  push sp
  4663 00000D3B 5D                  <4>  pop bp
  4664 00000D3C 894E00              <3>  mov word [bp+0],%1
  4665 00000D3F 895602              <3>  mov word [bp+2],%2
  4666 00000D42 894604              <3>  mov word [bp+4],%3
  4667 00000D45 E8B303              <3>  call proc__normalize
  4668 00000D48 54                  <3>  push sp
  4669 00000D49 5D                  <3>  pop bp
  4670 00000D4A 8B4E00              <3>  mov word %1,[bp+0]
  4671 00000D4D 8B5602              <3>  mov word %2,[bp+2]
  4672                              <3>  stkclose 0x06
  4673 00000D50 83C406              <4>  add word sp, %1
  4674                              <2> 	
  4675 00000D53 89E0                <2> 	mov ax,sp
  4676 00000D55 89C5                <2> 	mov bp,ax
  4677 00000D57 894E0A              <2> 	mov [bp+0x0A],cx
  4678 00000D5A 89560C              <2> 	mov [bp+0x0C],dx
  4679                              <2> 	
  4680                              <2> 	.done:
  4681                              <2> 			
  4682 00000D5D C3                  <2> 	ret
  4683                              <2> 
  4684                              <2> proc_flmul:
  4685 00000D5E 89E0                <2> 	mov ax,sp
  4686 00000D60 89C5                <2> 	mov bp,ax
  4687                              <2> 	
  4688                              <2> 	; sinal
  4689                              <2> 	
  4690 00000D62 8B4602              <2> 	mov ax,[bp+2]
  4691 00000D65 8B5E06              <2> 	mov bx,[bp+6]
  4692 00000D68 250080              <2> 	and ax,0x8000
  4693 00000D6B 81E30080            <2> 	and bx,0x8000
  4694 00000D6F 31D8                <2> 	xor ax,bx
  4695 00000D71 89460A              <2> 	mov word [bp+0x0A],ax
  4696                              <2> 	
  4697                              <2> 	; sinal calculado e setado
  4698                              <2> 
  4699                              <2> 	; valores especiais
  4700                              <2> 
  4701 00000D74 8B4602              <2> 	mov ax,[bp+2]
  4702 00000D77 8B5E04              <2> 	mov bx,[bp+4]
  4703 00000D7A 8B4E06              <2> 	mov cx,[bp+6]
  4704 00000D7D 8B5608              <2> 	mov dx,[bp+8]
  4705                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  4706                              <3>  stkopen 0x0D
  4707 00000D80 83EC0D              <4>  sub word sp, %1
  4708 00000D83 54                  <4>  push sp
  4709 00000D84 5D                  <4>  pop bp
  4710 00000D85 894600              <3>  mov word [bp+0],%1
  4711 00000D88 895E02              <3>  mov word [bp+2],%2
  4712 00000D8B 894E04              <3>  mov word [bp+4],%3
  4713 00000D8E 895606              <3>  mov word [bp+6],%4
  4714 00000D91 E8DD05              <3>  call proc__validate
  4715 00000D94 54                  <3>  push sp
  4716 00000D95 5D                  <3>  pop bp
  4717 00000D96 8B4608              <3>  mov word %5,[bp+8]
  4718 00000D99 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4719 00000D9C 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4720                              <3>  stkclose 0x0D
  4721 00000D9F 83C40D              <4>  add word sp, %1
  4722 00000DA2 80F900              <2> 	cmp cl,0
  4723 00000DA5 750D                <2> 	jnz .continue
  4724 00000DA7 89E2                <2> 		mov dx,sp
  4725 00000DA9 89D5                <2> 		mov bp,dx
  4726 00000DAB 01460A              <2> 		add word [bp+0x0A],ax
  4727 00000DAE 895E0C              <2> 		mov word [bp+0x0C],bx						
  4728 00000DB1 E95501              <2> 		jmp .done	
  4729                              <2> 	.continue:
  4730                              <2> 
  4731 00000DB4 89E0                <2> 	mov ax,sp
  4732 00000DB6 89C5                <2> 	mov bp,ax
  4733 00000DB8 8B4602              <2> 	mov ax,[bp+2]
  4734 00000DBB 8B4E06              <2> 	mov cx,[bp+6]
  4735                              <2> 	__mul_validate ax, cx, ax, bx, cl
  4736                              <3>  stkopen 0x09
  4737 00000DBE 83EC09              <4>  sub word sp, %1
  4738 00000DC1 54                  <4>  push sp
  4739 00000DC2 5D                  <4>  pop bp
  4740 00000DC3 894600              <3>  mov word [bp+0],%1
  4741 00000DC6 894E02              <3>  mov word [bp+2],%2
  4742 00000DC9 E86606              <3>  call proc__mul_validate
  4743 00000DCC 54                  <3>  push sp
  4744 00000DCD 5D                  <3>  pop bp
  4745 00000DCE 8B4604              <3>  mov word %3,[bp+4]
  4746 00000DD1 8B5E06              <3>  mov word %4,[bp+6]
  4747 00000DD4 8A4E08              <3>  mov byte %5,[bp+8]
  4748                              <3>  stkclose 0x09
  4749 00000DD7 83C409              <4>  add word sp, %1
  4750 00000DDA 80F900              <2> 	cmp cl,0
  4751 00000DDD 750D                <2> 	jnz .continue2
  4752 00000DDF 89E2                <2> 		mov dx,sp
  4753 00000DE1 89D5                <2> 		mov bp,dx
  4754 00000DE3 01460A              <2> 		add word [bp+0x0A],ax
  4755 00000DE6 895E0C              <2> 		mov word [bp+0x0C],bx				
  4756 00000DE9 E91D01              <2> 		jmp .done	
  4757                              <2> 	.continue2:
  4758                              <2> 	; valores especiais tratados
  4759                              <2> 		
  4760                              <2> 	; expoente parcial
  4761                              <2> 
  4762 00000DEC 89E0                <2> 	mov ax,sp
  4763 00000DEE 89C5                <2> 	mov bp,ax
  4764 00000DF0 8B4602              <2> 	mov ax,[bp+2]
  4765 00000DF3 8B5E06              <2> 	mov bx,[bp+6]
  4766 00000DF6 25807F              <2> 	and ax,0x7F80
  4767 00000DF9 81E3807F            <2> 	and bx,0x7F80
  4768 00000DFD D1E0                <2> 	shl ax,1
  4769 00000DFF D1E3                <2> 	shl bx,1		
  4770                              <2> 			
  4771 00000E01 80EC7F              <2> 	sub ah,0x7F
  4772 00000E04 80EF7F              <2> 	sub bh,0x7F
  4773                              <2> 				
  4774 00000E07 00FC                <2> 	add ah,bh
  4775 00000E09 80C47F              <2> 	add ah,0x7F
  4776                              <2> 	
  4777 00000E0C 50                  <2> 	push ax
  4778                              <2> 	
  4779                              <2> 	; expoente parcial calculado	
  4780                              <2> 	
  4781                              <2> 	; mantissa
  4782                              <2> 	
  4783 00000E0D 8B4602              <2> 	mov ax,[bp+2]
  4784 00000E10 8B5E04              <2> 	mov bx,[bp+4]
  4785 00000E13 8B4E06              <2> 	mov cx,[bp+6]
  4786 00000E16 8B5608              <2> 	mov dx,[bp+8]	
  4787                              <2> 	
  4788 00000E19 83E07F              <2> 	and ax, 0x007F
  4789 00000E1C 83E17F              <2> 	and cx, 0x007F
  4790 00000E1F 0D8000              <2> 	or ax, 0x0080
  4791 00000E22 81C98000            <2> 	or cx, 0x0080
  4792                              <2> 		
  4793                              <2> 	__mul32_64 ax, bx, cx, dx, ax, bx, cx, dx
  4794                              <3>  stkopen 0x10
  4795 00000E26 83EC10              <4>  sub word sp, %1
  4796 00000E29 54                  <4>  push sp
  4797 00000E2A 5D                  <4>  pop bp
  4798 00000E2B 894600              <3>  mov word [bp+0],%1
  4799 00000E2E 895E02              <3>  mov word [bp+2],%2
  4800 00000E31 894E04              <3>  mov word [bp+4],%3
  4801 00000E34 895606              <3>  mov word [bp+6],%4
  4802 00000E37 E81104              <3>  call proc__mul32_64
  4803 00000E3A 54                  <3>  push sp
  4804 00000E3B 5D                  <3>  pop bp
  4805 00000E3C 8B4608              <3>  mov word %5,[bp+8]
  4806 00000E3F 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4807 00000E42 8B4E0C              <3>  mov word %7,[bp+0x0C]
  4808 00000E45 8B560E              <3>  mov word %8,[bp+0x0E]
  4809                              <3>  stkclose 0x10
  4810 00000E48 83C410              <4>  add word sp, %1
  4811                              <2> 	
  4812 00000E4B 51                  <2> 	push cx
  4813                              <2> 	__shl32 ax, bx, 8
  4814                              <3>  stkopen 5
  4815 00000E4C 83EC05              <4>  sub word sp, %1
  4816 00000E4F 54                  <4>  push sp
  4817 00000E50 5D                  <4>  pop bp
  4818 00000E51 894600              <3>  mov word [bp+0], %1
  4819 00000E54 895E02              <3>  mov word [bp+2], %2
  4820 00000E57 C6460408            <3>  mov byte [bp+4], %3
  4821 00000E5B E858F9              <3>  call proc_shl32
  4822 00000E5E 54                  <3>  push sp
  4823 00000E5F 5D                  <3>  pop bp
  4824 00000E60 8B4600              <3>  mov word %1, [bp+0]
  4825 00000E63 8B5E02              <3>  mov word %2, [bp+2]
  4826                              <3>  stkclose 5
  4827 00000E66 83C405              <4>  add word sp, %1
  4828 00000E69 59                  <2> 	pop cx
  4829 00000E6A 88EB                <2> 	mov bl,ch
  4830                              <2> 								
  4831 00000E6C 50                  <2> 	push ax
  4832 00000E6D 53                  <2> 	push bx
  4833                              <2> 	__lzbitcount32 ax, bx, cl
  4834 00000E6E 53                  <3>  push %2
  4835                              <3>  __lzbitcount16 %1, cl
  4836                              <4>  stkopen 3
  4837 00000E6F 83EC03              <5>  sub word sp, %1
  4838 00000E72 54                  <5>  push sp
  4839 00000E73 5D                  <5>  pop bp
  4840 00000E74 894600              <4>  mov word [bp+0], %1
  4841 00000E77 E808FA              <4>  call proc__lzbitcount16
  4842 00000E7A 54                  <4>  push sp
  4843 00000E7B 5D                  <4>  pop bp
  4844 00000E7C 8A4E02              <4>  mov byte %2, [bp+2]
  4845                              <4>  stkclose 3
  4846 00000E7F 83C403              <5>  add word sp, %1
  4847 00000E82 58                  <3>  pop ax
  4848 00000E83 80F910              <3>  cmp cl,16
  4849 00000E86 7217                <3>  jb .end
  4850 00000E88 51                  <3>  push cx
  4851                              <3>  __lzbitcount16 ax, al
  4852                              <4>  stkopen 3
  4853 00000E89 83EC03              <5>  sub word sp, %1
  4854 00000E8C 54                  <5>  push sp
  4855 00000E8D 5D                  <5>  pop bp
  4856 00000E8E 894600              <4>  mov word [bp+0], %1
  4857 00000E91 E8EEF9              <4>  call proc__lzbitcount16
  4858 00000E94 54                  <4>  push sp
  4859 00000E95 5D                  <4>  pop bp
  4860 00000E96 8A4602              <4>  mov byte %2, [bp+2]
  4861                              <4>  stkclose 3
  4862 00000E99 83C403              <5>  add word sp, %1
  4863 00000E9C 59                  <3>  pop cx
  4864 00000E9D 00C1                <3>  add cl,al
  4865                              <3>  .end:
  4866 00000E9F 88C9                <3>  mov byte %3, cl
  4867 00000EA1 5B                  <2> 	pop bx
  4868 00000EA2 58                  <2> 	pop ax
  4869                              <2> 		
  4870 00000EA3 80E908              <2> 	sub cl,8	
  4871 00000EA6 80F908              <2> 	cmp cl,8
  4872 00000EA9 7402                <2> 	je .equal
  4873 00000EAB 7F06                <2> 	jg .great
  4874                              <2> 	.equal:	
  4875 00000EAD 5A                  <2> 		pop dx
  4876 00000EAE FEC6                <2> 		inc dh
  4877 00000EB0 52                  <2> 		push dx
  4878 00000EB1 EB1C                <2> 		jmp .endcmp
  4879                              <2> 	.great:
  4880                              <2> 		__shl32 ax, bx, cl
  4881                              <3>  stkopen 5
  4882 00000EB3 83EC05              <4>  sub word sp, %1
  4883 00000EB6 54                  <4>  push sp
  4884 00000EB7 5D                  <4>  pop bp
  4885 00000EB8 894600              <3>  mov word [bp+0], %1
  4886 00000EBB 895E02              <3>  mov word [bp+2], %2
  4887 00000EBE 884E04              <3>  mov byte [bp+4], %3
  4888 00000EC1 E8F2F8              <3>  call proc_shl32
  4889 00000EC4 54                  <3>  push sp
  4890 00000EC5 5D                  <3>  pop bp
  4891 00000EC6 8B4600              <3>  mov word %1, [bp+0]
  4892 00000EC9 8B5E02              <3>  mov word %2, [bp+2]
  4893                              <3>  stkclose 5
  4894 00000ECC 83C405              <4>  add word sp, %1
  4895                              <2> 	.endcmp:
  4896                              <2> 	
  4897 00000ECF 89E1                <2> 	mov cx,sp
  4898 00000ED1 89CD                <2> 	mov bp,cx
  4899 00000ED3 83C502              <2> 	add bp,2
  4900                              <2> 	
  4901 00000ED6 01460A              <2> 	add word [bp+0x0A],ax
  4902 00000ED9 895E0C              <2> 	mov word [bp+0x0C],bx
  4903                              <2> 	
  4904                              <2> 	; mantissa setada e expoente calculado
  4905                              <2> 				
  4906 00000EDC 8B4E0A              <2> 	mov cx,[bp+0x0A]
  4907 00000EDF 8B560C              <2> 	mov dx,[bp+0x0C]
  4908                              <2> 	
  4909 00000EE2 58                  <2> 	pop ax						
  4910                              <2> 	__normalize cx, dx, ax	; normaliza, preserva sinal e seta expoente	
  4911                              <3>  stkopen 0x06
  4912 00000EE3 83EC06              <4>  sub word sp, %1
  4913 00000EE6 54                  <4>  push sp
  4914 00000EE7 5D                  <4>  pop bp
  4915 00000EE8 894E00              <3>  mov word [bp+0],%1
  4916 00000EEB 895602              <3>  mov word [bp+2],%2
  4917 00000EEE 894604              <3>  mov word [bp+4],%3
  4918 00000EF1 E80702              <3>  call proc__normalize
  4919 00000EF4 54                  <3>  push sp
  4920 00000EF5 5D                  <3>  pop bp
  4921 00000EF6 8B4E00              <3>  mov word %1,[bp+0]
  4922 00000EF9 8B5602              <3>  mov word %2,[bp+2]
  4923                              <3>  stkclose 0x06
  4924 00000EFC 83C406              <4>  add word sp, %1
  4925                              <2> 		
  4926 00000EFF 89E0                <2> 	mov ax,sp
  4927 00000F01 89C5                <2> 	mov bp,ax
  4928 00000F03 894E0A              <2> 	mov [bp+0x0A],cx
  4929 00000F06 89560C              <2> 	mov [bp+0x0C],dx		
  4930                              <2> 
  4931                              <2> 	.done:
  4932                              <2> 																	
  4933 00000F09 C3                  <2> 	ret
  4934                              <2> 	
  4935                              <2> proc_fladdorsub:	
  4936                              <2> 	; valores especiais
  4937 00000F0A 89E0                <2> 	mov ax,sp
  4938 00000F0C 89C5                <2> 	mov bp,ax
  4939 00000F0E 8B4602              <2> 	mov ax,[bp+2]
  4940 00000F11 8B5E04              <2> 	mov bx,[bp+4]
  4941 00000F14 8B4E06              <2> 	mov cx,[bp+6]
  4942 00000F17 81E10080            <2> 	and cx,0x8000
  4943 00000F1B 334E0E              <2> 	xor word cx,[bp+0x0E]	
  4944 00000F1E 8B5606              <2> 	mov dx,[bp+6]
  4945 00000F21 81E2FF7F            <2> 	and dx,0x7FFF
  4946 00000F25 01D1                <2> 	add cx,dx	
  4947 00000F27 8B5608              <2> 	mov dx,[bp+8]
  4948                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  4949                              <3>  stkopen 0x0D
  4950 00000F2A 83EC0D              <4>  sub word sp, %1
  4951 00000F2D 54                  <4>  push sp
  4952 00000F2E 5D                  <4>  pop bp
  4953 00000F2F 894600              <3>  mov word [bp+0],%1
  4954 00000F32 895E02              <3>  mov word [bp+2],%2
  4955 00000F35 894E04              <3>  mov word [bp+4],%3
  4956 00000F38 895606              <3>  mov word [bp+6],%4
  4957 00000F3B E83304              <3>  call proc__validate
  4958 00000F3E 54                  <3>  push sp
  4959 00000F3F 5D                  <3>  pop bp
  4960 00000F40 8B4608              <3>  mov word %5,[bp+8]
  4961 00000F43 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4962 00000F46 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4963                              <3>  stkclose 0x0D
  4964 00000F49 83C40D              <4>  add word sp, %1
  4965 00000F4C 80F900              <2> 	cmp cl,0
  4966 00000F4F 750D                <2> 	jnz .continue
  4967 00000F51 89E2                <2> 		mov dx,sp
  4968 00000F53 89D5                <2> 		mov bp,dx		
  4969 00000F55 89460A              <2> 		mov word [bp+0x0A],ax
  4970 00000F58 895E0C              <2> 		mov word [bp+0x0C],bx										
  4971 00000F5B E99C01              <2> 		jmp .done	
  4972                              <2> 	.continue:
  4973                              <2> 	
  4974 00000F5E 89E0                <2> 	mov ax,sp
  4975 00000F60 89C5                <2> 	mov bp,ax
  4976 00000F62 8B4602              <2> 	mov ax,[bp+2]
  4977 00000F65 8B5E04              <2> 	mov bx,[bp+4]
  4978 00000F68 8B4E06              <2> 	mov cx,[bp+6]
  4979 00000F6B 81E10080            <2> 	and cx,0x8000
  4980 00000F6F 334E0E              <2> 	xor word cx,[bp+0x0E]	
  4981 00000F72 8B5606              <2> 	mov dx,[bp+6]
  4982 00000F75 81E2FF7F            <2> 	and dx,0x7FFF
  4983 00000F79 01D1                <2> 	add cx,dx
  4984 00000F7B 8B5608              <2> 	mov dx,[bp+8]
  4985                              <2> 	__addorsub_validate ax, bx, cx, dx, ax, bx, cl
  4986                              <3>  stkopen 0x0D
  4987 00000F7E 83EC0D              <4>  sub word sp, %1
  4988 00000F81 54                  <4>  push sp
  4989 00000F82 5D                  <4>  pop bp
  4990 00000F83 894600              <3>  mov word [bp+0],%1
  4991 00000F86 895E02              <3>  mov word [bp+2],%2
  4992 00000F89 894E04              <3>  mov word [bp+4],%3
  4993 00000F8C 895606              <3>  mov word [bp+6],%4
  4994 00000F8F E8D104              <3>  call proc__addorsub_validate
  4995 00000F92 54                  <3>  push sp
  4996 00000F93 5D                  <3>  pop bp
  4997 00000F94 8B4608              <3>  mov word %5,[bp+8]
  4998 00000F97 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4999 00000F9A 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  5000                              <3>  stkclose 0x0D
  5001 00000F9D 83C40D              <4>  add word sp, %1
  5002 00000FA0 80F900              <2> 	cmp cl,0
  5003 00000FA3 750D                <2> 	jnz .continue2
  5004 00000FA5 89E2                <2> 		mov dx,sp
  5005 00000FA7 89D5                <2> 		mov bp,dx					
  5006 00000FA9 89460A              <2> 		mov word [bp+0x0A],ax
  5007 00000FAC 895E0C              <2> 		mov word [bp+0x0C],bx
  5008 00000FAF E94801              <2> 		jmp .done	
  5009                              <2> 	.continue2:
  5010                              <2> 	
  5011                              <2> 	; valores especiais tratados	
  5012                              <2> 
  5013 00000FB2 89E0                <2> 	mov ax,sp
  5014 00000FB4 89C5                <2> 	mov bp,ax	
  5015 00000FB6 8B4602              <2> 	mov ax,[bp+2]
  5016 00000FB9 8B5E06              <2> 	mov bx,[bp+6]
  5017                              <2> 	
  5018 00000FBC D1E0                <2> 	shl ax,1
  5019 00000FBE D1E3                <2> 	shl bx,1
  5020 00000FC0 88E5                <2> 	mov ch,ah	
  5021 00000FC2 28FD                <2> 	sub ch,bh	
  5022                              <2> 		
  5023 00000FC4 80FD00              <2> 	cmp ch,0
  5024 00000FC7 7402                <2> 	jz .expzero
  5025 00000FC9 EB1E                <2> 	jmp .expnzero
  5026                              <2> 	.expzero:
  5027 00000FCB 50                  <2> 		push ax
  5028 00000FCC 8B4602              <2> 		mov ax,[bp+2]
  5029 00000FCF 8B5E04              <2> 		mov bx,[bp+4]
  5030 00000FD2 8B4E06              <2> 		mov cx,[bp+6]
  5031 00000FD5 8B5608              <2> 		mov dx,[bp+8]
  5032 00000FD8 257F80              <2> 		and ax,0x807F
  5033 00000FDB 81E17F80            <2> 		and cx,0x807F
  5034 00000FDF 0D8000              <2> 		or ax,0x0080
  5035 00000FE2 81C98000            <2> 		or cx,0x0080
  5036                              <2> 												
  5037 00000FE6 E99A00              <2> 		jmp .endexpcmp
  5038                              <2> 	.expnzero:
  5039                              <2> 				
  5040 00000FE9 80FD00              <2> 		cmp ch,0
  5041 00000FEC 7F05                <2> 		jg .exp1great
  5042 00000FEE 7C49                <2> 		jl .exp1less
  5043 00000FF0 E99000              <2> 		jmp .endexpcmp
  5044                              <2> 		.exp1great:					
  5045 00000FF3 50                  <2> 			push ax
  5046                              <2> 		
  5047 00000FF4 8B4606              <2> 			mov ax,[bp+6]
  5048 00000FF7 8B5E08              <2> 			mov bx,[bp+8]
  5049 00000FFA 83E07F              <2> 			and ax,0x007F
  5050 00000FFD 0D8000              <2> 			or ax,0x0080
  5051                              <2> 						
  5052 00001000 55                  <2> 			push bp
  5053                              <2> 			__shr32 ax, bx, ch
  5054                              <3>  stkopen 5
  5055 00001001 83EC05              <4>  sub word sp, %1
  5056 00001004 54                  <4>  push sp
  5057 00001005 5D                  <4>  pop bp
  5058 00001006 894600              <3>  mov word [bp+0], %1
  5059 00001009 895E02              <3>  mov word [bp+2], %2
  5060 0000100C 886E04              <3>  mov byte [bp+4], %3
  5061 0000100F E8EBF7              <3>  call proc_shr32
  5062 00001012 54                  <3>  push sp
  5063 00001013 5D                  <3>  pop bp
  5064 00001014 8B4600              <3>  mov word %1, [bp+0]
  5065 00001017 8B5E02              <3>  mov word %2, [bp+2]
  5066                              <3>  stkclose 5
  5067 0000101A 83C405              <4>  add word sp, %1
  5068 0000101D 5D                  <2> 			pop bp		
  5069                              <2> 				
  5070 0000101E 8B5606              <2> 			mov dx,[bp+6]
  5071 00001021 81E20080            <2> 			and dx,0x8000
  5072 00001025 01D0                <2> 			add ax,dx			
  5073                              <2> 			
  5074 00001027 89C1                <2> 			mov cx,ax
  5075 00001029 89DA                <2> 			mov dx,bx
  5076 0000102B 8B4602              <2> 			mov ax,[bp+2]
  5077 0000102E 8B5E04              <2> 			mov bx,[bp+4]										
  5078                              <2> 									
  5079 00001031 257F80              <2> 			and ax,0x807F
  5080 00001034 0D8000              <2> 			or ax,0x0080
  5081                              <2> 						
  5082 00001037 EB4A                <2> 			jmp .endexp1cmp	
  5083                              <2> 		.exp1less:
  5084 00001039 88E9                <2> 			mov cl,ch
  5085 0000103B B5FF                <2> 			mov ch,0xFF
  5086 0000103D 28CD                <2> 			sub ch,cl
  5087 0000103F FEC5                <2> 			inc ch
  5088 00001041 53                  <2> 			push bx		
  5089                              <2> 		
  5090 00001042 8B4602              <2> 			mov ax,[bp+2]
  5091 00001045 8B5E04              <2> 			mov bx,[bp+4]
  5092 00001048 83E07F              <2> 			and ax,0x007F
  5093 0000104B 0D8000              <2> 			or ax,0x0080
  5094                              <2> 						
  5095 0000104E 55                  <2> 			push bp
  5096                              <2> 			__shr32 ax, bx, ch
  5097                              <3>  stkopen 5
  5098 0000104F 83EC05              <4>  sub word sp, %1
  5099 00001052 54                  <4>  push sp
  5100 00001053 5D                  <4>  pop bp
  5101 00001054 894600              <3>  mov word [bp+0], %1
  5102 00001057 895E02              <3>  mov word [bp+2], %2
  5103 0000105A 886E04              <3>  mov byte [bp+4], %3
  5104 0000105D E89DF7              <3>  call proc_shr32
  5105 00001060 54                  <3>  push sp
  5106 00001061 5D                  <3>  pop bp
  5107 00001062 8B4600              <3>  mov word %1, [bp+0]
  5108 00001065 8B5E02              <3>  mov word %2, [bp+2]
  5109                              <3>  stkclose 5
  5110 00001068 83C405              <4>  add word sp, %1
  5111 0000106B 5D                  <2> 			pop bp
  5112                              <2> 								
  5113 0000106C 8B5602              <2> 			mov dx,[bp+2]
  5114 0000106F 81E20080            <2> 			and dx,0x8000
  5115 00001073 01D0                <2> 			add ax,dx			
  5116                              <2> 			
  5117 00001075 8B4E06              <2> 			mov cx,[bp+6]
  5118 00001078 8B5608              <2> 			mov dx,[bp+8]										
  5119                              <2> 									
  5120 0000107B 81E17F80            <2> 			and cx,0x807F
  5121 0000107F 81C98000            <2> 			or cx,0x0080
  5122                              <2> 									
  5123                              <2> 		.endexp1cmp:
  5124                              <2> 		
  5125                              <2> 	.endexpcmp:			
  5126                              <2> 	
  5127 00001083 837E0E00            <2> 	cmp word [bp+0x0E],0
  5128 00001087 7526                <2> 	jnz .sub
  5129                              <2> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0
  5130                              <3>  stkopen 0x0D
  5131 00001089 83EC0D              <4>  sub word sp, %1
  5132 0000108C 54                  <4>  push sp
  5133 0000108D 5D                  <4>  pop bp
  5134 0000108E 894600              <3>  mov word [bp+0],%1
  5135 00001091 895E02              <3>  mov word [bp+2],%2
  5136 00001094 894E04              <3>  mov word [bp+4],%3
  5137 00001097 895606              <3>  mov word [bp+6],%4
  5138 0000109A C7460C0000          <3>  mov word [bp+0x0C], %7
  5139 0000109F E81201              <3>  call proc__iaddorsub32
  5140 000010A2 54                  <3>  push sp
  5141 000010A3 5D                  <3>  pop bp
  5142 000010A4 8B4608              <3>  mov word %5,[bp+8]
  5143 000010A7 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5144                              <3>  stkclose 0x0D
  5145 000010AA 83C40D              <4>  add word sp, %1
  5146 000010AD EB24                <2> 		jmp .endop
  5147                              <2> 	.sub:
  5148                              <2> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0x8000
  5149                              <3>  stkopen 0x0D
  5150 000010AF 83EC0D              <4>  sub word sp, %1
  5151 000010B2 54                  <4>  push sp
  5152 000010B3 5D                  <4>  pop bp
  5153 000010B4 894600              <3>  mov word [bp+0],%1
  5154 000010B7 895E02              <3>  mov word [bp+2],%2
  5155 000010BA 894E04              <3>  mov word [bp+4],%3
  5156 000010BD 895606              <3>  mov word [bp+6],%4
  5157 000010C0 C7460C0080          <3>  mov word [bp+0x0C], %7
  5158 000010C5 E8EC00              <3>  call proc__iaddorsub32
  5159 000010C8 54                  <3>  push sp
  5160 000010C9 5D                  <3>  pop bp
  5161 000010CA 8B4608              <3>  mov word %5,[bp+8]
  5162 000010CD 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5163                              <3>  stkclose 0x0D
  5164 000010D0 83C40D              <4>  add word sp, %1
  5165                              <2> 	.endop:
  5166                              <2> 						
  5167 000010D3 59                  <2> 	pop cx
  5168                              <2> 	
  5169                              <2> 	__normalize ax, bx, cx
  5170                              <3>  stkopen 0x06
  5171 000010D4 83EC06              <4>  sub word sp, %1
  5172 000010D7 54                  <4>  push sp
  5173 000010D8 5D                  <4>  pop bp
  5174 000010D9 894600              <3>  mov word [bp+0],%1
  5175 000010DC 895E02              <3>  mov word [bp+2],%2
  5176 000010DF 894E04              <3>  mov word [bp+4],%3
  5177 000010E2 E81600              <3>  call proc__normalize
  5178 000010E5 54                  <3>  push sp
  5179 000010E6 5D                  <3>  pop bp
  5180 000010E7 8B4600              <3>  mov word %1,[bp+0]
  5181 000010EA 8B5E02              <3>  mov word %2,[bp+2]
  5182                              <3>  stkclose 0x06
  5183 000010ED 83C406              <4>  add word sp, %1
  5184                              <2> 	
  5185 000010F0 89E1                <2> 	mov cx,sp
  5186 000010F2 89CD                <2> 	mov bp,cx
  5187 000010F4 89460A              <2> 	mov word [bp+0x0A],ax
  5188 000010F7 895E0C              <2> 	mov word [bp+0x0C],bx
  5189                              <2> 									
  5190                              <2> 	.done:		
  5191                              <2> 							
  5192 000010FA C3                  <2> 	ret
  5193                              <2> 	
  5194                              <2> proc__normalize:
  5195 000010FB 89E0                <2> 	mov ax,sp
  5196 000010FD 89C5                <2> 	mov bp,ax	
  5197                              <2> 
  5198 000010FF 8B4E02              <2> 	mov cx,[bp+2]	
  5199 00001102 8B5604              <2> 	mov dx,[bp+4]
  5200 00001105 8B5E06              <2> 	mov bx,[bp+6]
  5201                              <2> 					
  5202 00001108 89C8                <2> 	mov ax,cx
  5203 0000110A 250080              <2> 	and ax,0x8000			
  5204 0000110D 894602              <2> 	mov [bp+2],ax	
  5205                              <2> 					
  5206 00001110 81E1FF7F            <2> 	and cx,0x7FFF
  5207                              <2> 			
  5208 00001114 51                  <2> 	push cx
  5209 00001115 52                  <2> 	push dx
  5210 00001116 53                  <2> 	push bx
  5211                              <2> 	__lzbitcount32 cx, dx, al	
  5212 00001117 52                  <3>  push %2
  5213                              <3>  __lzbitcount16 %1, cl
  5214                              <4>  stkopen 3
  5215 00001118 83EC03              <5>  sub word sp, %1
  5216 0000111B 54                  <5>  push sp
  5217 0000111C 5D                  <5>  pop bp
  5218 0000111D 894E00              <4>  mov word [bp+0], %1
  5219 00001120 E85FF7              <4>  call proc__lzbitcount16
  5220 00001123 54                  <4>  push sp
  5221 00001124 5D                  <4>  pop bp
  5222 00001125 8A4E02              <4>  mov byte %2, [bp+2]
  5223                              <4>  stkclose 3
  5224 00001128 83C403              <5>  add word sp, %1
  5225 0000112B 58                  <3>  pop ax
  5226 0000112C 80F910              <3>  cmp cl,16
  5227 0000112F 7217                <3>  jb .end
  5228 00001131 51                  <3>  push cx
  5229                              <3>  __lzbitcount16 ax, al
  5230                              <4>  stkopen 3
  5231 00001132 83EC03              <5>  sub word sp, %1
  5232 00001135 54                  <5>  push sp
  5233 00001136 5D                  <5>  pop bp
  5234 00001137 894600              <4>  mov word [bp+0], %1
  5235 0000113A E845F7              <4>  call proc__lzbitcount16
  5236 0000113D 54                  <4>  push sp
  5237 0000113E 5D                  <4>  pop bp
  5238 0000113F 8A4602              <4>  mov byte %2, [bp+2]
  5239                              <4>  stkclose 3
  5240 00001142 83C403              <5>  add word sp, %1
  5241 00001145 59                  <3>  pop cx
  5242 00001146 00C1                <3>  add cl,al
  5243                              <3>  .end:
  5244 00001148 88C8                <3>  mov byte %3, cl
  5245 0000114A 5B                  <2> 	pop bx
  5246 0000114B 5A                  <2> 	pop dx
  5247 0000114C 59                  <2> 	pop cx								
  5248                              <2> 		
  5249 0000114D 3C08                <2> 	cmp al,8					
  5250 0000114F 7204                <2> 	jb .shr
  5251 00001151 7728                <2> 	ja .shl
  5252 00001153 EB4A                <2> 	jmp .endshrl
  5253                              <2> 	.shr:			
  5254 00001155 B408                <2> 		mov ah,0x08
  5255 00001157 28C4                <2> 		sub ah,al
  5256 00001159 00E7                <2> 		add bh,ah
  5257 0000115B 53                  <2> 		push bx
  5258                              <2> 		__shr32 cx, dx, ah
  5259                              <3>  stkopen 5
  5260 0000115C 83EC05              <4>  sub word sp, %1
  5261 0000115F 54                  <4>  push sp
  5262 00001160 5D                  <4>  pop bp
  5263 00001161 894E00              <3>  mov word [bp+0], %1
  5264 00001164 895602              <3>  mov word [bp+2], %2
  5265 00001167 886604              <3>  mov byte [bp+4], %3
  5266 0000116A E890F6              <3>  call proc_shr32
  5267 0000116D 54                  <3>  push sp
  5268 0000116E 5D                  <3>  pop bp
  5269 0000116F 8B4E00              <3>  mov word %1, [bp+0]
  5270 00001172 8B5602              <3>  mov word %2, [bp+2]
  5271                              <3>  stkclose 5
  5272 00001175 83C405              <4>  add word sp, %1
  5273 00001178 5B                  <2> 		pop bx
  5274 00001179 EB24                <2> 		jmp .endshrl
  5275                              <2> 	.shl:		
  5276 0000117B B408                <2> 		mov ah,0x08
  5277 0000117D 28E0                <2> 		sub al,ah
  5278 0000117F 28C7                <2> 		sub bh,al			
  5279 00001181 53                  <2> 		push bx
  5280                              <2> 		__shl32 cx, dx, al
  5281                              <3>  stkopen 5
  5282 00001182 83EC05              <4>  sub word sp, %1
  5283 00001185 54                  <4>  push sp
  5284 00001186 5D                  <4>  pop bp
  5285 00001187 894E00              <3>  mov word [bp+0], %1
  5286 0000118A 895602              <3>  mov word [bp+2], %2
  5287 0000118D 884604              <3>  mov byte [bp+4], %3
  5288 00001190 E823F6              <3>  call proc_shl32
  5289 00001193 54                  <3>  push sp
  5290 00001194 5D                  <3>  pop bp
  5291 00001195 8B4E00              <3>  mov word %1, [bp+0]
  5292 00001198 8B5602              <3>  mov word %2, [bp+2]
  5293                              <3>  stkclose 5
  5294 0000119B 83C405              <4>  add word sp, %1
  5295 0000119E 5B                  <2> 		pop bx			
  5296                              <2> 	.endshrl:											
  5297                              <2> 								
  5298 0000119F 30DB                <2> 	xor bl,bl
  5299 000011A1 D1EB                <2> 	shr bx,1	
  5300 000011A3 83E17F              <2> 	and cx,0x007F	
  5301                              <2> 		
  5302 000011A6 89E0                <2> 	mov ax,sp
  5303 000011A8 89C5                <2> 	mov bp,ax
  5304 000011AA 015E02              <2> 	add word [bp+2],bx
  5305 000011AD 014E02              <2> 	add word [bp+2],cx	
  5306 000011B0 895604              <2> 	mov word [bp+4],dx
  5307                              <2> 	
  5308 000011B3 C3                  <2> 	ret
  5309                              <2> 
  5310                              <2> proc__iaddorsub32:
  5311 000011B4 89E0                <2> 	mov ax,sp
  5312 000011B6 89C5                <2> 	mov bp,ax
  5313                              <2> 	
  5314 000011B8 8B4602              <2> 	mov ax,[bp+2]
  5315 000011BB 8B5E04              <2> 	mov bx,[bp+4]
  5316 000011BE 8B4E06              <2> 	mov cx,[bp+6]
  5317 000011C1 8B5608              <2> 	mov dx,[bp+8]	
  5318                              <2> 	
  5319 000011C4 50                  <2> 	push ax	
  5320 000011C5 250080              <2> 	and ax, 0x8000
  5321 000011C8 83F800              <2> 	cmp ax,0
  5322 000011CB 741B                <2> 	jz .endv1neg
  5323 000011CD 58                  <2> 		pop ax
  5324 000011CE 51                  <2> 		push cx
  5325 000011CF 52                  <2> 		push dx
  5326                              <2> 		
  5327 000011D0 B9FFFF              <2> 		mov cx,0xFFFF
  5328 000011D3 BAFFFF              <2> 		mov dx,0xFFFF
  5329 000011D6 25FF7F              <2> 		and ax,0x7FFF
  5330 000011D9 29DA                <2> 		sub dx,bx
  5331 000011DB 19C1                <2> 		sbb cx,ax
  5332 000011DD 42                  <2> 		inc dx
  5333 000011DE 83D100              <2> 		adc cx,0
  5334 000011E1 89C8                <2> 		mov ax,cx
  5335 000011E3 89D3                <2> 		mov bx,dx
  5336                              <2> 		
  5337 000011E5 5A                  <2> 		pop dx
  5338 000011E6 59                  <2> 		pop cx
  5339 000011E7 50                  <2> 		push ax	
  5340                              <2> 	.endv1neg:		
  5341 000011E8 58                  <2> 	pop ax	
  5342                              <2> 		
  5343 000011E9 51                  <2> 	push cx
  5344 000011EA 81E10080            <2> 	and cx,0x8000
  5345 000011EE 83F900              <2> 	cmp cx,0
  5346 000011F1 741C                <2> 	jz .endv2neg
  5347 000011F3 59                  <2> 		pop cx
  5348 000011F4 50                  <2> 		push ax
  5349 000011F5 53                  <2> 		push bx
  5350                              <2> 		
  5351 000011F6 B8FFFF              <2> 		mov ax,0xFFFF
  5352 000011F9 BBFFFF              <2> 		mov bx,0xFFFF
  5353 000011FC 81E1FF7F            <2> 		and cx,0x7FFF
  5354 00001200 29D3                <2> 		sub bx,dx
  5355 00001202 19C8                <2> 		sbb ax,cx
  5356 00001204 43                  <2> 		inc bx
  5357 00001205 83D000              <2> 		adc ax,0
  5358 00001208 89C1                <2> 		mov cx,ax
  5359 0000120A 89DA                <2> 		mov dx,bx
  5360                              <2> 		
  5361 0000120C 5B                  <2> 		pop bx
  5362 0000120D 58                  <2> 		pop ax
  5363 0000120E 51                  <2> 		push cx
  5364                              <2> 	.endv2neg:	
  5365 0000120F 59                  <2> 	pop cx
  5366                              <2> 					
  5367 00001210 837E0E00            <2> 	cmp word [bp+0x0E],0
  5368 00001214 7506                <2> 	jnz .sub
  5369 00001216 01D3                <2> 		add bx, dx
  5370 00001218 11C8                <2> 		adc ax, cx				
  5371 0000121A EB04                <2> 		jmp .endop
  5372                              <2> 	.sub:
  5373 0000121C 29D3                <2> 		sub bx, dx
  5374 0000121E 19C8                <2> 		sbb ax, cx
  5375                              <2> 	.endop:
  5376                              <2> 	
  5377 00001220 89C1                <2> 	mov cx,ax
  5378 00001222 81E10080            <2> 	and cx,0x8000
  5379 00001226 83F900              <2> 	cmp cx,0
  5380 00001229 7415                <2> 	jz .endresneg
  5381 0000122B B9FFFF              <2> 		mov cx,0xFFFF
  5382 0000122E BAFFFF              <2> 		mov dx,0xFFFF
  5383 00001231 29DA                <2> 		sub dx,bx
  5384 00001233 19C1                <2> 		sbb cx,ax
  5385 00001235 42                  <2> 		inc dx
  5386 00001236 83D100              <2> 		adc cx,0
  5387 00001239 89C8                <2> 		mov ax,cx
  5388 0000123B 89D3                <2> 		mov bx,dx
  5389                              <2> 		
  5390 0000123D 050080              <2> 		add ax,0x8000
  5391                              <2> 	.endresneg:
  5392                              <2> 	
  5393 00001240 89E1                <2> 	mov cx,sp
  5394 00001242 89CD                <2> 	mov bp,cx
  5395 00001244 89460A              <2> 	mov [bp+0x0A], ax
  5396 00001247 895E0C              <2> 	mov [bp+0x0C], bx
  5397                              <2> 	
  5398 0000124A C3                  <2> 	ret	
  5399                              <2> 	
  5400                              <2> proc__mul32_64:
  5401 0000124B 89E0                <2> 	mov ax,sp
  5402 0000124D 89C5                <2> 	mov bp,ax
  5403                              <2> 		
  5404 0000124F 31D2                <2> 	xor dx,dx
  5405 00001251 8B4604              <2> 	mov ax,[bp+4]
  5406 00001254 F76608              <2> 	mul word [bp+8]
  5407                              <2> 	
  5408 00001257 C7460A0000          <2> 	mov word [bp+0x0A], 0
  5409 0000125C C7460C0000          <2> 	mov word [bp+0x0C], 0
  5410 00001261 89560E              <2> 	mov word [bp+0x0E], dx
  5411 00001264 894610              <2> 	mov word [bp+0x10], ax
  5412                              <2> 		
  5413 00001267 31D2                <2> 	xor dx,dx
  5414 00001269 8B4604              <2> 	mov ax,[bp+4]
  5415 0000126C F76606              <2> 	mul word [bp+6]
  5416                              <2> 	
  5417 0000126F 01460E              <2> 	add [bp+0x0E],ax
  5418 00001272 11560C              <2> 	adc [bp+0x0C],dx
  5419 00001275 83560A00            <2> 	adc word [bp+0x0A],0
  5420                              <2> 	
  5421 00001279 31D2                <2> 	xor dx,dx
  5422 0000127B 8B4602              <2> 	mov ax,[bp+2]
  5423 0000127E F76608              <2> 	mul word [bp+8]
  5424                              <2> 	
  5425 00001281 01460E              <2> 	add [bp+0x0E],ax
  5426 00001284 11560C              <2> 	adc [bp+0x0C],dx
  5427                              <2> 	
  5428 00001287 31D2                <2> 	xor dx,dx
  5429 00001289 8B4602              <2> 	mov ax,[bp+2]
  5430 0000128C F76606              <2> 	mul word [bp+6]
  5431                              <2> 	
  5432 0000128F 01460C              <2> 	add [bp+0x0C],ax
  5433 00001292 11560A              <2> 	adc [bp+0x0A],dx
  5434                              <2> 	
  5435 00001295 C3                  <2> 	ret
  5436                              <2> 	
  5437                              <2> proc__fldiv32:
  5438 00001296 89E0                <2> 	mov ax,sp
  5439 00001298 89C5                <2> 	mov bp,ax
  5440                              <2> 	
  5441 0000129A 8B4602              <2> 	mov ax,[bp+2]
  5442 0000129D 8B5E04              <2> 	mov bx,[bp+4]
  5443 000012A0 C7460A0000          <2> 	mov word [bp+0x0A],0
  5444 000012A5 C7460C0000          <2> 	mov word [bp+0x0C],0
  5445                              <2> 	
  5446 000012AA B118                <2> 	mov cl,24
  5447                              <2> 	.l1:
  5448 000012AC 80F900              <2> 		cmp cl,0
  5449 000012AF 0F84AC00            <2> 		jz .l2
  5450 000012B3 51                  <2> 		push cx
  5451                              <2> 		
  5452 000012B4 8B4E0A              <2> 		mov cx,[bp+0x0A]
  5453 000012B7 8B560C              <2> 		mov dx,[bp+0x0C]
  5454 000012BA 55                  <2> 		push bp
  5455 000012BB 50                  <2> 		push ax
  5456 000012BC 53                  <2> 		push bx
  5457                              <2> 		__shl32 cx, dx, 1
  5458                              <3>  stkopen 5
  5459 000012BD 83EC05              <4>  sub word sp, %1
  5460 000012C0 54                  <4>  push sp
  5461 000012C1 5D                  <4>  pop bp
  5462 000012C2 894E00              <3>  mov word [bp+0], %1
  5463 000012C5 895602              <3>  mov word [bp+2], %2
  5464 000012C8 C6460401            <3>  mov byte [bp+4], %3
  5465 000012CC E8E7F4              <3>  call proc_shl32
  5466 000012CF 54                  <3>  push sp
  5467 000012D0 5D                  <3>  pop bp
  5468 000012D1 8B4E00              <3>  mov word %1, [bp+0]
  5469 000012D4 8B5602              <3>  mov word %2, [bp+2]
  5470                              <3>  stkclose 5
  5471 000012D7 83C405              <4>  add word sp, %1
  5472 000012DA 5B                  <2> 		pop bx
  5473 000012DB 58                  <2> 		pop ax
  5474 000012DC 5D                  <2> 		pop bp
  5475 000012DD 894E0A              <2> 		mov [bp+0x0A],cx
  5476 000012E0 89560C              <2> 		mov [bp+0x0C],dx
  5477                              <2> 				
  5478 000012E3 8B4E06              <2> 		mov cx,[bp+6]
  5479 000012E6 8B5608              <2> 		mov dx,[bp+8]
  5480 000012E9 50                  <2> 		push ax
  5481 000012EA 53                  <2> 		push bx
  5482 000012EB 55                  <2> 		push bp
  5483                              <2> 		__cmp32 ax, bx, cx, dx, dl
  5484                              <3>  stkopen 9
  5485 000012EC 83EC09              <4>  sub word sp, %1
  5486 000012EF 54                  <4>  push sp
  5487 000012F0 5D                  <4>  pop bp
  5488 000012F1 894600              <3>  mov word [bp+0], %1
  5489 000012F4 895E02              <3>  mov word [bp+2], %2
  5490 000012F7 894E04              <3>  mov word [bp+4], %3
  5491 000012FA 895606              <3>  mov word [bp+6], %4
  5492 000012FD E88BF4              <3>  call proc_cmp32
  5493 00001300 54                  <3>  push sp
  5494 00001301 5D                  <3>  pop bp
  5495 00001302 8A5608              <3>  mov byte %5, [bp+8]
  5496                              <3>  stkclose 9
  5497 00001305 83C409              <4>  add word sp, %1
  5498 00001308 5D                  <2> 		pop bp
  5499 00001309 5B                  <2> 		pop bx
  5500 0000130A 58                  <2> 		pop ax				
  5501                              <2> 		
  5502 0000130B 80FA00              <2> 		cmp dl,0
  5503 0000130E 7C2A                <2> 		jl .endsub
  5504 00001310 8B4E06              <2> 			mov cx,[bp+6]
  5505 00001313 8B5608              <2> 			mov dx,[bp+8]
  5506 00001316 55                  <2> 			push bp									
  5507                              <2> 			__sub32 ax, bx, cx, dx, ax, bx						
  5508                              <3>  stkopen 0x0C
  5509 00001317 83EC0C              <4>  sub word sp, %1
  5510 0000131A 54                  <4>  push sp
  5511 0000131B 5D                  <4>  pop bp
  5512 0000131C 894600              <3>  mov word [bp+0], %1
  5513 0000131F 895E02              <3>  mov word [bp+2], %2
  5514 00001322 894E04              <3>  mov word [bp+4], %3
  5515 00001325 895606              <3>  mov word [bp+6], %4
  5516 00001328 E845F4              <3>  call proc_sub32
  5517 0000132B 54                  <3>  push sp
  5518 0000132C 5D                  <3>  pop bp
  5519 0000132D 8B4608              <3>  mov word %5, [bp+8]
  5520 00001330 8B5E0A              <3>  mov word %6, [bp+0x0A]
  5521                              <3>  stkclose 0x0C
  5522 00001333 83C40C              <4>  add word sp, %1
  5523 00001336 5D                  <2> 			pop bp			
  5524 00001337 FF460C              <2> 			inc word [bp+0x0C]			
  5525                              <2> 		.endsub:
  5526                              <2> 				
  5527 0000133A 55                  <2> 		push bp
  5528                              <2> 		__shl32 ax, bx, 1
  5529                              <3>  stkopen 5
  5530 0000133B 83EC05              <4>  sub word sp, %1
  5531 0000133E 54                  <4>  push sp
  5532 0000133F 5D                  <4>  pop bp
  5533 00001340 894600              <3>  mov word [bp+0], %1
  5534 00001343 895E02              <3>  mov word [bp+2], %2
  5535 00001346 C6460401            <3>  mov byte [bp+4], %3
  5536 0000134A E869F4              <3>  call proc_shl32
  5537 0000134D 54                  <3>  push sp
  5538 0000134E 5D                  <3>  pop bp
  5539 0000134F 8B4600              <3>  mov word %1, [bp+0]
  5540 00001352 8B5E02              <3>  mov word %2, [bp+2]
  5541                              <3>  stkclose 5
  5542 00001355 83C405              <4>  add word sp, %1
  5543 00001358 5D                  <2> 		pop bp
  5544                              <2> 		
  5545 00001359 59                  <2> 		pop cx
  5546 0000135A FEC9                <2> 		dec cl
  5547 0000135C E94DFF              <2> 		jmp .l1
  5548                              <2> 	.l2:
  5549                              <2> 	
  5550 0000135F C3                  <2> 	ret
  5551                              <2> 
  5552                              <2> proc_flsetsig:
  5553 00001360 89E0                <2> 	mov ax,sp
  5554 00001362 89C5                <2> 	mov bp,ax
  5555                              <2> 
  5556 00001364 8B4602              <2> 	mov ax,[bp+2]
  5557 00001367 25FF7F              <2> 	and ax,0x7FFF
  5558 0000136A 034604              <2> 	add ax,[bp+4]
  5559 0000136D 894602              <2> 	mov [bp+2],ax
  5560                              <2> 				
  5561 00001370 C3                  <2> 	ret
  5562                              <2> 
  5563                              <2> proc__validate:
  5564 00001371 89E0                <2> 	mov ax,sp
  5565 00001373 89C5                <2> 	mov bp,ax
  5566                              <2> 	
  5567 00001375 8B4602              <2> 	mov ax,[bp+2]
  5568 00001378 25FF7F              <2> 	and ax,0x7FFF
  5569 0000137B 3DFF7F              <2> 	cmp ax,0x7FFF
  5570 0000137E 750A                <2> 	jne .isnumber1
  5571                              <2> 
  5572 00001380 8B4604              <2> 	mov ax,[bp+4]
  5573 00001383 83F8FF              <2> 	cmp ax,0xFFFF
  5574 00001386 7502                <2> 	jnz .isnumber1
  5575                              <2> 	
  5576 00001388 EB37                <2> 	jmp .NaN
  5577                              <2> 	
  5578                              <2> 	.isnumber1:
  5579                              <2> 	
  5580 0000138A 8B4606              <2> 	mov ax,[bp+6]
  5581 0000138D 25FF7F              <2> 	and ax,0x7FFF
  5582 00001390 3DFF7F              <2> 	cmp ax,0x7FFF
  5583 00001393 750A                <2> 	jne .isnumber2
  5584                              <2> 
  5585 00001395 8B4608              <2> 	mov ax,[bp+8]
  5586 00001398 83F8FF              <2> 	cmp ax,0xFFFF
  5587 0000139B 7502                <2> 	jnz .isnumber2
  5588                              <2> 	
  5589 0000139D EB22                <2> 	jmp .NaN
  5590                              <2> 	
  5591                              <2> 	.isnumber2:
  5592                              <2> 	
  5593 0000139F 8B4602              <2> 	mov ax,[bp+2]
  5594 000013A2 D1E0                <2> 	shl ax,1
  5595 000013A4 80FCFF              <2> 	cmp ah,0xFF
  5596 000013A7 740C                <2> 	je .infinity
  5597                              <2> 
  5598 000013A9 8B5E06              <2> 	mov bx,[bp+6]
  5599 000013AC D1E3                <2> 	shl bx,1
  5600 000013AE 80FFFF              <2> 	cmp bh,0xFF
  5601 000013B1 7402                <2> 	je .infinity			
  5602                              <2> 	
  5603 000013B3 EB18                <2> 	jmp .ok	
  5604                              <2> 	
  5605                              <2> 	.infinity:		
  5606 000013B5 C7460A807F          <2> 		mov word [bp+0x0A],0x7F80
  5607 000013BA C7460C0000          <2> 		mov word [bp+0x0C],0
  5608 000013BF EB12                <2> 		jmp .done
  5609                              <2> 	.NaN:
  5610 000013C1 C7460AFF7F          <2> 		mov word [bp+0x0A],0x7FFF
  5611 000013C6 C7460CFFFF          <2> 		mov word [bp+0x0C],0xFFFF
  5612 000013CB EB06                <2> 		jmp .done
  5613                              <2> 			
  5614                              <2> 	.ok:
  5615 000013CD C6460E01            <2> 		mov byte [bp+0x0E],1
  5616 000013D1 EB04                <2> 		jmp .end
  5617                              <2> 	.done:
  5618 000013D3 C6460E00            <2> 		mov byte [bp+0x0E],0		
  5619                              <2> 	.end:
  5620                              <2> 	
  5621 000013D7 C3                  <2> 	ret
  5622                              <2> 
  5623                              <2> proc__div_validate:
  5624 000013D8 89E0                <2> 	mov ax,sp
  5625 000013DA 89C5                <2> 	mov bp,ax
  5626                              <2> 	
  5627 000013DC 8B4602              <2> 	mov ax,[bp+2]
  5628 000013DF 8B5E06              <2> 	mov bx,[bp+6]
  5629 000013E2 D1E0                <2> 	shl ax,1
  5630 000013E4 D1E3                <2> 	shl bx,1
  5631 000013E6 08FC                <2> 	or ah,bh
  5632 000013E8 80FC00              <2> 	cmp ah,0
  5633 000013EB 7422                <2> 	jz .NaN
  5634                              <2> 	
  5635 000013ED 8B4602              <2> 	mov ax,[bp+2]
  5636 000013F0 D1E0                <2> 	shl ax,1
  5637 000013F2 80FC00              <2> 	cmp ah,0
  5638 000013F5 7424                <2> 	jz .zero
  5639 000013F7 8B5E06              <2> 	mov bx,[bp+6]
  5640 000013FA D1E3                <2> 	shl bx,1
  5641 000013FC 80FF00              <2> 	cmp bh,0	
  5642 000013FF 7402                <2> 	jz .infinity		
  5643                              <2> 		
  5644 00001401 EB24                <2> 	jmp .ok
  5645                              <2> 	
  5646                              <2> 	.infinity:		
  5647 00001403 C7460A807F          <2> 		mov word [bp+0x0A],0x7F80
  5648 00001408 C7460C0000          <2> 		mov word [bp+0x0C],0
  5649 0000140D EB1E                <2> 		jmp .done
  5650                              <2> 	.NaN:
  5651 0000140F C7460AFF7F          <2> 		mov word [bp+0x0A],0x7FFF
  5652 00001414 C7460CFFFF          <2> 		mov word [bp+0x0C],0xFFFF
  5653 00001419 EB12                <2> 		jmp .done
  5654                              <2> 	.zero:
  5655 0000141B C7460A0000          <2> 		mov word [bp+0x0A],0
  5656 00001420 C7460C0000          <2> 		mov word [bp+0x0C],0
  5657 00001425 EB06                <2> 		jmp .done	
  5658                              <2> 			
  5659                              <2> 	.ok:
  5660 00001427 C6460E01            <2> 		mov byte [bp+0x0E],1
  5661 0000142B EB04                <2> 		jmp .end
  5662                              <2> 	.done:	
  5663 0000142D C6460E00            <2> 		mov byte [bp+0x0E],0
  5664                              <2> 	.end:	
  5665                              <2> 		
  5666 00001431 C3                  <2> 	ret
  5667                              <2> 	
  5668                              <2> proc__mul_validate:
  5669 00001432 89E0                <2> 	mov ax,sp
  5670 00001434 89C5                <2> 	mov bp,ax
  5671                              <2> 	
  5672 00001436 8B4602              <2> 	mov ax,[bp+2]
  5673 00001439 D1E0                <2> 	shl ax,1	
  5674 0000143B 80FC00              <2> 	cmp ah,0	
  5675 0000143E 740C                <2> 	jz .zero		
  5676                              <2> 
  5677 00001440 8B5E04              <2> 	mov bx,[bp+4]
  5678 00001443 D1E3                <2> 	shl bx,1
  5679 00001445 80FF00              <2> 	cmp bh,0
  5680 00001448 7402                <2> 	jz .zero
  5681                              <2> 			
  5682 0000144A EB0C                <2> 	jmp .ok
  5683                              <2> 	
  5684                              <2> 	.zero:		
  5685 0000144C C746060000          <2> 		mov word [bp+6],0
  5686 00001451 C746080000          <2> 		mov word [bp+8],0
  5687 00001456 EB06                <2> 		jmp .done
  5688                              <2> 			
  5689                              <2> 	.ok:
  5690 00001458 C6460A01            <2> 		mov byte [bp+0x0A],1
  5691 0000145C EB04                <2> 		jmp .end
  5692                              <2> 	.done:	
  5693 0000145E C6460A00            <2> 		mov byte [bp+0x0A],0
  5694                              <2> 	.end:	
  5695                              <2> 		
  5696 00001462 C3                  <2> 	ret
  5697                              <2> 	
  5698                              <2> proc__addorsub_validate:
  5699 00001463 89E0                <2> 	mov ax,sp
  5700 00001465 89C5                <2> 	mov bp,ax
  5701                              <2> 	
  5702 00001467 8B4602              <2> 	mov ax,[bp+2]
  5703 0000146A 8B5E06              <2> 	mov bx,[bp+6]	
  5704 0000146D D1E0                <2> 	shl ax,1
  5705 0000146F D1E3                <2> 	shl bx,1
  5706 00001471 08FC                <2> 	or ah,bh
  5707 00001473 80FC00              <2> 	cmp ah,0
  5708 00001476 7416                <2> 	jz .zero
  5709                              <2> 	
  5710 00001478 8B4602              <2> 	mov ax,[bp+2]
  5711 0000147B D1E0                <2> 	shl ax,1
  5712 0000147D 80FC00              <2> 	cmp ah,0		
  5713 00001480 7426                <2> 	jz .value2
  5714                              <2> 	
  5715 00001482 8B4606              <2> 	mov ax,[bp+6]
  5716 00001485 D1E0                <2> 	shl ax,1
  5717 00001487 80FC00              <2> 	cmp ah,0
  5718 0000148A 740E                <2> 	jz .value1	
  5719                              <2> 		
  5720 0000148C EB28                <2> 	jmp .ok
  5721                              <2> 	
  5722                              <2> 	.zero:		
  5723 0000148E C7460A0000          <2> 		mov word [bp+0x0A],0
  5724 00001493 C7460C0000          <2> 		mov word [bp+0x0C],0
  5725 00001498 EB22                <2> 		jmp .done
  5726                              <2> 	.value1:
  5727 0000149A 8B4602              <2> 		mov ax,[bp+2]
  5728 0000149D 8B5E04              <2> 		mov bx,[bp+4]
  5729 000014A0 89460A              <2> 		mov word [bp+0x0A],ax
  5730 000014A3 895E0C              <2> 		mov word [bp+0x0C],bx		
  5731 000014A6 EB14                <2> 		jmp .done
  5732                              <2> 	.value2:		
  5733 000014A8 8B4606              <2> 		mov ax,[bp+6]
  5734 000014AB 8B5E08              <2> 		mov bx,[bp+8]
  5735 000014AE 89460A              <2> 		mov word [bp+0x0A],ax
  5736 000014B1 895E0C              <2> 		mov word [bp+0x0C],bx
  5737 000014B4 EB06                <2> 		jmp .done
  5738                              <2> 			
  5739                              <2> 	.ok:
  5740 000014B6 C6460E01            <2> 		mov byte [bp+0x0E],1
  5741 000014BA EB04                <2> 		jmp .end
  5742                              <2> 	.done:	
  5743 000014BC C6460E00            <2> 		mov byte [bp+0x0E],0
  5744                              <2> 	.end:	
  5745                              <2> 		
  5746 000014C0 C3                  <2> 	ret
  5747                              <2> 	
  5748                              <2> %endif
  5749                              <1> 
  5750                              <1> %macro flsetsig 1
  5751                              <1> 	flsetsig cs, %1
  5752                              <1> %endmacro
  5753                              <1> 
  5754                              <1> %macro flclrsig 1
  5755                              <1> 	flclrsig cs, %1
  5756                              <1> %endmacro
  5757                              <1> 
  5758                              <1> %macro int16tofl 2
  5759                              <1> 	int16tofl cs, %1, cs, %2
  5760                              <1> %endmacro
  5761                              <1> 
  5762                              <1> %macro fltoint16 2
  5763                              <1> 	fltoint16 cs, %1, cs, %2
  5764                              <1> %endmacro
  5765                              <1> 
  5766                              <1> %macro fltoint32 1
  5767                              <1> 	fltoint32 %1, %1
  5768                              <1> %endmacro
  5769                              <1> 
  5770                              <1> %macro fltoint32 2
  5771                              <1> 	fltoint32 cs, %1, cs, %2
  5772                              <1> %endmacro
  5773                              <1> 
  5774                              <1> %macro int32tofl 1
  5775                              <1> 	int32tofl %1, %1
  5776                              <1> %endmacro
  5777                              <1> 
  5778                              <1> %macro int32tofl 2
  5779                              <1> 	int32tofl cs, %1, cs, %2
  5780                              <1> %endmacro
  5781                              <1> 
  5782                              <1> %macro flcmp 3
  5783                              <1> 	flcmp cs, %1, cs, %2, cs, %3
  5784                              <1> %endmacro
  5785                              <1> 
  5786                              <1> %macro flshl 1
  5787                              <1> 	flshl cs, %1
  5788                              <1> %endmacro
  5789                              <1> 
  5790                              <1> %macro flshr 1
  5791                              <1> 	flshr cs, %1
  5792                              <1> %endmacro
  5793                              <1> 
  5794                              <1> %macro fladd 3
  5795                              <1> 	fladd cs, %1, cs, %2, cs, %3
  5796                              <1> %endmacro
  5797                              <1> 
  5798                              <1> %macro flsub 3
  5799                              <1> 	flsub cs, %1, cs, %2, cs, %3
  5800                              <1> %endmacro	
  5801                              <1> 
  5802                              <1> %macro flmul 3
  5803                              <1> 	flmul cs, %1, cs, %2, cs, %3
  5804                              <1> %endmacro
  5805                              <1> 
  5806                              <1> %macro fldiv 3
  5807                              <1> 	fldiv cs, %1, cs, %2, cs, %3
  5808                              <1> %endmacro	
  5809                              <1> 
  5810                              <1> %macro fladd 6
  5811                              <1> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  5812                              <1> %endmacro
  5813                              <1> 
  5814                              <1> %macro flsub 6
  5815                              <1> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  5816                              <1> %endmacro
  5817                              <1> 
  5818                              <1> %macro fltoint16 4
  5819                              <1> 	stkopen 0x06
  5820                              <1> 	mov ax,%1
  5821                              <1> 	mov ds,ax
  5822                              <1> 	mov ax,[%2+2]
  5823                              <1> 	mov [bp+0],ax
  5824                              <1> 	mov ax,[%2]
  5825                              <1> 	mov [bp+2],ax	
  5826                              <1> 	call proc_fltoint16
  5827                              <1> 	mov ax,sp
  5828                              <1> 	mov bp,ax
  5829                              <1> 	mov ax,%3
  5830                              <1> 	mov ds,ax
  5831                              <1> 	mov ax,[bp+4]
  5832                              <1> 	mov [%4],ax
  5833                              <1> 	stkclose 0x06
  5834                              <1> %endmacro
  5835                              <1> 
  5836                              <1> %macro int16tofl 4	
  5837                              <1> 	stkopen 0x06
  5838                              <1> 	mov ax,%1
  5839                              <1> 	mov ds,ax
  5840                              <1> 	mov ax,[%2]
  5841                              <1> 	mov [bp+0],ax	
  5842                              <1> 	call proc_int16tofl
  5843                              <1> 	mov ax,sp
  5844                              <1> 	mov bp,ax
  5845                              <1> 	mov ax,%3
  5846                              <1> 	mov ds,ax
  5847                              <1> 	mov ax,[bp+2]
  5848                              <1> 	mov [%4+2],ax
  5849                              <1> 	mov ax,[bp+4]
  5850                              <1> 	mov [%4],ax
  5851                              <1> 	stkclose 0x06
  5852                              <1> %endmacro
  5853                              <1> 
  5854                              <1> %macro fltoint32 4
  5855                              <1> 	stkopen 0x08
  5856                              <1> 	mov ax,%1
  5857                              <1> 	mov ds,ax
  5858                              <1> 	mov ax,[%2+2]
  5859                              <1> 	mov [bp+0],ax
  5860                              <1> 	mov ax,[%2]
  5861                              <1> 	mov [bp+2],ax	
  5862                              <1> 	call proc_fltoint32
  5863                              <1> 	mov ax,sp
  5864                              <1> 	mov bp,ax
  5865                              <1> 	mov ax,%3
  5866                              <1> 	mov ds,ax
  5867                              <1> 	mov ax,[bp+4]
  5868                              <1> 	mov [%4+2],ax
  5869                              <1> 	mov ax,[bp+6]
  5870                              <1> 	mov [%4],ax
  5871                              <1> 	stkclose 0x08
  5872                              <1> %endmacro
  5873                              <1> 
  5874                              <1> %macro int32tofl 4
  5875                              <1> 	stkopen 0x08
  5876                              <1> 	mov ax,%1
  5877                              <1> 	mov ds,ax
  5878                              <1> 	mov ax,[%2+2]
  5879                              <1> 	mov [bp+0],ax
  5880                              <1> 	mov ax,[%2]
  5881                              <1> 	mov [bp+2],ax	
  5882                              <1> 	call proc_int32tofl
  5883                              <1> 	mov ax,sp
  5884                              <1> 	mov bp,ax
  5885                              <1> 	mov ax,%3
  5886                              <1> 	mov ds,ax
  5887                              <1> 	mov ax,[bp+4]
  5888                              <1> 	mov [%4+2],ax
  5889                              <1> 	mov ax,[bp+6]
  5890                              <1> 	mov [%4],ax
  5891                              <1> 	stkclose 0x08
  5892                              <1> %endmacro
  5893                              <1> 
  5894                              <1> %macro flsetsig 2
  5895                              <1> 	stkopen 0x04
  5896                              <1> 	mov ax,%1
  5897                              <1> 	mov ds,ax
  5898                              <1> 	mov ax,[%2+2]
  5899                              <1> 	mov word [bp+0], ax
  5900                              <1> 	mov word [bp+2], 0x8000
  5901                              <1> 	call proc_flsetsig
  5902                              <1> 	push sp
  5903                              <1> 	pop bp
  5904                              <1> 	mov ax,[bp+0]
  5905                              <1> 	mov word [%2+2],ax
  5906                              <1> 	stkclose 0x04	
  5907                              <1> %endmacro
  5908                              <1> 
  5909                              <1> %macro flclrsig 2
  5910                              <1> 	stkopen 0x04
  5911                              <1> 	mov ax,%1
  5912                              <1> 	mov ds,ax
  5913                              <1> 	mov ax,[%2+2]
  5914                              <1> 	mov word [bp+0], ax
  5915                              <1> 	mov word [bp+2], 0x0000
  5916                              <1> 	call proc_flsetsig
  5917                              <1> 	push sp
  5918                              <1> 	pop bp
  5919                              <1> 	mov ax,[bp+0]
  5920                              <1> 	mov word [%2+2],ax
  5921                              <1> 	stkclose 0x04	
  5922                              <1> %endmacro
  5923                              <1> 
  5924                              <1> %macro flcmp 6	
  5925                              <1> 	stkopen 0x09
  5926                              <1> 	mov ax,%1
  5927                              <1> 	mov ds,ax
  5928                              <1> 	mov ax,[%2+2]
  5929                              <1> 	mov [bp+0],ax
  5930                              <1> 	mov ax,[%2]
  5931                              <1> 	mov [bp+2],ax
  5932                              <1> 	mov ax,%3
  5933                              <1> 	mov ds,ax
  5934                              <1> 	mov ax,[%4+2]
  5935                              <1> 	mov [bp+4],ax
  5936                              <1> 	mov ax,[%4]
  5937                              <1> 	mov [bp+6],ax
  5938                              <1> 	call proc_fldiv
  5939                              <1> 	mov ax,sp
  5940                              <1> 	mov bp,ax
  5941                              <1> 	mov ax,%5
  5942                              <1> 	mov ds,ax
  5943                              <1> 	mov al,[bp+8]
  5944                              <1> 	mov [%6],al
  5945                              <1> 	stkclose 0x09
  5946                              <1> %endmacro
  5947                              <1> 
  5948                              <1> %macro flshl 2	
  5949                              <1> 	stkopen 0x02
  5950                              <1> 	mov ax,%1
  5951                              <1> 	mov ds,ax
  5952                              <1> 	mov ax,[%2+2]
  5953                              <1> 	mov [bp+0],ax
  5954                              <1> 	call proc_flshl
  5955                              <1> 	mov ax,sp
  5956                              <1> 	mov bp,ax
  5957                              <1> 	mov ax,%1
  5958                              <1> 	mov ds,ax
  5959                              <1> 	mov ax,[bp+0]
  5960                              <1> 	mov [%2+2],ax
  5961                              <1> 	stkclose 0x02
  5962                              <1> %endmacro
  5963                              <1> 
  5964                              <1> %macro flshr 2	
  5965                              <1> 	stkopen 0x02
  5966                              <1> 	mov ax,%1
  5967                              <1> 	mov ds,ax
  5968                              <1> 	mov ax,[%2+2]
  5969                              <1> 	mov [bp+0],ax
  5970                              <1> 	call proc_flshr
  5971                              <1> 	mov ax,sp
  5972                              <1> 	mov bp,ax
  5973                              <1> 	mov ax,%1
  5974                              <1> 	mov ds,ax
  5975                              <1> 	mov ax,[bp+0]
  5976                              <1> 	mov [%2+2],ax
  5977                              <1> 	stkclose 0x02
  5978                              <1> %endmacro
  5979                              <1> 
  5980                              <1> %macro fldiv 6	
  5981                              <1> 	stkopen 0x0C
  5982                              <1> 	mov ax,%1
  5983                              <1> 	mov ds,ax
  5984                              <1> 	mov ax,[%2+2]
  5985                              <1> 	mov [bp+0],ax
  5986                              <1> 	mov ax,[%2]
  5987                              <1> 	mov [bp+2],ax
  5988                              <1> 	mov ax,%3
  5989                              <1> 	mov ds,ax
  5990                              <1> 	mov ax,[%4+2]
  5991                              <1> 	mov [bp+4],ax
  5992                              <1> 	mov ax,[%4]
  5993                              <1> 	mov [bp+6],ax
  5994                              <1> 	call proc_fldiv
  5995                              <1> 	mov ax,sp
  5996                              <1> 	mov bp,ax
  5997                              <1> 	mov ax,%5
  5998                              <1> 	mov ds,ax
  5999                              <1> 	mov ax,[bp+8]
  6000                              <1> 	mov [%6+2],ax
  6001                              <1> 	mov ax,[bp+0x0A]
  6002                              <1> 	mov [%6],ax
  6003                              <1> 	stkclose 0x0C
  6004                              <1> %endmacro
  6005                              <1> 
  6006                              <1> %macro flmul 6	
  6007                              <1> 	stkopen 0x0C
  6008                              <1> 	mov ax,%1
  6009                              <1> 	mov ds,ax
  6010                              <1> 	mov ax,[%2+2]
  6011                              <1> 	mov [bp+0],ax
  6012                              <1> 	mov ax,[%2]
  6013                              <1> 	mov [bp+2],ax
  6014                              <1> 	mov ax,%3
  6015                              <1> 	mov ds,ax
  6016                              <1> 	mov ax,[%4+2]
  6017                              <1> 	mov [bp+4],ax
  6018                              <1> 	mov ax,[%4]
  6019                              <1> 	mov [bp+6],ax
  6020                              <1> 	call proc_flmul
  6021                              <1> 	mov ax,sp
  6022                              <1> 	mov bp,ax
  6023                              <1> 	mov ax,%5
  6024                              <1> 	mov ds,ax
  6025                              <1> 	mov ax,[bp+8]
  6026                              <1> 	mov [%6+2],ax
  6027                              <1> 	mov ax,[bp+0x0A]
  6028                              <1> 	mov [%6],ax
  6029                              <1> 	stkclose 0x0C
  6030                              <1> %endmacro
  6031                              <1> 	
  6032                              <1> %macro fladdorsub 7
  6033                              <1> 	stkopen 0x0E
  6034                              <1> 	mov ax,%1
  6035                              <1> 	mov ds,ax
  6036                              <1> 	mov ax,[%2+2]
  6037                              <1> 	mov [bp+0],ax
  6038                              <1> 	mov ax,[%2]
  6039                              <1> 	mov [bp+2],ax
  6040                              <1> 	mov ax,%3
  6041                              <1> 	mov ds,ax
  6042                              <1> 	mov ax,[%4+2]
  6043                              <1> 	mov [bp+4],ax
  6044                              <1> 	mov ax,[%4]
  6045                              <1> 	mov [bp+6],ax
  6046                              <1> 	mov word [bp+0x0C], %7
  6047                              <1> 	call proc_fladdorsub
  6048                              <1> 	mov ax,sp
  6049                              <1> 	mov bp,ax
  6050                              <1> 	mov ax,%5
  6051                              <1> 	mov ds,ax
  6052                              <1> 	mov ax,[bp+8]
  6053                              <1> 	mov [%6+2],ax
  6054                              <1> 	mov ax,[bp+0x0A]
  6055                              <1> 	mov [%6],ax
  6056                              <1> 	stkclose 0x0E
  6057                              <1> %endmacro
  6058                              <1> 	
  6059                              <1> %endif
  6060                                  %include "lib/trigon.mac"
  6061                              <1> 
  6062                              <1> %ifndef TRIGON_MAC
  6063                              <1> 	%define TRIGON_MAC
  6064                              <1> 
  6065                              <1> 	%include "lib/trigon.asm"
  6066                              <2> 
  6067                              <2> %ifndef TRIGON_ASM
  6068                              <2> 	%define TRIGON_ASM
  6069                              <2> 
  6070                              <2> 	%include "lib/math.mac"
  6071                              <3> 
  6072                              <3> %ifndef MATH_MAC
  6073                              <3> 	%define MATH_MAC
  6074                              <3> 	
  6075                              <3> 	%include "lib/math.asm"
  6076                              <3> 	%include "lib/system.mac"
  6077                              <3> 
  6078                              <3> %macro chgsig 1
  6079                              <3> 	chgsig cs, %1
  6080                              <3> %endmacro
  6081                              <3> 
  6082                              <3> %macro cmp16 3
  6083                              <3> 	cmp16 cs, %1, cs, %2, %3
  6084                              <3> %endmacro
  6085                              <3> 
  6086                              <3> %macro mul16 2
  6087                              <3> 	mul16 cs, %1, cs, %2
  6088                              <3> %endmacro
  6089                              <3> 
  6090                              <3> %macro div16 2
  6091                              <3> 	div16 cs, %1, cs, %2
  6092                              <3> %endmacro
  6093                              <3> 
  6094                              <3> %macro mod16 2
  6095                              <3> 	mod16 cs, %1, cs, %2
  6096                              <3> %endmacro
  6097                              <3> 
  6098                              <3> %macro inc16 1
  6099                              <3> 	inc16 cs, %1
  6100                              <3> %endmacro
  6101                              <3> 
  6102                              <3> %macro dec16 1
  6103                              <3> 	dec16 cs, %1
  6104                              <3> %endmacro
  6105                              <3> 
  6106                              <3> %macro add16 2
  6107                              <3> 	add16 cs, %1, cs, %2
  6108                              <3> %endmacro
  6109                              <3> 
  6110                              <3> %macro sub16 2
  6111                              <3> 	sub16 cs, %1, cs, %2
  6112                              <3> %endmacro
  6113                              <3> 
  6114                              <3> %macro int32to16 2
  6115                              <3> 	int32to16 cs, %1, %2
  6116                              <3> %endmacro
  6117                              <3> 
  6118                              <3> %macro int16to32 2
  6119                              <3> 	int16to32 %1, cs, %2
  6120                              <3> %endmacro
  6121                              <3> 
  6122                              <3> %macro setsig 1
  6123                              <3> 	setsig cs, %1
  6124                              <3> %endmacro
  6125                              <3> 
  6126                              <3> %macro clrsig 1
  6127                              <3> 	clrsig cs, %1
  6128                              <3> %endmacro
  6129                              <3> 
  6130                              <3> %macro idiv32 5
  6131                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  6132                              <3> %endmacro
  6133                              <3> 
  6134                              <3> %macro imul32 3
  6135                              <3> 	imul32 cs, %1, cs, %2, cs, %3
  6136                              <3> %endmacro
  6137                              <3> 
  6138                              <3> %macro div32 5
  6139                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  6140                              <3> %endmacro
  6141                              <3> 
  6142                              <3> %macro mul32 3
  6143                              <3> 	mul32 cs, %1, cs, %2, cs, %3
  6144                              <3> %endmacro
  6145                              <3> 	
  6146                              <3> %macro add32 3
  6147                              <3> 	add32 cs, %1, cs, %2, cs, %3
  6148                              <3> %endmacro
  6149                              <3> 
  6150                              <3> %macro sub32 3
  6151                              <3> 	sub32 cs, %1, cs, %2, cs, %3
  6152                              <3> %endmacro
  6153                              <3> 
  6154                              <3> %macro int32to16 3
  6155                              <3> 	stkopen 0x06
  6156                              <3> 	mov ax,%1
  6157                              <3> 	mov ds,ax
  6158                              <3> 	mov ax,[%2+2]
  6159                              <3> 	mov word [bp+0], ax
  6160                              <3> 	mov ax,[%2]	
  6161                              <3> 	mov word [bp+2], ax
  6162                              <3> 	call proc_int32to16
  6163                              <3> 	mov ax,sp
  6164                              <3> 	mov bp,ax
  6165                              <3> 	mov ax,[bp+4]
  6166                              <3> 	mov word %3, ax	
  6167                              <3> 	stkclose 0x06
  6168                              <3> %endmacro
  6169                              <3> 
  6170                              <3> %macro int16to32 3
  6171                              <3> 	stkopen 0x06
  6172                              <3> 	mov word [bp+0], %1	
  6173                              <3> 	call proc_int16to32
  6174                              <3> 	mov ax,sp
  6175                              <3> 	mov bp,ax
  6176                              <3> 	mov ax,%2
  6177                              <3> 	mov ds,ax
  6178                              <3> 	mov ax,[bp+2]
  6179                              <3> 	mov [%3+2],ax
  6180                              <3> 	mov ax,[bp+4]
  6181                              <3> 	mov [%3],ax	
  6182                              <3> 	stkclose 0x06
  6183                              <3> %endmacro
  6184                              <3> 
  6185                              <3> %macro setsig 2
  6186                              <3> 	stkopen 0x02
  6187                              <3> 	mov ax,%1
  6188                              <3> 	mov ds,ax
  6189                              <3> 	mov ax,[%2+2]
  6190                              <3> 	mov word [bp+0], ax
  6191                              <3> 	call proc_setsig
  6192                              <3> 	mov ax,sp
  6193                              <3> 	mov bp,ax
  6194                              <3> 	mov ax,%1
  6195                              <3> 	mov ds,ax
  6196                              <3> 	mov ax,[bp+0]
  6197                              <3> 	mov word [%2+2], ax
  6198                              <3> 	stkclose 0x02
  6199                              <3> %endmacro
  6200                              <3> 
  6201                              <3> %macro clrsig 2
  6202                              <3> 	stkopen 0x02
  6203                              <3> 	mov ax,%1
  6204                              <3> 	mov ds,ax
  6205                              <3> 	mov ax,[%2+2]
  6206                              <3> 	mov word [bp+0], ax
  6207                              <3> 	call proc_clrsig
  6208                              <3> 	mov ax,sp
  6209                              <3> 	mov bp,ax
  6210                              <3> 	mov ax,%1
  6211                              <3> 	mov ds,ax
  6212                              <3> 	mov ax,[bp+0]
  6213                              <3> 	mov word [%2+2], ax
  6214                              <3> 	stkclose 0x02
  6215                              <3> %endmacro
  6216                              <3> 
  6217                              <3> %macro div32 10
  6218                              <3> 	stkopen 0x11
  6219                              <3> 	mov ax,%1
  6220                              <3> 	mov ds,ax
  6221                              <3> 	mov ax,[%2+2]
  6222                              <3> 	mov word [bp+0], ax
  6223                              <3> 	mov ax,[%2]
  6224                              <3> 	mov word [bp+2], ax
  6225                              <3> 	mov ax,%3
  6226                              <3> 	mov ds,ax
  6227                              <3> 	mov ax,[%4+2]
  6228                              <3> 	mov word [bp+4], ax
  6229                              <3> 	mov ax,[%4]
  6230                              <3> 	mov word [bp+6], ax
  6231                              <3> 	call proc_div32
  6232                              <3> 	mov ax,sp
  6233                              <3> 	mov bp,ax
  6234                              <3> 	mov ax,%5
  6235                              <3> 	mov ds,ax
  6236                              <3> 	mov word ax, [bp+8]
  6237                              <3> 	mov word [%6+2], ax
  6238                              <3> 	mov word ax, [bp+0x0A]
  6239                              <3> 	mov word [%6], ax
  6240                              <3> 	mov ax,%7
  6241                              <3> 	mov ds,ax
  6242                              <3> 	mov word ax,[bp+0x0C]
  6243                              <3> 	mov word [%8+2],ax
  6244                              <3> 	mov word ax,[bp+0x0E]
  6245                              <3> 	mov word [%8],ax
  6246                              <3> 	mov ax,%9
  6247                              <3> 	mov ds,ax
  6248                              <3> 	mov byte al,[bp+0x10]
  6249                              <3> 	mov byte [%10],al
  6250                              <3> 	stkclose 0x11
  6251                              <3> %endmacro
  6252                              <3> 	
  6253                              <3> %macro mul32 6
  6254                              <3> 	stkopen 0x0C
  6255                              <3> 	mov ax,%1
  6256                              <3> 	mov ds,ax
  6257                              <3> 	mov ax,[%2+2]
  6258                              <3> 	mov word [bp+0], ax
  6259                              <3> 	mov ax,[%2]
  6260                              <3> 	mov word [bp+2], ax
  6261                              <3> 	mov ax,%3
  6262                              <3> 	mov ds,ax
  6263                              <3> 	mov ax,[%4+2]
  6264                              <3> 	mov word [bp+4], ax
  6265                              <3> 	mov ax,[%4]
  6266                              <3> 	mov word [bp+6], ax
  6267                              <3> 	call proc_mul32
  6268                              <3> 	mov ax,sp
  6269                              <3> 	mov bp,ax
  6270                              <3> 	mov ax,%5
  6271                              <3> 	mov ds,ax
  6272                              <3> 	mov word ax, [bp+8]
  6273                              <3> 	mov word [%6+2], ax
  6274                              <3> 	mov word ax, [bp+0x0A]
  6275                              <3> 	mov word [%6], ax
  6276                              <3> 	stkclose 0x0C
  6277                              <3> %endmacro	
  6278                              <3> 	
  6279                              <3> %macro add32 6
  6280                              <3> 	stkopen 0x0C
  6281                              <3> 	mov ax,%1
  6282                              <3> 	mov ds,ax
  6283                              <3> 	mov ax,[%2+2]
  6284                              <3> 	mov word [bp+0], ax
  6285                              <3> 	mov ax,[%2]
  6286                              <3> 	mov word [bp+2], ax
  6287                              <3> 	mov ax,%3
  6288                              <3> 	mov ds,ax
  6289                              <3> 	mov ax,[%4+2]
  6290                              <3> 	mov word [bp+4], ax
  6291                              <3> 	mov ax,[%4]
  6292                              <3> 	mov word [bp+6], ax
  6293                              <3> 	call proc_add32
  6294                              <3> 	mov ax,sp
  6295                              <3> 	mov bp,ax
  6296                              <3> 	mov ax,%5
  6297                              <3> 	mov ds,ax
  6298                              <3> 	mov word ax, [bp+8]
  6299                              <3> 	mov word [%6+2], ax
  6300                              <3> 	mov word ax, [bp+0x0A]
  6301                              <3> 	mov word [%6], ax
  6302                              <3> 	stkclose 0x0C
  6303                              <3> %endmacro
  6304                              <3> 
  6305                              <3> %macro sub32 6
  6306                              <3> 	stkopen 0x0C
  6307                              <3> 	mov ax,%1
  6308                              <3> 	mov ds,ax
  6309                              <3> 	mov ax,[%2+2]
  6310                              <3> 	mov word [bp+0], ax
  6311                              <3> 	mov ax,[%2]
  6312                              <3> 	mov word [bp+2], ax
  6313                              <3> 	mov ax,%3
  6314                              <3> 	mov ds,ax
  6315                              <3> 	mov ax,[%4+2]
  6316                              <3> 	mov word [bp+4], ax
  6317                              <3> 	mov ax,[%4]
  6318                              <3> 	mov word [bp+6], ax
  6319                              <3> 	call proc_sub32
  6320                              <3> 	mov ax,sp
  6321                              <3> 	mov bp,ax
  6322                              <3> 	mov ax,%5
  6323                              <3> 	mov ds,ax
  6324                              <3> 	mov word ax, [bp+8]
  6325                              <3> 	mov word [%6+2], ax
  6326                              <3> 	mov word ax, [bp+0x0A]
  6327                              <3> 	mov word [%6], ax
  6328                              <3> 	stkclose 0x0C
  6329                              <3> %endmacro
  6330                              <3> 
  6331                              <3> %macro idiv32 10
  6332                              <3> 	stkopen 0x11
  6333                              <3> 	mov ax,%1
  6334                              <3> 	mov ds,ax
  6335                              <3> 	mov ax,[%2+2]
  6336                              <3> 	mov word [bp+0], ax
  6337                              <3> 	mov ax,[%2]
  6338                              <3> 	mov word [bp+2], ax
  6339                              <3> 	mov ax,%3
  6340                              <3> 	mov ds,ax
  6341                              <3> 	mov ax,[%4+2]
  6342                              <3> 	mov word [bp+4], ax
  6343                              <3> 	mov ax,[%4]
  6344                              <3> 	mov word [bp+6], ax
  6345                              <3> 	call proc_idiv32
  6346                              <3> 	mov ax,sp
  6347                              <3> 	mov bp,ax
  6348                              <3> 	mov ax,%5
  6349                              <3> 	mov ds,ax
  6350                              <3> 	mov word ax, [bp+8]
  6351                              <3> 	mov word [%6+2], ax
  6352                              <3> 	mov word ax, [bp+0x0A]
  6353                              <3> 	mov word [%6], ax
  6354                              <3> 	mov ax,%7
  6355                              <3> 	mov ds,ax
  6356                              <3> 	mov word ax,[bp+0x0C]
  6357                              <3> 	mov word [%8+2],ax
  6358                              <3> 	mov word ax,[bp+0x0E]
  6359                              <3> 	mov word [%8],ax
  6360                              <3> 	mov ax,%9
  6361                              <3> 	mov ds,ax
  6362                              <3> 	mov byte al,[bp+0x10]
  6363                              <3> 	mov byte [%10],al
  6364                              <3> 	stkclose 0x11
  6365                              <3> %endmacro
  6366                              <3> 
  6367                              <3> %macro imul32 6
  6368                              <3> 	stkopen 0x0C
  6369                              <3> 	mov ax,%1
  6370                              <3> 	mov ds,ax
  6371                              <3> 	mov ax,[%2+2]
  6372                              <3> 	mov word [bp+0], ax
  6373                              <3> 	mov ax,[%2]
  6374                              <3> 	mov word [bp+2], ax
  6375                              <3> 	mov ax,%3
  6376                              <3> 	mov ds,ax
  6377                              <3> 	mov ax,[%4+2]
  6378                              <3> 	mov word [bp+4], ax
  6379                              <3> 	mov ax,[%4]
  6380                              <3> 	mov word [bp+6], ax
  6381                              <3> 	call proc_imul32
  6382                              <3> 	mov ax,sp
  6383                              <3> 	mov bp,ax
  6384                              <3> 	mov ax,%5
  6385                              <3> 	mov ds,ax
  6386                              <3> 	mov word ax, [bp+8]
  6387                              <3> 	mov word [%6+2], ax
  6388                              <3> 	mov word ax, [bp+0x0A]
  6389                              <3> 	mov word [%6], ax
  6390                              <3> 	stkclose 0x0C
  6391                              <3> %endmacro
  6392                              <3> 	
  6393                              <3> %macro cmp32 3
  6394                              <3> 	cmp32 cs, %1, cs, %2, %3
  6395                              <3> %endmacro	
  6396                              <3> 	
  6397                              <3> %macro cmp32 5
  6398                              <3> 	stkopen 9
  6399                              <3> 	mov ax,%1
  6400                              <3> 	mov ds,ax
  6401                              <3> 	mov word ax,[%2+2]
  6402                              <3> 	mov word [bp+0], ax
  6403                              <3> 	mov word ax,[%2]
  6404                              <3> 	mov word [bp+2], ax	
  6405                              <3> 	mov ax,%3
  6406                              <3> 	mov ds,ax
  6407                              <3> 	mov word ax,[%4+2]
  6408                              <3> 	mov word [bp+4], ax
  6409                              <3> 	mov word ax,[%4]
  6410                              <3> 	mov word [bp+6], ax	
  6411                              <3> 	call proc_cmp32
  6412                              <3> 	mov ax,sp
  6413                              <3> 	mov bp,ax
  6414                              <3> 	mov al,[bp+8]
  6415                              <3> 	mov byte %5,al
  6416                              <3> 	stkclose 9
  6417                              <3> %endmacro
  6418                              <3> 	
  6419                              <3> %macro shl32 2
  6420                              <3> 	shl32 cs, %1, %2
  6421                              <3> %endmacro	
  6422                              <3> 	
  6423                              <3> %macro shl32 3
  6424                              <3> 	stkopen 5
  6425                              <3> 	mov ax,%1
  6426                              <3> 	mov ds,ax
  6427                              <3> 	mov word ax,[%2+2]
  6428                              <3> 	mov word [bp+0], ax
  6429                              <3> 	mov word ax,[%2]
  6430                              <3> 	mov word [bp+2], ax
  6431                              <3> 	mov byte al, %3
  6432                              <3> 	mov byte [bp+4], al 
  6433                              <3> 	call proc_shl32
  6434                              <3> 	mov ax,sp
  6435                              <3> 	mov bp,ax
  6436                              <3> 	mov ax,%1
  6437                              <3> 	mov ds,ax
  6438                              <3> 	mov ax,[bp+0]
  6439                              <3> 	mov word [%2+2],ax
  6440                              <3> 	mov ax,[bp+2]
  6441                              <3> 	mov word [%2],ax
  6442                              <3> 	stkclose 5
  6443                              <3> %endmacro
  6444                              <3> 
  6445                              <3> 
  6446                              <3> %macro shr32 2
  6447                              <3> 	shr32 cs, %1, %2
  6448                              <3> %endmacro	
  6449                              <3> 	
  6450                              <3> %macro shr32 3
  6451                              <3> 	stkopen 5
  6452                              <3> 	mov ax,%1
  6453                              <3> 	mov ds,ax
  6454                              <3> 	mov word ax,[%2+2]
  6455                              <3> 	mov word [bp+0], ax
  6456                              <3> 	mov word ax,[%2]
  6457                              <3> 	mov word [bp+2], ax
  6458                              <3> 	mov byte al, %3
  6459                              <3> 	mov byte [bp+4], al 
  6460                              <3> 	call proc_shr32
  6461                              <3> 	mov ax,sp
  6462                              <3> 	mov bp,ax
  6463                              <3> 	mov ax,%1
  6464                              <3> 	mov ds,ax
  6465                              <3> 	mov ax,[bp+0]
  6466                              <3> 	mov word [%2+2],ax
  6467                              <3> 	mov ax,[bp+2]
  6468                              <3> 	mov word [%2],ax
  6469                              <3> 	stkclose 5
  6470                              <3> %endmacro
  6471                              <3> 
  6472                              <3> %macro inc16 2
  6473                              <3> 	mov ax,%1
  6474                              <3> 	mov ds,ax
  6475                              <3> 	inc word [%2]
  6476                              <3> %endmacro
  6477                              <3> 
  6478                              <3> %macro dec16 2
  6479                              <3> 	mov ax,%1
  6480                              <3> 	mov ds,ax
  6481                              <3> 	dec word [%2]
  6482                              <3> %endmacro
  6483                              <3> 
  6484                              <3> %macro add16 4	
  6485                              <3> 	mov ax,%3
  6486                              <3> 	mov ds,ax
  6487                              <3> 	mov bx,[%4]	
  6488                              <3> 	mov ax,%1
  6489                              <3> 	mov ds,ax	
  6490                              <3> 	add [%2],bx
  6491                              <3> %endmacro
  6492                              <3> 
  6493                              <3> %macro sub16 4
  6494                              <3> 	mov ax,%3
  6495                              <3> 	mov ds,ax
  6496                              <3> 	mov bx,[%4]
  6497                              <3> 	mov ax,%1
  6498                              <3> 	mov ds,ax
  6499                              <3> 	sub [%2],bx
  6500                              <3> %endmacro
  6501                              <3> 
  6502                              <3> %macro mul16 4
  6503                              <3> 	mov ax,%1
  6504                              <3> 	mov ds,ax
  6505                              <3> 	mov bx,[%2]
  6506                              <3> 	mov ax,%3
  6507                              <3> 	mov ds,ax
  6508                              <3> 	mov cx,[%4]
  6509                              <3> 	
  6510                              <3> 	mov ax,bx
  6511                              <3> 	imul cx
  6512                              <3> 	
  6513                              <3> 	mov dx,%1
  6514                              <3> 	mov ds,dx
  6515                              <3> 	mov [%2],ax
  6516                              <3> %endmacro
  6517                              <3> 
  6518                              <3> %macro div16 4
  6519                              <3> 	mov ax,%1
  6520                              <3> 	mov ds,ax
  6521                              <3> 	mov bx,[%2]
  6522                              <3> 	mov ax,%3
  6523                              <3> 	mov ds,ax
  6524                              <3> 	mov cx,[%4]
  6525                              <3> 	
  6526                              <3> 	xor dx,dx
  6527                              <3> 	mov ax,bx
  6528                              <3> 	idiv cx
  6529                              <3> 	
  6530                              <3> 	mov dx,%1
  6531                              <3> 	mov ds,dx
  6532                              <3> 	mov [%2],ax
  6533                              <3> %endmacro
  6534                              <3> 
  6535                              <3> 
  6536                              <3> %macro mod16 4
  6537                              <3> 	mov ax,%1
  6538                              <3> 	mov ds,ax
  6539                              <3> 	mov bx,[%2]
  6540                              <3> 	mov ax,%3
  6541                              <3> 	mov ds,ax
  6542                              <3> 	mov cx,[%4]
  6543                              <3> 	
  6544                              <3> 	xor dx,dx
  6545                              <3> 	mov ax,bx
  6546                              <3> 	idiv cx
  6547                              <3> 	
  6548                              <3> 	mov bx,%1
  6549                              <3> 	mov ds,bx
  6550                              <3> 	mov [%2],dx
  6551                              <3> %endmacro
  6552                              <3> 
  6553                              <3> %macro cmp16 5
  6554                              <3> 	mov ax,%1
  6555                              <3> 	mov ds,ax
  6556                              <3> 	mov bx,[%2]
  6557                              <3> 	mov ax,%3
  6558                              <3> 	mov ds,ax
  6559                              <3> 	mov	cx,[%4]
  6560                              <3> 	
  6561                              <3> 	cmp bx,cx
  6562                              <3> 	jg %%above
  6563                              <3> 	jl %%below
  6564                              <3> 		mov byte %5, 0
  6565                              <3> 		jmp %%endcmp
  6566                              <3> 	%%above:
  6567                              <3> 		mov byte %5, 1
  6568                              <3> 		jmp %%endcmp
  6569                              <3> 	%%below:
  6570                              <3> 		mov byte %5, -1
  6571                              <3> 	%%endcmp:
  6572                              <3> %endmacro
  6573                              <3> 
  6574                              <3> %macro chgsig 2
  6575                              <3> 	mov ax,%1
  6576                              <3> 	mov ds,ax
  6577                              <3> 	mov ax,[%2]
  6578                              <3> 	mov bx,0xFFFF
  6579                              <3> 	sub bx,ax
  6580                              <3> 	inc bx
  6581                              <3> 	mov [%2],bx
  6582                              <3> %endmacro
  6583                              <3> 	
  6584                              <3> %endif
  6585                              <2> 	%include "lib/float.mac"
  6586                              <3> 
  6587                              <3> %ifndef FLOAT_MAC
  6588                              <3> 	%define FLOAT_MAC
  6589                              <3> 	
  6590                              <3> 	%include "lib/float.asm"
  6591                              <3> 
  6592                              <3> %macro flsetsig 1
  6593                              <3> 	flsetsig cs, %1
  6594                              <3> %endmacro
  6595                              <3> 
  6596                              <3> %macro flclrsig 1
  6597                              <3> 	flclrsig cs, %1
  6598                              <3> %endmacro
  6599                              <3> 
  6600                              <3> %macro int16tofl 2
  6601                              <3> 	int16tofl cs, %1, cs, %2
  6602                              <3> %endmacro
  6603                              <3> 
  6604                              <3> %macro fltoint16 2
  6605                              <3> 	fltoint16 cs, %1, cs, %2
  6606                              <3> %endmacro
  6607                              <3> 
  6608                              <3> %macro fltoint32 1
  6609                              <3> 	fltoint32 %1, %1
  6610                              <3> %endmacro
  6611                              <3> 
  6612                              <3> %macro fltoint32 2
  6613                              <3> 	fltoint32 cs, %1, cs, %2
  6614                              <3> %endmacro
  6615                              <3> 
  6616                              <3> %macro int32tofl 1
  6617                              <3> 	int32tofl %1, %1
  6618                              <3> %endmacro
  6619                              <3> 
  6620                              <3> %macro int32tofl 2
  6621                              <3> 	int32tofl cs, %1, cs, %2
  6622                              <3> %endmacro
  6623                              <3> 
  6624                              <3> %macro flcmp 3
  6625                              <3> 	flcmp cs, %1, cs, %2, cs, %3
  6626                              <3> %endmacro
  6627                              <3> 
  6628                              <3> %macro flshl 1
  6629                              <3> 	flshl cs, %1
  6630                              <3> %endmacro
  6631                              <3> 
  6632                              <3> %macro flshr 1
  6633                              <3> 	flshr cs, %1
  6634                              <3> %endmacro
  6635                              <3> 
  6636                              <3> %macro fladd 3
  6637                              <3> 	fladd cs, %1, cs, %2, cs, %3
  6638                              <3> %endmacro
  6639                              <3> 
  6640                              <3> %macro flsub 3
  6641                              <3> 	flsub cs, %1, cs, %2, cs, %3
  6642                              <3> %endmacro	
  6643                              <3> 
  6644                              <3> %macro flmul 3
  6645                              <3> 	flmul cs, %1, cs, %2, cs, %3
  6646                              <3> %endmacro
  6647                              <3> 
  6648                              <3> %macro fldiv 3
  6649                              <3> 	fldiv cs, %1, cs, %2, cs, %3
  6650                              <3> %endmacro	
  6651                              <3> 
  6652                              <3> %macro fladd 6
  6653                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  6654                              <3> %endmacro
  6655                              <3> 
  6656                              <3> %macro flsub 6
  6657                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  6658                              <3> %endmacro
  6659                              <3> 
  6660                              <3> %macro fltoint16 4
  6661                              <3> 	stkopen 0x06
  6662                              <3> 	mov ax,%1
  6663                              <3> 	mov ds,ax
  6664                              <3> 	mov ax,[%2+2]
  6665                              <3> 	mov [bp+0],ax
  6666                              <3> 	mov ax,[%2]
  6667                              <3> 	mov [bp+2],ax	
  6668                              <3> 	call proc_fltoint16
  6669                              <3> 	mov ax,sp
  6670                              <3> 	mov bp,ax
  6671                              <3> 	mov ax,%3
  6672                              <3> 	mov ds,ax
  6673                              <3> 	mov ax,[bp+4]
  6674                              <3> 	mov [%4],ax
  6675                              <3> 	stkclose 0x06
  6676                              <3> %endmacro
  6677                              <3> 
  6678                              <3> %macro int16tofl 4	
  6679                              <3> 	stkopen 0x06
  6680                              <3> 	mov ax,%1
  6681                              <3> 	mov ds,ax
  6682                              <3> 	mov ax,[%2]
  6683                              <3> 	mov [bp+0],ax	
  6684                              <3> 	call proc_int16tofl
  6685                              <3> 	mov ax,sp
  6686                              <3> 	mov bp,ax
  6687                              <3> 	mov ax,%3
  6688                              <3> 	mov ds,ax
  6689                              <3> 	mov ax,[bp+2]
  6690                              <3> 	mov [%4+2],ax
  6691                              <3> 	mov ax,[bp+4]
  6692                              <3> 	mov [%4],ax
  6693                              <3> 	stkclose 0x06
  6694                              <3> %endmacro
  6695                              <3> 
  6696                              <3> %macro fltoint32 4
  6697                              <3> 	stkopen 0x08
  6698                              <3> 	mov ax,%1
  6699                              <3> 	mov ds,ax
  6700                              <3> 	mov ax,[%2+2]
  6701                              <3> 	mov [bp+0],ax
  6702                              <3> 	mov ax,[%2]
  6703                              <3> 	mov [bp+2],ax	
  6704                              <3> 	call proc_fltoint32
  6705                              <3> 	mov ax,sp
  6706                              <3> 	mov bp,ax
  6707                              <3> 	mov ax,%3
  6708                              <3> 	mov ds,ax
  6709                              <3> 	mov ax,[bp+4]
  6710                              <3> 	mov [%4+2],ax
  6711                              <3> 	mov ax,[bp+6]
  6712                              <3> 	mov [%4],ax
  6713                              <3> 	stkclose 0x08
  6714                              <3> %endmacro
  6715                              <3> 
  6716                              <3> %macro int32tofl 4
  6717                              <3> 	stkopen 0x08
  6718                              <3> 	mov ax,%1
  6719                              <3> 	mov ds,ax
  6720                              <3> 	mov ax,[%2+2]
  6721                              <3> 	mov [bp+0],ax
  6722                              <3> 	mov ax,[%2]
  6723                              <3> 	mov [bp+2],ax	
  6724                              <3> 	call proc_int32tofl
  6725                              <3> 	mov ax,sp
  6726                              <3> 	mov bp,ax
  6727                              <3> 	mov ax,%3
  6728                              <3> 	mov ds,ax
  6729                              <3> 	mov ax,[bp+4]
  6730                              <3> 	mov [%4+2],ax
  6731                              <3> 	mov ax,[bp+6]
  6732                              <3> 	mov [%4],ax
  6733                              <3> 	stkclose 0x08
  6734                              <3> %endmacro
  6735                              <3> 
  6736                              <3> %macro flsetsig 2
  6737                              <3> 	stkopen 0x04
  6738                              <3> 	mov ax,%1
  6739                              <3> 	mov ds,ax
  6740                              <3> 	mov ax,[%2+2]
  6741                              <3> 	mov word [bp+0], ax
  6742                              <3> 	mov word [bp+2], 0x8000
  6743                              <3> 	call proc_flsetsig
  6744                              <3> 	push sp
  6745                              <3> 	pop bp
  6746                              <3> 	mov ax,[bp+0]
  6747                              <3> 	mov word [%2+2],ax
  6748                              <3> 	stkclose 0x04	
  6749                              <3> %endmacro
  6750                              <3> 
  6751                              <3> %macro flclrsig 2
  6752                              <3> 	stkopen 0x04
  6753                              <3> 	mov ax,%1
  6754                              <3> 	mov ds,ax
  6755                              <3> 	mov ax,[%2+2]
  6756                              <3> 	mov word [bp+0], ax
  6757                              <3> 	mov word [bp+2], 0x0000
  6758                              <3> 	call proc_flsetsig
  6759                              <3> 	push sp
  6760                              <3> 	pop bp
  6761                              <3> 	mov ax,[bp+0]
  6762                              <3> 	mov word [%2+2],ax
  6763                              <3> 	stkclose 0x04	
  6764                              <3> %endmacro
  6765                              <3> 
  6766                              <3> %macro flcmp 6	
  6767                              <3> 	stkopen 0x09
  6768                              <3> 	mov ax,%1
  6769                              <3> 	mov ds,ax
  6770                              <3> 	mov ax,[%2+2]
  6771                              <3> 	mov [bp+0],ax
  6772                              <3> 	mov ax,[%2]
  6773                              <3> 	mov [bp+2],ax
  6774                              <3> 	mov ax,%3
  6775                              <3> 	mov ds,ax
  6776                              <3> 	mov ax,[%4+2]
  6777                              <3> 	mov [bp+4],ax
  6778                              <3> 	mov ax,[%4]
  6779                              <3> 	mov [bp+6],ax
  6780                              <3> 	call proc_fldiv
  6781                              <3> 	mov ax,sp
  6782                              <3> 	mov bp,ax
  6783                              <3> 	mov ax,%5
  6784                              <3> 	mov ds,ax
  6785                              <3> 	mov al,[bp+8]
  6786                              <3> 	mov [%6],al
  6787                              <3> 	stkclose 0x09
  6788                              <3> %endmacro
  6789                              <3> 
  6790                              <3> %macro flshl 2	
  6791                              <3> 	stkopen 0x02
  6792                              <3> 	mov ax,%1
  6793                              <3> 	mov ds,ax
  6794                              <3> 	mov ax,[%2+2]
  6795                              <3> 	mov [bp+0],ax
  6796                              <3> 	call proc_flshl
  6797                              <3> 	mov ax,sp
  6798                              <3> 	mov bp,ax
  6799                              <3> 	mov ax,%1
  6800                              <3> 	mov ds,ax
  6801                              <3> 	mov ax,[bp+0]
  6802                              <3> 	mov [%2+2],ax
  6803                              <3> 	stkclose 0x02
  6804                              <3> %endmacro
  6805                              <3> 
  6806                              <3> %macro flshr 2	
  6807                              <3> 	stkopen 0x02
  6808                              <3> 	mov ax,%1
  6809                              <3> 	mov ds,ax
  6810                              <3> 	mov ax,[%2+2]
  6811                              <3> 	mov [bp+0],ax
  6812                              <3> 	call proc_flshr
  6813                              <3> 	mov ax,sp
  6814                              <3> 	mov bp,ax
  6815                              <3> 	mov ax,%1
  6816                              <3> 	mov ds,ax
  6817                              <3> 	mov ax,[bp+0]
  6818                              <3> 	mov [%2+2],ax
  6819                              <3> 	stkclose 0x02
  6820                              <3> %endmacro
  6821                              <3> 
  6822                              <3> %macro fldiv 6	
  6823                              <3> 	stkopen 0x0C
  6824                              <3> 	mov ax,%1
  6825                              <3> 	mov ds,ax
  6826                              <3> 	mov ax,[%2+2]
  6827                              <3> 	mov [bp+0],ax
  6828                              <3> 	mov ax,[%2]
  6829                              <3> 	mov [bp+2],ax
  6830                              <3> 	mov ax,%3
  6831                              <3> 	mov ds,ax
  6832                              <3> 	mov ax,[%4+2]
  6833                              <3> 	mov [bp+4],ax
  6834                              <3> 	mov ax,[%4]
  6835                              <3> 	mov [bp+6],ax
  6836                              <3> 	call proc_fldiv
  6837                              <3> 	mov ax,sp
  6838                              <3> 	mov bp,ax
  6839                              <3> 	mov ax,%5
  6840                              <3> 	mov ds,ax
  6841                              <3> 	mov ax,[bp+8]
  6842                              <3> 	mov [%6+2],ax
  6843                              <3> 	mov ax,[bp+0x0A]
  6844                              <3> 	mov [%6],ax
  6845                              <3> 	stkclose 0x0C
  6846                              <3> %endmacro
  6847                              <3> 
  6848                              <3> %macro flmul 6	
  6849                              <3> 	stkopen 0x0C
  6850                              <3> 	mov ax,%1
  6851                              <3> 	mov ds,ax
  6852                              <3> 	mov ax,[%2+2]
  6853                              <3> 	mov [bp+0],ax
  6854                              <3> 	mov ax,[%2]
  6855                              <3> 	mov [bp+2],ax
  6856                              <3> 	mov ax,%3
  6857                              <3> 	mov ds,ax
  6858                              <3> 	mov ax,[%4+2]
  6859                              <3> 	mov [bp+4],ax
  6860                              <3> 	mov ax,[%4]
  6861                              <3> 	mov [bp+6],ax
  6862                              <3> 	call proc_flmul
  6863                              <3> 	mov ax,sp
  6864                              <3> 	mov bp,ax
  6865                              <3> 	mov ax,%5
  6866                              <3> 	mov ds,ax
  6867                              <3> 	mov ax,[bp+8]
  6868                              <3> 	mov [%6+2],ax
  6869                              <3> 	mov ax,[bp+0x0A]
  6870                              <3> 	mov [%6],ax
  6871                              <3> 	stkclose 0x0C
  6872                              <3> %endmacro
  6873                              <3> 	
  6874                              <3> %macro fladdorsub 7
  6875                              <3> 	stkopen 0x0E
  6876                              <3> 	mov ax,%1
  6877                              <3> 	mov ds,ax
  6878                              <3> 	mov ax,[%2+2]
  6879                              <3> 	mov [bp+0],ax
  6880                              <3> 	mov ax,[%2]
  6881                              <3> 	mov [bp+2],ax
  6882                              <3> 	mov ax,%3
  6883                              <3> 	mov ds,ax
  6884                              <3> 	mov ax,[%4+2]
  6885                              <3> 	mov [bp+4],ax
  6886                              <3> 	mov ax,[%4]
  6887                              <3> 	mov [bp+6],ax
  6888                              <3> 	mov word [bp+0x0C], %7
  6889                              <3> 	call proc_fladdorsub
  6890                              <3> 	mov ax,sp
  6891                              <3> 	mov bp,ax
  6892                              <3> 	mov ax,%5
  6893                              <3> 	mov ds,ax
  6894                              <3> 	mov ax,[bp+8]
  6895                              <3> 	mov [%6+2],ax
  6896                              <3> 	mov ax,[bp+0x0A]
  6897                              <3> 	mov [%6],ax
  6898                              <3> 	stkclose 0x0E
  6899                              <3> %endmacro
  6900                              <3> 	
  6901                              <3> %endif
  6902                              <2> 
  6903                              <2> %macro __sin 4
  6904                              <2> 	__sinorcos %1, %2, %3, %4, 1
  6905                              <2> %endmacro
  6906                              <2> 
  6907                              <2> %macro __cos 4
  6908                              <2> 	__sinorcos %1, %2, %3, %4, 0
  6909                              <2> %endmacro
  6910                              <2> 
  6911                              <2> %macro __sin0x90 4
  6912                              <2> 	__sinorcos0x90 %1, %2, %3, %4, 1
  6913                              <2> %endmacro
  6914                              <2> 
  6915                              <2> %macro __cos0x90 4
  6916                              <2> 	__sinorcos0x90 %1, %2, %3, %4, 0
  6917                              <2> %endmacro
  6918                              <2> 
  6919                              <2> %macro __toradians 4
  6920                              <2> 	stkopen 0x08
  6921                              <2> 	mov word [bp+0],%1
  6922                              <2> 	mov word [bp+2],%2
  6923                              <2> 	call proc_toradians
  6924                              <2> 	push sp
  6925                              <2> 	pop bp
  6926                              <2> 	mov word %3, [bp+4]
  6927                              <2> 	mov word %4, [bp+6]
  6928                              <2> 	stkclose 0x08
  6929                              <2> %endmacro
  6930                              <2> 
  6931                              <2> %macro __todegrees 4
  6932                              <2> 	stkopen 0x08
  6933                              <2> 	mov word [bp+0],%1
  6934                              <2> 	mov word [bp+2],%2
  6935                              <2> 	call proc_todegrees
  6936                              <2> 	push sp
  6937                              <2> 	pop bp
  6938                              <2> 	mov word %3, [bp+4]
  6939                              <2> 	mov word %4, [bp+6]
  6940                              <2> 	stkclose 0x08
  6941                              <2> %endmacro
  6942                              <2> 
  6943                              <2> %macro __sinorcos 5
  6944                              <2> 	stkopen 0x09
  6945                              <2> 	mov word [bp+0],%1
  6946                              <2> 	mov word [bp+2],%2	
  6947                              <2> 	mov byte [bp+8],%5
  6948                              <2> 	call proc_sinorcos
  6949                              <2> 	push sp
  6950                              <2> 	pop bp
  6951                              <2> 	mov word %3,[bp+4]
  6952                              <2> 	mov word %4,[bp+6]
  6953                              <2> 	stkclose 0x09
  6954                              <2> %endmacro
  6955                              <2> 
  6956                              <2> %macro __sinorcos0x90 5
  6957                              <2> 	stkopen 0x09
  6958                              <2> 	mov word [bp+0],%1
  6959                              <2> 	mov word [bp+2],%2
  6960                              <2> 	mov byte [bp+8],%5
  6961                              <2> 	call proc_sinorcos0x90
  6962                              <2> 	push sp
  6963                              <2> 	pop bp
  6964                              <2> 	mov word %3,[bp+4]
  6965                              <2> 	mov word %4,[bp+6]
  6966                              <2> 	stkclose 0x09
  6967                              <2> %endmacro
  6968                              <2> 
  6969                              <2> %macro __sinnorm 3
  6970                              <2> 	stkopen 0x06
  6971                              <2> 	mov word [bp+0],%1
  6972                              <2> 	mov word [bp+2],%2
  6973                              <2> 	call proc__sinnorm
  6974                              <2> 	push sp
  6975                              <2> 	pop bp
  6976                              <2> 	mov word %1,[bp+0]
  6977                              <2> 	mov word %2,[bp+2]
  6978                              <2> 	mov word %3,[bp+4]
  6979                              <2> 	stkclose 0x06
  6980                              <2> %endmacro
  6981                              <2> 
  6982                              <2> %macro __cosnorm 3
  6983                              <2> 	stkopen 0x06
  6984                              <2> 	mov word [bp+0],%1
  6985                              <2> 	mov word [bp+2],%2
  6986                              <2> 	call proc__cosnorm
  6987                              <2> 	push sp
  6988                              <2> 	pop bp
  6989                              <2> 	mov word %1,[bp+0]
  6990                              <2> 	mov word %2,[bp+2]
  6991                              <2> 	mov word %3,[bp+4]
  6992                              <2> 	stkclose 0x06
  6993                              <2> %endmacro
  6994                              <2> 
  6995                              <2> %macro __norm_factors 5
  6996                              <2> 	stkopen 0x0A
  6997                              <2> 	mov word [bp+0],%1
  6998                              <2> 	mov word [bp+2],%2
  6999                              <2> 	call proc__norm_factors
  7000                              <2> 	push sp
  7001                              <2> 	pop bp
  7002                              <2> 	mov word %3,[bp+4]
  7003                              <2> 	mov word %4,[bp+6]
  7004                              <2> 	mov word %5,[bp+8]
  7005                              <2> 	stkclose 0x0A
  7006                              <2> %endmacro
  7007                              <2> 
  7008                              <2> %macro __fat16 2
  7009                              <2> 	stkopen 0x04
  7010                              <2> 	mov word [bp+0],%1
  7011                              <2> 	call proc__fat16
  7012                              <2> 	push sp
  7013                              <2> 	pop bp
  7014                              <2> 	mov word %2, [bp+2]
  7015                              <2> 	stkclose 0x04
  7016                              <2> %endmacro
  7017                              <2> 
  7018                              <2> %macro __pow16 3
  7019                              <2> 	stkopen 0x06
  7020                              <2> 	mov word [bp+0],%1
  7021                              <2> 	mov word [bp+2],%2
  7022                              <2> 	call proc__pow16
  7023                              <2> 	push sp
  7024                              <2> 	pop bp
  7025                              <2> 	mov word %3, [bp+4]
  7026                              <2> 	stkclose 0x06
  7027                              <2> %endmacro
  7028                              <2> 	
  7029                              <2> section .data
  7030 000014C1 DB0F4940            <2> 	PI: dd 0x40490FDB
  7031 000014C5 00003443            <2> 	__180dg: dd 0x43340000
  7032                              <2> 	
  7033                              <2> proc_toradians:
  7034 000014C9 89E0                <2> 	mov ax,sp
  7035 000014CB 89C5                <2> 	mov bp,ax
  7036                              <2> 	
  7037 000014CD 8B4602              <2> 	mov ax,[bp+2]
  7038 000014D0 8B5E04              <2> 	mov bx,[bp+4]		
  7039 000014D3 B94940              <2> 	mov cx,0x4049
  7040 000014D6 BADB0F              <2> 	mov dx,0x0FDB
  7041                              <2> 	__flmul ax, bx, cx, dx, ax, bx
  7042                              <3>  stkopen 0x0E
  7043 000014D9 83EC0E              <4>  sub word sp, %1
  7044 000014DC 54                  <4>  push sp
  7045 000014DD 5D                  <4>  pop bp
  7046 000014DE 894600              <3>  mov word [bp+0],%1
  7047 000014E1 895E02              <3>  mov word [bp+2],%2
  7048 000014E4 894E04              <3>  mov word [bp+4],%3
  7049 000014E7 895606              <3>  mov word [bp+6],%4
  7050 000014EA E871F8              <3>  call proc_flmul
  7051 000014ED 54                  <3>  push sp
  7052 000014EE 5D                  <3>  pop bp
  7053 000014EF 8B4608              <3>  mov word %5,[bp+8]
  7054 000014F2 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7055                              <3>  stkclose 0x0E
  7056 000014F5 83C40E              <4>  add word sp, %1
  7057 000014F8 B93443              <2> 	mov cx,0x4334
  7058 000014FB BA0000              <2> 	mov dx,0x0000	
  7059                              <2> 	__fldiv ax, bx, cx, cx, ax, bx
  7060                              <3>  stkopen 0x0E
  7061 000014FE 83EC0E              <4>  sub word sp, %1
  7062 00001501 54                  <4>  push sp
  7063 00001502 5D                  <4>  pop bp
  7064 00001503 894600              <3>  mov word [bp+0],%1
  7065 00001506 895E02              <3>  mov word [bp+2],%2
  7066 00001509 894E04              <3>  mov word [bp+4],%3
  7067 0000150C 894E06              <3>  mov word [bp+6],%4
  7068 0000150F E82DF7              <3>  call proc_fldiv
  7069 00001512 54                  <3>  push sp
  7070 00001513 5D                  <3>  pop bp
  7071 00001514 8B4608              <3>  mov word %5,[bp+8]
  7072 00001517 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7073                              <3>  stkclose 0x0E
  7074 0000151A 83C40E              <4>  add word sp, %1
  7075                              <2> 	
  7076 0000151D 89E1                <2> 	mov cx,sp
  7077 0000151F 89CD                <2> 	mov bp,cx
  7078 00001521 894606              <2> 	mov [bp+6],ax
  7079 00001524 895E08              <2> 	mov [bp+8],bx
  7080                              <2> 	
  7081 00001527 C3                  <2> 	ret
  7082                              <2> 	
  7083                              <2> proc_todegrees:
  7084 00001528 89E0                <2> 	mov ax,sp
  7085 0000152A 89C5                <2> 	mov bp,ax
  7086                              <2> 	
  7087 0000152C 8B4602              <2> 	mov ax,[bp+2]
  7088 0000152F 8B5E04              <2> 	mov bx,[bp+4]		
  7089 00001532 B93443              <2> 	mov cx,0x4334
  7090 00001535 BA0000              <2> 	mov dx,0x0000
  7091                              <2> 	__flmul ax, bx, cx, dx, ax, bx		
  7092                              <3>  stkopen 0x0E
  7093 00001538 83EC0E              <4>  sub word sp, %1
  7094 0000153B 54                  <4>  push sp
  7095 0000153C 5D                  <4>  pop bp
  7096 0000153D 894600              <3>  mov word [bp+0],%1
  7097 00001540 895E02              <3>  mov word [bp+2],%2
  7098 00001543 894E04              <3>  mov word [bp+4],%3
  7099 00001546 895606              <3>  mov word [bp+6],%4
  7100 00001549 E812F8              <3>  call proc_flmul
  7101 0000154C 54                  <3>  push sp
  7102 0000154D 5D                  <3>  pop bp
  7103 0000154E 8B4608              <3>  mov word %5,[bp+8]
  7104 00001551 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7105                              <3>  stkclose 0x0E
  7106 00001554 83C40E              <4>  add word sp, %1
  7107 00001557 B94940              <2> 	mov cx,0x4049
  7108 0000155A BADB0F              <2> 	mov dx,0x0FDB	
  7109                              <2> 	__fldiv ax, bx, cx, cx, ax, bx
  7110                              <3>  stkopen 0x0E
  7111 0000155D 83EC0E              <4>  sub word sp, %1
  7112 00001560 54                  <4>  push sp
  7113 00001561 5D                  <4>  pop bp
  7114 00001562 894600              <3>  mov word [bp+0],%1
  7115 00001565 895E02              <3>  mov word [bp+2],%2
  7116 00001568 894E04              <3>  mov word [bp+4],%3
  7117 0000156B 894E06              <3>  mov word [bp+6],%4
  7118 0000156E E8CEF6              <3>  call proc_fldiv
  7119 00001571 54                  <3>  push sp
  7120 00001572 5D                  <3>  pop bp
  7121 00001573 8B4608              <3>  mov word %5,[bp+8]
  7122 00001576 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7123                              <3>  stkclose 0x0E
  7124 00001579 83C40E              <4>  add word sp, %1
  7125                              <2> 	
  7126 0000157C 89E1                <2> 	mov cx,sp
  7127 0000157E 89CD                <2> 	mov bp,cx
  7128 00001580 894606              <2> 	mov [bp+6],ax
  7129 00001583 895E08              <2> 	mov [bp+8],bx
  7130                              <2> 	
  7131 00001586 C3                  <2> 	ret
  7132                              <2> 
  7133                              <2> proc_sinorcos:
  7134 00001587 89E0                <2> 	mov ax,sp
  7135 00001589 89C5                <2> 	mov bp,ax
  7136                              <2> 	
  7137 0000158B 8B4602              <2> 	mov ax,[bp+2]
  7138 0000158E 8B5E04              <2> 	mov bx,[bp+4]
  7139 00001591 807E0A00            <2> 	cmp byte [bp+0x0A],0
  7140 00001595 741E                <2> 	jz .normcos
  7141                              <2> 		__sinnorm ax, bx, cx
  7142                              <3>  stkopen 0x06
  7143 00001597 83EC06              <4>  sub word sp, %1
  7144 0000159A 54                  <4>  push sp
  7145 0000159B 5D                  <4>  pop bp
  7146 0000159C 894600              <3>  mov word [bp+0],%1
  7147 0000159F 895E02              <3>  mov word [bp+2],%2
  7148 000015A2 E84502              <3>  call proc__sinnorm
  7149 000015A5 54                  <3>  push sp
  7150 000015A6 5D                  <3>  pop bp
  7151 000015A7 8B4600              <3>  mov word %1,[bp+0]
  7152 000015AA 8B5E02              <3>  mov word %2,[bp+2]
  7153 000015AD 8B4E04              <3>  mov word %3,[bp+4]
  7154                              <3>  stkclose 0x06
  7155 000015B0 83C406              <4>  add word sp, %1
  7156 000015B3 EB1C                <2> 		jmp .endnorm
  7157                              <2> 	.normcos:
  7158                              <2> 		__cosnorm ax, bx, cx	
  7159                              <3>  stkopen 0x06
  7160 000015B5 83EC06              <4>  sub word sp, %1
  7161 000015B8 54                  <4>  push sp
  7162 000015B9 5D                  <4>  pop bp
  7163 000015BA 894600              <3>  mov word [bp+0],%1
  7164 000015BD 895E02              <3>  mov word [bp+2],%2
  7165 000015C0 E8CD02              <3>  call proc__cosnorm
  7166 000015C3 54                  <3>  push sp
  7167 000015C4 5D                  <3>  pop bp
  7168 000015C5 8B4600              <3>  mov word %1,[bp+0]
  7169 000015C8 8B5E02              <3>  mov word %2,[bp+2]
  7170 000015CB 8B4E04              <3>  mov word %3,[bp+4]
  7171                              <3>  stkclose 0x06
  7172 000015CE 83C406              <4>  add word sp, %1
  7173                              <2> 	.endnorm:
  7174                              <2> 	
  7175 000015D1 51                  <2> 	push cx
  7176                              <2> 	
  7177 000015D2 89E1                <2> 	mov cx,sp
  7178 000015D4 89CD                <2> 	mov bp,cx
  7179 000015D6 83C502              <2> 	add bp,2
  7180 000015D9 8A4E0A              <2> 	mov cl,[bp+0x0A]	
  7181                              <2> 	__sinorcos0x90 ax, bx, ax, bx, cl
  7182                              <3>  stkopen 0x09
  7183 000015DC 83EC09              <4>  sub word sp, %1
  7184 000015DF 54                  <4>  push sp
  7185 000015E0 5D                  <4>  pop bp
  7186 000015E1 894600              <3>  mov word [bp+0],%1
  7187 000015E4 895E02              <3>  mov word [bp+2],%2
  7188 000015E7 884E08              <3>  mov byte [bp+8],%5
  7189 000015EA E82C00              <3>  call proc_sinorcos0x90
  7190 000015ED 54                  <3>  push sp
  7191 000015EE 5D                  <3>  pop bp
  7192 000015EF 8B4604              <3>  mov word %3,[bp+4]
  7193 000015F2 8B5E06              <3>  mov word %4,[bp+6]
  7194                              <3>  stkclose 0x09
  7195 000015F5 83C409              <4>  add word sp, %1
  7196 000015F8 89E1                <2> 	mov cx,sp
  7197 000015FA 89CD                <2> 	mov bp,cx
  7198 000015FC 83C502              <2> 	add bp,2	
  7199 000015FF 894606              <2> 	mov [bp+6],ax
  7200 00001602 895E08              <2> 	mov [bp+8],bx
  7201                              <2> 			
  7202 00001605 59                  <2> 	pop cx
  7203                              <2> 		
  7204 00001606 89E2                <2> 	mov dx,sp
  7205 00001608 89D5                <2> 	mov bp,dx
  7206                              <2> 		
  7207 0000160A 81F90080            <2> 	cmp cx,0x8000
  7208 0000160E 7405                <2> 	je .one
  7209 00001610 214E06              <2> 		and word [bp+6],cx
  7210 00001613 EB03                <2> 		jmp .endcmp
  7211                              <2> 	.one:
  7212 00001615 094E06              <2> 		or word [bp+6],cx	
  7213                              <2> 	.endcmp:
  7214                              <2> 	
  7215 00001618 C3                  <2> 	ret
  7216                              <2> 	
  7217                              <2> proc_sinorcos0x90:
  7218 00001619 89E1                <2> 	mov cx,sp
  7219 0000161B 89CD                <2> 	mov bp,cx
  7220                              <2> 
  7221 0000161D 894602              <2> 	mov [bp+2],ax
  7222 00001620 895E04              <2> 	mov [bp+4],bx
  7223 00001623 C746060000          <2> 	mov word [bp+6],0
  7224 00001628 C746080000          <2> 	mov word [bp+8],0		
  7225                              <2> 	
  7226 0000162D B90000              <2> 	mov cx,0
  7227                              <2> 	.l1:
  7228 00001630 83F903              <2> 		cmp cx,0x03
  7229 00001633 0F877301            <2> 		ja .l2		
  7230 00001637 51                  <2> 		push cx
  7231                              <2> 		
  7232 00001638 83E101              <2> 		and cx,0x0001
  7233 0000163B 83F900              <2> 		cmp cx,0
  7234 0000163E 7505                <2> 		jnz .neg
  7235 00001640 B80100              <2> 			mov ax,0x0001
  7236 00001643 EB03                <2> 			jmp .endneg
  7237                              <2> 		.neg:
  7238 00001645 B8FFFF              <2> 			mov ax,0xFFFF
  7239                              <2> 		.endneg:
  7240                              <2> 				
  7241 00001648 59                  <2> 		pop cx
  7242 00001649 51                  <2> 		push cx
  7243 0000164A 50                  <2> 		push ax
  7244                              <2> 		
  7245 0000164B BA0000              <2> 		mov dx,0
  7246 0000164E B80200              <2> 		mov ax,2
  7247 00001651 F7E1                <2> 		mul cx
  7248                              <2> 		
  7249 00001653 89E2                <2> 		mov dx,sp
  7250 00001655 89D5                <2> 		mov bp,dx
  7251 00001657 83C504              <2> 		add bp,4		
  7252 0000165A 807E0A00            <2> 		cmp byte [bp+0x0A],0
  7253 0000165E 7401                <2> 		jz .incremented
  7254 00001660 40                  <2> 			inc ax
  7255                              <2> 		.incremented:
  7256                              <2> 						
  7257                              <2> 		__fat16 ax, dx
  7258                              <3>  stkopen 0x04
  7259 00001661 83EC04              <4>  sub word sp, %1
  7260 00001664 54                  <4>  push sp
  7261 00001665 5D                  <4>  pop bp
  7262 00001666 894600              <3>  mov word [bp+0],%1
  7263 00001669 E83F01              <3>  call proc__fat16
  7264 0000166C 54                  <3>  push sp
  7265 0000166D 5D                  <3>  pop bp
  7266 0000166E 8B5602              <3>  mov word %2, [bp+2]
  7267                              <3>  stkclose 0x04
  7268 00001671 83C404              <4>  add word sp, %1
  7269                              <2> 						
  7270 00001674 58                  <2> 		pop ax
  7271 00001675 52                  <2> 		push dx	
  7272                              <2> 		__int16to32 ax, cx, dx						
  7273                              <3>  stkopen 0x06
  7274 00001676 83EC06              <4>  sub word sp, %1
  7275 00001679 54                  <4>  push sp
  7276 0000167A 5D                  <4>  pop bp
  7277 0000167B 894600              <3>  mov word [bp+0],%1
  7278 0000167E E8EAED              <3>  call proc_int16to32
  7279 00001681 54                  <3>  push sp
  7280 00001682 5D                  <3>  pop bp
  7281 00001683 8B4E02              <3>  mov word %2, [bp+2]
  7282 00001686 8B5604              <3>  mov word %3, [bp+4]
  7283                              <3>  stkclose 0x06
  7284 00001689 83C406              <4>  add word sp, %1
  7285                              <2> 		__int32tofl cx, dx, ax, bx
  7286                              <3>  stkopen 0x08
  7287 0000168C 83EC08              <4>  sub word sp, %1
  7288 0000168F 54                  <4>  push sp
  7289 00001690 5D                  <4>  pop bp
  7290 00001691 894E00              <3>  mov word [bp+0],%1
  7291 00001694 895602              <3>  mov word [bp+2],%2
  7292 00001697 E84EF4              <3>  call proc_int32tofl
  7293 0000169A 54                  <3>  push sp
  7294 0000169B 5D                  <3>  pop bp
  7295 0000169C 8B4604              <3>  mov word %3,[bp+4]
  7296 0000169F 8B5E06              <3>  mov word %4,[bp+6]
  7297                              <3>  stkclose 0x08
  7298 000016A2 83C408              <4>  add word sp, %1
  7299                              <2> 		
  7300 000016A5 59                  <2> 		pop cx
  7301 000016A6 50                  <2> 		push ax
  7302 000016A7 53                  <2> 		push bx		
  7303                              <2> 		__int16to32 cx, ax, bx
  7304                              <3>  stkopen 0x06
  7305 000016A8 83EC06              <4>  sub word sp, %1
  7306 000016AB 54                  <4>  push sp
  7307 000016AC 5D                  <4>  pop bp
  7308 000016AD 894E00              <3>  mov word [bp+0],%1
  7309 000016B0 E8B8ED              <3>  call proc_int16to32
  7310 000016B3 54                  <3>  push sp
  7311 000016B4 5D                  <3>  pop bp
  7312 000016B5 8B4602              <3>  mov word %2, [bp+2]
  7313 000016B8 8B5E04              <3>  mov word %3, [bp+4]
  7314                              <3>  stkclose 0x06
  7315 000016BB 83C406              <4>  add word sp, %1
  7316                              <2> 		__int32tofl ax, bx, cx, dx
  7317                              <3>  stkopen 0x08
  7318 000016BE 83EC08              <4>  sub word sp, %1
  7319 000016C1 54                  <4>  push sp
  7320 000016C2 5D                  <4>  pop bp
  7321 000016C3 894600              <3>  mov word [bp+0],%1
  7322 000016C6 895E02              <3>  mov word [bp+2],%2
  7323 000016C9 E81CF4              <3>  call proc_int32tofl
  7324 000016CC 54                  <3>  push sp
  7325 000016CD 5D                  <3>  pop bp
  7326 000016CE 8B4E04              <3>  mov word %3,[bp+4]
  7327 000016D1 8B5606              <3>  mov word %4,[bp+6]
  7328                              <3>  stkclose 0x08
  7329 000016D4 83C408              <4>  add word sp, %1
  7330                              <2> 		
  7331 000016D7 5B                  <2> 		pop bx
  7332 000016D8 58                  <2> 		pop ax
  7333                              <2> 		
  7334                              <2> 		__fldiv ax, bx, cx, dx, ax, bx
  7335                              <3>  stkopen 0x0E
  7336 000016D9 83EC0E              <4>  sub word sp, %1
  7337 000016DC 54                  <4>  push sp
  7338 000016DD 5D                  <4>  pop bp
  7339 000016DE 894600              <3>  mov word [bp+0],%1
  7340 000016E1 895E02              <3>  mov word [bp+2],%2
  7341 000016E4 894E04              <3>  mov word [bp+4],%3
  7342 000016E7 895606              <3>  mov word [bp+6],%4
  7343 000016EA E852F5              <3>  call proc_fldiv
  7344 000016ED 54                  <3>  push sp
  7345 000016EE 5D                  <3>  pop bp
  7346 000016EF 8B4608              <3>  mov word %5,[bp+8]
  7347 000016F2 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7348                              <3>  stkclose 0x0E
  7349 000016F5 83C40E              <4>  add word sp, %1
  7350                              <2> 						
  7351 000016F8 59                  <2> 		pop cx
  7352 000016F9 51                  <2> 		push cx
  7353 000016FA 50                  <2> 		push ax
  7354 000016FB 53                  <2> 		push bx
  7355                              <2> 		
  7356 000016FC 89E0                <2> 		mov ax,sp
  7357 000016FE 89C5                <2> 		mov bp,ax
  7358 00001700 83C506              <2> 		add bp,6
  7359                              <2> 		
  7360 00001703 BA0000              <2> 		mov dx,0
  7361 00001706 B80200              <2> 		mov ax,2
  7362 00001709 F7E1                <2> 		mul cx
  7363                              <2> 				
  7364 0000170B 807E0A00            <2> 		cmp byte [bp+0x0A],0
  7365 0000170F 7401                <2> 		jz .incremented2
  7366 00001711 40                  <2> 			inc ax
  7367                              <2> 		.incremented2:
  7368                              <2> 				
  7369 00001712 89C1                <2> 		mov cx,ax														
  7370                              <2> 		
  7371 00001714 B8803F              <2> 		mov ax,0x3F80
  7372 00001717 BB0000              <2> 		mov bx,0
  7373                              <2> 		
  7374                              <2> 		.l1.1:
  7375 0000171A 83F900              <2> 			cmp cx,0
  7376 0000171D 742C                <2> 			jz .l1.2
  7377 0000171F 51                  <2> 			push cx
  7378                              <2> 			
  7379 00001720 8B4E02              <2> 			mov cx,[bp+2]
  7380 00001723 8B5604              <2> 			mov dx,[bp+4]
  7381 00001726 55                  <2> 			push bp	
  7382                              <2> 			__flmul ax, bx, cx, dx, ax, bx
  7383                              <3>  stkopen 0x0E
  7384 00001727 83EC0E              <4>  sub word sp, %1
  7385 0000172A 54                  <4>  push sp
  7386 0000172B 5D                  <4>  pop bp
  7387 0000172C 894600              <3>  mov word [bp+0],%1
  7388 0000172F 895E02              <3>  mov word [bp+2],%2
  7389 00001732 894E04              <3>  mov word [bp+4],%3
  7390 00001735 895606              <3>  mov word [bp+6],%4
  7391 00001738 E823F6              <3>  call proc_flmul
  7392 0000173B 54                  <3>  push sp
  7393 0000173C 5D                  <3>  pop bp
  7394 0000173D 8B4608              <3>  mov word %5,[bp+8]
  7395 00001740 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7396                              <3>  stkclose 0x0E
  7397 00001743 83C40E              <4>  add word sp, %1
  7398 00001746 5D                  <2> 			pop bp	
  7399                              <2> 							
  7400 00001747 59                  <2> 			pop cx
  7401 00001748 49                  <2> 			dec cx
  7402 00001749 EBCF                <2> 			jmp .l1.1
  7403                              <2> 		.l1.2: 
  7404                              <2> 					
  7405 0000174B 5A                  <2> 		pop dx
  7406 0000174C 59                  <2> 		pop cx
  7407                              <2> 		
  7408                              <2> 		__flmul ax, bx, cx, dx, ax, bx
  7409                              <3>  stkopen 0x0E
  7410 0000174D 83EC0E              <4>  sub word sp, %1
  7411 00001750 54                  <4>  push sp
  7412 00001751 5D                  <4>  pop bp
  7413 00001752 894600              <3>  mov word [bp+0],%1
  7414 00001755 895E02              <3>  mov word [bp+2],%2
  7415 00001758 894E04              <3>  mov word [bp+4],%3
  7416 0000175B 895606              <3>  mov word [bp+6],%4
  7417 0000175E E8FDF5              <3>  call proc_flmul
  7418 00001761 54                  <3>  push sp
  7419 00001762 5D                  <3>  pop bp
  7420 00001763 8B4608              <3>  mov word %5,[bp+8]
  7421 00001766 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7422                              <3>  stkclose 0x0E
  7423 00001769 83C40E              <4>  add word sp, %1
  7424                              <2> 						
  7425 0000176C 89E1                <2> 		mov cx,sp
  7426 0000176E 89CD                <2> 		mov bp,cx
  7427 00001770 83C502              <2> 		add bp,2
  7428                              <2> 		
  7429 00001773 8B4E06              <2> 		mov cx,[bp+6]
  7430 00001776 8B5608              <2> 		mov dx,[bp+8]
  7431 00001779 55                  <2> 		push bp
  7432                              <2> 		__fladd ax, bx, cx, dx, ax, bx		
  7433                              <3>  stkopen 0x0E
  7434 0000177A 83EC0E              <4>  sub word sp, %1
  7435 0000177D 54                  <4>  push sp
  7436 0000177E 5D                  <4>  pop bp
  7437 0000177F 894600              <3>  mov word [bp+0],%1
  7438 00001782 895E02              <3>  mov word [bp+2],%2
  7439 00001785 894E04              <3>  mov word [bp+4],%3
  7440 00001788 895606              <3>  mov word [bp+6],%4
  7441 0000178B C7460C0000          <3>  mov word [bp+0x0C],0
  7442 00001790 E877F7              <3>  call proc_fladdorsub
  7443 00001793 54                  <3>  push sp
  7444 00001794 5D                  <3>  pop bp
  7445 00001795 8B4608              <3>  mov word %5,[bp+8]
  7446 00001798 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7447                              <3>  stkclose 0x0E
  7448 0000179B 83C40E              <4>  add word sp, %1
  7449 0000179E 5D                  <2> 		pop bp			
  7450 0000179F 894606              <2> 		mov [bp+6],ax
  7451 000017A2 895E08              <2> 		mov [bp+8],bx
  7452                              <2> 				
  7453 000017A5 59                  <2> 		pop cx
  7454 000017A6 41                  <2> 		inc cx
  7455 000017A7 E986FE              <2> 		jmp .l1
  7456                              <2> 	.l2:			
  7457                              <2> 	
  7458 000017AA C3                  <2> 	ret
  7459                              <2> 	
  7460                              <2> proc__fat16:
  7461 000017AB 89E0                <2> 	mov ax,sp
  7462 000017AD 89C5                <2> 	mov bp,ax
  7463                              <2> 	
  7464 000017AF B90100              <2> 	mov cx,1
  7465 000017B2 C746040100          <2> 	mov word [bp+4], 1
  7466                              <2> 	.l1:
  7467 000017B7 3B4E02              <2> 		cmp word cx,[bp+2]
  7468 000017BA 770D                <2> 		ja .l2
  7469                              <2> 		
  7470 000017BC 31D2                <2> 		xor dx,dx
  7471 000017BE 8B4604              <2> 		mov ax,[bp+4]
  7472 000017C1 F7E9                <2> 		imul cx
  7473                              <2> 		
  7474 000017C3 894604              <2> 		mov [bp+4],ax
  7475                              <2> 		
  7476 000017C6 41                  <2> 		inc cx
  7477 000017C7 EBEE                <2> 		jmp .l1
  7478                              <2> 	.l2:
  7479                              <2> 	
  7480 000017C9 C3                  <2> 	ret
  7481                              <2> 		
  7482                              <2> proc__pow16:
  7483 000017CA 89E0                <2> 	mov ax,sp
  7484 000017CC 89C5                <2> 	mov bp,ax
  7485                              <2> 	
  7486 000017CE 8B4E04              <2> 	mov cx,[bp+4]
  7487 000017D1 C746060100          <2> 	mov word [bp+6], 1	
  7488                              <2> 	.l1:
  7489 000017D6 83F900              <2> 		cmp cx,0
  7490 000017D9 740E                <2> 		jz .l2
  7491                              <2> 		
  7492 000017DB 31D2                <2> 		xor dx,dx
  7493 000017DD 8B4602              <2> 		mov ax,[bp+2]
  7494 000017E0 F76E06              <2> 		imul word [bp+6]
  7495                              <2> 		
  7496 000017E3 894606              <2> 		mov [bp+6],ax
  7497                              <2> 		
  7498 000017E6 49                  <2> 		dec cx
  7499 000017E7 EBED                <2> 		jmp .l1
  7500                              <2> 	.l2:
  7501                              <2> 		
  7502 000017E9 C3                  <2> 	ret
  7503                              <2> 	
  7504                              <2> proc__sinnorm:
  7505 000017EA 89E0                <2> 	mov ax,sp
  7506 000017EC 89C5                <2> 	mov bp,ax
  7507                              <2> 	
  7508 000017EE 8B4602              <2> 	mov ax,[bp+2]
  7509 000017F1 8B5E04              <2> 	mov bx,[bp+4]
  7510                              <2> 	
  7511                              <2> 	__norm_factors ax, bx, ax, bx, cx
  7512                              <3>  stkopen 0x0A
  7513 000017F4 83EC0A              <4>  sub word sp, %1
  7514 000017F7 54                  <4>  push sp
  7515 000017F8 5D                  <4>  pop bp
  7516 000017F9 894600              <3>  mov word [bp+0],%1
  7517 000017FC 895E02              <3>  mov word [bp+2],%2
  7518 000017FF E83601              <3>  call proc__norm_factors
  7519 00001802 54                  <3>  push sp
  7520 00001803 5D                  <3>  pop bp
  7521 00001804 8B4604              <3>  mov word %3,[bp+4]
  7522 00001807 8B5E06              <3>  mov word %4,[bp+6]
  7523 0000180A 8B4E08              <3>  mov word %5,[bp+8]
  7524                              <3>  stkclose 0x0A
  7525 0000180D 83C40A              <4>  add word sp, %1
  7526                              <2> 
  7527 00001810 51                  <2> 	push cx	; factor (phi/PI)
  7528                              <2> 		
  7529 00001811 B9C93F              <2> 	mov cx,0x3FC9 ; PI/2 (high)
  7530 00001814 BADB0F              <2> 	mov dx,0x0FDB ; PI/2 (low)
  7531                              <2> 	
  7532 00001817 50                  <2> 	push ax
  7533 00001818 53                  <2> 	push bx
  7534                              <2> 	__cmp32 ax, bx, cx, dx, cl
  7535                              <3>  stkopen 9
  7536 00001819 83EC09              <4>  sub word sp, %1
  7537 0000181C 54                  <4>  push sp
  7538 0000181D 5D                  <4>  pop bp
  7539 0000181E 894600              <3>  mov word [bp+0], %1
  7540 00001821 895E02              <3>  mov word [bp+2], %2
  7541 00001824 894E04              <3>  mov word [bp+4], %3
  7542 00001827 895606              <3>  mov word [bp+6], %4
  7543 0000182A E85EEF              <3>  call proc_cmp32
  7544 0000182D 54                  <3>  push sp
  7545 0000182E 5D                  <3>  pop bp
  7546 0000182F 8A4E08              <3>  mov byte %5, [bp+8]
  7547                              <3>  stkclose 9
  7548 00001832 83C409              <4>  add word sp, %1
  7549 00001835 5B                  <2> 	pop bx
  7550 00001836 58                  <2> 	pop ax
  7551 00001837 80F900              <2> 	cmp cl,0
  7552 0000183A 7E2A                <2> 	jle .l1
  7553 0000183C B94940              <2> 		mov cx,0x4049 ; PI (high)
  7554 0000183F BADB0F              <2> 		mov dx,0x0FDB ; PI (low)
  7555                              <2> 		__flsub cx, dx, ax, bx, ax, bx				
  7556                              <3>  stkopen 0x0E
  7557 00001842 83EC0E              <4>  sub word sp, %1
  7558 00001845 54                  <4>  push sp
  7559 00001846 5D                  <4>  pop bp
  7560 00001847 894E00              <3>  mov word [bp+0],%1
  7561 0000184A 895602              <3>  mov word [bp+2],%2
  7562 0000184D 894604              <3>  mov word [bp+4],%3
  7563 00001850 895E06              <3>  mov word [bp+6],%4
  7564 00001853 C7460C0080          <3>  mov word [bp+0x0C],0x8000
  7565 00001858 E8AFF6              <3>  call proc_fladdorsub
  7566 0000185B 54                  <3>  push sp
  7567 0000185C 5D                  <3>  pop bp
  7568 0000185D 8B4608              <3>  mov word %5,[bp+8]
  7569 00001860 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7570                              <3>  stkclose 0x0E
  7571 00001863 83C40E              <4>  add word sp, %1
  7572                              <2> 	.l1:
  7573                              <2> 				
  7574 00001866 59                  <2> 	pop cx
  7575                              <2> 
  7576 00001867 89E2                <2> 	mov dx,sp
  7577 00001869 89D5                <2> 	mov bp,dx
  7578 0000186B 8B5602              <2> 	mov dx,[bp+2]
  7579 0000186E 81E20080            <2> 	and dx,0x8000
  7580                              <2> 		
  7581 00001872 83FA00              <2> 	cmp dx,0
  7582 00001875 7D01                <2> 	jge .l2
  7583 00001877 41                  <2> 		inc cx		
  7584                              <2> 	.l2:	
  7585                              <2> 			
  7586 00001878 BAFF7F              <2> 	mov dx,0x7FFF
  7587 0000187B 83E101              <2> 	and cx,0x0001
  7588 0000187E 83F900              <2> 	cmp cx,0
  7589 00001881 7403                <2> 	jz .l3
  7590 00001883 BA0080              <2> 		mov dx,0x8000
  7591                              <2> 	.l3:
  7592                              <2> 					
  7593 00001886 894602              <2> 	mov [bp+2],ax
  7594 00001889 895E04              <2> 	mov [bp+4],bx
  7595 0000188C 895606              <2> 	mov [bp+6],dx
  7596                              <2> 	
  7597 0000188F C3                  <2> 	ret	
  7598                              <2> 	
  7599                              <2> proc__cosnorm:
  7600 00001890 89E0                <2> 	mov ax,sp
  7601 00001892 89C5                <2> 	mov bp,ax
  7602                              <2> 	
  7603 00001894 8B4602              <2> 	mov ax,[bp+2]
  7604 00001897 8B5E04              <2> 	mov bx,[bp+4]
  7605                              <2> 	
  7606                              <2> 	__norm_factors ax, bx, ax, bx, cx
  7607                              <3>  stkopen 0x0A
  7608 0000189A 83EC0A              <4>  sub word sp, %1
  7609 0000189D 54                  <4>  push sp
  7610 0000189E 5D                  <4>  pop bp
  7611 0000189F 894600              <3>  mov word [bp+0],%1
  7612 000018A2 895E02              <3>  mov word [bp+2],%2
  7613 000018A5 E89000              <3>  call proc__norm_factors
  7614 000018A8 54                  <3>  push sp
  7615 000018A9 5D                  <3>  pop bp
  7616 000018AA 8B4604              <3>  mov word %3,[bp+4]
  7617 000018AD 8B5E06              <3>  mov word %4,[bp+6]
  7618 000018B0 8B4E08              <3>  mov word %5,[bp+8]
  7619                              <3>  stkclose 0x0A
  7620 000018B3 83C40A              <4>  add word sp, %1
  7621                              <2> 
  7622 000018B6 51                  <2> 	push cx		; fator2 (phi/PI)
  7623                              <2> 	
  7624 000018B7 B9C93F              <2> 	mov cx,0x3FC9 ; PI/2 (high)
  7625 000018BA BADB0F              <2> 	mov dx,0x0FDB ; PI/2 (low)
  7626                              <2> 		
  7627 000018BD 50                  <2> 	push ax
  7628 000018BE 53                  <2> 	push bx
  7629                              <2> 	__cmp32 ax, bx, cx, dx, cl
  7630                              <3>  stkopen 9
  7631 000018BF 83EC09              <4>  sub word sp, %1
  7632 000018C2 54                  <4>  push sp
  7633 000018C3 5D                  <4>  pop bp
  7634 000018C4 894600              <3>  mov word [bp+0], %1
  7635 000018C7 895E02              <3>  mov word [bp+2], %2
  7636 000018CA 894E04              <3>  mov word [bp+4], %3
  7637 000018CD 895606              <3>  mov word [bp+6], %4
  7638 000018D0 E8B8EE              <3>  call proc_cmp32
  7639 000018D3 54                  <3>  push sp
  7640 000018D4 5D                  <3>  pop bp
  7641 000018D5 8A4E08              <3>  mov byte %5, [bp+8]
  7642                              <3>  stkclose 9
  7643 000018D8 83C409              <4>  add word sp, %1
  7644 000018DB 5B                  <2> 	pop bx
  7645 000018DC 58                  <2> 	pop ax
  7646                              <2> 		
  7647 000018DD 51                  <2> 	push cx
  7648 000018DE 80F900              <2> 	cmp cl,0
  7649 000018E1 7E2A                <2> 	jle .l1
  7650 000018E3 B94940              <2> 		mov cx,0x4049 ; PI (high)
  7651 000018E6 BADB0F              <2> 		mov dx,0x0FDB ; PI (low)
  7652                              <2> 		__flsub cx, dx, ax, bx, ax, bx	
  7653                              <3>  stkopen 0x0E
  7654 000018E9 83EC0E              <4>  sub word sp, %1
  7655 000018EC 54                  <4>  push sp
  7656 000018ED 5D                  <4>  pop bp
  7657 000018EE 894E00              <3>  mov word [bp+0],%1
  7658 000018F1 895602              <3>  mov word [bp+2],%2
  7659 000018F4 894604              <3>  mov word [bp+4],%3
  7660 000018F7 895E06              <3>  mov word [bp+6],%4
  7661 000018FA C7460C0080          <3>  mov word [bp+0x0C],0x8000
  7662 000018FF E808F6              <3>  call proc_fladdorsub
  7663 00001902 54                  <3>  push sp
  7664 00001903 5D                  <3>  pop bp
  7665 00001904 8B4608              <3>  mov word %5,[bp+8]
  7666 00001907 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7667                              <3>  stkclose 0x0E
  7668 0000190A 83C40E              <4>  add word sp, %1
  7669                              <2> 	.l1:
  7670                              <2> 						
  7671 0000190D 59                  <2> 	pop cx	; quadrante2 (true, false)
  7672 0000190E 5A                  <2> 	pop dx	; fator2 (phi/PI)
  7673                              <2> 
  7674 0000190F 54                  <2> 	push sp
  7675 00001910 5D                  <2> 	pop bp		
  7676 00001911 894602              <2> 	mov [bp+2],ax	
  7677 00001914 895E04              <2> 	mov [bp+4],bx
  7678                              <2> 	
  7679 00001917 B8FF7F              <2> 	mov ax,0x7FFF
  7680                              <2> 	
  7681 0000191A 83E201              <2> 	and dx,0x0001
  7682 0000191D 83FA00              <2> 	cmp dx,0
  7683 00001920 750A                <2> 	jnz .fimpar
  7684 00001922 80F900              <2> 		cmp cl,0
  7685 00001925 7C0D                <2> 		jl .endf		
  7686 00001927 B80080              <2> 			mov ax,0x8000			
  7687 0000192A EB08                <2> 		jmp .endf
  7688                              <2> 	.fimpar:		
  7689 0000192C 80F900              <2> 		cmp cl,0
  7690 0000192F 7D03                <2> 		jge .endf
  7691 00001931 B80080              <2> 			mov ax,0x8000
  7692                              <2> 	.endf:		
  7693                              <2> 						
  7694 00001934 894606              <2> 	mov word [bp+6],ax
  7695                              <2> 	
  7696 00001937 C3                  <2> 	ret
  7697                              <2> 	
  7698                              <2> proc__norm_factors: ; f1=(phi%PI) --> float 32bits, f2=(phi/PI) --> int 16bits
  7699 00001938 89E0                <2> 	mov ax,sp
  7700 0000193A 89C5                <2> 	mov bp,ax
  7701                              <2> 	
  7702 0000193C 8B4602              <2> 	mov ax,[bp+2]
  7703 0000193F 8B5E04              <2> 	mov bx,[bp+4]	
  7704 00001942 25FF7F              <2> 	and ax,0x7FFF
  7705                              <2> 		
  7706 00001945 B94940              <2> 	mov cx,0x4049 ; PI (high)
  7707 00001948 BADB0F              <2> 	mov dx,0x0FDB ; PI (low)
  7708                              <2> 
  7709 0000194B 55                  <2> 	push bp
  7710                              <2> 	__fldiv ax, bx, cx, dx, ax, bx		
  7711                              <3>  stkopen 0x0E
  7712 0000194C 83EC0E              <4>  sub word sp, %1
  7713 0000194F 54                  <4>  push sp
  7714 00001950 5D                  <4>  pop bp
  7715 00001951 894600              <3>  mov word [bp+0],%1
  7716 00001954 895E02              <3>  mov word [bp+2],%2
  7717 00001957 894E04              <3>  mov word [bp+4],%3
  7718 0000195A 895606              <3>  mov word [bp+6],%4
  7719 0000195D E8DFF2              <3>  call proc_fldiv
  7720 00001960 54                  <3>  push sp
  7721 00001961 5D                  <3>  pop bp
  7722 00001962 8B4608              <3>  mov word %5,[bp+8]
  7723 00001965 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7724                              <3>  stkclose 0x0E
  7725 00001968 83C40E              <4>  add word sp, %1
  7726                              <2> 	__fltoint32 ax, bx, ax, bx	
  7727                              <3>  stkopen 0x08
  7728 0000196B 83EC08              <4>  sub word sp, %1
  7729 0000196E 54                  <4>  push sp
  7730 0000196F 5D                  <4>  pop bp
  7731 00001970 894600              <3>  mov word [bp+0],%1
  7732 00001973 895E02              <3>  mov word [bp+2],%2
  7733 00001976 E8FAF0              <3>  call proc_fltoint32
  7734 00001979 54                  <3>  push sp
  7735 0000197A 5D                  <3>  pop bp
  7736 0000197B 8B4604              <3>  mov word %3,[bp+4]
  7737 0000197E 8B5E06              <3>  mov word %4,[bp+6]
  7738                              <3>  stkclose 0x08
  7739 00001981 83C408              <4>  add word sp, %1
  7740                              <2> 	__int32to16 ax, bx, ax
  7741                              <3>  stkopen 0x06
  7742 00001984 83EC06              <4>  sub word sp, %1
  7743 00001987 54                  <4>  push sp
  7744 00001988 5D                  <4>  pop bp
  7745 00001989 894600              <3>  mov word [bp+0], %1
  7746 0000198C 895E02              <3>  mov word [bp+2], %2
  7747 0000198F E801EB              <3>  call proc_int32to16
  7748 00001992 54                  <3>  push sp
  7749 00001993 5D                  <3>  pop bp
  7750 00001994 8B4604              <3>  mov word %3, [bp+4]
  7751                              <3>  stkclose 0x06
  7752 00001997 83C406              <4>  add word sp, %1
  7753 0000199A 5D                  <2> 	pop bp
  7754                              <2> 		
  7755 0000199B 50                  <2> 	push ax		; fator
  7756                              <2> 		
  7757 0000199C 55                  <2> 	push bp
  7758                              <2> 	__int16to32	ax, ax, bx
  7759                              <3>  stkopen 0x06
  7760 0000199D 83EC06              <4>  sub word sp, %1
  7761 000019A0 54                  <4>  push sp
  7762 000019A1 5D                  <4>  pop bp
  7763 000019A2 894600              <3>  mov word [bp+0],%1
  7764 000019A5 E8C3EA              <3>  call proc_int16to32
  7765 000019A8 54                  <3>  push sp
  7766 000019A9 5D                  <3>  pop bp
  7767 000019AA 8B4602              <3>  mov word %2, [bp+2]
  7768 000019AD 8B5E04              <3>  mov word %3, [bp+4]
  7769                              <3>  stkclose 0x06
  7770 000019B0 83C406              <4>  add word sp, %1
  7771                              <2> 	__int32tofl ax, bx, ax, bx	
  7772                              <3>  stkopen 0x08
  7773 000019B3 83EC08              <4>  sub word sp, %1
  7774 000019B6 54                  <4>  push sp
  7775 000019B7 5D                  <4>  pop bp
  7776 000019B8 894600              <3>  mov word [bp+0],%1
  7777 000019BB 895E02              <3>  mov word [bp+2],%2
  7778 000019BE E827F1              <3>  call proc_int32tofl
  7779 000019C1 54                  <3>  push sp
  7780 000019C2 5D                  <3>  pop bp
  7781 000019C3 8B4604              <3>  mov word %3,[bp+4]
  7782 000019C6 8B5E06              <3>  mov word %4,[bp+6]
  7783                              <3>  stkclose 0x08
  7784 000019C9 83C408              <4>  add word sp, %1
  7785                              <2> 	
  7786 000019CC B94940              <2> 	mov cx,0x4049 ; PI (high)
  7787 000019CF BADB0F              <2> 	mov dx,0x0FDB ; PI (low)
  7788                              <2> 	__flmul ax, bx, cx, dx, ax, bx		
  7789                              <3>  stkopen 0x0E
  7790 000019D2 83EC0E              <4>  sub word sp, %1
  7791 000019D5 54                  <4>  push sp
  7792 000019D6 5D                  <4>  pop bp
  7793 000019D7 894600              <3>  mov word [bp+0],%1
  7794 000019DA 895E02              <3>  mov word [bp+2],%2
  7795 000019DD 894E04              <3>  mov word [bp+4],%3
  7796 000019E0 895606              <3>  mov word [bp+6],%4
  7797 000019E3 E878F3              <3>  call proc_flmul
  7798 000019E6 54                  <3>  push sp
  7799 000019E7 5D                  <3>  pop bp
  7800 000019E8 8B4608              <3>  mov word %5,[bp+8]
  7801 000019EB 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7802                              <3>  stkclose 0x0E
  7803 000019EE 83C40E              <4>  add word sp, %1
  7804 000019F1 5D                  <2> 	pop bp
  7805                              <2> 	
  7806 000019F2 8B4E02              <2> 	mov cx,[bp+2]
  7807 000019F5 8B5604              <2> 	mov dx,[bp+4]
  7808 000019F8 81E1FF7F            <2> 	and cx,0x7FFF
  7809                              <2> 		
  7810                              <2> 	__flsub cx, dx, ax, bx, ax, bx 			; theta -> ax bx
  7811                              <3>  stkopen 0x0E
  7812 000019FC 83EC0E              <4>  sub word sp, %1
  7813 000019FF 54                  <4>  push sp
  7814 00001A00 5D                  <4>  pop bp
  7815 00001A01 894E00              <3>  mov word [bp+0],%1
  7816 00001A04 895602              <3>  mov word [bp+2],%2
  7817 00001A07 894604              <3>  mov word [bp+4],%3
  7818 00001A0A 895E06              <3>  mov word [bp+6],%4
  7819 00001A0D C7460C0080          <3>  mov word [bp+0x0C],0x8000
  7820 00001A12 E8F5F4              <3>  call proc_fladdorsub
  7821 00001A15 54                  <3>  push sp
  7822 00001A16 5D                  <3>  pop bp
  7823 00001A17 8B4608              <3>  mov word %5,[bp+8]
  7824 00001A1A 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7825                              <3>  stkclose 0x0E
  7826 00001A1D 83C40E              <4>  add word sp, %1
  7827                              <2> 	
  7828 00001A20 59                  <2> 	pop cx				
  7829                              <2> 		
  7830 00001A21 89E2                <2> 	mov dx,sp
  7831 00001A23 89D5                <2> 	mov bp,dx	
  7832 00001A25 894606              <2> 	mov [bp+6],ax
  7833 00001A28 895E08              <2> 	mov [bp+8],bx
  7834 00001A2B 894E0A              <2> 	mov [bp+0x0A],cx
  7835                              <2> 		
  7836 00001A2E C3                  <2> 	ret
  7837                              <2> 	
  7838                              <2> %endif
  7839                              <1> 
  7840                              <1> %macro toradians 1
  7841                              <1> 	toradians %1, %1
  7842                              <1> %endmacro
  7843                              <1> 
  7844                              <1> %macro todegrees 1
  7845                              <1> 	todegrees %1, %1
  7846                              <1> %endmacro
  7847                              <1> 
  7848                              <1> %macro toradians 2
  7849                              <1> 	toradians cs, %1, cs, %2
  7850                              <1> %endmacro
  7851                              <1> 	
  7852                              <1> %macro todegrees 2
  7853                              <1> 	todegrees cs, %1, cs, %2
  7854                              <1> %endmacro	
  7855                              <1> 	
  7856                              <1> %macro sin 1
  7857                              <1> 	sin %1, %1
  7858                              <1> %endmacro	
  7859                              <1> 	
  7860                              <1> %macro sin 2
  7861                              <1> 	sin cs, %1, cs, %2
  7862                              <1> %endmacro
  7863                              <1> 
  7864                              <1> %macro cos 1
  7865                              <1> 	cos %1, %1
  7866                              <1> %endmacro	
  7867                              <1> 	
  7868                              <1> %macro cos 2
  7869                              <1> 	cos cs, %1, cs, %2
  7870                              <1> %endmacro		
  7871                              <1> 	
  7872                              <1> %macro sin 4
  7873                              <1> 	sinorcos %1, %2, %3, %4, 1
  7874                              <1> %endmacro
  7875                              <1> 
  7876                              <1> %macro cos 4
  7877                              <1> 	sinorcos %1, %2, %3, %4, 0
  7878                              <1> %endmacro
  7879                              <1> 
  7880                              <1> %macro toradians 4
  7881                              <1> 	stkopen 0x08
  7882                              <1> 	mov ax,%1
  7883                              <1> 	mov ds,ax
  7884                              <1> 	mov ax,[%2+2]
  7885                              <1> 	mov [bp+0],ax
  7886                              <1> 	mov ax,[%2]
  7887                              <1> 	mov [bp+2],ax
  7888                              <1> 	call proc_toradians
  7889                              <1> 	mov ax,sp
  7890                              <1> 	mov bp,ax
  7891                              <1> 	mov ax,%3
  7892                              <1> 	mov ds,ax
  7893                              <1> 	mov ax,[bp+4]
  7894                              <1> 	mov [%4+2],ax
  7895                              <1> 	mov ax,[bp+6]
  7896                              <1> 	mov [%4],ax
  7897                              <1> 	stkclose 0x08
  7898                              <1> %endmacro	
  7899                              <1> 
  7900                              <1> %macro todegrees 4
  7901                              <1> 	stkopen 0x08
  7902                              <1> 	mov ax,%1
  7903                              <1> 	mov ds,ax
  7904                              <1> 	mov ax,[%2+2]
  7905                              <1> 	mov [bp+0],ax
  7906                              <1> 	mov ax,[%2]
  7907                              <1> 	mov [bp+2],ax
  7908                              <1> 	call proc_todegrees
  7909                              <1> 	mov ax,sp
  7910                              <1> 	mov bp,ax
  7911                              <1> 	mov ax,%3
  7912                              <1> 	mov ds,ax
  7913                              <1> 	mov ax,[bp+4]
  7914                              <1> 	mov [%4+2],ax
  7915                              <1> 	mov ax,[bp+6]
  7916                              <1> 	mov [%4],ax
  7917                              <1> 	stkclose 0x08
  7918                              <1> %endmacro	
  7919                              <1> 	
  7920                              <1> %macro sinorcos 5
  7921                              <1> 	stkopen 0x09
  7922                              <1> 	mov ax,%1
  7923                              <1> 	mov ds,ax
  7924                              <1> 	mov ax,[%2+2]
  7925                              <1> 	mov [bp+0],ax
  7926                              <1> 	mov ax,[%2]
  7927                              <1> 	mov [bp+2],ax
  7928                              <1> 	mov byte [bp+8],%5	
  7929                              <1> 	call proc_sinorcos
  7930                              <1> 	mov ax,sp
  7931                              <1> 	mov bp,ax
  7932                              <1> 	mov ax,%3
  7933                              <1> 	mov ds,ax
  7934                              <1> 	mov ax,[bp+4]
  7935                              <1> 	mov [%4+2],ax
  7936                              <1> 	mov ax,[bp+6]
  7937                              <1> 	mov [%4],ax
  7938                              <1> 	stkclose 0x09
  7939                              <1> %endmacro
  7940                              <1> 	
  7941                              <1> %endif
  7942                                  %include "lib/graph.mac"
  7943                              <1> 
  7944                              <1> %ifndef GRAPH_MAC
  7945                              <1> 	%define GRAPH_MAC
  7946                              <1> 
  7947                              <1> 	%include "lib/graph.asm"
  7948                              <2> 
  7949                              <2> %ifndef GRAPH_ASM
  7950                              <2> 	%define GRAPH_ASM
  7951                              <2> 
  7952                              <2> 	%include "lib/system.mac"
  7953                              <3>  
  7954                              <3> %ifndef SYSTEM_MAC
  7955                              <3>  	%define SYSTEM_MAC
  7956                              <3>  	
  7957                              <3> 	%ifndef TRUE
  7958                              <3> 		%define TRUE 01h
  7959                              <3> 	%endif
  7960                              <3> 	%ifndef FALSE
  7961                              <3> 		%define FALSE 00h
  7962                              <3> 	%endif
  7963                              <3> 	
  7964                              <3> %macro vlodsb 3
  7965                              <3> 	vlodsb cs, %1, %2, %3
  7966                              <3> %endmacro
  7967                              <3> 
  7968                              <3> %macro vstosb 3
  7969                              <3> 	vstosb cs, %1, %2, %3
  7970                              <3> %endmacro
  7971                              <3> 	 	
  7972                              <3> %macro int16toreg 2
  7973                              <3> 	int16toreg cs, %1, %2
  7974                              <3> %endmacro
  7975                              <3> 
  7976                              <3> %macro regtoint16 2
  7977                              <3> 	regtoint16 %1, cs, %2
  7978                              <3> %endmacro
  7979                              <3> 
  7980                              <3> %macro vstosb 4
  7981                              <3> 	push %1
  7982                              <3> 	pop ds
  7983                              <3> 	mov si,%2
  7984                              <3> 	add si,%3
  7985                              <3> 	mov byte [si],%4	
  7986                              <3> %endmacro
  7987                              <3> 
  7988                              <3> %macro vlodsb 4
  7989                              <3> 	push %1
  7990                              <3> 	pop ds
  7991                              <3> 	mov si,%2
  7992                              <3> 	add si,%3
  7993                              <3> 	mov byte %4,[si]	
  7994                              <3> %endmacro 	 
  7995                              <3> 
  7996                              <3> %macro int16toreg 3
  7997                              <3> 	push %2
  7998                              <3> 	push %1
  7999                              <3> 	pop ds
  8000                              <3> 	pop si
  8001                              <3> 	mov word %3,[si]	
  8002                              <3> %endmacro
  8003                              <3> 
  8004                              <3> %macro regtoint16 3
  8005                              <3> 	push %3
  8006                              <3> 	push %2
  8007                              <3> 	pop ds
  8008                              <3> 	pop si
  8009                              <3> 	mov word [si],%1	
  8010                              <3> %endmacro
  8011                              <3> 
  8012                              <3> %macro mov32 2
  8013                              <3> 	mov32 cs, %1, cs, %2
  8014                              <3> %endmacro
  8015                              <3> 
  8016                              <3> %macro mov16 2
  8017                              <3> 	mov16 cs, %1, cs, %2
  8018                              <3> %endmacro
  8019                              <3> 
  8020                              <3> %macro mov32 4
  8021                              <3> 	mov ax,%3
  8022                              <3> 	mov ds,ax
  8023                              <3> 	mov cx,[%4+2]
  8024                              <3> 	mov dx,[%4]
  8025                              <3> 	mov ax,%1
  8026                              <3> 	mov ds,ax
  8027                              <3> 	mov [%2+2],cx
  8028                              <3> 	mov [%2],dx
  8029                              <3> %endmacro
  8030                              <3> 
  8031                              <3> %macro mov16 4
  8032                              <3> 	mov ax,%3
  8033                              <3> 	mov ds,ax
  8034                              <3> 	mov bx,[%4]
  8035                              <3> 	mov ax,%1
  8036                              <3> 	mov ds,ax
  8037                              <3> 	mov [%2],bx
  8038                              <3> %endmacro
  8039                              <3>  	 	
  8040                              <3> %macro mformat 4
  8041                              <3> 	stkopen 8
  8042                              <3> 	mov word [ bp + 0 ], %1
  8043                              <3> 	mov word [ bp + 2 ], %2
  8044                              <3> 	mov word [ bp + 4 ], %3
  8045                              <3> 	mov word [ bp + 6 ], %4
  8046                              <3> 	call kernel_segment:mformat
  8047                              <3> 	stkclose 8
  8048                              <3> %endmacro
  8049                              <3> 
  8050                              <3> %macro malloc 6
  8051                              <3> 	stkopen 0Bh
  8052                              <3> 	mov word [ bp + 4 ], %3
  8053                              <3> 	mov word [ bp + 6 ], %4
  8054                              <3> 	mov word [ bp + 8 ], %5	
  8055                              <3> 	call kernel_segment:malloc
  8056                              <3> 	push sp
  8057                              <3> 	pop bp
  8058                              <3> 	mov word %1, [ bp ]
  8059                              <3> 	mov word %2, [ bp + 2 ]
  8060                              <3> 	mov byte %6, [ bp + 0x0A ]
  8061                              <3> 	stkclose 0Bh
  8062                              <3> %endmacro 	
  8063                              <3> 
  8064                              <3> %macro laddr 2
  8065                              <3> 	laddr %1, %2, %1, %2
  8066                              <3> %endmacro
  8067                              <3> 
  8068                              <3> %macro faddr 2
  8069                              <3> 	faddr %1, %2, %1, %2
  8070                              <3> %endmacro
  8071                              <3>  	
  8072                              <3> %macro laddr 4
  8073                              <3> 	stkopen 8
  8074                              <3> 	mov word [ bp + 4 ], %3
  8075                              <3> 	mov word [ bp + 6 ], %4	
  8076                              <3> 	call kernel_segment:laddr
  8077                              <3> 	push sp
  8078                              <3> 	pop bp
  8079                              <3> 	mov word %1, [ bp + 0 ]
  8080                              <3> 	mov word %2, [ bp + 2 ]	
  8081                              <3> 	stkclose 8
  8082                              <3> %endmacro
  8083                              <3> 
  8084                              <3> %macro faddr 4
  8085                              <3> 	stkopen 8
  8086                              <3> 	mov word [ bp + 4 ], %3
  8087                              <3> 	mov word [ bp + 6 ], %4	
  8088                              <3> 	call kernel_segment:faddr
  8089                              <3> 	push sp
  8090                              <3> 	pop bp
  8091                              <3> 	mov word %1, [ bp + 0 ]
  8092                              <3> 	mov word %2, [ bp + 2 ]	
  8093                              <3> 	stkclose 8
  8094                              <3> %endmacro	
  8095                              <3>  
  8096                              <3> 
  8097                              <3> %macro stkopen 1		
  8098                              <3> 	sub word sp, %1
  8099                              <3> 	push sp
  8100                              <3> 	pop bp
  8101                              <3> %endmacro
  8102                              <3> 
  8103                              <3> %macro stkclose 1
  8104                              <3> 	add word sp, %1
  8105                              <3> %endmacro
  8106                              <3> 
  8107                              <3> %macro stkload 1-* 	
  8108                              <3>  	%rep %0
  8109                              <3>  	 	%rotate -1
  8110                              <3>  		pop %1
  8111                              <3>  	%endrep
  8112                              <3>  	%rep %0
  8113                              <3>  		push %1
  8114                              <3>  		%rotate 1
  8115                              <3>  	%endrep
  8116                              <3> %endmacro
  8117                              <3> 
  8118                              <3> %macro stkpush 1-* 	
  8119                              <3>  	%rep %0
  8120                              <3>  		push %1
  8121                              <3>  		%rotate 1
  8122                              <3>  	%endrep 	
  8123                              <3> %endmacro
  8124                              <3>  
  8125                              <3> %macro stkpop 1-*
  8126                              <3>  	%rep %0
  8127                              <3>  	 	%rotate -1
  8128                              <3>  		pop %1
  8129                              <3>  	%endrep 	 	
  8130                              <3> %endmacro
  8131                              <3> 
  8132                              <3> %endif 
  8133                              <2> 	%include "lib/math.mac"
  8134                              <3> 
  8135                              <3> %ifndef MATH_MAC
  8136                              <3> 	%define MATH_MAC
  8137                              <3> 	
  8138                              <3> 	%include "lib/math.asm"
  8139                              <3> 	%include "lib/system.mac"
  8140                              <3> 
  8141                              <3> %macro chgsig 1
  8142                              <3> 	chgsig cs, %1
  8143                              <3> %endmacro
  8144                              <3> 
  8145                              <3> %macro cmp16 3
  8146                              <3> 	cmp16 cs, %1, cs, %2, %3
  8147                              <3> %endmacro
  8148                              <3> 
  8149                              <3> %macro mul16 2
  8150                              <3> 	mul16 cs, %1, cs, %2
  8151                              <3> %endmacro
  8152                              <3> 
  8153                              <3> %macro div16 2
  8154                              <3> 	div16 cs, %1, cs, %2
  8155                              <3> %endmacro
  8156                              <3> 
  8157                              <3> %macro mod16 2
  8158                              <3> 	mod16 cs, %1, cs, %2
  8159                              <3> %endmacro
  8160                              <3> 
  8161                              <3> %macro inc16 1
  8162                              <3> 	inc16 cs, %1
  8163                              <3> %endmacro
  8164                              <3> 
  8165                              <3> %macro dec16 1
  8166                              <3> 	dec16 cs, %1
  8167                              <3> %endmacro
  8168                              <3> 
  8169                              <3> %macro add16 2
  8170                              <3> 	add16 cs, %1, cs, %2
  8171                              <3> %endmacro
  8172                              <3> 
  8173                              <3> %macro sub16 2
  8174                              <3> 	sub16 cs, %1, cs, %2
  8175                              <3> %endmacro
  8176                              <3> 
  8177                              <3> %macro int32to16 2
  8178                              <3> 	int32to16 cs, %1, %2
  8179                              <3> %endmacro
  8180                              <3> 
  8181                              <3> %macro int16to32 2
  8182                              <3> 	int16to32 %1, cs, %2
  8183                              <3> %endmacro
  8184                              <3> 
  8185                              <3> %macro setsig 1
  8186                              <3> 	setsig cs, %1
  8187                              <3> %endmacro
  8188                              <3> 
  8189                              <3> %macro clrsig 1
  8190                              <3> 	clrsig cs, %1
  8191                              <3> %endmacro
  8192                              <3> 
  8193                              <3> %macro idiv32 5
  8194                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  8195                              <3> %endmacro
  8196                              <3> 
  8197                              <3> %macro imul32 3
  8198                              <3> 	imul32 cs, %1, cs, %2, cs, %3
  8199                              <3> %endmacro
  8200                              <3> 
  8201                              <3> %macro div32 5
  8202                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  8203                              <3> %endmacro
  8204                              <3> 
  8205                              <3> %macro mul32 3
  8206                              <3> 	mul32 cs, %1, cs, %2, cs, %3
  8207                              <3> %endmacro
  8208                              <3> 	
  8209                              <3> %macro add32 3
  8210                              <3> 	add32 cs, %1, cs, %2, cs, %3
  8211                              <3> %endmacro
  8212                              <3> 
  8213                              <3> %macro sub32 3
  8214                              <3> 	sub32 cs, %1, cs, %2, cs, %3
  8215                              <3> %endmacro
  8216                              <3> 
  8217                              <3> %macro int32to16 3
  8218                              <3> 	stkopen 0x06
  8219                              <3> 	mov ax,%1
  8220                              <3> 	mov ds,ax
  8221                              <3> 	mov ax,[%2+2]
  8222                              <3> 	mov word [bp+0], ax
  8223                              <3> 	mov ax,[%2]	
  8224                              <3> 	mov word [bp+2], ax
  8225                              <3> 	call proc_int32to16
  8226                              <3> 	mov ax,sp
  8227                              <3> 	mov bp,ax
  8228                              <3> 	mov ax,[bp+4]
  8229                              <3> 	mov word %3, ax	
  8230                              <3> 	stkclose 0x06
  8231                              <3> %endmacro
  8232                              <3> 
  8233                              <3> %macro int16to32 3
  8234                              <3> 	stkopen 0x06
  8235                              <3> 	mov word [bp+0], %1	
  8236                              <3> 	call proc_int16to32
  8237                              <3> 	mov ax,sp
  8238                              <3> 	mov bp,ax
  8239                              <3> 	mov ax,%2
  8240                              <3> 	mov ds,ax
  8241                              <3> 	mov ax,[bp+2]
  8242                              <3> 	mov [%3+2],ax
  8243                              <3> 	mov ax,[bp+4]
  8244                              <3> 	mov [%3],ax	
  8245                              <3> 	stkclose 0x06
  8246                              <3> %endmacro
  8247                              <3> 
  8248                              <3> %macro setsig 2
  8249                              <3> 	stkopen 0x02
  8250                              <3> 	mov ax,%1
  8251                              <3> 	mov ds,ax
  8252                              <3> 	mov ax,[%2+2]
  8253                              <3> 	mov word [bp+0], ax
  8254                              <3> 	call proc_setsig
  8255                              <3> 	mov ax,sp
  8256                              <3> 	mov bp,ax
  8257                              <3> 	mov ax,%1
  8258                              <3> 	mov ds,ax
  8259                              <3> 	mov ax,[bp+0]
  8260                              <3> 	mov word [%2+2], ax
  8261                              <3> 	stkclose 0x02
  8262                              <3> %endmacro
  8263                              <3> 
  8264                              <3> %macro clrsig 2
  8265                              <3> 	stkopen 0x02
  8266                              <3> 	mov ax,%1
  8267                              <3> 	mov ds,ax
  8268                              <3> 	mov ax,[%2+2]
  8269                              <3> 	mov word [bp+0], ax
  8270                              <3> 	call proc_clrsig
  8271                              <3> 	mov ax,sp
  8272                              <3> 	mov bp,ax
  8273                              <3> 	mov ax,%1
  8274                              <3> 	mov ds,ax
  8275                              <3> 	mov ax,[bp+0]
  8276                              <3> 	mov word [%2+2], ax
  8277                              <3> 	stkclose 0x02
  8278                              <3> %endmacro
  8279                              <3> 
  8280                              <3> %macro div32 10
  8281                              <3> 	stkopen 0x11
  8282                              <3> 	mov ax,%1
  8283                              <3> 	mov ds,ax
  8284                              <3> 	mov ax,[%2+2]
  8285                              <3> 	mov word [bp+0], ax
  8286                              <3> 	mov ax,[%2]
  8287                              <3> 	mov word [bp+2], ax
  8288                              <3> 	mov ax,%3
  8289                              <3> 	mov ds,ax
  8290                              <3> 	mov ax,[%4+2]
  8291                              <3> 	mov word [bp+4], ax
  8292                              <3> 	mov ax,[%4]
  8293                              <3> 	mov word [bp+6], ax
  8294                              <3> 	call proc_div32
  8295                              <3> 	mov ax,sp
  8296                              <3> 	mov bp,ax
  8297                              <3> 	mov ax,%5
  8298                              <3> 	mov ds,ax
  8299                              <3> 	mov word ax, [bp+8]
  8300                              <3> 	mov word [%6+2], ax
  8301                              <3> 	mov word ax, [bp+0x0A]
  8302                              <3> 	mov word [%6], ax
  8303                              <3> 	mov ax,%7
  8304                              <3> 	mov ds,ax
  8305                              <3> 	mov word ax,[bp+0x0C]
  8306                              <3> 	mov word [%8+2],ax
  8307                              <3> 	mov word ax,[bp+0x0E]
  8308                              <3> 	mov word [%8],ax
  8309                              <3> 	mov ax,%9
  8310                              <3> 	mov ds,ax
  8311                              <3> 	mov byte al,[bp+0x10]
  8312                              <3> 	mov byte [%10],al
  8313                              <3> 	stkclose 0x11
  8314                              <3> %endmacro
  8315                              <3> 	
  8316                              <3> %macro mul32 6
  8317                              <3> 	stkopen 0x0C
  8318                              <3> 	mov ax,%1
  8319                              <3> 	mov ds,ax
  8320                              <3> 	mov ax,[%2+2]
  8321                              <3> 	mov word [bp+0], ax
  8322                              <3> 	mov ax,[%2]
  8323                              <3> 	mov word [bp+2], ax
  8324                              <3> 	mov ax,%3
  8325                              <3> 	mov ds,ax
  8326                              <3> 	mov ax,[%4+2]
  8327                              <3> 	mov word [bp+4], ax
  8328                              <3> 	mov ax,[%4]
  8329                              <3> 	mov word [bp+6], ax
  8330                              <3> 	call proc_mul32
  8331                              <3> 	mov ax,sp
  8332                              <3> 	mov bp,ax
  8333                              <3> 	mov ax,%5
  8334                              <3> 	mov ds,ax
  8335                              <3> 	mov word ax, [bp+8]
  8336                              <3> 	mov word [%6+2], ax
  8337                              <3> 	mov word ax, [bp+0x0A]
  8338                              <3> 	mov word [%6], ax
  8339                              <3> 	stkclose 0x0C
  8340                              <3> %endmacro	
  8341                              <3> 	
  8342                              <3> %macro add32 6
  8343                              <3> 	stkopen 0x0C
  8344                              <3> 	mov ax,%1
  8345                              <3> 	mov ds,ax
  8346                              <3> 	mov ax,[%2+2]
  8347                              <3> 	mov word [bp+0], ax
  8348                              <3> 	mov ax,[%2]
  8349                              <3> 	mov word [bp+2], ax
  8350                              <3> 	mov ax,%3
  8351                              <3> 	mov ds,ax
  8352                              <3> 	mov ax,[%4+2]
  8353                              <3> 	mov word [bp+4], ax
  8354                              <3> 	mov ax,[%4]
  8355                              <3> 	mov word [bp+6], ax
  8356                              <3> 	call proc_add32
  8357                              <3> 	mov ax,sp
  8358                              <3> 	mov bp,ax
  8359                              <3> 	mov ax,%5
  8360                              <3> 	mov ds,ax
  8361                              <3> 	mov word ax, [bp+8]
  8362                              <3> 	mov word [%6+2], ax
  8363                              <3> 	mov word ax, [bp+0x0A]
  8364                              <3> 	mov word [%6], ax
  8365                              <3> 	stkclose 0x0C
  8366                              <3> %endmacro
  8367                              <3> 
  8368                              <3> %macro sub32 6
  8369                              <3> 	stkopen 0x0C
  8370                              <3> 	mov ax,%1
  8371                              <3> 	mov ds,ax
  8372                              <3> 	mov ax,[%2+2]
  8373                              <3> 	mov word [bp+0], ax
  8374                              <3> 	mov ax,[%2]
  8375                              <3> 	mov word [bp+2], ax
  8376                              <3> 	mov ax,%3
  8377                              <3> 	mov ds,ax
  8378                              <3> 	mov ax,[%4+2]
  8379                              <3> 	mov word [bp+4], ax
  8380                              <3> 	mov ax,[%4]
  8381                              <3> 	mov word [bp+6], ax
  8382                              <3> 	call proc_sub32
  8383                              <3> 	mov ax,sp
  8384                              <3> 	mov bp,ax
  8385                              <3> 	mov ax,%5
  8386                              <3> 	mov ds,ax
  8387                              <3> 	mov word ax, [bp+8]
  8388                              <3> 	mov word [%6+2], ax
  8389                              <3> 	mov word ax, [bp+0x0A]
  8390                              <3> 	mov word [%6], ax
  8391                              <3> 	stkclose 0x0C
  8392                              <3> %endmacro
  8393                              <3> 
  8394                              <3> %macro idiv32 10
  8395                              <3> 	stkopen 0x11
  8396                              <3> 	mov ax,%1
  8397                              <3> 	mov ds,ax
  8398                              <3> 	mov ax,[%2+2]
  8399                              <3> 	mov word [bp+0], ax
  8400                              <3> 	mov ax,[%2]
  8401                              <3> 	mov word [bp+2], ax
  8402                              <3> 	mov ax,%3
  8403                              <3> 	mov ds,ax
  8404                              <3> 	mov ax,[%4+2]
  8405                              <3> 	mov word [bp+4], ax
  8406                              <3> 	mov ax,[%4]
  8407                              <3> 	mov word [bp+6], ax
  8408                              <3> 	call proc_idiv32
  8409                              <3> 	mov ax,sp
  8410                              <3> 	mov bp,ax
  8411                              <3> 	mov ax,%5
  8412                              <3> 	mov ds,ax
  8413                              <3> 	mov word ax, [bp+8]
  8414                              <3> 	mov word [%6+2], ax
  8415                              <3> 	mov word ax, [bp+0x0A]
  8416                              <3> 	mov word [%6], ax
  8417                              <3> 	mov ax,%7
  8418                              <3> 	mov ds,ax
  8419                              <3> 	mov word ax,[bp+0x0C]
  8420                              <3> 	mov word [%8+2],ax
  8421                              <3> 	mov word ax,[bp+0x0E]
  8422                              <3> 	mov word [%8],ax
  8423                              <3> 	mov ax,%9
  8424                              <3> 	mov ds,ax
  8425                              <3> 	mov byte al,[bp+0x10]
  8426                              <3> 	mov byte [%10],al
  8427                              <3> 	stkclose 0x11
  8428                              <3> %endmacro
  8429                              <3> 
  8430                              <3> %macro imul32 6
  8431                              <3> 	stkopen 0x0C
  8432                              <3> 	mov ax,%1
  8433                              <3> 	mov ds,ax
  8434                              <3> 	mov ax,[%2+2]
  8435                              <3> 	mov word [bp+0], ax
  8436                              <3> 	mov ax,[%2]
  8437                              <3> 	mov word [bp+2], ax
  8438                              <3> 	mov ax,%3
  8439                              <3> 	mov ds,ax
  8440                              <3> 	mov ax,[%4+2]
  8441                              <3> 	mov word [bp+4], ax
  8442                              <3> 	mov ax,[%4]
  8443                              <3> 	mov word [bp+6], ax
  8444                              <3> 	call proc_imul32
  8445                              <3> 	mov ax,sp
  8446                              <3> 	mov bp,ax
  8447                              <3> 	mov ax,%5
  8448                              <3> 	mov ds,ax
  8449                              <3> 	mov word ax, [bp+8]
  8450                              <3> 	mov word [%6+2], ax
  8451                              <3> 	mov word ax, [bp+0x0A]
  8452                              <3> 	mov word [%6], ax
  8453                              <3> 	stkclose 0x0C
  8454                              <3> %endmacro
  8455                              <3> 	
  8456                              <3> %macro cmp32 3
  8457                              <3> 	cmp32 cs, %1, cs, %2, %3
  8458                              <3> %endmacro	
  8459                              <3> 	
  8460                              <3> %macro cmp32 5
  8461                              <3> 	stkopen 9
  8462                              <3> 	mov ax,%1
  8463                              <3> 	mov ds,ax
  8464                              <3> 	mov word ax,[%2+2]
  8465                              <3> 	mov word [bp+0], ax
  8466                              <3> 	mov word ax,[%2]
  8467                              <3> 	mov word [bp+2], ax	
  8468                              <3> 	mov ax,%3
  8469                              <3> 	mov ds,ax
  8470                              <3> 	mov word ax,[%4+2]
  8471                              <3> 	mov word [bp+4], ax
  8472                              <3> 	mov word ax,[%4]
  8473                              <3> 	mov word [bp+6], ax	
  8474                              <3> 	call proc_cmp32
  8475                              <3> 	mov ax,sp
  8476                              <3> 	mov bp,ax
  8477                              <3> 	mov al,[bp+8]
  8478                              <3> 	mov byte %5,al
  8479                              <3> 	stkclose 9
  8480                              <3> %endmacro
  8481                              <3> 	
  8482                              <3> %macro shl32 2
  8483                              <3> 	shl32 cs, %1, %2
  8484                              <3> %endmacro	
  8485                              <3> 	
  8486                              <3> %macro shl32 3
  8487                              <3> 	stkopen 5
  8488                              <3> 	mov ax,%1
  8489                              <3> 	mov ds,ax
  8490                              <3> 	mov word ax,[%2+2]
  8491                              <3> 	mov word [bp+0], ax
  8492                              <3> 	mov word ax,[%2]
  8493                              <3> 	mov word [bp+2], ax
  8494                              <3> 	mov byte al, %3
  8495                              <3> 	mov byte [bp+4], al 
  8496                              <3> 	call proc_shl32
  8497                              <3> 	mov ax,sp
  8498                              <3> 	mov bp,ax
  8499                              <3> 	mov ax,%1
  8500                              <3> 	mov ds,ax
  8501                              <3> 	mov ax,[bp+0]
  8502                              <3> 	mov word [%2+2],ax
  8503                              <3> 	mov ax,[bp+2]
  8504                              <3> 	mov word [%2],ax
  8505                              <3> 	stkclose 5
  8506                              <3> %endmacro
  8507                              <3> 
  8508                              <3> 
  8509                              <3> %macro shr32 2
  8510                              <3> 	shr32 cs, %1, %2
  8511                              <3> %endmacro	
  8512                              <3> 	
  8513                              <3> %macro shr32 3
  8514                              <3> 	stkopen 5
  8515                              <3> 	mov ax,%1
  8516                              <3> 	mov ds,ax
  8517                              <3> 	mov word ax,[%2+2]
  8518                              <3> 	mov word [bp+0], ax
  8519                              <3> 	mov word ax,[%2]
  8520                              <3> 	mov word [bp+2], ax
  8521                              <3> 	mov byte al, %3
  8522                              <3> 	mov byte [bp+4], al 
  8523                              <3> 	call proc_shr32
  8524                              <3> 	mov ax,sp
  8525                              <3> 	mov bp,ax
  8526                              <3> 	mov ax,%1
  8527                              <3> 	mov ds,ax
  8528                              <3> 	mov ax,[bp+0]
  8529                              <3> 	mov word [%2+2],ax
  8530                              <3> 	mov ax,[bp+2]
  8531                              <3> 	mov word [%2],ax
  8532                              <3> 	stkclose 5
  8533                              <3> %endmacro
  8534                              <3> 
  8535                              <3> %macro inc16 2
  8536                              <3> 	mov ax,%1
  8537                              <3> 	mov ds,ax
  8538                              <3> 	inc word [%2]
  8539                              <3> %endmacro
  8540                              <3> 
  8541                              <3> %macro dec16 2
  8542                              <3> 	mov ax,%1
  8543                              <3> 	mov ds,ax
  8544                              <3> 	dec word [%2]
  8545                              <3> %endmacro
  8546                              <3> 
  8547                              <3> %macro add16 4	
  8548                              <3> 	mov ax,%3
  8549                              <3> 	mov ds,ax
  8550                              <3> 	mov bx,[%4]	
  8551                              <3> 	mov ax,%1
  8552                              <3> 	mov ds,ax	
  8553                              <3> 	add [%2],bx
  8554                              <3> %endmacro
  8555                              <3> 
  8556                              <3> %macro sub16 4
  8557                              <3> 	mov ax,%3
  8558                              <3> 	mov ds,ax
  8559                              <3> 	mov bx,[%4]
  8560                              <3> 	mov ax,%1
  8561                              <3> 	mov ds,ax
  8562                              <3> 	sub [%2],bx
  8563                              <3> %endmacro
  8564                              <3> 
  8565                              <3> %macro mul16 4
  8566                              <3> 	mov ax,%1
  8567                              <3> 	mov ds,ax
  8568                              <3> 	mov bx,[%2]
  8569                              <3> 	mov ax,%3
  8570                              <3> 	mov ds,ax
  8571                              <3> 	mov cx,[%4]
  8572                              <3> 	
  8573                              <3> 	mov ax,bx
  8574                              <3> 	imul cx
  8575                              <3> 	
  8576                              <3> 	mov dx,%1
  8577                              <3> 	mov ds,dx
  8578                              <3> 	mov [%2],ax
  8579                              <3> %endmacro
  8580                              <3> 
  8581                              <3> %macro div16 4
  8582                              <3> 	mov ax,%1
  8583                              <3> 	mov ds,ax
  8584                              <3> 	mov bx,[%2]
  8585                              <3> 	mov ax,%3
  8586                              <3> 	mov ds,ax
  8587                              <3> 	mov cx,[%4]
  8588                              <3> 	
  8589                              <3> 	xor dx,dx
  8590                              <3> 	mov ax,bx
  8591                              <3> 	idiv cx
  8592                              <3> 	
  8593                              <3> 	mov dx,%1
  8594                              <3> 	mov ds,dx
  8595                              <3> 	mov [%2],ax
  8596                              <3> %endmacro
  8597                              <3> 
  8598                              <3> 
  8599                              <3> %macro mod16 4
  8600                              <3> 	mov ax,%1
  8601                              <3> 	mov ds,ax
  8602                              <3> 	mov bx,[%2]
  8603                              <3> 	mov ax,%3
  8604                              <3> 	mov ds,ax
  8605                              <3> 	mov cx,[%4]
  8606                              <3> 	
  8607                              <3> 	xor dx,dx
  8608                              <3> 	mov ax,bx
  8609                              <3> 	idiv cx
  8610                              <3> 	
  8611                              <3> 	mov bx,%1
  8612                              <3> 	mov ds,bx
  8613                              <3> 	mov [%2],dx
  8614                              <3> %endmacro
  8615                              <3> 
  8616                              <3> %macro cmp16 5
  8617                              <3> 	mov ax,%1
  8618                              <3> 	mov ds,ax
  8619                              <3> 	mov bx,[%2]
  8620                              <3> 	mov ax,%3
  8621                              <3> 	mov ds,ax
  8622                              <3> 	mov	cx,[%4]
  8623                              <3> 	
  8624                              <3> 	cmp bx,cx
  8625                              <3> 	jg %%above
  8626                              <3> 	jl %%below
  8627                              <3> 		mov byte %5, 0
  8628                              <3> 		jmp %%endcmp
  8629                              <3> 	%%above:
  8630                              <3> 		mov byte %5, 1
  8631                              <3> 		jmp %%endcmp
  8632                              <3> 	%%below:
  8633                              <3> 		mov byte %5, -1
  8634                              <3> 	%%endcmp:
  8635                              <3> %endmacro
  8636                              <3> 
  8637                              <3> %macro chgsig 2
  8638                              <3> 	mov ax,%1
  8639                              <3> 	mov ds,ax
  8640                              <3> 	mov ax,[%2]
  8641                              <3> 	mov bx,0xFFFF
  8642                              <3> 	sub bx,ax
  8643                              <3> 	inc bx
  8644                              <3> 	mov [%2],bx
  8645                              <3> %endmacro
  8646                              <3> 	
  8647                              <3> %endif
  8648                              <2> 	%include "lib/float.mac"
  8649                              <3> 
  8650                              <3> %ifndef FLOAT_MAC
  8651                              <3> 	%define FLOAT_MAC
  8652                              <3> 	
  8653                              <3> 	%include "lib/float.asm"
  8654                              <3> 
  8655                              <3> %macro flsetsig 1
  8656                              <3> 	flsetsig cs, %1
  8657                              <3> %endmacro
  8658                              <3> 
  8659                              <3> %macro flclrsig 1
  8660                              <3> 	flclrsig cs, %1
  8661                              <3> %endmacro
  8662                              <3> 
  8663                              <3> %macro int16tofl 2
  8664                              <3> 	int16tofl cs, %1, cs, %2
  8665                              <3> %endmacro
  8666                              <3> 
  8667                              <3> %macro fltoint16 2
  8668                              <3> 	fltoint16 cs, %1, cs, %2
  8669                              <3> %endmacro
  8670                              <3> 
  8671                              <3> %macro fltoint32 1
  8672                              <3> 	fltoint32 %1, %1
  8673                              <3> %endmacro
  8674                              <3> 
  8675                              <3> %macro fltoint32 2
  8676                              <3> 	fltoint32 cs, %1, cs, %2
  8677                              <3> %endmacro
  8678                              <3> 
  8679                              <3> %macro int32tofl 1
  8680                              <3> 	int32tofl %1, %1
  8681                              <3> %endmacro
  8682                              <3> 
  8683                              <3> %macro int32tofl 2
  8684                              <3> 	int32tofl cs, %1, cs, %2
  8685                              <3> %endmacro
  8686                              <3> 
  8687                              <3> %macro flcmp 3
  8688                              <3> 	flcmp cs, %1, cs, %2, cs, %3
  8689                              <3> %endmacro
  8690                              <3> 
  8691                              <3> %macro flshl 1
  8692                              <3> 	flshl cs, %1
  8693                              <3> %endmacro
  8694                              <3> 
  8695                              <3> %macro flshr 1
  8696                              <3> 	flshr cs, %1
  8697                              <3> %endmacro
  8698                              <3> 
  8699                              <3> %macro fladd 3
  8700                              <3> 	fladd cs, %1, cs, %2, cs, %3
  8701                              <3> %endmacro
  8702                              <3> 
  8703                              <3> %macro flsub 3
  8704                              <3> 	flsub cs, %1, cs, %2, cs, %3
  8705                              <3> %endmacro	
  8706                              <3> 
  8707                              <3> %macro flmul 3
  8708                              <3> 	flmul cs, %1, cs, %2, cs, %3
  8709                              <3> %endmacro
  8710                              <3> 
  8711                              <3> %macro fldiv 3
  8712                              <3> 	fldiv cs, %1, cs, %2, cs, %3
  8713                              <3> %endmacro	
  8714                              <3> 
  8715                              <3> %macro fladd 6
  8716                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  8717                              <3> %endmacro
  8718                              <3> 
  8719                              <3> %macro flsub 6
  8720                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  8721                              <3> %endmacro
  8722                              <3> 
  8723                              <3> %macro fltoint16 4
  8724                              <3> 	stkopen 0x06
  8725                              <3> 	mov ax,%1
  8726                              <3> 	mov ds,ax
  8727                              <3> 	mov ax,[%2+2]
  8728                              <3> 	mov [bp+0],ax
  8729                              <3> 	mov ax,[%2]
  8730                              <3> 	mov [bp+2],ax	
  8731                              <3> 	call proc_fltoint16
  8732                              <3> 	mov ax,sp
  8733                              <3> 	mov bp,ax
  8734                              <3> 	mov ax,%3
  8735                              <3> 	mov ds,ax
  8736                              <3> 	mov ax,[bp+4]
  8737                              <3> 	mov [%4],ax
  8738                              <3> 	stkclose 0x06
  8739                              <3> %endmacro
  8740                              <3> 
  8741                              <3> %macro int16tofl 4	
  8742                              <3> 	stkopen 0x06
  8743                              <3> 	mov ax,%1
  8744                              <3> 	mov ds,ax
  8745                              <3> 	mov ax,[%2]
  8746                              <3> 	mov [bp+0],ax	
  8747                              <3> 	call proc_int16tofl
  8748                              <3> 	mov ax,sp
  8749                              <3> 	mov bp,ax
  8750                              <3> 	mov ax,%3
  8751                              <3> 	mov ds,ax
  8752                              <3> 	mov ax,[bp+2]
  8753                              <3> 	mov [%4+2],ax
  8754                              <3> 	mov ax,[bp+4]
  8755                              <3> 	mov [%4],ax
  8756                              <3> 	stkclose 0x06
  8757                              <3> %endmacro
  8758                              <3> 
  8759                              <3> %macro fltoint32 4
  8760                              <3> 	stkopen 0x08
  8761                              <3> 	mov ax,%1
  8762                              <3> 	mov ds,ax
  8763                              <3> 	mov ax,[%2+2]
  8764                              <3> 	mov [bp+0],ax
  8765                              <3> 	mov ax,[%2]
  8766                              <3> 	mov [bp+2],ax	
  8767                              <3> 	call proc_fltoint32
  8768                              <3> 	mov ax,sp
  8769                              <3> 	mov bp,ax
  8770                              <3> 	mov ax,%3
  8771                              <3> 	mov ds,ax
  8772                              <3> 	mov ax,[bp+4]
  8773                              <3> 	mov [%4+2],ax
  8774                              <3> 	mov ax,[bp+6]
  8775                              <3> 	mov [%4],ax
  8776                              <3> 	stkclose 0x08
  8777                              <3> %endmacro
  8778                              <3> 
  8779                              <3> %macro int32tofl 4
  8780                              <3> 	stkopen 0x08
  8781                              <3> 	mov ax,%1
  8782                              <3> 	mov ds,ax
  8783                              <3> 	mov ax,[%2+2]
  8784                              <3> 	mov [bp+0],ax
  8785                              <3> 	mov ax,[%2]
  8786                              <3> 	mov [bp+2],ax	
  8787                              <3> 	call proc_int32tofl
  8788                              <3> 	mov ax,sp
  8789                              <3> 	mov bp,ax
  8790                              <3> 	mov ax,%3
  8791                              <3> 	mov ds,ax
  8792                              <3> 	mov ax,[bp+4]
  8793                              <3> 	mov [%4+2],ax
  8794                              <3> 	mov ax,[bp+6]
  8795                              <3> 	mov [%4],ax
  8796                              <3> 	stkclose 0x08
  8797                              <3> %endmacro
  8798                              <3> 
  8799                              <3> %macro flsetsig 2
  8800                              <3> 	stkopen 0x04
  8801                              <3> 	mov ax,%1
  8802                              <3> 	mov ds,ax
  8803                              <3> 	mov ax,[%2+2]
  8804                              <3> 	mov word [bp+0], ax
  8805                              <3> 	mov word [bp+2], 0x8000
  8806                              <3> 	call proc_flsetsig
  8807                              <3> 	push sp
  8808                              <3> 	pop bp
  8809                              <3> 	mov ax,[bp+0]
  8810                              <3> 	mov word [%2+2],ax
  8811                              <3> 	stkclose 0x04	
  8812                              <3> %endmacro
  8813                              <3> 
  8814                              <3> %macro flclrsig 2
  8815                              <3> 	stkopen 0x04
  8816                              <3> 	mov ax,%1
  8817                              <3> 	mov ds,ax
  8818                              <3> 	mov ax,[%2+2]
  8819                              <3> 	mov word [bp+0], ax
  8820                              <3> 	mov word [bp+2], 0x0000
  8821                              <3> 	call proc_flsetsig
  8822                              <3> 	push sp
  8823                              <3> 	pop bp
  8824                              <3> 	mov ax,[bp+0]
  8825                              <3> 	mov word [%2+2],ax
  8826                              <3> 	stkclose 0x04	
  8827                              <3> %endmacro
  8828                              <3> 
  8829                              <3> %macro flcmp 6	
  8830                              <3> 	stkopen 0x09
  8831                              <3> 	mov ax,%1
  8832                              <3> 	mov ds,ax
  8833                              <3> 	mov ax,[%2+2]
  8834                              <3> 	mov [bp+0],ax
  8835                              <3> 	mov ax,[%2]
  8836                              <3> 	mov [bp+2],ax
  8837                              <3> 	mov ax,%3
  8838                              <3> 	mov ds,ax
  8839                              <3> 	mov ax,[%4+2]
  8840                              <3> 	mov [bp+4],ax
  8841                              <3> 	mov ax,[%4]
  8842                              <3> 	mov [bp+6],ax
  8843                              <3> 	call proc_fldiv
  8844                              <3> 	mov ax,sp
  8845                              <3> 	mov bp,ax
  8846                              <3> 	mov ax,%5
  8847                              <3> 	mov ds,ax
  8848                              <3> 	mov al,[bp+8]
  8849                              <3> 	mov [%6],al
  8850                              <3> 	stkclose 0x09
  8851                              <3> %endmacro
  8852                              <3> 
  8853                              <3> %macro flshl 2	
  8854                              <3> 	stkopen 0x02
  8855                              <3> 	mov ax,%1
  8856                              <3> 	mov ds,ax
  8857                              <3> 	mov ax,[%2+2]
  8858                              <3> 	mov [bp+0],ax
  8859                              <3> 	call proc_flshl
  8860                              <3> 	mov ax,sp
  8861                              <3> 	mov bp,ax
  8862                              <3> 	mov ax,%1
  8863                              <3> 	mov ds,ax
  8864                              <3> 	mov ax,[bp+0]
  8865                              <3> 	mov [%2+2],ax
  8866                              <3> 	stkclose 0x02
  8867                              <3> %endmacro
  8868                              <3> 
  8869                              <3> %macro flshr 2	
  8870                              <3> 	stkopen 0x02
  8871                              <3> 	mov ax,%1
  8872                              <3> 	mov ds,ax
  8873                              <3> 	mov ax,[%2+2]
  8874                              <3> 	mov [bp+0],ax
  8875                              <3> 	call proc_flshr
  8876                              <3> 	mov ax,sp
  8877                              <3> 	mov bp,ax
  8878                              <3> 	mov ax,%1
  8879                              <3> 	mov ds,ax
  8880                              <3> 	mov ax,[bp+0]
  8881                              <3> 	mov [%2+2],ax
  8882                              <3> 	stkclose 0x02
  8883                              <3> %endmacro
  8884                              <3> 
  8885                              <3> %macro fldiv 6	
  8886                              <3> 	stkopen 0x0C
  8887                              <3> 	mov ax,%1
  8888                              <3> 	mov ds,ax
  8889                              <3> 	mov ax,[%2+2]
  8890                              <3> 	mov [bp+0],ax
  8891                              <3> 	mov ax,[%2]
  8892                              <3> 	mov [bp+2],ax
  8893                              <3> 	mov ax,%3
  8894                              <3> 	mov ds,ax
  8895                              <3> 	mov ax,[%4+2]
  8896                              <3> 	mov [bp+4],ax
  8897                              <3> 	mov ax,[%4]
  8898                              <3> 	mov [bp+6],ax
  8899                              <3> 	call proc_fldiv
  8900                              <3> 	mov ax,sp
  8901                              <3> 	mov bp,ax
  8902                              <3> 	mov ax,%5
  8903                              <3> 	mov ds,ax
  8904                              <3> 	mov ax,[bp+8]
  8905                              <3> 	mov [%6+2],ax
  8906                              <3> 	mov ax,[bp+0x0A]
  8907                              <3> 	mov [%6],ax
  8908                              <3> 	stkclose 0x0C
  8909                              <3> %endmacro
  8910                              <3> 
  8911                              <3> %macro flmul 6	
  8912                              <3> 	stkopen 0x0C
  8913                              <3> 	mov ax,%1
  8914                              <3> 	mov ds,ax
  8915                              <3> 	mov ax,[%2+2]
  8916                              <3> 	mov [bp+0],ax
  8917                              <3> 	mov ax,[%2]
  8918                              <3> 	mov [bp+2],ax
  8919                              <3> 	mov ax,%3
  8920                              <3> 	mov ds,ax
  8921                              <3> 	mov ax,[%4+2]
  8922                              <3> 	mov [bp+4],ax
  8923                              <3> 	mov ax,[%4]
  8924                              <3> 	mov [bp+6],ax
  8925                              <3> 	call proc_flmul
  8926                              <3> 	mov ax,sp
  8927                              <3> 	mov bp,ax
  8928                              <3> 	mov ax,%5
  8929                              <3> 	mov ds,ax
  8930                              <3> 	mov ax,[bp+8]
  8931                              <3> 	mov [%6+2],ax
  8932                              <3> 	mov ax,[bp+0x0A]
  8933                              <3> 	mov [%6],ax
  8934                              <3> 	stkclose 0x0C
  8935                              <3> %endmacro
  8936                              <3> 	
  8937                              <3> %macro fladdorsub 7
  8938                              <3> 	stkopen 0x0E
  8939                              <3> 	mov ax,%1
  8940                              <3> 	mov ds,ax
  8941                              <3> 	mov ax,[%2+2]
  8942                              <3> 	mov [bp+0],ax
  8943                              <3> 	mov ax,[%2]
  8944                              <3> 	mov [bp+2],ax
  8945                              <3> 	mov ax,%3
  8946                              <3> 	mov ds,ax
  8947                              <3> 	mov ax,[%4+2]
  8948                              <3> 	mov [bp+4],ax
  8949                              <3> 	mov ax,[%4]
  8950                              <3> 	mov [bp+6],ax
  8951                              <3> 	mov word [bp+0x0C], %7
  8952                              <3> 	call proc_fladdorsub
  8953                              <3> 	mov ax,sp
  8954                              <3> 	mov bp,ax
  8955                              <3> 	mov ax,%5
  8956                              <3> 	mov ds,ax
  8957                              <3> 	mov ax,[bp+8]
  8958                              <3> 	mov [%6+2],ax
  8959                              <3> 	mov ax,[bp+0x0A]
  8960                              <3> 	mov [%6],ax
  8961                              <3> 	stkclose 0x0E
  8962                              <3> %endmacro
  8963                              <3> 	
  8964                              <3> %endif
  8965                              <2> 	%include "lib/trigon.mac"
  8966                              <3> 
  8967                              <3> %ifndef TRIGON_MAC
  8968                              <3> 	%define TRIGON_MAC
  8969                              <3> 
  8970                              <3> 	%include "lib/trigon.asm"
  8971                              <3> 
  8972                              <3> %macro toradians 1
  8973                              <3> 	toradians %1, %1
  8974                              <3> %endmacro
  8975                              <3> 
  8976                              <3> %macro todegrees 1
  8977                              <3> 	todegrees %1, %1
  8978                              <3> %endmacro
  8979                              <3> 
  8980                              <3> %macro toradians 2
  8981                              <3> 	toradians cs, %1, cs, %2
  8982                              <3> %endmacro
  8983                              <3> 	
  8984                              <3> %macro todegrees 2
  8985                              <3> 	todegrees cs, %1, cs, %2
  8986                              <3> %endmacro	
  8987                              <3> 	
  8988                              <3> %macro sin 1
  8989                              <3> 	sin %1, %1
  8990                              <3> %endmacro	
  8991                              <3> 	
  8992                              <3> %macro sin 2
  8993                              <3> 	sin cs, %1, cs, %2
  8994                              <3> %endmacro
  8995                              <3> 
  8996                              <3> %macro cos 1
  8997                              <3> 	cos %1, %1
  8998                              <3> %endmacro	
  8999                              <3> 	
  9000                              <3> %macro cos 2
  9001                              <3> 	cos cs, %1, cs, %2
  9002                              <3> %endmacro		
  9003                              <3> 	
  9004                              <3> %macro sin 4
  9005                              <3> 	sinorcos %1, %2, %3, %4, 1
  9006                              <3> %endmacro
  9007                              <3> 
  9008                              <3> %macro cos 4
  9009                              <3> 	sinorcos %1, %2, %3, %4, 0
  9010                              <3> %endmacro
  9011                              <3> 
  9012                              <3> %macro toradians 4
  9013                              <3> 	stkopen 0x08
  9014                              <3> 	mov ax,%1
  9015                              <3> 	mov ds,ax
  9016                              <3> 	mov ax,[%2+2]
  9017                              <3> 	mov [bp+0],ax
  9018                              <3> 	mov ax,[%2]
  9019                              <3> 	mov [bp+2],ax
  9020                              <3> 	call proc_toradians
  9021                              <3> 	mov ax,sp
  9022                              <3> 	mov bp,ax
  9023                              <3> 	mov ax,%3
  9024                              <3> 	mov ds,ax
  9025                              <3> 	mov ax,[bp+4]
  9026                              <3> 	mov [%4+2],ax
  9027                              <3> 	mov ax,[bp+6]
  9028                              <3> 	mov [%4],ax
  9029                              <3> 	stkclose 0x08
  9030                              <3> %endmacro	
  9031                              <3> 
  9032                              <3> %macro todegrees 4
  9033                              <3> 	stkopen 0x08
  9034                              <3> 	mov ax,%1
  9035                              <3> 	mov ds,ax
  9036                              <3> 	mov ax,[%2+2]
  9037                              <3> 	mov [bp+0],ax
  9038                              <3> 	mov ax,[%2]
  9039                              <3> 	mov [bp+2],ax
  9040                              <3> 	call proc_todegrees
  9041                              <3> 	mov ax,sp
  9042                              <3> 	mov bp,ax
  9043                              <3> 	mov ax,%3
  9044                              <3> 	mov ds,ax
  9045                              <3> 	mov ax,[bp+4]
  9046                              <3> 	mov [%4+2],ax
  9047                              <3> 	mov ax,[bp+6]
  9048                              <3> 	mov [%4],ax
  9049                              <3> 	stkclose 0x08
  9050                              <3> %endmacro	
  9051                              <3> 	
  9052                              <3> %macro sinorcos 5
  9053                              <3> 	stkopen 0x09
  9054                              <3> 	mov ax,%1
  9055                              <3> 	mov ds,ax
  9056                              <3> 	mov ax,[%2+2]
  9057                              <3> 	mov [bp+0],ax
  9058                              <3> 	mov ax,[%2]
  9059                              <3> 	mov [bp+2],ax
  9060                              <3> 	mov byte [bp+8],%5	
  9061                              <3> 	call proc_sinorcos
  9062                              <3> 	mov ax,sp
  9063                              <3> 	mov bp,ax
  9064                              <3> 	mov ax,%3
  9065                              <3> 	mov ds,ax
  9066                              <3> 	mov ax,[bp+4]
  9067                              <3> 	mov [%4+2],ax
  9068                              <3> 	mov ax,[bp+6]
  9069                              <3> 	mov [%4],ax
  9070                              <3> 	stkclose 0x09
  9071                              <3> %endmacro
  9072                              <3> 	
  9073                              <3> %endif
  9074                              <2> 
  9075                              <2> %macro __width 1
  9076                              <2> 	stkopen 0x02
  9077                              <2> 	call proc_width
  9078                              <2> 	push sp
  9079                              <2> 	pop bp
  9080                              <2> 	mov word %1, [bp+2]
  9081                              <2> 	stkclose 0x02	
  9082                              <2> %endmacro
  9083                              <2> 
  9084                              <2> %macro __height 1
  9085                              <2> 	stkopen 0x02
  9086                              <2> 	call proc_height
  9087                              <2> 	push sp
  9088                              <2> 	pop bp
  9089                              <2> 	mov word %1, [bp+2]
  9090                              <2> 	stkclose 0x02	
  9091                              <2> %endmacro
  9092                              <2> 
  9093                              <2> %macro __setpx 3
  9094                              <2> 	stkopen 0x05
  9095                              <2> 	mov word [bp+0],%1
  9096                              <2> 	mov word [bp+2],%2
  9097                              <2> 	mov byte [bp+4],%3
  9098                              <2> 	call proc_setpx	
  9099                              <2> 	stkclose 0x05
  9100                              <2> %endmacro		
  9101                              <2> 		
  9102                              <2> %macro __drawarc 10
  9103                              <2> 	stkopen 0x0A
  9104                              <2> 	mov word [bp+0],%1
  9105                              <2> 	mov word [bp+2],%2
  9106                              <2> 	mov word [bp+4],%3
  9107                              <2> 	mov word [bp+6],%4	
  9108                              <2> 	mov byte [bp+8],%5
  9109                              <2> 	mov byte [bp+9],%6
  9110                              <2> 	call proc_drawarc
  9111                              <2> 	stkclose 0x0A
  9112                              <2> %endmacro	
  9113                              <2> 
  9114                              <2> %macro __fillrect 5
  9115                              <2> 	stkopen 0x09
  9116                              <2> 	mov word [bp+0],%1
  9117                              <2> 	mov word [bp+2],%2
  9118                              <2> 	mov word [bp+4],%3
  9119                              <2> 	mov word [bp+6],%4
  9120                              <2> 	mov byte [bp+8],%5
  9121                              <2> 	call proc_fillrect
  9122                              <2> 	stkclose 0x09
  9123                              <2> %endmacro	
  9124                              <2> 
  9125                              <2> %macro __drawrect 5
  9126                              <2> 	stkopen 0x09
  9127                              <2> 	mov word [bp+0],%1
  9128                              <2> 	mov word [bp+2],%2
  9129                              <2> 	mov word [bp+4],%3
  9130                              <2> 	mov word [bp+6],%4
  9131                              <2> 	mov byte [bp+8],%5
  9132                              <2> 	call proc_drawrect
  9133                              <2> 	stkclose 0x09
  9134                              <2> %endmacro	
  9135                              <2> 
  9136                              <2> %macro __drawlineh 4
  9137                              <2> 	stkopen 0x07
  9138                              <2> 	mov word [bp+0],%1
  9139                              <2> 	mov word [bp+2],%2
  9140                              <2> 	mov word [bp+4],%3
  9141                              <2> 	mov byte [bp+6],%4
  9142                              <2> 	call proc_drawlineh	
  9143                              <2> 	stkclose 0x07
  9144                              <2> %endmacro
  9145                              <2> 
  9146                              <2> %macro __drawlinev 4
  9147                              <2> 	stkopen 0x07
  9148                              <2> 	mov word [bp+0],%1
  9149                              <2> 	mov word [bp+2],%2
  9150                              <2> 	mov word [bp+4],%3
  9151                              <2> 	mov byte [bp+6],%4
  9152                              <2> 	call proc_drawlinev	
  9153                              <2> 	stkclose 0x07
  9154                              <2> %endmacro
  9155                              <2> 
  9156                              <2> %macro __arc_quadcoords 8
  9157                              <2> 	stkopen 0x10
  9158                              <2> 	mov word [bp+0],%1
  9159                              <2> 	mov word [bp+2],%2
  9160                              <2> 	mov word [bp+4],%3
  9161                              <2> 	mov word [bp+6],%4
  9162                              <2> 	call proc__arc_quadcoords
  9163                              <2> 	push sp
  9164                              <2> 	pop bp
  9165                              <2> 	mov word %5, [bp+8]
  9166                              <2> 	mov word %6, [bp+0x0A]
  9167                              <2> 	mov word %7, [bp+0x0C]
  9168                              <2> 	mov word %8, [bp+0x0E]	
  9169                              <2> 	stkclose 0x10
  9170                              <2> %endmacro
  9171                              <2> 
  9172                              <2> %macro __x2dcoord 6
  9173                              <2> 	stkopen 0x0C
  9174                              <2> 	mov word [bp+0],%1
  9175                              <2> 	mov word [bp+2],%2
  9176                              <2> 	mov word [bp+4],%3
  9177                              <2> 	mov word [bp+6],%4
  9178                              <2> 	call proc__x2dcoord
  9179                              <2> 	push sp
  9180                              <2> 	pop bp
  9181                              <2> 	mov word %5,[bp+8]
  9182                              <2> 	mov word %6,[bp+0x0A]
  9183                              <2> 	stkclose 0x0C
  9184                              <2> %endmacro
  9185                              <2> 
  9186                              <2> %macro __y2dcoord 6
  9187                              <2> 	stkopen 0x0C
  9188                              <2> 	mov word [bp+0],%1
  9189                              <2> 	mov word [bp+2],%2
  9190                              <2> 	mov word [bp+4],%3
  9191                              <2> 	mov word [bp+6],%4
  9192                              <2> 	call proc__y2dcoord
  9193                              <2> 	push sp
  9194                              <2> 	pop bp
  9195                              <2> 	mov word %5,[bp+8]
  9196                              <2> 	mov word %6,[bp+0x0A]
  9197                              <2> 	stkclose 0x0C
  9198                              <2> %endmacro
  9199                              <2> 
  9200                              <2> %macro __arc_inc 4
  9201                              <2> 	stkopen 0x0C
  9202                              <2> 	mov word [bp+0],%1
  9203                              <2> 	mov word [bp+2],%2
  9204                              <2> 	call proc__arc_inc
  9205                              <2> 	push sp
  9206                              <2> 	pop bp
  9207                              <2> 	mov word %3,[bp+4]
  9208                              <2> 	mov word %4,[bp+6]
  9209                              <2> 	stkclose 0x0C
  9210                              <2> %endmacro
  9211                              <2> 		
  9212                              <2> section .data
  9213                              <2> 
  9214                              <2> proc_initgraph:
  9215 00001A2F 89E0                <2> 	mov ax,sp
  9216 00001A31 89C5                <2> 	mov bp,ax
  9217                              <2> 	
  9218 00001A33 B400                <2> 	mov ah,00h
  9219 00001A35 B013                <2> 	mov al,13h
  9220 00001A37 CD10                <2> 	int 10h
  9221                              <2> 	
  9222 00001A39 C3                  <2> 	ret
  9223                              <2> 	
  9224                              <2> proc_closegraph:
  9225 00001A3A B400                <2> 	mov ah,00h
  9226 00001A3C B003                <2> 	mov al,03h
  9227 00001A3E CD10                <2> 	int 10h
  9228                              <2> 	
  9229 00001A40 C3                  <2> 	ret
  9230                              <2> 	
  9231                              <2> proc_width:
  9232 00001A41 89E0                <2> 	mov ax,sp
  9233 00001A43 89C5                <2> 	mov bp,ax
  9234 00001A45 C746024001          <2> 	mov word [bp+2],320
  9235                              <2> 	
  9236 00001A4A C3                  <2> 	ret	
  9237                              <2> 
  9238                              <2> proc_height:
  9239 00001A4B 89E0                <2> 	mov ax,sp
  9240 00001A4D 89C5                <2> 	mov bp,ax
  9241 00001A4F C74602C800          <2> 	mov word [bp+2],200
  9242                              <2> 			
  9243 00001A54 C3                  <2> 	ret
  9244                              <2> 	
  9245                              <2> 
  9246                              <2> proc_repaint:
  9247 00001A55 B80090              <2> 	mov ax,0x9000
  9248 00001A58 8ED8                <2> 	mov ds,ax
  9249 00001A5A BE0000              <2> 	mov si,0
  9250                              <2> 
  9251 00001A5D B800A0              <2> 	mov ax,0xA000
  9252 00001A60 8EC0                <2> 	mov es,ax
  9253 00001A62 BF0000              <2> 	mov di,0	
  9254                              <2> 	
  9255 00001A65 B90000              <2> 	mov cx,0
  9256                              <2> 	.l1:
  9257 00001A68 81F900FA            <2> 		cmp cx,64000
  9258 00001A6C 7307                <2> 		jae .l2
  9259 00001A6E 51                  <2> 		push cx
  9260                              <2> 				
  9261 00001A6F AC                  <2> 		lodsb
  9262 00001A70 AA                  <2> 		stosb
  9263                              <2> 		
  9264 00001A71 59                  <2> 		pop cx
  9265 00001A72 41                  <2> 		inc cx
  9266 00001A73 EBF3                <2> 		jmp .l1
  9267                              <2> 	.l2:
  9268                              <2> 					
  9269 00001A75 C3                  <2> 	ret
  9270                              <2> 
  9271                              <2> proc_setpx:
  9272 00001A76 89E0                <2> 	mov ax,sp
  9273 00001A78 89C5                <2> 	mov bp,ax
  9274                              <2> 	
  9275 00001A7A 8B4E02              <2> 	mov cx,[bp+2]
  9276 00001A7D 8B5604              <2> 	mov dx,[bp+4]
  9277 00001A80 8B4604              <2> 	mov ax,[bp+4]
  9278                              <2> 		
  9279 00001A83 D1E2                <2> 	shl dx,1		
  9280 00001A85 C1E003              <2> 	shl ax,3		
  9281 00001A88 01C2                <2> 	add dx,ax			
  9282 00001A8A C1E205              <2> 	shl dx,5
  9283                              <2> 			 	
  9284 00001A8D 01D1                <2> 	add cx,dx
  9285                              <2> 		
  9286 00001A8F B80090              <2> 	mov ax,0x9000	
  9287 00001A92 8ED8                <2> 	mov ds,ax
  9288 00001A94 89CE                <2> 	mov si,cx
  9289 00001A96 8A4606              <2> 	mov al,[bp+6]
  9290 00001A99 8804                <2> 	mov byte [si],al
  9291                              <2> 	
  9292 00001A9B C3                  <2> 	ret
  9293                              <2> 
  9294                              <2> proc_drawlineh:
  9295 00001A9C 89E0                <2> 	mov ax,sp
  9296 00001A9E 89C5                <2> 	mov bp,ax
  9297                              <2> 	
  9298 00001AA0 8B4602              <2> 	mov ax,[bp+2]
  9299 00001AA3 8B5E04              <2> 	mov bx,[bp+4]
  9300 00001AA6 8B4E06              <2> 	mov cx,[bp+6]
  9301 00001AA9 8A5608              <2> 	mov dl,[bp+8]
  9302                              <2> 	
  9303                              <2> 	.l1:
  9304 00001AAC 39C8                <2> 		cmp ax,cx
  9305 00001AAE 771F                <2> 		ja .l2
  9306 00001AB0 50                  <2> 		push ax
  9307 00001AB1 53                  <2> 		push bx
  9308 00001AB2 51                  <2> 		push cx
  9309 00001AB3 52                  <2> 		push dx
  9310                              <2> 		
  9311                              <2> 		__setpx ax, bx, dl
  9312                              <3>  stkopen 0x05
  9313 00001AB4 83EC05              <4>  sub word sp, %1
  9314 00001AB7 54                  <4>  push sp
  9315 00001AB8 5D                  <4>  pop bp
  9316 00001AB9 894600              <3>  mov word [bp+0],%1
  9317 00001ABC 895E02              <3>  mov word [bp+2],%2
  9318 00001ABF 885604              <3>  mov byte [bp+4],%3
  9319 00001AC2 E8B1FF              <3>  call proc_setpx
  9320                              <3>  stkclose 0x05
  9321 00001AC5 83C405              <4>  add word sp, %1
  9322                              <2> 				
  9323 00001AC8 5A                  <2> 		pop dx		
  9324 00001AC9 59                  <2> 		pop cx
  9325 00001ACA 5B                  <2> 		pop bx
  9326 00001ACB 58                  <2> 		pop ax
  9327 00001ACC 40                  <2> 		inc ax
  9328 00001ACD EBDD                <2> 		jmp .l1
  9329                              <2> 	.l2:
  9330                              <2> 	
  9331 00001ACF C3                  <2> 	ret
  9332                              <2> 	
  9333                              <2> 
  9334                              <2> proc_drawlinev:
  9335 00001AD0 89E0                <2> 	mov ax,sp
  9336 00001AD2 89C5                <2> 	mov bp,ax
  9337                              <2> 	
  9338 00001AD4 8B4602              <2> 	mov ax,[bp+2]
  9339 00001AD7 8B5E04              <2> 	mov bx,[bp+4]
  9340 00001ADA 8B4E06              <2> 	mov cx,[bp+6]
  9341 00001ADD 8A5608              <2> 	mov dl,[bp+8]
  9342                              <2> 	
  9343                              <2> 	.l1:
  9344 00001AE0 39CB                <2> 		cmp bx,cx
  9345 00001AE2 771F                <2> 		ja .l2
  9346 00001AE4 50                  <2> 		push ax
  9347 00001AE5 53                  <2> 		push bx
  9348 00001AE6 51                  <2> 		push cx
  9349 00001AE7 52                  <2> 		push dx
  9350                              <2> 		
  9351                              <2> 		__setpx ax, bx, dl
  9352                              <3>  stkopen 0x05
  9353 00001AE8 83EC05              <4>  sub word sp, %1
  9354 00001AEB 54                  <4>  push sp
  9355 00001AEC 5D                  <4>  pop bp
  9356 00001AED 894600              <3>  mov word [bp+0],%1
  9357 00001AF0 895E02              <3>  mov word [bp+2],%2
  9358 00001AF3 885604              <3>  mov byte [bp+4],%3
  9359 00001AF6 E87DFF              <3>  call proc_setpx
  9360                              <3>  stkclose 0x05
  9361 00001AF9 83C405              <4>  add word sp, %1
  9362                              <2> 				
  9363 00001AFC 5A                  <2> 		pop dx		
  9364 00001AFD 59                  <2> 		pop cx
  9365 00001AFE 5B                  <2> 		pop bx
  9366 00001AFF 58                  <2> 		pop ax
  9367 00001B00 43                  <2> 		inc bx
  9368 00001B01 EBDD                <2> 		jmp .l1
  9369                              <2> 	.l2:
  9370                              <2> 	
  9371 00001B03 C3                  <2> 	ret
  9372                              <2> 
  9373                              <2> proc_drawrect:
  9374 00001B04 89E0                <2> 	mov ax,sp
  9375 00001B06 89C5                <2> 	mov bp,ax		
  9376 00001B08 8B4602              <2> 	mov ax,[bp+2]
  9377 00001B0B 8B5E04              <2> 	mov bx,[bp+4]	
  9378 00001B0E 8B4E06              <2> 	mov cx,[bp+6]
  9379 00001B11 8A560A              <2> 	mov dl,[bp+0x0A]
  9380                              <2> 	__drawlineh ax, bx, cx, dl
  9381                              <3>  stkopen 0x07
  9382 00001B14 83EC07              <4>  sub word sp, %1
  9383 00001B17 54                  <4>  push sp
  9384 00001B18 5D                  <4>  pop bp
  9385 00001B19 894600              <3>  mov word [bp+0],%1
  9386 00001B1C 895E02              <3>  mov word [bp+2],%2
  9387 00001B1F 894E04              <3>  mov word [bp+4],%3
  9388 00001B22 885606              <3>  mov byte [bp+6],%4
  9389 00001B25 E874FF              <3>  call proc_drawlineh
  9390                              <3>  stkclose 0x07
  9391 00001B28 83C407              <4>  add word sp, %1
  9392                              <2> 	
  9393 00001B2B 89E0                <2> 	mov ax,sp
  9394 00001B2D 89C5                <2> 	mov bp,ax		
  9395 00001B2F 8B4602              <2> 	mov ax,[bp+2]
  9396 00001B32 8B5E08              <2> 	mov bx,[bp+8]	
  9397 00001B35 8B4E06              <2> 	mov cx,[bp+6]
  9398 00001B38 8A560A              <2> 	mov dl,[bp+0x0A]
  9399                              <2> 	__drawlineh ax, bx, cx, dl
  9400                              <3>  stkopen 0x07
  9401 00001B3B 83EC07              <4>  sub word sp, %1
  9402 00001B3E 54                  <4>  push sp
  9403 00001B3F 5D                  <4>  pop bp
  9404 00001B40 894600              <3>  mov word [bp+0],%1
  9405 00001B43 895E02              <3>  mov word [bp+2],%2
  9406 00001B46 894E04              <3>  mov word [bp+4],%3
  9407 00001B49 885606              <3>  mov byte [bp+6],%4
  9408 00001B4C E84DFF              <3>  call proc_drawlineh
  9409                              <3>  stkclose 0x07
  9410 00001B4F 83C407              <4>  add word sp, %1
  9411                              <2> 	
  9412 00001B52 89E0                <2> 	mov ax,sp
  9413 00001B54 89C5                <2> 	mov bp,ax		
  9414 00001B56 8B4602              <2> 	mov ax,[bp+2]
  9415 00001B59 8B5E04              <2> 	mov bx,[bp+4]	
  9416 00001B5C 8B4E08              <2> 	mov cx,[bp+8]
  9417 00001B5F 8A560A              <2> 	mov dl,[bp+0x0A]
  9418                              <2> 	__drawlinev ax, bx, cx, dl
  9419                              <3>  stkopen 0x07
  9420 00001B62 83EC07              <4>  sub word sp, %1
  9421 00001B65 54                  <4>  push sp
  9422 00001B66 5D                  <4>  pop bp
  9423 00001B67 894600              <3>  mov word [bp+0],%1
  9424 00001B6A 895E02              <3>  mov word [bp+2],%2
  9425 00001B6D 894E04              <3>  mov word [bp+4],%3
  9426 00001B70 885606              <3>  mov byte [bp+6],%4
  9427 00001B73 E85AFF              <3>  call proc_drawlinev
  9428                              <3>  stkclose 0x07
  9429 00001B76 83C407              <4>  add word sp, %1
  9430                              <2> 	
  9431 00001B79 89E0                <2> 	mov ax,sp
  9432 00001B7B 89C5                <2> 	mov bp,ax		
  9433 00001B7D 8B4606              <2> 	mov ax,[bp+6]
  9434 00001B80 8B5E04              <2> 	mov bx,[bp+4]	
  9435 00001B83 8B4E08              <2> 	mov cx,[bp+8]
  9436 00001B86 8A560A              <2> 	mov dl,[bp+0x0A]
  9437                              <2> 	__drawlinev ax, bx, cx, dl
  9438                              <3>  stkopen 0x07
  9439 00001B89 83EC07              <4>  sub word sp, %1
  9440 00001B8C 54                  <4>  push sp
  9441 00001B8D 5D                  <4>  pop bp
  9442 00001B8E 894600              <3>  mov word [bp+0],%1
  9443 00001B91 895E02              <3>  mov word [bp+2],%2
  9444 00001B94 894E04              <3>  mov word [bp+4],%3
  9445 00001B97 885606              <3>  mov byte [bp+6],%4
  9446 00001B9A E833FF              <3>  call proc_drawlinev
  9447                              <3>  stkclose 0x07
  9448 00001B9D 83C407              <4>  add word sp, %1
  9449                              <2> 	
  9450 00001BA0 C3                  <2> 	ret
  9451                              <2> 
  9452                              <2> proc_fillrect:
  9453 00001BA1 89E0                <2> 	mov ax,sp
  9454 00001BA3 89C5                <2> 	mov bp,ax	
  9455                              <2> 	
  9456 00001BA5 8B4602              <2> 	mov ax,[bp+2]
  9457 00001BA8 8B5E04              <2> 	mov bx,[bp+4]	
  9458 00001BAB 8B4E06              <2> 	mov cx,[bp+6]
  9459 00001BAE 8B5608              <2> 	mov dx,[bp+8]
  9460                              <2> 			
  9461                              <2> 	.l1:			
  9462 00001BB1 39D3                <2> 		cmp bx,dx
  9463 00001BB3 7727                <2> 		ja .l2
  9464                              <2> 		stkpush ax, bx, cx, dx, bp
  9465                              <3>  %rep %0
  9466                              <3>  push %1
  9467                              <3>  %rotate 1
  9468                              <3>  %endrep
  9469 00001BB5 50                  <4>  push %1
  9470                              <4>  %rotate 1
  9471 00001BB6 53                  <4>  push %1
  9472                              <4>  %rotate 1
  9473 00001BB7 51                  <4>  push %1
  9474                              <4>  %rotate 1
  9475 00001BB8 52                  <4>  push %1
  9476                              <4>  %rotate 1
  9477 00001BB9 55                  <4>  push %1
  9478                              <4>  %rotate 1
  9479                              <2> 		
  9480 00001BBA 8A560A              <2> 		mov dl,[bp+0x0A]
  9481                              <2> 		__drawlineh ax, bx, cx, dl
  9482                              <3>  stkopen 0x07
  9483 00001BBD 83EC07              <4>  sub word sp, %1
  9484 00001BC0 54                  <4>  push sp
  9485 00001BC1 5D                  <4>  pop bp
  9486 00001BC2 894600              <3>  mov word [bp+0],%1
  9487 00001BC5 895E02              <3>  mov word [bp+2],%2
  9488 00001BC8 894E04              <3>  mov word [bp+4],%3
  9489 00001BCB 885606              <3>  mov byte [bp+6],%4
  9490 00001BCE E8CBFE              <3>  call proc_drawlineh
  9491                              <3>  stkclose 0x07
  9492 00001BD1 83C407              <4>  add word sp, %1
  9493                              <2> 		
  9494                              <2> 		stkpop ax, bx, cx, dx, bp		
  9495                              <3>  %rep %0
  9496                              <3>  %rotate -1
  9497                              <3>  pop %1
  9498                              <3>  %endrep
  9499                              <4>  %rotate -1
  9500 00001BD4 5D                  <4>  pop %1
  9501                              <4>  %rotate -1
  9502 00001BD5 5A                  <4>  pop %1
  9503                              <4>  %rotate -1
  9504 00001BD6 59                  <4>  pop %1
  9505                              <4>  %rotate -1
  9506 00001BD7 5B                  <4>  pop %1
  9507                              <4>  %rotate -1
  9508 00001BD8 58                  <4>  pop %1
  9509 00001BD9 43                  <2> 		inc bx				
  9510 00001BDA EBD5                <2> 		jmp .l1	
  9511                              <2> 	.l2:
  9512                              <2> 		
  9513 00001BDC C3                  <2> 	ret
  9514                              <2> 
  9515                              <2> proc_drawarc:	
  9516 00001BDD 89E0                <2> 	mov ax,sp
  9517 00001BDF 89C5                <2> 	mov bp,ax
  9518                              <2> 		
  9519 00001BE1 8B4606              <2> 	mov ax,[bp+6]
  9520                              <2> 	__int16tofl ax, ax, bx
  9521                              <3>  stkopen 0x06
  9522 00001BE4 83EC06              <4>  sub word sp, %1
  9523 00001BE7 54                  <4>  push sp
  9524 00001BE8 5D                  <4>  pop bp
  9525 00001BE9 894600              <3>  mov word [bp+0],%1
  9526 00001BEC E843EE              <3>  call proc_int16tofl
  9527 00001BEF 54                  <3>  push sp
  9528 00001BF0 5D                  <3>  pop bp
  9529 00001BF1 8B4602              <3>  mov word %2,[bp+2]
  9530 00001BF4 8B5E04              <3>  mov word %3,[bp+4]
  9531                              <3>  stkclose 0x06
  9532 00001BF7 83C406              <4>  add word sp, %1
  9533                              <2> 	__arc_inc ax, bx, ax, bx
  9534                              <3>  stkopen 0x0C
  9535 00001BFA 83EC0C              <4>  sub word sp, %1
  9536 00001BFD 54                  <4>  push sp
  9537 00001BFE 5D                  <4>  pop bp
  9538 00001BFF 894600              <3>  mov word [bp+0],%1
  9539 00001C02 895E02              <3>  mov word [bp+2],%2
  9540 00001C05 E80D03              <3>  call proc__arc_inc
  9541 00001C08 54                  <3>  push sp
  9542 00001C09 5D                  <3>  pop bp
  9543 00001C0A 8B4604              <3>  mov word %3,[bp+4]
  9544 00001C0D 8B5E06              <3>  mov word %4,[bp+6]
  9545                              <3>  stkclose 0x0C
  9546 00001C10 83C40C              <4>  add word sp, %1
  9547 00001C13 50                  <2> 	push ax
  9548 00001C14 53                  <2> 	push bx
  9549                              <2> 	
  9550 00001C15 B90000              <2> 	mov cx,0	; angulo (alta)
  9551 00001C18 BA0000              <2> 	mov dx,0	; angulo (baixa)		
  9552 00001C1B 51                  <2> 	push cx
  9553 00001C1C 52                  <2> 	push dx
  9554                              <2> 	.l1:					
  9555 00001C1D B8C93F              <2> 		mov ax,0x3FC9	; PI/2 (alta)
  9556 00001C20 BBDB0F              <2> 		mov bx,0x0FDB	; PI/2 (baixa)	
  9557                              <2> 		__flcmp cx, dx, ax, bx, cl
  9558                              <3>  stkopen 0x09
  9559 00001C23 83EC09              <4>  sub word sp, %1
  9560 00001C26 54                  <4>  push sp
  9561 00001C27 5D                  <4>  pop bp
  9562 00001C28 894E00              <3>  mov word [bp+0],%1
  9563 00001C2B 895602              <3>  mov word [bp+2],%2
  9564 00001C2E 894604              <3>  mov word [bp+4],%3
  9565 00001C31 895E06              <3>  mov word [bp+6],%4
  9566 00001C34 E86BEF              <3>  call proc_flcmp
  9567 00001C37 54                  <3>  push sp
  9568 00001C38 5D                  <3>  pop bp
  9569 00001C39 8A4E08              <3>  mov byte %5, [bp+8]
  9570                              <3>  stkclose 0x09
  9571 00001C3C 83C409              <4>  add word sp, %1
  9572 00001C3F 80F900              <2> 		cmp cl,0
  9573 00001C42 0F8FE301            <2> 		jg .l2
  9574                              <2> 		
  9575 00001C46 89E0                <2> 		mov ax,sp
  9576 00001C48 89C5                <2> 		mov bp,ax
  9577 00001C4A 83C508              <2> 		add bp,8
  9578                              <2> 		
  9579 00001C4D 55                  <2> 		push bp				
  9580 00001C4E 8B4608              <2> 		mov ax,[bp+8]			; raio (int16)		
  9581                              <2> 		__int16tofl ax, ax, bx	; raio (float)
  9582                              <3>  stkopen 0x06
  9583 00001C51 83EC06              <4>  sub word sp, %1
  9584 00001C54 54                  <4>  push sp
  9585 00001C55 5D                  <4>  pop bp
  9586 00001C56 894600              <3>  mov word [bp+0],%1
  9587 00001C59 E8D6ED              <3>  call proc_int16tofl
  9588 00001C5C 54                  <3>  push sp
  9589 00001C5D 5D                  <3>  pop bp
  9590 00001C5E 8B4602              <3>  mov word %2,[bp+2]
  9591 00001C61 8B5E04              <3>  mov word %3,[bp+4]
  9592                              <3>  stkclose 0x06
  9593 00001C64 83C406              <4>  add word sp, %1
  9594 00001C67 5D                  <2> 		pop bp		
  9595                              <2> 		
  9596 00001C68 5A                  <2> 		pop dx
  9597 00001C69 59                  <2> 		pop cx
  9598 00001C6A 51                  <2> 		push cx
  9599 00001C6B 52                  <2> 		push dx
  9600 00001C6C 55                  <2> 		push bp		
  9601                              <2> 		__y2dcoord ax, bx, cx, dx, ax, bx				
  9602                              <3>  stkopen 0x0C
  9603 00001C6D 83EC0C              <4>  sub word sp, %1
  9604 00001C70 54                  <4>  push sp
  9605 00001C71 5D                  <4>  pop bp
  9606 00001C72 894600              <3>  mov word [bp+0],%1
  9607 00001C75 895E02              <3>  mov word [bp+2],%2
  9608 00001C78 894E04              <3>  mov word [bp+4],%3
  9609 00001C7B 895606              <3>  mov word [bp+6],%4
  9610 00001C7E E83902              <3>  call proc__y2dcoord
  9611 00001C81 54                  <3>  push sp
  9612 00001C82 5D                  <3>  pop bp
  9613 00001C83 8B4608              <3>  mov word %5,[bp+8]
  9614 00001C86 8B5E0A              <3>  mov word %6,[bp+0x0A]
  9615                              <3>  stkclose 0x0C
  9616 00001C89 83C40C              <4>  add word sp, %1
  9617                              <2> 		__fltoint16 ax, bx, ax	; y (int160)
  9618                              <3>  stkopen 0x06
  9619 00001C8C 83EC06              <4>  sub word sp, %1
  9620 00001C8F 54                  <4>  push sp
  9621 00001C90 5D                  <4>  pop bp
  9622 00001C91 894600              <3>  mov word [bp+0],%1
  9623 00001C94 895E02              <3>  mov word [bp+2],%2
  9624 00001C97 E857ED              <3>  call proc_fltoint16
  9625 00001C9A 54                  <3>  push sp
  9626 00001C9B 5D                  <3>  pop bp
  9627 00001C9C 8B4604              <3>  mov word %3,[bp+4]
  9628                              <3>  stkclose 0x06
  9629 00001C9F 83C406              <4>  add word sp, %1
  9630 00001CA2 5D                  <2> 		pop bp
  9631                              <2> 		
  9632 00001CA3 5A                  <2> 		pop dx
  9633 00001CA4 59                  <2> 		pop cx	
  9634 00001CA5 51                  <2> 		push cx
  9635 00001CA6 52                  <2> 		push dx	
  9636 00001CA7 50                  <2> 		push ax
  9637 00001CA8 55                  <2> 		push bp
  9638 00001CA9 51                  <2> 		push cx
  9639 00001CAA 52                  <2> 		push dx
  9640                              <2> 		
  9641 00001CAB 8B4606              <2> 		mov ax,[bp+6]			; raio (int16)
  9642                              <2> 		__int16tofl ax, ax, bx	; raio (float)
  9643                              <3>  stkopen 0x06
  9644 00001CAE 83EC06              <4>  sub word sp, %1
  9645 00001CB1 54                  <4>  push sp
  9646 00001CB2 5D                  <4>  pop bp
  9647 00001CB3 894600              <3>  mov word [bp+0],%1
  9648 00001CB6 E879ED              <3>  call proc_int16tofl
  9649 00001CB9 54                  <3>  push sp
  9650 00001CBA 5D                  <3>  pop bp
  9651 00001CBB 8B4602              <3>  mov word %2,[bp+2]
  9652 00001CBE 8B5E04              <3>  mov word %3,[bp+4]
  9653                              <3>  stkclose 0x06
  9654 00001CC1 83C406              <4>  add word sp, %1
  9655 00001CC4 5A                  <2> 		pop dx
  9656 00001CC5 59                  <2> 		pop cx		
  9657                              <2> 		__x2dcoord ax, bx, cx, dx, ax, bx				
  9658                              <3>  stkopen 0x0C
  9659 00001CC6 83EC0C              <4>  sub word sp, %1
  9660 00001CC9 54                  <4>  push sp
  9661 00001CCA 5D                  <4>  pop bp
  9662 00001CCB 894600              <3>  mov word [bp+0],%1
  9663 00001CCE 895E02              <3>  mov word [bp+2],%2
  9664 00001CD1 894E04              <3>  mov word [bp+4],%3
  9665 00001CD4 895606              <3>  mov word [bp+6],%4
  9666 00001CD7 E88501              <3>  call proc__x2dcoord
  9667 00001CDA 54                  <3>  push sp
  9668 00001CDB 5D                  <3>  pop bp
  9669 00001CDC 8B4608              <3>  mov word %5,[bp+8]
  9670 00001CDF 8B5E0A              <3>  mov word %6,[bp+0x0A]
  9671                              <3>  stkclose 0x0C
  9672 00001CE2 83C40C              <4>  add word sp, %1
  9673                              <2> 		__fltoint16 ax, bx, cx	; x (int16)
  9674                              <3>  stkopen 0x06
  9675 00001CE5 83EC06              <4>  sub word sp, %1
  9676 00001CE8 54                  <4>  push sp
  9677 00001CE9 5D                  <4>  pop bp
  9678 00001CEA 894600              <3>  mov word [bp+0],%1
  9679 00001CED 895E02              <3>  mov word [bp+2],%2
  9680 00001CF0 E8FEEC              <3>  call proc_fltoint16
  9681 00001CF3 54                  <3>  push sp
  9682 00001CF4 5D                  <3>  pop bp
  9683 00001CF5 8B4E04              <3>  mov word %3,[bp+4]
  9684                              <3>  stkclose 0x06
  9685 00001CF8 83C406              <4>  add word sp, %1
  9686 00001CFB 5D                  <2> 		pop bp
  9687                              <2> 		
  9688 00001CFC 5A                  <2> 		pop dx
  9689 00001CFD 8B4602              <2> 		mov ax,[bp+2]
  9690 00001D00 8B4E04              <2> 		mov cx,[bp+4]
  9691                              <2> 			
  9692 00001D03 55                  <2> 		push bp				
  9693                              <2> 		__arc_quadcoords ax, bx, cx, dx, ax, bx, cx, dx
  9694                              <3>  stkopen 0x10
  9695 00001D04 83EC10              <4>  sub word sp, %1
  9696 00001D07 54                  <4>  push sp
  9697 00001D08 5D                  <4>  pop bp
  9698 00001D09 894600              <3>  mov word [bp+0],%1
  9699 00001D0C 895E02              <3>  mov word [bp+2],%2
  9700 00001D0F 894E04              <3>  mov word [bp+4],%3
  9701 00001D12 895606              <3>  mov word [bp+6],%4
  9702 00001D15 E81601              <3>  call proc__arc_quadcoords
  9703 00001D18 54                  <3>  push sp
  9704 00001D19 5D                  <3>  pop bp
  9705 00001D1A 8B4608              <3>  mov word %5, [bp+8]
  9706 00001D1D 8B5E0A              <3>  mov word %6, [bp+0x0A]
  9707 00001D20 8B4E0C              <3>  mov word %7, [bp+0x0C]
  9708 00001D23 8B560E              <3>  mov word %8, [bp+0x0E]
  9709                              <3>  stkclose 0x10
  9710 00001D26 83C410              <4>  add word sp, %1
  9711 00001D29 5D                  <2> 		pop bp
  9712                              <2> 		
  9713                              <2> 		stkpush ax, bx, cx, dx, bp
  9714                              <3>  %rep %0
  9715                              <3>  push %1
  9716                              <3>  %rotate 1
  9717                              <3>  %endrep
  9718 00001D2A 50                  <4>  push %1
  9719                              <4>  %rotate 1
  9720 00001D2B 53                  <4>  push %1
  9721                              <4>  %rotate 1
  9722 00001D2C 51                  <4>  push %1
  9723                              <4>  %rotate 1
  9724 00001D2D 52                  <4>  push %1
  9725                              <4>  %rotate 1
  9726 00001D2E 55                  <4>  push %1
  9727                              <4>  %rotate 1
  9728                              <2> 		
  9729 00001D2F 8A560A              <2> 		mov dl,[bp+0x0A]				
  9730 00001D32 807E0B00            <2> 		cmp byte [bp+0x0B],0
  9731 00001D36 7530                <2> 		jnz .fill1
  9732 00001D38 53                  <2> 			push bx
  9733 00001D39 51                  <2> 			push cx
  9734 00001D3A 52                  <2> 			push dx			
  9735                              <2> 			__setpx ax, bx, dl
  9736                              <3>  stkopen 0x05
  9737 00001D3B 83EC05              <4>  sub word sp, %1
  9738 00001D3E 54                  <4>  push sp
  9739 00001D3F 5D                  <4>  pop bp
  9740 00001D40 894600              <3>  mov word [bp+0],%1
  9741 00001D43 895E02              <3>  mov word [bp+2],%2
  9742 00001D46 885604              <3>  mov byte [bp+4],%3
  9743 00001D49 E82AFD              <3>  call proc_setpx
  9744                              <3>  stkclose 0x05
  9745 00001D4C 83C405              <4>  add word sp, %1
  9746 00001D4F 5A                  <2> 			pop dx
  9747 00001D50 59                  <2> 			pop cx
  9748 00001D51 5B                  <2> 			pop bx
  9749                              <2> 			__setpx cx, bx, dl
  9750                              <3>  stkopen 0x05
  9751 00001D52 83EC05              <4>  sub word sp, %1
  9752 00001D55 54                  <4>  push sp
  9753 00001D56 5D                  <4>  pop bp
  9754 00001D57 894E00              <3>  mov word [bp+0],%1
  9755 00001D5A 895E02              <3>  mov word [bp+2],%2
  9756 00001D5D 885604              <3>  mov byte [bp+4],%3
  9757 00001D60 E813FD              <3>  call proc_setpx
  9758                              <3>  stkclose 0x05
  9759 00001D63 83C405              <4>  add word sp, %1
  9760 00001D66 EB23                <2> 			jmp .endfill1
  9761                              <2> 		.fill1:
  9762 00001D68 39C8                <2> 			cmp ax,cx
  9763 00001D6A 731F                <2> 			jae .endfill1	
  9764                              <2> 			stkpush ax, bx, cx, dx
  9765                              <3>  %rep %0
  9766                              <3>  push %1
  9767                              <3>  %rotate 1
  9768                              <3>  %endrep
  9769 00001D6C 50                  <4>  push %1
  9770                              <4>  %rotate 1
  9771 00001D6D 53                  <4>  push %1
  9772                              <4>  %rotate 1
  9773 00001D6E 51                  <4>  push %1
  9774                              <4>  %rotate 1
  9775 00001D6F 52                  <4>  push %1
  9776                              <4>  %rotate 1
  9777                              <2> 			__setpx ax, bx, dl
  9778                              <3>  stkopen 0x05
  9779 00001D70 83EC05              <4>  sub word sp, %1
  9780 00001D73 54                  <4>  push sp
  9781 00001D74 5D                  <4>  pop bp
  9782 00001D75 894600              <3>  mov word [bp+0],%1
  9783 00001D78 895E02              <3>  mov word [bp+2],%2
  9784 00001D7B 885604              <3>  mov byte [bp+4],%3
  9785 00001D7E E8F5FC              <3>  call proc_setpx
  9786                              <3>  stkclose 0x05
  9787 00001D81 83C405              <4>  add word sp, %1
  9788                              <2> 			stkpop ax, bx, cx, dx			
  9789                              <3>  %rep %0
  9790                              <3>  %rotate -1
  9791                              <3>  pop %1
  9792                              <3>  %endrep
  9793                              <4>  %rotate -1
  9794 00001D84 5A                  <4>  pop %1
  9795                              <4>  %rotate -1
  9796 00001D85 59                  <4>  pop %1
  9797                              <4>  %rotate -1
  9798 00001D86 5B                  <4>  pop %1
  9799                              <4>  %rotate -1
  9800 00001D87 58                  <4>  pop %1
  9801 00001D88 40                  <2> 			inc ax
  9802 00001D89 EBDD                <2> 			jmp .fill1
  9803                              <2> 		.endfill1:
  9804                              <2> 		
  9805                              <2> 		stkload ax, bx, cx, dx, bp
  9806                              <3>  %rep %0
  9807                              <3>  %rotate -1
  9808                              <3>  pop %1
  9809                              <3>  %endrep
  9810                              <4>  %rotate -1
  9811 00001D8B 5D                  <4>  pop %1
  9812                              <4>  %rotate -1
  9813 00001D8C 5A                  <4>  pop %1
  9814                              <4>  %rotate -1
  9815 00001D8D 59                  <4>  pop %1
  9816                              <4>  %rotate -1
  9817 00001D8E 5B                  <4>  pop %1
  9818                              <4>  %rotate -1
  9819 00001D8F 58                  <4>  pop %1
  9820                              <3>  %rep %0
  9821                              <3>  push %1
  9822                              <3>  %rotate 1
  9823                              <3>  %endrep
  9824 00001D90 50                  <4>  push %1
  9825                              <4>  %rotate 1
  9826 00001D91 53                  <4>  push %1
  9827                              <4>  %rotate 1
  9828 00001D92 51                  <4>  push %1
  9829                              <4>  %rotate 1
  9830 00001D93 52                  <4>  push %1
  9831                              <4>  %rotate 1
  9832 00001D94 55                  <4>  push %1
  9833                              <4>  %rotate 1
  9834                              <2> 		
  9835 00001D95 8A5E0A              <2> 		mov bl,[bp+0x0A]				
  9836 00001D98 807E0B00            <2> 		cmp byte [bp+0x0B],0
  9837 00001D9C 7530                <2> 		jnz .fill2
  9838 00001D9E 53                  <2> 			push bx
  9839 00001D9F 51                  <2> 			push cx
  9840 00001DA0 52                  <2> 			push dx			
  9841                              <2> 			__setpx ax, dx, bl
  9842                              <3>  stkopen 0x05
  9843 00001DA1 83EC05              <4>  sub word sp, %1
  9844 00001DA4 54                  <4>  push sp
  9845 00001DA5 5D                  <4>  pop bp
  9846 00001DA6 894600              <3>  mov word [bp+0],%1
  9847 00001DA9 895602              <3>  mov word [bp+2],%2
  9848 00001DAC 885E04              <3>  mov byte [bp+4],%3
  9849 00001DAF E8C4FC              <3>  call proc_setpx
  9850                              <3>  stkclose 0x05
  9851 00001DB2 83C405              <4>  add word sp, %1
  9852 00001DB5 5A                  <2> 			pop dx
  9853 00001DB6 59                  <2> 			pop cx
  9854 00001DB7 5B                  <2> 			pop bx
  9855                              <2> 			__setpx cx, dx, bl
  9856                              <3>  stkopen 0x05
  9857 00001DB8 83EC05              <4>  sub word sp, %1
  9858 00001DBB 54                  <4>  push sp
  9859 00001DBC 5D                  <4>  pop bp
  9860 00001DBD 894E00              <3>  mov word [bp+0],%1
  9861 00001DC0 895602              <3>  mov word [bp+2],%2
  9862 00001DC3 885E04              <3>  mov byte [bp+4],%3
  9863 00001DC6 E8ADFC              <3>  call proc_setpx
  9864                              <3>  stkclose 0x05
  9865 00001DC9 83C405              <4>  add word sp, %1
  9866 00001DCC EB23                <2> 			jmp .endfill2
  9867                              <2> 		.fill2:
  9868 00001DCE 39C8                <2> 			cmp ax,cx
  9869 00001DD0 731F                <2> 			jae .endfill2	
  9870                              <2> 			stkpush ax, bx, cx, dx
  9871                              <3>  %rep %0
  9872                              <3>  push %1
  9873                              <3>  %rotate 1
  9874                              <3>  %endrep
  9875 00001DD2 50                  <4>  push %1
  9876                              <4>  %rotate 1
  9877 00001DD3 53                  <4>  push %1
  9878                              <4>  %rotate 1
  9879 00001DD4 51                  <4>  push %1
  9880                              <4>  %rotate 1
  9881 00001DD5 52                  <4>  push %1
  9882                              <4>  %rotate 1
  9883                              <2> 			__setpx ax, dx, bl
  9884                              <3>  stkopen 0x05
  9885 00001DD6 83EC05              <4>  sub word sp, %1
  9886 00001DD9 54                  <4>  push sp
  9887 00001DDA 5D                  <4>  pop bp
  9888 00001DDB 894600              <3>  mov word [bp+0],%1
  9889 00001DDE 895602              <3>  mov word [bp+2],%2
  9890 00001DE1 885E04              <3>  mov byte [bp+4],%3
  9891 00001DE4 E88FFC              <3>  call proc_setpx
  9892                              <3>  stkclose 0x05
  9893 00001DE7 83C405              <4>  add word sp, %1
  9894                              <2> 			stkpop ax, bx, cx, dx			
  9895                              <3>  %rep %0
  9896                              <3>  %rotate -1
  9897                              <3>  pop %1
  9898                              <3>  %endrep
  9899                              <4>  %rotate -1
  9900 00001DEA 5A                  <4>  pop %1
  9901                              <4>  %rotate -1
  9902 00001DEB 59                  <4>  pop %1
  9903                              <4>  %rotate -1
  9904 00001DEC 5B                  <4>  pop %1
  9905                              <4>  %rotate -1
  9906 00001DED 58                  <4>  pop %1
  9907 00001DEE 40                  <2> 			inc ax
  9908 00001DEF EBDD                <2> 			jmp .fill2
  9909                              <2> 		.endfill2:
  9910                              <2> 		
  9911                              <2> 		stkpop ax, bx, cx, dx, bp 		
  9912                              <3>  %rep %0
  9913                              <3>  %rotate -1
  9914                              <3>  pop %1
  9915                              <3>  %endrep
  9916                              <4>  %rotate -1
  9917 00001DF1 5D                  <4>  pop %1
  9918                              <4>  %rotate -1
  9919 00001DF2 5A                  <4>  pop %1
  9920                              <4>  %rotate -1
  9921 00001DF3 59                  <4>  pop %1
  9922                              <4>  %rotate -1
  9923 00001DF4 5B                  <4>  pop %1
  9924                              <4>  %rotate -1
  9925 00001DF5 58                  <4>  pop %1
  9926                              <2> 																		
  9927 00001DF6 5A                  <2> 		pop dx
  9928 00001DF7 59                  <2> 		pop cx
  9929 00001DF8 5B                  <2> 		pop bx
  9930 00001DF9 58                  <2> 		pop ax
  9931 00001DFA 50                  <2> 		push ax
  9932 00001DFB 53                  <2> 		push bx
  9933                              <2> 		__fladd cx, dx, ax, bx, cx, dx
  9934                              <3>  stkopen 0x0E
  9935 00001DFC 83EC0E              <4>  sub word sp, %1
  9936 00001DFF 54                  <4>  push sp
  9937 00001E00 5D                  <4>  pop bp
  9938 00001E01 894E00              <3>  mov word [bp+0],%1
  9939 00001E04 895602              <3>  mov word [bp+2],%2
  9940 00001E07 894604              <3>  mov word [bp+4],%3
  9941 00001E0A 895E06              <3>  mov word [bp+6],%4
  9942 00001E0D C7460C0000          <3>  mov word [bp+0x0C],0
  9943 00001E12 E8F5F0              <3>  call proc_fladdorsub
  9944 00001E15 54                  <3>  push sp
  9945 00001E16 5D                  <3>  pop bp
  9946 00001E17 8B4E08              <3>  mov word %5,[bp+8]
  9947 00001E1A 8B560A              <3>  mov word %6,[bp+0x0A]
  9948                              <3>  stkclose 0x0E
  9949 00001E1D 83C40E              <4>  add word sp, %1
  9950 00001E20 5B                  <2> 		pop bx
  9951 00001E21 58                  <2> 		pop ax
  9952 00001E22 50                  <2> 		push ax
  9953 00001E23 53                  <2> 		push bx
  9954 00001E24 51                  <2> 		push cx
  9955 00001E25 52                  <2> 		push dx					
  9956                              <2> 		
  9957 00001E26 E9F4FD              <2> 		jmp .l1
  9958                              <2> 	.l2:
  9959                              <2> 														
  9960 00001E29 5A                  <2> 	pop dx
  9961 00001E2A 59                  <2> 	pop cx
  9962 00001E2B 5B                  <2> 	pop bx
  9963 00001E2C 58                  <2> 	pop ax
  9964                              <2> 	
  9965 00001E2D C3                  <2> 	ret
  9966                              <2> 		
  9967                              <2> proc__arc_quadcoords:
  9968 00001E2E 89E0                <2> 	mov ax,sp
  9969 00001E30 89C5                <2> 	mov bp,ax
  9970                              <2> 	
  9971 00001E32 B8FFFF              <2> 	mov ax,0xFFFF
  9972 00001E35 2B4604              <2> 	sub ax,[bp+4]
  9973 00001E38 40                  <2> 	inc ax
  9974 00001E39 034602              <2> 	add ax,[bp+2]	
  9975 00001E3C 89460A              <2> 	mov [bp+0x0A], ax
  9976                              <2> 	
  9977 00001E3F 8B4608              <2> 	mov ax,[bp+8]
  9978 00001E42 034606              <2> 	add ax,[bp+6]
  9979 00001E45 89460C              <2> 	mov [bp+0x0C], ax
  9980                              <2> 	
  9981 00001E48 8B4604              <2> 	mov ax,[bp+4]
  9982 00001E4B 034602              <2> 	add ax,[bp+2]
  9983 00001E4E 89460E              <2> 	mov [bp+0x0E], ax
  9984                              <2> 	
  9985 00001E51 B8FFFF              <2> 	mov ax,0xFFFF
  9986 00001E54 2B4608              <2> 	sub ax,[bp+8]
  9987 00001E57 40                  <2> 	inc ax
  9988 00001E58 034606              <2> 	add ax,[bp+6]
  9989 00001E5B 894610              <2> 	mov [bp+0x10], ax
  9990                              <2> 	
  9991 00001E5E C3                  <2> 	ret
  9992                              <2> 		
  9993                              <2> proc__x2dcoord:
  9994 00001E5F 89E0                <2> 	mov ax,sp
  9995 00001E61 89C5                <2> 	mov bp,ax
  9996                              <2> 	
  9997 00001E63 8B4606              <2> 	mov ax,[bp+6]	; angulo (alta)
  9998 00001E66 8B5E08              <2> 	mov bx,[bp+8]	; angulo (baixa)
  9999                              <2> 	
 10000                              <2> 	__cos0x90 ax,bx,ax,bx
 10001                              <3>  __sinorcos0x90 %1, %2, %3, %4, 0
 10002                              <4>  stkopen 0x09
 10003 00001E69 83EC09              <5>  sub word sp, %1
 10004 00001E6C 54                  <5>  push sp
 10005 00001E6D 5D                  <5>  pop bp
 10006 00001E6E 894600              <4>  mov word [bp+0],%1
 10007 00001E71 895E02              <4>  mov word [bp+2],%2
 10008 00001E74 C6460800            <4>  mov byte [bp+8],%5
 10009 00001E78 E89EF7              <4>  call proc_sinorcos0x90
 10010 00001E7B 54                  <4>  push sp
 10011 00001E7C 5D                  <4>  pop bp
 10012 00001E7D 8B4604              <4>  mov word %3,[bp+4]
 10013 00001E80 8B5E06              <4>  mov word %4,[bp+6]
 10014                              <4>  stkclose 0x09
 10015 00001E83 83C409              <5>  add word sp, %1
 10016                              <2> 	
 10017 00001E86 89E1                <2> 	mov cx,sp
 10018 00001E88 89CD                <2> 	mov bp,cx
 10019 00001E8A 8B4E02              <2> 	mov cx,[bp+2]	; raio (alta)
 10020 00001E8D 8B5604              <2> 	mov dx,[bp+4]	; raio (baixa)
 10021                              <2> 	
 10022                              <2> 	__flmul ax, bx, cx, dx, ax, bx
 10023                              <3>  stkopen 0x0E
 10024 00001E90 83EC0E              <4>  sub word sp, %1
 10025 00001E93 54                  <4>  push sp
 10026 00001E94 5D                  <4>  pop bp
 10027 00001E95 894600              <3>  mov word [bp+0],%1
 10028 00001E98 895E02              <3>  mov word [bp+2],%2
 10029 00001E9B 894E04              <3>  mov word [bp+4],%3
 10030 00001E9E 895606              <3>  mov word [bp+6],%4
 10031 00001EA1 E8BAEE              <3>  call proc_flmul
 10032 00001EA4 54                  <3>  push sp
 10033 00001EA5 5D                  <3>  pop bp
 10034 00001EA6 8B4608              <3>  mov word %5,[bp+8]
 10035 00001EA9 8B5E0A              <3>  mov word %6,[bp+0x0A]
 10036                              <3>  stkclose 0x0E
 10037 00001EAC 83C40E              <4>  add word sp, %1
 10038                              <2> 	
 10039 00001EAF 89E1                <2> 	mov cx,sp
 10040 00001EB1 89CD                <2> 	mov bp,cx
 10041 00001EB3 89460A              <2> 	mov [bp+0x0A],ax
 10042 00001EB6 895E0C              <2> 	mov [bp+0x0C],bx
 10043                              <2> 			
 10044 00001EB9 C3                  <2> 	ret
 10045                              <2> 	
 10046                              <2> proc__y2dcoord:
 10047 00001EBA 89E0                <2> 	mov ax,sp
 10048 00001EBC 89C5                <2> 	mov bp,ax
 10049                              <2> 	
 10050 00001EBE 8B4606              <2> 	mov ax,[bp+6]	; angulo (alta)
 10051 00001EC1 8B5E08              <2> 	mov bx,[bp+8]	; angulo (baixa)
 10052                              <2> 	
 10053                              <2> 	__sin0x90 ax,bx,ax,bx
 10054                              <3>  __sinorcos0x90 %1, %2, %3, %4, 1
 10055                              <4>  stkopen 0x09
 10056 00001EC4 83EC09              <5>  sub word sp, %1
 10057 00001EC7 54                  <5>  push sp
 10058 00001EC8 5D                  <5>  pop bp
 10059 00001EC9 894600              <4>  mov word [bp+0],%1
 10060 00001ECC 895E02              <4>  mov word [bp+2],%2
 10061 00001ECF C6460801            <4>  mov byte [bp+8],%5
 10062 00001ED3 E843F7              <4>  call proc_sinorcos0x90
 10063 00001ED6 54                  <4>  push sp
 10064 00001ED7 5D                  <4>  pop bp
 10065 00001ED8 8B4604              <4>  mov word %3,[bp+4]
 10066 00001EDB 8B5E06              <4>  mov word %4,[bp+6]
 10067                              <4>  stkclose 0x09
 10068 00001EDE 83C409              <5>  add word sp, %1
 10069                              <2> 	
 10070 00001EE1 89E1                <2> 	mov cx,sp
 10071 00001EE3 89CD                <2> 	mov bp,cx
 10072 00001EE5 8B4E02              <2> 	mov cx,[bp+2]	; raio (alta)
 10073 00001EE8 8B5604              <2> 	mov dx,[bp+4]	; raio (baixa)
 10074                              <2> 	
 10075                              <2> 	__flmul ax, bx, cx, dx, ax, bx
 10076                              <3>  stkopen 0x0E
 10077 00001EEB 83EC0E              <4>  sub word sp, %1
 10078 00001EEE 54                  <4>  push sp
 10079 00001EEF 5D                  <4>  pop bp
 10080 00001EF0 894600              <3>  mov word [bp+0],%1
 10081 00001EF3 895E02              <3>  mov word [bp+2],%2
 10082 00001EF6 894E04              <3>  mov word [bp+4],%3
 10083 00001EF9 895606              <3>  mov word [bp+6],%4
 10084 00001EFC E85FEE              <3>  call proc_flmul
 10085 00001EFF 54                  <3>  push sp
 10086 00001F00 5D                  <3>  pop bp
 10087 00001F01 8B4608              <3>  mov word %5,[bp+8]
 10088 00001F04 8B5E0A              <3>  mov word %6,[bp+0x0A]
 10089                              <3>  stkclose 0x0E
 10090 00001F07 83C40E              <4>  add word sp, %1
 10091                              <2> 	
 10092 00001F0A 89E1                <2> 	mov cx,sp
 10093 00001F0C 89CD                <2> 	mov bp,cx
 10094 00001F0E 89460A              <2> 	mov [bp+0x0A],ax
 10095 00001F11 895E0C              <2> 	mov [bp+0x0C],bx
 10096                              <2> 			
 10097 00001F14 C3                  <2> 	ret
 10098                              <2> 	
 10099                              <2> proc__arc_inc:
 10100 00001F15 89E0                <2> 	mov ax,sp
 10101 00001F17 89C5                <2> 	mov bp,ax
 10102                              <2> 			
 10103 00001F19 8B4602              <2> 	mov ax,[bp+2]
 10104 00001F1C 8B5E04              <2> 	mov bx,[bp+4]
 10105 00001F1F 55                  <2> 	push bp
 10106                              <2> 	__flshr ax	; divide por 2
 10107                              <3>  stkopen 0x02
 10108 00001F20 83EC02              <4>  sub word sp, %1
 10109 00001F23 54                  <4>  push sp
 10110 00001F24 5D                  <4>  pop bp
 10111 00001F25 894600              <3>  mov word [bp+0],%1
 10112 00001F28 E8F7EC              <3>  call proc_flshr
 10113 00001F2B 54                  <3>  push sp
 10114 00001F2C 5D                  <3>  pop bp
 10115 00001F2D 8B4600              <3>  mov word %1,[bp+0]
 10116                              <3>  stkclose 0x02
 10117 00001F30 83C402              <4>  add word sp, %1
 10118 00001F33 5D                  <2> 	pop bp
 10119                              <2> 	
 10120 00001F34 B94940              <2> 	mov cx,0x4049	; PI (alta)
 10121 00001F37 BADB0F              <2> 	mov dx,0x0FDB	; PI (baixa)
 10122                              <2> 	
 10123 00001F3A 55                  <2> 	push bp
 10124                              <2> 	__flmul ax, bx, cx, dx, ax, bx
 10125                              <3>  stkopen 0x0E
 10126 00001F3B 83EC0E              <4>  sub word sp, %1
 10127 00001F3E 54                  <4>  push sp
 10128 00001F3F 5D                  <4>  pop bp
 10129 00001F40 894600              <3>  mov word [bp+0],%1
 10130 00001F43 895E02              <3>  mov word [bp+2],%2
 10131 00001F46 894E04              <3>  mov word [bp+4],%3
 10132 00001F49 895606              <3>  mov word [bp+6],%4
 10133 00001F4C E80FEE              <3>  call proc_flmul
 10134 00001F4F 54                  <3>  push sp
 10135 00001F50 5D                  <3>  pop bp
 10136 00001F51 8B4608              <3>  mov word %5,[bp+8]
 10137 00001F54 8B5E0A              <3>  mov word %6,[bp+0x0A]
 10138                              <3>  stkclose 0x0E
 10139 00001F57 83C40E              <4>  add word sp, %1
 10140 00001F5A 5D                  <2> 	pop bp
 10141                              <2> 	
 10142 00001F5B B9C93F              <2> 	mov cx,0x3FC9
 10143 00001F5E BADB0F              <2> 	mov dx,0x0FDB
 10144                              <2> 	
 10145 00001F61 55                  <2> 	push bp
 10146                              <2> 	__fldiv cx, dx, ax, bx, ax, bx
 10147                              <3>  stkopen 0x0E
 10148 00001F62 83EC0E              <4>  sub word sp, %1
 10149 00001F65 54                  <4>  push sp
 10150 00001F66 5D                  <4>  pop bp
 10151 00001F67 894E00              <3>  mov word [bp+0],%1
 10152 00001F6A 895602              <3>  mov word [bp+2],%2
 10153 00001F6D 894604              <3>  mov word [bp+4],%3
 10154 00001F70 895E06              <3>  mov word [bp+6],%4
 10155 00001F73 E8C9EC              <3>  call proc_fldiv
 10156 00001F76 54                  <3>  push sp
 10157 00001F77 5D                  <3>  pop bp
 10158 00001F78 8B4608              <3>  mov word %5,[bp+8]
 10159 00001F7B 8B5E0A              <3>  mov word %6,[bp+0x0A]
 10160                              <3>  stkclose 0x0E
 10161 00001F7E 83C40E              <4>  add word sp, %1
 10162 00001F81 5D                  <2> 	pop bp
 10163                              <2> 	
 10164 00001F82 894606              <2> 	mov [bp+6], ax
 10165 00001F85 895E08              <2> 	mov [bp+8], bx
 10166                              <2> 	
 10167 00001F88 C3                  <2> 	ret
 10168                              <2> 	
 10169                              <2> %endif
 10170                              <1> 			
 10171                              <1> %macro drawlineh 4
 10172                              <1> 	drawlineh cs, %1, cs, %2, cs, %3, cs, %4
 10173                              <1> %endmacro			
 10174                              <1> 
 10175                              <1> %macro drawlinev 4
 10176                              <1> 	drawlinev cs, %1, cs, %2, cs, %3, cs, %4
 10177                              <1> %endmacro			
 10178                              <1> 			
 10179                              <1> %macro drawrect 5
 10180                              <1> 	drawrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 10181                              <1> %endmacro
 10182                              <1> 
 10183                              <1> %macro fillrect 5
 10184                              <1> 	fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 10185                              <1> %endmacro	
 10186                              <1> 
 10187                              <1> %macro drawarc 5
 10188                              <1> 	drawarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 10189                              <1> %endmacro
 10190                              <1> 
 10191                              <1> %macro fillarc 5
 10192                              <1> 	fillarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 10193                              <1> %endmacro			
 10194                              <1> 
 10195                              <1> %macro repaint 1
 10196                              <1> 	repaint cs, %1
 10197                              <1> %endmacro
 10198                              <1> 		
 10199                              <1> %macro initgraph 0		
 10200                              <1> 	call proc_initgraph
 10201                              <1> %endmacro
 10202                              <1> 
 10203                              <1> %macro closegraph 0
 10204                              <1> 	call proc_closegraph
 10205                              <1> %endmacro
 10206                              <1> 
 10207                              <1> %macro repaint 0
 10208                              <1> 	call proc_repaint
 10209                              <1> %endmacro
 10210                              <1> 
 10211                              <1> %macro width 2
 10212                              <1> 	stkopen 0x02
 10213                              <1> 	call proc_width
 10214                              <1> 	mov ax,sp
 10215                              <1> 	mov bp,ax
 10216                              <1> 	mov ax,%1
 10217                              <1> 	mov ds,ax
 10218                              <1> 	mov ax,[bp+2]
 10219                              <1> 	mov word [%2],ax	
 10220                              <1> 	stkclose 0x02
 10221                              <1> %endmacro
 10222                              <1> 
 10223                              <1> %macro height 2
 10224                              <1> 	stkopen 0x02
 10225                              <1> 	call proc_height
 10226                              <1> 	mov ax,sp
 10227                              <1> 	mov bp,ax
 10228                              <1> 	mov ax,%1
 10229                              <1> 	mov ds,ax
 10230                              <1> 	mov ax,[bp+2]
 10231                              <1> 	mov word [%2],ax	
 10232                              <1> 	stkclose 0x02
 10233                              <1> %endmacro
 10234                              <1> 
 10235                              <1> %macro drawlineh 8
 10236                              <1> 	stkopen 0x07
 10237                              <1> 	mov ax,%1
 10238                              <1> 	mov ds,ax
 10239                              <1> 	mov ax,[%2]
 10240                              <1> 	mov [bp+0],ax	
 10241                              <1> 	mov ax,%3
 10242                              <1> 	mov ds,ax
 10243                              <1> 	mov ax,[%4]
 10244                              <1> 	mov [bp+2],ax	
 10245                              <1> 	mov ax,%5
 10246                              <1> 	mov ds,ax
 10247                              <1> 	mov ax,[%6]
 10248                              <1> 	mov [bp+4],ax		
 10249                              <1> 	mov ax,%7
 10250                              <1> 	mov ds,ax
 10251                              <1> 	mov al,[%8]
 10252                              <1> 	mov [bp+6],al
 10253                              <1> 	call proc_drawlineh	
 10254                              <1> 	stkclose 0x07
 10255                              <1> %endmacro
 10256                              <1> 
 10257                              <1> %macro drawlinev 8
 10258                              <1> 	stkopen 0x07
 10259                              <1> 	mov ax,%1
 10260                              <1> 	mov ds,ax
 10261                              <1> 	mov ax,[%2]
 10262                              <1> 	mov [bp+0],ax	
 10263                              <1> 	mov ax,%3
 10264                              <1> 	mov ds,ax
 10265                              <1> 	mov ax,[%4]
 10266                              <1> 	mov [bp+2],ax	
 10267                              <1> 	mov ax,%5
 10268                              <1> 	mov ds,ax
 10269                              <1> 	mov ax,[%6]
 10270                              <1> 	mov [bp+4],ax		
 10271                              <1> 	mov ax,%7
 10272                              <1> 	mov ds,ax
 10273                              <1> 	mov al,[%8]
 10274                              <1> 	mov [bp+6],al
 10275                              <1> 	call proc_drawlinev	
 10276                              <1> 	stkclose 0x07
 10277                              <1> %endmacro
 10278                              <1> 
 10279                              <1> %macro drawrect 10
 10280                              <1> 	stkopen 0x09	
 10281                              <1> 	mov ax,%1
 10282                              <1> 	mov ds,ax
 10283                              <1> 	mov ax,[%2]
 10284                              <1> 	mov [bp+0],ax	
 10285                              <1> 	mov ax,%3
 10286                              <1> 	mov ds,ax
 10287                              <1> 	mov ax,[%4]
 10288                              <1> 	mov [bp+2],ax	
 10289                              <1> 	mov ax,%5
 10290                              <1> 	mov ds,ax
 10291                              <1> 	mov ax,[%6]
 10292                              <1> 	mov [bp+4],ax	
 10293                              <1> 	mov ax,%7
 10294                              <1> 	mov ds,ax
 10295                              <1> 	mov ax,[%8]
 10296                              <1> 	mov [bp+6],ax	
 10297                              <1> 	mov ax,%9
 10298                              <1> 	mov ds,ax
 10299                              <1> 	mov al,[%10]
 10300                              <1> 	mov [bp+8],al	
 10301                              <1> 	call proc_drawrect	
 10302                              <1> 	stkclose 0x09
 10303                              <1> %endmacro
 10304                              <1> 
 10305                              <1> %macro fillrect 10
 10306                              <1> 	stkopen 0x09	
 10307                              <1> 	mov ax,%1
 10308                              <1> 	mov ds,ax
 10309                              <1> 	mov ax,[%2]
 10310                              <1> 	mov [bp+0],ax	
 10311                              <1> 	mov ax,%3
 10312                              <1> 	mov ds,ax
 10313                              <1> 	mov ax,[%4]
 10314                              <1> 	mov [bp+2],ax	
 10315                              <1> 	mov ax,%5
 10316                              <1> 	mov ds,ax
 10317                              <1> 	mov ax,[%6]
 10318                              <1> 	mov [bp+4],ax	
 10319                              <1> 	mov ax,%7
 10320                              <1> 	mov ds,ax
 10321                              <1> 	mov ax,[%8]
 10322                              <1> 	mov [bp+6],ax	
 10323                              <1> 	mov ax,%9
 10324                              <1> 	mov ds,ax
 10325                              <1> 	mov al,[%10]
 10326                              <1> 	mov [bp+8],al	
 10327                              <1> 	call proc_fillrect	
 10328                              <1> 	stkclose 0x09
 10329                              <1> %endmacro
 10330                              <1> 
 10331                              <1> %macro drawarc 10
 10332                              <1> 	drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 0
 10333                              <1> %endmacro
 10334                              <1> 
 10335                              <1> %macro fillarc 10
 10336                              <1> 	drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 1
 10337                              <1> %endmacro
 10338                              <1> 		
 10339                              <1> %macro drawarc 11
 10340                              <1> 	stkopen 0x0A
 10341                              <1> 	mov ax,%1
 10342                              <1> 	mov ds,ax
 10343                              <1> 	mov ax,[%2]
 10344                              <1> 	mov [bp+0],ax	
 10345                              <1> 	mov ax,%3
 10346                              <1> 	mov ds,ax
 10347                              <1> 	mov ax,[%4]
 10348                              <1> 	mov [bp+2],ax	
 10349                              <1> 	mov ax,%5
 10350                              <1> 	mov ds,ax
 10351                              <1> 	mov ax,[%6]
 10352                              <1> 	mov [bp+4],ax	
 10353                              <1> 	mov ax,%7
 10354                              <1> 	mov ds,ax
 10355                              <1> 	mov ax,[%8]
 10356                              <1> 	mov [bp+6],ax	
 10357                              <1> 	mov ax,%9
 10358                              <1> 	mov ds,ax
 10359                              <1> 	mov al,[%10]
 10360                              <1> 	mov byte [bp+8],al		
 10361                              <1> 	mov byte [bp+9],%11	
 10362                              <1> 	call proc_drawarc	
 10363                              <1> 	stkclose 0x0A
 10364                              <1> %endmacro
 10365                              <1> 		
 10366                              <1> 		
 10367                              <1> %endif
 10368                                  
 10369                                  section .data
 10370 00001F89 6400                    	xc: dw 100
 10371 00001F8B 6400                    	yc: dw 100
 10372 00001F8D 3200                    	r: dw 50
 10373 00001F8F 04                      	color1: db 04h
 10374 00001F90 07                      	color2: db 07h
 10375                                  
 10376                                  section .text
 10377                                  	global _start
 10378                                  	
 10379                                  _start:		
 10380                                  	initgraph
 10381 00000000 E8(2F1A)            <1>  call proc_initgraph
 10382                                  	
 10383                                  	__setpx 100, 100, 07h
 10384                              <1>  stkopen 0x05
 10385 00000003 83EC05              <2>  sub word sp, %1
 10386 00000006 54                  <2>  push sp
 10387 00000007 5D                  <2>  pop bp
 10388 00000008 C746006400          <1>  mov word [bp+0],%1
 10389 0000000D C746026400          <1>  mov word [bp+2],%2
 10390 00000012 C6460407            <1>  mov byte [bp+4],%3
 10391 00000016 E8(761A)            <1>  call proc_setpx
 10392                              <1>  stkclose 0x05
 10393 00000019 83C405              <2>  add word sp, %1
 10394                                  	
 10395                                  	;fillarc xc, yc, r, r, color1						
 10396                                  	;drawarc xc, yc, r, r, color2	
 10397                                  	repaint
 10398 0000001C E8(551A)            <1>  call proc_repaint
 10399                                  	
 10400 0000001F EBFE                    	jmp $

     1                                  
     2                                  %include "lib/system.mac"
     3                              <1>  
     4                              <1> %ifndef SYSTEM_MAC
     5                              <1>  	%define SYSTEM_MAC
     6                              <1>  	
     7                              <1> 	%ifndef TRUE
     8                              <1> 		%define TRUE 01h
     9                              <1> 	%endif
    10                              <1> 	%ifndef FALSE
    11                              <1> 		%define FALSE 00h
    12                              <1> 	%endif
    13                              <1> 	
    14                              <1> %macro vlodsb 3
    15                              <1> 	vlodsb cs, %1, %2, %3
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro vstosb 3
    19                              <1> 	vstosb cs, %1, %2, %3
    20                              <1> %endmacro
    21                              <1> 	 	
    22                              <1> %macro int16toreg 2
    23                              <1> 	int16toreg cs, %1, %2
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro regtoint16 2
    27                              <1> 	regtoint16 %1, cs, %2
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro vstosb 4
    31                              <1> 	push %1
    32                              <1> 	pop ds
    33                              <1> 	mov si,%2
    34                              <1> 	add si,%3
    35                              <1> 	mov byte [si],%4	
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> %macro vlodsb 4
    39                              <1> 	push %1
    40                              <1> 	pop ds
    41                              <1> 	mov si,%2
    42                              <1> 	add si,%3
    43                              <1> 	mov byte %4,[si]	
    44                              <1> %endmacro 	 
    45                              <1> 
    46                              <1> %macro int16toreg 3
    47                              <1> 	push %2
    48                              <1> 	push %1
    49                              <1> 	pop ds
    50                              <1> 	pop si
    51                              <1> 	mov word %3,[si]	
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro regtoint16 3
    55                              <1> 	push %3
    56                              <1> 	push %2
    57                              <1> 	pop ds
    58                              <1> 	pop si
    59                              <1> 	mov word [si],%1	
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro mov32 2
    63                              <1> 	mov32 cs, %1, cs, %2
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro mov16 2
    67                              <1> 	mov16 cs, %1, cs, %2
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> %macro mov32 4
    71                              <1> 	mov ax,%3
    72                              <1> 	mov ds,ax
    73                              <1> 	mov cx,[%4+2]
    74                              <1> 	mov dx,[%4]
    75                              <1> 	mov ax,%1
    76                              <1> 	mov ds,ax
    77                              <1> 	mov [%2+2],cx
    78                              <1> 	mov [%2],dx
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> %macro mov16 4
    82                              <1> 	mov ax,%3
    83                              <1> 	mov ds,ax
    84                              <1> 	mov bx,[%4]
    85                              <1> 	mov ax,%1
    86                              <1> 	mov ds,ax
    87                              <1> 	mov [%2],bx
    88                              <1> %endmacro
    89                              <1>  	 	
    90                              <1> %macro mformat 4
    91                              <1> 	stkopen 8
    92                              <1> 	mov word [ bp + 0 ], %1
    93                              <1> 	mov word [ bp + 2 ], %2
    94                              <1> 	mov word [ bp + 4 ], %3
    95                              <1> 	mov word [ bp + 6 ], %4
    96                              <1> 	call kernel_segment:mformat
    97                              <1> 	stkclose 8
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> %macro malloc 6
   101                              <1> 	stkopen 0Bh
   102                              <1> 	mov word [ bp + 4 ], %3
   103                              <1> 	mov word [ bp + 6 ], %4
   104                              <1> 	mov word [ bp + 8 ], %5	
   105                              <1> 	call kernel_segment:malloc
   106                              <1> 	push sp
   107                              <1> 	pop bp
   108                              <1> 	mov word %1, [ bp ]
   109                              <1> 	mov word %2, [ bp + 2 ]
   110                              <1> 	mov byte %6, [ bp + 0x0A ]
   111                              <1> 	stkclose 0Bh
   112                              <1> %endmacro 	
   113                              <1> 
   114                              <1> %macro laddr 2
   115                              <1> 	laddr %1, %2, %1, %2
   116                              <1> %endmacro
   117                              <1> 
   118                              <1> %macro faddr 2
   119                              <1> 	faddr %1, %2, %1, %2
   120                              <1> %endmacro
   121                              <1>  	
   122                              <1> %macro laddr 4
   123                              <1> 	stkopen 8
   124                              <1> 	mov word [ bp + 4 ], %3
   125                              <1> 	mov word [ bp + 6 ], %4	
   126                              <1> 	call kernel_segment:laddr
   127                              <1> 	push sp
   128                              <1> 	pop bp
   129                              <1> 	mov word %1, [ bp + 0 ]
   130                              <1> 	mov word %2, [ bp + 2 ]	
   131                              <1> 	stkclose 8
   132                              <1> %endmacro
   133                              <1> 
   134                              <1> %macro faddr 4
   135                              <1> 	stkopen 8
   136                              <1> 	mov word [ bp + 4 ], %3
   137                              <1> 	mov word [ bp + 6 ], %4	
   138                              <1> 	call kernel_segment:faddr
   139                              <1> 	push sp
   140                              <1> 	pop bp
   141                              <1> 	mov word %1, [ bp + 0 ]
   142                              <1> 	mov word %2, [ bp + 2 ]	
   143                              <1> 	stkclose 8
   144                              <1> %endmacro	
   145                              <1>  
   146                              <1> 
   147                              <1> %macro stkopen 1		
   148                              <1> 	sub word sp, %1
   149                              <1> 	push sp
   150                              <1> 	pop bp
   151                              <1> %endmacro
   152                              <1> 
   153                              <1> %macro stkclose 1
   154                              <1> 	add word sp, %1
   155                              <1> %endmacro
   156                              <1> 
   157                              <1> %macro stkload 1-* 	
   158                              <1>  	%rep %0
   159                              <1>  	 	%rotate -1
   160                              <1>  		pop %1
   161                              <1>  	%endrep
   162                              <1>  	%rep %0
   163                              <1>  		push %1
   164                              <1>  		%rotate 1
   165                              <1>  	%endrep
   166                              <1> %endmacro
   167                              <1> 
   168                              <1> %macro stkpush 1-* 	
   169                              <1>  	%rep %0
   170                              <1>  		push %1
   171                              <1>  		%rotate 1
   172                              <1>  	%endrep 	
   173                              <1> %endmacro
   174                              <1>  
   175                              <1> %macro stkpop 1-*
   176                              <1>  	%rep %0
   177                              <1>  	 	%rotate -1
   178                              <1>  		pop %1
   179                              <1>  	%endrep 	 	
   180                              <1> %endmacro
   181                              <1> 
   182                              <1> %endif 
   183                                  %include "lib/stdio.mac"
   184                              <1> 
   185                              <1> %ifndef STDIO_MAC
   186                              <1> 	%define STDIO_MAC
   187                              <1> 	
   188                              <1> 	%include "lib/stdio.asm"
   189                              <2> 
   190                              <2> %ifndef STDIO_ASM
   191                              <2> 	%define STDIO_ASM
   192                              <2> 	
   193                              <2> 	%include "lib/system.mac"
   194                              <3>  
   195                              <3> %ifndef SYSTEM_MAC
   196                              <3>  	%define SYSTEM_MAC
   197                              <3>  	
   198                              <3> 	%ifndef TRUE
   199                              <3> 		%define TRUE 01h
   200                              <3> 	%endif
   201                              <3> 	%ifndef FALSE
   202                              <3> 		%define FALSE 00h
   203                              <3> 	%endif
   204                              <3> 	
   205                              <3> %macro vlodsb 3
   206                              <3> 	vlodsb cs, %1, %2, %3
   207                              <3> %endmacro
   208                              <3> 
   209                              <3> %macro vstosb 3
   210                              <3> 	vstosb cs, %1, %2, %3
   211                              <3> %endmacro
   212                              <3> 	 	
   213                              <3> %macro int16toreg 2
   214                              <3> 	int16toreg cs, %1, %2
   215                              <3> %endmacro
   216                              <3> 
   217                              <3> %macro regtoint16 2
   218                              <3> 	regtoint16 %1, cs, %2
   219                              <3> %endmacro
   220                              <3> 
   221                              <3> %macro vstosb 4
   222                              <3> 	push %1
   223                              <3> 	pop ds
   224                              <3> 	mov si,%2
   225                              <3> 	add si,%3
   226                              <3> 	mov byte [si],%4	
   227                              <3> %endmacro
   228                              <3> 
   229                              <3> %macro vlodsb 4
   230                              <3> 	push %1
   231                              <3> 	pop ds
   232                              <3> 	mov si,%2
   233                              <3> 	add si,%3
   234                              <3> 	mov byte %4,[si]	
   235                              <3> %endmacro 	 
   236                              <3> 
   237                              <3> %macro int16toreg 3
   238                              <3> 	push %2
   239                              <3> 	push %1
   240                              <3> 	pop ds
   241                              <3> 	pop si
   242                              <3> 	mov word %3,[si]	
   243                              <3> %endmacro
   244                              <3> 
   245                              <3> %macro regtoint16 3
   246                              <3> 	push %3
   247                              <3> 	push %2
   248                              <3> 	pop ds
   249                              <3> 	pop si
   250                              <3> 	mov word [si],%1	
   251                              <3> %endmacro
   252                              <3> 
   253                              <3> %macro mov32 2
   254                              <3> 	mov32 cs, %1, cs, %2
   255                              <3> %endmacro
   256                              <3> 
   257                              <3> %macro mov16 2
   258                              <3> 	mov16 cs, %1, cs, %2
   259                              <3> %endmacro
   260                              <3> 
   261                              <3> %macro mov32 4
   262                              <3> 	mov ax,%3
   263                              <3> 	mov ds,ax
   264                              <3> 	mov cx,[%4+2]
   265                              <3> 	mov dx,[%4]
   266                              <3> 	mov ax,%1
   267                              <3> 	mov ds,ax
   268                              <3> 	mov [%2+2],cx
   269                              <3> 	mov [%2],dx
   270                              <3> %endmacro
   271                              <3> 
   272                              <3> %macro mov16 4
   273                              <3> 	mov ax,%3
   274                              <3> 	mov ds,ax
   275                              <3> 	mov bx,[%4]
   276                              <3> 	mov ax,%1
   277                              <3> 	mov ds,ax
   278                              <3> 	mov [%2],bx
   279                              <3> %endmacro
   280                              <3>  	 	
   281                              <3> %macro mformat 4
   282                              <3> 	stkopen 8
   283                              <3> 	mov word [ bp + 0 ], %1
   284                              <3> 	mov word [ bp + 2 ], %2
   285                              <3> 	mov word [ bp + 4 ], %3
   286                              <3> 	mov word [ bp + 6 ], %4
   287                              <3> 	call kernel_segment:mformat
   288                              <3> 	stkclose 8
   289                              <3> %endmacro
   290                              <3> 
   291                              <3> %macro malloc 6
   292                              <3> 	stkopen 0Bh
   293                              <3> 	mov word [ bp + 4 ], %3
   294                              <3> 	mov word [ bp + 6 ], %4
   295                              <3> 	mov word [ bp + 8 ], %5	
   296                              <3> 	call kernel_segment:malloc
   297                              <3> 	push sp
   298                              <3> 	pop bp
   299                              <3> 	mov word %1, [ bp ]
   300                              <3> 	mov word %2, [ bp + 2 ]
   301                              <3> 	mov byte %6, [ bp + 0x0A ]
   302                              <3> 	stkclose 0Bh
   303                              <3> %endmacro 	
   304                              <3> 
   305                              <3> %macro laddr 2
   306                              <3> 	laddr %1, %2, %1, %2
   307                              <3> %endmacro
   308                              <3> 
   309                              <3> %macro faddr 2
   310                              <3> 	faddr %1, %2, %1, %2
   311                              <3> %endmacro
   312                              <3>  	
   313                              <3> %macro laddr 4
   314                              <3> 	stkopen 8
   315                              <3> 	mov word [ bp + 4 ], %3
   316                              <3> 	mov word [ bp + 6 ], %4	
   317                              <3> 	call kernel_segment:laddr
   318                              <3> 	push sp
   319                              <3> 	pop bp
   320                              <3> 	mov word %1, [ bp + 0 ]
   321                              <3> 	mov word %2, [ bp + 2 ]	
   322                              <3> 	stkclose 8
   323                              <3> %endmacro
   324                              <3> 
   325                              <3> %macro faddr 4
   326                              <3> 	stkopen 8
   327                              <3> 	mov word [ bp + 4 ], %3
   328                              <3> 	mov word [ bp + 6 ], %4	
   329                              <3> 	call kernel_segment:faddr
   330                              <3> 	push sp
   331                              <3> 	pop bp
   332                              <3> 	mov word %1, [ bp + 0 ]
   333                              <3> 	mov word %2, [ bp + 2 ]	
   334                              <3> 	stkclose 8
   335                              <3> %endmacro	
   336                              <3>  
   337                              <3> 
   338                              <3> %macro stkopen 1		
   339                              <3> 	sub word sp, %1
   340                              <3> 	push sp
   341                              <3> 	pop bp
   342                              <3> %endmacro
   343                              <3> 
   344                              <3> %macro stkclose 1
   345                              <3> 	add word sp, %1
   346                              <3> %endmacro
   347                              <3> 
   348                              <3> %macro stkload 1-* 	
   349                              <3>  	%rep %0
   350                              <3>  	 	%rotate -1
   351                              <3>  		pop %1
   352                              <3>  	%endrep
   353                              <3>  	%rep %0
   354                              <3>  		push %1
   355                              <3>  		%rotate 1
   356                              <3>  	%endrep
   357                              <3> %endmacro
   358                              <3> 
   359                              <3> %macro stkpush 1-* 	
   360                              <3>  	%rep %0
   361                              <3>  		push %1
   362                              <3>  		%rotate 1
   363                              <3>  	%endrep 	
   364                              <3> %endmacro
   365                              <3>  
   366                              <3> %macro stkpop 1-*
   367                              <3>  	%rep %0
   368                              <3>  	 	%rotate -1
   369                              <3>  		pop %1
   370                              <3>  	%endrep 	 	
   371                              <3> %endmacro
   372                              <3> 
   373                              <3> %endif 
   374                              <2> 	
   375                              <2> %macro __prtch 1	
   376                              <2> 	stkopen 1	
   377                              <2> 	mov byte [ bp ], %1
   378                              <2> 	call proc_prtch
   379                              <2> 	stkclose 1
   380                              <2> %endmacro
   381                              <2> 
   382                              <2> %macro __prtln 0
   383                              <2> 	call proc_prtln
   384                              <2> %endmacro	
   385                              <2> 
   386                              <2> %macro __prtsubbin8 3
   387                              <2> 	stkopen 3
   388                              <2> 	mov byte [bp+0],%1
   389                              <2> 	mov byte [bp+1],%2
   390                              <2> 	mov byte [bp+2],%3
   391                              <2> 	call proc_prtsubbin8
   392                              <2> 	stkclose 3
   393                              <2> %endmacro
   394                              <2> 	
   395                              <2> section .data
   396                              <2> 	
   397                              <2> proc_prtIEEE754:
   398 00000000 89E0                <2> 	mov ax,sp
   399 00000002 89C5                <2> 	mov bp,ax			
   400 00000004 8B4602              <2> 	mov ax,[bp+2]	
   401 00000007 50                  <2> 	push ax
   402 00000008 50                  <2> 	push ax
   403 00000009 50                  <2> 	push ax
   404 0000000A 50                  <2> 	push ax	
   405 0000000B 50                  <2> 	push ax
   406                              <2> 	
   407                              <2> 	__prtsubbin8 ah,0,1
   408                              <3>  stkopen 3
   409 0000000C 83EC03              <4>  sub word sp, %1
   410 0000000F 54                  <4>  push sp
   411 00000010 5D                  <4>  pop bp
   412 00000011 886600              <3>  mov byte [bp+0],%1
   413 00000014 C6460100            <3>  mov byte [bp+1],%2
   414 00000018 C6460201            <3>  mov byte [bp+2],%3
   415 0000001C E87201              <3>  call proc_prtsubbin8
   416                              <3>  stkclose 3
   417 0000001F 83C403              <4>  add word sp, %1
   418                              <2> 	__prtch 20h
   419                              <3>  stkopen 1
   420 00000022 83EC01              <4>  sub word sp, %1
   421 00000025 54                  <4>  push sp
   422 00000026 5D                  <4>  pop bp
   423 00000027 C6460020            <3>  mov byte [ bp ], %1
   424 0000002B E82004              <3>  call proc_prtch
   425                              <3>  stkclose 1
   426 0000002E 83C401              <4>  add word sp, %1
   427                              <2> 	__prtch 20h
   428                              <3>  stkopen 1
   429 00000031 83EC01              <4>  sub word sp, %1
   430 00000034 54                  <4>  push sp
   431 00000035 5D                  <4>  pop bp
   432 00000036 C6460020            <3>  mov byte [ bp ], %1
   433 0000003A E81104              <3>  call proc_prtch
   434                              <3>  stkclose 1
   435 0000003D 83C401              <4>  add word sp, %1
   436 00000040 58                  <2> 	pop ax
   437                              <2> 	__prtsubbin8 ah,1,5
   438                              <3>  stkopen 3
   439 00000041 83EC03              <4>  sub word sp, %1
   440 00000044 54                  <4>  push sp
   441 00000045 5D                  <4>  pop bp
   442 00000046 886600              <3>  mov byte [bp+0],%1
   443 00000049 C6460101            <3>  mov byte [bp+1],%2
   444 0000004D C6460205            <3>  mov byte [bp+2],%3
   445 00000051 E83D01              <3>  call proc_prtsubbin8
   446                              <3>  stkclose 3
   447 00000054 83C403              <4>  add word sp, %1
   448 00000057 58                  <2> 	pop ax
   449                              <2> 	__prtsubbin8 ah,5,8
   450                              <3>  stkopen 3
   451 00000058 83EC03              <4>  sub word sp, %1
   452 0000005B 54                  <4>  push sp
   453 0000005C 5D                  <4>  pop bp
   454 0000005D 886600              <3>  mov byte [bp+0],%1
   455 00000060 C6460105            <3>  mov byte [bp+1],%2
   456 00000064 C6460208            <3>  mov byte [bp+2],%3
   457 00000068 E82601              <3>  call proc_prtsubbin8
   458                              <3>  stkclose 3
   459 0000006B 83C403              <4>  add word sp, %1
   460                              <2> 	
   461 0000006E 58                  <2> 	pop ax
   462                              <2> 	__prtsubbin8 al,0,1
   463                              <3>  stkopen 3
   464 0000006F 83EC03              <4>  sub word sp, %1
   465 00000072 54                  <4>  push sp
   466 00000073 5D                  <4>  pop bp
   467 00000074 884600              <3>  mov byte [bp+0],%1
   468 00000077 C6460100            <3>  mov byte [bp+1],%2
   469 0000007B C6460201            <3>  mov byte [bp+2],%3
   470 0000007F E80F01              <3>  call proc_prtsubbin8
   471                              <3>  stkclose 3
   472 00000082 83C403              <4>  add word sp, %1
   473                              <2> 	__prtch 20h
   474                              <3>  stkopen 1
   475 00000085 83EC01              <4>  sub word sp, %1
   476 00000088 54                  <4>  push sp
   477 00000089 5D                  <4>  pop bp
   478 0000008A C6460020            <3>  mov byte [ bp ], %1
   479 0000008E E8BD03              <3>  call proc_prtch
   480                              <3>  stkclose 1
   481 00000091 83C401              <4>  add word sp, %1
   482                              <2> 	__prtch 20h
   483                              <3>  stkopen 1
   484 00000094 83EC01              <4>  sub word sp, %1
   485 00000097 54                  <4>  push sp
   486 00000098 5D                  <4>  pop bp
   487 00000099 C6460020            <3>  mov byte [ bp ], %1
   488 0000009D E8AE03              <3>  call proc_prtch
   489                              <3>  stkclose 1
   490 000000A0 83C401              <4>  add word sp, %1
   491 000000A3 58                  <2> 	pop ax
   492                              <2> 	__prtsubbin8 al,1,4
   493                              <3>  stkopen 3
   494 000000A4 83EC03              <4>  sub word sp, %1
   495 000000A7 54                  <4>  push sp
   496 000000A8 5D                  <4>  pop bp
   497 000000A9 884600              <3>  mov byte [bp+0],%1
   498 000000AC C6460101            <3>  mov byte [bp+1],%2
   499 000000B0 C6460204            <3>  mov byte [bp+2],%3
   500 000000B4 E8DA00              <3>  call proc_prtsubbin8
   501                              <3>  stkclose 3
   502 000000B7 83C403              <4>  add word sp, %1
   503                              <2> 	__prtch 20h
   504                              <3>  stkopen 1
   505 000000BA 83EC01              <4>  sub word sp, %1
   506 000000BD 54                  <4>  push sp
   507 000000BE 5D                  <4>  pop bp
   508 000000BF C6460020            <3>  mov byte [ bp ], %1
   509 000000C3 E88803              <3>  call proc_prtch
   510                              <3>  stkclose 1
   511 000000C6 83C401              <4>  add word sp, %1
   512 000000C9 58                  <2> 	pop ax
   513                              <2> 	__prtsubbin8 al,4,8
   514                              <3>  stkopen 3
   515 000000CA 83EC03              <4>  sub word sp, %1
   516 000000CD 54                  <4>  push sp
   517 000000CE 5D                  <4>  pop bp
   518 000000CF 884600              <3>  mov byte [bp+0],%1
   519 000000D2 C6460104            <3>  mov byte [bp+1],%2
   520 000000D6 C6460208            <3>  mov byte [bp+2],%3
   521 000000DA E8B400              <3>  call proc_prtsubbin8
   522                              <3>  stkclose 3
   523 000000DD 83C403              <4>  add word sp, %1
   524                              <2> 	__prtch 20h
   525                              <3>  stkopen 1
   526 000000E0 83EC01              <4>  sub word sp, %1
   527 000000E3 54                  <4>  push sp
   528 000000E4 5D                  <4>  pop bp
   529 000000E5 C6460020            <3>  mov byte [ bp ], %1
   530 000000E9 E86203              <3>  call proc_prtch
   531                              <3>  stkclose 1
   532 000000EC 83C401              <4>  add word sp, %1
   533                              <2> 	
   534 000000EF 89E0                <2> 	mov ax,sp
   535 000000F1 89C5                <2> 	mov bp,ax			
   536 000000F3 8B4604              <2> 	mov ax,[bp+4]
   537 000000F6 50                  <2> 	push ax
   538 000000F7 50                  <2> 	push ax
   539 000000F8 50                  <2> 	push ax
   540                              <2> 	
   541                              <2> 	__prtsubbin8 ah,0,4
   542                              <3>  stkopen 3
   543 000000F9 83EC03              <4>  sub word sp, %1
   544 000000FC 54                  <4>  push sp
   545 000000FD 5D                  <4>  pop bp
   546 000000FE 886600              <3>  mov byte [bp+0],%1
   547 00000101 C6460100            <3>  mov byte [bp+1],%2
   548 00000105 C6460204            <3>  mov byte [bp+2],%3
   549 00000109 E88500              <3>  call proc_prtsubbin8
   550                              <3>  stkclose 3
   551 0000010C 83C403              <4>  add word sp, %1
   552                              <2> 	__prtch 20h
   553                              <3>  stkopen 1
   554 0000010F 83EC01              <4>  sub word sp, %1
   555 00000112 54                  <4>  push sp
   556 00000113 5D                  <4>  pop bp
   557 00000114 C6460020            <3>  mov byte [ bp ], %1
   558 00000118 E83303              <3>  call proc_prtch
   559                              <3>  stkclose 1
   560 0000011B 83C401              <4>  add word sp, %1
   561 0000011E 58                  <2> 	pop ax
   562                              <2> 	__prtsubbin8 ah,4,8
   563                              <3>  stkopen 3
   564 0000011F 83EC03              <4>  sub word sp, %1
   565 00000122 54                  <4>  push sp
   566 00000123 5D                  <4>  pop bp
   567 00000124 886600              <3>  mov byte [bp+0],%1
   568 00000127 C6460104            <3>  mov byte [bp+1],%2
   569 0000012B C6460208            <3>  mov byte [bp+2],%3
   570 0000012F E85F00              <3>  call proc_prtsubbin8
   571                              <3>  stkclose 3
   572 00000132 83C403              <4>  add word sp, %1
   573                              <2> 	__prtch 20h
   574                              <3>  stkopen 1
   575 00000135 83EC01              <4>  sub word sp, %1
   576 00000138 54                  <4>  push sp
   577 00000139 5D                  <4>  pop bp
   578 0000013A C6460020            <3>  mov byte [ bp ], %1
   579 0000013E E80D03              <3>  call proc_prtch
   580                              <3>  stkclose 1
   581 00000141 83C401              <4>  add word sp, %1
   582                              <2> 	
   583 00000144 58                  <2> 	pop ax
   584                              <2> 	__prtsubbin8 al,0,4
   585                              <3>  stkopen 3
   586 00000145 83EC03              <4>  sub word sp, %1
   587 00000148 54                  <4>  push sp
   588 00000149 5D                  <4>  pop bp
   589 0000014A 884600              <3>  mov byte [bp+0],%1
   590 0000014D C6460100            <3>  mov byte [bp+1],%2
   591 00000151 C6460204            <3>  mov byte [bp+2],%3
   592 00000155 E83900              <3>  call proc_prtsubbin8
   593                              <3>  stkclose 3
   594 00000158 83C403              <4>  add word sp, %1
   595                              <2> 	__prtch 20h
   596                              <3>  stkopen 1
   597 0000015B 83EC01              <4>  sub word sp, %1
   598 0000015E 54                  <4>  push sp
   599 0000015F 5D                  <4>  pop bp
   600 00000160 C6460020            <3>  mov byte [ bp ], %1
   601 00000164 E8E702              <3>  call proc_prtch
   602                              <3>  stkclose 1
   603 00000167 83C401              <4>  add word sp, %1
   604 0000016A 58                  <2> 	pop ax
   605                              <2> 	__prtsubbin8 al,4,8
   606                              <3>  stkopen 3
   607 0000016B 83EC03              <4>  sub word sp, %1
   608 0000016E 54                  <4>  push sp
   609 0000016F 5D                  <4>  pop bp
   610 00000170 884600              <3>  mov byte [bp+0],%1
   611 00000173 C6460104            <3>  mov byte [bp+1],%2
   612 00000177 C6460208            <3>  mov byte [bp+2],%3
   613 0000017B E81300              <3>  call proc_prtsubbin8
   614                              <3>  stkclose 3
   615 0000017E 83C403              <4>  add word sp, %1
   616                              <2> 	__prtch 20h
   617                              <3>  stkopen 1
   618 00000181 83EC01              <4>  sub word sp, %1
   619 00000184 54                  <4>  push sp
   620 00000185 5D                  <4>  pop bp
   621 00000186 C6460020            <3>  mov byte [ bp ], %1
   622 0000018A E8C102              <3>  call proc_prtch
   623                              <3>  stkclose 1
   624 0000018D 83C401              <4>  add word sp, %1
   625                              <2> 	
   626 00000190 C3                  <2> 	ret
   627                              <2> 	
   628                              <2> proc_prtsubbin8:
   629 00000191 89E0                <2> 	mov ax,sp
   630 00000193 89C5                <2> 	mov bp,ax
   631                              <2> 	
   632 00000195 8A4602              <2> 	mov al,[bp+2]
   633 00000198 50                  <2> 	push ax
   634                              <2> 	
   635 00000199 8A4E03              <2> 	mov cl,[bp+3]
   636 0000019C 8A6E04              <2> 	mov ch,[bp+4]
   637 0000019F 80FD08              <2> 	cmp ch,8
   638 000001A2 7602                <2> 	jbe .l1	
   639 000001A4 B508                <2> 		mov ch,8
   640                              <2> 	.l1:		
   641 000001A6 38E9                <2> 		cmp cl,ch		
   642 000001A8 731D                <2> 		jae .l2
   643                              <2> 		
   644 000001AA 58                  <2> 		pop ax
   645 000001AB 50                  <2> 		push ax
   646 000001AC D2E0                <2> 		shl al,cl
   647 000001AE C0E807              <2> 		shr al,7		
   648 000001B1 0430                <2> 		add al,30h
   649                              <2> 		
   650 000001B3 51                  <2> 		push cx
   651                              <2> 		__prtch al
   652                              <3>  stkopen 1
   653 000001B4 83EC01              <4>  sub word sp, %1
   654 000001B7 54                  <4>  push sp
   655 000001B8 5D                  <4>  pop bp
   656 000001B9 884600              <3>  mov byte [ bp ], %1
   657 000001BC E88F02              <3>  call proc_prtch
   658                              <3>  stkclose 1
   659 000001BF 83C401              <4>  add word sp, %1
   660 000001C2 59                  <2> 		pop cx
   661                              <2> 		
   662 000001C3 FEC1                <2> 		inc cl
   663 000001C5 EBDF                <2> 		jmp .l1
   664                              <2> 	.l2:	
   665 000001C7 58                  <2> 	pop ax
   666                              <2> 	
   667 000001C8 C3                  <2> 	ret
   668                              <2> 	
   669                              <2> proc_prtbin16:
   670 000001C9 89E0                <2> 	mov ax,sp
   671 000001CB 89C5                <2> 	mov bp,ax
   672                              <2> 		
   673 000001CD 8A7E04              <2> 	mov bh, [bp+4]
   674 000001D0 B300                <2> 	mov bl,0
   675 000001D2 B201                <2> 	mov dl,TRUE
   676 000001D4 30ED                <2> 	xor ch,ch
   677 000001D6 B102                <2> 	mov cl,2
   678                              <2> 	.l1:
   679 000001D8 80F900              <2> 		cmp cl,0
   680 000001DB 744B                <2> 		jz .l2		
   681                              <2> 		
   682 000001DD 55                  <2> 		push bp
   683 000001DE 01CD                <2> 		add bp,cx
   684 000001E0 45                  <2> 		inc bp
   685                              <2> 		
   686 000001E1 0A5E00              <2> 		or byte bl, [bp]
   687 000001E4 08FB                <2> 		or byte bl, bh
   688 000001E6 743B                <2> 		jz .prted											
   689 000001E8 53                  <2> 			push bx
   690 000001E9 51                  <2> 			push cx	
   691 000001EA 80FA01              <2> 			cmp dl, TRUE
   692 000001ED 7402                <2> 			je .first
   693 000001EF EB10                <2> 			jmp .nfirst
   694                              <2> 			.first:
   695 000001F1 B200                <2> 				mov dl, FALSE
   696 000001F3 52                  <2> 				push dx
   697                              <2> 				
   698 000001F4 88FC                <2> 				mov ah, bh
   699 000001F6 8A4600              <2> 				mov byte al, [bp]
   700 000001F9 50                  <2> 				push ax
   701 000001FA E84000              <2> 				call proc_prtbin8
   702 000001FD 58                  <2> 				pop ax
   703                              <2> 							
   704 000001FE 5A                  <2> 				pop dx
   705 000001FF EB0C                <2> 				jmp .endfirst
   706                              <2> 			.nfirst:
   707 00000201 52                  <2> 				push dx
   708                              <2> 				
   709 00000202 B401                <2> 				mov ah, TRUE
   710 00000204 8A4600              <2> 				mov byte al, [bp]
   711 00000207 50                  <2> 				push ax
   712 00000208 E83200              <2> 				call proc_prtbin8
   713 0000020B 58                  <2> 				pop ax
   714                              <2> 								
   715 0000020C 5A                  <2> 				pop dx
   716                              <2> 			.endfirst:	
   717 0000020D 59                  <2> 			pop cx
   718 0000020E 5B                  <2> 			pop bx		
   719                              <2> 			
   720 0000020F 80F901              <2> 			cmp cl,1
   721 00000212 760F                <2> 			jbe .spaceprted
   722                              <2> 				__prtch 20h
   723                              <3>  stkopen 1
   724 00000214 83EC01              <4>  sub word sp, %1
   725 00000217 54                  <4>  push sp
   726 00000218 5D                  <4>  pop bp
   727 00000219 C6460020            <3>  mov byte [ bp ], %1
   728 0000021D E82E02              <3>  call proc_prtch
   729                              <3>  stkclose 1
   730 00000220 83C401              <4>  add word sp, %1
   731                              <2> 			.spaceprted:
   732                              <2> 		.prted:
   733                              <2> 		
   734 00000223 5D                  <2> 		pop bp
   735                              <2> 		
   736 00000224 FEC9                <2> 		dec cl
   737 00000226 EBB0                <2> 		jmp .l1
   738                              <2> 	.l2:
   739                              <2> 	
   740 00000228 80FB00              <2> 	cmp bl,0
   741 0000022B 750F                <2> 	jnz .end
   742                              <2> 		__prtch 30h
   743                              <3>  stkopen 1
   744 0000022D 83EC01              <4>  sub word sp, %1
   745 00000230 54                  <4>  push sp
   746 00000231 5D                  <4>  pop bp
   747 00000232 C6460030            <3>  mov byte [ bp ], %1
   748 00000236 E81502              <3>  call proc_prtch
   749                              <3>  stkclose 1
   750 00000239 83C401              <4>  add word sp, %1
   751                              <2> 	.end:
   752                              <2> 	
   753 0000023C C3                  <2> 	ret	
   754                              <2> 	
   755                              <2> proc_prtbin8:
   756 0000023D 89E0                <2> 	mov ax,sp
   757 0000023F 89C5                <2> 	mov bp,ax
   758 00000241 8A4602              <2> 	mov byte al, [bp+2]
   759 00000244 3C00                <2> 	cmp al, 0
   760 00000246 0F858700            <2> 	jnz .nzero
   761                              <2> 		__prtch 30h
   762                              <3>  stkopen 1
   763 0000024A 83EC01              <4>  sub word sp, %1
   764 0000024D 54                  <4>  push sp
   765 0000024E 5D                  <4>  pop bp
   766 0000024F C6460030            <3>  mov byte [ bp ], %1
   767 00000253 E8F801              <3>  call proc_prtch
   768                              <3>  stkclose 1
   769 00000256 83C401              <4>  add word sp, %1
   770                              <2> 		
   771 00000259 89E0                <2> 		mov ax,sp
   772 0000025B 89C5                <2> 		mov bp,ax
   773 0000025D 8A4603              <2> 		mov byte al, [bp+3]		
   774 00000260 3C00                <2> 		cmp al, FALSE
   775 00000262 0F84C500            <2> 		je .end
   776                              <2> 			__prtch 30h
   777                              <3>  stkopen 1
   778 00000266 83EC01              <4>  sub word sp, %1
   779 00000269 54                  <4>  push sp
   780 0000026A 5D                  <4>  pop bp
   781 0000026B C6460030            <3>  mov byte [ bp ], %1
   782 0000026F E8DC01              <3>  call proc_prtch
   783                              <3>  stkclose 1
   784 00000272 83C401              <4>  add word sp, %1
   785                              <2> 			__prtch 30h
   786                              <3>  stkopen 1
   787 00000275 83EC01              <4>  sub word sp, %1
   788 00000278 54                  <4>  push sp
   789 00000279 5D                  <4>  pop bp
   790 0000027A C6460030            <3>  mov byte [ bp ], %1
   791 0000027E E8CD01              <3>  call proc_prtch
   792                              <3>  stkclose 1
   793 00000281 83C401              <4>  add word sp, %1
   794                              <2> 			__prtch 30h
   795                              <3>  stkopen 1
   796 00000284 83EC01              <4>  sub word sp, %1
   797 00000287 54                  <4>  push sp
   798 00000288 5D                  <4>  pop bp
   799 00000289 C6460030            <3>  mov byte [ bp ], %1
   800 0000028D E8BE01              <3>  call proc_prtch
   801                              <3>  stkclose 1
   802 00000290 83C401              <4>  add word sp, %1
   803                              <2> 			__prtch 30h
   804                              <3>  stkopen 1
   805 00000293 83EC01              <4>  sub word sp, %1
   806 00000296 54                  <4>  push sp
   807 00000297 5D                  <4>  pop bp
   808 00000298 C6460030            <3>  mov byte [ bp ], %1
   809 0000029C E8AF01              <3>  call proc_prtch
   810                              <3>  stkclose 1
   811 0000029F 83C401              <4>  add word sp, %1
   812                              <2> 			__prtch 30h
   813                              <3>  stkopen 1
   814 000002A2 83EC01              <4>  sub word sp, %1
   815 000002A5 54                  <4>  push sp
   816 000002A6 5D                  <4>  pop bp
   817 000002A7 C6460030            <3>  mov byte [ bp ], %1
   818 000002AB E8A001              <3>  call proc_prtch
   819                              <3>  stkclose 1
   820 000002AE 83C401              <4>  add word sp, %1
   821                              <2> 			__prtch 30h
   822                              <3>  stkopen 1
   823 000002B1 83EC01              <4>  sub word sp, %1
   824 000002B4 54                  <4>  push sp
   825 000002B5 5D                  <4>  pop bp
   826 000002B6 C6460030            <3>  mov byte [ bp ], %1
   827 000002BA E89101              <3>  call proc_prtch
   828                              <3>  stkclose 1
   829 000002BD 83C401              <4>  add word sp, %1
   830                              <2> 			__prtch 30h
   831                              <3>  stkopen 1
   832 000002C0 83EC01              <4>  sub word sp, %1
   833 000002C3 54                  <4>  push sp
   834 000002C4 5D                  <4>  pop bp
   835 000002C5 C6460030            <3>  mov byte [ bp ], %1
   836 000002C9 E88201              <3>  call proc_prtch
   837                              <3>  stkclose 1
   838 000002CC 83C401              <4>  add word sp, %1
   839 000002CF EB5A                <2> 			jmp .end		
   840                              <2> 	.nzero:
   841                              <2> 
   842 000002D1 B000                <2> 	mov byte al, FALSE
   843 000002D3 50                  <2> 	push ax
   844                              <2> 
   845 000002D4 89E0                <2> 	mov ax,sp
   846 000002D6 89C5                <2> 	mov bp,ax
   847 000002D8 8A5E04              <2> 	mov byte bl, [bp+4]
   848 000002DB B100                <2> 	mov cl,0
   849                              <2> 	.l1:
   850 000002DD 80F908              <2> 		cmp cl,8
   851 000002E0 7348                <2> 		jae .l2
   852                              <2> 		
   853 000002E2 88C8                <2> 		mov al,cl
   854                              <2> 		
   855 000002E4 88DA                <2> 		mov dl, bl		
   856                              <2> 		
   857                              <2> 		.l1.1:
   858 000002E6 3C00                <2> 			cmp al,0
   859 000002E8 7406                <2> 			jz .l1.2
   860                              <2> 							
   861 000002EA D0E2                <2> 			shl dl,1
   862                              <2> 			
   863 000002EC FEC8                <2> 			dec al
   864 000002EE EBF6                <2> 			jmp .l1.1
   865                              <2> 		.l1.2:
   866                              <2> 						
   867 000002F0 C0EA07              <2> 		shr dl,7
   868                              <2> 		
   869 000002F3 89E0                <2> 		mov ax,sp
   870 000002F5 89C5                <2> 		mov bp,ax			
   871 000002F7 8A4605              <2> 		mov byte al, [bp+5]
   872 000002FA 3C01                <2> 		cmp al, TRUE
   873 000002FC 7413                <2> 		je .endzero		
   874 000002FE 80FA00              <2> 			cmp dl,0
   875 00000301 7402                <2> 			jz .zero
   876 00000303 EB08                <2> 			jmp .notzero
   877                              <2> 			.zero:
   878 00000305 58                  <2> 				pop ax
   879 00000306 50                  <2> 				push ax
   880 00000307 3C01                <2> 				cmp al, TRUE				
   881 00000309 7406                <2> 				je .endzero
   882 0000030B EB19                <2> 				jmp .inc
   883                              <2> 			.notzero:
   884 0000030D 58                  <2> 				pop ax
   885 0000030E B001                <2> 				mov al, TRUE	
   886 00000310 50                  <2> 				push ax				
   887                              <2> 		.endzero:
   888                              <2> 									
   889 00000311 80C230              <2> 		add dl,30h
   890                              <2> 
   891 00000314 51                  <2> 		push cx
   892 00000315 52                  <2> 		push dx
   893                              <2> 		__prtch dl
   894                              <3>  stkopen 1
   895 00000316 83EC01              <4>  sub word sp, %1
   896 00000319 54                  <4>  push sp
   897 0000031A 5D                  <4>  pop bp
   898 0000031B 885600              <3>  mov byte [ bp ], %1
   899 0000031E E82D01              <3>  call proc_prtch
   900                              <3>  stkclose 1
   901 00000321 83C401              <4>  add word sp, %1
   902 00000324 5A                  <2> 		pop dx
   903 00000325 59                  <2> 		pop cx	
   904                              <2> 
   905                              <2> 		.inc:
   906                              <2> 	
   907 00000326 FEC1                <2> 		inc cl
   908 00000328 EBB3                <2> 		jmp .l1	
   909                              <2> 	.l2:
   910                              <2> 	
   911 0000032A 58                  <2> 	pop ax
   912                              <2> 	
   913                              <2> 	.end:
   914                              <2> 	
   915 0000032B C3                  <2> 	ret	
   916                              <2> 
   917                              <2> proc_prthex16:
   918 0000032C 89E0                <2> 	mov ax,sp
   919 0000032E 89C5                <2> 	mov bp,ax
   920                              <2> 
   921 00000330 8A7E04              <2> 	mov byte bh, [bp+4]		
   922 00000333 B300                <2> 	mov bl,0	
   923 00000335 B201                <2> 	mov dl,TRUE
   924 00000337 30ED                <2> 	xor ch,ch
   925 00000339 B102                <2> 	mov cl, 2	
   926                              <2> 	.l1:			
   927 0000033B 80F900              <2> 		cmp cl,0
   928 0000033E 7437                <2> 		jz .l2
   929                              <2> 							
   930 00000340 55                  <2> 		push bp		
   931 00000341 01CD                <2> 		add bp,cx
   932 00000343 45                  <2> 		inc bp		
   933                              <2> 		
   934 00000344 0A5E00              <2> 		or byte bl, [bp]
   935 00000347 08FB                <2> 		or byte bl, bh
   936 00000349 7427                <2> 		jz .prted							
   937 0000034B 53                  <2> 			push bx
   938 0000034C 51                  <2> 			push cx	
   939 0000034D 80FA01              <2> 			cmp dl, TRUE
   940 00000350 7402                <2> 			je .first
   941 00000352 EB10                <2> 			jmp .nfirst
   942                              <2> 			.first:
   943 00000354 B200                <2> 				mov dl, FALSE
   944 00000356 52                  <2> 				push dx
   945                              <2> 				
   946 00000357 88FC                <2> 				mov ah, bh
   947 00000359 8A4600              <2> 				mov byte al, [bp]
   948 0000035C 50                  <2> 				push ax
   949 0000035D E82C00              <2> 				call proc_prthex8
   950 00000360 58                  <2> 				pop ax
   951                              <2> 							
   952 00000361 5A                  <2> 				pop dx
   953 00000362 EB0C                <2> 				jmp .endfirst
   954                              <2> 			.nfirst:
   955 00000364 52                  <2> 				push dx
   956                              <2> 				
   957 00000365 B401                <2> 				mov ah, TRUE
   958 00000367 8A4600              <2> 				mov byte al, [bp]
   959 0000036A 50                  <2> 				push ax
   960 0000036B E81E00              <2> 				call proc_prthex8
   961 0000036E 58                  <2> 				pop ax
   962                              <2> 								
   963 0000036F 5A                  <2> 				pop dx
   964                              <2> 			.endfirst:	
   965 00000370 59                  <2> 			pop cx
   966 00000371 5B                  <2> 			pop bx		
   967                              <2> 		.prted:
   968                              <2> 		
   969 00000372 5D                  <2> 		pop bp
   970                              <2> 	
   971 00000373 FEC9                <2> 		dec cl
   972 00000375 EBC4                <2> 		jmp .l1		
   973                              <2> 	.l2:
   974                              <2> 	
   975 00000377 80FB00              <2> 	cmp bl,0
   976 0000037A 750F                <2> 	jnz .end
   977                              <2> 		__prtch 30h
   978                              <3>  stkopen 1
   979 0000037C 83EC01              <4>  sub word sp, %1
   980 0000037F 54                  <4>  push sp
   981 00000380 5D                  <4>  pop bp
   982 00000381 C6460030            <3>  mov byte [ bp ], %1
   983 00000385 E8C600              <3>  call proc_prtch
   984                              <3>  stkclose 1
   985 00000388 83C401              <4>  add word sp, %1
   986                              <2> 	.end:
   987                              <2> 	
   988 0000038B C3                  <2> 	ret
   989                              <2> 	
   990                              <2> proc_prthex8:
   991 0000038C 89E0                <2> 	mov ax,sp
   992 0000038E 89C5                <2> 	mov bp,ax
   993 00000390 8A4602              <2> 	mov byte al, [bp+2]
   994 00000393 3C00                <2> 	cmp al, 0
   995 00000395 752B                <2> 	jnz .nzero
   996                              <2> 		__prtch 30h
   997                              <3>  stkopen 1
   998 00000397 83EC01              <4>  sub word sp, %1
   999 0000039A 54                  <4>  push sp
  1000 0000039B 5D                  <4>  pop bp
  1001 0000039C C6460030            <3>  mov byte [ bp ], %1
  1002 000003A0 E8AB00              <3>  call proc_prtch
  1003                              <3>  stkclose 1
  1004 000003A3 83C401              <4>  add word sp, %1
  1005                              <2> 		
  1006 000003A6 89E0                <2> 		mov ax,sp
  1007 000003A8 89C5                <2> 		mov bp,ax
  1008 000003AA 8A4603              <2> 		mov byte al, [bp+3]		
  1009 000003AD 3C00                <2> 		cmp al, FALSE
  1010 000003AF 7476                <2> 		je .end
  1011                              <2> 			__prtch 30h
  1012                              <3>  stkopen 1
  1013 000003B1 83EC01              <4>  sub word sp, %1
  1014 000003B4 54                  <4>  push sp
  1015 000003B5 5D                  <4>  pop bp
  1016 000003B6 C6460030            <3>  mov byte [ bp ], %1
  1017 000003BA E89100              <3>  call proc_prtch
  1018                              <3>  stkclose 1
  1019 000003BD 83C401              <4>  add word sp, %1
  1020 000003C0 EB65                <2> 			jmp .end		
  1021                              <2> 	.nzero:
  1022                              <2> 
  1023 000003C2 B000                <2> 	mov byte al, FALSE
  1024 000003C4 50                  <2> 	push ax
  1025                              <2> 
  1026 000003C5 89E0                <2> 	mov ax,sp
  1027 000003C7 89C5                <2> 	mov bp,ax
  1028 000003C9 8A5E04              <2> 	mov byte bl, [bp+4]
  1029 000003CC B102                <2> 	mov cl,2
  1030                              <2> 	.l1:
  1031 000003CE 80F900              <2> 		cmp cl,0
  1032 000003D1 7453                <2> 		jz .l2
  1033                              <2> 		
  1034 000003D3 B002                <2> 		mov al,2
  1035 000003D5 28C8                <2> 		sub al,cl
  1036                              <2> 		
  1037 000003D7 88DA                <2> 		mov dl, bl	
  1038                              <2> 		
  1039                              <2> 		.l1.1:
  1040 000003D9 3C00                <2> 			cmp al,0
  1041 000003DB 7407                <2> 			jz .l1.2
  1042                              <2> 							
  1043 000003DD C0E204              <2> 			shl dl,4
  1044                              <2> 			
  1045 000003E0 FEC8                <2> 			dec al
  1046 000003E2 EBF5                <2> 			jmp .l1.1
  1047                              <2> 		.l1.2:
  1048                              <2> 						
  1049 000003E4 C0EA04              <2> 		shr dl,4
  1050                              <2> 
  1051 000003E7 89E0                <2> 		mov ax,sp
  1052 000003E9 89C5                <2> 		mov bp,ax			
  1053 000003EB 8A4605              <2> 		mov byte al, [bp+5]
  1054 000003EE 3C01                <2> 		cmp al, TRUE
  1055 000003F0 7413                <2> 		je .endzero		
  1056 000003F2 80FA00              <2> 			cmp dl,0
  1057 000003F5 7402                <2> 			jz .zero
  1058 000003F7 EB08                <2> 			jmp .notzero
  1059                              <2> 			.zero:
  1060 000003F9 58                  <2> 				pop ax
  1061 000003FA 50                  <2> 				push ax
  1062 000003FB 3C01                <2> 				cmp al, TRUE				
  1063 000003FD 7406                <2> 				je .endzero
  1064 000003FF EB21                <2> 				jmp .dec
  1065                              <2> 			.notzero:
  1066 00000401 58                  <2> 				pop ax
  1067 00000402 B001                <2> 				mov al, TRUE	
  1068 00000404 50                  <2> 				push ax				
  1069                              <2> 		.endzero:
  1070                              <2> 						
  1071 00000405 80FA09              <2> 		cmp dl,9
  1072 00000408 7603                <2> 		jbe .endsumseven  		
  1073 0000040A 80C207              <2> 		add dl,7
  1074                              <2> 		.endsumseven:
  1075                              <2> 						
  1076 0000040D 80C230              <2> 		add dl,30h
  1077                              <2> 
  1078 00000410 51                  <2> 		push cx
  1079 00000411 52                  <2> 		push dx
  1080                              <2> 		__prtch dl
  1081                              <3>  stkopen 1
  1082 00000412 83EC01              <4>  sub word sp, %1
  1083 00000415 54                  <4>  push sp
  1084 00000416 5D                  <4>  pop bp
  1085 00000417 885600              <3>  mov byte [ bp ], %1
  1086 0000041A E83100              <3>  call proc_prtch
  1087                              <3>  stkclose 1
  1088 0000041D 83C401              <4>  add word sp, %1
  1089 00000420 5A                  <2> 		pop dx
  1090 00000421 59                  <2> 		pop cx	
  1091                              <2> 
  1092                              <2> 		.dec:
  1093                              <2> 	
  1094 00000422 FEC9                <2> 		dec cl
  1095 00000424 EBA8                <2> 		jmp .l1	
  1096                              <2> 	.l2:
  1097                              <2> 	
  1098 00000426 58                  <2> 	pop ax
  1099                              <2> 	
  1100                              <2> 	.end:
  1101                              <2> 	
  1102 00000427 C3                  <2> 	ret
  1103                              <2> 
  1104                              <2> proc_prtstr:
  1105 00000428 89E0                <2> 	mov ax,sp
  1106 0000042A 89C5                <2> 	mov bp,ax
  1107                              <2> 	
  1108 0000042C 8B4602              <2> 	mov ax, [bp+2]
  1109 0000042F 8ED8                <2> 	mov ds, ax
  1110 00000431 8B7604              <2> 	mov si, [bp+4]						
  1111                              <2> 	.loop:
  1112 00000434 AC                  <2> 		lodsb
  1113 00000435 3C00                <2> 		cmp al,0h
  1114 00000437 7414                <2> 		jz .done
  1115                              <2> 		
  1116 00000439 1E                  <2> 		push ds
  1117 0000043A 56                  <2> 		push si
  1118                              <2> 					
  1119                              <2> 		__prtch al										
  1120                              <3>  stkopen 1
  1121 0000043B 83EC01              <4>  sub word sp, %1
  1122 0000043E 54                  <4>  push sp
  1123 0000043F 5D                  <4>  pop bp
  1124 00000440 884600              <3>  mov byte [ bp ], %1
  1125 00000443 E80800              <3>  call proc_prtch
  1126                              <3>  stkclose 1
  1127 00000446 83C401              <4>  add word sp, %1
  1128                              <2> 									
  1129 00000449 5E                  <2> 		pop si
  1130 0000044A 1F                  <2> 		pop ds
  1131                              <2> 											
  1132 0000044B EBE7                <2> 		jmp .loop 
  1133                              <2> 	.done:
  1134                              <2> 	
  1135 0000044D C3                  <2> 	ret	
  1136                              <2> 	
  1137                              <2> proc_prtch:
  1138 0000044E 89E0                <2> 	mov ax,sp
  1139 00000450 89C5                <2> 	mov bp,ax
  1140                              <2> 
  1141 00000452 8A4602              <2> 	mov al,[bp+2]
  1142 00000455 B40E                <2> 	mov ah,0Eh
  1143 00000457 B700                <2> 	mov bh,00h
  1144 00000459 CD10                <2> 	int 10h	
  1145                              <2> 	
  1146 0000045B C3                  <2> 	ret
  1147                              <2> 
  1148                              <2> proc_prtln:
  1149 0000045C B403                <2> 	mov ah,03h
  1150 0000045E B700                <2> 	mov bh,00h
  1151 00000460 CD10                <2> 	int 10h
  1152                              <2> 	
  1153 00000462 B402                <2> 	mov ah,02h
  1154 00000464 FEC6                <2> 	inc dh
  1155 00000466 B200                <2> 	mov dl,00h
  1156 00000468 CD10                <2> 	int 10h	
  1157                              <2> 	
  1158 0000046A C3                  <2> 	ret
  1159                              <2> 	
  1160                              <2> %endif
  1161                              <1>  	%include "lib/system.mac"
  1162                              <2>  
  1163                              <2> %ifndef SYSTEM_MAC
  1164                              <2>  	%define SYSTEM_MAC
  1165                              <2>  	
  1166                              <2> 	%ifndef TRUE
  1167                              <2> 		%define TRUE 01h
  1168                              <2> 	%endif
  1169                              <2> 	%ifndef FALSE
  1170                              <2> 		%define FALSE 00h
  1171                              <2> 	%endif
  1172                              <2> 	
  1173                              <2> %macro vlodsb 3
  1174                              <2> 	vlodsb cs, %1, %2, %3
  1175                              <2> %endmacro
  1176                              <2> 
  1177                              <2> %macro vstosb 3
  1178                              <2> 	vstosb cs, %1, %2, %3
  1179                              <2> %endmacro
  1180                              <2> 	 	
  1181                              <2> %macro int16toreg 2
  1182                              <2> 	int16toreg cs, %1, %2
  1183                              <2> %endmacro
  1184                              <2> 
  1185                              <2> %macro regtoint16 2
  1186                              <2> 	regtoint16 %1, cs, %2
  1187                              <2> %endmacro
  1188                              <2> 
  1189                              <2> %macro vstosb 4
  1190                              <2> 	push %1
  1191                              <2> 	pop ds
  1192                              <2> 	mov si,%2
  1193                              <2> 	add si,%3
  1194                              <2> 	mov byte [si],%4	
  1195                              <2> %endmacro
  1196                              <2> 
  1197                              <2> %macro vlodsb 4
  1198                              <2> 	push %1
  1199                              <2> 	pop ds
  1200                              <2> 	mov si,%2
  1201                              <2> 	add si,%3
  1202                              <2> 	mov byte %4,[si]	
  1203                              <2> %endmacro 	 
  1204                              <2> 
  1205                              <2> %macro int16toreg 3
  1206                              <2> 	push %2
  1207                              <2> 	push %1
  1208                              <2> 	pop ds
  1209                              <2> 	pop si
  1210                              <2> 	mov word %3,[si]	
  1211                              <2> %endmacro
  1212                              <2> 
  1213                              <2> %macro regtoint16 3
  1214                              <2> 	push %3
  1215                              <2> 	push %2
  1216                              <2> 	pop ds
  1217                              <2> 	pop si
  1218                              <2> 	mov word [si],%1	
  1219                              <2> %endmacro
  1220                              <2> 
  1221                              <2> %macro mov32 2
  1222                              <2> 	mov32 cs, %1, cs, %2
  1223                              <2> %endmacro
  1224                              <2> 
  1225                              <2> %macro mov16 2
  1226                              <2> 	mov16 cs, %1, cs, %2
  1227                              <2> %endmacro
  1228                              <2> 
  1229                              <2> %macro mov32 4
  1230                              <2> 	mov ax,%3
  1231                              <2> 	mov ds,ax
  1232                              <2> 	mov cx,[%4+2]
  1233                              <2> 	mov dx,[%4]
  1234                              <2> 	mov ax,%1
  1235                              <2> 	mov ds,ax
  1236                              <2> 	mov [%2+2],cx
  1237                              <2> 	mov [%2],dx
  1238                              <2> %endmacro
  1239                              <2> 
  1240                              <2> %macro mov16 4
  1241                              <2> 	mov ax,%3
  1242                              <2> 	mov ds,ax
  1243                              <2> 	mov bx,[%4]
  1244                              <2> 	mov ax,%1
  1245                              <2> 	mov ds,ax
  1246                              <2> 	mov [%2],bx
  1247                              <2> %endmacro
  1248                              <2>  	 	
  1249                              <2> %macro mformat 4
  1250                              <2> 	stkopen 8
  1251                              <2> 	mov word [ bp + 0 ], %1
  1252                              <2> 	mov word [ bp + 2 ], %2
  1253                              <2> 	mov word [ bp + 4 ], %3
  1254                              <2> 	mov word [ bp + 6 ], %4
  1255                              <2> 	call kernel_segment:mformat
  1256                              <2> 	stkclose 8
  1257                              <2> %endmacro
  1258                              <2> 
  1259                              <2> %macro malloc 6
  1260                              <2> 	stkopen 0Bh
  1261                              <2> 	mov word [ bp + 4 ], %3
  1262                              <2> 	mov word [ bp + 6 ], %4
  1263                              <2> 	mov word [ bp + 8 ], %5	
  1264                              <2> 	call kernel_segment:malloc
  1265                              <2> 	push sp
  1266                              <2> 	pop bp
  1267                              <2> 	mov word %1, [ bp ]
  1268                              <2> 	mov word %2, [ bp + 2 ]
  1269                              <2> 	mov byte %6, [ bp + 0x0A ]
  1270                              <2> 	stkclose 0Bh
  1271                              <2> %endmacro 	
  1272                              <2> 
  1273                              <2> %macro laddr 2
  1274                              <2> 	laddr %1, %2, %1, %2
  1275                              <2> %endmacro
  1276                              <2> 
  1277                              <2> %macro faddr 2
  1278                              <2> 	faddr %1, %2, %1, %2
  1279                              <2> %endmacro
  1280                              <2>  	
  1281                              <2> %macro laddr 4
  1282                              <2> 	stkopen 8
  1283                              <2> 	mov word [ bp + 4 ], %3
  1284                              <2> 	mov word [ bp + 6 ], %4	
  1285                              <2> 	call kernel_segment:laddr
  1286                              <2> 	push sp
  1287                              <2> 	pop bp
  1288                              <2> 	mov word %1, [ bp + 0 ]
  1289                              <2> 	mov word %2, [ bp + 2 ]	
  1290                              <2> 	stkclose 8
  1291                              <2> %endmacro
  1292                              <2> 
  1293                              <2> %macro faddr 4
  1294                              <2> 	stkopen 8
  1295                              <2> 	mov word [ bp + 4 ], %3
  1296                              <2> 	mov word [ bp + 6 ], %4	
  1297                              <2> 	call kernel_segment:faddr
  1298                              <2> 	push sp
  1299                              <2> 	pop bp
  1300                              <2> 	mov word %1, [ bp + 0 ]
  1301                              <2> 	mov word %2, [ bp + 2 ]	
  1302                              <2> 	stkclose 8
  1303                              <2> %endmacro	
  1304                              <2>  
  1305                              <2> 
  1306                              <2> %macro stkopen 1		
  1307                              <2> 	sub word sp, %1
  1308                              <2> 	push sp
  1309                              <2> 	pop bp
  1310                              <2> %endmacro
  1311                              <2> 
  1312                              <2> %macro stkclose 1
  1313                              <2> 	add word sp, %1
  1314                              <2> %endmacro
  1315                              <2> 
  1316                              <2> %macro stkload 1-* 	
  1317                              <2>  	%rep %0
  1318                              <2>  	 	%rotate -1
  1319                              <2>  		pop %1
  1320                              <2>  	%endrep
  1321                              <2>  	%rep %0
  1322                              <2>  		push %1
  1323                              <2>  		%rotate 1
  1324                              <2>  	%endrep
  1325                              <2> %endmacro
  1326                              <2> 
  1327                              <2> %macro stkpush 1-* 	
  1328                              <2>  	%rep %0
  1329                              <2>  		push %1
  1330                              <2>  		%rotate 1
  1331                              <2>  	%endrep 	
  1332                              <2> %endmacro
  1333                              <2>  
  1334                              <2> %macro stkpop 1-*
  1335                              <2>  	%rep %0
  1336                              <2>  	 	%rotate -1
  1337                              <2>  		pop %1
  1338                              <2>  	%endrep 	 	
  1339                              <2> %endmacro
  1340                              <2> 
  1341                              <2> %endif 
  1342                              <1> 
  1343                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1344                              <1> %macro printf 1-*	
  1345                              <1> 	%rep %0					
  1346                              <1> 		__printf %1
  1347                              <1> 		%rotate 1		
  1348                              <1> 	%endrep
  1349                              <1> %endmacro	
  1350                              <1> 
  1351                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1352                              <1> %macro __printf 1
  1353                              <1> 	section .data
  1354                              <1> 		%%str: db %1,0
  1355                              <1> 	section .text
  1356                              <1> 		prtstr cs, %%str				
  1357                              <1> %endmacro
  1358                              <1> 
  1359                              <1> %macro prtstr 2
  1360                              <1> 	stkopen 4
  1361                              <1> 	mov word [bp], %1
  1362                              <1> 	mov word [bp+2], %2
  1363                              <1> 	call proc_prtstr
  1364                              <1> 	stkclose 4
  1365                              <1> %endmacro
  1366                              <1> 
  1367                              <1> 
  1368                              <1> %macro prtIEEE754 1
  1369                              <1> 	prtIEEE754 cs, %1
  1370                              <1> %endmacro
  1371                              <1> 
  1372                              <1> %macro prtIEEE754 2
  1373                              <1> 	stkopen 4
  1374                              <1> 	mov ax,%1
  1375                              <1> 	mov ds,ax
  1376                              <1> 	mov ax, [%2+2]
  1377                              <1> 	mov word [bp+0], ax
  1378                              <1> 	mov ax, [%2]
  1379                              <1> 	mov word [bp+2], ax
  1380                              <1> 	call proc_prtIEEE754
  1381                              <1> 	stkclose 4
  1382                              <1> %endmacro
  1383                              <1> 
  1384                              <1> %macro prtbool 1	
  1385                              <1> 	cmp byte %1, TRUE
  1386                              <1> 	je .true
  1387                              <1> 	jmp .false
  1388                              <1> 	.true:
  1389                              <1> 		prtf "true"
  1390                              <1> 		jmp .endcmp
  1391                              <1> 	.false:
  1392                              <1> 		prtf "false"
  1393                              <1> 	.endcmp:	
  1394                              <1> %endmacro
  1395                              <1> 
  1396                              <1> %macro prtptr 2-3 TRUE
  1397                              <1> 	stkopen 3
  1398                              <1> 	mov word [ bp + 0 ], %2
  1399                              <1> 	mov byte [ bp + 2 ], %3
  1400                              <1> 	prthex16 %1, %3
  1401                              <1> 	writechar ':'
  1402                              <1> 	push sp
  1403                              <1> 	pop bp
  1404                              <1> 	mov word ax, [ bp + 0 ]
  1405                              <1> 	mov byte bl, [ bp + 2 ]
  1406                              <1> 	prthex16 ax, bl
  1407                              <1> 	stkclose 3
  1408                              <1> %endmacro
  1409                              <1> 
  1410                              <1> %macro prtfptr 2-3 TRUE
  1411                              <1> 	stkopen 3
  1412                              <1> 	mov word [ bp + 0 ], %1
  1413                              <1> 	mov byte [ bp + 2 ], %3
  1414                              <1> 	prthex16 %2, %3
  1415                              <1> 	push sp
  1416                              <1> 	pop bp
  1417                              <1> 	mov word ax, [ bp + 0 ]
  1418                              <1> 	mov byte bl, [ bp + 2 ]
  1419                              <1> 	prthex16 ax, bl
  1420                              <1> 	stkclose 3
  1421                              <1> %endmacro
  1422                              <1> 
  1423                              <1> %macro prtbin32 1
  1424                              <1> 	prtbin32 cs, %1
  1425                              <1> %endmacro
  1426                              <1> 
  1427                              <1> %macro prtbin32 2
  1428                              <1> 	mov ax,%1
  1429                              <1> 	mov ds,ax
  1430                              <1> 	mov word ax,[%2+2]
  1431                              <1> 	prtbin16 ax
  1432                              <1> 	prtch 20h
  1433                              <1> 	mov ax,%1
  1434                              <1> 	mov ds,ax
  1435                              <1> 	mov word ax,[%2]
  1436                              <1> 	prtbin16 ax
  1437                              <1> %endmacro
  1438                              <1> 
  1439                              <1> %macro prthex32 1
  1440                              <1> 	prthex32 cs, %1
  1441                              <1> %endmacro
  1442                              <1> 
  1443                              <1> %macro iprthex32 1
  1444                              <1> 	iprthex32 cs, %1
  1445                              <1> %endmacro
  1446                              <1> 
  1447                              <1> %macro prthex32 2
  1448                              <1> 	mov ax,%1
  1449                              <1> 	mov ds,ax
  1450                              <1> 	mov word ax,[%2+2]
  1451                              <1> 	prthex16 ax	
  1452                              <1> 	mov ax,%1
  1453                              <1> 	mov ds,ax
  1454                              <1> 	mov word ax,[%2]
  1455                              <1> 	prthex16 ax
  1456                              <1> %endmacro
  1457                              <1> 
  1458                              <1> %macro iprthex32 2
  1459                              <1> 	mov ax,%1
  1460                              <1> 	mov ds,ax
  1461                              <1> 	mov word ax,[%2+2]
  1462                              <1> 	mov word bx,ax
  1463                              <1> 	and ax,0x7FFF
  1464                              <1> 	push ax
  1465                              <1> 	and bx,0x8000
  1466                              <1> 	cmp bx,0
  1467                              <1> 	jz %%prt
  1468                              <1> 		prtch '-'		
  1469                              <1> 	%%prt:	
  1470                              <1> 	pop ax
  1471                              <1> 	prthex16 ax
  1472                              <1> 	mov ax,%1
  1473                              <1> 	mov ds,ax
  1474                              <1> 	mov word ax,[%2]
  1475                              <1> 	prthex16 ax	
  1476                              <1> %endmacro
  1477                              <1> 
  1478                              <1> %macro prtsubbin8 3
  1479                              <1> 	__prtsubbin8 %1,%2,%3
  1480                              <1> %endmacro
  1481                              <1> 
  1482                              <1> %macro prtbin16 1
  1483                              <1> 	stkopen 3
  1484                              <1> 	mov word [bp], %1
  1485                              <1> 	mov byte [bp+2], TRUE
  1486                              <1> 	call proc_prtbin16
  1487                              <1> 	stkclose 3
  1488                              <1> %endmacro
  1489                              <1> 
  1490                              <1> %macro prtbin8 1
  1491                              <1> 	stkopen 2
  1492                              <1> 	mov byte [bp], %1
  1493                              <1> 	mov byte [bp+1], TRUE
  1494                              <1> 	call proc_prtbin8
  1495                              <1> 	stkclose 2
  1496                              <1> %endmacro
  1497                              <1> 
  1498                              <1> %macro prthex16 1
  1499                              <1> 	stkopen 3
  1500                              <1> 	mov word [bp], %1
  1501                              <1> 	mov byte [bp+2], TRUE
  1502                              <1> 	call proc_prthex16
  1503                              <1> 	stkclose 3
  1504                              <1> %endmacro
  1505                              <1> 
  1506                              <1> %macro prthex8 1
  1507                              <1> 	stkopen 2
  1508                              <1> 	mov byte [bp], %1
  1509                              <1> 	mov byte [bp+1], TRUE
  1510                              <1> 	call proc_prthex8
  1511                              <1> 	stkclose 2
  1512                              <1> %endmacro
  1513                              <1> 
  1514                              <1> %macro prtch 1
  1515                              <1> 	__prtch %1
  1516                              <1> %endmacro
  1517                              <1> 
  1518                              <1> %macro prtln 0
  1519                              <1> 	__prtln
  1520                              <1> %endmacro	
  1521                              <1> 
  1522                              <1> 
  1523                              <1> %macro prtstk 0
  1524                              <1> 	printf "stack ---> "
  1525                              <1> 	mov ax,sp
  1526                              <1> 	prthex16 ax
  1527                              <1> %endmacro  
  1528                              <1> 
  1529                              <1> %endif
  1530                                  %include "lib/math.mac"
  1531                              <1> 
  1532                              <1> %ifndef MATH_MAC
  1533                              <1> 	%define MATH_MAC
  1534                              <1> 	
  1535                              <1> 	%include "lib/math.asm"
  1536                              <2> 
  1537                              <2> %ifndef MATH_ASM
  1538                              <2> 	%define MATH_ASM
  1539                              <2> 
  1540                              <2> %macro __int16to32 3
  1541                              <2> 	stkopen 0x06
  1542                              <2> 	mov word [bp+0],%1
  1543                              <2> 	call proc_int16to32
  1544                              <2> 	push sp
  1545                              <2> 	pop bp
  1546                              <2> 	mov word %2, [bp+2]
  1547                              <2> 	mov word %3, [bp+4]
  1548                              <2> 	stkclose 0x06
  1549                              <2> %endmacro
  1550                              <2> 
  1551                              <2> %macro __int32to16 3
  1552                              <2> 	stkopen 0x06
  1553                              <2> 	mov word [bp+0], %1
  1554                              <2> 	mov word [bp+2], %2
  1555                              <2> 	call proc_int32to16
  1556                              <2> 	push sp
  1557                              <2> 	pop bp
  1558                              <2> 	mov word %3, [bp+4]
  1559                              <2> 	stkclose 0x06
  1560                              <2> %endmacro
  1561                              <2> 
  1562                              <2> %macro __add32 6
  1563                              <2> 	stkopen 0x0C
  1564                              <2> 	mov word [bp+0], %1
  1565                              <2> 	mov word [bp+2], %2
  1566                              <2> 	mov word [bp+4], %3
  1567                              <2> 	mov word [bp+6], %4	
  1568                              <2> 	call proc_add32
  1569                              <2> 	push sp
  1570                              <2> 	pop bp
  1571                              <2> 	mov word %5, [bp+8]
  1572                              <2> 	mov word %6, [bp+0x0A]
  1573                              <2> 	stkclose 0x0C
  1574                              <2> %endmacro
  1575                              <2> 
  1576                              <2> %macro __sub32 6
  1577                              <2> 	stkopen 0x0C
  1578                              <2> 	mov word [bp+0], %1
  1579                              <2> 	mov word [bp+2], %2
  1580                              <2> 	mov word [bp+4], %3
  1581                              <2> 	mov word [bp+6], %4	
  1582                              <2> 	call proc_sub32
  1583                              <2> 	push sp
  1584                              <2> 	pop bp
  1585                              <2> 	mov word %5, [bp+8]
  1586                              <2> 	mov word %6, [bp+0x0A]
  1587                              <2> 	stkclose 0x0C
  1588                              <2> %endmacro
  1589                              <2> 
  1590                              <2> %macro __mul32 6
  1591                              <2> 	stkopen 0x0C
  1592                              <2> 	mov word [bp+0], %1
  1593                              <2> 	mov word [bp+2], %2
  1594                              <2> 	mov word [bp+4], %3
  1595                              <2> 	mov word [bp+6], %4	
  1596                              <2> 	call proc_mul32
  1597                              <2> 	push sp
  1598                              <2> 	pop bp
  1599                              <2> 	mov word %5, [bp+8]
  1600                              <2> 	mov word %6, [bp+0x0A]
  1601                              <2> 	stkclose 0x0C
  1602                              <2> %endmacro
  1603                              <2> 
  1604                              <2> %macro __div32 9
  1605                              <2> 	stkopen 0x11
  1606                              <2> 	mov word [bp+0], %1
  1607                              <2> 	mov word [bp+2], %2
  1608                              <2> 	mov word [bp+4], %3
  1609                              <2> 	mov word [bp+6], %4
  1610                              <2> 	mov word [bp+8], %5
  1611                              <2> 	mov word [bp+0x0A], %6	
  1612                              <2> 	call proc_div32
  1613                              <2> 	push sp
  1614                              <2> 	pop bp
  1615                              <2> 	mov word %7, [bp+0x0C]
  1616                              <2> 	mov word %8, [bp+0x0E]
  1617                              <2> 	mov byte %9, [bp+0x10]
  1618                              <2> 	stkclose 0x11
  1619                              <2> %endmacro
  1620                              <2> 
  1621                              <2> %macro __cmp32 5
  1622                              <2> 	stkopen 9
  1623                              <2> 	mov word [bp+0], %1
  1624                              <2> 	mov word [bp+2], %2
  1625                              <2> 	mov word [bp+4], %3
  1626                              <2> 	mov word [bp+6], %4
  1627                              <2> 	call proc_cmp32
  1628                              <2> 	push sp
  1629                              <2> 	pop bp
  1630                              <2> 	mov byte %5, [bp+8]
  1631                              <2> 	stkclose 9	
  1632                              <2> %endmacro
  1633                              <2> 
  1634                              <2> %macro __shl32 3
  1635                              <2> 	stkopen 5
  1636                              <2> 	mov word [bp+0], %1
  1637                              <2> 	mov word [bp+2], %2
  1638                              <2> 	mov byte [bp+4], %3
  1639                              <2> 	call proc_shl32
  1640                              <2> 	push sp
  1641                              <2> 	pop bp
  1642                              <2> 	mov word %1, [bp+0]
  1643                              <2> 	mov word %2, [bp+2]
  1644                              <2> 	stkclose 5
  1645                              <2> %endmacro
  1646                              <2> 
  1647                              <2> %macro __shr32 3
  1648                              <2> 	stkopen 5
  1649                              <2> 	mov word [bp+0], %1
  1650                              <2> 	mov word [bp+2], %2
  1651                              <2> 	mov byte [bp+4], %3
  1652                              <2> 	call proc_shr32
  1653                              <2> 	push sp
  1654                              <2> 	pop bp
  1655                              <2> 	mov word %1, [bp+0]
  1656                              <2> 	mov word %2, [bp+2]
  1657                              <2> 	stkclose 5
  1658                              <2> %endmacro
  1659                              <2> 
  1660                              <2> %macro __lzcount32 3	
  1661                              <2> 	push %2		
  1662                              <2> 	__lzcount16 %1, cl	
  1663                              <2> 	pop ax
  1664                              <2> 	cmp cl,4
  1665                              <2> 	jb .end
  1666                              <2> 		push cx		
  1667                              <2> 		__lzcount16 ax, al		
  1668                              <2> 		pop cx
  1669                              <2> 		add cl,al
  1670                              <2> 	.end:	
  1671                              <2> 	mov byte %3, cl 
  1672                              <2> %endmacro
  1673                              <2> 
  1674                              <2> %macro __lzcount16 2
  1675                              <2> 	stkopen 3
  1676                              <2> 	mov word [bp+0], %1
  1677                              <2> 	call proc__lzcount16
  1678                              <2> 	push sp
  1679                              <2> 	pop bp
  1680                              <2> 	mov byte %2, [bp+2]	
  1681                              <2> 	stkclose 3
  1682                              <2> %endmacro
  1683                              <2> 
  1684                              <2> %macro __lzbitcount32 3	
  1685                              <2> 	push %2		
  1686                              <2> 	__lzbitcount16 %1, cl
  1687                              <2> 	pop ax
  1688                              <2> 	cmp cl,16
  1689                              <2> 	jb .end
  1690                              <2> 		push cx		
  1691                              <2> 		__lzbitcount16 ax, al		
  1692                              <2> 		pop cx
  1693                              <2> 		add cl,al
  1694                              <2> 	.end:	
  1695                              <2> 	mov byte %3, cl 
  1696                              <2> %endmacro
  1697                              <2> 		
  1698                              <2> %macro __lzbitcount16 2
  1699                              <2> 	stkopen 3
  1700                              <2> 	mov word [bp+0], %1
  1701                              <2> 	call proc__lzbitcount16
  1702                              <2> 	push sp
  1703                              <2> 	pop bp
  1704                              <2> 	mov byte %2, [bp+2]	
  1705                              <2> 	stkclose 3
  1706                              <2> %endmacro	
  1707                              <2> 
  1708                              <2> %macro __calc_dividendo1 7
  1709                              <2> 	stkopen 0x0D
  1710                              <2> 	mov word [bp+0], %1
  1711                              <2> 	mov word [bp+2], %2
  1712                              <2> 	mov word [bp+4], %3
  1713                              <2> 	mov word [bp+6], %4
  1714                              <2> 	call proc_calc_dividendo1
  1715                              <2> 	push sp
  1716                              <2> 	pop bp
  1717                              <2> 	mov word %5, [bp+0x08]
  1718                              <2> 	mov word %6, [bp+0x0A]
  1719                              <2> 	mov byte %7, [bp+0x0C]
  1720                              <2> 	stkclose 0x0D
  1721                              <2> %endmacro
  1722                              <2> 
  1723                              <2> %macro __calc__prox_dividendo 5
  1724                              <2> 	stkopen 9
  1725                              <2> 	mov word [bp+0], %1
  1726                              <2> 	mov word [bp+2], %2
  1727                              <2> 	mov word [bp+4], %3
  1728                              <2> 	mov word [bp+6], %4
  1729                              <2> 	mov word [bp+8], %5
  1730                              <2> 	call proc_calc_prox_dividendo
  1731                              <2> 	push sp
  1732                              <2> 	pop bp
  1733                              <2> 	mov word %3, [bp+4]
  1734                              <2> 	mov word %4, [bp+6]
  1735                              <2> 	mov byte %5, [bp+8]
  1736                              <2> 	stkclose 9
  1737                              <2> %endmacro
  1738                              <2> 				
  1739                              <2> section .data
  1740                              <2> 
  1741                              <2> proc_int16to32:
  1742 0000046B 89E0                <2> 	mov ax,sp
  1743 0000046D 89C5                <2> 	mov bp,ax
  1744                              <2> 	
  1745 0000046F 8B4602              <2> 	mov ax,[bp+2]			
  1746 00000472 89C3                <2> 	mov bx,ax
  1747 00000474 250080              <2> 	and ax,0x8000
  1748 00000477 83F800              <2> 	cmp ax,0
  1749 0000047A 7402                <2> 	jz .zero
  1750 0000047C EB08                <2> 	jmp .one
  1751                              <2> 	.zero:
  1752 0000047E 81E3FF7F            <2> 		and bx,0x7FFF
  1753 00000482 89DA                <2> 		mov dx,bx			
  1754 00000484 EB06                <2> 		jmp .endcmp
  1755                              <2> 	.one:				
  1756 00000486 BAFFFF              <2> 		mov dx,0xFFFF
  1757 00000489 29DA                <2> 		sub dx,bx
  1758 0000048B 42                  <2> 		inc dx
  1759                              <2> 	.endcmp:
  1760 0000048C 894604              <2> 	mov [bp+4],ax
  1761 0000048F 895606              <2> 	mov [bp+6],dx
  1762                              <2> 	
  1763 00000492 C3                  <2> 	ret
  1764                              <2> 	
  1765                              <2> proc_int32to16:
  1766 00000493 89E0                <2> 	mov ax,sp
  1767 00000495 89C5                <2> 	mov bp,ax
  1768                              <2> 	
  1769 00000497 8B4602              <2> 	mov ax,[bp+2]
  1770 0000049A 8B5E04              <2> 	mov bx,[bp+4]		
  1771 0000049D 250080              <2> 	and ax,0x8000
  1772 000004A0 81E3FF7F            <2> 	and bx,0x7FFF	
  1773 000004A4 83F800              <2> 	cmp ax,0
  1774 000004A7 7402                <2> 	jz .zero
  1775 000004A9 EB04                <2> 	jmp .one
  1776                              <2> 	.zero:		
  1777 000004AB 01D8                <2> 		add ax,bx
  1778 000004AD EB05                <2> 		jmp .endcmp
  1779                              <2> 	.one:		
  1780 000004AF B8FFFF              <2> 		mov ax,0xFFFF
  1781 000004B2 29D8                <2> 		sub ax,bx
  1782                              <2> 	.endcmp:	
  1783 000004B4 894606              <2> 	mov word [bp+6], ax	
  1784                              <2> 	
  1785 000004B7 C3                  <2> 	ret
  1786                              <2> 
  1787                              <2> proc_setsig:
  1788 000004B8 89E0                <2> 	mov ax,sp
  1789 000004BA 89C5                <2> 	mov bp,ax
  1790                              <2> 	
  1791 000004BC 816602FF7F          <2> 	and word [bp+2],0x7FFF
  1792 000004C1 8146020080          <2> 	add word [bp+2],0x8000	
  1793                              <2> 	
  1794 000004C6 C3                  <2> 	ret
  1795                              <2> 	
  1796                              <2> proc_clrsig:
  1797 000004C7 89E0                <2> 	mov ax,sp
  1798 000004C9 89C5                <2> 	mov bp,ax
  1799                              <2> 	
  1800 000004CB 816602FF7F          <2> 	and word [bp+2],0x7FFF
  1801                              <2> 
  1802 000004D0 C3                  <2> 	ret
  1803                              <2> 
  1804                              <2> proc_idiv32:
  1805                              <2> 	stkopen 0x11
  1806 000004D1 83EC11              <3>  sub word sp, %1
  1807 000004D4 54                  <3>  push sp
  1808 000004D5 5D                  <3>  pop bp
  1809 000004D6 8B4613              <2> 	mov ax,[bp+0x13]
  1810 000004D9 25FF7F              <2> 	and ax,0x7FFF
  1811 000004DC 894600              <2> 	mov [bp+0],ax
  1812 000004DF 8B4615              <2> 	mov ax,[bp+0x15]
  1813 000004E2 894602              <2> 	mov [bp+2],ax
  1814 000004E5 8B4617              <2> 	mov ax,[bp+0x17]
  1815 000004E8 25FF7F              <2> 	and ax,0x7FFF
  1816 000004EB 894604              <2> 	mov [bp+4],ax
  1817 000004EE 8B4619              <2> 	mov ax,[bp+0x19]
  1818 000004F1 894606              <2> 	mov [bp+6],ax 
  1819 000004F4 E8B300              <2> 	call proc_div32
  1820 000004F7 89E0                <2> 	mov ax,sp
  1821 000004F9 89C5                <2> 	mov bp,ax
  1822 000004FB 8B4608              <2> 	mov ax,[bp+8]
  1823 000004FE 89461B              <2> 	mov [bp+0x1B], ax
  1824 00000501 8B460A              <2> 	mov ax,[bp+0x0A]
  1825 00000504 89461D              <2> 	mov [bp+0x1D], ax
  1826 00000507 8B460C              <2> 	mov ax,[bp+0x0C]
  1827 0000050A 89461F              <2> 	mov [bp+0x1F], ax
  1828 0000050D 8B460E              <2> 	mov ax,[bp+0x0E]
  1829 00000510 894621              <2> 	mov [bp+0x21], ax
  1830 00000513 8A4610              <2> 	mov al,[bp+0x10]
  1831 00000516 884623              <2> 	mov byte [bp+0x23], al
  1832                              <2> 	stkclose 0x11
  1833 00000519 83C411              <3>  add word sp, %1
  1834                              <2> 	
  1835 0000051C 54                  <2> 	push sp
  1836 0000051D 5D                  <2> 	pop bp
  1837                              <2> 		
  1838 0000051E 8B4E02              <2> 	mov cx,[bp+2]
  1839 00000521 8B5606              <2> 	mov dx,[bp+6]
  1840 00000524 81E10080            <2> 	and cx,0x8000
  1841 00000528 81E20080            <2> 	and dx,0x8000
  1842 0000052C 31D1                <2> 	xor cx,dx
  1843                              <2> 	
  1844 0000052E 837E0A00            <2> 	cmp word [bp+0x0A],0
  1845 00000532 7506                <2> 	jnz .signal1
  1846 00000534 837E0C00            <2> 	cmp word [bp+0x0C],0
  1847 00000538 7403                <2> 	jz .endsignal1
  1848                              <2> 	.signal1:
  1849 0000053A 014E0A              <2> 		add word [bp+0x0A],cx
  1850                              <2> 	.endsignal1:
  1851                              <2> 	
  1852 0000053D 837E0E00            <2> 	cmp word [bp+0x0E],0
  1853 00000541 7506                <2> 	jnz .signal2
  1854 00000543 837E1000            <2> 	cmp word [bp+0x10],0
  1855 00000547 7403                <2> 	jz .endsignal2
  1856                              <2> 	.signal2:
  1857 00000549 014E0E              <2> 		add word [bp+0x0E],cx	
  1858                              <2> 	.endsignal2:
  1859                              <2> 		
  1860 0000054C C3                  <2> 	ret	
  1861                              <2> 
  1862                              <2> proc_imul32:		
  1863                              <2> 	stkopen 0x0C
  1864 0000054D 83EC0C              <3>  sub word sp, %1
  1865 00000550 54                  <3>  push sp
  1866 00000551 5D                  <3>  pop bp
  1867 00000552 8B460E              <2> 	mov ax,[bp+0x0E]
  1868 00000555 25FF7F              <2> 	and ax,0x7FFF
  1869 00000558 894600              <2> 	mov [bp+0],ax
  1870 0000055B 8B4610              <2> 	mov ax,[bp+0x10]
  1871 0000055E 894602              <2> 	mov [bp+2],ax
  1872 00000561 8B4612              <2> 	mov ax,[bp+0x12]
  1873 00000564 25FF7F              <2> 	and ax,0x7FFF
  1874 00000567 894604              <2> 	mov [bp+4],ax
  1875 0000056A 8B4614              <2> 	mov ax,[bp+0x14]
  1876 0000056D 894606              <2> 	mov [bp+6],ax 
  1877 00000570 E8B901              <2> 	call proc_mul32
  1878 00000573 89E0                <2> 	mov ax,sp
  1879 00000575 89C5                <2> 	mov bp,ax
  1880 00000577 8B4608              <2> 	mov ax,[bp+8]
  1881 0000057A 8B5E0A              <2> 	mov bx,[bp+0x0A]
  1882                              <2> 	stkclose 0x0C
  1883 0000057D 83C40C              <3>  add word sp, %1
  1884                              <2> 	
  1885 00000580 89E1                <2> 	mov cx,sp
  1886 00000582 89CD                <2> 	mov bp,cx		
  1887                              <2> 		
  1888 00000584 89460A              <2> 	mov [bp+0x0A],ax
  1889 00000587 895E0C              <2> 	mov [bp+0x0C],bx
  1890                              <2> 	
  1891 0000058A 837E0A00            <2> 	cmp word [bp+0x0A],0
  1892 0000058E 7506                <2> 	jnz .signal1
  1893 00000590 837E0C00            <2> 	cmp word [bp+0x0C],0
  1894 00000594 7413                <2> 	jz .endsignal1
  1895                              <2> 	.signal1:
  1896 00000596 8B4E02              <2> 		mov cx,[bp+2]
  1897 00000599 8B5606              <2> 		mov dx,[bp+6]
  1898 0000059C 81E10080            <2> 		and cx,0x8000
  1899 000005A0 81E20080            <2> 		and dx,0x8000
  1900 000005A4 31D1                <2> 		xor cx,dx
  1901 000005A6 014E0A              <2> 		add word [bp+0x0A],cx
  1902                              <2> 	.endsignal1:
  1903                              <2> 	
  1904 000005A9 C3                  <2> 	ret
  1905                              <2> 
  1906                              <2> proc_div32:
  1907 000005AA 89E0                <2> 	mov ax,sp
  1908 000005AC 89C5                <2> 	mov bp,ax
  1909                              <2> 	
  1910 000005AE 8B4606              <2> 	mov ax,[bp+6]
  1911 000005B1 034608              <2> 	add ax,[bp+8]
  1912 000005B4 83F800              <2> 	cmp ax,0
  1913 000005B7 0F846C01            <2> 	jz .divbyzero
  1914                              <2> 	
  1915 000005BB 837E0200            <2> 	cmp word [bp+2], 0
  1916 000005BF 7521                <2> 	jnz .div2
  1917 000005C1 837E0600            <2> 	cmp word [bp+6], 0
  1918 000005C5 751B                <2> 	jnz .div2
  1919 000005C7 31D2                <2> 		xor dx,dx
  1920 000005C9 8B4604              <2> 		mov ax, [bp+4]
  1921 000005CC F77608              <2> 		div word [bp+8]
  1922 000005CF C7460A0000          <2> 		mov word [bp+0x0A], 0
  1923 000005D4 89460C              <2> 		mov word [bp+0x0C], ax
  1924 000005D7 C7460E0000          <2> 		mov word [bp+0x0E], 0
  1925 000005DC 895610              <2> 		mov word [bp+0x10], dx
  1926 000005DF E93F01              <2> 		jmp .enddiv
  1927                              <2> 	.div2:
  1928 000005E2 8B4602              <2> 		mov ax,[bp+2]
  1929 000005E5 3B4606              <2> 		cmp ax,[bp+6]
  1930 000005E8 0F821F01            <2> 		jb .qzero
  1931 000005EC 770A                <2> 		ja .div
  1932 000005EE 8B4604              <2> 		mov ax,[bp+4]
  1933 000005F1 3B4608              <2> 		cmp ax,[bp+8]
  1934 000005F4 0F821301            <2> 		jb .qzero
  1935                              <2> 		
  1936                              <2> 		.div:
  1937                              <2> 		
  1938 000005F8 C7460A0000          <2> 		mov word [bp+0x0A], 0
  1939 000005FD C7460C0000          <2> 		mov word [bp+0x0C], 0		
  1940 00000602 C7460E0000          <2> 		mov word [bp+0x0E], 0
  1941 00000607 C746100000          <2> 		mov word [bp+0x10], 0
  1942                              <2> 		
  1943 0000060C 8B4602              <2> 		mov ax,[bp+2]
  1944 0000060F 8B5E04              <2> 		mov bx,[bp+4]
  1945 00000612 8B4E06              <2> 		mov cx,[bp+6]
  1946 00000615 8B5608              <2> 		mov dx,[bp+8]		
  1947                              <2> 		__calc_dividendo1 ax, bx, cx, dx, ax, bx, cl
  1948                              <3>  stkopen 0x0D
  1949 00000618 83EC0D              <4>  sub word sp, %1
  1950 0000061B 54                  <4>  push sp
  1951 0000061C 5D                  <4>  pop bp
  1952 0000061D 894600              <3>  mov word [bp+0], %1
  1953 00000620 895E02              <3>  mov word [bp+2], %2
  1954 00000623 894E04              <3>  mov word [bp+4], %3
  1955 00000626 895606              <3>  mov word [bp+6], %4
  1956 00000629 E89A02              <3>  call proc_calc_dividendo1
  1957 0000062C 54                  <3>  push sp
  1958 0000062D 5D                  <3>  pop bp
  1959 0000062E 8B4608              <3>  mov word %5, [bp+0x08]
  1960 00000631 8B5E0A              <3>  mov word %6, [bp+0x0A]
  1961 00000634 8A4E0C              <3>  mov byte %7, [bp+0x0C]
  1962                              <3>  stkclose 0x0D
  1963 00000637 83C40D              <4>  add word sp, %1
  1964                              <2> 
  1965 0000063A 89E2                <2> 		mov dx,sp
  1966 0000063C 89D5                <2> 		mov bp,dx
  1967 0000063E 89460E              <2> 		mov word [bp+0x0E], ax
  1968 00000641 895E10              <2> 		mov word [bp+0x10], bx
  1969                              <2> 		
  1970 00000644 51                  <2> 		push cx
  1971                              <2> 		.l1:							
  1972 00000645 89E2                <2> 			mov dx,sp
  1973 00000647 89D5                <2> 			mov bp,dx		
  1974 00000649 83C502              <2> 			add bp,2
  1975 0000064C 8B460E              <2> 			mov ax, [bp+0x0E]
  1976 0000064F 8B5E10              <2> 			mov bx, [bp+0x10]
  1977 00000652 8B4E06              <2> 			mov cx, [bp+6]
  1978 00000655 8B5608              <2> 			mov dx, [bp+8]
  1979                              <2> 			__cmp32 ax, bx, cx, dx, cl
  1980                              <3>  stkopen 9
  1981 00000658 83EC09              <4>  sub word sp, %1
  1982 0000065B 54                  <4>  push sp
  1983 0000065C 5D                  <4>  pop bp
  1984 0000065D 894600              <3>  mov word [bp+0], %1
  1985 00000660 895E02              <3>  mov word [bp+2], %2
  1986 00000663 894E04              <3>  mov word [bp+4], %3
  1987 00000666 895606              <3>  mov word [bp+6], %4
  1988 00000669 E81F01              <3>  call proc_cmp32
  1989 0000066C 54                  <3>  push sp
  1990 0000066D 5D                  <3>  pop bp
  1991 0000066E 8A4E08              <3>  mov byte %5, [bp+8]
  1992                              <3>  stkclose 9
  1993 00000671 83C409              <4>  add word sp, %1
  1994                              <2> 			
  1995 00000674 51                  <2> 			push cx
  1996 00000675 89E2                <2> 			mov dx,sp
  1997 00000677 89D5                <2> 			mov bp,dx
  1998 00000679 83C504              <2> 			add bp,4
  1999 0000067C 8B460A              <2> 			mov ax,[bp+0x0A]
  2000 0000067F 8B5E0C              <2> 			mov bx,[bp+0x0C]
  2001 00000682 55                  <2> 			push bp
  2002                              <2> 			__shl32 ax, bx, 1
  2003                              <3>  stkopen 5
  2004 00000683 83EC05              <4>  sub word sp, %1
  2005 00000686 54                  <4>  push sp
  2006 00000687 5D                  <4>  pop bp
  2007 00000688 894600              <3>  mov word [bp+0], %1
  2008 0000068B 895E02              <3>  mov word [bp+2], %2
  2009 0000068E C6460401            <3>  mov byte [bp+4], %3
  2010 00000692 E82101              <3>  call proc_shl32
  2011 00000695 54                  <3>  push sp
  2012 00000696 5D                  <3>  pop bp
  2013 00000697 8B4600              <3>  mov word %1, [bp+0]
  2014 0000069A 8B5E02              <3>  mov word %2, [bp+2]
  2015                              <3>  stkclose 5
  2016 0000069D 83C405              <4>  add word sp, %1
  2017 000006A0 5D                  <2> 			pop bp				
  2018 000006A1 59                  <2> 			pop cx	
  2019                              <2> 									
  2020 000006A2 80F900              <2> 			cmp cl,0
  2021 000006A5 7C12                <2> 			jl .l11
  2022 000006A7 83C301              <2> 				add bx,1
  2023 000006AA 83D000              <2> 				adc ax,0	
  2024                              <2> 				
  2025 000006AD 8B4E06              <2> 				mov cx,[bp+6]
  2026 000006B0 8B5608              <2> 				mov dx,[bp+8]
  2027 000006B3 295610              <2> 				sub [bp+0x10],dx
  2028 000006B6 194E0E              <2> 				sbb [bp+0x0E],cx							
  2029                              <2> 			.l11:							
  2030 000006B9 89460A              <2> 			mov word [bp+0x0A], ax
  2031 000006BC 895E0C              <2> 			mov word [bp+0x0C], bx					
  2032                              <2> 					
  2033 000006BF 59                  <2> 			pop cx
  2034 000006C0 51                  <2> 			push cx												
  2035                              <2> 			
  2036 000006C1 80F920              <2> 			cmp cl,32
  2037 000006C4 7342                <2> 			jae .l2
  2038                              <2> 						
  2039 000006C6 59                  <2> 			pop cx
  2040                              <2> 			stkopen 9
  2041 000006C7 83EC09              <3>  sub word sp, %1
  2042 000006CA 54                  <3>  push sp
  2043 000006CB 5D                  <3>  pop bp
  2044 000006CC 8B460B              <2> 			mov ax,[bp+0x0B]
  2045 000006CF 894600              <2> 			mov word [bp+0], ax
  2046 000006D2 8B460D              <2> 			mov ax,[bp+0x0D]
  2047 000006D5 894602              <2> 			mov word [bp+2], ax
  2048 000006D8 8B4617              <2> 			mov ax,[bp+0x17]
  2049 000006DB 894604              <2> 			mov word [bp+4], ax
  2050 000006DE 8B4619              <2> 			mov ax,[bp+0x19]
  2051 000006E1 894606              <2> 			mov word [bp+6], ax
  2052 000006E4 884E08              <2> 			mov byte [bp+8], cl
  2053 000006E7 E8AD02              <2> 			call proc_calc_prox_dividendo
  2054 000006EA 89E0                <2> 			mov ax,sp
  2055 000006EC 89C5                <2> 			mov bp,ax
  2056 000006EE 8B4604              <2> 			mov word ax,[bp+4]
  2057 000006F1 8B5E06              <2> 			mov word bx,[bp+6]
  2058 000006F4 8A4E08              <2> 			mov byte cl,[bp+8] 
  2059                              <2> 			stkclose 9
  2060 000006F7 83C409              <3>  add word sp, %1
  2061 000006FA 89E2                <2> 			mov dx,sp
  2062 000006FC 89D5                <2> 			mov bp,dx
  2063 000006FE 89460E              <2> 			mov [bp+0x0E],ax
  2064 00000701 895E10              <2> 			mov [bp+0x10],bx
  2065 00000704 51                  <2> 			push cx
  2066 00000705 E93DFF              <2> 			jmp .l1
  2067                              <2> 		.l2:	
  2068 00000708 59                  <2> 		pop cx
  2069                              <2> 			
  2070 00000709 EB16                <2> 		jmp .enddiv
  2071                              <2> 	.qzero:
  2072 0000070B C7460A0000          <2> 		mov word [bp+0x0A], 0
  2073 00000710 C7460C0000          <2> 		mov word [bp+0x0C], 0
  2074 00000715 8B4602              <2> 		mov ax,[bp+2]
  2075 00000718 89460E              <2> 		mov word [bp+0x0E], ax
  2076 0000071B 8B4604              <2> 		mov ax,[bp+4]
  2077 0000071E 894610              <2> 		mov word [bp+0x10], ax	
  2078                              <2> 	.enddiv:
  2079 00000721 C6461200            <2> 		mov byte [bp+0x12], 0
  2080 00000725 EB04                <2> 		jmp .end
  2081                              <2> 	.divbyzero:
  2082 00000727 C6461201            <2> 		mov byte [bp+0x12], 1						
  2083                              <2> 	.end:		
  2084                              <2> 			
  2085 0000072B C3                  <2> 	ret
  2086                              <2> 		
  2087                              <2> proc_mul32:
  2088 0000072C 89E0                <2> 	mov ax,sp
  2089 0000072E 89C5                <2> 	mov bp,ax
  2090                              <2> 	
  2091 00000730 31D2                <2> 	xor dx,dx
  2092 00000732 8B4604              <2> 	mov ax,[bp+4]
  2093 00000735 F76608              <2> 	mul word [bp+8]
  2094                              <2> 	
  2095 00000738 89560A              <2> 	mov word [bp+0x0A], dx
  2096 0000073B 89460C              <2> 	mov word [bp+0x0C], ax	
  2097                              <2> 	
  2098 0000073E 31D2                <2> 	xor dx,dx
  2099 00000740 8B4604              <2> 	mov ax,[bp+4]
  2100 00000743 F76606              <2> 	mul word [bp+6]
  2101                              <2> 		
  2102 00000746 01460A              <2> 	add word [bp+0x0A],ax
  2103                              <2> 	
  2104 00000749 31D2                <2> 	xor dx,dx
  2105 0000074B 8B4602              <2> 	mov ax,[bp+2]
  2106 0000074E F76608              <2> 	mul word [bp+8]
  2107                              <2> 	
  2108 00000751 01460A              <2> 	add word [bp+0x0A],ax
  2109                              <2> 	
  2110 00000754 C3                  <2> 	ret
  2111                              <2> 
  2112                              <2> proc_add32:
  2113 00000755 89E0                <2> 	mov ax,sp
  2114 00000757 89C5                <2> 	mov bp,ax
  2115                              <2> 	
  2116 00000759 8B4602              <2> 	mov ax,[bp+2]
  2117 0000075C 8B5E04              <2> 	mov bx,[bp+4]
  2118 0000075F 8B4E06              <2> 	mov cx,[bp+6]
  2119 00000762 8B5608              <2> 	mov dx,[bp+8]
  2120                              <2> 	
  2121 00000765 01D3                <2> 	add bx,dx
  2122 00000767 11C8                <2> 	adc ax,cx
  2123                              <2> 	
  2124 00000769 89460A              <2> 	mov [bp+0x0A],ax
  2125 0000076C 895E0C              <2> 	mov [bp+0x0C],bx	
  2126                              <2> 	
  2127 0000076F C3                  <2> 	ret
  2128                              <2> 	
  2129                              <2> proc_sub32:
  2130 00000770 89E0                <2> 	mov ax,sp
  2131 00000772 89C5                <2> 	mov bp,ax
  2132                              <2> 	
  2133 00000774 8B4602              <2> 	mov ax,[bp+2]
  2134 00000777 8B5E04              <2> 	mov bx,[bp+4]
  2135 0000077A 8B4E06              <2> 	mov cx,[bp+6]
  2136 0000077D 8B5608              <2> 	mov dx,[bp+8]
  2137                              <2> 	
  2138 00000780 29D3                <2> 	sub bx,dx
  2139 00000782 19C8                <2> 	sbb ax,cx
  2140                              <2> 	
  2141 00000784 89460A              <2> 	mov [bp+0x0A],ax
  2142 00000787 895E0C              <2> 	mov [bp+0x0C],bx	
  2143                              <2> 	
  2144 0000078A C3                  <2> 	ret
  2145                              <2> 		
  2146                              <2> proc_cmp32:
  2147 0000078B 89E0                <2> 	mov ax,sp
  2148 0000078D 89C5                <2> 	mov bp,ax		
  2149                              <2> 		
  2150 0000078F 8B4602              <2> 	mov ax,[bp+2]
  2151 00000792 3B4606              <2> 	cmp word ax,[bp+6]
  2152 00000795 7F04                <2> 	jg .above
  2153 00000797 7C08                <2> 	jl .below
  2154 00000799 740C                <2> 	je .equal
  2155                              <2> 	.above:
  2156 0000079B C6460A01            <2> 		mov byte [bp+0x0A], 00000001b
  2157 0000079F EB14                <2> 		jmp .endcmp
  2158                              <2> 	.below:
  2159 000007A1 C6460A81            <2> 		mov byte [bp+0x0A], 10000001b
  2160 000007A5 EB0E                <2> 		jmp .endcmp
  2161                              <2> 	.equal:
  2162 000007A7 8B4604              <2> 		mov ax,[bp+4]
  2163 000007AA 3B4608              <2> 		cmp word ax,[bp+8]
  2164 000007AD 7FEC                <2> 		jg .above
  2165 000007AF 7CF0                <2> 		jl .below
  2166 000007B1 C6460A00            <2> 		mov byte [bp+0x0A], 00000000b
  2167                              <2> 	.endcmp:		
  2168 000007B5 C3                  <2> 	ret
  2169                              <2> 
  2170                              <2> proc_shl32:
  2171 000007B6 89E0                <2> 	mov ax,sp
  2172 000007B8 89C5                <2> 	mov bp,ax
  2173                              <2> 	
  2174 000007BA 31C0                <2> 	xor ax,ax
  2175 000007BC 8A4606              <2> 	mov byte al,[bp+6]
  2176 000007BF B310                <2> 	mov bl,10h
  2177 000007C1 F6F3                <2> 	div bl
  2178                              <2> 					
  2179 000007C3 3C01                <2> 	cmp al,1
  2180 000007C5 7204                <2> 	jb .zero
  2181 000007C7 7418                <2> 	je .one	
  2182 000007C9 EB27                <2> 	jmp .above
  2183                              <2> 	.zero:	
  2184 000007CB B110                <2> 		mov cl,10h
  2185 000007CD 28E1                <2> 		sub cl,ah
  2186 000007CF 8B5E04              <2> 		mov bx,[bp+4]		
  2187 000007D2 D3EB                <2> 		shr bx,cl
  2188                              <2> 		
  2189 000007D4 88E1                <2> 		mov cl,ah		
  2190 000007D6 D36602              <2> 		shl word [bp+2],cl
  2191 000007D9 015E02              <2> 		add word [bp+2],bx				
  2192 000007DC D36604              <2> 		shl word [bp+4],cl
  2193 000007DF EB1B                <2> 		jmp .endzo
  2194                              <2> 	.one:
  2195 000007E1 88E1                <2> 		mov cl,ah
  2196 000007E3 8B5E04              <2> 		mov bx, [bp+4]				
  2197 000007E6 D3E3                <2> 		shl bx, cl 
  2198 000007E8 895E02              <2> 		mov word [bp+2], bx
  2199 000007EB C746040000          <2> 		mov word [bp+4], 0
  2200 000007F0 EB0A                <2> 		jmp .endzo
  2201                              <2> 	.above:		
  2202 000007F2 C746020000          <2> 		mov word [bp+2], 0
  2203 000007F7 C746040000          <2> 		mov word [bp+4], 0
  2204                              <2> 	.endzo:	
  2205                              <2> 	
  2206 000007FC C3                  <2> 	ret
  2207                              <2> 	
  2208                              <2> proc_shr32:
  2209 000007FD 89E0                <2> 	mov ax,sp
  2210 000007FF 89C5                <2> 	mov bp,ax
  2211                              <2> 	
  2212 00000801 31C0                <2> 	xor ax,ax
  2213 00000803 8A4606              <2> 	mov byte al,[bp+6]
  2214 00000806 B310                <2> 	mov bl,10h
  2215 00000808 F6F3                <2> 	div bl
  2216                              <2> 					
  2217 0000080A 3C01                <2> 	cmp al,1
  2218 0000080C 7204                <2> 	jb .zero
  2219 0000080E 7418                <2> 	je .one	
  2220 00000810 EB27                <2> 	jmp .above
  2221                              <2> 	.zero:	
  2222 00000812 B110                <2> 		mov cl,10h
  2223 00000814 28E1                <2> 		sub cl,ah		
  2224 00000816 8B5E02              <2> 		mov bx,[bp+2]		
  2225 00000819 D3E3                <2> 		shl bx,cl
  2226                              <2> 		
  2227 0000081B 88E1                <2> 		mov cl,ah		
  2228 0000081D D36E02              <2> 		shr word [bp+2],cl
  2229 00000820 D36E04              <2> 		shr word [bp+4],cl
  2230 00000823 015E04              <2> 		add word [bp+4],bx	
  2231 00000826 EB1B                <2> 		jmp .endzo
  2232                              <2> 	.one:			
  2233 00000828 88E1                <2> 		mov cl,ah
  2234 0000082A 8B5E02              <2> 		mov bx,[bp+2]
  2235 0000082D D3EB                <2> 		shr bx,cl
  2236 0000082F C746020000          <2> 		mov word [bp+2],0 
  2237 00000834 895E04              <2> 		mov word [bp+4],bx
  2238 00000837 EB0A                <2> 		jmp .endzo
  2239                              <2> 	.above:		
  2240 00000839 C746020000          <2> 		mov word [bp+2],0
  2241 0000083E C746040000          <2> 		mov word [bp+4],0
  2242                              <2> 	.endzo:		
  2243                              <2> 
  2244 00000843 C3                  <2> 	ret
  2245                              <2> 	
  2246                              <2> proc__lzcount16:
  2247 00000844 89E0                <2> 	mov ax,sp
  2248 00000846 89C5                <2> 	mov bp,ax
  2249                              <2> 	
  2250 00000848 B100                <2> 	mov cl,0
  2251                              <2> 		
  2252 0000084A 8A6603              <2> 	mov ah, [bp+3]	
  2253 0000084D 80E4F0              <2> 	and ah,0xF0
  2254 00000850 80FC00              <2> 	cmp ah,0
  2255 00000853 7529                <2> 	jnz .end
  2256 00000855 FEC1                <2> 	inc cl
  2257                              <2> 	
  2258 00000857 8A6603              <2> 	mov ah, [bp+3]
  2259 0000085A 80E40F              <2> 	and ah,0x0F
  2260 0000085D 80FC00              <2> 	cmp ah,0
  2261 00000860 751C                <2> 	jnz .end
  2262 00000862 FEC1                <2> 	inc cl
  2263                              <2> 	
  2264 00000864 8A6602              <2> 	mov ah, [bp+2]
  2265 00000867 80E4F0              <2> 	and ah,0xF0
  2266 0000086A 80FC00              <2> 	cmp ah,0
  2267 0000086D 750F                <2> 	jnz .end
  2268 0000086F FEC1                <2> 	inc cl
  2269                              <2> 	
  2270 00000871 8A6602              <2> 	mov ah, [bp+2]
  2271 00000874 80E40F              <2> 	and ah,0x0F
  2272 00000877 80FC00              <2> 	cmp ah,0
  2273 0000087A 7502                <2> 	jnz .end
  2274 0000087C FEC1                <2> 	inc cl
  2275                              <2> 		
  2276                              <2> 	.end:
  2277 0000087E 884E04              <2> 	mov byte [bp+4], cl
  2278                              <2> 	
  2279 00000881 C3                  <2> 	ret
  2280                              <2> 
  2281                              <2> proc__lzbitcount16:
  2282 00000882 89E0                <2> 	mov ax,sp
  2283 00000884 89C5                <2> 	mov bp,ax
  2284                              <2> 	
  2285 00000886 8B4602              <2> 	mov word ax,[bp+2]
  2286                              <2> 		
  2287 00000889 B100                <2> 	mov cl,0
  2288                              <2> 	.l1:
  2289 0000088B 80F910              <2> 		cmp cl,16
  2290 0000088E 7310                <2> 		jae .l2
  2291                              <2> 		
  2292 00000890 89C3                <2> 		mov bx,ax
  2293 00000892 D3E3                <2> 		shl bx,cl
  2294 00000894 C1EB0F              <2> 		shr bx,15
  2295                              <2> 		
  2296 00000897 83FB00              <2> 		cmp bx,0
  2297 0000089A 7504                <2> 		jnz .l2
  2298                              <2> 		
  2299 0000089C FEC1                <2> 		inc cl		
  2300 0000089E EBEB                <2> 		jmp .l1
  2301                              <2> 	.l2:
  2302                              <2> 	
  2303 000008A0 884E04              <2> 	mov byte [bp+4], cl
  2304                              <2> 	
  2305 000008A3 C3                  <2> 	ret
  2306                              <2> 	
  2307                              <2> proc__lzbitcount8:
  2308 000008A4 89E0                <2> 	mov ax,sp
  2309 000008A6 89C5                <2> 	mov bp,ax
  2310                              <2> 	
  2311 000008A8 8A4602              <2> 	mov byte al,[bp+2]
  2312                              <2> 	
  2313 000008AB B100                <2> 	mov cl,0
  2314                              <2> 	.l1:
  2315 000008AD 80F908              <2> 		cmp cl,8
  2316 000008B0 7410                <2> 		je .l2
  2317                              <2> 		
  2318 000008B2 88C3                <2> 		mov bl,al
  2319 000008B4 D2E3                <2> 		shl bl,cl
  2320 000008B6 C0EB07              <2> 		shr bl,7
  2321                              <2> 		
  2322 000008B9 80FB00              <2> 		cmp bl,0
  2323 000008BC 7504                <2> 		jnz .l2
  2324                              <2> 		
  2325 000008BE FEC1                <2> 		inc cl		
  2326 000008C0 EBEB                <2> 		jmp .l1
  2327                              <2> 	.l2:
  2328                              <2> 	
  2329 000008C2 884E03              <2> 	mov byte [bp+3], cl
  2330                              <2> 		
  2331 000008C5 C3                  <2> 	ret
  2332                              <2> 	
  2333                              <2> proc_calc_dividendo1:
  2334 000008C6 89E0                <2> 	mov ax,sp
  2335 000008C8 89C5                <2> 	mov bp,ax
  2336                              <2> 	
  2337 000008CA 8B4606              <2> 	mov ax,[bp+6]
  2338 000008CD 8B5E08              <2> 	mov bx,[bp+8]
  2339 000008D0 55                  <2> 	push bp
  2340                              <2> 	__lzbitcount32 ax, bx, cl
  2341 000008D1 53                  <3>  push %2
  2342                              <3>  __lzbitcount16 %1, cl
  2343                              <4>  stkopen 3
  2344 000008D2 83EC03              <5>  sub word sp, %1
  2345 000008D5 54                  <5>  push sp
  2346 000008D6 5D                  <5>  pop bp
  2347 000008D7 894600              <4>  mov word [bp+0], %1
  2348 000008DA E8A5FF              <4>  call proc__lzbitcount16
  2349 000008DD 54                  <4>  push sp
  2350 000008DE 5D                  <4>  pop bp
  2351 000008DF 8A4E02              <4>  mov byte %2, [bp+2]
  2352                              <4>  stkclose 3
  2353 000008E2 83C403              <5>  add word sp, %1
  2354 000008E5 58                  <3>  pop ax
  2355 000008E6 80F910              <3>  cmp cl,16
  2356 000008E9 7217                <3>  jb .end
  2357 000008EB 51                  <3>  push cx
  2358                              <3>  __lzbitcount16 ax, al
  2359                              <4>  stkopen 3
  2360 000008EC 83EC03              <5>  sub word sp, %1
  2361 000008EF 54                  <5>  push sp
  2362 000008F0 5D                  <5>  pop bp
  2363 000008F1 894600              <4>  mov word [bp+0], %1
  2364 000008F4 E88BFF              <4>  call proc__lzbitcount16
  2365 000008F7 54                  <4>  push sp
  2366 000008F8 5D                  <4>  pop bp
  2367 000008F9 8A4602              <4>  mov byte %2, [bp+2]
  2368                              <4>  stkclose 3
  2369 000008FC 83C403              <5>  add word sp, %1
  2370 000008FF 59                  <3>  pop cx
  2371 00000900 00C1                <3>  add cl,al
  2372                              <3>  .end:
  2373 00000902 88C9                <3>  mov byte %3, cl
  2374 00000904 5D                  <2> 	pop bp
  2375 00000905 B320                <2> 	mov bl,32
  2376 00000907 28CB                <2> 	sub bl,cl
  2377 00000909 53                  <2> 	push bx
  2378                              <2> 		
  2379 0000090A 8B4602              <2> 	mov ax,[bp+2]
  2380 0000090D 8B5604              <2> 	mov dx,[bp+4]
  2381 00000910 55                  <2> 	push bp
  2382                              <2> 	__shr32 ax, dx, cl
  2383                              <3>  stkopen 5
  2384 00000911 83EC05              <4>  sub word sp, %1
  2385 00000914 54                  <4>  push sp
  2386 00000915 5D                  <4>  pop bp
  2387 00000916 894600              <3>  mov word [bp+0], %1
  2388 00000919 895602              <3>  mov word [bp+2], %2
  2389 0000091C 884E04              <3>  mov byte [bp+4], %3
  2390 0000091F E8DBFE              <3>  call proc_shr32
  2391 00000922 54                  <3>  push sp
  2392 00000923 5D                  <3>  pop bp
  2393 00000924 8B4600              <3>  mov word %1, [bp+0]
  2394 00000927 8B5602              <3>  mov word %2, [bp+2]
  2395                              <3>  stkclose 5
  2396 0000092A 83C405              <4>  add word sp, %1
  2397 0000092D 5D                  <2> 	pop bp
  2398 0000092E 50                  <2> 	push ax
  2399 0000092F 52                  <2> 	push dx	
  2400                              <2> 	
  2401 00000930 8B4E06              <2> 	mov cx,[bp+6]
  2402 00000933 8B5E08              <2> 	mov bx,[bp+8]
  2403                              <2> 	
  2404 00000936 55                  <2> 	push bp
  2405                              <2> 	__cmp32 ax, dx, cx, bx, cl
  2406                              <3>  stkopen 9
  2407 00000937 83EC09              <4>  sub word sp, %1
  2408 0000093A 54                  <4>  push sp
  2409 0000093B 5D                  <4>  pop bp
  2410 0000093C 894600              <3>  mov word [bp+0], %1
  2411 0000093F 895602              <3>  mov word [bp+2], %2
  2412 00000942 894E04              <3>  mov word [bp+4], %3
  2413 00000945 895E06              <3>  mov word [bp+6], %4
  2414 00000948 E840FE              <3>  call proc_cmp32
  2415 0000094B 54                  <3>  push sp
  2416 0000094C 5D                  <3>  pop bp
  2417 0000094D 8A4E08              <3>  mov byte %5, [bp+8]
  2418                              <3>  stkclose 9
  2419 00000950 83C409              <4>  add word sp, %1
  2420 00000953 5D                  <2> 	pop bp
  2421 00000954 5A                  <2> 	pop dx
  2422 00000955 58                  <2> 	pop ax
  2423 00000956 5B                  <2> 	pop bx
  2424                              <2> 		
  2425 00000957 80F900              <2> 	cmp cl,0
  2426 0000095A 7D2D                <2> 	jge .l1
  2427                              <2> 		stkopen 9
  2428 0000095C 83EC09              <3>  sub word sp, %1
  2429 0000095F 54                  <3>  push sp
  2430 00000960 5D                  <3>  pop bp
  2431 00000961 8B4E0B              <2> 		mov cx,[bp+0x0B]
  2432 00000964 894E00              <2> 		mov word [bp+0], cx
  2433 00000967 8B4E0D              <2> 		mov cx,[bp+0x0D]
  2434 0000096A 894E02              <2> 		mov word [bp+2], cx
  2435 0000096D 894604              <2> 		mov word [bp+4], ax
  2436 00000970 895606              <2> 		mov word [bp+6], dx
  2437 00000973 885E08              <2> 		mov byte [bp+8], bl
  2438 00000976 E81E00              <2> 		call proc_calc_prox_dividendo
  2439 00000979 89E0                <2> 		mov ax,sp
  2440 0000097B 89C5                <2> 		mov bp,ax
  2441 0000097D 8B4604              <2> 		mov word ax,[bp+4]
  2442 00000980 8B5606              <2> 		mov word dx,[bp+6]
  2443 00000983 8A5E08              <2> 		mov byte bl,[bp+8] 
  2444                              <2> 		stkclose 9		 
  2445 00000986 83C409              <3>  add word sp, %1
  2446                              <2> 	.l1:
  2447                              <2> 	
  2448 00000989 89E1                <2> 	mov cx,sp
  2449 0000098B 89CD                <2> 	mov bp,cx
  2450 0000098D 89460A              <2> 	mov word [bp+0x0A], ax
  2451 00000990 89560C              <2> 	mov word [bp+0x0C], dx
  2452 00000993 885E0E              <2> 	mov byte [bp+0x0E], bl	 
  2453                              <2> 	
  2454 00000996 C3                  <2> 	ret
  2455                              <2> 
  2456                              <2> proc_calc_prox_dividendo:
  2457 00000997 89E0                <2> 	mov ax,sp
  2458 00000999 89C5                <2> 	mov bp,ax
  2459                              <2> 	
  2460 0000099B 30E4                <2> 	xor ah,ah	
  2461 0000099D 8A460A              <2> 	mov al,[bp+0x0A]
  2462 000009A0 B310                <2> 	mov bl,10h
  2463 000009A2 F6F3                <2> 	div bl
  2464                              <2> 	
  2465 000009A4 3C00                <2> 	cmp al,0
  2466 000009A6 7402                <2> 	jz .zero
  2467 000009A8 EB05                <2> 	jmp .one
  2468                              <2> 	.zero:
  2469 000009AA 8B5E02              <2> 		mov bx,[bp+2]
  2470 000009AD EB03                <2> 		jmp .endcmp
  2471                              <2> 	.one:
  2472 000009AF 8B5E04              <2> 		mov bx,[bp+4]		
  2473                              <2> 	.endcmp:
  2474                              <2> 		
  2475 000009B2 88E1                <2> 	mov cl,ah
  2476 000009B4 D3E3                <2> 	shl bx,cl
  2477 000009B6 C1EB0F              <2> 	shr bx,15
  2478                              <2> 	
  2479 000009B9 8B4606              <2> 	mov ax,[bp+6]
  2480 000009BC 8B5608              <2> 	mov dx,[bp+8]
  2481 000009BF 53                  <2> 	push bx
  2482                              <2> 	__shl32 ax, dx, 1
  2483                              <3>  stkopen 5
  2484 000009C0 83EC05              <4>  sub word sp, %1
  2485 000009C3 54                  <4>  push sp
  2486 000009C4 5D                  <4>  pop bp
  2487 000009C5 894600              <3>  mov word [bp+0], %1
  2488 000009C8 895602              <3>  mov word [bp+2], %2
  2489 000009CB C6460401            <3>  mov byte [bp+4], %3
  2490 000009CF E8E4FD              <3>  call proc_shl32
  2491 000009D2 54                  <3>  push sp
  2492 000009D3 5D                  <3>  pop bp
  2493 000009D4 8B4600              <3>  mov word %1, [bp+0]
  2494 000009D7 8B5602              <3>  mov word %2, [bp+2]
  2495                              <3>  stkclose 5
  2496 000009DA 83C405              <4>  add word sp, %1
  2497 000009DD 5B                  <2> 	pop bx
  2498                              <2> 	
  2499 000009DE 01DA                <2> 	add dx,bx
  2500 000009E0 83D000              <2> 	adc ax,0
  2501                              <2> 
  2502 000009E3 89E1                <2> 	mov cx,sp
  2503 000009E5 89CD                <2> 	mov bp,cx	
  2504 000009E7 894606              <2> 	mov [bp+6],ax
  2505 000009EA 895608              <2> 	mov [bp+8],dx
  2506                              <2> 	
  2507 000009ED FE460A              <2> 	inc byte [bp+0x0A]
  2508                              <2> 	
  2509 000009F0 C3                  <2> 	ret
  2510                              <2> 	
  2511                              <2> %endif
  2512                              <1> 	%include "lib/system.mac"
  2513                              <2>  
  2514                              <2> %ifndef SYSTEM_MAC
  2515                              <2>  	%define SYSTEM_MAC
  2516                              <2>  	
  2517                              <2> 	%ifndef TRUE
  2518                              <2> 		%define TRUE 01h
  2519                              <2> 	%endif
  2520                              <2> 	%ifndef FALSE
  2521                              <2> 		%define FALSE 00h
  2522                              <2> 	%endif
  2523                              <2> 	
  2524                              <2> %macro vlodsb 3
  2525                              <2> 	vlodsb cs, %1, %2, %3
  2526                              <2> %endmacro
  2527                              <2> 
  2528                              <2> %macro vstosb 3
  2529                              <2> 	vstosb cs, %1, %2, %3
  2530                              <2> %endmacro
  2531                              <2> 	 	
  2532                              <2> %macro int16toreg 2
  2533                              <2> 	int16toreg cs, %1, %2
  2534                              <2> %endmacro
  2535                              <2> 
  2536                              <2> %macro regtoint16 2
  2537                              <2> 	regtoint16 %1, cs, %2
  2538                              <2> %endmacro
  2539                              <2> 
  2540                              <2> %macro vstosb 4
  2541                              <2> 	push %1
  2542                              <2> 	pop ds
  2543                              <2> 	mov si,%2
  2544                              <2> 	add si,%3
  2545                              <2> 	mov byte [si],%4	
  2546                              <2> %endmacro
  2547                              <2> 
  2548                              <2> %macro vlodsb 4
  2549                              <2> 	push %1
  2550                              <2> 	pop ds
  2551                              <2> 	mov si,%2
  2552                              <2> 	add si,%3
  2553                              <2> 	mov byte %4,[si]	
  2554                              <2> %endmacro 	 
  2555                              <2> 
  2556                              <2> %macro int16toreg 3
  2557                              <2> 	push %2
  2558                              <2> 	push %1
  2559                              <2> 	pop ds
  2560                              <2> 	pop si
  2561                              <2> 	mov word %3,[si]	
  2562                              <2> %endmacro
  2563                              <2> 
  2564                              <2> %macro regtoint16 3
  2565                              <2> 	push %3
  2566                              <2> 	push %2
  2567                              <2> 	pop ds
  2568                              <2> 	pop si
  2569                              <2> 	mov word [si],%1	
  2570                              <2> %endmacro
  2571                              <2> 
  2572                              <2> %macro mov32 2
  2573                              <2> 	mov32 cs, %1, cs, %2
  2574                              <2> %endmacro
  2575                              <2> 
  2576                              <2> %macro mov16 2
  2577                              <2> 	mov16 cs, %1, cs, %2
  2578                              <2> %endmacro
  2579                              <2> 
  2580                              <2> %macro mov32 4
  2581                              <2> 	mov ax,%3
  2582                              <2> 	mov ds,ax
  2583                              <2> 	mov cx,[%4+2]
  2584                              <2> 	mov dx,[%4]
  2585                              <2> 	mov ax,%1
  2586                              <2> 	mov ds,ax
  2587                              <2> 	mov [%2+2],cx
  2588                              <2> 	mov [%2],dx
  2589                              <2> %endmacro
  2590                              <2> 
  2591                              <2> %macro mov16 4
  2592                              <2> 	mov ax,%3
  2593                              <2> 	mov ds,ax
  2594                              <2> 	mov bx,[%4]
  2595                              <2> 	mov ax,%1
  2596                              <2> 	mov ds,ax
  2597                              <2> 	mov [%2],bx
  2598                              <2> %endmacro
  2599                              <2>  	 	
  2600                              <2> %macro mformat 4
  2601                              <2> 	stkopen 8
  2602                              <2> 	mov word [ bp + 0 ], %1
  2603                              <2> 	mov word [ bp + 2 ], %2
  2604                              <2> 	mov word [ bp + 4 ], %3
  2605                              <2> 	mov word [ bp + 6 ], %4
  2606                              <2> 	call kernel_segment:mformat
  2607                              <2> 	stkclose 8
  2608                              <2> %endmacro
  2609                              <2> 
  2610                              <2> %macro malloc 6
  2611                              <2> 	stkopen 0Bh
  2612                              <2> 	mov word [ bp + 4 ], %3
  2613                              <2> 	mov word [ bp + 6 ], %4
  2614                              <2> 	mov word [ bp + 8 ], %5	
  2615                              <2> 	call kernel_segment:malloc
  2616                              <2> 	push sp
  2617                              <2> 	pop bp
  2618                              <2> 	mov word %1, [ bp ]
  2619                              <2> 	mov word %2, [ bp + 2 ]
  2620                              <2> 	mov byte %6, [ bp + 0x0A ]
  2621                              <2> 	stkclose 0Bh
  2622                              <2> %endmacro 	
  2623                              <2> 
  2624                              <2> %macro laddr 2
  2625                              <2> 	laddr %1, %2, %1, %2
  2626                              <2> %endmacro
  2627                              <2> 
  2628                              <2> %macro faddr 2
  2629                              <2> 	faddr %1, %2, %1, %2
  2630                              <2> %endmacro
  2631                              <2>  	
  2632                              <2> %macro laddr 4
  2633                              <2> 	stkopen 8
  2634                              <2> 	mov word [ bp + 4 ], %3
  2635                              <2> 	mov word [ bp + 6 ], %4	
  2636                              <2> 	call kernel_segment:laddr
  2637                              <2> 	push sp
  2638                              <2> 	pop bp
  2639                              <2> 	mov word %1, [ bp + 0 ]
  2640                              <2> 	mov word %2, [ bp + 2 ]	
  2641                              <2> 	stkclose 8
  2642                              <2> %endmacro
  2643                              <2> 
  2644                              <2> %macro faddr 4
  2645                              <2> 	stkopen 8
  2646                              <2> 	mov word [ bp + 4 ], %3
  2647                              <2> 	mov word [ bp + 6 ], %4	
  2648                              <2> 	call kernel_segment:faddr
  2649                              <2> 	push sp
  2650                              <2> 	pop bp
  2651                              <2> 	mov word %1, [ bp + 0 ]
  2652                              <2> 	mov word %2, [ bp + 2 ]	
  2653                              <2> 	stkclose 8
  2654                              <2> %endmacro	
  2655                              <2>  
  2656                              <2> 
  2657                              <2> %macro stkopen 1		
  2658                              <2> 	sub word sp, %1
  2659                              <2> 	push sp
  2660                              <2> 	pop bp
  2661                              <2> %endmacro
  2662                              <2> 
  2663                              <2> %macro stkclose 1
  2664                              <2> 	add word sp, %1
  2665                              <2> %endmacro
  2666                              <2> 
  2667                              <2> %macro stkload 1-* 	
  2668                              <2>  	%rep %0
  2669                              <2>  	 	%rotate -1
  2670                              <2>  		pop %1
  2671                              <2>  	%endrep
  2672                              <2>  	%rep %0
  2673                              <2>  		push %1
  2674                              <2>  		%rotate 1
  2675                              <2>  	%endrep
  2676                              <2> %endmacro
  2677                              <2> 
  2678                              <2> %macro stkpush 1-* 	
  2679                              <2>  	%rep %0
  2680                              <2>  		push %1
  2681                              <2>  		%rotate 1
  2682                              <2>  	%endrep 	
  2683                              <2> %endmacro
  2684                              <2>  
  2685                              <2> %macro stkpop 1-*
  2686                              <2>  	%rep %0
  2687                              <2>  	 	%rotate -1
  2688                              <2>  		pop %1
  2689                              <2>  	%endrep 	 	
  2690                              <2> %endmacro
  2691                              <2> 
  2692                              <2> %endif 
  2693                              <1> 
  2694                              <1> %macro chgsig 1
  2695                              <1> 	chgsig cs, %1
  2696                              <1> %endmacro
  2697                              <1> 
  2698                              <1> %macro cmp16 3
  2699                              <1> 	cmp16 cs, %1, cs, %2, %3
  2700                              <1> %endmacro
  2701                              <1> 
  2702                              <1> %macro mul16 2
  2703                              <1> 	mul16 cs, %1, cs, %2
  2704                              <1> %endmacro
  2705                              <1> 
  2706                              <1> %macro div16 2
  2707                              <1> 	div16 cs, %1, cs, %2
  2708                              <1> %endmacro
  2709                              <1> 
  2710                              <1> %macro mod16 2
  2711                              <1> 	mod16 cs, %1, cs, %2
  2712                              <1> %endmacro
  2713                              <1> 
  2714                              <1> %macro inc16 1
  2715                              <1> 	inc16 cs, %1
  2716                              <1> %endmacro
  2717                              <1> 
  2718                              <1> %macro dec16 1
  2719                              <1> 	dec16 cs, %1
  2720                              <1> %endmacro
  2721                              <1> 
  2722                              <1> %macro add16 2
  2723                              <1> 	add16 cs, %1, cs, %2
  2724                              <1> %endmacro
  2725                              <1> 
  2726                              <1> %macro sub16 2
  2727                              <1> 	sub16 cs, %1, cs, %2
  2728                              <1> %endmacro
  2729                              <1> 
  2730                              <1> %macro int32to16 2
  2731                              <1> 	int32to16 cs, %1, %2
  2732                              <1> %endmacro
  2733                              <1> 
  2734                              <1> %macro int16to32 2
  2735                              <1> 	int16to32 %1, cs, %2
  2736                              <1> %endmacro
  2737                              <1> 
  2738                              <1> %macro setsig 1
  2739                              <1> 	setsig cs, %1
  2740                              <1> %endmacro
  2741                              <1> 
  2742                              <1> %macro clrsig 1
  2743                              <1> 	clrsig cs, %1
  2744                              <1> %endmacro
  2745                              <1> 
  2746                              <1> %macro idiv32 5
  2747                              <1> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2748                              <1> %endmacro
  2749                              <1> 
  2750                              <1> %macro imul32 3
  2751                              <1> 	imul32 cs, %1, cs, %2, cs, %3
  2752                              <1> %endmacro
  2753                              <1> 
  2754                              <1> %macro div32 5
  2755                              <1> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2756                              <1> %endmacro
  2757                              <1> 
  2758                              <1> %macro mul32 3
  2759                              <1> 	mul32 cs, %1, cs, %2, cs, %3
  2760                              <1> %endmacro
  2761                              <1> 	
  2762                              <1> %macro add32 3
  2763                              <1> 	add32 cs, %1, cs, %2, cs, %3
  2764                              <1> %endmacro
  2765                              <1> 
  2766                              <1> %macro sub32 3
  2767                              <1> 	sub32 cs, %1, cs, %2, cs, %3
  2768                              <1> %endmacro
  2769                              <1> 
  2770                              <1> %macro int32to16 3
  2771                              <1> 	stkopen 0x06
  2772                              <1> 	mov ax,%1
  2773                              <1> 	mov ds,ax
  2774                              <1> 	mov ax,[%2+2]
  2775                              <1> 	mov word [bp+0], ax
  2776                              <1> 	mov ax,[%2]	
  2777                              <1> 	mov word [bp+2], ax
  2778                              <1> 	call proc_int32to16
  2779                              <1> 	mov ax,sp
  2780                              <1> 	mov bp,ax
  2781                              <1> 	mov ax,[bp+4]
  2782                              <1> 	mov word %3, ax	
  2783                              <1> 	stkclose 0x06
  2784                              <1> %endmacro
  2785                              <1> 
  2786                              <1> %macro int16to32 3
  2787                              <1> 	stkopen 0x06
  2788                              <1> 	mov word [bp+0], %1	
  2789                              <1> 	call proc_int16to32
  2790                              <1> 	mov ax,sp
  2791                              <1> 	mov bp,ax
  2792                              <1> 	mov ax,%2
  2793                              <1> 	mov ds,ax
  2794                              <1> 	mov ax,[bp+2]
  2795                              <1> 	mov [%3+2],ax
  2796                              <1> 	mov ax,[bp+4]
  2797                              <1> 	mov [%3],ax	
  2798                              <1> 	stkclose 0x06
  2799                              <1> %endmacro
  2800                              <1> 
  2801                              <1> %macro setsig 2
  2802                              <1> 	stkopen 0x02
  2803                              <1> 	mov ax,%1
  2804                              <1> 	mov ds,ax
  2805                              <1> 	mov ax,[%2+2]
  2806                              <1> 	mov word [bp+0], ax
  2807                              <1> 	call proc_setsig
  2808                              <1> 	mov ax,sp
  2809                              <1> 	mov bp,ax
  2810                              <1> 	mov ax,%1
  2811                              <1> 	mov ds,ax
  2812                              <1> 	mov ax,[bp+0]
  2813                              <1> 	mov word [%2+2], ax
  2814                              <1> 	stkclose 0x02
  2815                              <1> %endmacro
  2816                              <1> 
  2817                              <1> %macro clrsig 2
  2818                              <1> 	stkopen 0x02
  2819                              <1> 	mov ax,%1
  2820                              <1> 	mov ds,ax
  2821                              <1> 	mov ax,[%2+2]
  2822                              <1> 	mov word [bp+0], ax
  2823                              <1> 	call proc_clrsig
  2824                              <1> 	mov ax,sp
  2825                              <1> 	mov bp,ax
  2826                              <1> 	mov ax,%1
  2827                              <1> 	mov ds,ax
  2828                              <1> 	mov ax,[bp+0]
  2829                              <1> 	mov word [%2+2], ax
  2830                              <1> 	stkclose 0x02
  2831                              <1> %endmacro
  2832                              <1> 
  2833                              <1> %macro div32 10
  2834                              <1> 	stkopen 0x11
  2835                              <1> 	mov ax,%1
  2836                              <1> 	mov ds,ax
  2837                              <1> 	mov ax,[%2+2]
  2838                              <1> 	mov word [bp+0], ax
  2839                              <1> 	mov ax,[%2]
  2840                              <1> 	mov word [bp+2], ax
  2841                              <1> 	mov ax,%3
  2842                              <1> 	mov ds,ax
  2843                              <1> 	mov ax,[%4+2]
  2844                              <1> 	mov word [bp+4], ax
  2845                              <1> 	mov ax,[%4]
  2846                              <1> 	mov word [bp+6], ax
  2847                              <1> 	call proc_div32
  2848                              <1> 	mov ax,sp
  2849                              <1> 	mov bp,ax
  2850                              <1> 	mov ax,%5
  2851                              <1> 	mov ds,ax
  2852                              <1> 	mov word ax, [bp+8]
  2853                              <1> 	mov word [%6+2], ax
  2854                              <1> 	mov word ax, [bp+0x0A]
  2855                              <1> 	mov word [%6], ax
  2856                              <1> 	mov ax,%7
  2857                              <1> 	mov ds,ax
  2858                              <1> 	mov word ax,[bp+0x0C]
  2859                              <1> 	mov word [%8+2],ax
  2860                              <1> 	mov word ax,[bp+0x0E]
  2861                              <1> 	mov word [%8],ax
  2862                              <1> 	mov ax,%9
  2863                              <1> 	mov ds,ax
  2864                              <1> 	mov byte al,[bp+0x10]
  2865                              <1> 	mov byte [%10],al
  2866                              <1> 	stkclose 0x11
  2867                              <1> %endmacro
  2868                              <1> 	
  2869                              <1> %macro mul32 6
  2870                              <1> 	stkopen 0x0C
  2871                              <1> 	mov ax,%1
  2872                              <1> 	mov ds,ax
  2873                              <1> 	mov ax,[%2+2]
  2874                              <1> 	mov word [bp+0], ax
  2875                              <1> 	mov ax,[%2]
  2876                              <1> 	mov word [bp+2], ax
  2877                              <1> 	mov ax,%3
  2878                              <1> 	mov ds,ax
  2879                              <1> 	mov ax,[%4+2]
  2880                              <1> 	mov word [bp+4], ax
  2881                              <1> 	mov ax,[%4]
  2882                              <1> 	mov word [bp+6], ax
  2883                              <1> 	call proc_mul32
  2884                              <1> 	mov ax,sp
  2885                              <1> 	mov bp,ax
  2886                              <1> 	mov ax,%5
  2887                              <1> 	mov ds,ax
  2888                              <1> 	mov word ax, [bp+8]
  2889                              <1> 	mov word [%6+2], ax
  2890                              <1> 	mov word ax, [bp+0x0A]
  2891                              <1> 	mov word [%6], ax
  2892                              <1> 	stkclose 0x0C
  2893                              <1> %endmacro	
  2894                              <1> 	
  2895                              <1> %macro add32 6
  2896                              <1> 	stkopen 0x0C
  2897                              <1> 	mov ax,%1
  2898                              <1> 	mov ds,ax
  2899                              <1> 	mov ax,[%2+2]
  2900                              <1> 	mov word [bp+0], ax
  2901                              <1> 	mov ax,[%2]
  2902                              <1> 	mov word [bp+2], ax
  2903                              <1> 	mov ax,%3
  2904                              <1> 	mov ds,ax
  2905                              <1> 	mov ax,[%4+2]
  2906                              <1> 	mov word [bp+4], ax
  2907                              <1> 	mov ax,[%4]
  2908                              <1> 	mov word [bp+6], ax
  2909                              <1> 	call proc_add32
  2910                              <1> 	mov ax,sp
  2911                              <1> 	mov bp,ax
  2912                              <1> 	mov ax,%5
  2913                              <1> 	mov ds,ax
  2914                              <1> 	mov word ax, [bp+8]
  2915                              <1> 	mov word [%6+2], ax
  2916                              <1> 	mov word ax, [bp+0x0A]
  2917                              <1> 	mov word [%6], ax
  2918                              <1> 	stkclose 0x0C
  2919                              <1> %endmacro
  2920                              <1> 
  2921                              <1> %macro sub32 6
  2922                              <1> 	stkopen 0x0C
  2923                              <1> 	mov ax,%1
  2924                              <1> 	mov ds,ax
  2925                              <1> 	mov ax,[%2+2]
  2926                              <1> 	mov word [bp+0], ax
  2927                              <1> 	mov ax,[%2]
  2928                              <1> 	mov word [bp+2], ax
  2929                              <1> 	mov ax,%3
  2930                              <1> 	mov ds,ax
  2931                              <1> 	mov ax,[%4+2]
  2932                              <1> 	mov word [bp+4], ax
  2933                              <1> 	mov ax,[%4]
  2934                              <1> 	mov word [bp+6], ax
  2935                              <1> 	call proc_sub32
  2936                              <1> 	mov ax,sp
  2937                              <1> 	mov bp,ax
  2938                              <1> 	mov ax,%5
  2939                              <1> 	mov ds,ax
  2940                              <1> 	mov word ax, [bp+8]
  2941                              <1> 	mov word [%6+2], ax
  2942                              <1> 	mov word ax, [bp+0x0A]
  2943                              <1> 	mov word [%6], ax
  2944                              <1> 	stkclose 0x0C
  2945                              <1> %endmacro
  2946                              <1> 
  2947                              <1> %macro idiv32 10
  2948                              <1> 	stkopen 0x11
  2949                              <1> 	mov ax,%1
  2950                              <1> 	mov ds,ax
  2951                              <1> 	mov ax,[%2+2]
  2952                              <1> 	mov word [bp+0], ax
  2953                              <1> 	mov ax,[%2]
  2954                              <1> 	mov word [bp+2], ax
  2955                              <1> 	mov ax,%3
  2956                              <1> 	mov ds,ax
  2957                              <1> 	mov ax,[%4+2]
  2958                              <1> 	mov word [bp+4], ax
  2959                              <1> 	mov ax,[%4]
  2960                              <1> 	mov word [bp+6], ax
  2961                              <1> 	call proc_idiv32
  2962                              <1> 	mov ax,sp
  2963                              <1> 	mov bp,ax
  2964                              <1> 	mov ax,%5
  2965                              <1> 	mov ds,ax
  2966                              <1> 	mov word ax, [bp+8]
  2967                              <1> 	mov word [%6+2], ax
  2968                              <1> 	mov word ax, [bp+0x0A]
  2969                              <1> 	mov word [%6], ax
  2970                              <1> 	mov ax,%7
  2971                              <1> 	mov ds,ax
  2972                              <1> 	mov word ax,[bp+0x0C]
  2973                              <1> 	mov word [%8+2],ax
  2974                              <1> 	mov word ax,[bp+0x0E]
  2975                              <1> 	mov word [%8],ax
  2976                              <1> 	mov ax,%9
  2977                              <1> 	mov ds,ax
  2978                              <1> 	mov byte al,[bp+0x10]
  2979                              <1> 	mov byte [%10],al
  2980                              <1> 	stkclose 0x11
  2981                              <1> %endmacro
  2982                              <1> 
  2983                              <1> %macro imul32 6
  2984                              <1> 	stkopen 0x0C
  2985                              <1> 	mov ax,%1
  2986                              <1> 	mov ds,ax
  2987                              <1> 	mov ax,[%2+2]
  2988                              <1> 	mov word [bp+0], ax
  2989                              <1> 	mov ax,[%2]
  2990                              <1> 	mov word [bp+2], ax
  2991                              <1> 	mov ax,%3
  2992                              <1> 	mov ds,ax
  2993                              <1> 	mov ax,[%4+2]
  2994                              <1> 	mov word [bp+4], ax
  2995                              <1> 	mov ax,[%4]
  2996                              <1> 	mov word [bp+6], ax
  2997                              <1> 	call proc_imul32
  2998                              <1> 	mov ax,sp
  2999                              <1> 	mov bp,ax
  3000                              <1> 	mov ax,%5
  3001                              <1> 	mov ds,ax
  3002                              <1> 	mov word ax, [bp+8]
  3003                              <1> 	mov word [%6+2], ax
  3004                              <1> 	mov word ax, [bp+0x0A]
  3005                              <1> 	mov word [%6], ax
  3006                              <1> 	stkclose 0x0C
  3007                              <1> %endmacro
  3008                              <1> 	
  3009                              <1> %macro cmp32 3
  3010                              <1> 	cmp32 cs, %1, cs, %2, %3
  3011                              <1> %endmacro	
  3012                              <1> 	
  3013                              <1> %macro cmp32 5
  3014                              <1> 	stkopen 9
  3015                              <1> 	mov ax,%1
  3016                              <1> 	mov ds,ax
  3017                              <1> 	mov word ax,[%2+2]
  3018                              <1> 	mov word [bp+0], ax
  3019                              <1> 	mov word ax,[%2]
  3020                              <1> 	mov word [bp+2], ax	
  3021                              <1> 	mov ax,%3
  3022                              <1> 	mov ds,ax
  3023                              <1> 	mov word ax,[%4+2]
  3024                              <1> 	mov word [bp+4], ax
  3025                              <1> 	mov word ax,[%4]
  3026                              <1> 	mov word [bp+6], ax	
  3027                              <1> 	call proc_cmp32
  3028                              <1> 	mov ax,sp
  3029                              <1> 	mov bp,ax
  3030                              <1> 	mov al,[bp+8]
  3031                              <1> 	mov byte %5,al
  3032                              <1> 	stkclose 9
  3033                              <1> %endmacro
  3034                              <1> 	
  3035                              <1> %macro shl32 2
  3036                              <1> 	shl32 cs, %1, %2
  3037                              <1> %endmacro	
  3038                              <1> 	
  3039                              <1> %macro shl32 3
  3040                              <1> 	stkopen 5
  3041                              <1> 	mov ax,%1
  3042                              <1> 	mov ds,ax
  3043                              <1> 	mov word ax,[%2+2]
  3044                              <1> 	mov word [bp+0], ax
  3045                              <1> 	mov word ax,[%2]
  3046                              <1> 	mov word [bp+2], ax
  3047                              <1> 	mov byte al, %3
  3048                              <1> 	mov byte [bp+4], al 
  3049                              <1> 	call proc_shl32
  3050                              <1> 	mov ax,sp
  3051                              <1> 	mov bp,ax
  3052                              <1> 	mov ax,%1
  3053                              <1> 	mov ds,ax
  3054                              <1> 	mov ax,[bp+0]
  3055                              <1> 	mov word [%2+2],ax
  3056                              <1> 	mov ax,[bp+2]
  3057                              <1> 	mov word [%2],ax
  3058                              <1> 	stkclose 5
  3059                              <1> %endmacro
  3060                              <1> 
  3061                              <1> 
  3062                              <1> %macro shr32 2
  3063                              <1> 	shr32 cs, %1, %2
  3064                              <1> %endmacro	
  3065                              <1> 	
  3066                              <1> %macro shr32 3
  3067                              <1> 	stkopen 5
  3068                              <1> 	mov ax,%1
  3069                              <1> 	mov ds,ax
  3070                              <1> 	mov word ax,[%2+2]
  3071                              <1> 	mov word [bp+0], ax
  3072                              <1> 	mov word ax,[%2]
  3073                              <1> 	mov word [bp+2], ax
  3074                              <1> 	mov byte al, %3
  3075                              <1> 	mov byte [bp+4], al 
  3076                              <1> 	call proc_shr32
  3077                              <1> 	mov ax,sp
  3078                              <1> 	mov bp,ax
  3079                              <1> 	mov ax,%1
  3080                              <1> 	mov ds,ax
  3081                              <1> 	mov ax,[bp+0]
  3082                              <1> 	mov word [%2+2],ax
  3083                              <1> 	mov ax,[bp+2]
  3084                              <1> 	mov word [%2],ax
  3085                              <1> 	stkclose 5
  3086                              <1> %endmacro
  3087                              <1> 
  3088                              <1> %macro inc16 2
  3089                              <1> 	mov ax,%1
  3090                              <1> 	mov ds,ax
  3091                              <1> 	inc word [%2]
  3092                              <1> %endmacro
  3093                              <1> 
  3094                              <1> %macro dec16 2
  3095                              <1> 	mov ax,%1
  3096                              <1> 	mov ds,ax
  3097                              <1> 	dec word [%2]
  3098                              <1> %endmacro
  3099                              <1> 
  3100                              <1> %macro add16 4	
  3101                              <1> 	mov ax,%3
  3102                              <1> 	mov ds,ax
  3103                              <1> 	mov bx,[%4]	
  3104                              <1> 	mov ax,%1
  3105                              <1> 	mov ds,ax	
  3106                              <1> 	add [%2],bx
  3107                              <1> %endmacro
  3108                              <1> 
  3109                              <1> %macro sub16 4
  3110                              <1> 	mov ax,%3
  3111                              <1> 	mov ds,ax
  3112                              <1> 	mov bx,[%4]
  3113                              <1> 	mov ax,%1
  3114                              <1> 	mov ds,ax
  3115                              <1> 	sub [%2],bx
  3116                              <1> %endmacro
  3117                              <1> 
  3118                              <1> %macro mul16 4
  3119                              <1> 	mov ax,%1
  3120                              <1> 	mov ds,ax
  3121                              <1> 	mov bx,[%2]
  3122                              <1> 	mov ax,%3
  3123                              <1> 	mov ds,ax
  3124                              <1> 	mov cx,[%4]
  3125                              <1> 	
  3126                              <1> 	mov ax,bx
  3127                              <1> 	imul cx
  3128                              <1> 	
  3129                              <1> 	mov dx,%1
  3130                              <1> 	mov ds,dx
  3131                              <1> 	mov [%2],ax
  3132                              <1> %endmacro
  3133                              <1> 
  3134                              <1> %macro div16 4
  3135                              <1> 	mov ax,%1
  3136                              <1> 	mov ds,ax
  3137                              <1> 	mov bx,[%2]
  3138                              <1> 	mov ax,%3
  3139                              <1> 	mov ds,ax
  3140                              <1> 	mov cx,[%4]
  3141                              <1> 	
  3142                              <1> 	xor dx,dx
  3143                              <1> 	mov ax,bx
  3144                              <1> 	idiv cx
  3145                              <1> 	
  3146                              <1> 	mov dx,%1
  3147                              <1> 	mov ds,dx
  3148                              <1> 	mov [%2],ax
  3149                              <1> %endmacro
  3150                              <1> 
  3151                              <1> 
  3152                              <1> %macro mod16 4
  3153                              <1> 	mov ax,%1
  3154                              <1> 	mov ds,ax
  3155                              <1> 	mov bx,[%2]
  3156                              <1> 	mov ax,%3
  3157                              <1> 	mov ds,ax
  3158                              <1> 	mov cx,[%4]
  3159                              <1> 	
  3160                              <1> 	xor dx,dx
  3161                              <1> 	mov ax,bx
  3162                              <1> 	idiv cx
  3163                              <1> 	
  3164                              <1> 	mov bx,%1
  3165                              <1> 	mov ds,bx
  3166                              <1> 	mov [%2],dx
  3167                              <1> %endmacro
  3168                              <1> 
  3169                              <1> %macro cmp16 5
  3170                              <1> 	mov ax,%1
  3171                              <1> 	mov ds,ax
  3172                              <1> 	mov bx,[%2]
  3173                              <1> 	mov ax,%3
  3174                              <1> 	mov ds,ax
  3175                              <1> 	mov	cx,[%4]
  3176                              <1> 	
  3177                              <1> 	cmp bx,cx
  3178                              <1> 	jg %%above
  3179                              <1> 	jl %%below
  3180                              <1> 		mov byte %5, 0
  3181                              <1> 		jmp %%endcmp
  3182                              <1> 	%%above:
  3183                              <1> 		mov byte %5, 1
  3184                              <1> 		jmp %%endcmp
  3185                              <1> 	%%below:
  3186                              <1> 		mov byte %5, -1
  3187                              <1> 	%%endcmp:
  3188                              <1> %endmacro
  3189                              <1> 
  3190                              <1> %macro chgsig 2
  3191                              <1> 	mov ax,%1
  3192                              <1> 	mov ds,ax
  3193                              <1> 	mov ax,[%2]
  3194                              <1> 	mov bx,0xFFFF
  3195                              <1> 	sub bx,ax
  3196                              <1> 	inc bx
  3197                              <1> 	mov [%2],bx
  3198                              <1> %endmacro
  3199                              <1> 	
  3200                              <1> %endif
  3201                                  %include "lib/float.mac"
  3202                              <1> 
  3203                              <1> %ifndef FLOAT_MAC
  3204                              <1> 	%define FLOAT_MAC
  3205                              <1> 	
  3206                              <1> 	%include "lib/float.asm"
  3207                              <2> 
  3208                              <2> %ifndef FLOAT_ASM
  3209                              <2> 	%define FLOAT_ASM
  3210                              <2> 	
  3211                              <2> 	%include "lib/system.mac"
  3212                              <3>  
  3213                              <3> %ifndef SYSTEM_MAC
  3214                              <3>  	%define SYSTEM_MAC
  3215                              <3>  	
  3216                              <3> 	%ifndef TRUE
  3217                              <3> 		%define TRUE 01h
  3218                              <3> 	%endif
  3219                              <3> 	%ifndef FALSE
  3220                              <3> 		%define FALSE 00h
  3221                              <3> 	%endif
  3222                              <3> 	
  3223                              <3> %macro vlodsb 3
  3224                              <3> 	vlodsb cs, %1, %2, %3
  3225                              <3> %endmacro
  3226                              <3> 
  3227                              <3> %macro vstosb 3
  3228                              <3> 	vstosb cs, %1, %2, %3
  3229                              <3> %endmacro
  3230                              <3> 	 	
  3231                              <3> %macro int16toreg 2
  3232                              <3> 	int16toreg cs, %1, %2
  3233                              <3> %endmacro
  3234                              <3> 
  3235                              <3> %macro regtoint16 2
  3236                              <3> 	regtoint16 %1, cs, %2
  3237                              <3> %endmacro
  3238                              <3> 
  3239                              <3> %macro vstosb 4
  3240                              <3> 	push %1
  3241                              <3> 	pop ds
  3242                              <3> 	mov si,%2
  3243                              <3> 	add si,%3
  3244                              <3> 	mov byte [si],%4	
  3245                              <3> %endmacro
  3246                              <3> 
  3247                              <3> %macro vlodsb 4
  3248                              <3> 	push %1
  3249                              <3> 	pop ds
  3250                              <3> 	mov si,%2
  3251                              <3> 	add si,%3
  3252                              <3> 	mov byte %4,[si]	
  3253                              <3> %endmacro 	 
  3254                              <3> 
  3255                              <3> %macro int16toreg 3
  3256                              <3> 	push %2
  3257                              <3> 	push %1
  3258                              <3> 	pop ds
  3259                              <3> 	pop si
  3260                              <3> 	mov word %3,[si]	
  3261                              <3> %endmacro
  3262                              <3> 
  3263                              <3> %macro regtoint16 3
  3264                              <3> 	push %3
  3265                              <3> 	push %2
  3266                              <3> 	pop ds
  3267                              <3> 	pop si
  3268                              <3> 	mov word [si],%1	
  3269                              <3> %endmacro
  3270                              <3> 
  3271                              <3> %macro mov32 2
  3272                              <3> 	mov32 cs, %1, cs, %2
  3273                              <3> %endmacro
  3274                              <3> 
  3275                              <3> %macro mov16 2
  3276                              <3> 	mov16 cs, %1, cs, %2
  3277                              <3> %endmacro
  3278                              <3> 
  3279                              <3> %macro mov32 4
  3280                              <3> 	mov ax,%3
  3281                              <3> 	mov ds,ax
  3282                              <3> 	mov cx,[%4+2]
  3283                              <3> 	mov dx,[%4]
  3284                              <3> 	mov ax,%1
  3285                              <3> 	mov ds,ax
  3286                              <3> 	mov [%2+2],cx
  3287                              <3> 	mov [%2],dx
  3288                              <3> %endmacro
  3289                              <3> 
  3290                              <3> %macro mov16 4
  3291                              <3> 	mov ax,%3
  3292                              <3> 	mov ds,ax
  3293                              <3> 	mov bx,[%4]
  3294                              <3> 	mov ax,%1
  3295                              <3> 	mov ds,ax
  3296                              <3> 	mov [%2],bx
  3297                              <3> %endmacro
  3298                              <3>  	 	
  3299                              <3> %macro mformat 4
  3300                              <3> 	stkopen 8
  3301                              <3> 	mov word [ bp + 0 ], %1
  3302                              <3> 	mov word [ bp + 2 ], %2
  3303                              <3> 	mov word [ bp + 4 ], %3
  3304                              <3> 	mov word [ bp + 6 ], %4
  3305                              <3> 	call kernel_segment:mformat
  3306                              <3> 	stkclose 8
  3307                              <3> %endmacro
  3308                              <3> 
  3309                              <3> %macro malloc 6
  3310                              <3> 	stkopen 0Bh
  3311                              <3> 	mov word [ bp + 4 ], %3
  3312                              <3> 	mov word [ bp + 6 ], %4
  3313                              <3> 	mov word [ bp + 8 ], %5	
  3314                              <3> 	call kernel_segment:malloc
  3315                              <3> 	push sp
  3316                              <3> 	pop bp
  3317                              <3> 	mov word %1, [ bp ]
  3318                              <3> 	mov word %2, [ bp + 2 ]
  3319                              <3> 	mov byte %6, [ bp + 0x0A ]
  3320                              <3> 	stkclose 0Bh
  3321                              <3> %endmacro 	
  3322                              <3> 
  3323                              <3> %macro laddr 2
  3324                              <3> 	laddr %1, %2, %1, %2
  3325                              <3> %endmacro
  3326                              <3> 
  3327                              <3> %macro faddr 2
  3328                              <3> 	faddr %1, %2, %1, %2
  3329                              <3> %endmacro
  3330                              <3>  	
  3331                              <3> %macro laddr 4
  3332                              <3> 	stkopen 8
  3333                              <3> 	mov word [ bp + 4 ], %3
  3334                              <3> 	mov word [ bp + 6 ], %4	
  3335                              <3> 	call kernel_segment:laddr
  3336                              <3> 	push sp
  3337                              <3> 	pop bp
  3338                              <3> 	mov word %1, [ bp + 0 ]
  3339                              <3> 	mov word %2, [ bp + 2 ]	
  3340                              <3> 	stkclose 8
  3341                              <3> %endmacro
  3342                              <3> 
  3343                              <3> %macro faddr 4
  3344                              <3> 	stkopen 8
  3345                              <3> 	mov word [ bp + 4 ], %3
  3346                              <3> 	mov word [ bp + 6 ], %4	
  3347                              <3> 	call kernel_segment:faddr
  3348                              <3> 	push sp
  3349                              <3> 	pop bp
  3350                              <3> 	mov word %1, [ bp + 0 ]
  3351                              <3> 	mov word %2, [ bp + 2 ]	
  3352                              <3> 	stkclose 8
  3353                              <3> %endmacro	
  3354                              <3>  
  3355                              <3> 
  3356                              <3> %macro stkopen 1		
  3357                              <3> 	sub word sp, %1
  3358                              <3> 	push sp
  3359                              <3> 	pop bp
  3360                              <3> %endmacro
  3361                              <3> 
  3362                              <3> %macro stkclose 1
  3363                              <3> 	add word sp, %1
  3364                              <3> %endmacro
  3365                              <3> 
  3366                              <3> %macro stkload 1-* 	
  3367                              <3>  	%rep %0
  3368                              <3>  	 	%rotate -1
  3369                              <3>  		pop %1
  3370                              <3>  	%endrep
  3371                              <3>  	%rep %0
  3372                              <3>  		push %1
  3373                              <3>  		%rotate 1
  3374                              <3>  	%endrep
  3375                              <3> %endmacro
  3376                              <3> 
  3377                              <3> %macro stkpush 1-* 	
  3378                              <3>  	%rep %0
  3379                              <3>  		push %1
  3380                              <3>  		%rotate 1
  3381                              <3>  	%endrep 	
  3382                              <3> %endmacro
  3383                              <3>  
  3384                              <3> %macro stkpop 1-*
  3385                              <3>  	%rep %0
  3386                              <3>  	 	%rotate -1
  3387                              <3>  		pop %1
  3388                              <3>  	%endrep 	 	
  3389                              <3> %endmacro
  3390                              <3> 
  3391                              <3> %endif 
  3392                              <2> 	%include "lib/math.mac"
  3393                              <3> 
  3394                              <3> %ifndef MATH_MAC
  3395                              <3> 	%define MATH_MAC
  3396                              <3> 	
  3397                              <3> 	%include "lib/math.asm"
  3398                              <3> 	%include "lib/system.mac"
  3399                              <3> 
  3400                              <3> %macro chgsig 1
  3401                              <3> 	chgsig cs, %1
  3402                              <3> %endmacro
  3403                              <3> 
  3404                              <3> %macro cmp16 3
  3405                              <3> 	cmp16 cs, %1, cs, %2, %3
  3406                              <3> %endmacro
  3407                              <3> 
  3408                              <3> %macro mul16 2
  3409                              <3> 	mul16 cs, %1, cs, %2
  3410                              <3> %endmacro
  3411                              <3> 
  3412                              <3> %macro div16 2
  3413                              <3> 	div16 cs, %1, cs, %2
  3414                              <3> %endmacro
  3415                              <3> 
  3416                              <3> %macro mod16 2
  3417                              <3> 	mod16 cs, %1, cs, %2
  3418                              <3> %endmacro
  3419                              <3> 
  3420                              <3> %macro inc16 1
  3421                              <3> 	inc16 cs, %1
  3422                              <3> %endmacro
  3423                              <3> 
  3424                              <3> %macro dec16 1
  3425                              <3> 	dec16 cs, %1
  3426                              <3> %endmacro
  3427                              <3> 
  3428                              <3> %macro add16 2
  3429                              <3> 	add16 cs, %1, cs, %2
  3430                              <3> %endmacro
  3431                              <3> 
  3432                              <3> %macro sub16 2
  3433                              <3> 	sub16 cs, %1, cs, %2
  3434                              <3> %endmacro
  3435                              <3> 
  3436                              <3> %macro int32to16 2
  3437                              <3> 	int32to16 cs, %1, %2
  3438                              <3> %endmacro
  3439                              <3> 
  3440                              <3> %macro int16to32 2
  3441                              <3> 	int16to32 %1, cs, %2
  3442                              <3> %endmacro
  3443                              <3> 
  3444                              <3> %macro setsig 1
  3445                              <3> 	setsig cs, %1
  3446                              <3> %endmacro
  3447                              <3> 
  3448                              <3> %macro clrsig 1
  3449                              <3> 	clrsig cs, %1
  3450                              <3> %endmacro
  3451                              <3> 
  3452                              <3> %macro idiv32 5
  3453                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  3454                              <3> %endmacro
  3455                              <3> 
  3456                              <3> %macro imul32 3
  3457                              <3> 	imul32 cs, %1, cs, %2, cs, %3
  3458                              <3> %endmacro
  3459                              <3> 
  3460                              <3> %macro div32 5
  3461                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  3462                              <3> %endmacro
  3463                              <3> 
  3464                              <3> %macro mul32 3
  3465                              <3> 	mul32 cs, %1, cs, %2, cs, %3
  3466                              <3> %endmacro
  3467                              <3> 	
  3468                              <3> %macro add32 3
  3469                              <3> 	add32 cs, %1, cs, %2, cs, %3
  3470                              <3> %endmacro
  3471                              <3> 
  3472                              <3> %macro sub32 3
  3473                              <3> 	sub32 cs, %1, cs, %2, cs, %3
  3474                              <3> %endmacro
  3475                              <3> 
  3476                              <3> %macro int32to16 3
  3477                              <3> 	stkopen 0x06
  3478                              <3> 	mov ax,%1
  3479                              <3> 	mov ds,ax
  3480                              <3> 	mov ax,[%2+2]
  3481                              <3> 	mov word [bp+0], ax
  3482                              <3> 	mov ax,[%2]	
  3483                              <3> 	mov word [bp+2], ax
  3484                              <3> 	call proc_int32to16
  3485                              <3> 	mov ax,sp
  3486                              <3> 	mov bp,ax
  3487                              <3> 	mov ax,[bp+4]
  3488                              <3> 	mov word %3, ax	
  3489                              <3> 	stkclose 0x06
  3490                              <3> %endmacro
  3491                              <3> 
  3492                              <3> %macro int16to32 3
  3493                              <3> 	stkopen 0x06
  3494                              <3> 	mov word [bp+0], %1	
  3495                              <3> 	call proc_int16to32
  3496                              <3> 	mov ax,sp
  3497                              <3> 	mov bp,ax
  3498                              <3> 	mov ax,%2
  3499                              <3> 	mov ds,ax
  3500                              <3> 	mov ax,[bp+2]
  3501                              <3> 	mov [%3+2],ax
  3502                              <3> 	mov ax,[bp+4]
  3503                              <3> 	mov [%3],ax	
  3504                              <3> 	stkclose 0x06
  3505                              <3> %endmacro
  3506                              <3> 
  3507                              <3> %macro setsig 2
  3508                              <3> 	stkopen 0x02
  3509                              <3> 	mov ax,%1
  3510                              <3> 	mov ds,ax
  3511                              <3> 	mov ax,[%2+2]
  3512                              <3> 	mov word [bp+0], ax
  3513                              <3> 	call proc_setsig
  3514                              <3> 	mov ax,sp
  3515                              <3> 	mov bp,ax
  3516                              <3> 	mov ax,%1
  3517                              <3> 	mov ds,ax
  3518                              <3> 	mov ax,[bp+0]
  3519                              <3> 	mov word [%2+2], ax
  3520                              <3> 	stkclose 0x02
  3521                              <3> %endmacro
  3522                              <3> 
  3523                              <3> %macro clrsig 2
  3524                              <3> 	stkopen 0x02
  3525                              <3> 	mov ax,%1
  3526                              <3> 	mov ds,ax
  3527                              <3> 	mov ax,[%2+2]
  3528                              <3> 	mov word [bp+0], ax
  3529                              <3> 	call proc_clrsig
  3530                              <3> 	mov ax,sp
  3531                              <3> 	mov bp,ax
  3532                              <3> 	mov ax,%1
  3533                              <3> 	mov ds,ax
  3534                              <3> 	mov ax,[bp+0]
  3535                              <3> 	mov word [%2+2], ax
  3536                              <3> 	stkclose 0x02
  3537                              <3> %endmacro
  3538                              <3> 
  3539                              <3> %macro div32 10
  3540                              <3> 	stkopen 0x11
  3541                              <3> 	mov ax,%1
  3542                              <3> 	mov ds,ax
  3543                              <3> 	mov ax,[%2+2]
  3544                              <3> 	mov word [bp+0], ax
  3545                              <3> 	mov ax,[%2]
  3546                              <3> 	mov word [bp+2], ax
  3547                              <3> 	mov ax,%3
  3548                              <3> 	mov ds,ax
  3549                              <3> 	mov ax,[%4+2]
  3550                              <3> 	mov word [bp+4], ax
  3551                              <3> 	mov ax,[%4]
  3552                              <3> 	mov word [bp+6], ax
  3553                              <3> 	call proc_div32
  3554                              <3> 	mov ax,sp
  3555                              <3> 	mov bp,ax
  3556                              <3> 	mov ax,%5
  3557                              <3> 	mov ds,ax
  3558                              <3> 	mov word ax, [bp+8]
  3559                              <3> 	mov word [%6+2], ax
  3560                              <3> 	mov word ax, [bp+0x0A]
  3561                              <3> 	mov word [%6], ax
  3562                              <3> 	mov ax,%7
  3563                              <3> 	mov ds,ax
  3564                              <3> 	mov word ax,[bp+0x0C]
  3565                              <3> 	mov word [%8+2],ax
  3566                              <3> 	mov word ax,[bp+0x0E]
  3567                              <3> 	mov word [%8],ax
  3568                              <3> 	mov ax,%9
  3569                              <3> 	mov ds,ax
  3570                              <3> 	mov byte al,[bp+0x10]
  3571                              <3> 	mov byte [%10],al
  3572                              <3> 	stkclose 0x11
  3573                              <3> %endmacro
  3574                              <3> 	
  3575                              <3> %macro mul32 6
  3576                              <3> 	stkopen 0x0C
  3577                              <3> 	mov ax,%1
  3578                              <3> 	mov ds,ax
  3579                              <3> 	mov ax,[%2+2]
  3580                              <3> 	mov word [bp+0], ax
  3581                              <3> 	mov ax,[%2]
  3582                              <3> 	mov word [bp+2], ax
  3583                              <3> 	mov ax,%3
  3584                              <3> 	mov ds,ax
  3585                              <3> 	mov ax,[%4+2]
  3586                              <3> 	mov word [bp+4], ax
  3587                              <3> 	mov ax,[%4]
  3588                              <3> 	mov word [bp+6], ax
  3589                              <3> 	call proc_mul32
  3590                              <3> 	mov ax,sp
  3591                              <3> 	mov bp,ax
  3592                              <3> 	mov ax,%5
  3593                              <3> 	mov ds,ax
  3594                              <3> 	mov word ax, [bp+8]
  3595                              <3> 	mov word [%6+2], ax
  3596                              <3> 	mov word ax, [bp+0x0A]
  3597                              <3> 	mov word [%6], ax
  3598                              <3> 	stkclose 0x0C
  3599                              <3> %endmacro	
  3600                              <3> 	
  3601                              <3> %macro add32 6
  3602                              <3> 	stkopen 0x0C
  3603                              <3> 	mov ax,%1
  3604                              <3> 	mov ds,ax
  3605                              <3> 	mov ax,[%2+2]
  3606                              <3> 	mov word [bp+0], ax
  3607                              <3> 	mov ax,[%2]
  3608                              <3> 	mov word [bp+2], ax
  3609                              <3> 	mov ax,%3
  3610                              <3> 	mov ds,ax
  3611                              <3> 	mov ax,[%4+2]
  3612                              <3> 	mov word [bp+4], ax
  3613                              <3> 	mov ax,[%4]
  3614                              <3> 	mov word [bp+6], ax
  3615                              <3> 	call proc_add32
  3616                              <3> 	mov ax,sp
  3617                              <3> 	mov bp,ax
  3618                              <3> 	mov ax,%5
  3619                              <3> 	mov ds,ax
  3620                              <3> 	mov word ax, [bp+8]
  3621                              <3> 	mov word [%6+2], ax
  3622                              <3> 	mov word ax, [bp+0x0A]
  3623                              <3> 	mov word [%6], ax
  3624                              <3> 	stkclose 0x0C
  3625                              <3> %endmacro
  3626                              <3> 
  3627                              <3> %macro sub32 6
  3628                              <3> 	stkopen 0x0C
  3629                              <3> 	mov ax,%1
  3630                              <3> 	mov ds,ax
  3631                              <3> 	mov ax,[%2+2]
  3632                              <3> 	mov word [bp+0], ax
  3633                              <3> 	mov ax,[%2]
  3634                              <3> 	mov word [bp+2], ax
  3635                              <3> 	mov ax,%3
  3636                              <3> 	mov ds,ax
  3637                              <3> 	mov ax,[%4+2]
  3638                              <3> 	mov word [bp+4], ax
  3639                              <3> 	mov ax,[%4]
  3640                              <3> 	mov word [bp+6], ax
  3641                              <3> 	call proc_sub32
  3642                              <3> 	mov ax,sp
  3643                              <3> 	mov bp,ax
  3644                              <3> 	mov ax,%5
  3645                              <3> 	mov ds,ax
  3646                              <3> 	mov word ax, [bp+8]
  3647                              <3> 	mov word [%6+2], ax
  3648                              <3> 	mov word ax, [bp+0x0A]
  3649                              <3> 	mov word [%6], ax
  3650                              <3> 	stkclose 0x0C
  3651                              <3> %endmacro
  3652                              <3> 
  3653                              <3> %macro idiv32 10
  3654                              <3> 	stkopen 0x11
  3655                              <3> 	mov ax,%1
  3656                              <3> 	mov ds,ax
  3657                              <3> 	mov ax,[%2+2]
  3658                              <3> 	mov word [bp+0], ax
  3659                              <3> 	mov ax,[%2]
  3660                              <3> 	mov word [bp+2], ax
  3661                              <3> 	mov ax,%3
  3662                              <3> 	mov ds,ax
  3663                              <3> 	mov ax,[%4+2]
  3664                              <3> 	mov word [bp+4], ax
  3665                              <3> 	mov ax,[%4]
  3666                              <3> 	mov word [bp+6], ax
  3667                              <3> 	call proc_idiv32
  3668                              <3> 	mov ax,sp
  3669                              <3> 	mov bp,ax
  3670                              <3> 	mov ax,%5
  3671                              <3> 	mov ds,ax
  3672                              <3> 	mov word ax, [bp+8]
  3673                              <3> 	mov word [%6+2], ax
  3674                              <3> 	mov word ax, [bp+0x0A]
  3675                              <3> 	mov word [%6], ax
  3676                              <3> 	mov ax,%7
  3677                              <3> 	mov ds,ax
  3678                              <3> 	mov word ax,[bp+0x0C]
  3679                              <3> 	mov word [%8+2],ax
  3680                              <3> 	mov word ax,[bp+0x0E]
  3681                              <3> 	mov word [%8],ax
  3682                              <3> 	mov ax,%9
  3683                              <3> 	mov ds,ax
  3684                              <3> 	mov byte al,[bp+0x10]
  3685                              <3> 	mov byte [%10],al
  3686                              <3> 	stkclose 0x11
  3687                              <3> %endmacro
  3688                              <3> 
  3689                              <3> %macro imul32 6
  3690                              <3> 	stkopen 0x0C
  3691                              <3> 	mov ax,%1
  3692                              <3> 	mov ds,ax
  3693                              <3> 	mov ax,[%2+2]
  3694                              <3> 	mov word [bp+0], ax
  3695                              <3> 	mov ax,[%2]
  3696                              <3> 	mov word [bp+2], ax
  3697                              <3> 	mov ax,%3
  3698                              <3> 	mov ds,ax
  3699                              <3> 	mov ax,[%4+2]
  3700                              <3> 	mov word [bp+4], ax
  3701                              <3> 	mov ax,[%4]
  3702                              <3> 	mov word [bp+6], ax
  3703                              <3> 	call proc_imul32
  3704                              <3> 	mov ax,sp
  3705                              <3> 	mov bp,ax
  3706                              <3> 	mov ax,%5
  3707                              <3> 	mov ds,ax
  3708                              <3> 	mov word ax, [bp+8]
  3709                              <3> 	mov word [%6+2], ax
  3710                              <3> 	mov word ax, [bp+0x0A]
  3711                              <3> 	mov word [%6], ax
  3712                              <3> 	stkclose 0x0C
  3713                              <3> %endmacro
  3714                              <3> 	
  3715                              <3> %macro cmp32 3
  3716                              <3> 	cmp32 cs, %1, cs, %2, %3
  3717                              <3> %endmacro	
  3718                              <3> 	
  3719                              <3> %macro cmp32 5
  3720                              <3> 	stkopen 9
  3721                              <3> 	mov ax,%1
  3722                              <3> 	mov ds,ax
  3723                              <3> 	mov word ax,[%2+2]
  3724                              <3> 	mov word [bp+0], ax
  3725                              <3> 	mov word ax,[%2]
  3726                              <3> 	mov word [bp+2], ax	
  3727                              <3> 	mov ax,%3
  3728                              <3> 	mov ds,ax
  3729                              <3> 	mov word ax,[%4+2]
  3730                              <3> 	mov word [bp+4], ax
  3731                              <3> 	mov word ax,[%4]
  3732                              <3> 	mov word [bp+6], ax	
  3733                              <3> 	call proc_cmp32
  3734                              <3> 	mov ax,sp
  3735                              <3> 	mov bp,ax
  3736                              <3> 	mov al,[bp+8]
  3737                              <3> 	mov byte %5,al
  3738                              <3> 	stkclose 9
  3739                              <3> %endmacro
  3740                              <3> 	
  3741                              <3> %macro shl32 2
  3742                              <3> 	shl32 cs, %1, %2
  3743                              <3> %endmacro	
  3744                              <3> 	
  3745                              <3> %macro shl32 3
  3746                              <3> 	stkopen 5
  3747                              <3> 	mov ax,%1
  3748                              <3> 	mov ds,ax
  3749                              <3> 	mov word ax,[%2+2]
  3750                              <3> 	mov word [bp+0], ax
  3751                              <3> 	mov word ax,[%2]
  3752                              <3> 	mov word [bp+2], ax
  3753                              <3> 	mov byte al, %3
  3754                              <3> 	mov byte [bp+4], al 
  3755                              <3> 	call proc_shl32
  3756                              <3> 	mov ax,sp
  3757                              <3> 	mov bp,ax
  3758                              <3> 	mov ax,%1
  3759                              <3> 	mov ds,ax
  3760                              <3> 	mov ax,[bp+0]
  3761                              <3> 	mov word [%2+2],ax
  3762                              <3> 	mov ax,[bp+2]
  3763                              <3> 	mov word [%2],ax
  3764                              <3> 	stkclose 5
  3765                              <3> %endmacro
  3766                              <3> 
  3767                              <3> 
  3768                              <3> %macro shr32 2
  3769                              <3> 	shr32 cs, %1, %2
  3770                              <3> %endmacro	
  3771                              <3> 	
  3772                              <3> %macro shr32 3
  3773                              <3> 	stkopen 5
  3774                              <3> 	mov ax,%1
  3775                              <3> 	mov ds,ax
  3776                              <3> 	mov word ax,[%2+2]
  3777                              <3> 	mov word [bp+0], ax
  3778                              <3> 	mov word ax,[%2]
  3779                              <3> 	mov word [bp+2], ax
  3780                              <3> 	mov byte al, %3
  3781                              <3> 	mov byte [bp+4], al 
  3782                              <3> 	call proc_shr32
  3783                              <3> 	mov ax,sp
  3784                              <3> 	mov bp,ax
  3785                              <3> 	mov ax,%1
  3786                              <3> 	mov ds,ax
  3787                              <3> 	mov ax,[bp+0]
  3788                              <3> 	mov word [%2+2],ax
  3789                              <3> 	mov ax,[bp+2]
  3790                              <3> 	mov word [%2],ax
  3791                              <3> 	stkclose 5
  3792                              <3> %endmacro
  3793                              <3> 
  3794                              <3> %macro inc16 2
  3795                              <3> 	mov ax,%1
  3796                              <3> 	mov ds,ax
  3797                              <3> 	inc word [%2]
  3798                              <3> %endmacro
  3799                              <3> 
  3800                              <3> %macro dec16 2
  3801                              <3> 	mov ax,%1
  3802                              <3> 	mov ds,ax
  3803                              <3> 	dec word [%2]
  3804                              <3> %endmacro
  3805                              <3> 
  3806                              <3> %macro add16 4	
  3807                              <3> 	mov ax,%3
  3808                              <3> 	mov ds,ax
  3809                              <3> 	mov bx,[%4]	
  3810                              <3> 	mov ax,%1
  3811                              <3> 	mov ds,ax	
  3812                              <3> 	add [%2],bx
  3813                              <3> %endmacro
  3814                              <3> 
  3815                              <3> %macro sub16 4
  3816                              <3> 	mov ax,%3
  3817                              <3> 	mov ds,ax
  3818                              <3> 	mov bx,[%4]
  3819                              <3> 	mov ax,%1
  3820                              <3> 	mov ds,ax
  3821                              <3> 	sub [%2],bx
  3822                              <3> %endmacro
  3823                              <3> 
  3824                              <3> %macro mul16 4
  3825                              <3> 	mov ax,%1
  3826                              <3> 	mov ds,ax
  3827                              <3> 	mov bx,[%2]
  3828                              <3> 	mov ax,%3
  3829                              <3> 	mov ds,ax
  3830                              <3> 	mov cx,[%4]
  3831                              <3> 	
  3832                              <3> 	mov ax,bx
  3833                              <3> 	imul cx
  3834                              <3> 	
  3835                              <3> 	mov dx,%1
  3836                              <3> 	mov ds,dx
  3837                              <3> 	mov [%2],ax
  3838                              <3> %endmacro
  3839                              <3> 
  3840                              <3> %macro div16 4
  3841                              <3> 	mov ax,%1
  3842                              <3> 	mov ds,ax
  3843                              <3> 	mov bx,[%2]
  3844                              <3> 	mov ax,%3
  3845                              <3> 	mov ds,ax
  3846                              <3> 	mov cx,[%4]
  3847                              <3> 	
  3848                              <3> 	xor dx,dx
  3849                              <3> 	mov ax,bx
  3850                              <3> 	idiv cx
  3851                              <3> 	
  3852                              <3> 	mov dx,%1
  3853                              <3> 	mov ds,dx
  3854                              <3> 	mov [%2],ax
  3855                              <3> %endmacro
  3856                              <3> 
  3857                              <3> 
  3858                              <3> %macro mod16 4
  3859                              <3> 	mov ax,%1
  3860                              <3> 	mov ds,ax
  3861                              <3> 	mov bx,[%2]
  3862                              <3> 	mov ax,%3
  3863                              <3> 	mov ds,ax
  3864                              <3> 	mov cx,[%4]
  3865                              <3> 	
  3866                              <3> 	xor dx,dx
  3867                              <3> 	mov ax,bx
  3868                              <3> 	idiv cx
  3869                              <3> 	
  3870                              <3> 	mov bx,%1
  3871                              <3> 	mov ds,bx
  3872                              <3> 	mov [%2],dx
  3873                              <3> %endmacro
  3874                              <3> 
  3875                              <3> %macro cmp16 5
  3876                              <3> 	mov ax,%1
  3877                              <3> 	mov ds,ax
  3878                              <3> 	mov bx,[%2]
  3879                              <3> 	mov ax,%3
  3880                              <3> 	mov ds,ax
  3881                              <3> 	mov	cx,[%4]
  3882                              <3> 	
  3883                              <3> 	cmp bx,cx
  3884                              <3> 	jg %%above
  3885                              <3> 	jl %%below
  3886                              <3> 		mov byte %5, 0
  3887                              <3> 		jmp %%endcmp
  3888                              <3> 	%%above:
  3889                              <3> 		mov byte %5, 1
  3890                              <3> 		jmp %%endcmp
  3891                              <3> 	%%below:
  3892                              <3> 		mov byte %5, -1
  3893                              <3> 	%%endcmp:
  3894                              <3> %endmacro
  3895                              <3> 
  3896                              <3> %macro chgsig 2
  3897                              <3> 	mov ax,%1
  3898                              <3> 	mov ds,ax
  3899                              <3> 	mov ax,[%2]
  3900                              <3> 	mov bx,0xFFFF
  3901                              <3> 	sub bx,ax
  3902                              <3> 	inc bx
  3903                              <3> 	mov [%2],bx
  3904                              <3> %endmacro
  3905                              <3> 	
  3906                              <3> %endif
  3907                              <2> 	
  3908                              <2> %macro __fltoint16 3
  3909                              <2> 	stkopen 0x06
  3910                              <2> 	mov word [bp+0],%1
  3911                              <2> 	mov word [bp+2],%2
  3912                              <2> 	call proc_fltoint16
  3913                              <2> 	push sp
  3914                              <2> 	pop bp
  3915                              <2> 	mov word %3,[bp+4]
  3916                              <2> 	stkclose 0x06
  3917                              <2> %endmacro
  3918                              <2> 
  3919                              <2> %macro __int16tofl 3	
  3920                              <2> 	stkopen 0x06
  3921                              <2> 	mov word [bp+0],%1
  3922                              <2> 	call proc_int16tofl
  3923                              <2> 	push sp
  3924                              <2> 	pop bp
  3925                              <2> 	mov word %2,[bp+2]
  3926                              <2> 	mov word %3,[bp+4]
  3927                              <2> 	stkclose 0x06
  3928                              <2> %endmacro
  3929                              <2> 		
  3930                              <2> %macro __fltoint32 4
  3931                              <2> 	stkopen 0x08
  3932                              <2> 	mov word [bp+0],%1
  3933                              <2> 	mov word [bp+2],%2
  3934                              <2> 	call proc_fltoint32
  3935                              <2> 	push sp
  3936                              <2> 	pop bp
  3937                              <2> 	mov word %3,[bp+4]
  3938                              <2> 	mov word %4,[bp+6]
  3939                              <2> 	stkclose 0x08
  3940                              <2> %endmacro
  3941                              <2> 
  3942                              <2> %macro __int32tofl 4
  3943                              <2> 	stkopen 0x08
  3944                              <2> 	mov word [bp+0],%1
  3945                              <2> 	mov word [bp+2],%2
  3946                              <2> 	call proc_int32tofl
  3947                              <2> 	push sp
  3948                              <2> 	pop bp
  3949                              <2> 	mov word %3,[bp+4]
  3950                              <2> 	mov word %4,[bp+6]
  3951                              <2> 	stkclose 0x08
  3952                              <2> %endmacro	
  3953                              <2> 
  3954                              <2> %macro __flcmp 5
  3955                              <2> 	stkopen 0x09
  3956                              <2> 	mov word [bp+0],%1
  3957                              <2> 	mov word [bp+2],%2
  3958                              <2> 	mov word [bp+4],%3
  3959                              <2> 	mov word [bp+6],%4
  3960                              <2> 	call proc_flcmp
  3961                              <2> 	push sp
  3962                              <2> 	pop bp
  3963                              <2> 	mov byte %5, [bp+8]
  3964                              <2> 	stkclose 0x09
  3965                              <2> %endmacro
  3966                              <2> 	
  3967                              <2> %macro __flshl 1
  3968                              <2> 	stkopen 0x02
  3969                              <2> 	mov word [bp+0],%1
  3970                              <2> 	call proc_flshl
  3971                              <2> 	push sp
  3972                              <2> 	pop bp
  3973                              <2> 	mov word %1,[bp+0]
  3974                              <2> 	stkclose 0x02
  3975                              <2> %endmacro	
  3976                              <2> 
  3977                              <2> %macro __flshr 1
  3978                              <2> 	stkopen 0x02
  3979                              <2> 	mov word [bp+0],%1
  3980                              <2> 	call proc_flshr
  3981                              <2> 	push sp
  3982                              <2> 	pop bp
  3983                              <2> 	mov word %1,[bp+0]
  3984                              <2> 	stkclose 0x02
  3985                              <2> %endmacro	
  3986                              <2> 	
  3987                              <2> %macro __flinvsig 1
  3988                              <2> 	stkopen 0x02
  3989                              <2> 	mov word [bp+0],%1
  3990                              <2> 	call proc_flinvsig
  3991                              <2> 	push sp
  3992                              <2> 	pop bp
  3993                              <2> 	mov word %1, [bp+0]
  3994                              <2> 	stkclose 0x02
  3995                              <2> %endmacro
  3996                              <2> 
  3997                              <2> %macro __flsetsig 1
  3998                              <2> 	stkopen 0x04
  3999                              <2> 	mov word [bp+0],%1
  4000                              <2> 	mov word [bp+2],0x8000
  4001                              <2> 	call proc_flsetsig
  4002                              <2> 	push sp
  4003                              <2> 	pop bp
  4004                              <2> 	mov word %1, [bp+0]
  4005                              <2> 	stkclose 0x04
  4006                              <2> %endmacro	
  4007                              <2> 
  4008                              <2> %macro __flclearsig 1
  4009                              <2> 	stkopen 0x04
  4010                              <2> 	mov word [bp+0],%1
  4011                              <2> 	mov word [bp+2],0
  4012                              <2> 	call proc_flclrsig
  4013                              <2> 	push sp
  4014                              <2> 	pop bp
  4015                              <2> 	mov word %1, [bp+0]
  4016                              <2> 	stkclose 0x04
  4017                              <2> %endmacro		
  4018                              <2> 	
  4019                              <2> %macro __fladd 6
  4020                              <2> 	stkopen 0x0E
  4021                              <2> 	mov word [bp+0],%1
  4022                              <2> 	mov word [bp+2],%2
  4023                              <2> 	mov word [bp+4],%3
  4024                              <2> 	mov word [bp+6],%4
  4025                              <2> 	mov word [bp+0x0C],0
  4026                              <2> 	call proc_fladdorsub
  4027                              <2> 	push sp
  4028                              <2> 	pop bp
  4029                              <2> 	mov word %5,[bp+8]
  4030                              <2> 	mov word %6,[bp+0x0A]
  4031                              <2> 	stkclose 0x0E
  4032                              <2> %endmacro
  4033                              <2> 
  4034                              <2> %macro __flsub 6
  4035                              <2> 	stkopen 0x0E
  4036                              <2> 	mov word [bp+0],%1
  4037                              <2> 	mov word [bp+2],%2
  4038                              <2> 	mov word [bp+4],%3
  4039                              <2> 	mov word [bp+6],%4
  4040                              <2> 	mov word [bp+0x0C],0x8000
  4041                              <2> 	call proc_fladdorsub
  4042                              <2> 	push sp
  4043                              <2> 	pop bp
  4044                              <2> 	mov word %5,[bp+8]
  4045                              <2> 	mov word %6,[bp+0x0A]
  4046                              <2> 	stkclose 0x0E
  4047                              <2> %endmacro
  4048                              <2> 
  4049                              <2> %macro __flmul 6
  4050                              <2> 	stkopen 0x0E
  4051                              <2> 	mov word [bp+0],%1
  4052                              <2> 	mov word [bp+2],%2
  4053                              <2> 	mov word [bp+4],%3
  4054                              <2> 	mov word [bp+6],%4
  4055                              <2> 	call proc_flmul
  4056                              <2> 	push sp
  4057                              <2> 	pop bp
  4058                              <2> 	mov word %5,[bp+8]
  4059                              <2> 	mov word %6,[bp+0x0A]
  4060                              <2> 	stkclose 0x0E
  4061                              <2> %endmacro
  4062                              <2> 
  4063                              <2> %macro __fldiv 6
  4064                              <2> 	stkopen 0x0E
  4065                              <2> 	mov word [bp+0],%1
  4066                              <2> 	mov word [bp+2],%2
  4067                              <2> 	mov word [bp+4],%3
  4068                              <2> 	mov word [bp+6],%4
  4069                              <2> 	call proc_fldiv
  4070                              <2> 	push sp
  4071                              <2> 	pop bp
  4072                              <2> 	mov word %5,[bp+8]
  4073                              <2> 	mov word %6,[bp+0x0A]
  4074                              <2> 	stkclose 0x0E
  4075                              <2> %endmacro
  4076                              <2> 
  4077                              <2> %macro __validate 7
  4078                              <2> 	stkopen 0x0D
  4079                              <2> 	mov word [bp+0],%1
  4080                              <2> 	mov word [bp+2],%2
  4081                              <2> 	mov word [bp+4],%3
  4082                              <2> 	mov word [bp+6],%4
  4083                              <2> 	call proc__validate
  4084                              <2> 	push sp
  4085                              <2> 	pop bp
  4086                              <2> 	mov word %5,[bp+8]
  4087                              <2> 	mov word %6,[bp+0x0A]
  4088                              <2> 	mov byte %7,[bp+0x0C]
  4089                              <2> 	stkclose 0x0D
  4090                              <2> %endmacro
  4091                              <2> 
  4092                              <2> %macro __div_validate 7
  4093                              <2> 	stkopen 0x0D
  4094                              <2> 	mov word [bp+0],%1
  4095                              <2> 	mov word [bp+2],%2
  4096                              <2> 	mov word [bp+4],%3
  4097                              <2> 	mov word [bp+6],%4
  4098                              <2> 	call proc__div_validate
  4099                              <2> 	push sp
  4100                              <2> 	pop bp
  4101                              <2> 	mov word %5,[bp+8]
  4102                              <2> 	mov word %6,[bp+0x0A]
  4103                              <2> 	mov byte %7,[bp+0x0C]
  4104                              <2> 	stkclose 0x0D
  4105                              <2> %endmacro
  4106                              <2> 
  4107                              <2> %macro __mul_validate 5
  4108                              <2> 	stkopen 0x09
  4109                              <2> 	mov word [bp+0],%1
  4110                              <2> 	mov word [bp+2],%2
  4111                              <2> 	call proc__mul_validate
  4112                              <2> 	push sp
  4113                              <2> 	pop bp
  4114                              <2> 	mov word %3,[bp+4]
  4115                              <2> 	mov word %4,[bp+6]
  4116                              <2> 	mov byte %5,[bp+8]
  4117                              <2> 	stkclose 0x09
  4118                              <2> %endmacro
  4119                              <2> 
  4120                              <2> %macro __addorsub_validate 7
  4121                              <2> 	stkopen 0x0D
  4122                              <2> 	mov word [bp+0],%1
  4123                              <2> 	mov word [bp+2],%2
  4124                              <2> 	mov word [bp+4],%3
  4125                              <2> 	mov word [bp+6],%4
  4126                              <2> 	call proc__addorsub_validate
  4127                              <2> 	push sp
  4128                              <2> 	pop bp
  4129                              <2> 	mov word %5,[bp+8]
  4130                              <2> 	mov word %6,[bp+0x0A]
  4131                              <2> 	mov byte %7,[bp+0x0C]
  4132                              <2> 	stkclose 0x0D
  4133                              <2> %endmacro
  4134                              <2> 
  4135                              <2> %macro __cmp_validate 4
  4136                              <2> 	stkopen 0x06
  4137                              <2> 	mov word [bp+0],%1
  4138                              <2> 	mov word [bp+2],%2
  4139                              <2> 	call proc__cmp_validate
  4140                              <2> 	push sp
  4141                              <2> 	pop bp
  4142                              <2> 	mov byte %3, [bp+4]
  4143                              <2> 	mov byte %4, [bp+5]
  4144                              <2> 	stkclose 0x06
  4145                              <2> %endmacro
  4146                              <2> 
  4147                              <2> %macro __iaddorsub32 7
  4148                              <2> 	stkopen 0x0D
  4149                              <2> 	mov word [bp+0],%1
  4150                              <2> 	mov word [bp+2],%2
  4151                              <2> 	mov word [bp+4],%3
  4152                              <2> 	mov word [bp+6],%4
  4153                              <2> 	mov word [bp+0x0C], %7
  4154                              <2> 	call proc__iaddorsub32
  4155                              <2> 	push sp
  4156                              <2> 	pop bp
  4157                              <2> 	mov word %5,[bp+8]
  4158                              <2> 	mov word %6,[bp+0x0A]
  4159                              <2> 	stkclose 0x0D
  4160                              <2> %endmacro
  4161                              <2> 
  4162                              <2> %macro __fldiv32 6
  4163                              <2> 	stkopen 0x11
  4164                              <2> 	mov word [bp+0],%1
  4165                              <2> 	mov word [bp+2],%2
  4166                              <2> 	mov word [bp+4],%3
  4167                              <2> 	mov word [bp+6],%4
  4168                              <2> 	call proc__fldiv32
  4169                              <2> 	push sp
  4170                              <2> 	pop bp
  4171                              <2> 	mov word %5,[bp+8]
  4172                              <2> 	mov word %6,[bp+0x0A]
  4173                              <2> 	stkclose 0x11
  4174                              <2> %endmacro
  4175                              <2> 
  4176                              <2> %macro __mul32_64 8
  4177                              <2> 	stkopen 0x10
  4178                              <2> 	mov word [bp+0],%1
  4179                              <2> 	mov word [bp+2],%2
  4180                              <2> 	mov word [bp+4],%3
  4181                              <2> 	mov word [bp+6],%4
  4182                              <2> 	call proc__mul32_64
  4183                              <2> 	push sp
  4184                              <2> 	pop bp
  4185                              <2> 	mov word %5,[bp+8]
  4186                              <2> 	mov word %6,[bp+0x0A]
  4187                              <2> 	mov word %7,[bp+0x0C]
  4188                              <2> 	mov word %8,[bp+0x0E]
  4189                              <2> 	stkclose 0x10
  4190                              <2> %endmacro
  4191                              <2> 
  4192                              <2> %macro __normalize 3
  4193                              <2> 	stkopen 0x06
  4194                              <2> 	mov word [bp+0],%1
  4195                              <2> 	mov word [bp+2],%2
  4196                              <2> 	mov word [bp+4],%3
  4197                              <2> 	call proc__normalize
  4198                              <2> 	push sp
  4199                              <2> 	pop bp
  4200                              <2> 	mov word %1,[bp+0]
  4201                              <2> 	mov word %2,[bp+2]
  4202                              <2> 	stkclose 0x06
  4203                              <2> %endmacro
  4204                              <2> 
  4205                              <2> section .data
  4206                              <2> 
  4207                              <2> proc_fltoint16:
  4208 000009F1 89E0                <2> 	mov ax,sp
  4209 000009F3 89C5                <2> 	mov bp,ax
  4210                              <2> 	
  4211 000009F5 8B4602              <2> 	mov ax,[bp+2]
  4212 000009F8 8B5E04              <2> 	mov bx,[bp+4]
  4213                              <2> 	__fltoint32 ax, ax, ax, bx
  4214                              <3>  stkopen 0x08
  4215 000009FB 83EC08              <4>  sub word sp, %1
  4216 000009FE 54                  <4>  push sp
  4217 000009FF 5D                  <4>  pop bp
  4218 00000A00 894600              <3>  mov word [bp+0],%1
  4219 00000A03 894602              <3>  mov word [bp+2],%2
  4220 00000A06 E86A00              <3>  call proc_fltoint32
  4221 00000A09 54                  <3>  push sp
  4222 00000A0A 5D                  <3>  pop bp
  4223 00000A0B 8B4604              <3>  mov word %3,[bp+4]
  4224 00000A0E 8B5E06              <3>  mov word %4,[bp+6]
  4225                              <3>  stkclose 0x08
  4226 00000A11 83C408              <4>  add word sp, %1
  4227                              <2> 	__int32to16 ax, bx, cx
  4228                              <3>  stkopen 0x06
  4229 00000A14 83EC06              <4>  sub word sp, %1
  4230 00000A17 54                  <4>  push sp
  4231 00000A18 5D                  <4>  pop bp
  4232 00000A19 894600              <3>  mov word [bp+0], %1
  4233 00000A1C 895E02              <3>  mov word [bp+2], %2
  4234 00000A1F E871FA              <3>  call proc_int32to16
  4235 00000A22 54                  <3>  push sp
  4236 00000A23 5D                  <3>  pop bp
  4237 00000A24 8B4E04              <3>  mov word %3, [bp+4]
  4238                              <3>  stkclose 0x06
  4239 00000A27 83C406              <4>  add word sp, %1
  4240                              <2> 	
  4241 00000A2A 89E0                <2> 	mov ax,sp
  4242 00000A2C 89C5                <2> 	mov bp,ax
  4243 00000A2E 894E06              <2> 	mov [bp+6],cx
  4244                              <2> 	
  4245 00000A31 C3                  <2> 	ret
  4246                              <2> 	
  4247                              <2> proc_int16tofl:
  4248 00000A32 89E0                <2> 	mov ax,sp
  4249 00000A34 89C5                <2> 	mov bp,ax
  4250                              <2> 	
  4251 00000A36 8B4602              <2> 	mov ax,[bp+2]
  4252                              <2> 	__int16to32 ax, ax, bx
  4253                              <3>  stkopen 0x06
  4254 00000A39 83EC06              <4>  sub word sp, %1
  4255 00000A3C 54                  <4>  push sp
  4256 00000A3D 5D                  <4>  pop bp
  4257 00000A3E 894600              <3>  mov word [bp+0],%1
  4258 00000A41 E827FA              <3>  call proc_int16to32
  4259 00000A44 54                  <3>  push sp
  4260 00000A45 5D                  <3>  pop bp
  4261 00000A46 8B4602              <3>  mov word %2, [bp+2]
  4262 00000A49 8B5E04              <3>  mov word %3, [bp+4]
  4263                              <3>  stkclose 0x06
  4264 00000A4C 83C406              <4>  add word sp, %1
  4265                              <2> 	__int32tofl ax, bx, cx, dx
  4266                              <3>  stkopen 0x08
  4267 00000A4F 83EC08              <4>  sub word sp, %1
  4268 00000A52 54                  <4>  push sp
  4269 00000A53 5D                  <4>  pop bp
  4270 00000A54 894600              <3>  mov word [bp+0],%1
  4271 00000A57 895E02              <3>  mov word [bp+2],%2
  4272 00000A5A E88B00              <3>  call proc_int32tofl
  4273 00000A5D 54                  <3>  push sp
  4274 00000A5E 5D                  <3>  pop bp
  4275 00000A5F 8B4E04              <3>  mov word %3,[bp+4]
  4276 00000A62 8B5606              <3>  mov word %4,[bp+6]
  4277                              <3>  stkclose 0x08
  4278 00000A65 83C408              <4>  add word sp, %1
  4279                              <2> 	
  4280 00000A68 89E0                <2> 	mov ax,sp
  4281 00000A6A 89C5                <2> 	mov bp,ax
  4282 00000A6C 894E04              <2> 	mov [bp+4],cx
  4283 00000A6F 895606              <2> 	mov [bp+6],dx
  4284                              <2> 
  4285 00000A72 C3                  <2> 	ret
  4286                              <2> 
  4287                              <2> proc_fltoint32:
  4288 00000A73 89E0                <2> 	mov ax,sp
  4289 00000A75 89C5                <2> 	mov bp,ax
  4290                              <2> 
  4291 00000A77 8B4602              <2> 	mov ax,[bp+2]
  4292 00000A7A 8B5E04              <2> 	mov bx,[bp+4]
  4293 00000A7D 25FF7F              <2> 	and ax,0x7FFF
  4294 00000A80 09D8                <2> 	or ax,bx
  4295 00000A82 83F800              <2> 	cmp ax,0
  4296 00000A85 7510                <2> 	jnz .continue
  4297                              <2> 	.zero:
  4298 00000A87 8B4602              <2> 		mov ax,[bp+2]
  4299 00000A8A 250080              <2> 		and ax,0x8000
  4300 00000A8D 894606              <2> 		mov word [bp+6],ax
  4301 00000A90 C746080000          <2> 		mov word [bp+8],0
  4302 00000A95 EB50                <2> 		jmp .done
  4303                              <2> 	.continue:
  4304                              <2> 	
  4305 00000A97 8B4E02              <2> 	mov cx,[bp+2]
  4306 00000A9A D1E1                <2> 	shl cx,1
  4307 00000A9C 80ED7F              <2> 	sub ch,0x7F
  4308 00000A9F 80FD00              <2> 	cmp ch,0
  4309 00000AA2 7CE3                <2> 	jl .zero
  4310                              <2> 	
  4311 00000AA4 B117                <2> 	mov cl,23	
  4312 00000AA6 38CD                <2> 	cmp ch,cl
  4313 00000AA8 7302                <2> 	jae .endexp
  4314 00000AAA 28E9                <2> 		sub cl,ch
  4315                              <2> 	.endexp:
  4316                              <2> 	
  4317 00000AAC 8B4602              <2> 	mov ax,[bp+2]
  4318 00000AAF 83E07F              <2> 	and ax,0x007F
  4319 00000AB2 0D8000              <2> 	or ax,0x0080
  4320                              <2> 	
  4321 00000AB5 8B5E04              <2> 	mov bx,[bp+4]
  4322                              <2> 		
  4323                              <2> 	__shr32 ax, bx, cl
  4324                              <3>  stkopen 5
  4325 00000AB8 83EC05              <4>  sub word sp, %1
  4326 00000ABB 54                  <4>  push sp
  4327 00000ABC 5D                  <4>  pop bp
  4328 00000ABD 894600              <3>  mov word [bp+0], %1
  4329 00000AC0 895E02              <3>  mov word [bp+2], %2
  4330 00000AC3 884E04              <3>  mov byte [bp+4], %3
  4331 00000AC6 E834FD              <3>  call proc_shr32
  4332 00000AC9 54                  <3>  push sp
  4333 00000ACA 5D                  <3>  pop bp
  4334 00000ACB 8B4600              <3>  mov word %1, [bp+0]
  4335 00000ACE 8B5E02              <3>  mov word %2, [bp+2]
  4336                              <3>  stkclose 5
  4337 00000AD1 83C405              <4>  add word sp, %1
  4338                              <2> 		
  4339 00000AD4 89E2                <2> 	mov dx,sp
  4340 00000AD6 89D5                <2> 	mov bp,dx
  4341                              <2> 	
  4342 00000AD8 8B4E02              <2> 	mov cx,[bp+2]
  4343 00000ADB 81E10080            <2> 	and cx,0x8000
  4344 00000ADF 01C8                <2> 	add ax,cx
  4345                              <2> 	 
  4346 00000AE1 894606              <2> 	mov [bp+6],ax
  4347 00000AE4 895E08              <2> 	mov [bp+8],bx
  4348                              <2> 	
  4349                              <2> 	.done:
  4350                              <2> 	
  4351 00000AE7 C3                  <2> 	ret
  4352                              <2> 	
  4353                              <2> proc_int32tofl:
  4354 00000AE8 89E0                <2> 	mov ax,sp
  4355 00000AEA 89C5                <2> 	mov bp,ax
  4356                              <2> 	
  4357 00000AEC 8B4602              <2> 	mov ax,[bp+2]
  4358 00000AEF 8B5E04              <2> 	mov bx,[bp+4]
  4359                              <2> 	
  4360 00000AF2 89C1                <2> 	mov cx,ax
  4361 00000AF4 81E1FF7F            <2> 	and cx,0x7FFF
  4362 00000AF8 09D9                <2> 	or cx,bx
  4363 00000AFA 83F900              <2> 	cmp cx,0
  4364 00000AFD 7511                <2> 	jnz .continue
  4365 00000AFF 8B4602              <2> 		mov ax,[bp+2]
  4366 00000B02 250080              <2> 		and ax,0x8000
  4367 00000B05 894606              <2> 		mov word [bp+6],ax
  4368 00000B08 C746080000          <2> 		mov word [bp+8],0
  4369 00000B0D E99100              <2> 		jmp .done
  4370                              <2> 	.continue:
  4371                              <2> 	
  4372 00000B10 83E07F              <2> 	and ax,0x007F	
  4373                              <2> 	
  4374 00000B13 894606              <2> 	mov [bp+6],ax
  4375 00000B16 895E08              <2> 	mov [bp+8],bx	
  4376                              <2> 		
  4377                              <2> 	__lzbitcount32 ax, bx, ch		
  4378 00000B19 53                  <3>  push %2
  4379                              <3>  __lzbitcount16 %1, cl
  4380                              <4>  stkopen 3
  4381 00000B1A 83EC03              <5>  sub word sp, %1
  4382 00000B1D 54                  <5>  push sp
  4383 00000B1E 5D                  <5>  pop bp
  4384 00000B1F 894600              <4>  mov word [bp+0], %1
  4385 00000B22 E85DFD              <4>  call proc__lzbitcount16
  4386 00000B25 54                  <4>  push sp
  4387 00000B26 5D                  <4>  pop bp
  4388 00000B27 8A4E02              <4>  mov byte %2, [bp+2]
  4389                              <4>  stkclose 3
  4390 00000B2A 83C403              <5>  add word sp, %1
  4391 00000B2D 58                  <3>  pop ax
  4392 00000B2E 80F910              <3>  cmp cl,16
  4393 00000B31 7217                <3>  jb .end
  4394 00000B33 51                  <3>  push cx
  4395                              <3>  __lzbitcount16 ax, al
  4396                              <4>  stkopen 3
  4397 00000B34 83EC03              <5>  sub word sp, %1
  4398 00000B37 54                  <5>  push sp
  4399 00000B38 5D                  <5>  pop bp
  4400 00000B39 894600              <4>  mov word [bp+0], %1
  4401 00000B3C E843FD              <4>  call proc__lzbitcount16
  4402 00000B3F 54                  <4>  push sp
  4403 00000B40 5D                  <4>  pop bp
  4404 00000B41 8A4602              <4>  mov byte %2, [bp+2]
  4405                              <4>  stkclose 3
  4406 00000B44 83C403              <5>  add word sp, %1
  4407 00000B47 59                  <3>  pop cx
  4408 00000B48 00C1                <3>  add cl,al
  4409                              <3>  .end:
  4410 00000B4A 88CD                <3>  mov byte %3, cl
  4411 00000B4C B120                <2> 	mov cl,32
  4412 00000B4E 28E9                <2> 	sub cl,ch
  4413                              <2> 	
  4414 00000B50 80F918              <2> 	cmp cl,24
  4415 00000B53 732C                <2> 	jae .endmantissa
  4416                              <2> 	
  4417 00000B55 B218                <2> 	mov dl,24
  4418 00000B57 28CA                <2> 	sub dl,cl				
  4419                              <2> 	
  4420 00000B59 89E0                <2> 	mov ax,sp
  4421 00000B5B 89C5                <2> 	mov bp,ax
  4422 00000B5D 8B4606              <2> 	mov ax,[bp+6]
  4423 00000B60 8B5E08              <2> 	mov bx,[bp+8]
  4424                              <2> 	
  4425 00000B63 51                  <2> 	push cx	
  4426                              <2> 	__shl32 ax, bx, dl	
  4427                              <3>  stkopen 5
  4428 00000B64 83EC05              <4>  sub word sp, %1
  4429 00000B67 54                  <4>  push sp
  4430 00000B68 5D                  <4>  pop bp
  4431 00000B69 894600              <3>  mov word [bp+0], %1
  4432 00000B6C 895E02              <3>  mov word [bp+2], %2
  4433 00000B6F 885604              <3>  mov byte [bp+4], %3
  4434 00000B72 E841FC              <3>  call proc_shl32
  4435 00000B75 54                  <3>  push sp
  4436 00000B76 5D                  <3>  pop bp
  4437 00000B77 8B4600              <3>  mov word %1, [bp+0]
  4438 00000B7A 8B5E02              <3>  mov word %2, [bp+2]
  4439                              <3>  stkclose 5
  4440 00000B7D 83C405              <4>  add word sp, %1
  4441 00000B80 59                  <2> 	pop cx
  4442                              <2> 	
  4443                              <2> 	.endmantissa:
  4444                              <2> 	
  4445 00000B81 83E07F              <2> 	and ax,0x007F
  4446                              <2> 		
  4447 00000B84 80C17E              <2> 	add cl,0x7E
  4448 00000B87 C1E108              <2> 	shl cx,8
  4449 00000B8A D1E9                <2> 	shr cx,1
  4450 00000B8C 01C8                <2> 	add ax,cx
  4451                              <2> 	
  4452 00000B8E 89E1                <2> 	mov cx,sp
  4453 00000B90 89CD                <2> 	mov bp,cx
  4454                              <2> 	
  4455 00000B92 8B4E02              <2> 	mov cx,[bp+2]
  4456 00000B95 81E10080            <2> 	and cx,0x8000	
  4457 00000B99 01C8                <2> 	add ax,cx
  4458                              <2> 		
  4459 00000B9B 894606              <2> 	mov [bp+6],ax
  4460 00000B9E 895E08              <2> 	mov [bp+8],bx
  4461                              <2> 	
  4462                              <2> 	.done:		
  4463                              <2> 	
  4464 00000BA1 C3                  <2> 	ret
  4465                              <2> 	
  4466                              <2> proc_flcmp:
  4467 00000BA2 89E0                <2> 	mov ax,sp
  4468 00000BA4 89C5                <2> 	mov bp,ax		
  4469                              <2> 	
  4470 00000BA6 8B4602              <2> 	mov ax,[bp+2]
  4471 00000BA9 8B5E06              <2> 	mov bx,[bp+6]
  4472 00000BAC 55                  <2> 	push bp
  4473                              <2> 	__cmp_validate ax, bx, cl, dl
  4474                              <3>  stkopen 0x06
  4475 00000BAD 83EC06              <4>  sub word sp, %1
  4476 00000BB0 54                  <4>  push sp
  4477 00000BB1 5D                  <4>  pop bp
  4478 00000BB2 894600              <3>  mov word [bp+0],%1
  4479 00000BB5 895E02              <3>  mov word [bp+2],%2
  4480 00000BB8 E84C09              <3>  call proc__cmp_validate
  4481 00000BBB 54                  <3>  push sp
  4482 00000BBC 5D                  <3>  pop bp
  4483 00000BBD 8A4E04              <3>  mov byte %3, [bp+4]
  4484 00000BC0 8A5605              <3>  mov byte %4, [bp+5]
  4485                              <3>  stkclose 0x06
  4486 00000BC3 83C406              <4>  add word sp, %1
  4487 00000BC6 5D                  <2> 	pop bp
  4488 00000BC7 80FA00              <2> 	cmp dl,0
  4489 00000BCA 7505                <2> 	jnz .continue
  4490 00000BCC 884E0A              <2> 		mov byte [bp+0x0A], cl
  4491 00000BCF EB5E                <2> 		jmp .done		
  4492                              <2> 	.continue:
  4493                              <2> 			
  4494 00000BD1 8B4602              <2> 	mov ax,[bp+2]
  4495 00000BD4 8B5E06              <2> 	mov bx,[bp+6]
  4496 00000BD7 250080              <2> 	and ax,0x8000
  4497 00000BDA 81E30080            <2> 	and bx,0x8000	
  4498 00000BDE 39D8                <2> 	cmp ax,bx
  4499 00000BE0 723C                <2> 	jb .above
  4500 00000BE2 773E                <2> 	ja .below
  4501                              <2> 	
  4502 00000BE4 8B4602              <2> 	mov ax,[bp+2]
  4503 00000BE7 8B5E06              <2> 	mov bx,[bp+6]
  4504 00000BEA D1E0                <2> 	shl ax,1
  4505 00000BEC D1E3                <2> 	shl bx,1
  4506 00000BEE 38FC                <2> 	cmp ah,bh
  4507 00000BF0 772C                <2> 	ja .above
  4508 00000BF2 722E                <2> 	jb .below
  4509                              <2> 	
  4510 00000BF4 8B4602              <2> 	mov ax,[bp+2]
  4511 00000BF7 8B5E04              <2> 	mov bx,[bp+4]
  4512 00000BFA 8B4E06              <2> 	mov cx,[bp+6]
  4513 00000BFD 8B5608              <2> 	mov dx,[bp+8]
  4514                              <2> 	
  4515                              <2> 	__cmp32 ax, bx, cx, dx, cl
  4516                              <3>  stkopen 9
  4517 00000C00 83EC09              <4>  sub word sp, %1
  4518 00000C03 54                  <4>  push sp
  4519 00000C04 5D                  <4>  pop bp
  4520 00000C05 894600              <3>  mov word [bp+0], %1
  4521 00000C08 895E02              <3>  mov word [bp+2], %2
  4522 00000C0B 894E04              <3>  mov word [bp+4], %3
  4523 00000C0E 895606              <3>  mov word [bp+6], %4
  4524 00000C11 E877FB              <3>  call proc_cmp32
  4525 00000C14 54                  <3>  push sp
  4526 00000C15 5D                  <3>  pop bp
  4527 00000C16 8A4E08              <3>  mov byte %5, [bp+8]
  4528                              <3>  stkclose 9
  4529 00000C19 83C409              <4>  add word sp, %1
  4530 00000C1C EB0A                <2> 	jmp .endcmp
  4531                              <2> 		
  4532                              <2> 	.above:
  4533 00000C1E B101                <2> 		mov cl, 1
  4534 00000C20 EB06                <2> 		jmp .endcmp
  4535                              <2> 	.below:
  4536 00000C22 B1FF                <2> 		mov cl, -1
  4537 00000C24 EB02                <2> 		jmp .endcmp
  4538                              <2> 	.equal:	
  4539 00000C26 B100                <2> 		mov cl, 0	
  4540                              <2> 	.endcmp:
  4541                              <2> 	
  4542 00000C28 89E0                <2> 	mov ax,sp
  4543 00000C2A 89C5                <2> 	mov bp,ax
  4544 00000C2C 884E0A              <2> 	mov byte [bp+0x0A], cl
  4545                              <2> 	
  4546                              <2> 	.done:
  4547                              <2> 					
  4548 00000C2F C3                  <2> 	ret
  4549                              <2> 
  4550                              <2> proc_flshl:
  4551 00000C30 89E0                <2> 	mov ax,sp
  4552 00000C32 89C5                <2> 	mov bp,ax
  4553                              <2> 	
  4554 00000C34 8B4602              <2> 	mov ax,[bp+2]
  4555 00000C37 25807F              <2> 	and ax,0x7F80
  4556 00000C3A D1E0                <2> 	shl ax,1
  4557 00000C3C FEC4                <2> 	inc ah	
  4558 00000C3E D1E8                <2> 	shr ax,1
  4559                              <2> 	
  4560 00000C40 8B5E02              <2> 	mov bx,[bp+2]
  4561 00000C43 81E37F80            <2> 	and bx,0x807F
  4562 00000C47 01C3                <2> 	add bx,ax
  4563                              <2> 	
  4564 00000C49 895E02              <2> 	mov [bp+2],bx		
  4565                              <2> 	
  4566 00000C4C C3                  <2> 	ret
  4567                              <2> 
  4568                              <2> proc_flshr:
  4569 00000C4D 89E0                <2> 	mov ax,sp
  4570 00000C4F 89C5                <2> 	mov bp,ax
  4571                              <2> 	
  4572 00000C51 8B4602              <2> 	mov ax,[bp+2]
  4573 00000C54 25807F              <2> 	and ax,0x7F80
  4574 00000C57 D1E0                <2> 	shl ax,1
  4575 00000C59 FECC                <2> 	dec ah	
  4576 00000C5B D1E8                <2> 	shr ax,1
  4577                              <2> 	
  4578 00000C5D 8B5E02              <2> 	mov bx,[bp+2]
  4579 00000C60 81E37F80            <2> 	and bx,0x807F
  4580 00000C64 01C3                <2> 	add bx,ax
  4581                              <2> 	
  4582 00000C66 895E02              <2> 	mov [bp+2],bx	
  4583                              <2> 	
  4584 00000C69 C3                  <2> 	ret
  4585                              <2> 
  4586                              <2> proc_fldiv:
  4587 00000C6A 89E0                <2> 	mov ax,sp
  4588 00000C6C 89C5                <2> 	mov bp,ax
  4589                              <2> 				
  4590                              <2> 	; sinal
  4591                              <2> 	
  4592 00000C6E 8B4602              <2> 	mov ax,[bp+2]
  4593 00000C71 8B5E06              <2> 	mov bx,[bp+6]
  4594 00000C74 250080              <2> 	and ax,0x8000
  4595 00000C77 81E30080            <2> 	and bx,0x8000
  4596 00000C7B 31D8                <2> 	xor ax,bx
  4597 00000C7D 89460A              <2> 	mov word [bp+0x0A],ax
  4598                              <2> 		
  4599                              <2> 	; sinal calculado e setado
  4600                              <2> 
  4601                              <2> 	; valores especiais
  4602                              <2> 	
  4603 00000C80 8B4602              <2> 	mov ax,[bp+2]
  4604 00000C83 8B5E04              <2> 	mov bx,[bp+4]
  4605 00000C86 8B4E06              <2> 	mov cx,[bp+6]
  4606 00000C89 8B5608              <2> 	mov dx,[bp+8]
  4607                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  4608                              <3>  stkopen 0x0D
  4609 00000C8C 83EC0D              <4>  sub word sp, %1
  4610 00000C8F 54                  <4>  push sp
  4611 00000C90 5D                  <4>  pop bp
  4612 00000C91 894600              <3>  mov word [bp+0],%1
  4613 00000C94 895E02              <3>  mov word [bp+2],%2
  4614 00000C97 894E04              <3>  mov word [bp+4],%3
  4615 00000C9A 895606              <3>  mov word [bp+6],%4
  4616 00000C9D E81707              <3>  call proc__validate
  4617 00000CA0 54                  <3>  push sp
  4618 00000CA1 5D                  <3>  pop bp
  4619 00000CA2 8B4608              <3>  mov word %5,[bp+8]
  4620 00000CA5 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4621 00000CA8 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4622                              <3>  stkclose 0x0D
  4623 00000CAB 83C40D              <4>  add word sp, %1
  4624 00000CAE 80F900              <2> 	cmp cl,0
  4625 00000CB1 750D                <2> 	jnz .continue
  4626 00000CB3 89E2                <2> 		mov dx,sp
  4627 00000CB5 89D5                <2> 		mov bp,dx
  4628 00000CB7 01460A              <2> 		add word [bp+0x0A],ax
  4629 00000CBA 895E0C              <2> 		mov word [bp+0x0C],bx						
  4630 00000CBD E9C800              <2> 		jmp .done	
  4631                              <2> 	.continue:
  4632                              <2> 	
  4633 00000CC0 89E0                <2> 	mov ax,sp
  4634 00000CC2 89C5                <2> 	mov bp,ax
  4635 00000CC4 8B4602              <2> 	mov ax,[bp+2]
  4636 00000CC7 8B5E04              <2> 	mov bx,[bp+4]
  4637 00000CCA 8B4E06              <2> 	mov cx,[bp+6]
  4638 00000CCD 8B5608              <2> 	mov dx,[bp+8]
  4639                              <2> 	__div_validate ax, bx, cx, dx, ax, bx, cl
  4640                              <3>  stkopen 0x0D
  4641 00000CD0 83EC0D              <4>  sub word sp, %1
  4642 00000CD3 54                  <4>  push sp
  4643 00000CD4 5D                  <4>  pop bp
  4644 00000CD5 894600              <3>  mov word [bp+0],%1
  4645 00000CD8 895E02              <3>  mov word [bp+2],%2
  4646 00000CDB 894E04              <3>  mov word [bp+4],%3
  4647 00000CDE 895606              <3>  mov word [bp+6],%4
  4648 00000CE1 E83A07              <3>  call proc__div_validate
  4649 00000CE4 54                  <3>  push sp
  4650 00000CE5 5D                  <3>  pop bp
  4651 00000CE6 8B4608              <3>  mov word %5,[bp+8]
  4652 00000CE9 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4653 00000CEC 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4654                              <3>  stkclose 0x0D
  4655 00000CEF 83C40D              <4>  add word sp, %1
  4656 00000CF2 80F900              <2> 	cmp cl,0
  4657 00000CF5 750D                <2> 	jnz .continue2
  4658 00000CF7 89E2                <2> 		mov dx,sp
  4659 00000CF9 89D5                <2> 		mov bp,dx
  4660 00000CFB 01460A              <2> 		add word [bp+0x0A],ax
  4661 00000CFE 895E0C              <2> 		mov word [bp+0x0C],bx				
  4662 00000D01 E98400              <2> 		jmp .done	
  4663                              <2> 	.continue2:
  4664                              <2> 	; valores especiais tratados
  4665                              <2> 			
  4666                              <2> 	; expoente parcial
  4667                              <2> 
  4668 00000D04 89E0                <2> 	mov ax,sp
  4669 00000D06 89C5                <2> 	mov bp,ax
  4670 00000D08 8B4602              <2> 	mov ax,[bp+2]
  4671 00000D0B 8B5E06              <2> 	mov bx,[bp+6]
  4672 00000D0E 25807F              <2> 	and ax,0x7F80
  4673 00000D11 81E3807F            <2> 	and bx,0x7F80
  4674 00000D15 D1E0                <2> 	shl ax,1
  4675 00000D17 D1E3                <2> 	shl bx,1		
  4676                              <2> 			
  4677 00000D19 28FC                <2> 	sub ah,bh		
  4678 00000D1B 80C47F              <2> 	add ah,0x7F
  4679                              <2> 	
  4680 00000D1E 50                  <2> 	push ax
  4681                              <2> 		
  4682                              <2> 	; expoente parcial calculado
  4683                              <2> 	
  4684                              <2> 	; mantissa
  4685                              <2> 
  4686 00000D1F 8B4602              <2> 	mov ax,[bp+2]
  4687 00000D22 8B5E04              <2> 	mov bx,[bp+4]
  4688 00000D25 8B4E06              <2> 	mov cx,[bp+6]
  4689 00000D28 8B5608              <2> 	mov dx,[bp+8]
  4690 00000D2B 83E07F              <2> 	and ax,0x007F
  4691 00000D2E 83E17F              <2> 	and cx,0x007F
  4692 00000D31 0D8000              <2> 	or ax,0x0080
  4693 00000D34 81C98000            <2> 	or cx,0x0080
  4694                              <2> 	
  4695                              <2> 	__fldiv32 ax, bx, cx, dx, cx, dx
  4696                              <3>  stkopen 0x11
  4697 00000D38 83EC11              <4>  sub word sp, %1
  4698 00000D3B 54                  <4>  push sp
  4699 00000D3C 5D                  <4>  pop bp
  4700 00000D3D 894600              <3>  mov word [bp+0],%1
  4701 00000D40 895E02              <3>  mov word [bp+2],%2
  4702 00000D43 894E04              <3>  mov word [bp+4],%3
  4703 00000D46 895606              <3>  mov word [bp+6],%4
  4704 00000D49 E87505              <3>  call proc__fldiv32
  4705 00000D4C 54                  <3>  push sp
  4706 00000D4D 5D                  <3>  pop bp
  4707 00000D4E 8B4E08              <3>  mov word %5,[bp+8]
  4708 00000D51 8B560A              <3>  mov word %6,[bp+0x0A]
  4709                              <3>  stkclose 0x11
  4710 00000D54 83C411              <4>  add word sp, %1
  4711                              <2> 		
  4712 00000D57 89E0                <2> 	mov ax,sp
  4713 00000D59 89C5                <2> 	mov bp,ax
  4714 00000D5B 83C502              <2> 	add bp,2
  4715                              <2> 	
  4716 00000D5E 034E0A              <2> 	add cx,[bp+0x0A]
  4717                              <2> 			
  4718 00000D61 58                  <2> 	pop ax	
  4719                              <2> 	__normalize cx, dx, ax
  4720                              <3>  stkopen 0x06
  4721 00000D62 83EC06              <4>  sub word sp, %1
  4722 00000D65 54                  <4>  push sp
  4723 00000D66 5D                  <4>  pop bp
  4724 00000D67 894E00              <3>  mov word [bp+0],%1
  4725 00000D6A 895602              <3>  mov word [bp+2],%2
  4726 00000D6D 894604              <3>  mov word [bp+4],%3
  4727 00000D70 E8B303              <3>  call proc__normalize
  4728 00000D73 54                  <3>  push sp
  4729 00000D74 5D                  <3>  pop bp
  4730 00000D75 8B4E00              <3>  mov word %1,[bp+0]
  4731 00000D78 8B5602              <3>  mov word %2,[bp+2]
  4732                              <3>  stkclose 0x06
  4733 00000D7B 83C406              <4>  add word sp, %1
  4734                              <2> 	
  4735 00000D7E 89E0                <2> 	mov ax,sp
  4736 00000D80 89C5                <2> 	mov bp,ax
  4737 00000D82 894E0A              <2> 	mov [bp+0x0A],cx
  4738 00000D85 89560C              <2> 	mov [bp+0x0C],dx
  4739                              <2> 	
  4740                              <2> 	.done:
  4741                              <2> 			
  4742 00000D88 C3                  <2> 	ret
  4743                              <2> 
  4744                              <2> proc_flmul:
  4745 00000D89 89E0                <2> 	mov ax,sp
  4746 00000D8B 89C5                <2> 	mov bp,ax
  4747                              <2> 	
  4748                              <2> 	; sinal
  4749                              <2> 	
  4750 00000D8D 8B4602              <2> 	mov ax,[bp+2]
  4751 00000D90 8B5E06              <2> 	mov bx,[bp+6]
  4752 00000D93 250080              <2> 	and ax,0x8000
  4753 00000D96 81E30080            <2> 	and bx,0x8000
  4754 00000D9A 31D8                <2> 	xor ax,bx
  4755 00000D9C 89460A              <2> 	mov word [bp+0x0A],ax
  4756                              <2> 	
  4757                              <2> 	; sinal calculado e setado
  4758                              <2> 
  4759                              <2> 	; valores especiais
  4760                              <2> 
  4761 00000D9F 8B4602              <2> 	mov ax,[bp+2]
  4762 00000DA2 8B5E04              <2> 	mov bx,[bp+4]
  4763 00000DA5 8B4E06              <2> 	mov cx,[bp+6]
  4764 00000DA8 8B5608              <2> 	mov dx,[bp+8]
  4765                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  4766                              <3>  stkopen 0x0D
  4767 00000DAB 83EC0D              <4>  sub word sp, %1
  4768 00000DAE 54                  <4>  push sp
  4769 00000DAF 5D                  <4>  pop bp
  4770 00000DB0 894600              <3>  mov word [bp+0],%1
  4771 00000DB3 895E02              <3>  mov word [bp+2],%2
  4772 00000DB6 894E04              <3>  mov word [bp+4],%3
  4773 00000DB9 895606              <3>  mov word [bp+6],%4
  4774 00000DBC E8F805              <3>  call proc__validate
  4775 00000DBF 54                  <3>  push sp
  4776 00000DC0 5D                  <3>  pop bp
  4777 00000DC1 8B4608              <3>  mov word %5,[bp+8]
  4778 00000DC4 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4779 00000DC7 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4780                              <3>  stkclose 0x0D
  4781 00000DCA 83C40D              <4>  add word sp, %1
  4782 00000DCD 80F900              <2> 	cmp cl,0
  4783 00000DD0 750D                <2> 	jnz .continue
  4784 00000DD2 89E2                <2> 		mov dx,sp
  4785 00000DD4 89D5                <2> 		mov bp,dx
  4786 00000DD6 01460A              <2> 		add word [bp+0x0A],ax
  4787 00000DD9 895E0C              <2> 		mov word [bp+0x0C],bx						
  4788 00000DDC E95501              <2> 		jmp .done	
  4789                              <2> 	.continue:
  4790                              <2> 
  4791 00000DDF 89E0                <2> 	mov ax,sp
  4792 00000DE1 89C5                <2> 	mov bp,ax
  4793 00000DE3 8B4602              <2> 	mov ax,[bp+2]
  4794 00000DE6 8B4E06              <2> 	mov cx,[bp+6]
  4795                              <2> 	__mul_validate ax, cx, ax, bx, cl
  4796                              <3>  stkopen 0x09
  4797 00000DE9 83EC09              <4>  sub word sp, %1
  4798 00000DEC 54                  <4>  push sp
  4799 00000DED 5D                  <4>  pop bp
  4800 00000DEE 894600              <3>  mov word [bp+0],%1
  4801 00000DF1 894E02              <3>  mov word [bp+2],%2
  4802 00000DF4 E88106              <3>  call proc__mul_validate
  4803 00000DF7 54                  <3>  push sp
  4804 00000DF8 5D                  <3>  pop bp
  4805 00000DF9 8B4604              <3>  mov word %3,[bp+4]
  4806 00000DFC 8B5E06              <3>  mov word %4,[bp+6]
  4807 00000DFF 8A4E08              <3>  mov byte %5,[bp+8]
  4808                              <3>  stkclose 0x09
  4809 00000E02 83C409              <4>  add word sp, %1
  4810 00000E05 80F900              <2> 	cmp cl,0
  4811 00000E08 750D                <2> 	jnz .continue2
  4812 00000E0A 89E2                <2> 		mov dx,sp
  4813 00000E0C 89D5                <2> 		mov bp,dx
  4814 00000E0E 01460A              <2> 		add word [bp+0x0A],ax
  4815 00000E11 895E0C              <2> 		mov word [bp+0x0C],bx				
  4816 00000E14 E91D01              <2> 		jmp .done	
  4817                              <2> 	.continue2:
  4818                              <2> 	; valores especiais tratados
  4819                              <2> 		
  4820                              <2> 	; expoente parcial
  4821                              <2> 
  4822 00000E17 89E0                <2> 	mov ax,sp
  4823 00000E19 89C5                <2> 	mov bp,ax
  4824 00000E1B 8B4602              <2> 	mov ax,[bp+2]
  4825 00000E1E 8B5E06              <2> 	mov bx,[bp+6]
  4826 00000E21 25807F              <2> 	and ax,0x7F80
  4827 00000E24 81E3807F            <2> 	and bx,0x7F80
  4828 00000E28 D1E0                <2> 	shl ax,1
  4829 00000E2A D1E3                <2> 	shl bx,1		
  4830                              <2> 			
  4831 00000E2C 80EC7F              <2> 	sub ah,0x7F
  4832 00000E2F 80EF7F              <2> 	sub bh,0x7F
  4833                              <2> 				
  4834 00000E32 00FC                <2> 	add ah,bh
  4835 00000E34 80C47F              <2> 	add ah,0x7F
  4836                              <2> 	
  4837 00000E37 50                  <2> 	push ax
  4838                              <2> 	
  4839                              <2> 	; expoente parcial calculado	
  4840                              <2> 	
  4841                              <2> 	; mantissa
  4842                              <2> 	
  4843 00000E38 8B4602              <2> 	mov ax,[bp+2]
  4844 00000E3B 8B5E04              <2> 	mov bx,[bp+4]
  4845 00000E3E 8B4E06              <2> 	mov cx,[bp+6]
  4846 00000E41 8B5608              <2> 	mov dx,[bp+8]	
  4847                              <2> 	
  4848 00000E44 83E07F              <2> 	and ax, 0x007F
  4849 00000E47 83E17F              <2> 	and cx, 0x007F
  4850 00000E4A 0D8000              <2> 	or ax, 0x0080
  4851 00000E4D 81C98000            <2> 	or cx, 0x0080
  4852                              <2> 		
  4853                              <2> 	__mul32_64 ax, bx, cx, dx, ax, bx, cx, dx
  4854                              <3>  stkopen 0x10
  4855 00000E51 83EC10              <4>  sub word sp, %1
  4856 00000E54 54                  <4>  push sp
  4857 00000E55 5D                  <4>  pop bp
  4858 00000E56 894600              <3>  mov word [bp+0],%1
  4859 00000E59 895E02              <3>  mov word [bp+2],%2
  4860 00000E5C 894E04              <3>  mov word [bp+4],%3
  4861 00000E5F 895606              <3>  mov word [bp+6],%4
  4862 00000E62 E81104              <3>  call proc__mul32_64
  4863 00000E65 54                  <3>  push sp
  4864 00000E66 5D                  <3>  pop bp
  4865 00000E67 8B4608              <3>  mov word %5,[bp+8]
  4866 00000E6A 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4867 00000E6D 8B4E0C              <3>  mov word %7,[bp+0x0C]
  4868 00000E70 8B560E              <3>  mov word %8,[bp+0x0E]
  4869                              <3>  stkclose 0x10
  4870 00000E73 83C410              <4>  add word sp, %1
  4871                              <2> 	
  4872 00000E76 51                  <2> 	push cx
  4873                              <2> 	__shl32 ax, bx, 8
  4874                              <3>  stkopen 5
  4875 00000E77 83EC05              <4>  sub word sp, %1
  4876 00000E7A 54                  <4>  push sp
  4877 00000E7B 5D                  <4>  pop bp
  4878 00000E7C 894600              <3>  mov word [bp+0], %1
  4879 00000E7F 895E02              <3>  mov word [bp+2], %2
  4880 00000E82 C6460408            <3>  mov byte [bp+4], %3
  4881 00000E86 E82DF9              <3>  call proc_shl32
  4882 00000E89 54                  <3>  push sp
  4883 00000E8A 5D                  <3>  pop bp
  4884 00000E8B 8B4600              <3>  mov word %1, [bp+0]
  4885 00000E8E 8B5E02              <3>  mov word %2, [bp+2]
  4886                              <3>  stkclose 5
  4887 00000E91 83C405              <4>  add word sp, %1
  4888 00000E94 59                  <2> 	pop cx
  4889 00000E95 88EB                <2> 	mov bl,ch
  4890                              <2> 								
  4891 00000E97 50                  <2> 	push ax
  4892 00000E98 53                  <2> 	push bx
  4893                              <2> 	__lzbitcount32 ax, bx, cl
  4894 00000E99 53                  <3>  push %2
  4895                              <3>  __lzbitcount16 %1, cl
  4896                              <4>  stkopen 3
  4897 00000E9A 83EC03              <5>  sub word sp, %1
  4898 00000E9D 54                  <5>  push sp
  4899 00000E9E 5D                  <5>  pop bp
  4900 00000E9F 894600              <4>  mov word [bp+0], %1
  4901 00000EA2 E8DDF9              <4>  call proc__lzbitcount16
  4902 00000EA5 54                  <4>  push sp
  4903 00000EA6 5D                  <4>  pop bp
  4904 00000EA7 8A4E02              <4>  mov byte %2, [bp+2]
  4905                              <4>  stkclose 3
  4906 00000EAA 83C403              <5>  add word sp, %1
  4907 00000EAD 58                  <3>  pop ax
  4908 00000EAE 80F910              <3>  cmp cl,16
  4909 00000EB1 7217                <3>  jb .end
  4910 00000EB3 51                  <3>  push cx
  4911                              <3>  __lzbitcount16 ax, al
  4912                              <4>  stkopen 3
  4913 00000EB4 83EC03              <5>  sub word sp, %1
  4914 00000EB7 54                  <5>  push sp
  4915 00000EB8 5D                  <5>  pop bp
  4916 00000EB9 894600              <4>  mov word [bp+0], %1
  4917 00000EBC E8C3F9              <4>  call proc__lzbitcount16
  4918 00000EBF 54                  <4>  push sp
  4919 00000EC0 5D                  <4>  pop bp
  4920 00000EC1 8A4602              <4>  mov byte %2, [bp+2]
  4921                              <4>  stkclose 3
  4922 00000EC4 83C403              <5>  add word sp, %1
  4923 00000EC7 59                  <3>  pop cx
  4924 00000EC8 00C1                <3>  add cl,al
  4925                              <3>  .end:
  4926 00000ECA 88C9                <3>  mov byte %3, cl
  4927 00000ECC 5B                  <2> 	pop bx
  4928 00000ECD 58                  <2> 	pop ax
  4929                              <2> 		
  4930 00000ECE 80E908              <2> 	sub cl,8	
  4931 00000ED1 80F908              <2> 	cmp cl,8
  4932 00000ED4 7402                <2> 	je .equal
  4933 00000ED6 7F06                <2> 	jg .great
  4934                              <2> 	.equal:	
  4935 00000ED8 5A                  <2> 		pop dx
  4936 00000ED9 FEC6                <2> 		inc dh
  4937 00000EDB 52                  <2> 		push dx
  4938 00000EDC EB1C                <2> 		jmp .endcmp
  4939                              <2> 	.great:
  4940                              <2> 		__shl32 ax, bx, cl
  4941                              <3>  stkopen 5
  4942 00000EDE 83EC05              <4>  sub word sp, %1
  4943 00000EE1 54                  <4>  push sp
  4944 00000EE2 5D                  <4>  pop bp
  4945 00000EE3 894600              <3>  mov word [bp+0], %1
  4946 00000EE6 895E02              <3>  mov word [bp+2], %2
  4947 00000EE9 884E04              <3>  mov byte [bp+4], %3
  4948 00000EEC E8C7F8              <3>  call proc_shl32
  4949 00000EEF 54                  <3>  push sp
  4950 00000EF0 5D                  <3>  pop bp
  4951 00000EF1 8B4600              <3>  mov word %1, [bp+0]
  4952 00000EF4 8B5E02              <3>  mov word %2, [bp+2]
  4953                              <3>  stkclose 5
  4954 00000EF7 83C405              <4>  add word sp, %1
  4955                              <2> 	.endcmp:
  4956                              <2> 	
  4957 00000EFA 89E1                <2> 	mov cx,sp
  4958 00000EFC 89CD                <2> 	mov bp,cx
  4959 00000EFE 83C502              <2> 	add bp,2
  4960                              <2> 	
  4961 00000F01 01460A              <2> 	add word [bp+0x0A],ax
  4962 00000F04 895E0C              <2> 	mov word [bp+0x0C],bx
  4963                              <2> 	
  4964                              <2> 	; mantissa setada e expoente calculado
  4965                              <2> 				
  4966 00000F07 8B4E0A              <2> 	mov cx,[bp+0x0A]
  4967 00000F0A 8B560C              <2> 	mov dx,[bp+0x0C]
  4968                              <2> 	
  4969 00000F0D 58                  <2> 	pop ax						
  4970                              <2> 	__normalize cx, dx, ax	; normaliza, preserva sinal e seta expoente	
  4971                              <3>  stkopen 0x06
  4972 00000F0E 83EC06              <4>  sub word sp, %1
  4973 00000F11 54                  <4>  push sp
  4974 00000F12 5D                  <4>  pop bp
  4975 00000F13 894E00              <3>  mov word [bp+0],%1
  4976 00000F16 895602              <3>  mov word [bp+2],%2
  4977 00000F19 894604              <3>  mov word [bp+4],%3
  4978 00000F1C E80702              <3>  call proc__normalize
  4979 00000F1F 54                  <3>  push sp
  4980 00000F20 5D                  <3>  pop bp
  4981 00000F21 8B4E00              <3>  mov word %1,[bp+0]
  4982 00000F24 8B5602              <3>  mov word %2,[bp+2]
  4983                              <3>  stkclose 0x06
  4984 00000F27 83C406              <4>  add word sp, %1
  4985                              <2> 		
  4986 00000F2A 89E0                <2> 	mov ax,sp
  4987 00000F2C 89C5                <2> 	mov bp,ax
  4988 00000F2E 894E0A              <2> 	mov [bp+0x0A],cx
  4989 00000F31 89560C              <2> 	mov [bp+0x0C],dx		
  4990                              <2> 
  4991                              <2> 	.done:
  4992                              <2> 																	
  4993 00000F34 C3                  <2> 	ret
  4994                              <2> 	
  4995                              <2> proc_fladdorsub:	
  4996                              <2> 	; valores especiais
  4997 00000F35 89E0                <2> 	mov ax,sp
  4998 00000F37 89C5                <2> 	mov bp,ax
  4999 00000F39 8B4602              <2> 	mov ax,[bp+2]
  5000 00000F3C 8B5E04              <2> 	mov bx,[bp+4]
  5001 00000F3F 8B4E06              <2> 	mov cx,[bp+6]
  5002 00000F42 81E10080            <2> 	and cx,0x8000
  5003 00000F46 334E0E              <2> 	xor word cx,[bp+0x0E]	
  5004 00000F49 8B5606              <2> 	mov dx,[bp+6]
  5005 00000F4C 81E2FF7F            <2> 	and dx,0x7FFF
  5006 00000F50 01D1                <2> 	add cx,dx	
  5007 00000F52 8B5608              <2> 	mov dx,[bp+8]
  5008                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  5009                              <3>  stkopen 0x0D
  5010 00000F55 83EC0D              <4>  sub word sp, %1
  5011 00000F58 54                  <4>  push sp
  5012 00000F59 5D                  <4>  pop bp
  5013 00000F5A 894600              <3>  mov word [bp+0],%1
  5014 00000F5D 895E02              <3>  mov word [bp+2],%2
  5015 00000F60 894E04              <3>  mov word [bp+4],%3
  5016 00000F63 895606              <3>  mov word [bp+6],%4
  5017 00000F66 E84E04              <3>  call proc__validate
  5018 00000F69 54                  <3>  push sp
  5019 00000F6A 5D                  <3>  pop bp
  5020 00000F6B 8B4608              <3>  mov word %5,[bp+8]
  5021 00000F6E 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5022 00000F71 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  5023                              <3>  stkclose 0x0D
  5024 00000F74 83C40D              <4>  add word sp, %1
  5025 00000F77 80F900              <2> 	cmp cl,0
  5026 00000F7A 750D                <2> 	jnz .continue
  5027 00000F7C 89E2                <2> 		mov dx,sp
  5028 00000F7E 89D5                <2> 		mov bp,dx		
  5029 00000F80 89460A              <2> 		mov word [bp+0x0A],ax
  5030 00000F83 895E0C              <2> 		mov word [bp+0x0C],bx										
  5031 00000F86 E99C01              <2> 		jmp .done	
  5032                              <2> 	.continue:
  5033                              <2> 	
  5034 00000F89 89E0                <2> 	mov ax,sp
  5035 00000F8B 89C5                <2> 	mov bp,ax
  5036 00000F8D 8B4602              <2> 	mov ax,[bp+2]
  5037 00000F90 8B5E04              <2> 	mov bx,[bp+4]
  5038 00000F93 8B4E06              <2> 	mov cx,[bp+6]
  5039 00000F96 81E10080            <2> 	and cx,0x8000
  5040 00000F9A 334E0E              <2> 	xor word cx,[bp+0x0E]	
  5041 00000F9D 8B5606              <2> 	mov dx,[bp+6]
  5042 00000FA0 81E2FF7F            <2> 	and dx,0x7FFF
  5043 00000FA4 01D1                <2> 	add cx,dx
  5044 00000FA6 8B5608              <2> 	mov dx,[bp+8]
  5045                              <2> 	__addorsub_validate ax, bx, cx, dx, ax, bx, cl
  5046                              <3>  stkopen 0x0D
  5047 00000FA9 83EC0D              <4>  sub word sp, %1
  5048 00000FAC 54                  <4>  push sp
  5049 00000FAD 5D                  <4>  pop bp
  5050 00000FAE 894600              <3>  mov word [bp+0],%1
  5051 00000FB1 895E02              <3>  mov word [bp+2],%2
  5052 00000FB4 894E04              <3>  mov word [bp+4],%3
  5053 00000FB7 895606              <3>  mov word [bp+6],%4
  5054 00000FBA E8EC04              <3>  call proc__addorsub_validate
  5055 00000FBD 54                  <3>  push sp
  5056 00000FBE 5D                  <3>  pop bp
  5057 00000FBF 8B4608              <3>  mov word %5,[bp+8]
  5058 00000FC2 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5059 00000FC5 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  5060                              <3>  stkclose 0x0D
  5061 00000FC8 83C40D              <4>  add word sp, %1
  5062 00000FCB 80F900              <2> 	cmp cl,0
  5063 00000FCE 750D                <2> 	jnz .continue2
  5064 00000FD0 89E2                <2> 		mov dx,sp
  5065 00000FD2 89D5                <2> 		mov bp,dx					
  5066 00000FD4 89460A              <2> 		mov word [bp+0x0A],ax
  5067 00000FD7 895E0C              <2> 		mov word [bp+0x0C],bx
  5068 00000FDA E94801              <2> 		jmp .done	
  5069                              <2> 	.continue2:
  5070                              <2> 	
  5071                              <2> 	; valores especiais tratados	
  5072                              <2> 
  5073 00000FDD 89E0                <2> 	mov ax,sp
  5074 00000FDF 89C5                <2> 	mov bp,ax	
  5075 00000FE1 8B4602              <2> 	mov ax,[bp+2]
  5076 00000FE4 8B5E06              <2> 	mov bx,[bp+6]
  5077                              <2> 	
  5078 00000FE7 D1E0                <2> 	shl ax,1
  5079 00000FE9 D1E3                <2> 	shl bx,1
  5080 00000FEB 88E5                <2> 	mov ch,ah	
  5081 00000FED 28FD                <2> 	sub ch,bh	
  5082                              <2> 		
  5083 00000FEF 80FD00              <2> 	cmp ch,0
  5084 00000FF2 7402                <2> 	jz .expzero
  5085 00000FF4 EB1E                <2> 	jmp .expnzero
  5086                              <2> 	.expzero:
  5087 00000FF6 50                  <2> 		push ax
  5088 00000FF7 8B4602              <2> 		mov ax,[bp+2]
  5089 00000FFA 8B5E04              <2> 		mov bx,[bp+4]
  5090 00000FFD 8B4E06              <2> 		mov cx,[bp+6]
  5091 00001000 8B5608              <2> 		mov dx,[bp+8]
  5092 00001003 257F80              <2> 		and ax,0x807F
  5093 00001006 81E17F80            <2> 		and cx,0x807F
  5094 0000100A 0D8000              <2> 		or ax,0x0080
  5095 0000100D 81C98000            <2> 		or cx,0x0080
  5096                              <2> 												
  5097 00001011 E99A00              <2> 		jmp .endexpcmp
  5098                              <2> 	.expnzero:
  5099                              <2> 				
  5100 00001014 80FD00              <2> 		cmp ch,0
  5101 00001017 7F05                <2> 		jg .exp1great
  5102 00001019 7C49                <2> 		jl .exp1less
  5103 0000101B E99000              <2> 		jmp .endexpcmp
  5104                              <2> 		.exp1great:					
  5105 0000101E 50                  <2> 			push ax
  5106                              <2> 		
  5107 0000101F 8B4606              <2> 			mov ax,[bp+6]
  5108 00001022 8B5E08              <2> 			mov bx,[bp+8]
  5109 00001025 83E07F              <2> 			and ax,0x007F
  5110 00001028 0D8000              <2> 			or ax,0x0080
  5111                              <2> 						
  5112 0000102B 55                  <2> 			push bp
  5113                              <2> 			__shr32 ax, bx, ch
  5114                              <3>  stkopen 5
  5115 0000102C 83EC05              <4>  sub word sp, %1
  5116 0000102F 54                  <4>  push sp
  5117 00001030 5D                  <4>  pop bp
  5118 00001031 894600              <3>  mov word [bp+0], %1
  5119 00001034 895E02              <3>  mov word [bp+2], %2
  5120 00001037 886E04              <3>  mov byte [bp+4], %3
  5121 0000103A E8C0F7              <3>  call proc_shr32
  5122 0000103D 54                  <3>  push sp
  5123 0000103E 5D                  <3>  pop bp
  5124 0000103F 8B4600              <3>  mov word %1, [bp+0]
  5125 00001042 8B5E02              <3>  mov word %2, [bp+2]
  5126                              <3>  stkclose 5
  5127 00001045 83C405              <4>  add word sp, %1
  5128 00001048 5D                  <2> 			pop bp		
  5129                              <2> 				
  5130 00001049 8B5606              <2> 			mov dx,[bp+6]
  5131 0000104C 81E20080            <2> 			and dx,0x8000
  5132 00001050 01D0                <2> 			add ax,dx			
  5133                              <2> 			
  5134 00001052 89C1                <2> 			mov cx,ax
  5135 00001054 89DA                <2> 			mov dx,bx
  5136 00001056 8B4602              <2> 			mov ax,[bp+2]
  5137 00001059 8B5E04              <2> 			mov bx,[bp+4]										
  5138                              <2> 									
  5139 0000105C 257F80              <2> 			and ax,0x807F
  5140 0000105F 0D8000              <2> 			or ax,0x0080
  5141                              <2> 						
  5142 00001062 EB4A                <2> 			jmp .endexp1cmp	
  5143                              <2> 		.exp1less:
  5144 00001064 88E9                <2> 			mov cl,ch
  5145 00001066 B5FF                <2> 			mov ch,0xFF
  5146 00001068 28CD                <2> 			sub ch,cl
  5147 0000106A FEC5                <2> 			inc ch
  5148 0000106C 53                  <2> 			push bx		
  5149                              <2> 		
  5150 0000106D 8B4602              <2> 			mov ax,[bp+2]
  5151 00001070 8B5E04              <2> 			mov bx,[bp+4]
  5152 00001073 83E07F              <2> 			and ax,0x007F
  5153 00001076 0D8000              <2> 			or ax,0x0080
  5154                              <2> 						
  5155 00001079 55                  <2> 			push bp
  5156                              <2> 			__shr32 ax, bx, ch
  5157                              <3>  stkopen 5
  5158 0000107A 83EC05              <4>  sub word sp, %1
  5159 0000107D 54                  <4>  push sp
  5160 0000107E 5D                  <4>  pop bp
  5161 0000107F 894600              <3>  mov word [bp+0], %1
  5162 00001082 895E02              <3>  mov word [bp+2], %2
  5163 00001085 886E04              <3>  mov byte [bp+4], %3
  5164 00001088 E872F7              <3>  call proc_shr32
  5165 0000108B 54                  <3>  push sp
  5166 0000108C 5D                  <3>  pop bp
  5167 0000108D 8B4600              <3>  mov word %1, [bp+0]
  5168 00001090 8B5E02              <3>  mov word %2, [bp+2]
  5169                              <3>  stkclose 5
  5170 00001093 83C405              <4>  add word sp, %1
  5171 00001096 5D                  <2> 			pop bp
  5172                              <2> 								
  5173 00001097 8B5602              <2> 			mov dx,[bp+2]
  5174 0000109A 81E20080            <2> 			and dx,0x8000
  5175 0000109E 01D0                <2> 			add ax,dx			
  5176                              <2> 			
  5177 000010A0 8B4E06              <2> 			mov cx,[bp+6]
  5178 000010A3 8B5608              <2> 			mov dx,[bp+8]										
  5179                              <2> 									
  5180 000010A6 81E17F80            <2> 			and cx,0x807F
  5181 000010AA 81C98000            <2> 			or cx,0x0080
  5182                              <2> 									
  5183                              <2> 		.endexp1cmp:
  5184                              <2> 		
  5185                              <2> 	.endexpcmp:			
  5186                              <2> 	
  5187 000010AE 837E0E00            <2> 	cmp word [bp+0x0E],0
  5188 000010B2 7526                <2> 	jnz .sub
  5189                              <2> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0
  5190                              <3>  stkopen 0x0D
  5191 000010B4 83EC0D              <4>  sub word sp, %1
  5192 000010B7 54                  <4>  push sp
  5193 000010B8 5D                  <4>  pop bp
  5194 000010B9 894600              <3>  mov word [bp+0],%1
  5195 000010BC 895E02              <3>  mov word [bp+2],%2
  5196 000010BF 894E04              <3>  mov word [bp+4],%3
  5197 000010C2 895606              <3>  mov word [bp+6],%4
  5198 000010C5 C7460C0000          <3>  mov word [bp+0x0C], %7
  5199 000010CA E81201              <3>  call proc__iaddorsub32
  5200 000010CD 54                  <3>  push sp
  5201 000010CE 5D                  <3>  pop bp
  5202 000010CF 8B4608              <3>  mov word %5,[bp+8]
  5203 000010D2 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5204                              <3>  stkclose 0x0D
  5205 000010D5 83C40D              <4>  add word sp, %1
  5206 000010D8 EB24                <2> 		jmp .endop
  5207                              <2> 	.sub:
  5208                              <2> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0x8000
  5209                              <3>  stkopen 0x0D
  5210 000010DA 83EC0D              <4>  sub word sp, %1
  5211 000010DD 54                  <4>  push sp
  5212 000010DE 5D                  <4>  pop bp
  5213 000010DF 894600              <3>  mov word [bp+0],%1
  5214 000010E2 895E02              <3>  mov word [bp+2],%2
  5215 000010E5 894E04              <3>  mov word [bp+4],%3
  5216 000010E8 895606              <3>  mov word [bp+6],%4
  5217 000010EB C7460C0080          <3>  mov word [bp+0x0C], %7
  5218 000010F0 E8EC00              <3>  call proc__iaddorsub32
  5219 000010F3 54                  <3>  push sp
  5220 000010F4 5D                  <3>  pop bp
  5221 000010F5 8B4608              <3>  mov word %5,[bp+8]
  5222 000010F8 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5223                              <3>  stkclose 0x0D
  5224 000010FB 83C40D              <4>  add word sp, %1
  5225                              <2> 	.endop:
  5226                              <2> 						
  5227 000010FE 59                  <2> 	pop cx
  5228                              <2> 	
  5229                              <2> 	__normalize ax, bx, cx
  5230                              <3>  stkopen 0x06
  5231 000010FF 83EC06              <4>  sub word sp, %1
  5232 00001102 54                  <4>  push sp
  5233 00001103 5D                  <4>  pop bp
  5234 00001104 894600              <3>  mov word [bp+0],%1
  5235 00001107 895E02              <3>  mov word [bp+2],%2
  5236 0000110A 894E04              <3>  mov word [bp+4],%3
  5237 0000110D E81600              <3>  call proc__normalize
  5238 00001110 54                  <3>  push sp
  5239 00001111 5D                  <3>  pop bp
  5240 00001112 8B4600              <3>  mov word %1,[bp+0]
  5241 00001115 8B5E02              <3>  mov word %2,[bp+2]
  5242                              <3>  stkclose 0x06
  5243 00001118 83C406              <4>  add word sp, %1
  5244                              <2> 	
  5245 0000111B 89E1                <2> 	mov cx,sp
  5246 0000111D 89CD                <2> 	mov bp,cx
  5247 0000111F 89460A              <2> 	mov word [bp+0x0A],ax
  5248 00001122 895E0C              <2> 	mov word [bp+0x0C],bx
  5249                              <2> 									
  5250                              <2> 	.done:		
  5251                              <2> 							
  5252 00001125 C3                  <2> 	ret
  5253                              <2> 	
  5254                              <2> proc__normalize:
  5255 00001126 89E0                <2> 	mov ax,sp
  5256 00001128 89C5                <2> 	mov bp,ax	
  5257                              <2> 
  5258 0000112A 8B4E02              <2> 	mov cx,[bp+2]	
  5259 0000112D 8B5604              <2> 	mov dx,[bp+4]
  5260 00001130 8B5E06              <2> 	mov bx,[bp+6]
  5261                              <2> 					
  5262 00001133 89C8                <2> 	mov ax,cx
  5263 00001135 250080              <2> 	and ax,0x8000			
  5264 00001138 894602              <2> 	mov [bp+2],ax	
  5265                              <2> 					
  5266 0000113B 81E1FF7F            <2> 	and cx,0x7FFF
  5267                              <2> 			
  5268 0000113F 51                  <2> 	push cx
  5269 00001140 52                  <2> 	push dx
  5270 00001141 53                  <2> 	push bx
  5271                              <2> 	__lzbitcount32 cx, dx, al	
  5272 00001142 52                  <3>  push %2
  5273                              <3>  __lzbitcount16 %1, cl
  5274                              <4>  stkopen 3
  5275 00001143 83EC03              <5>  sub word sp, %1
  5276 00001146 54                  <5>  push sp
  5277 00001147 5D                  <5>  pop bp
  5278 00001148 894E00              <4>  mov word [bp+0], %1
  5279 0000114B E834F7              <4>  call proc__lzbitcount16
  5280 0000114E 54                  <4>  push sp
  5281 0000114F 5D                  <4>  pop bp
  5282 00001150 8A4E02              <4>  mov byte %2, [bp+2]
  5283                              <4>  stkclose 3
  5284 00001153 83C403              <5>  add word sp, %1
  5285 00001156 58                  <3>  pop ax
  5286 00001157 80F910              <3>  cmp cl,16
  5287 0000115A 7217                <3>  jb .end
  5288 0000115C 51                  <3>  push cx
  5289                              <3>  __lzbitcount16 ax, al
  5290                              <4>  stkopen 3
  5291 0000115D 83EC03              <5>  sub word sp, %1
  5292 00001160 54                  <5>  push sp
  5293 00001161 5D                  <5>  pop bp
  5294 00001162 894600              <4>  mov word [bp+0], %1
  5295 00001165 E81AF7              <4>  call proc__lzbitcount16
  5296 00001168 54                  <4>  push sp
  5297 00001169 5D                  <4>  pop bp
  5298 0000116A 8A4602              <4>  mov byte %2, [bp+2]
  5299                              <4>  stkclose 3
  5300 0000116D 83C403              <5>  add word sp, %1
  5301 00001170 59                  <3>  pop cx
  5302 00001171 00C1                <3>  add cl,al
  5303                              <3>  .end:
  5304 00001173 88C8                <3>  mov byte %3, cl
  5305 00001175 5B                  <2> 	pop bx
  5306 00001176 5A                  <2> 	pop dx
  5307 00001177 59                  <2> 	pop cx								
  5308                              <2> 		
  5309 00001178 3C08                <2> 	cmp al,8					
  5310 0000117A 7204                <2> 	jb .shr
  5311 0000117C 7728                <2> 	ja .shl
  5312 0000117E EB4A                <2> 	jmp .endshrl
  5313                              <2> 	.shr:			
  5314 00001180 B408                <2> 		mov ah,0x08
  5315 00001182 28C4                <2> 		sub ah,al
  5316 00001184 00E7                <2> 		add bh,ah
  5317 00001186 53                  <2> 		push bx
  5318                              <2> 		__shr32 cx, dx, ah
  5319                              <3>  stkopen 5
  5320 00001187 83EC05              <4>  sub word sp, %1
  5321 0000118A 54                  <4>  push sp
  5322 0000118B 5D                  <4>  pop bp
  5323 0000118C 894E00              <3>  mov word [bp+0], %1
  5324 0000118F 895602              <3>  mov word [bp+2], %2
  5325 00001192 886604              <3>  mov byte [bp+4], %3
  5326 00001195 E865F6              <3>  call proc_shr32
  5327 00001198 54                  <3>  push sp
  5328 00001199 5D                  <3>  pop bp
  5329 0000119A 8B4E00              <3>  mov word %1, [bp+0]
  5330 0000119D 8B5602              <3>  mov word %2, [bp+2]
  5331                              <3>  stkclose 5
  5332 000011A0 83C405              <4>  add word sp, %1
  5333 000011A3 5B                  <2> 		pop bx
  5334 000011A4 EB24                <2> 		jmp .endshrl
  5335                              <2> 	.shl:		
  5336 000011A6 B408                <2> 		mov ah,0x08
  5337 000011A8 28E0                <2> 		sub al,ah
  5338 000011AA 28C7                <2> 		sub bh,al			
  5339 000011AC 53                  <2> 		push bx
  5340                              <2> 		__shl32 cx, dx, al
  5341                              <3>  stkopen 5
  5342 000011AD 83EC05              <4>  sub word sp, %1
  5343 000011B0 54                  <4>  push sp
  5344 000011B1 5D                  <4>  pop bp
  5345 000011B2 894E00              <3>  mov word [bp+0], %1
  5346 000011B5 895602              <3>  mov word [bp+2], %2
  5347 000011B8 884604              <3>  mov byte [bp+4], %3
  5348 000011BB E8F8F5              <3>  call proc_shl32
  5349 000011BE 54                  <3>  push sp
  5350 000011BF 5D                  <3>  pop bp
  5351 000011C0 8B4E00              <3>  mov word %1, [bp+0]
  5352 000011C3 8B5602              <3>  mov word %2, [bp+2]
  5353                              <3>  stkclose 5
  5354 000011C6 83C405              <4>  add word sp, %1
  5355 000011C9 5B                  <2> 		pop bx			
  5356                              <2> 	.endshrl:											
  5357                              <2> 								
  5358 000011CA 30DB                <2> 	xor bl,bl
  5359 000011CC D1EB                <2> 	shr bx,1	
  5360 000011CE 83E17F              <2> 	and cx,0x007F	
  5361                              <2> 		
  5362 000011D1 89E0                <2> 	mov ax,sp
  5363 000011D3 89C5                <2> 	mov bp,ax
  5364 000011D5 015E02              <2> 	add word [bp+2],bx
  5365 000011D8 014E02              <2> 	add word [bp+2],cx	
  5366 000011DB 895604              <2> 	mov word [bp+4],dx
  5367                              <2> 	
  5368 000011DE C3                  <2> 	ret
  5369                              <2> 
  5370                              <2> proc__iaddorsub32:
  5371 000011DF 89E0                <2> 	mov ax,sp
  5372 000011E1 89C5                <2> 	mov bp,ax
  5373                              <2> 	
  5374 000011E3 8B4602              <2> 	mov ax,[bp+2]
  5375 000011E6 8B5E04              <2> 	mov bx,[bp+4]
  5376 000011E9 8B4E06              <2> 	mov cx,[bp+6]
  5377 000011EC 8B5608              <2> 	mov dx,[bp+8]	
  5378                              <2> 	
  5379 000011EF 50                  <2> 	push ax	
  5380 000011F0 250080              <2> 	and ax, 0x8000
  5381 000011F3 83F800              <2> 	cmp ax,0
  5382 000011F6 741B                <2> 	jz .endv1neg
  5383 000011F8 58                  <2> 		pop ax
  5384 000011F9 51                  <2> 		push cx
  5385 000011FA 52                  <2> 		push dx
  5386                              <2> 		
  5387 000011FB B9FFFF              <2> 		mov cx,0xFFFF
  5388 000011FE BAFFFF              <2> 		mov dx,0xFFFF
  5389 00001201 25FF7F              <2> 		and ax,0x7FFF
  5390 00001204 29DA                <2> 		sub dx,bx
  5391 00001206 19C1                <2> 		sbb cx,ax
  5392 00001208 42                  <2> 		inc dx
  5393 00001209 83D100              <2> 		adc cx,0
  5394 0000120C 89C8                <2> 		mov ax,cx
  5395 0000120E 89D3                <2> 		mov bx,dx
  5396                              <2> 		
  5397 00001210 5A                  <2> 		pop dx
  5398 00001211 59                  <2> 		pop cx
  5399 00001212 50                  <2> 		push ax	
  5400                              <2> 	.endv1neg:		
  5401 00001213 58                  <2> 	pop ax	
  5402                              <2> 		
  5403 00001214 51                  <2> 	push cx
  5404 00001215 81E10080            <2> 	and cx,0x8000
  5405 00001219 83F900              <2> 	cmp cx,0
  5406 0000121C 741C                <2> 	jz .endv2neg
  5407 0000121E 59                  <2> 		pop cx
  5408 0000121F 50                  <2> 		push ax
  5409 00001220 53                  <2> 		push bx
  5410                              <2> 		
  5411 00001221 B8FFFF              <2> 		mov ax,0xFFFF
  5412 00001224 BBFFFF              <2> 		mov bx,0xFFFF
  5413 00001227 81E1FF7F            <2> 		and cx,0x7FFF
  5414 0000122B 29D3                <2> 		sub bx,dx
  5415 0000122D 19C8                <2> 		sbb ax,cx
  5416 0000122F 43                  <2> 		inc bx
  5417 00001230 83D000              <2> 		adc ax,0
  5418 00001233 89C1                <2> 		mov cx,ax
  5419 00001235 89DA                <2> 		mov dx,bx
  5420                              <2> 		
  5421 00001237 5B                  <2> 		pop bx
  5422 00001238 58                  <2> 		pop ax
  5423 00001239 51                  <2> 		push cx
  5424                              <2> 	.endv2neg:	
  5425 0000123A 59                  <2> 	pop cx
  5426                              <2> 					
  5427 0000123B 837E0E00            <2> 	cmp word [bp+0x0E],0
  5428 0000123F 7506                <2> 	jnz .sub
  5429 00001241 01D3                <2> 		add bx, dx
  5430 00001243 11C8                <2> 		adc ax, cx				
  5431 00001245 EB04                <2> 		jmp .endop
  5432                              <2> 	.sub:
  5433 00001247 29D3                <2> 		sub bx, dx
  5434 00001249 19C8                <2> 		sbb ax, cx
  5435                              <2> 	.endop:
  5436                              <2> 	
  5437 0000124B 89C1                <2> 	mov cx,ax
  5438 0000124D 81E10080            <2> 	and cx,0x8000
  5439 00001251 83F900              <2> 	cmp cx,0
  5440 00001254 7415                <2> 	jz .endresneg
  5441 00001256 B9FFFF              <2> 		mov cx,0xFFFF
  5442 00001259 BAFFFF              <2> 		mov dx,0xFFFF
  5443 0000125C 29DA                <2> 		sub dx,bx
  5444 0000125E 19C1                <2> 		sbb cx,ax
  5445 00001260 42                  <2> 		inc dx
  5446 00001261 83D100              <2> 		adc cx,0
  5447 00001264 89C8                <2> 		mov ax,cx
  5448 00001266 89D3                <2> 		mov bx,dx
  5449                              <2> 		
  5450 00001268 050080              <2> 		add ax,0x8000
  5451                              <2> 	.endresneg:
  5452                              <2> 	
  5453 0000126B 89E1                <2> 	mov cx,sp
  5454 0000126D 89CD                <2> 	mov bp,cx
  5455 0000126F 89460A              <2> 	mov [bp+0x0A], ax
  5456 00001272 895E0C              <2> 	mov [bp+0x0C], bx
  5457                              <2> 	
  5458 00001275 C3                  <2> 	ret	
  5459                              <2> 	
  5460                              <2> proc__mul32_64:
  5461 00001276 89E0                <2> 	mov ax,sp
  5462 00001278 89C5                <2> 	mov bp,ax
  5463                              <2> 		
  5464 0000127A 31D2                <2> 	xor dx,dx
  5465 0000127C 8B4604              <2> 	mov ax,[bp+4]
  5466 0000127F F76608              <2> 	mul word [bp+8]
  5467                              <2> 	
  5468 00001282 C7460A0000          <2> 	mov word [bp+0x0A], 0
  5469 00001287 C7460C0000          <2> 	mov word [bp+0x0C], 0
  5470 0000128C 89560E              <2> 	mov word [bp+0x0E], dx
  5471 0000128F 894610              <2> 	mov word [bp+0x10], ax
  5472                              <2> 		
  5473 00001292 31D2                <2> 	xor dx,dx
  5474 00001294 8B4604              <2> 	mov ax,[bp+4]
  5475 00001297 F76606              <2> 	mul word [bp+6]
  5476                              <2> 	
  5477 0000129A 01460E              <2> 	add [bp+0x0E],ax
  5478 0000129D 11560C              <2> 	adc [bp+0x0C],dx
  5479 000012A0 83560A00            <2> 	adc word [bp+0x0A],0
  5480                              <2> 	
  5481 000012A4 31D2                <2> 	xor dx,dx
  5482 000012A6 8B4602              <2> 	mov ax,[bp+2]
  5483 000012A9 F76608              <2> 	mul word [bp+8]
  5484                              <2> 	
  5485 000012AC 01460E              <2> 	add [bp+0x0E],ax
  5486 000012AF 11560C              <2> 	adc [bp+0x0C],dx
  5487                              <2> 	
  5488 000012B2 31D2                <2> 	xor dx,dx
  5489 000012B4 8B4602              <2> 	mov ax,[bp+2]
  5490 000012B7 F76606              <2> 	mul word [bp+6]
  5491                              <2> 	
  5492 000012BA 01460C              <2> 	add [bp+0x0C],ax
  5493 000012BD 11560A              <2> 	adc [bp+0x0A],dx
  5494                              <2> 	
  5495 000012C0 C3                  <2> 	ret
  5496                              <2> 	
  5497                              <2> proc__fldiv32:
  5498 000012C1 89E0                <2> 	mov ax,sp
  5499 000012C3 89C5                <2> 	mov bp,ax
  5500                              <2> 	
  5501 000012C5 8B4602              <2> 	mov ax,[bp+2]
  5502 000012C8 8B5E04              <2> 	mov bx,[bp+4]
  5503 000012CB C7460A0000          <2> 	mov word [bp+0x0A],0
  5504 000012D0 C7460C0000          <2> 	mov word [bp+0x0C],0
  5505                              <2> 	
  5506 000012D5 B118                <2> 	mov cl,24
  5507                              <2> 	.l1:
  5508 000012D7 80F900              <2> 		cmp cl,0
  5509 000012DA 0F84AC00            <2> 		jz .l2
  5510 000012DE 51                  <2> 		push cx
  5511                              <2> 		
  5512 000012DF 8B4E0A              <2> 		mov cx,[bp+0x0A]
  5513 000012E2 8B560C              <2> 		mov dx,[bp+0x0C]
  5514 000012E5 55                  <2> 		push bp
  5515 000012E6 50                  <2> 		push ax
  5516 000012E7 53                  <2> 		push bx
  5517                              <2> 		__shl32 cx, dx, 1
  5518                              <3>  stkopen 5
  5519 000012E8 83EC05              <4>  sub word sp, %1
  5520 000012EB 54                  <4>  push sp
  5521 000012EC 5D                  <4>  pop bp
  5522 000012ED 894E00              <3>  mov word [bp+0], %1
  5523 000012F0 895602              <3>  mov word [bp+2], %2
  5524 000012F3 C6460401            <3>  mov byte [bp+4], %3
  5525 000012F7 E8BCF4              <3>  call proc_shl32
  5526 000012FA 54                  <3>  push sp
  5527 000012FB 5D                  <3>  pop bp
  5528 000012FC 8B4E00              <3>  mov word %1, [bp+0]
  5529 000012FF 8B5602              <3>  mov word %2, [bp+2]
  5530                              <3>  stkclose 5
  5531 00001302 83C405              <4>  add word sp, %1
  5532 00001305 5B                  <2> 		pop bx
  5533 00001306 58                  <2> 		pop ax
  5534 00001307 5D                  <2> 		pop bp
  5535 00001308 894E0A              <2> 		mov [bp+0x0A],cx
  5536 0000130B 89560C              <2> 		mov [bp+0x0C],dx
  5537                              <2> 				
  5538 0000130E 8B4E06              <2> 		mov cx,[bp+6]
  5539 00001311 8B5608              <2> 		mov dx,[bp+8]
  5540 00001314 50                  <2> 		push ax
  5541 00001315 53                  <2> 		push bx
  5542 00001316 55                  <2> 		push bp
  5543                              <2> 		__cmp32 ax, bx, cx, dx, dl
  5544                              <3>  stkopen 9
  5545 00001317 83EC09              <4>  sub word sp, %1
  5546 0000131A 54                  <4>  push sp
  5547 0000131B 5D                  <4>  pop bp
  5548 0000131C 894600              <3>  mov word [bp+0], %1
  5549 0000131F 895E02              <3>  mov word [bp+2], %2
  5550 00001322 894E04              <3>  mov word [bp+4], %3
  5551 00001325 895606              <3>  mov word [bp+6], %4
  5552 00001328 E860F4              <3>  call proc_cmp32
  5553 0000132B 54                  <3>  push sp
  5554 0000132C 5D                  <3>  pop bp
  5555 0000132D 8A5608              <3>  mov byte %5, [bp+8]
  5556                              <3>  stkclose 9
  5557 00001330 83C409              <4>  add word sp, %1
  5558 00001333 5D                  <2> 		pop bp
  5559 00001334 5B                  <2> 		pop bx
  5560 00001335 58                  <2> 		pop ax				
  5561                              <2> 		
  5562 00001336 80FA00              <2> 		cmp dl,0
  5563 00001339 7C2A                <2> 		jl .endsub
  5564 0000133B 8B4E06              <2> 			mov cx,[bp+6]
  5565 0000133E 8B5608              <2> 			mov dx,[bp+8]
  5566 00001341 55                  <2> 			push bp									
  5567                              <2> 			__sub32 ax, bx, cx, dx, ax, bx						
  5568                              <3>  stkopen 0x0C
  5569 00001342 83EC0C              <4>  sub word sp, %1
  5570 00001345 54                  <4>  push sp
  5571 00001346 5D                  <4>  pop bp
  5572 00001347 894600              <3>  mov word [bp+0], %1
  5573 0000134A 895E02              <3>  mov word [bp+2], %2
  5574 0000134D 894E04              <3>  mov word [bp+4], %3
  5575 00001350 895606              <3>  mov word [bp+6], %4
  5576 00001353 E81AF4              <3>  call proc_sub32
  5577 00001356 54                  <3>  push sp
  5578 00001357 5D                  <3>  pop bp
  5579 00001358 8B4608              <3>  mov word %5, [bp+8]
  5580 0000135B 8B5E0A              <3>  mov word %6, [bp+0x0A]
  5581                              <3>  stkclose 0x0C
  5582 0000135E 83C40C              <4>  add word sp, %1
  5583 00001361 5D                  <2> 			pop bp			
  5584 00001362 FF460C              <2> 			inc word [bp+0x0C]			
  5585                              <2> 		.endsub:
  5586                              <2> 				
  5587 00001365 55                  <2> 		push bp
  5588                              <2> 		__shl32 ax, bx, 1
  5589                              <3>  stkopen 5
  5590 00001366 83EC05              <4>  sub word sp, %1
  5591 00001369 54                  <4>  push sp
  5592 0000136A 5D                  <4>  pop bp
  5593 0000136B 894600              <3>  mov word [bp+0], %1
  5594 0000136E 895E02              <3>  mov word [bp+2], %2
  5595 00001371 C6460401            <3>  mov byte [bp+4], %3
  5596 00001375 E83EF4              <3>  call proc_shl32
  5597 00001378 54                  <3>  push sp
  5598 00001379 5D                  <3>  pop bp
  5599 0000137A 8B4600              <3>  mov word %1, [bp+0]
  5600 0000137D 8B5E02              <3>  mov word %2, [bp+2]
  5601                              <3>  stkclose 5
  5602 00001380 83C405              <4>  add word sp, %1
  5603 00001383 5D                  <2> 		pop bp
  5604                              <2> 		
  5605 00001384 59                  <2> 		pop cx
  5606 00001385 FEC9                <2> 		dec cl
  5607 00001387 E94DFF              <2> 		jmp .l1
  5608                              <2> 	.l2:
  5609                              <2> 	
  5610 0000138A C3                  <2> 	ret
  5611                              <2> 
  5612                              <2> 
  5613                              <2> proc_flinvsig:
  5614 0000138B 89E0                <2> 	mov ax,sp
  5615 0000138D 89C5                <2> 	mov bp,ax
  5616                              <2> 	
  5617 0000138F 8B4602              <2> 	mov ax,[bp+2]	
  5618 00001392 89C1                <2> 	mov cx,ax	
  5619 00001394 83C900              <2> 	or cx, 0x0000
  5620 00001397 F7D1                <2> 	not cx
  5621 00001399 81E10080            <2> 	and cx,0x8000								
  5622 0000139D 25FF7F              <2> 	and ax,0x7FFF			
  5623 000013A0 01C8                <2> 	add ax,cx	
  5624 000013A2 894602              <2> 	mov word [bp+2],ax
  5625                              <2> 	
  5626 000013A5 C3                  <2> 	ret
  5627                              <2> 
  5628                              <2> proc_flsetsig:
  5629 000013A6 89E0                <2> 	mov ax,sp
  5630 000013A8 89C5                <2> 	mov bp,ax
  5631                              <2> 
  5632 000013AA 8B4602              <2> 	mov ax,[bp+2]
  5633 000013AD 25FF7F              <2> 	and ax,0x7FFF
  5634 000013B0 034604              <2> 	add ax,[bp+4]
  5635 000013B3 894602              <2> 	mov [bp+2],ax
  5636                              <2> 				
  5637 000013B6 C3                  <2> 	ret
  5638                              <2> 
  5639                              <2> proc__validate:
  5640 000013B7 89E0                <2> 	mov ax,sp
  5641 000013B9 89C5                <2> 	mov bp,ax
  5642                              <2> 	
  5643 000013BB 8B4602              <2> 	mov ax,[bp+2]
  5644 000013BE 25FF7F              <2> 	and ax,0x7FFF
  5645 000013C1 3DFF7F              <2> 	cmp ax,0x7FFF
  5646 000013C4 750A                <2> 	jne .isnumber1
  5647                              <2> 
  5648 000013C6 8B4604              <2> 	mov ax,[bp+4]
  5649 000013C9 83F8FF              <2> 	cmp ax,0xFFFF
  5650 000013CC 7502                <2> 	jnz .isnumber1
  5651                              <2> 	
  5652 000013CE EB37                <2> 	jmp .NaN
  5653                              <2> 	
  5654                              <2> 	.isnumber1:
  5655                              <2> 	
  5656 000013D0 8B4606              <2> 	mov ax,[bp+6]
  5657 000013D3 25FF7F              <2> 	and ax,0x7FFF
  5658 000013D6 3DFF7F              <2> 	cmp ax,0x7FFF
  5659 000013D9 750A                <2> 	jne .isnumber2
  5660                              <2> 
  5661 000013DB 8B4608              <2> 	mov ax,[bp+8]
  5662 000013DE 83F8FF              <2> 	cmp ax,0xFFFF
  5663 000013E1 7502                <2> 	jnz .isnumber2
  5664                              <2> 	
  5665 000013E3 EB22                <2> 	jmp .NaN
  5666                              <2> 	
  5667                              <2> 	.isnumber2:
  5668                              <2> 	
  5669 000013E5 8B4602              <2> 	mov ax,[bp+2]
  5670 000013E8 D1E0                <2> 	shl ax,1
  5671 000013EA 80FCFF              <2> 	cmp ah,0xFF
  5672 000013ED 740C                <2> 	je .infinity
  5673                              <2> 
  5674 000013EF 8B5E06              <2> 	mov bx,[bp+6]
  5675 000013F2 D1E3                <2> 	shl bx,1
  5676 000013F4 80FFFF              <2> 	cmp bh,0xFF
  5677 000013F7 7402                <2> 	je .infinity			
  5678                              <2> 	
  5679 000013F9 EB18                <2> 	jmp .ok	
  5680                              <2> 	
  5681                              <2> 	.infinity:		
  5682 000013FB C7460A807F          <2> 		mov word [bp+0x0A],0x7F80
  5683 00001400 C7460C0000          <2> 		mov word [bp+0x0C],0
  5684 00001405 EB12                <2> 		jmp .done
  5685                              <2> 	.NaN:
  5686 00001407 C7460AFF7F          <2> 		mov word [bp+0x0A],0x7FFF
  5687 0000140C C7460CFFFF          <2> 		mov word [bp+0x0C],0xFFFF
  5688 00001411 EB06                <2> 		jmp .done
  5689                              <2> 			
  5690                              <2> 	.ok:
  5691 00001413 C6460E01            <2> 		mov byte [bp+0x0E],1
  5692 00001417 EB04                <2> 		jmp .end
  5693                              <2> 	.done:
  5694 00001419 C6460E00            <2> 		mov byte [bp+0x0E],0		
  5695                              <2> 	.end:
  5696                              <2> 	
  5697 0000141D C3                  <2> 	ret
  5698                              <2> 
  5699                              <2> proc__div_validate:
  5700 0000141E 89E0                <2> 	mov ax,sp
  5701 00001420 89C5                <2> 	mov bp,ax
  5702                              <2> 	
  5703 00001422 8B4602              <2> 	mov ax,[bp+2]
  5704 00001425 8B5E06              <2> 	mov bx,[bp+6]
  5705 00001428 D1E0                <2> 	shl ax,1
  5706 0000142A D1E3                <2> 	shl bx,1
  5707 0000142C 08FC                <2> 	or ah,bh
  5708 0000142E 80FC00              <2> 	cmp ah,0
  5709 00001431 7422                <2> 	jz .NaN
  5710                              <2> 	
  5711 00001433 8B4602              <2> 	mov ax,[bp+2]
  5712 00001436 D1E0                <2> 	shl ax,1
  5713 00001438 80FC00              <2> 	cmp ah,0
  5714 0000143B 7424                <2> 	jz .zero
  5715 0000143D 8B5E06              <2> 	mov bx,[bp+6]
  5716 00001440 D1E3                <2> 	shl bx,1
  5717 00001442 80FF00              <2> 	cmp bh,0	
  5718 00001445 7402                <2> 	jz .infinity		
  5719                              <2> 		
  5720 00001447 EB24                <2> 	jmp .ok
  5721                              <2> 	
  5722                              <2> 	.infinity:		
  5723 00001449 C7460A807F          <2> 		mov word [bp+0x0A],0x7F80
  5724 0000144E C7460C0000          <2> 		mov word [bp+0x0C],0
  5725 00001453 EB1E                <2> 		jmp .done
  5726                              <2> 	.NaN:
  5727 00001455 C7460AFF7F          <2> 		mov word [bp+0x0A],0x7FFF
  5728 0000145A C7460CFFFF          <2> 		mov word [bp+0x0C],0xFFFF
  5729 0000145F EB12                <2> 		jmp .done
  5730                              <2> 	.zero:
  5731 00001461 C7460A0000          <2> 		mov word [bp+0x0A],0
  5732 00001466 C7460C0000          <2> 		mov word [bp+0x0C],0
  5733 0000146B EB06                <2> 		jmp .done	
  5734                              <2> 			
  5735                              <2> 	.ok:
  5736 0000146D C6460E01            <2> 		mov byte [bp+0x0E],1
  5737 00001471 EB04                <2> 		jmp .end
  5738                              <2> 	.done:	
  5739 00001473 C6460E00            <2> 		mov byte [bp+0x0E],0
  5740                              <2> 	.end:	
  5741                              <2> 		
  5742 00001477 C3                  <2> 	ret
  5743                              <2> 	
  5744                              <2> proc__mul_validate:
  5745 00001478 89E0                <2> 	mov ax,sp
  5746 0000147A 89C5                <2> 	mov bp,ax
  5747                              <2> 	
  5748 0000147C 8B4602              <2> 	mov ax,[bp+2]
  5749 0000147F D1E0                <2> 	shl ax,1	
  5750 00001481 80FC00              <2> 	cmp ah,0	
  5751 00001484 740C                <2> 	jz .zero		
  5752                              <2> 
  5753 00001486 8B5E04              <2> 	mov bx,[bp+4]
  5754 00001489 D1E3                <2> 	shl bx,1
  5755 0000148B 80FF00              <2> 	cmp bh,0
  5756 0000148E 7402                <2> 	jz .zero
  5757                              <2> 			
  5758 00001490 EB0C                <2> 	jmp .ok
  5759                              <2> 	
  5760                              <2> 	.zero:		
  5761 00001492 C746060000          <2> 		mov word [bp+6],0
  5762 00001497 C746080000          <2> 		mov word [bp+8],0
  5763 0000149C EB06                <2> 		jmp .done
  5764                              <2> 			
  5765                              <2> 	.ok:
  5766 0000149E C6460A01            <2> 		mov byte [bp+0x0A],1
  5767 000014A2 EB04                <2> 		jmp .end
  5768                              <2> 	.done:	
  5769 000014A4 C6460A00            <2> 		mov byte [bp+0x0A],0
  5770                              <2> 	.end:	
  5771                              <2> 		
  5772 000014A8 C3                  <2> 	ret
  5773                              <2> 	
  5774                              <2> proc__addorsub_validate:
  5775 000014A9 89E0                <2> 	mov ax,sp
  5776 000014AB 89C5                <2> 	mov bp,ax
  5777                              <2> 	
  5778 000014AD 8B4602              <2> 	mov ax,[bp+2]
  5779 000014B0 8B5E06              <2> 	mov bx,[bp+6]	
  5780 000014B3 D1E0                <2> 	shl ax,1
  5781 000014B5 D1E3                <2> 	shl bx,1
  5782 000014B7 08FC                <2> 	or ah,bh
  5783 000014B9 80FC00              <2> 	cmp ah,0
  5784 000014BC 7416                <2> 	jz .zero
  5785                              <2> 	
  5786 000014BE 8B4602              <2> 	mov ax,[bp+2]
  5787 000014C1 D1E0                <2> 	shl ax,1
  5788 000014C3 80FC00              <2> 	cmp ah,0		
  5789 000014C6 7426                <2> 	jz .value2
  5790                              <2> 	
  5791 000014C8 8B4606              <2> 	mov ax,[bp+6]
  5792 000014CB D1E0                <2> 	shl ax,1
  5793 000014CD 80FC00              <2> 	cmp ah,0
  5794 000014D0 740E                <2> 	jz .value1	
  5795                              <2> 		
  5796 000014D2 EB28                <2> 	jmp .ok
  5797                              <2> 	
  5798                              <2> 	.zero:		
  5799 000014D4 C7460A0000          <2> 		mov word [bp+0x0A],0
  5800 000014D9 C7460C0000          <2> 		mov word [bp+0x0C],0
  5801 000014DE EB22                <2> 		jmp .done
  5802                              <2> 	.value1:
  5803 000014E0 8B4602              <2> 		mov ax,[bp+2]
  5804 000014E3 8B5E04              <2> 		mov bx,[bp+4]
  5805 000014E6 89460A              <2> 		mov word [bp+0x0A],ax
  5806 000014E9 895E0C              <2> 		mov word [bp+0x0C],bx		
  5807 000014EC EB14                <2> 		jmp .done
  5808                              <2> 	.value2:		
  5809 000014EE 8B4606              <2> 		mov ax,[bp+6]
  5810 000014F1 8B5E08              <2> 		mov bx,[bp+8]
  5811 000014F4 89460A              <2> 		mov word [bp+0x0A],ax
  5812 000014F7 895E0C              <2> 		mov word [bp+0x0C],bx
  5813 000014FA EB06                <2> 		jmp .done
  5814                              <2> 			
  5815                              <2> 	.ok:
  5816 000014FC C6460E01            <2> 		mov byte [bp+0x0E],1
  5817 00001500 EB04                <2> 		jmp .end
  5818                              <2> 	.done:	
  5819 00001502 C6460E00            <2> 		mov byte [bp+0x0E],0
  5820                              <2> 	.end:	
  5821                              <2> 		
  5822 00001506 C3                  <2> 	ret
  5823                              <2> 	
  5824                              <2> 
  5825                              <2> proc__cmp_validate:
  5826 00001507 89E0                <2> 	mov ax,sp
  5827 00001509 89C5                <2> 	mov bp,ax
  5828                              <2> 	
  5829 0000150B 8B4602              <2> 	mov ax,[bp+2]
  5830 0000150E 8B5E04              <2> 	mov bx,[bp+4]
  5831 00001511 D1E0                <2> 	shl ax,1
  5832 00001513 D1E3                <2> 	shl bx,1
  5833                              <2> 	
  5834 00001515 88E5                <2> 	mov ch,ah
  5835 00001517 30FD                <2> 	xor ch,bh
  5836 00001519 80FD00              <2> 	cmp ch,0
  5837 0000151C 743A                <2> 	jz .ok
  5838                              <2> 		
  5839 0000151E 80FC00              <2> 	cmp ah,0
  5840 00001521 7407                <2> 	jz .zerov1
  5841                              <2> 	
  5842 00001523 80FF00              <2> 	cmp bh,0
  5843 00001526 7419                <2> 	jz .zerov2	
  5844                              <2> 			
  5845 00001528 EB2E                <2> 	jmp .ok
  5846                              <2> 	
  5847                              <2> 	.zerov1:
  5848 0000152A 8B4604              <2> 		mov ax,[bp+4]
  5849 0000152D 250080              <2> 		and ax,0x8000
  5850 00001530 83F800              <2> 		cmp ax,0
  5851 00001533 7506                <2> 		jnz .neg1
  5852 00001535 C64606FF            <2> 			mov byte [bp+6],-1
  5853 00001539 EB04                <2> 			jmp .endcmp1
  5854                              <2> 		.neg1:
  5855 0000153B C6460601            <2> 			mov byte [bp+6], 1
  5856                              <2> 		.endcmp1:
  5857 0000153F EB1D                <2> 		jmp .done
  5858                              <2> 	.zerov2:		
  5859 00001541 8B4602              <2> 		mov ax,[bp+2]
  5860 00001544 250080              <2> 		and ax,0x8000
  5861 00001547 83F800              <2> 		cmp ax,0
  5862 0000154A 7506                <2> 		jnz .neg2
  5863 0000154C C6460601            <2> 			mov byte [bp+6], 1
  5864 00001550 EB04                <2> 			jmp .endcmp2
  5865                              <2> 		.neg2:
  5866 00001552 C64606FF            <2> 			mov byte [bp+6],-1
  5867                              <2> 		.endcmp2:
  5868 00001556 EB06                <2> 		jmp .done	
  5869                              <2> 			
  5870                              <2> 	.ok:
  5871 00001558 C6460701            <2> 		mov byte [bp+7],1
  5872 0000155C EB04                <2> 		jmp .end
  5873                              <2> 	.done:	
  5874 0000155E C6460700            <2> 		mov byte [bp+7],0
  5875                              <2> 	.end:	
  5876                              <2> 		
  5877 00001562 C3                  <2> 	ret
  5878                              <2> 	
  5879                              <2> %endif
  5880                              <1> 
  5881                              <1> %macro flinvsig 1
  5882                              <1> 	flinvsig cs, %1
  5883                              <1> %endmacro
  5884                              <1> 
  5885                              <1> %macro flsetsig 1
  5886                              <1> 	flsetsig cs, %1
  5887                              <1> %endmacro
  5888                              <1> 
  5889                              <1> %macro flclrsig 1
  5890                              <1> 	flclrsig cs, %1
  5891                              <1> %endmacro
  5892                              <1> 
  5893                              <1> %macro int16tofl 2
  5894                              <1> 	int16tofl cs, %1, cs, %2
  5895                              <1> %endmacro
  5896                              <1> 
  5897                              <1> %macro fltoint16 2
  5898                              <1> 	fltoint16 cs, %1, cs, %2
  5899                              <1> %endmacro
  5900                              <1> 
  5901                              <1> %macro fltoint32 1
  5902                              <1> 	fltoint32 %1, %1
  5903                              <1> %endmacro
  5904                              <1> 
  5905                              <1> %macro fltoint32 2
  5906                              <1> 	fltoint32 cs, %1, cs, %2
  5907                              <1> %endmacro
  5908                              <1> 
  5909                              <1> %macro int32tofl 1
  5910                              <1> 	int32tofl %1, %1
  5911                              <1> %endmacro
  5912                              <1> 
  5913                              <1> %macro int32tofl 2
  5914                              <1> 	int32tofl cs, %1, cs, %2
  5915                              <1> %endmacro
  5916                              <1> 
  5917                              <1> %macro flcmp 3
  5918                              <1> 	flcmp cs, %1, cs, %2, %3
  5919                              <1> %endmacro
  5920                              <1> 
  5921                              <1> %macro flshl 1
  5922                              <1> 	flshl cs, %1
  5923                              <1> %endmacro
  5924                              <1> 
  5925                              <1> %macro flshr 1
  5926                              <1> 	flshr cs, %1
  5927                              <1> %endmacro
  5928                              <1> 
  5929                              <1> %macro fladd 3
  5930                              <1> 	fladd cs, %1, cs, %2, cs, %3
  5931                              <1> %endmacro
  5932                              <1> 
  5933                              <1> %macro flsub 3
  5934                              <1> 	flsub cs, %1, cs, %2, cs, %3
  5935                              <1> %endmacro	
  5936                              <1> 
  5937                              <1> %macro flmul 3
  5938                              <1> 	flmul cs, %1, cs, %2, cs, %3
  5939                              <1> %endmacro
  5940                              <1> 
  5941                              <1> %macro fldiv 3
  5942                              <1> 	fldiv cs, %1, cs, %2, cs, %3
  5943                              <1> %endmacro	
  5944                              <1> 
  5945                              <1> %macro fladd 6
  5946                              <1> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  5947                              <1> %endmacro
  5948                              <1> 
  5949                              <1> %macro flsub 6
  5950                              <1> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  5951                              <1> %endmacro
  5952                              <1> 
  5953                              <1> %macro fltoint16 4
  5954                              <1> 	stkopen 0x06
  5955                              <1> 	mov ax,%1
  5956                              <1> 	mov ds,ax
  5957                              <1> 	mov ax,[%2+2]
  5958                              <1> 	mov [bp+0],ax
  5959                              <1> 	mov ax,[%2]
  5960                              <1> 	mov [bp+2],ax	
  5961                              <1> 	call proc_fltoint16
  5962                              <1> 	mov ax,sp
  5963                              <1> 	mov bp,ax
  5964                              <1> 	mov ax,%3
  5965                              <1> 	mov ds,ax
  5966                              <1> 	mov ax,[bp+4]
  5967                              <1> 	mov [%4],ax
  5968                              <1> 	stkclose 0x06
  5969                              <1> %endmacro
  5970                              <1> 
  5971                              <1> %macro int16tofl 4	
  5972                              <1> 	stkopen 0x06
  5973                              <1> 	mov ax,%1
  5974                              <1> 	mov ds,ax
  5975                              <1> 	mov ax,[%2]
  5976                              <1> 	mov [bp+0],ax	
  5977                              <1> 	call proc_int16tofl
  5978                              <1> 	mov ax,sp
  5979                              <1> 	mov bp,ax
  5980                              <1> 	mov ax,%3
  5981                              <1> 	mov ds,ax
  5982                              <1> 	mov ax,[bp+2]
  5983                              <1> 	mov [%4+2],ax
  5984                              <1> 	mov ax,[bp+4]
  5985                              <1> 	mov [%4],ax
  5986                              <1> 	stkclose 0x06
  5987                              <1> %endmacro
  5988                              <1> 
  5989                              <1> %macro fltoint32 4
  5990                              <1> 	stkopen 0x08
  5991                              <1> 	mov ax,%1
  5992                              <1> 	mov ds,ax
  5993                              <1> 	mov ax,[%2+2]
  5994                              <1> 	mov [bp+0],ax
  5995                              <1> 	mov ax,[%2]
  5996                              <1> 	mov [bp+2],ax	
  5997                              <1> 	call proc_fltoint32
  5998                              <1> 	mov ax,sp
  5999                              <1> 	mov bp,ax
  6000                              <1> 	mov ax,%3
  6001                              <1> 	mov ds,ax
  6002                              <1> 	mov ax,[bp+4]
  6003                              <1> 	mov [%4+2],ax
  6004                              <1> 	mov ax,[bp+6]
  6005                              <1> 	mov [%4],ax
  6006                              <1> 	stkclose 0x08
  6007                              <1> %endmacro
  6008                              <1> 
  6009                              <1> %macro int32tofl 4
  6010                              <1> 	stkopen 0x08
  6011                              <1> 	mov ax,%1
  6012                              <1> 	mov ds,ax
  6013                              <1> 	mov ax,[%2+2]
  6014                              <1> 	mov [bp+0],ax
  6015                              <1> 	mov ax,[%2]
  6016                              <1> 	mov [bp+2],ax	
  6017                              <1> 	call proc_int32tofl
  6018                              <1> 	mov ax,sp
  6019                              <1> 	mov bp,ax
  6020                              <1> 	mov ax,%3
  6021                              <1> 	mov ds,ax
  6022                              <1> 	mov ax,[bp+4]
  6023                              <1> 	mov [%4+2],ax
  6024                              <1> 	mov ax,[bp+6]
  6025                              <1> 	mov [%4],ax
  6026                              <1> 	stkclose 0x08
  6027                              <1> %endmacro
  6028                              <1> 
  6029                              <1> %macro flinvsig 2
  6030                              <1> 	stkopen 0x02
  6031                              <1> 	mov ax,%1
  6032                              <1> 	mov ds,ax
  6033                              <1> 	mov ax,[%2+2]
  6034                              <1> 	mov word [bp+0], ax
  6035                              <1> 	call proc_flinvsig
  6036                              <1> 	push sp
  6037                              <1> 	pop bp
  6038                              <1> 	mov ax,[bp+0]
  6039                              <1> 	mov word [%2+2],ax
  6040                              <1> 	stkclose 0x02
  6041                              <1> %endmacro
  6042                              <1> 
  6043                              <1> %macro flsetsig 2
  6044                              <1> 	stkopen 0x04
  6045                              <1> 	mov ax,%1
  6046                              <1> 	mov ds,ax
  6047                              <1> 	mov ax,[%2+2]
  6048                              <1> 	mov word [bp+0], ax
  6049                              <1> 	mov word [bp+2], 0x8000
  6050                              <1> 	call proc_flsetsig
  6051                              <1> 	push sp
  6052                              <1> 	pop bp
  6053                              <1> 	mov ax,[bp+0]
  6054                              <1> 	mov word [%2+2],ax
  6055                              <1> 	stkclose 0x04	
  6056                              <1> %endmacro
  6057                              <1> 
  6058                              <1> %macro flclrsig 2
  6059                              <1> 	stkopen 0x04
  6060                              <1> 	mov ax,%1
  6061                              <1> 	mov ds,ax
  6062                              <1> 	mov ax,[%2+2]
  6063                              <1> 	mov word [bp+0], ax
  6064                              <1> 	mov word [bp+2], 0x0000
  6065                              <1> 	call proc_flsetsig
  6066                              <1> 	push sp
  6067                              <1> 	pop bp
  6068                              <1> 	mov ax,[bp+0]
  6069                              <1> 	mov word [%2+2],ax
  6070                              <1> 	stkclose 0x04	
  6071                              <1> %endmacro
  6072                              <1> 
  6073                              <1> %macro flcmp 5	
  6074                              <1> 	stkopen 0x09
  6075                              <1> 	mov ax,%1
  6076                              <1> 	mov ds,ax
  6077                              <1> 	mov ax,[%2+2]
  6078                              <1> 	mov [bp+0],ax
  6079                              <1> 	mov ax,[%2]
  6080                              <1> 	mov [bp+2],ax
  6081                              <1> 	mov ax,%3
  6082                              <1> 	mov ds,ax
  6083                              <1> 	mov ax,[%4+2]
  6084                              <1> 	mov [bp+4],ax
  6085                              <1> 	mov ax,[%4]
  6086                              <1> 	mov [bp+6],ax
  6087                              <1> 	call proc_flcmp
  6088                              <1> 	mov ax,sp
  6089                              <1> 	mov bp,ax
  6090                              <1> 	mov byte %5,[bp+8]
  6091                              <1> 	stkclose 0x09
  6092                              <1> %endmacro
  6093                              <1> 
  6094                              <1> %macro flshl 2	
  6095                              <1> 	stkopen 0x02
  6096                              <1> 	mov ax,%1
  6097                              <1> 	mov ds,ax
  6098                              <1> 	mov ax,[%2+2]
  6099                              <1> 	mov [bp+0],ax
  6100                              <1> 	call proc_flshl
  6101                              <1> 	mov ax,sp
  6102                              <1> 	mov bp,ax
  6103                              <1> 	mov ax,%1
  6104                              <1> 	mov ds,ax
  6105                              <1> 	mov ax,[bp+0]
  6106                              <1> 	mov [%2+2],ax
  6107                              <1> 	stkclose 0x02
  6108                              <1> %endmacro
  6109                              <1> 
  6110                              <1> %macro flshr 2	
  6111                              <1> 	stkopen 0x02
  6112                              <1> 	mov ax,%1
  6113                              <1> 	mov ds,ax
  6114                              <1> 	mov ax,[%2+2]
  6115                              <1> 	mov [bp+0],ax
  6116                              <1> 	call proc_flshr
  6117                              <1> 	mov ax,sp
  6118                              <1> 	mov bp,ax
  6119                              <1> 	mov ax,%1
  6120                              <1> 	mov ds,ax
  6121                              <1> 	mov ax,[bp+0]
  6122                              <1> 	mov [%2+2],ax
  6123                              <1> 	stkclose 0x02
  6124                              <1> %endmacro
  6125                              <1> 
  6126                              <1> %macro fldiv 6	
  6127                              <1> 	stkopen 0x0C
  6128                              <1> 	mov ax,%1
  6129                              <1> 	mov ds,ax
  6130                              <1> 	mov ax,[%2+2]
  6131                              <1> 	mov [bp+0],ax
  6132                              <1> 	mov ax,[%2]
  6133                              <1> 	mov [bp+2],ax
  6134                              <1> 	mov ax,%3
  6135                              <1> 	mov ds,ax
  6136                              <1> 	mov ax,[%4+2]
  6137                              <1> 	mov [bp+4],ax
  6138                              <1> 	mov ax,[%4]
  6139                              <1> 	mov [bp+6],ax
  6140                              <1> 	call proc_fldiv
  6141                              <1> 	mov ax,sp
  6142                              <1> 	mov bp,ax
  6143                              <1> 	mov ax,%5
  6144                              <1> 	mov ds,ax
  6145                              <1> 	mov ax,[bp+8]
  6146                              <1> 	mov [%6+2],ax
  6147                              <1> 	mov ax,[bp+0x0A]
  6148                              <1> 	mov [%6],ax
  6149                              <1> 	stkclose 0x0C
  6150                              <1> %endmacro
  6151                              <1> 
  6152                              <1> %macro flmul 6	
  6153                              <1> 	stkopen 0x0C
  6154                              <1> 	mov ax,%1
  6155                              <1> 	mov ds,ax
  6156                              <1> 	mov ax,[%2+2]
  6157                              <1> 	mov [bp+0],ax
  6158                              <1> 	mov ax,[%2]
  6159                              <1> 	mov [bp+2],ax
  6160                              <1> 	mov ax,%3
  6161                              <1> 	mov ds,ax
  6162                              <1> 	mov ax,[%4+2]
  6163                              <1> 	mov [bp+4],ax
  6164                              <1> 	mov ax,[%4]
  6165                              <1> 	mov [bp+6],ax
  6166                              <1> 	call proc_flmul
  6167                              <1> 	mov ax,sp
  6168                              <1> 	mov bp,ax
  6169                              <1> 	mov ax,%5
  6170                              <1> 	mov ds,ax
  6171                              <1> 	mov ax,[bp+8]
  6172                              <1> 	mov [%6+2],ax
  6173                              <1> 	mov ax,[bp+0x0A]
  6174                              <1> 	mov [%6],ax
  6175                              <1> 	stkclose 0x0C
  6176                              <1> %endmacro
  6177                              <1> 	
  6178                              <1> %macro fladdorsub 7
  6179                              <1> 	stkopen 0x0E
  6180                              <1> 	mov ax,%1
  6181                              <1> 	mov ds,ax
  6182                              <1> 	mov ax,[%2+2]
  6183                              <1> 	mov [bp+0],ax
  6184                              <1> 	mov ax,[%2]
  6185                              <1> 	mov [bp+2],ax
  6186                              <1> 	mov ax,%3
  6187                              <1> 	mov ds,ax
  6188                              <1> 	mov ax,[%4+2]
  6189                              <1> 	mov [bp+4],ax
  6190                              <1> 	mov ax,[%4]
  6191                              <1> 	mov [bp+6],ax
  6192                              <1> 	mov word [bp+0x0C], %7
  6193                              <1> 	call proc_fladdorsub
  6194                              <1> 	mov ax,sp
  6195                              <1> 	mov bp,ax
  6196                              <1> 	mov ax,%5
  6197                              <1> 	mov ds,ax
  6198                              <1> 	mov ax,[bp+8]
  6199                              <1> 	mov [%6+2],ax
  6200                              <1> 	mov ax,[bp+0x0A]
  6201                              <1> 	mov [%6],ax
  6202                              <1> 	stkclose 0x0E
  6203                              <1> %endmacro
  6204                              <1> 	
  6205                              <1> %endif
  6206                                  %include "lib/trigon.mac"
  6207                              <1> 
  6208                              <1> %ifndef TRIGON_MAC
  6209                              <1> 	%define TRIGON_MAC
  6210                              <1> 
  6211                              <1> 	%include "lib/trigon.asm"
  6212                              <2> 
  6213                              <2> %ifndef TRIGON_ASM
  6214                              <2> 	%define TRIGON_ASM
  6215                              <2> 
  6216                              <2> 	%include "lib/math.mac"
  6217                              <3> 
  6218                              <3> %ifndef MATH_MAC
  6219                              <3> 	%define MATH_MAC
  6220                              <3> 	
  6221                              <3> 	%include "lib/math.asm"
  6222                              <3> 	%include "lib/system.mac"
  6223                              <3> 
  6224                              <3> %macro chgsig 1
  6225                              <3> 	chgsig cs, %1
  6226                              <3> %endmacro
  6227                              <3> 
  6228                              <3> %macro cmp16 3
  6229                              <3> 	cmp16 cs, %1, cs, %2, %3
  6230                              <3> %endmacro
  6231                              <3> 
  6232                              <3> %macro mul16 2
  6233                              <3> 	mul16 cs, %1, cs, %2
  6234                              <3> %endmacro
  6235                              <3> 
  6236                              <3> %macro div16 2
  6237                              <3> 	div16 cs, %1, cs, %2
  6238                              <3> %endmacro
  6239                              <3> 
  6240                              <3> %macro mod16 2
  6241                              <3> 	mod16 cs, %1, cs, %2
  6242                              <3> %endmacro
  6243                              <3> 
  6244                              <3> %macro inc16 1
  6245                              <3> 	inc16 cs, %1
  6246                              <3> %endmacro
  6247                              <3> 
  6248                              <3> %macro dec16 1
  6249                              <3> 	dec16 cs, %1
  6250                              <3> %endmacro
  6251                              <3> 
  6252                              <3> %macro add16 2
  6253                              <3> 	add16 cs, %1, cs, %2
  6254                              <3> %endmacro
  6255                              <3> 
  6256                              <3> %macro sub16 2
  6257                              <3> 	sub16 cs, %1, cs, %2
  6258                              <3> %endmacro
  6259                              <3> 
  6260                              <3> %macro int32to16 2
  6261                              <3> 	int32to16 cs, %1, %2
  6262                              <3> %endmacro
  6263                              <3> 
  6264                              <3> %macro int16to32 2
  6265                              <3> 	int16to32 %1, cs, %2
  6266                              <3> %endmacro
  6267                              <3> 
  6268                              <3> %macro setsig 1
  6269                              <3> 	setsig cs, %1
  6270                              <3> %endmacro
  6271                              <3> 
  6272                              <3> %macro clrsig 1
  6273                              <3> 	clrsig cs, %1
  6274                              <3> %endmacro
  6275                              <3> 
  6276                              <3> %macro idiv32 5
  6277                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  6278                              <3> %endmacro
  6279                              <3> 
  6280                              <3> %macro imul32 3
  6281                              <3> 	imul32 cs, %1, cs, %2, cs, %3
  6282                              <3> %endmacro
  6283                              <3> 
  6284                              <3> %macro div32 5
  6285                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  6286                              <3> %endmacro
  6287                              <3> 
  6288                              <3> %macro mul32 3
  6289                              <3> 	mul32 cs, %1, cs, %2, cs, %3
  6290                              <3> %endmacro
  6291                              <3> 	
  6292                              <3> %macro add32 3
  6293                              <3> 	add32 cs, %1, cs, %2, cs, %3
  6294                              <3> %endmacro
  6295                              <3> 
  6296                              <3> %macro sub32 3
  6297                              <3> 	sub32 cs, %1, cs, %2, cs, %3
  6298                              <3> %endmacro
  6299                              <3> 
  6300                              <3> %macro int32to16 3
  6301                              <3> 	stkopen 0x06
  6302                              <3> 	mov ax,%1
  6303                              <3> 	mov ds,ax
  6304                              <3> 	mov ax,[%2+2]
  6305                              <3> 	mov word [bp+0], ax
  6306                              <3> 	mov ax,[%2]	
  6307                              <3> 	mov word [bp+2], ax
  6308                              <3> 	call proc_int32to16
  6309                              <3> 	mov ax,sp
  6310                              <3> 	mov bp,ax
  6311                              <3> 	mov ax,[bp+4]
  6312                              <3> 	mov word %3, ax	
  6313                              <3> 	stkclose 0x06
  6314                              <3> %endmacro
  6315                              <3> 
  6316                              <3> %macro int16to32 3
  6317                              <3> 	stkopen 0x06
  6318                              <3> 	mov word [bp+0], %1	
  6319                              <3> 	call proc_int16to32
  6320                              <3> 	mov ax,sp
  6321                              <3> 	mov bp,ax
  6322                              <3> 	mov ax,%2
  6323                              <3> 	mov ds,ax
  6324                              <3> 	mov ax,[bp+2]
  6325                              <3> 	mov [%3+2],ax
  6326                              <3> 	mov ax,[bp+4]
  6327                              <3> 	mov [%3],ax	
  6328                              <3> 	stkclose 0x06
  6329                              <3> %endmacro
  6330                              <3> 
  6331                              <3> %macro setsig 2
  6332                              <3> 	stkopen 0x02
  6333                              <3> 	mov ax,%1
  6334                              <3> 	mov ds,ax
  6335                              <3> 	mov ax,[%2+2]
  6336                              <3> 	mov word [bp+0], ax
  6337                              <3> 	call proc_setsig
  6338                              <3> 	mov ax,sp
  6339                              <3> 	mov bp,ax
  6340                              <3> 	mov ax,%1
  6341                              <3> 	mov ds,ax
  6342                              <3> 	mov ax,[bp+0]
  6343                              <3> 	mov word [%2+2], ax
  6344                              <3> 	stkclose 0x02
  6345                              <3> %endmacro
  6346                              <3> 
  6347                              <3> %macro clrsig 2
  6348                              <3> 	stkopen 0x02
  6349                              <3> 	mov ax,%1
  6350                              <3> 	mov ds,ax
  6351                              <3> 	mov ax,[%2+2]
  6352                              <3> 	mov word [bp+0], ax
  6353                              <3> 	call proc_clrsig
  6354                              <3> 	mov ax,sp
  6355                              <3> 	mov bp,ax
  6356                              <3> 	mov ax,%1
  6357                              <3> 	mov ds,ax
  6358                              <3> 	mov ax,[bp+0]
  6359                              <3> 	mov word [%2+2], ax
  6360                              <3> 	stkclose 0x02
  6361                              <3> %endmacro
  6362                              <3> 
  6363                              <3> %macro div32 10
  6364                              <3> 	stkopen 0x11
  6365                              <3> 	mov ax,%1
  6366                              <3> 	mov ds,ax
  6367                              <3> 	mov ax,[%2+2]
  6368                              <3> 	mov word [bp+0], ax
  6369                              <3> 	mov ax,[%2]
  6370                              <3> 	mov word [bp+2], ax
  6371                              <3> 	mov ax,%3
  6372                              <3> 	mov ds,ax
  6373                              <3> 	mov ax,[%4+2]
  6374                              <3> 	mov word [bp+4], ax
  6375                              <3> 	mov ax,[%4]
  6376                              <3> 	mov word [bp+6], ax
  6377                              <3> 	call proc_div32
  6378                              <3> 	mov ax,sp
  6379                              <3> 	mov bp,ax
  6380                              <3> 	mov ax,%5
  6381                              <3> 	mov ds,ax
  6382                              <3> 	mov word ax, [bp+8]
  6383                              <3> 	mov word [%6+2], ax
  6384                              <3> 	mov word ax, [bp+0x0A]
  6385                              <3> 	mov word [%6], ax
  6386                              <3> 	mov ax,%7
  6387                              <3> 	mov ds,ax
  6388                              <3> 	mov word ax,[bp+0x0C]
  6389                              <3> 	mov word [%8+2],ax
  6390                              <3> 	mov word ax,[bp+0x0E]
  6391                              <3> 	mov word [%8],ax
  6392                              <3> 	mov ax,%9
  6393                              <3> 	mov ds,ax
  6394                              <3> 	mov byte al,[bp+0x10]
  6395                              <3> 	mov byte [%10],al
  6396                              <3> 	stkclose 0x11
  6397                              <3> %endmacro
  6398                              <3> 	
  6399                              <3> %macro mul32 6
  6400                              <3> 	stkopen 0x0C
  6401                              <3> 	mov ax,%1
  6402                              <3> 	mov ds,ax
  6403                              <3> 	mov ax,[%2+2]
  6404                              <3> 	mov word [bp+0], ax
  6405                              <3> 	mov ax,[%2]
  6406                              <3> 	mov word [bp+2], ax
  6407                              <3> 	mov ax,%3
  6408                              <3> 	mov ds,ax
  6409                              <3> 	mov ax,[%4+2]
  6410                              <3> 	mov word [bp+4], ax
  6411                              <3> 	mov ax,[%4]
  6412                              <3> 	mov word [bp+6], ax
  6413                              <3> 	call proc_mul32
  6414                              <3> 	mov ax,sp
  6415                              <3> 	mov bp,ax
  6416                              <3> 	mov ax,%5
  6417                              <3> 	mov ds,ax
  6418                              <3> 	mov word ax, [bp+8]
  6419                              <3> 	mov word [%6+2], ax
  6420                              <3> 	mov word ax, [bp+0x0A]
  6421                              <3> 	mov word [%6], ax
  6422                              <3> 	stkclose 0x0C
  6423                              <3> %endmacro	
  6424                              <3> 	
  6425                              <3> %macro add32 6
  6426                              <3> 	stkopen 0x0C
  6427                              <3> 	mov ax,%1
  6428                              <3> 	mov ds,ax
  6429                              <3> 	mov ax,[%2+2]
  6430                              <3> 	mov word [bp+0], ax
  6431                              <3> 	mov ax,[%2]
  6432                              <3> 	mov word [bp+2], ax
  6433                              <3> 	mov ax,%3
  6434                              <3> 	mov ds,ax
  6435                              <3> 	mov ax,[%4+2]
  6436                              <3> 	mov word [bp+4], ax
  6437                              <3> 	mov ax,[%4]
  6438                              <3> 	mov word [bp+6], ax
  6439                              <3> 	call proc_add32
  6440                              <3> 	mov ax,sp
  6441                              <3> 	mov bp,ax
  6442                              <3> 	mov ax,%5
  6443                              <3> 	mov ds,ax
  6444                              <3> 	mov word ax, [bp+8]
  6445                              <3> 	mov word [%6+2], ax
  6446                              <3> 	mov word ax, [bp+0x0A]
  6447                              <3> 	mov word [%6], ax
  6448                              <3> 	stkclose 0x0C
  6449                              <3> %endmacro
  6450                              <3> 
  6451                              <3> %macro sub32 6
  6452                              <3> 	stkopen 0x0C
  6453                              <3> 	mov ax,%1
  6454                              <3> 	mov ds,ax
  6455                              <3> 	mov ax,[%2+2]
  6456                              <3> 	mov word [bp+0], ax
  6457                              <3> 	mov ax,[%2]
  6458                              <3> 	mov word [bp+2], ax
  6459                              <3> 	mov ax,%3
  6460                              <3> 	mov ds,ax
  6461                              <3> 	mov ax,[%4+2]
  6462                              <3> 	mov word [bp+4], ax
  6463                              <3> 	mov ax,[%4]
  6464                              <3> 	mov word [bp+6], ax
  6465                              <3> 	call proc_sub32
  6466                              <3> 	mov ax,sp
  6467                              <3> 	mov bp,ax
  6468                              <3> 	mov ax,%5
  6469                              <3> 	mov ds,ax
  6470                              <3> 	mov word ax, [bp+8]
  6471                              <3> 	mov word [%6+2], ax
  6472                              <3> 	mov word ax, [bp+0x0A]
  6473                              <3> 	mov word [%6], ax
  6474                              <3> 	stkclose 0x0C
  6475                              <3> %endmacro
  6476                              <3> 
  6477                              <3> %macro idiv32 10
  6478                              <3> 	stkopen 0x11
  6479                              <3> 	mov ax,%1
  6480                              <3> 	mov ds,ax
  6481                              <3> 	mov ax,[%2+2]
  6482                              <3> 	mov word [bp+0], ax
  6483                              <3> 	mov ax,[%2]
  6484                              <3> 	mov word [bp+2], ax
  6485                              <3> 	mov ax,%3
  6486                              <3> 	mov ds,ax
  6487                              <3> 	mov ax,[%4+2]
  6488                              <3> 	mov word [bp+4], ax
  6489                              <3> 	mov ax,[%4]
  6490                              <3> 	mov word [bp+6], ax
  6491                              <3> 	call proc_idiv32
  6492                              <3> 	mov ax,sp
  6493                              <3> 	mov bp,ax
  6494                              <3> 	mov ax,%5
  6495                              <3> 	mov ds,ax
  6496                              <3> 	mov word ax, [bp+8]
  6497                              <3> 	mov word [%6+2], ax
  6498                              <3> 	mov word ax, [bp+0x0A]
  6499                              <3> 	mov word [%6], ax
  6500                              <3> 	mov ax,%7
  6501                              <3> 	mov ds,ax
  6502                              <3> 	mov word ax,[bp+0x0C]
  6503                              <3> 	mov word [%8+2],ax
  6504                              <3> 	mov word ax,[bp+0x0E]
  6505                              <3> 	mov word [%8],ax
  6506                              <3> 	mov ax,%9
  6507                              <3> 	mov ds,ax
  6508                              <3> 	mov byte al,[bp+0x10]
  6509                              <3> 	mov byte [%10],al
  6510                              <3> 	stkclose 0x11
  6511                              <3> %endmacro
  6512                              <3> 
  6513                              <3> %macro imul32 6
  6514                              <3> 	stkopen 0x0C
  6515                              <3> 	mov ax,%1
  6516                              <3> 	mov ds,ax
  6517                              <3> 	mov ax,[%2+2]
  6518                              <3> 	mov word [bp+0], ax
  6519                              <3> 	mov ax,[%2]
  6520                              <3> 	mov word [bp+2], ax
  6521                              <3> 	mov ax,%3
  6522                              <3> 	mov ds,ax
  6523                              <3> 	mov ax,[%4+2]
  6524                              <3> 	mov word [bp+4], ax
  6525                              <3> 	mov ax,[%4]
  6526                              <3> 	mov word [bp+6], ax
  6527                              <3> 	call proc_imul32
  6528                              <3> 	mov ax,sp
  6529                              <3> 	mov bp,ax
  6530                              <3> 	mov ax,%5
  6531                              <3> 	mov ds,ax
  6532                              <3> 	mov word ax, [bp+8]
  6533                              <3> 	mov word [%6+2], ax
  6534                              <3> 	mov word ax, [bp+0x0A]
  6535                              <3> 	mov word [%6], ax
  6536                              <3> 	stkclose 0x0C
  6537                              <3> %endmacro
  6538                              <3> 	
  6539                              <3> %macro cmp32 3
  6540                              <3> 	cmp32 cs, %1, cs, %2, %3
  6541                              <3> %endmacro	
  6542                              <3> 	
  6543                              <3> %macro cmp32 5
  6544                              <3> 	stkopen 9
  6545                              <3> 	mov ax,%1
  6546                              <3> 	mov ds,ax
  6547                              <3> 	mov word ax,[%2+2]
  6548                              <3> 	mov word [bp+0], ax
  6549                              <3> 	mov word ax,[%2]
  6550                              <3> 	mov word [bp+2], ax	
  6551                              <3> 	mov ax,%3
  6552                              <3> 	mov ds,ax
  6553                              <3> 	mov word ax,[%4+2]
  6554                              <3> 	mov word [bp+4], ax
  6555                              <3> 	mov word ax,[%4]
  6556                              <3> 	mov word [bp+6], ax	
  6557                              <3> 	call proc_cmp32
  6558                              <3> 	mov ax,sp
  6559                              <3> 	mov bp,ax
  6560                              <3> 	mov al,[bp+8]
  6561                              <3> 	mov byte %5,al
  6562                              <3> 	stkclose 9
  6563                              <3> %endmacro
  6564                              <3> 	
  6565                              <3> %macro shl32 2
  6566                              <3> 	shl32 cs, %1, %2
  6567                              <3> %endmacro	
  6568                              <3> 	
  6569                              <3> %macro shl32 3
  6570                              <3> 	stkopen 5
  6571                              <3> 	mov ax,%1
  6572                              <3> 	mov ds,ax
  6573                              <3> 	mov word ax,[%2+2]
  6574                              <3> 	mov word [bp+0], ax
  6575                              <3> 	mov word ax,[%2]
  6576                              <3> 	mov word [bp+2], ax
  6577                              <3> 	mov byte al, %3
  6578                              <3> 	mov byte [bp+4], al 
  6579                              <3> 	call proc_shl32
  6580                              <3> 	mov ax,sp
  6581                              <3> 	mov bp,ax
  6582                              <3> 	mov ax,%1
  6583                              <3> 	mov ds,ax
  6584                              <3> 	mov ax,[bp+0]
  6585                              <3> 	mov word [%2+2],ax
  6586                              <3> 	mov ax,[bp+2]
  6587                              <3> 	mov word [%2],ax
  6588                              <3> 	stkclose 5
  6589                              <3> %endmacro
  6590                              <3> 
  6591                              <3> 
  6592                              <3> %macro shr32 2
  6593                              <3> 	shr32 cs, %1, %2
  6594                              <3> %endmacro	
  6595                              <3> 	
  6596                              <3> %macro shr32 3
  6597                              <3> 	stkopen 5
  6598                              <3> 	mov ax,%1
  6599                              <3> 	mov ds,ax
  6600                              <3> 	mov word ax,[%2+2]
  6601                              <3> 	mov word [bp+0], ax
  6602                              <3> 	mov word ax,[%2]
  6603                              <3> 	mov word [bp+2], ax
  6604                              <3> 	mov byte al, %3
  6605                              <3> 	mov byte [bp+4], al 
  6606                              <3> 	call proc_shr32
  6607                              <3> 	mov ax,sp
  6608                              <3> 	mov bp,ax
  6609                              <3> 	mov ax,%1
  6610                              <3> 	mov ds,ax
  6611                              <3> 	mov ax,[bp+0]
  6612                              <3> 	mov word [%2+2],ax
  6613                              <3> 	mov ax,[bp+2]
  6614                              <3> 	mov word [%2],ax
  6615                              <3> 	stkclose 5
  6616                              <3> %endmacro
  6617                              <3> 
  6618                              <3> %macro inc16 2
  6619                              <3> 	mov ax,%1
  6620                              <3> 	mov ds,ax
  6621                              <3> 	inc word [%2]
  6622                              <3> %endmacro
  6623                              <3> 
  6624                              <3> %macro dec16 2
  6625                              <3> 	mov ax,%1
  6626                              <3> 	mov ds,ax
  6627                              <3> 	dec word [%2]
  6628                              <3> %endmacro
  6629                              <3> 
  6630                              <3> %macro add16 4	
  6631                              <3> 	mov ax,%3
  6632                              <3> 	mov ds,ax
  6633                              <3> 	mov bx,[%4]	
  6634                              <3> 	mov ax,%1
  6635                              <3> 	mov ds,ax	
  6636                              <3> 	add [%2],bx
  6637                              <3> %endmacro
  6638                              <3> 
  6639                              <3> %macro sub16 4
  6640                              <3> 	mov ax,%3
  6641                              <3> 	mov ds,ax
  6642                              <3> 	mov bx,[%4]
  6643                              <3> 	mov ax,%1
  6644                              <3> 	mov ds,ax
  6645                              <3> 	sub [%2],bx
  6646                              <3> %endmacro
  6647                              <3> 
  6648                              <3> %macro mul16 4
  6649                              <3> 	mov ax,%1
  6650                              <3> 	mov ds,ax
  6651                              <3> 	mov bx,[%2]
  6652                              <3> 	mov ax,%3
  6653                              <3> 	mov ds,ax
  6654                              <3> 	mov cx,[%4]
  6655                              <3> 	
  6656                              <3> 	mov ax,bx
  6657                              <3> 	imul cx
  6658                              <3> 	
  6659                              <3> 	mov dx,%1
  6660                              <3> 	mov ds,dx
  6661                              <3> 	mov [%2],ax
  6662                              <3> %endmacro
  6663                              <3> 
  6664                              <3> %macro div16 4
  6665                              <3> 	mov ax,%1
  6666                              <3> 	mov ds,ax
  6667                              <3> 	mov bx,[%2]
  6668                              <3> 	mov ax,%3
  6669                              <3> 	mov ds,ax
  6670                              <3> 	mov cx,[%4]
  6671                              <3> 	
  6672                              <3> 	xor dx,dx
  6673                              <3> 	mov ax,bx
  6674                              <3> 	idiv cx
  6675                              <3> 	
  6676                              <3> 	mov dx,%1
  6677                              <3> 	mov ds,dx
  6678                              <3> 	mov [%2],ax
  6679                              <3> %endmacro
  6680                              <3> 
  6681                              <3> 
  6682                              <3> %macro mod16 4
  6683                              <3> 	mov ax,%1
  6684                              <3> 	mov ds,ax
  6685                              <3> 	mov bx,[%2]
  6686                              <3> 	mov ax,%3
  6687                              <3> 	mov ds,ax
  6688                              <3> 	mov cx,[%4]
  6689                              <3> 	
  6690                              <3> 	xor dx,dx
  6691                              <3> 	mov ax,bx
  6692                              <3> 	idiv cx
  6693                              <3> 	
  6694                              <3> 	mov bx,%1
  6695                              <3> 	mov ds,bx
  6696                              <3> 	mov [%2],dx
  6697                              <3> %endmacro
  6698                              <3> 
  6699                              <3> %macro cmp16 5
  6700                              <3> 	mov ax,%1
  6701                              <3> 	mov ds,ax
  6702                              <3> 	mov bx,[%2]
  6703                              <3> 	mov ax,%3
  6704                              <3> 	mov ds,ax
  6705                              <3> 	mov	cx,[%4]
  6706                              <3> 	
  6707                              <3> 	cmp bx,cx
  6708                              <3> 	jg %%above
  6709                              <3> 	jl %%below
  6710                              <3> 		mov byte %5, 0
  6711                              <3> 		jmp %%endcmp
  6712                              <3> 	%%above:
  6713                              <3> 		mov byte %5, 1
  6714                              <3> 		jmp %%endcmp
  6715                              <3> 	%%below:
  6716                              <3> 		mov byte %5, -1
  6717                              <3> 	%%endcmp:
  6718                              <3> %endmacro
  6719                              <3> 
  6720                              <3> %macro chgsig 2
  6721                              <3> 	mov ax,%1
  6722                              <3> 	mov ds,ax
  6723                              <3> 	mov ax,[%2]
  6724                              <3> 	mov bx,0xFFFF
  6725                              <3> 	sub bx,ax
  6726                              <3> 	inc bx
  6727                              <3> 	mov [%2],bx
  6728                              <3> %endmacro
  6729                              <3> 	
  6730                              <3> %endif
  6731                              <2> 	%include "lib/float.mac"
  6732                              <3> 
  6733                              <3> %ifndef FLOAT_MAC
  6734                              <3> 	%define FLOAT_MAC
  6735                              <3> 	
  6736                              <3> 	%include "lib/float.asm"
  6737                              <3> 
  6738                              <3> %macro flinvsig 1
  6739                              <3> 	flinvsig cs, %1
  6740                              <3> %endmacro
  6741                              <3> 
  6742                              <3> %macro flsetsig 1
  6743                              <3> 	flsetsig cs, %1
  6744                              <3> %endmacro
  6745                              <3> 
  6746                              <3> %macro flclrsig 1
  6747                              <3> 	flclrsig cs, %1
  6748                              <3> %endmacro
  6749                              <3> 
  6750                              <3> %macro int16tofl 2
  6751                              <3> 	int16tofl cs, %1, cs, %2
  6752                              <3> %endmacro
  6753                              <3> 
  6754                              <3> %macro fltoint16 2
  6755                              <3> 	fltoint16 cs, %1, cs, %2
  6756                              <3> %endmacro
  6757                              <3> 
  6758                              <3> %macro fltoint32 1
  6759                              <3> 	fltoint32 %1, %1
  6760                              <3> %endmacro
  6761                              <3> 
  6762                              <3> %macro fltoint32 2
  6763                              <3> 	fltoint32 cs, %1, cs, %2
  6764                              <3> %endmacro
  6765                              <3> 
  6766                              <3> %macro int32tofl 1
  6767                              <3> 	int32tofl %1, %1
  6768                              <3> %endmacro
  6769                              <3> 
  6770                              <3> %macro int32tofl 2
  6771                              <3> 	int32tofl cs, %1, cs, %2
  6772                              <3> %endmacro
  6773                              <3> 
  6774                              <3> %macro flcmp 3
  6775                              <3> 	flcmp cs, %1, cs, %2, %3
  6776                              <3> %endmacro
  6777                              <3> 
  6778                              <3> %macro flshl 1
  6779                              <3> 	flshl cs, %1
  6780                              <3> %endmacro
  6781                              <3> 
  6782                              <3> %macro flshr 1
  6783                              <3> 	flshr cs, %1
  6784                              <3> %endmacro
  6785                              <3> 
  6786                              <3> %macro fladd 3
  6787                              <3> 	fladd cs, %1, cs, %2, cs, %3
  6788                              <3> %endmacro
  6789                              <3> 
  6790                              <3> %macro flsub 3
  6791                              <3> 	flsub cs, %1, cs, %2, cs, %3
  6792                              <3> %endmacro	
  6793                              <3> 
  6794                              <3> %macro flmul 3
  6795                              <3> 	flmul cs, %1, cs, %2, cs, %3
  6796                              <3> %endmacro
  6797                              <3> 
  6798                              <3> %macro fldiv 3
  6799                              <3> 	fldiv cs, %1, cs, %2, cs, %3
  6800                              <3> %endmacro	
  6801                              <3> 
  6802                              <3> %macro fladd 6
  6803                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  6804                              <3> %endmacro
  6805                              <3> 
  6806                              <3> %macro flsub 6
  6807                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  6808                              <3> %endmacro
  6809                              <3> 
  6810                              <3> %macro fltoint16 4
  6811                              <3> 	stkopen 0x06
  6812                              <3> 	mov ax,%1
  6813                              <3> 	mov ds,ax
  6814                              <3> 	mov ax,[%2+2]
  6815                              <3> 	mov [bp+0],ax
  6816                              <3> 	mov ax,[%2]
  6817                              <3> 	mov [bp+2],ax	
  6818                              <3> 	call proc_fltoint16
  6819                              <3> 	mov ax,sp
  6820                              <3> 	mov bp,ax
  6821                              <3> 	mov ax,%3
  6822                              <3> 	mov ds,ax
  6823                              <3> 	mov ax,[bp+4]
  6824                              <3> 	mov [%4],ax
  6825                              <3> 	stkclose 0x06
  6826                              <3> %endmacro
  6827                              <3> 
  6828                              <3> %macro int16tofl 4	
  6829                              <3> 	stkopen 0x06
  6830                              <3> 	mov ax,%1
  6831                              <3> 	mov ds,ax
  6832                              <3> 	mov ax,[%2]
  6833                              <3> 	mov [bp+0],ax	
  6834                              <3> 	call proc_int16tofl
  6835                              <3> 	mov ax,sp
  6836                              <3> 	mov bp,ax
  6837                              <3> 	mov ax,%3
  6838                              <3> 	mov ds,ax
  6839                              <3> 	mov ax,[bp+2]
  6840                              <3> 	mov [%4+2],ax
  6841                              <3> 	mov ax,[bp+4]
  6842                              <3> 	mov [%4],ax
  6843                              <3> 	stkclose 0x06
  6844                              <3> %endmacro
  6845                              <3> 
  6846                              <3> %macro fltoint32 4
  6847                              <3> 	stkopen 0x08
  6848                              <3> 	mov ax,%1
  6849                              <3> 	mov ds,ax
  6850                              <3> 	mov ax,[%2+2]
  6851                              <3> 	mov [bp+0],ax
  6852                              <3> 	mov ax,[%2]
  6853                              <3> 	mov [bp+2],ax	
  6854                              <3> 	call proc_fltoint32
  6855                              <3> 	mov ax,sp
  6856                              <3> 	mov bp,ax
  6857                              <3> 	mov ax,%3
  6858                              <3> 	mov ds,ax
  6859                              <3> 	mov ax,[bp+4]
  6860                              <3> 	mov [%4+2],ax
  6861                              <3> 	mov ax,[bp+6]
  6862                              <3> 	mov [%4],ax
  6863                              <3> 	stkclose 0x08
  6864                              <3> %endmacro
  6865                              <3> 
  6866                              <3> %macro int32tofl 4
  6867                              <3> 	stkopen 0x08
  6868                              <3> 	mov ax,%1
  6869                              <3> 	mov ds,ax
  6870                              <3> 	mov ax,[%2+2]
  6871                              <3> 	mov [bp+0],ax
  6872                              <3> 	mov ax,[%2]
  6873                              <3> 	mov [bp+2],ax	
  6874                              <3> 	call proc_int32tofl
  6875                              <3> 	mov ax,sp
  6876                              <3> 	mov bp,ax
  6877                              <3> 	mov ax,%3
  6878                              <3> 	mov ds,ax
  6879                              <3> 	mov ax,[bp+4]
  6880                              <3> 	mov [%4+2],ax
  6881                              <3> 	mov ax,[bp+6]
  6882                              <3> 	mov [%4],ax
  6883                              <3> 	stkclose 0x08
  6884                              <3> %endmacro
  6885                              <3> 
  6886                              <3> %macro flinvsig 2
  6887                              <3> 	stkopen 0x02
  6888                              <3> 	mov ax,%1
  6889                              <3> 	mov ds,ax
  6890                              <3> 	mov ax,[%2+2]
  6891                              <3> 	mov word [bp+0], ax
  6892                              <3> 	call proc_flinvsig
  6893                              <3> 	push sp
  6894                              <3> 	pop bp
  6895                              <3> 	mov ax,[bp+0]
  6896                              <3> 	mov word [%2+2],ax
  6897                              <3> 	stkclose 0x02
  6898                              <3> %endmacro
  6899                              <3> 
  6900                              <3> %macro flsetsig 2
  6901                              <3> 	stkopen 0x04
  6902                              <3> 	mov ax,%1
  6903                              <3> 	mov ds,ax
  6904                              <3> 	mov ax,[%2+2]
  6905                              <3> 	mov word [bp+0], ax
  6906                              <3> 	mov word [bp+2], 0x8000
  6907                              <3> 	call proc_flsetsig
  6908                              <3> 	push sp
  6909                              <3> 	pop bp
  6910                              <3> 	mov ax,[bp+0]
  6911                              <3> 	mov word [%2+2],ax
  6912                              <3> 	stkclose 0x04	
  6913                              <3> %endmacro
  6914                              <3> 
  6915                              <3> %macro flclrsig 2
  6916                              <3> 	stkopen 0x04
  6917                              <3> 	mov ax,%1
  6918                              <3> 	mov ds,ax
  6919                              <3> 	mov ax,[%2+2]
  6920                              <3> 	mov word [bp+0], ax
  6921                              <3> 	mov word [bp+2], 0x0000
  6922                              <3> 	call proc_flsetsig
  6923                              <3> 	push sp
  6924                              <3> 	pop bp
  6925                              <3> 	mov ax,[bp+0]
  6926                              <3> 	mov word [%2+2],ax
  6927                              <3> 	stkclose 0x04	
  6928                              <3> %endmacro
  6929                              <3> 
  6930                              <3> %macro flcmp 5	
  6931                              <3> 	stkopen 0x09
  6932                              <3> 	mov ax,%1
  6933                              <3> 	mov ds,ax
  6934                              <3> 	mov ax,[%2+2]
  6935                              <3> 	mov [bp+0],ax
  6936                              <3> 	mov ax,[%2]
  6937                              <3> 	mov [bp+2],ax
  6938                              <3> 	mov ax,%3
  6939                              <3> 	mov ds,ax
  6940                              <3> 	mov ax,[%4+2]
  6941                              <3> 	mov [bp+4],ax
  6942                              <3> 	mov ax,[%4]
  6943                              <3> 	mov [bp+6],ax
  6944                              <3> 	call proc_flcmp
  6945                              <3> 	mov ax,sp
  6946                              <3> 	mov bp,ax
  6947                              <3> 	mov byte %5,[bp+8]
  6948                              <3> 	stkclose 0x09
  6949                              <3> %endmacro
  6950                              <3> 
  6951                              <3> %macro flshl 2	
  6952                              <3> 	stkopen 0x02
  6953                              <3> 	mov ax,%1
  6954                              <3> 	mov ds,ax
  6955                              <3> 	mov ax,[%2+2]
  6956                              <3> 	mov [bp+0],ax
  6957                              <3> 	call proc_flshl
  6958                              <3> 	mov ax,sp
  6959                              <3> 	mov bp,ax
  6960                              <3> 	mov ax,%1
  6961                              <3> 	mov ds,ax
  6962                              <3> 	mov ax,[bp+0]
  6963                              <3> 	mov [%2+2],ax
  6964                              <3> 	stkclose 0x02
  6965                              <3> %endmacro
  6966                              <3> 
  6967                              <3> %macro flshr 2	
  6968                              <3> 	stkopen 0x02
  6969                              <3> 	mov ax,%1
  6970                              <3> 	mov ds,ax
  6971                              <3> 	mov ax,[%2+2]
  6972                              <3> 	mov [bp+0],ax
  6973                              <3> 	call proc_flshr
  6974                              <3> 	mov ax,sp
  6975                              <3> 	mov bp,ax
  6976                              <3> 	mov ax,%1
  6977                              <3> 	mov ds,ax
  6978                              <3> 	mov ax,[bp+0]
  6979                              <3> 	mov [%2+2],ax
  6980                              <3> 	stkclose 0x02
  6981                              <3> %endmacro
  6982                              <3> 
  6983                              <3> %macro fldiv 6	
  6984                              <3> 	stkopen 0x0C
  6985                              <3> 	mov ax,%1
  6986                              <3> 	mov ds,ax
  6987                              <3> 	mov ax,[%2+2]
  6988                              <3> 	mov [bp+0],ax
  6989                              <3> 	mov ax,[%2]
  6990                              <3> 	mov [bp+2],ax
  6991                              <3> 	mov ax,%3
  6992                              <3> 	mov ds,ax
  6993                              <3> 	mov ax,[%4+2]
  6994                              <3> 	mov [bp+4],ax
  6995                              <3> 	mov ax,[%4]
  6996                              <3> 	mov [bp+6],ax
  6997                              <3> 	call proc_fldiv
  6998                              <3> 	mov ax,sp
  6999                              <3> 	mov bp,ax
  7000                              <3> 	mov ax,%5
  7001                              <3> 	mov ds,ax
  7002                              <3> 	mov ax,[bp+8]
  7003                              <3> 	mov [%6+2],ax
  7004                              <3> 	mov ax,[bp+0x0A]
  7005                              <3> 	mov [%6],ax
  7006                              <3> 	stkclose 0x0C
  7007                              <3> %endmacro
  7008                              <3> 
  7009                              <3> %macro flmul 6	
  7010                              <3> 	stkopen 0x0C
  7011                              <3> 	mov ax,%1
  7012                              <3> 	mov ds,ax
  7013                              <3> 	mov ax,[%2+2]
  7014                              <3> 	mov [bp+0],ax
  7015                              <3> 	mov ax,[%2]
  7016                              <3> 	mov [bp+2],ax
  7017                              <3> 	mov ax,%3
  7018                              <3> 	mov ds,ax
  7019                              <3> 	mov ax,[%4+2]
  7020                              <3> 	mov [bp+4],ax
  7021                              <3> 	mov ax,[%4]
  7022                              <3> 	mov [bp+6],ax
  7023                              <3> 	call proc_flmul
  7024                              <3> 	mov ax,sp
  7025                              <3> 	mov bp,ax
  7026                              <3> 	mov ax,%5
  7027                              <3> 	mov ds,ax
  7028                              <3> 	mov ax,[bp+8]
  7029                              <3> 	mov [%6+2],ax
  7030                              <3> 	mov ax,[bp+0x0A]
  7031                              <3> 	mov [%6],ax
  7032                              <3> 	stkclose 0x0C
  7033                              <3> %endmacro
  7034                              <3> 	
  7035                              <3> %macro fladdorsub 7
  7036                              <3> 	stkopen 0x0E
  7037                              <3> 	mov ax,%1
  7038                              <3> 	mov ds,ax
  7039                              <3> 	mov ax,[%2+2]
  7040                              <3> 	mov [bp+0],ax
  7041                              <3> 	mov ax,[%2]
  7042                              <3> 	mov [bp+2],ax
  7043                              <3> 	mov ax,%3
  7044                              <3> 	mov ds,ax
  7045                              <3> 	mov ax,[%4+2]
  7046                              <3> 	mov [bp+4],ax
  7047                              <3> 	mov ax,[%4]
  7048                              <3> 	mov [bp+6],ax
  7049                              <3> 	mov word [bp+0x0C], %7
  7050                              <3> 	call proc_fladdorsub
  7051                              <3> 	mov ax,sp
  7052                              <3> 	mov bp,ax
  7053                              <3> 	mov ax,%5
  7054                              <3> 	mov ds,ax
  7055                              <3> 	mov ax,[bp+8]
  7056                              <3> 	mov [%6+2],ax
  7057                              <3> 	mov ax,[bp+0x0A]
  7058                              <3> 	mov [%6],ax
  7059                              <3> 	stkclose 0x0E
  7060                              <3> %endmacro
  7061                              <3> 	
  7062                              <3> %endif
  7063                              <2> 
  7064                              <2> %macro __sin 4
  7065                              <2> 	__sinorcos %1, %2, %3, %4, 1
  7066                              <2> %endmacro
  7067                              <2> 
  7068                              <2> %macro __cos 4
  7069                              <2> 	__sinorcos %1, %2, %3, %4, 0
  7070                              <2> %endmacro
  7071                              <2> 
  7072                              <2> %macro __sin0x90 4
  7073                              <2> 	__sinorcos0x90 %1, %2, %3, %4, 1
  7074                              <2> %endmacro
  7075                              <2> 
  7076                              <2> %macro __cos0x90 4
  7077                              <2> 	__sinorcos0x90 %1, %2, %3, %4, 0
  7078                              <2> %endmacro
  7079                              <2> 
  7080                              <2> %macro __toradians 4
  7081                              <2> 	stkopen 0x08
  7082                              <2> 	mov word [bp+0],%1
  7083                              <2> 	mov word [bp+2],%2
  7084                              <2> 	call proc_toradians
  7085                              <2> 	push sp
  7086                              <2> 	pop bp
  7087                              <2> 	mov word %3, [bp+4]
  7088                              <2> 	mov word %4, [bp+6]
  7089                              <2> 	stkclose 0x08
  7090                              <2> %endmacro
  7091                              <2> 
  7092                              <2> %macro __todegrees 4
  7093                              <2> 	stkopen 0x08
  7094                              <2> 	mov word [bp+0],%1
  7095                              <2> 	mov word [bp+2],%2
  7096                              <2> 	call proc_todegrees
  7097                              <2> 	push sp
  7098                              <2> 	pop bp
  7099                              <2> 	mov word %3, [bp+4]
  7100                              <2> 	mov word %4, [bp+6]
  7101                              <2> 	stkclose 0x08
  7102                              <2> %endmacro
  7103                              <2> 
  7104                              <2> %macro __atan 4
  7105                              <2> 	stkopen 0x08
  7106                              <2> 	mov word [bp+0],%1
  7107                              <2> 	mov word [bp+2],%2	
  7108                              <2> 	call proc_atan
  7109                              <2> 	push sp
  7110                              <2> 	pop bp
  7111                              <2> 	mov word %3,[bp+4]
  7112                              <2> 	mov word %4,[bp+6]
  7113                              <2> 	stkclose 0x08
  7114                              <2> %endmacro
  7115                              <2> 
  7116                              <2> %macro __sinorcos 5
  7117                              <2> 	stkopen 0x09
  7118                              <2> 	mov word [bp+0],%1
  7119                              <2> 	mov word [bp+2],%2	
  7120                              <2> 	mov byte [bp+8],%5
  7121                              <2> 	call proc_sinorcos
  7122                              <2> 	push sp
  7123                              <2> 	pop bp
  7124                              <2> 	mov word %3,[bp+4]
  7125                              <2> 	mov word %4,[bp+6]
  7126                              <2> 	stkclose 0x09
  7127                              <2> %endmacro
  7128                              <2> 
  7129                              <2> %macro __sinorcos0x90 5
  7130                              <2> 	stkopen 0x09
  7131                              <2> 	mov word [bp+0],%1
  7132                              <2> 	mov word [bp+2],%2
  7133                              <2> 	mov byte [bp+8],%5
  7134                              <2> 	call proc_sinorcos0x90
  7135                              <2> 	push sp
  7136                              <2> 	pop bp
  7137                              <2> 	mov word %3,[bp+4]
  7138                              <2> 	mov word %4,[bp+6]
  7139                              <2> 	stkclose 0x09
  7140                              <2> %endmacro
  7141                              <2> 
  7142                              <2> %macro __sinnorm 3
  7143                              <2> 	stkopen 0x06
  7144                              <2> 	mov word [bp+0],%1
  7145                              <2> 	mov word [bp+2],%2
  7146                              <2> 	call proc__sinnorm
  7147                              <2> 	push sp
  7148                              <2> 	pop bp
  7149                              <2> 	mov word %1,[bp+0]
  7150                              <2> 	mov word %2,[bp+2]
  7151                              <2> 	mov word %3,[bp+4]
  7152                              <2> 	stkclose 0x06
  7153                              <2> %endmacro
  7154                              <2> 
  7155                              <2> %macro __cosnorm 3
  7156                              <2> 	stkopen 0x06
  7157                              <2> 	mov word [bp+0],%1
  7158                              <2> 	mov word [bp+2],%2
  7159                              <2> 	call proc__cosnorm
  7160                              <2> 	push sp
  7161                              <2> 	pop bp
  7162                              <2> 	mov word %1,[bp+0]
  7163                              <2> 	mov word %2,[bp+2]
  7164                              <2> 	mov word %3,[bp+4]
  7165                              <2> 	stkclose 0x06
  7166                              <2> %endmacro
  7167                              <2> 
  7168                              <2> %macro __norm_factors 5
  7169                              <2> 	stkopen 0x0A
  7170                              <2> 	mov word [bp+0],%1
  7171                              <2> 	mov word [bp+2],%2
  7172                              <2> 	call proc__norm_factors
  7173                              <2> 	push sp
  7174                              <2> 	pop bp
  7175                              <2> 	mov word %3,[bp+4]
  7176                              <2> 	mov word %4,[bp+6]
  7177                              <2> 	mov word %5,[bp+8]
  7178                              <2> 	stkclose 0x0A
  7179                              <2> %endmacro
  7180                              <2> 
  7181                              <2> %macro __fat16 2
  7182                              <2> 	stkopen 0x04
  7183                              <2> 	mov word [bp+0],%1
  7184                              <2> 	call proc__fat16
  7185                              <2> 	push sp
  7186                              <2> 	pop bp
  7187                              <2> 	mov word %2, [bp+2]
  7188                              <2> 	stkclose 0x04
  7189                              <2> %endmacro
  7190                              <2> 
  7191                              <2> %macro __pow16 3
  7192                              <2> 	stkopen 0x06
  7193                              <2> 	mov word [bp+0],%1
  7194                              <2> 	mov word [bp+2],%2
  7195                              <2> 	call proc__pow16
  7196                              <2> 	push sp
  7197                              <2> 	pop bp
  7198                              <2> 	mov word %3, [bp+4]
  7199                              <2> 	stkclose 0x06
  7200                              <2> %endmacro
  7201                              <2> 	
  7202                              <2> section .data
  7203 00001563 DB0F4940            <2> 	PI: dd 0x40490FDB
  7204 00001567 00003443            <2> 	__180dg: dd 0x43340000
  7205                              <2> 	
  7206                              <2> proc_toradians:
  7207 0000156B 89E0                <2> 	mov ax,sp
  7208 0000156D 89C5                <2> 	mov bp,ax
  7209                              <2> 	
  7210 0000156F 8B4602              <2> 	mov ax,[bp+2]
  7211 00001572 8B5E04              <2> 	mov bx,[bp+4]		
  7212 00001575 B94940              <2> 	mov cx,0x4049
  7213 00001578 BADB0F              <2> 	mov dx,0x0FDB
  7214                              <2> 	__flmul ax, bx, cx, dx, ax, bx
  7215                              <3>  stkopen 0x0E
  7216 0000157B 83EC0E              <4>  sub word sp, %1
  7217 0000157E 54                  <4>  push sp
  7218 0000157F 5D                  <4>  pop bp
  7219 00001580 894600              <3>  mov word [bp+0],%1
  7220 00001583 895E02              <3>  mov word [bp+2],%2
  7221 00001586 894E04              <3>  mov word [bp+4],%3
  7222 00001589 895606              <3>  mov word [bp+6],%4
  7223 0000158C E8FAF7              <3>  call proc_flmul
  7224 0000158F 54                  <3>  push sp
  7225 00001590 5D                  <3>  pop bp
  7226 00001591 8B4608              <3>  mov word %5,[bp+8]
  7227 00001594 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7228                              <3>  stkclose 0x0E
  7229 00001597 83C40E              <4>  add word sp, %1
  7230 0000159A B93443              <2> 	mov cx,0x4334
  7231 0000159D BA0000              <2> 	mov dx,0x0000	
  7232                              <2> 	__fldiv ax, bx, cx, cx, ax, bx
  7233                              <3>  stkopen 0x0E
  7234 000015A0 83EC0E              <4>  sub word sp, %1
  7235 000015A3 54                  <4>  push sp
  7236 000015A4 5D                  <4>  pop bp
  7237 000015A5 894600              <3>  mov word [bp+0],%1
  7238 000015A8 895E02              <3>  mov word [bp+2],%2
  7239 000015AB 894E04              <3>  mov word [bp+4],%3
  7240 000015AE 894E06              <3>  mov word [bp+6],%4
  7241 000015B1 E8B6F6              <3>  call proc_fldiv
  7242 000015B4 54                  <3>  push sp
  7243 000015B5 5D                  <3>  pop bp
  7244 000015B6 8B4608              <3>  mov word %5,[bp+8]
  7245 000015B9 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7246                              <3>  stkclose 0x0E
  7247 000015BC 83C40E              <4>  add word sp, %1
  7248                              <2> 	
  7249 000015BF 89E1                <2> 	mov cx,sp
  7250 000015C1 89CD                <2> 	mov bp,cx
  7251 000015C3 894606              <2> 	mov [bp+6],ax
  7252 000015C6 895E08              <2> 	mov [bp+8],bx
  7253                              <2> 	
  7254 000015C9 C3                  <2> 	ret
  7255                              <2> 	
  7256                              <2> proc_todegrees:
  7257 000015CA 89E0                <2> 	mov ax,sp
  7258 000015CC 89C5                <2> 	mov bp,ax
  7259                              <2> 	
  7260 000015CE 8B4602              <2> 	mov ax,[bp+2]
  7261 000015D1 8B5E04              <2> 	mov bx,[bp+4]		
  7262 000015D4 B93443              <2> 	mov cx,0x4334
  7263 000015D7 BA0000              <2> 	mov dx,0x0000
  7264                              <2> 	__flmul ax, bx, cx, dx, ax, bx		
  7265                              <3>  stkopen 0x0E
  7266 000015DA 83EC0E              <4>  sub word sp, %1
  7267 000015DD 54                  <4>  push sp
  7268 000015DE 5D                  <4>  pop bp
  7269 000015DF 894600              <3>  mov word [bp+0],%1
  7270 000015E2 895E02              <3>  mov word [bp+2],%2
  7271 000015E5 894E04              <3>  mov word [bp+4],%3
  7272 000015E8 895606              <3>  mov word [bp+6],%4
  7273 000015EB E89BF7              <3>  call proc_flmul
  7274 000015EE 54                  <3>  push sp
  7275 000015EF 5D                  <3>  pop bp
  7276 000015F0 8B4608              <3>  mov word %5,[bp+8]
  7277 000015F3 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7278                              <3>  stkclose 0x0E
  7279 000015F6 83C40E              <4>  add word sp, %1
  7280 000015F9 B94940              <2> 	mov cx,0x4049
  7281 000015FC BADB0F              <2> 	mov dx,0x0FDB	
  7282                              <2> 	__fldiv ax, bx, cx, cx, ax, bx
  7283                              <3>  stkopen 0x0E
  7284 000015FF 83EC0E              <4>  sub word sp, %1
  7285 00001602 54                  <4>  push sp
  7286 00001603 5D                  <4>  pop bp
  7287 00001604 894600              <3>  mov word [bp+0],%1
  7288 00001607 895E02              <3>  mov word [bp+2],%2
  7289 0000160A 894E04              <3>  mov word [bp+4],%3
  7290 0000160D 894E06              <3>  mov word [bp+6],%4
  7291 00001610 E857F6              <3>  call proc_fldiv
  7292 00001613 54                  <3>  push sp
  7293 00001614 5D                  <3>  pop bp
  7294 00001615 8B4608              <3>  mov word %5,[bp+8]
  7295 00001618 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7296                              <3>  stkclose 0x0E
  7297 0000161B 83C40E              <4>  add word sp, %1
  7298                              <2> 	
  7299 0000161E 89E1                <2> 	mov cx,sp
  7300 00001620 89CD                <2> 	mov bp,cx
  7301 00001622 894606              <2> 	mov [bp+6],ax
  7302 00001625 895E08              <2> 	mov [bp+8],bx
  7303                              <2> 	
  7304 00001628 C3                  <2> 	ret
  7305                              <2> 
  7306                              <2> proc_sinorcos:
  7307 00001629 89E0                <2> 	mov ax,sp
  7308 0000162B 89C5                <2> 	mov bp,ax
  7309                              <2> 	
  7310 0000162D 8B4602              <2> 	mov ax,[bp+2]
  7311 00001630 8B5E04              <2> 	mov bx,[bp+4]
  7312 00001633 807E0A00            <2> 	cmp byte [bp+0x0A],0
  7313 00001637 741E                <2> 	jz .normcos
  7314                              <2> 		__sinnorm ax, bx, cx
  7315                              <3>  stkopen 0x06
  7316 00001639 83EC06              <4>  sub word sp, %1
  7317 0000163C 54                  <4>  push sp
  7318 0000163D 5D                  <4>  pop bp
  7319 0000163E 894600              <3>  mov word [bp+0],%1
  7320 00001641 895E02              <3>  mov word [bp+2],%2
  7321 00001644 E82303              <3>  call proc__sinnorm
  7322 00001647 54                  <3>  push sp
  7323 00001648 5D                  <3>  pop bp
  7324 00001649 8B4600              <3>  mov word %1,[bp+0]
  7325 0000164C 8B5E02              <3>  mov word %2,[bp+2]
  7326 0000164F 8B4E04              <3>  mov word %3,[bp+4]
  7327                              <3>  stkclose 0x06
  7328 00001652 83C406              <4>  add word sp, %1
  7329 00001655 EB1C                <2> 		jmp .endnorm
  7330                              <2> 	.normcos:
  7331                              <2> 		__cosnorm ax, bx, cx	
  7332                              <3>  stkopen 0x06
  7333 00001657 83EC06              <4>  sub word sp, %1
  7334 0000165A 54                  <4>  push sp
  7335 0000165B 5D                  <4>  pop bp
  7336 0000165C 894600              <3>  mov word [bp+0],%1
  7337 0000165F 895E02              <3>  mov word [bp+2],%2
  7338 00001662 E8AB03              <3>  call proc__cosnorm
  7339 00001665 54                  <3>  push sp
  7340 00001666 5D                  <3>  pop bp
  7341 00001667 8B4600              <3>  mov word %1,[bp+0]
  7342 0000166A 8B5E02              <3>  mov word %2,[bp+2]
  7343 0000166D 8B4E04              <3>  mov word %3,[bp+4]
  7344                              <3>  stkclose 0x06
  7345 00001670 83C406              <4>  add word sp, %1
  7346                              <2> 	.endnorm:
  7347                              <2> 	
  7348 00001673 51                  <2> 	push cx
  7349                              <2> 	
  7350 00001674 89E1                <2> 	mov cx,sp
  7351 00001676 89CD                <2> 	mov bp,cx
  7352 00001678 83C502              <2> 	add bp,2
  7353 0000167B 8A4E0A              <2> 	mov cl,[bp+0x0A]	
  7354                              <2> 	__sinorcos0x90 ax, bx, ax, bx, cl
  7355                              <3>  stkopen 0x09
  7356 0000167E 83EC09              <4>  sub word sp, %1
  7357 00001681 54                  <4>  push sp
  7358 00001682 5D                  <4>  pop bp
  7359 00001683 894600              <3>  mov word [bp+0],%1
  7360 00001686 895E02              <3>  mov word [bp+2],%2
  7361 00001689 884E08              <3>  mov byte [bp+8],%5
  7362 0000168C E82C00              <3>  call proc_sinorcos0x90
  7363 0000168F 54                  <3>  push sp
  7364 00001690 5D                  <3>  pop bp
  7365 00001691 8B4604              <3>  mov word %3,[bp+4]
  7366 00001694 8B5E06              <3>  mov word %4,[bp+6]
  7367                              <3>  stkclose 0x09
  7368 00001697 83C409              <4>  add word sp, %1
  7369 0000169A 89E1                <2> 	mov cx,sp
  7370 0000169C 89CD                <2> 	mov bp,cx
  7371 0000169E 83C502              <2> 	add bp,2	
  7372 000016A1 894606              <2> 	mov [bp+6],ax
  7373 000016A4 895E08              <2> 	mov [bp+8],bx
  7374                              <2> 			
  7375 000016A7 59                  <2> 	pop cx
  7376                              <2> 		
  7377 000016A8 89E2                <2> 	mov dx,sp
  7378 000016AA 89D5                <2> 	mov bp,dx
  7379                              <2> 		
  7380 000016AC 81F90080            <2> 	cmp cx,0x8000
  7381 000016B0 7405                <2> 	je .one
  7382 000016B2 214E06              <2> 		and word [bp+6],cx
  7383 000016B5 EB03                <2> 		jmp .endcmp
  7384                              <2> 	.one:
  7385 000016B7 094E06              <2> 		or word [bp+6],cx	
  7386                              <2> 	.endcmp:
  7387                              <2> 	
  7388 000016BA C3                  <2> 	ret
  7389                              <2> 	
  7390                              <2> proc_sinorcos0x90:
  7391 000016BB 89E1                <2> 	mov cx,sp
  7392 000016BD 89CD                <2> 	mov bp,cx
  7393                              <2> 
  7394 000016BF C746060000          <2> 	mov word [bp+6],0
  7395 000016C4 C746080000          <2> 	mov word [bp+8],0		
  7396                              <2> 	
  7397 000016C9 B90000              <2> 	mov cx,0
  7398                              <2> 	.l1:
  7399 000016CC 83F903              <2> 		cmp cx,0x03
  7400 000016CF 0F877301            <2> 		ja .l2		
  7401 000016D3 51                  <2> 		push cx
  7402                              <2> 		
  7403 000016D4 83E101              <2> 		and cx,0x0001
  7404 000016D7 83F900              <2> 		cmp cx,0
  7405 000016DA 7505                <2> 		jnz .neg
  7406 000016DC B80100              <2> 			mov ax,0x0001
  7407 000016DF EB03                <2> 			jmp .endneg
  7408                              <2> 		.neg:
  7409 000016E1 B8FFFF              <2> 			mov ax,0xFFFF
  7410                              <2> 		.endneg:
  7411                              <2> 				
  7412 000016E4 59                  <2> 		pop cx
  7413 000016E5 51                  <2> 		push cx
  7414 000016E6 50                  <2> 		push ax
  7415                              <2> 		
  7416 000016E7 BA0000              <2> 		mov dx,0
  7417 000016EA B80200              <2> 		mov ax,2
  7418 000016ED F7E1                <2> 		mul cx
  7419                              <2> 		
  7420 000016EF 89E2                <2> 		mov dx,sp
  7421 000016F1 89D5                <2> 		mov bp,dx
  7422 000016F3 83C504              <2> 		add bp,4		
  7423 000016F6 807E0A00            <2> 		cmp byte [bp+0x0A],0
  7424 000016FA 7401                <2> 		jz .incremented
  7425 000016FC 40                  <2> 			inc ax
  7426                              <2> 		.incremented:
  7427                              <2> 						
  7428                              <2> 		__fat16 ax, dx
  7429                              <3>  stkopen 0x04
  7430 000016FD 83EC04              <4>  sub word sp, %1
  7431 00001700 54                  <4>  push sp
  7432 00001701 5D                  <4>  pop bp
  7433 00001702 894600              <3>  mov word [bp+0],%1
  7434 00001705 E82302              <3>  call proc__fat16
  7435 00001708 54                  <3>  push sp
  7436 00001709 5D                  <3>  pop bp
  7437 0000170A 8B5602              <3>  mov word %2, [bp+2]
  7438                              <3>  stkclose 0x04
  7439 0000170D 83C404              <4>  add word sp, %1
  7440                              <2> 						
  7441 00001710 58                  <2> 		pop ax
  7442 00001711 52                  <2> 		push dx	
  7443                              <2> 		__int16to32 ax, cx, dx						
  7444                              <3>  stkopen 0x06
  7445 00001712 83EC06              <4>  sub word sp, %1
  7446 00001715 54                  <4>  push sp
  7447 00001716 5D                  <4>  pop bp
  7448 00001717 894600              <3>  mov word [bp+0],%1
  7449 0000171A E84EED              <3>  call proc_int16to32
  7450 0000171D 54                  <3>  push sp
  7451 0000171E 5D                  <3>  pop bp
  7452 0000171F 8B4E02              <3>  mov word %2, [bp+2]
  7453 00001722 8B5604              <3>  mov word %3, [bp+4]
  7454                              <3>  stkclose 0x06
  7455 00001725 83C406              <4>  add word sp, %1
  7456                              <2> 		__int32tofl cx, dx, ax, bx
  7457                              <3>  stkopen 0x08
  7458 00001728 83EC08              <4>  sub word sp, %1
  7459 0000172B 54                  <4>  push sp
  7460 0000172C 5D                  <4>  pop bp
  7461 0000172D 894E00              <3>  mov word [bp+0],%1
  7462 00001730 895602              <3>  mov word [bp+2],%2
  7463 00001733 E8B2F3              <3>  call proc_int32tofl
  7464 00001736 54                  <3>  push sp
  7465 00001737 5D                  <3>  pop bp
  7466 00001738 8B4604              <3>  mov word %3,[bp+4]
  7467 0000173B 8B5E06              <3>  mov word %4,[bp+6]
  7468                              <3>  stkclose 0x08
  7469 0000173E 83C408              <4>  add word sp, %1
  7470                              <2> 		
  7471 00001741 59                  <2> 		pop cx
  7472 00001742 50                  <2> 		push ax
  7473 00001743 53                  <2> 		push bx		
  7474                              <2> 		__int16to32 cx, ax, bx
  7475                              <3>  stkopen 0x06
  7476 00001744 83EC06              <4>  sub word sp, %1
  7477 00001747 54                  <4>  push sp
  7478 00001748 5D                  <4>  pop bp
  7479 00001749 894E00              <3>  mov word [bp+0],%1
  7480 0000174C E81CED              <3>  call proc_int16to32
  7481 0000174F 54                  <3>  push sp
  7482 00001750 5D                  <3>  pop bp
  7483 00001751 8B4602              <3>  mov word %2, [bp+2]
  7484 00001754 8B5E04              <3>  mov word %3, [bp+4]
  7485                              <3>  stkclose 0x06
  7486 00001757 83C406              <4>  add word sp, %1
  7487                              <2> 		__int32tofl ax, bx, cx, dx
  7488                              <3>  stkopen 0x08
  7489 0000175A 83EC08              <4>  sub word sp, %1
  7490 0000175D 54                  <4>  push sp
  7491 0000175E 5D                  <4>  pop bp
  7492 0000175F 894600              <3>  mov word [bp+0],%1
  7493 00001762 895E02              <3>  mov word [bp+2],%2
  7494 00001765 E880F3              <3>  call proc_int32tofl
  7495 00001768 54                  <3>  push sp
  7496 00001769 5D                  <3>  pop bp
  7497 0000176A 8B4E04              <3>  mov word %3,[bp+4]
  7498 0000176D 8B5606              <3>  mov word %4,[bp+6]
  7499                              <3>  stkclose 0x08
  7500 00001770 83C408              <4>  add word sp, %1
  7501                              <2> 		
  7502 00001773 5B                  <2> 		pop bx
  7503 00001774 58                  <2> 		pop ax
  7504                              <2> 		
  7505                              <2> 		__fldiv ax, bx, cx, dx, ax, bx
  7506                              <3>  stkopen 0x0E
  7507 00001775 83EC0E              <4>  sub word sp, %1
  7508 00001778 54                  <4>  push sp
  7509 00001779 5D                  <4>  pop bp
  7510 0000177A 894600              <3>  mov word [bp+0],%1
  7511 0000177D 895E02              <3>  mov word [bp+2],%2
  7512 00001780 894E04              <3>  mov word [bp+4],%3
  7513 00001783 895606              <3>  mov word [bp+6],%4
  7514 00001786 E8E1F4              <3>  call proc_fldiv
  7515 00001789 54                  <3>  push sp
  7516 0000178A 5D                  <3>  pop bp
  7517 0000178B 8B4608              <3>  mov word %5,[bp+8]
  7518 0000178E 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7519                              <3>  stkclose 0x0E
  7520 00001791 83C40E              <4>  add word sp, %1
  7521                              <2> 						
  7522 00001794 59                  <2> 		pop cx
  7523 00001795 51                  <2> 		push cx
  7524 00001796 50                  <2> 		push ax
  7525 00001797 53                  <2> 		push bx
  7526                              <2> 		
  7527 00001798 89E0                <2> 		mov ax,sp
  7528 0000179A 89C5                <2> 		mov bp,ax
  7529 0000179C 83C506              <2> 		add bp,6
  7530                              <2> 		
  7531 0000179F BA0000              <2> 		mov dx,0
  7532 000017A2 B80200              <2> 		mov ax,2
  7533 000017A5 F7E1                <2> 		mul cx
  7534                              <2> 				
  7535 000017A7 807E0A00            <2> 		cmp byte [bp+0x0A],0
  7536 000017AB 7401                <2> 		jz .incremented2
  7537 000017AD 40                  <2> 			inc ax
  7538                              <2> 		.incremented2:
  7539                              <2> 				
  7540 000017AE 89C1                <2> 		mov cx,ax														
  7541                              <2> 		
  7542 000017B0 B8803F              <2> 		mov ax,0x3F80
  7543 000017B3 BB0000              <2> 		mov bx,0
  7544                              <2> 		
  7545                              <2> 		.l1.1:
  7546 000017B6 83F900              <2> 			cmp cx,0
  7547 000017B9 742C                <2> 			jz .l1.2
  7548 000017BB 51                  <2> 			push cx
  7549                              <2> 			
  7550 000017BC 8B4E02              <2> 			mov cx,[bp+2]
  7551 000017BF 8B5604              <2> 			mov dx,[bp+4]
  7552 000017C2 55                  <2> 			push bp	
  7553                              <2> 			__flmul ax, bx, cx, dx, ax, bx
  7554                              <3>  stkopen 0x0E
  7555 000017C3 83EC0E              <4>  sub word sp, %1
  7556 000017C6 54                  <4>  push sp
  7557 000017C7 5D                  <4>  pop bp
  7558 000017C8 894600              <3>  mov word [bp+0],%1
  7559 000017CB 895E02              <3>  mov word [bp+2],%2
  7560 000017CE 894E04              <3>  mov word [bp+4],%3
  7561 000017D1 895606              <3>  mov word [bp+6],%4
  7562 000017D4 E8B2F5              <3>  call proc_flmul
  7563 000017D7 54                  <3>  push sp
  7564 000017D8 5D                  <3>  pop bp
  7565 000017D9 8B4608              <3>  mov word %5,[bp+8]
  7566 000017DC 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7567                              <3>  stkclose 0x0E
  7568 000017DF 83C40E              <4>  add word sp, %1
  7569 000017E2 5D                  <2> 			pop bp	
  7570                              <2> 							
  7571 000017E3 59                  <2> 			pop cx
  7572 000017E4 49                  <2> 			dec cx
  7573 000017E5 EBCF                <2> 			jmp .l1.1
  7574                              <2> 		.l1.2: 
  7575                              <2> 					
  7576 000017E7 5A                  <2> 		pop dx
  7577 000017E8 59                  <2> 		pop cx
  7578                              <2> 		
  7579                              <2> 		__flmul ax, bx, cx, dx, ax, bx
  7580                              <3>  stkopen 0x0E
  7581 000017E9 83EC0E              <4>  sub word sp, %1
  7582 000017EC 54                  <4>  push sp
  7583 000017ED 5D                  <4>  pop bp
  7584 000017EE 894600              <3>  mov word [bp+0],%1
  7585 000017F1 895E02              <3>  mov word [bp+2],%2
  7586 000017F4 894E04              <3>  mov word [bp+4],%3
  7587 000017F7 895606              <3>  mov word [bp+6],%4
  7588 000017FA E88CF5              <3>  call proc_flmul
  7589 000017FD 54                  <3>  push sp
  7590 000017FE 5D                  <3>  pop bp
  7591 000017FF 8B4608              <3>  mov word %5,[bp+8]
  7592 00001802 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7593                              <3>  stkclose 0x0E
  7594 00001805 83C40E              <4>  add word sp, %1
  7595                              <2> 						
  7596 00001808 89E1                <2> 		mov cx,sp
  7597 0000180A 89CD                <2> 		mov bp,cx
  7598 0000180C 83C502              <2> 		add bp,2
  7599                              <2> 		
  7600 0000180F 8B4E06              <2> 		mov cx,[bp+6]
  7601 00001812 8B5608              <2> 		mov dx,[bp+8]
  7602 00001815 55                  <2> 		push bp
  7603                              <2> 		__fladd ax, bx, cx, dx, ax, bx		
  7604                              <3>  stkopen 0x0E
  7605 00001816 83EC0E              <4>  sub word sp, %1
  7606 00001819 54                  <4>  push sp
  7607 0000181A 5D                  <4>  pop bp
  7608 0000181B 894600              <3>  mov word [bp+0],%1
  7609 0000181E 895E02              <3>  mov word [bp+2],%2
  7610 00001821 894E04              <3>  mov word [bp+4],%3
  7611 00001824 895606              <3>  mov word [bp+6],%4
  7612 00001827 C7460C0000          <3>  mov word [bp+0x0C],0
  7613 0000182C E806F7              <3>  call proc_fladdorsub
  7614 0000182F 54                  <3>  push sp
  7615 00001830 5D                  <3>  pop bp
  7616 00001831 8B4608              <3>  mov word %5,[bp+8]
  7617 00001834 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7618                              <3>  stkclose 0x0E
  7619 00001837 83C40E              <4>  add word sp, %1
  7620 0000183A 5D                  <2> 		pop bp			
  7621 0000183B 894606              <2> 		mov [bp+6],ax
  7622 0000183E 895E08              <2> 		mov [bp+8],bx
  7623                              <2> 				
  7624 00001841 59                  <2> 		pop cx
  7625 00001842 41                  <2> 		inc cx
  7626 00001843 E986FE              <2> 		jmp .l1
  7627                              <2> 	.l2:			
  7628                              <2> 	
  7629 00001846 C3                  <2> 	ret
  7630                              <2> 	
  7631                              <2> 
  7632                              <2> proc_atan:
  7633 00001847 89E0                <2> 	mov ax,sp
  7634 00001849 89C5                <2> 	mov bp,ax 
  7635                              <2> 
  7636 0000184B C746060000          <2> 	mov word [bp+6],0
  7637 00001850 C746080000          <2> 	mov word [bp+8],0		
  7638                              <2> 	
  7639 00001855 B90000              <2> 	mov cx,0
  7640                              <2> 	.l1:
  7641 00001858 83F903              <2> 		cmp cx,0x03
  7642 0000185B 0F87CB00            <2> 		ja .l2		
  7643 0000185F 51                  <2> 		push cx
  7644                              <2> 		
  7645 00001860 D1E1                <2> 		shl cx,1
  7646 00001862 41                  <2> 		inc cx
  7647 00001863 51                  <2> 		push cx
  7648                              <2> 								
  7649 00001864 B8803F              <2> 		mov ax,0x3F80	; 1.0 (alta)
  7650 00001867 BB0000              <2> 		mov bx,0x0000	; 1.0 (baixa)				
  7651                              <2> 		.l1.1:
  7652 0000186A 83F900              <2> 			cmp cx,0
  7653 0000186D 742C                <2> 			jz .l1.2
  7654 0000186F 51                  <2> 			push cx
  7655                              <2> 			
  7656 00001870 8B4E02              <2> 			mov cx,[bp+2]
  7657 00001873 8B5604              <2> 			mov dx,[bp+4]
  7658 00001876 55                  <2> 			push bp	
  7659                              <2> 			__flmul ax, bx, cx, dx, ax, bx
  7660                              <3>  stkopen 0x0E
  7661 00001877 83EC0E              <4>  sub word sp, %1
  7662 0000187A 54                  <4>  push sp
  7663 0000187B 5D                  <4>  pop bp
  7664 0000187C 894600              <3>  mov word [bp+0],%1
  7665 0000187F 895E02              <3>  mov word [bp+2],%2
  7666 00001882 894E04              <3>  mov word [bp+4],%3
  7667 00001885 895606              <3>  mov word [bp+6],%4
  7668 00001888 E8FEF4              <3>  call proc_flmul
  7669 0000188B 54                  <3>  push sp
  7670 0000188C 5D                  <3>  pop bp
  7671 0000188D 8B4608              <3>  mov word %5,[bp+8]
  7672 00001890 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7673                              <3>  stkclose 0x0E
  7674 00001893 83C40E              <4>  add word sp, %1
  7675 00001896 5D                  <2> 			pop bp	
  7676                              <2> 							
  7677 00001897 59                  <2> 			pop cx
  7678 00001898 49                  <2> 			dec cx
  7679 00001899 EBCF                <2> 			jmp .l1.1
  7680                              <2> 		.l1.2:			
  7681                              <2> 		
  7682 0000189B 59                  <2> 		pop cx	
  7683 0000189C 50                  <2> 		push ax
  7684 0000189D 53                  <2> 		push bx
  7685                              <2> 				
  7686 0000189E 55                  <2> 		push bp
  7687                              <2> 		__int16tofl cx, cx, dx
  7688                              <3>  stkopen 0x06
  7689 0000189F 83EC06              <4>  sub word sp, %1
  7690 000018A2 54                  <4>  push sp
  7691 000018A3 5D                  <4>  pop bp
  7692 000018A4 894E00              <3>  mov word [bp+0],%1
  7693 000018A7 E888F1              <3>  call proc_int16tofl
  7694 000018AA 54                  <3>  push sp
  7695 000018AB 5D                  <3>  pop bp
  7696 000018AC 8B4E02              <3>  mov word %2,[bp+2]
  7697 000018AF 8B5604              <3>  mov word %3,[bp+4]
  7698                              <3>  stkclose 0x06
  7699 000018B2 83C406              <4>  add word sp, %1
  7700 000018B5 5D                  <2> 		pop bp
  7701                              <2> 		
  7702 000018B6 5B                  <2> 		pop bx
  7703 000018B7 58                  <2> 		pop ax
  7704                              <2> 		
  7705 000018B8 55                  <2> 		push bp	
  7706                              <2> 		__fldiv ax, bx, cx, dx, ax, bx
  7707                              <3>  stkopen 0x0E
  7708 000018B9 83EC0E              <4>  sub word sp, %1
  7709 000018BC 54                  <4>  push sp
  7710 000018BD 5D                  <4>  pop bp
  7711 000018BE 894600              <3>  mov word [bp+0],%1
  7712 000018C1 895E02              <3>  mov word [bp+2],%2
  7713 000018C4 894E04              <3>  mov word [bp+4],%3
  7714 000018C7 895606              <3>  mov word [bp+6],%4
  7715 000018CA E89DF3              <3>  call proc_fldiv
  7716 000018CD 54                  <3>  push sp
  7717 000018CE 5D                  <3>  pop bp
  7718 000018CF 8B4608              <3>  mov word %5,[bp+8]
  7719 000018D2 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7720                              <3>  stkclose 0x0E
  7721 000018D5 83C40E              <4>  add word sp, %1
  7722 000018D8 5D                  <2> 		pop bp
  7723                              <2> 				
  7724 000018D9 59                  <2> 		pop cx
  7725 000018DA 51                  <2> 		push cx		
  7726 000018DB 83E101              <2> 		and cx,0x0001
  7727 000018DE 83F900              <2> 		cmp cx,0
  7728 000018E1 7410                <2> 		jz .endneg
  7729 000018E3 89C1                <2> 			mov cx,ax	
  7730 000018E5 83C900              <2> 			or cx, 0x0000
  7731 000018E8 F7D1                <2> 			not cx
  7732 000018EA 81E10080            <2> 			and cx,0x8000								
  7733 000018EE 25FF7F              <2> 			and ax,0x7FFF			
  7734 000018F1 01C8                <2> 			add ax,cx
  7735                              <2> 		.endneg:
  7736                              <2> 				
  7737 000018F3 8B4E06              <2> 		mov cx,[bp+6]
  7738 000018F6 8B5608              <2> 		mov dx,[bp+8]
  7739 000018F9 55                  <2> 		push bp		
  7740                              <2> 		__fladd ax, bx, cx, dx, ax, bx
  7741                              <3>  stkopen 0x0E
  7742 000018FA 83EC0E              <4>  sub word sp, %1
  7743 000018FD 54                  <4>  push sp
  7744 000018FE 5D                  <4>  pop bp
  7745 000018FF 894600              <3>  mov word [bp+0],%1
  7746 00001902 895E02              <3>  mov word [bp+2],%2
  7747 00001905 894E04              <3>  mov word [bp+4],%3
  7748 00001908 895606              <3>  mov word [bp+6],%4
  7749 0000190B C7460C0000          <3>  mov word [bp+0x0C],0
  7750 00001910 E822F6              <3>  call proc_fladdorsub
  7751 00001913 54                  <3>  push sp
  7752 00001914 5D                  <3>  pop bp
  7753 00001915 8B4608              <3>  mov word %5,[bp+8]
  7754 00001918 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7755                              <3>  stkclose 0x0E
  7756 0000191B 83C40E              <4>  add word sp, %1
  7757 0000191E 5D                  <2> 		pop bp
  7758 0000191F 894606              <2> 		mov [bp+6], ax
  7759 00001922 895E08              <2> 		mov [bp+8], bx
  7760                              <2> 				
  7761 00001925 59                  <2> 		pop cx
  7762 00001926 41                  <2> 		inc cx
  7763 00001927 E92EFF              <2> 		jmp .l1
  7764                              <2> 	.l2:
  7765                              <2> 		
  7766 0000192A C3                  <2> 	ret
  7767                              <2> 	
  7768                              <2> proc__fat16:
  7769 0000192B 89E0                <2> 	mov ax,sp
  7770 0000192D 89C5                <2> 	mov bp,ax
  7771                              <2> 	
  7772 0000192F B90100              <2> 	mov cx,1
  7773 00001932 C746040100          <2> 	mov word [bp+4], 1
  7774                              <2> 	.l1:
  7775 00001937 3B4E02              <2> 		cmp word cx,[bp+2]
  7776 0000193A 770D                <2> 		ja .l2
  7777                              <2> 		
  7778 0000193C 31D2                <2> 		xor dx,dx
  7779 0000193E 8B4604              <2> 		mov ax,[bp+4]
  7780 00001941 F7E9                <2> 		imul cx
  7781                              <2> 		
  7782 00001943 894604              <2> 		mov [bp+4],ax
  7783                              <2> 		
  7784 00001946 41                  <2> 		inc cx
  7785 00001947 EBEE                <2> 		jmp .l1
  7786                              <2> 	.l2:
  7787                              <2> 	
  7788 00001949 C3                  <2> 	ret
  7789                              <2> 		
  7790                              <2> proc__pow16:
  7791 0000194A 89E0                <2> 	mov ax,sp
  7792 0000194C 89C5                <2> 	mov bp,ax
  7793                              <2> 	
  7794 0000194E 8B4E04              <2> 	mov cx,[bp+4]
  7795 00001951 C746060100          <2> 	mov word [bp+6], 1	
  7796                              <2> 	.l1:
  7797 00001956 83F900              <2> 		cmp cx,0
  7798 00001959 740E                <2> 		jz .l2
  7799                              <2> 		
  7800 0000195B 31D2                <2> 		xor dx,dx
  7801 0000195D 8B4602              <2> 		mov ax,[bp+2]
  7802 00001960 F76E06              <2> 		imul word [bp+6]
  7803                              <2> 		
  7804 00001963 894606              <2> 		mov [bp+6],ax
  7805                              <2> 		
  7806 00001966 49                  <2> 		dec cx
  7807 00001967 EBED                <2> 		jmp .l1
  7808                              <2> 	.l2:
  7809                              <2> 		
  7810 00001969 C3                  <2> 	ret
  7811                              <2> 	
  7812                              <2> proc__sinnorm:
  7813 0000196A 89E0                <2> 	mov ax,sp
  7814 0000196C 89C5                <2> 	mov bp,ax
  7815                              <2> 	
  7816 0000196E 8B4602              <2> 	mov ax,[bp+2]
  7817 00001971 8B5E04              <2> 	mov bx,[bp+4]
  7818                              <2> 	
  7819                              <2> 	__norm_factors ax, bx, ax, bx, cx
  7820                              <3>  stkopen 0x0A
  7821 00001974 83EC0A              <4>  sub word sp, %1
  7822 00001977 54                  <4>  push sp
  7823 00001978 5D                  <4>  pop bp
  7824 00001979 894600              <3>  mov word [bp+0],%1
  7825 0000197C 895E02              <3>  mov word [bp+2],%2
  7826 0000197F E83601              <3>  call proc__norm_factors
  7827 00001982 54                  <3>  push sp
  7828 00001983 5D                  <3>  pop bp
  7829 00001984 8B4604              <3>  mov word %3,[bp+4]
  7830 00001987 8B5E06              <3>  mov word %4,[bp+6]
  7831 0000198A 8B4E08              <3>  mov word %5,[bp+8]
  7832                              <3>  stkclose 0x0A
  7833 0000198D 83C40A              <4>  add word sp, %1
  7834                              <2> 
  7835 00001990 51                  <2> 	push cx	; factor (phi/PI)
  7836                              <2> 		
  7837 00001991 B9C93F              <2> 	mov cx,0x3FC9 ; PI/2 (high)
  7838 00001994 BADB0F              <2> 	mov dx,0x0FDB ; PI/2 (low)
  7839                              <2> 	
  7840 00001997 50                  <2> 	push ax
  7841 00001998 53                  <2> 	push bx
  7842                              <2> 	__cmp32 ax, bx, cx, dx, cl
  7843                              <3>  stkopen 9
  7844 00001999 83EC09              <4>  sub word sp, %1
  7845 0000199C 54                  <4>  push sp
  7846 0000199D 5D                  <4>  pop bp
  7847 0000199E 894600              <3>  mov word [bp+0], %1
  7848 000019A1 895E02              <3>  mov word [bp+2], %2
  7849 000019A4 894E04              <3>  mov word [bp+4], %3
  7850 000019A7 895606              <3>  mov word [bp+6], %4
  7851 000019AA E8DEED              <3>  call proc_cmp32
  7852 000019AD 54                  <3>  push sp
  7853 000019AE 5D                  <3>  pop bp
  7854 000019AF 8A4E08              <3>  mov byte %5, [bp+8]
  7855                              <3>  stkclose 9
  7856 000019B2 83C409              <4>  add word sp, %1
  7857 000019B5 5B                  <2> 	pop bx
  7858 000019B6 58                  <2> 	pop ax
  7859 000019B7 80F900              <2> 	cmp cl,0
  7860 000019BA 7E2A                <2> 	jle .l1
  7861 000019BC B94940              <2> 		mov cx,0x4049 ; PI (high)
  7862 000019BF BADB0F              <2> 		mov dx,0x0FDB ; PI (low)
  7863                              <2> 		__flsub cx, dx, ax, bx, ax, bx				
  7864                              <3>  stkopen 0x0E
  7865 000019C2 83EC0E              <4>  sub word sp, %1
  7866 000019C5 54                  <4>  push sp
  7867 000019C6 5D                  <4>  pop bp
  7868 000019C7 894E00              <3>  mov word [bp+0],%1
  7869 000019CA 895602              <3>  mov word [bp+2],%2
  7870 000019CD 894604              <3>  mov word [bp+4],%3
  7871 000019D0 895E06              <3>  mov word [bp+6],%4
  7872 000019D3 C7460C0080          <3>  mov word [bp+0x0C],0x8000
  7873 000019D8 E85AF5              <3>  call proc_fladdorsub
  7874 000019DB 54                  <3>  push sp
  7875 000019DC 5D                  <3>  pop bp
  7876 000019DD 8B4608              <3>  mov word %5,[bp+8]
  7877 000019E0 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7878                              <3>  stkclose 0x0E
  7879 000019E3 83C40E              <4>  add word sp, %1
  7880                              <2> 	.l1:
  7881                              <2> 				
  7882 000019E6 59                  <2> 	pop cx
  7883                              <2> 
  7884 000019E7 89E2                <2> 	mov dx,sp
  7885 000019E9 89D5                <2> 	mov bp,dx
  7886 000019EB 8B5602              <2> 	mov dx,[bp+2]
  7887 000019EE 81E20080            <2> 	and dx,0x8000
  7888                              <2> 		
  7889 000019F2 83FA00              <2> 	cmp dx,0
  7890 000019F5 7D01                <2> 	jge .l2
  7891 000019F7 41                  <2> 		inc cx		
  7892                              <2> 	.l2:	
  7893                              <2> 			
  7894 000019F8 BAFF7F              <2> 	mov dx,0x7FFF
  7895 000019FB 83E101              <2> 	and cx,0x0001
  7896 000019FE 83F900              <2> 	cmp cx,0
  7897 00001A01 7403                <2> 	jz .l3
  7898 00001A03 BA0080              <2> 		mov dx,0x8000
  7899                              <2> 	.l3:
  7900                              <2> 					
  7901 00001A06 894602              <2> 	mov [bp+2],ax
  7902 00001A09 895E04              <2> 	mov [bp+4],bx
  7903 00001A0C 895606              <2> 	mov [bp+6],dx
  7904                              <2> 	
  7905 00001A0F C3                  <2> 	ret	
  7906                              <2> 	
  7907                              <2> proc__cosnorm:
  7908 00001A10 89E0                <2> 	mov ax,sp
  7909 00001A12 89C5                <2> 	mov bp,ax
  7910                              <2> 	
  7911 00001A14 8B4602              <2> 	mov ax,[bp+2]
  7912 00001A17 8B5E04              <2> 	mov bx,[bp+4]
  7913                              <2> 	
  7914                              <2> 	__norm_factors ax, bx, ax, bx, cx
  7915                              <3>  stkopen 0x0A
  7916 00001A1A 83EC0A              <4>  sub word sp, %1
  7917 00001A1D 54                  <4>  push sp
  7918 00001A1E 5D                  <4>  pop bp
  7919 00001A1F 894600              <3>  mov word [bp+0],%1
  7920 00001A22 895E02              <3>  mov word [bp+2],%2
  7921 00001A25 E89000              <3>  call proc__norm_factors
  7922 00001A28 54                  <3>  push sp
  7923 00001A29 5D                  <3>  pop bp
  7924 00001A2A 8B4604              <3>  mov word %3,[bp+4]
  7925 00001A2D 8B5E06              <3>  mov word %4,[bp+6]
  7926 00001A30 8B4E08              <3>  mov word %5,[bp+8]
  7927                              <3>  stkclose 0x0A
  7928 00001A33 83C40A              <4>  add word sp, %1
  7929                              <2> 
  7930 00001A36 51                  <2> 	push cx		; fator2 (phi/PI)
  7931                              <2> 	
  7932 00001A37 B9C93F              <2> 	mov cx,0x3FC9 ; PI/2 (high)
  7933 00001A3A BADB0F              <2> 	mov dx,0x0FDB ; PI/2 (low)
  7934                              <2> 		
  7935 00001A3D 50                  <2> 	push ax
  7936 00001A3E 53                  <2> 	push bx
  7937                              <2> 	__cmp32 ax, bx, cx, dx, cl
  7938                              <3>  stkopen 9
  7939 00001A3F 83EC09              <4>  sub word sp, %1
  7940 00001A42 54                  <4>  push sp
  7941 00001A43 5D                  <4>  pop bp
  7942 00001A44 894600              <3>  mov word [bp+0], %1
  7943 00001A47 895E02              <3>  mov word [bp+2], %2
  7944 00001A4A 894E04              <3>  mov word [bp+4], %3
  7945 00001A4D 895606              <3>  mov word [bp+6], %4
  7946 00001A50 E838ED              <3>  call proc_cmp32
  7947 00001A53 54                  <3>  push sp
  7948 00001A54 5D                  <3>  pop bp
  7949 00001A55 8A4E08              <3>  mov byte %5, [bp+8]
  7950                              <3>  stkclose 9
  7951 00001A58 83C409              <4>  add word sp, %1
  7952 00001A5B 5B                  <2> 	pop bx
  7953 00001A5C 58                  <2> 	pop ax
  7954                              <2> 		
  7955 00001A5D 51                  <2> 	push cx
  7956 00001A5E 80F900              <2> 	cmp cl,0
  7957 00001A61 7E2A                <2> 	jle .l1
  7958 00001A63 B94940              <2> 		mov cx,0x4049 ; PI (high)
  7959 00001A66 BADB0F              <2> 		mov dx,0x0FDB ; PI (low)
  7960                              <2> 		__flsub cx, dx, ax, bx, ax, bx	
  7961                              <3>  stkopen 0x0E
  7962 00001A69 83EC0E              <4>  sub word sp, %1
  7963 00001A6C 54                  <4>  push sp
  7964 00001A6D 5D                  <4>  pop bp
  7965 00001A6E 894E00              <3>  mov word [bp+0],%1
  7966 00001A71 895602              <3>  mov word [bp+2],%2
  7967 00001A74 894604              <3>  mov word [bp+4],%3
  7968 00001A77 895E06              <3>  mov word [bp+6],%4
  7969 00001A7A C7460C0080          <3>  mov word [bp+0x0C],0x8000
  7970 00001A7F E8B3F4              <3>  call proc_fladdorsub
  7971 00001A82 54                  <3>  push sp
  7972 00001A83 5D                  <3>  pop bp
  7973 00001A84 8B4608              <3>  mov word %5,[bp+8]
  7974 00001A87 8B5E0A              <3>  mov word %6,[bp+0x0A]
  7975                              <3>  stkclose 0x0E
  7976 00001A8A 83C40E              <4>  add word sp, %1
  7977                              <2> 	.l1:
  7978                              <2> 						
  7979 00001A8D 59                  <2> 	pop cx	; quadrante2 (true, false)
  7980 00001A8E 5A                  <2> 	pop dx	; fator2 (phi/PI)
  7981                              <2> 
  7982 00001A8F 54                  <2> 	push sp
  7983 00001A90 5D                  <2> 	pop bp		
  7984 00001A91 894602              <2> 	mov [bp+2],ax	
  7985 00001A94 895E04              <2> 	mov [bp+4],bx
  7986                              <2> 	
  7987 00001A97 B8FF7F              <2> 	mov ax,0x7FFF
  7988                              <2> 	
  7989 00001A9A 83E201              <2> 	and dx,0x0001
  7990 00001A9D 83FA00              <2> 	cmp dx,0
  7991 00001AA0 750A                <2> 	jnz .fimpar
  7992 00001AA2 80F900              <2> 		cmp cl,0
  7993 00001AA5 7C0D                <2> 		jl .endf		
  7994 00001AA7 B80080              <2> 			mov ax,0x8000			
  7995 00001AAA EB08                <2> 		jmp .endf
  7996                              <2> 	.fimpar:		
  7997 00001AAC 80F900              <2> 		cmp cl,0
  7998 00001AAF 7D03                <2> 		jge .endf
  7999 00001AB1 B80080              <2> 			mov ax,0x8000
  8000                              <2> 	.endf:		
  8001                              <2> 						
  8002 00001AB4 894606              <2> 	mov word [bp+6],ax
  8003                              <2> 	
  8004 00001AB7 C3                  <2> 	ret
  8005                              <2> 	
  8006                              <2> proc__norm_factors: ; f1=(phi%PI) --> float 32bits, f2=(phi/PI) --> int 16bits
  8007 00001AB8 89E0                <2> 	mov ax,sp
  8008 00001ABA 89C5                <2> 	mov bp,ax
  8009                              <2> 	
  8010 00001ABC 8B4602              <2> 	mov ax,[bp+2]
  8011 00001ABF 8B5E04              <2> 	mov bx,[bp+4]	
  8012 00001AC2 25FF7F              <2> 	and ax,0x7FFF
  8013                              <2> 		
  8014 00001AC5 B94940              <2> 	mov cx,0x4049 ; PI (high)
  8015 00001AC8 BADB0F              <2> 	mov dx,0x0FDB ; PI (low)
  8016                              <2> 
  8017 00001ACB 55                  <2> 	push bp
  8018                              <2> 	__fldiv ax, bx, cx, dx, ax, bx		
  8019                              <3>  stkopen 0x0E
  8020 00001ACC 83EC0E              <4>  sub word sp, %1
  8021 00001ACF 54                  <4>  push sp
  8022 00001AD0 5D                  <4>  pop bp
  8023 00001AD1 894600              <3>  mov word [bp+0],%1
  8024 00001AD4 895E02              <3>  mov word [bp+2],%2
  8025 00001AD7 894E04              <3>  mov word [bp+4],%3
  8026 00001ADA 895606              <3>  mov word [bp+6],%4
  8027 00001ADD E88AF1              <3>  call proc_fldiv
  8028 00001AE0 54                  <3>  push sp
  8029 00001AE1 5D                  <3>  pop bp
  8030 00001AE2 8B4608              <3>  mov word %5,[bp+8]
  8031 00001AE5 8B5E0A              <3>  mov word %6,[bp+0x0A]
  8032                              <3>  stkclose 0x0E
  8033 00001AE8 83C40E              <4>  add word sp, %1
  8034                              <2> 	__fltoint32 ax, bx, ax, bx	
  8035                              <3>  stkopen 0x08
  8036 00001AEB 83EC08              <4>  sub word sp, %1
  8037 00001AEE 54                  <4>  push sp
  8038 00001AEF 5D                  <4>  pop bp
  8039 00001AF0 894600              <3>  mov word [bp+0],%1
  8040 00001AF3 895E02              <3>  mov word [bp+2],%2
  8041 00001AF6 E87AEF              <3>  call proc_fltoint32
  8042 00001AF9 54                  <3>  push sp
  8043 00001AFA 5D                  <3>  pop bp
  8044 00001AFB 8B4604              <3>  mov word %3,[bp+4]
  8045 00001AFE 8B5E06              <3>  mov word %4,[bp+6]
  8046                              <3>  stkclose 0x08
  8047 00001B01 83C408              <4>  add word sp, %1
  8048                              <2> 	__int32to16 ax, bx, ax
  8049                              <3>  stkopen 0x06
  8050 00001B04 83EC06              <4>  sub word sp, %1
  8051 00001B07 54                  <4>  push sp
  8052 00001B08 5D                  <4>  pop bp
  8053 00001B09 894600              <3>  mov word [bp+0], %1
  8054 00001B0C 895E02              <3>  mov word [bp+2], %2
  8055 00001B0F E881E9              <3>  call proc_int32to16
  8056 00001B12 54                  <3>  push sp
  8057 00001B13 5D                  <3>  pop bp
  8058 00001B14 8B4604              <3>  mov word %3, [bp+4]
  8059                              <3>  stkclose 0x06
  8060 00001B17 83C406              <4>  add word sp, %1
  8061 00001B1A 5D                  <2> 	pop bp
  8062                              <2> 		
  8063 00001B1B 50                  <2> 	push ax		; fator
  8064                              <2> 		
  8065 00001B1C 55                  <2> 	push bp
  8066                              <2> 	__int16to32	ax, ax, bx
  8067                              <3>  stkopen 0x06
  8068 00001B1D 83EC06              <4>  sub word sp, %1
  8069 00001B20 54                  <4>  push sp
  8070 00001B21 5D                  <4>  pop bp
  8071 00001B22 894600              <3>  mov word [bp+0],%1
  8072 00001B25 E843E9              <3>  call proc_int16to32
  8073 00001B28 54                  <3>  push sp
  8074 00001B29 5D                  <3>  pop bp
  8075 00001B2A 8B4602              <3>  mov word %2, [bp+2]
  8076 00001B2D 8B5E04              <3>  mov word %3, [bp+4]
  8077                              <3>  stkclose 0x06
  8078 00001B30 83C406              <4>  add word sp, %1
  8079                              <2> 	__int32tofl ax, bx, ax, bx	
  8080                              <3>  stkopen 0x08
  8081 00001B33 83EC08              <4>  sub word sp, %1
  8082 00001B36 54                  <4>  push sp
  8083 00001B37 5D                  <4>  pop bp
  8084 00001B38 894600              <3>  mov word [bp+0],%1
  8085 00001B3B 895E02              <3>  mov word [bp+2],%2
  8086 00001B3E E8A7EF              <3>  call proc_int32tofl
  8087 00001B41 54                  <3>  push sp
  8088 00001B42 5D                  <3>  pop bp
  8089 00001B43 8B4604              <3>  mov word %3,[bp+4]
  8090 00001B46 8B5E06              <3>  mov word %4,[bp+6]
  8091                              <3>  stkclose 0x08
  8092 00001B49 83C408              <4>  add word sp, %1
  8093                              <2> 	
  8094 00001B4C B94940              <2> 	mov cx,0x4049 ; PI (high)
  8095 00001B4F BADB0F              <2> 	mov dx,0x0FDB ; PI (low)
  8096                              <2> 	__flmul ax, bx, cx, dx, ax, bx		
  8097                              <3>  stkopen 0x0E
  8098 00001B52 83EC0E              <4>  sub word sp, %1
  8099 00001B55 54                  <4>  push sp
  8100 00001B56 5D                  <4>  pop bp
  8101 00001B57 894600              <3>  mov word [bp+0],%1
  8102 00001B5A 895E02              <3>  mov word [bp+2],%2
  8103 00001B5D 894E04              <3>  mov word [bp+4],%3
  8104 00001B60 895606              <3>  mov word [bp+6],%4
  8105 00001B63 E823F2              <3>  call proc_flmul
  8106 00001B66 54                  <3>  push sp
  8107 00001B67 5D                  <3>  pop bp
  8108 00001B68 8B4608              <3>  mov word %5,[bp+8]
  8109 00001B6B 8B5E0A              <3>  mov word %6,[bp+0x0A]
  8110                              <3>  stkclose 0x0E
  8111 00001B6E 83C40E              <4>  add word sp, %1
  8112 00001B71 5D                  <2> 	pop bp
  8113                              <2> 	
  8114 00001B72 8B4E02              <2> 	mov cx,[bp+2]
  8115 00001B75 8B5604              <2> 	mov dx,[bp+4]
  8116 00001B78 81E1FF7F            <2> 	and cx,0x7FFF
  8117                              <2> 		
  8118                              <2> 	__flsub cx, dx, ax, bx, ax, bx 			; theta -> ax bx
  8119                              <3>  stkopen 0x0E
  8120 00001B7C 83EC0E              <4>  sub word sp, %1
  8121 00001B7F 54                  <4>  push sp
  8122 00001B80 5D                  <4>  pop bp
  8123 00001B81 894E00              <3>  mov word [bp+0],%1
  8124 00001B84 895602              <3>  mov word [bp+2],%2
  8125 00001B87 894604              <3>  mov word [bp+4],%3
  8126 00001B8A 895E06              <3>  mov word [bp+6],%4
  8127 00001B8D C7460C0080          <3>  mov word [bp+0x0C],0x8000
  8128 00001B92 E8A0F3              <3>  call proc_fladdorsub
  8129 00001B95 54                  <3>  push sp
  8130 00001B96 5D                  <3>  pop bp
  8131 00001B97 8B4608              <3>  mov word %5,[bp+8]
  8132 00001B9A 8B5E0A              <3>  mov word %6,[bp+0x0A]
  8133                              <3>  stkclose 0x0E
  8134 00001B9D 83C40E              <4>  add word sp, %1
  8135                              <2> 	
  8136 00001BA0 59                  <2> 	pop cx				
  8137                              <2> 		
  8138 00001BA1 89E2                <2> 	mov dx,sp
  8139 00001BA3 89D5                <2> 	mov bp,dx	
  8140 00001BA5 894606              <2> 	mov [bp+6],ax
  8141 00001BA8 895E08              <2> 	mov [bp+8],bx
  8142 00001BAB 894E0A              <2> 	mov [bp+0x0A],cx
  8143                              <2> 		
  8144 00001BAE C3                  <2> 	ret
  8145                              <2> 	
  8146                              <2> %endif
  8147                              <1> 
  8148                              <1> %macro toradians 1
  8149                              <1> 	toradians %1, %1
  8150                              <1> %endmacro
  8151                              <1> 
  8152                              <1> %macro todegrees 1
  8153                              <1> 	todegrees %1, %1
  8154                              <1> %endmacro
  8155                              <1> 
  8156                              <1> %macro toradians 2
  8157                              <1> 	toradians cs, %1, cs, %2
  8158                              <1> %endmacro
  8159                              <1> 	
  8160                              <1> %macro todegrees 2
  8161                              <1> 	todegrees cs, %1, cs, %2
  8162                              <1> %endmacro	
  8163                              <1> 	
  8164                              <1> %macro atan 1
  8165                              <1> 	atan %1, %1
  8166                              <1> %endmacro	
  8167                              <1> 	
  8168                              <1> %macro atan 2
  8169                              <1> 	atan cs, %1, cs, %2
  8170                              <1> %endmacro	
  8171                              <1> 	
  8172                              <1> %macro sin 1
  8173                              <1> 	sin %1, %1
  8174                              <1> %endmacro	
  8175                              <1> 	
  8176                              <1> %macro sin 2
  8177                              <1> 	sin cs, %1, cs, %2
  8178                              <1> %endmacro
  8179                              <1> 
  8180                              <1> %macro cos 1
  8181                              <1> 	cos %1, %1
  8182                              <1> %endmacro	
  8183                              <1> 	
  8184                              <1> %macro cos 2
  8185                              <1> 	cos cs, %1, cs, %2
  8186                              <1> %endmacro		
  8187                              <1> 	
  8188                              <1> %macro sin 4
  8189                              <1> 	sinorcos %1, %2, %3, %4, 1
  8190                              <1> %endmacro
  8191                              <1> 
  8192                              <1> %macro cos 4
  8193                              <1> 	sinorcos %1, %2, %3, %4, 0
  8194                              <1> %endmacro
  8195                              <1> 
  8196                              <1> %macro toradians 4
  8197                              <1> 	stkopen 0x08
  8198                              <1> 	mov ax,%1
  8199                              <1> 	mov ds,ax
  8200                              <1> 	mov ax,[%2+2]
  8201                              <1> 	mov [bp+0],ax
  8202                              <1> 	mov ax,[%2]
  8203                              <1> 	mov [bp+2],ax
  8204                              <1> 	call proc_toradians
  8205                              <1> 	mov ax,sp
  8206                              <1> 	mov bp,ax
  8207                              <1> 	mov ax,%3
  8208                              <1> 	mov ds,ax
  8209                              <1> 	mov ax,[bp+4]
  8210                              <1> 	mov [%4+2],ax
  8211                              <1> 	mov ax,[bp+6]
  8212                              <1> 	mov [%4],ax
  8213                              <1> 	stkclose 0x08
  8214                              <1> %endmacro	
  8215                              <1> 
  8216                              <1> %macro todegrees 4
  8217                              <1> 	stkopen 0x08
  8218                              <1> 	mov ax,%1
  8219                              <1> 	mov ds,ax
  8220                              <1> 	mov ax,[%2+2]
  8221                              <1> 	mov [bp+0],ax
  8222                              <1> 	mov ax,[%2]
  8223                              <1> 	mov [bp+2],ax
  8224                              <1> 	call proc_todegrees
  8225                              <1> 	mov ax,sp
  8226                              <1> 	mov bp,ax
  8227                              <1> 	mov ax,%3
  8228                              <1> 	mov ds,ax
  8229                              <1> 	mov ax,[bp+4]
  8230                              <1> 	mov [%4+2],ax
  8231                              <1> 	mov ax,[bp+6]
  8232                              <1> 	mov [%4],ax
  8233                              <1> 	stkclose 0x08
  8234                              <1> %endmacro	
  8235                              <1> 
  8236                              <1> %macro atan 4
  8237                              <1> 	stkopen 0x08
  8238                              <1> 	mov ax,%1
  8239                              <1> 	mov ds,ax
  8240                              <1> 	mov ax,[%2+2]
  8241                              <1> 	mov [bp+0],ax
  8242                              <1> 	mov ax,[%2]
  8243                              <1> 	mov [bp+2],ax
  8244                              <1> 	call proc_atan
  8245                              <1> 	mov ax,sp
  8246                              <1> 	mov bp,ax
  8247                              <1> 	mov ax,%3
  8248                              <1> 	mov ds,ax
  8249                              <1> 	mov ax,[bp+4]
  8250                              <1> 	mov [%4+2],ax
  8251                              <1> 	mov ax,[bp+6]
  8252                              <1> 	mov [%4],ax
  8253                              <1> 	stkclose 0x08
  8254                              <1> %endmacro
  8255                              <1> 	
  8256                              <1> %macro sinorcos 5
  8257                              <1> 	stkopen 0x09
  8258                              <1> 	mov ax,%1
  8259                              <1> 	mov ds,ax
  8260                              <1> 	mov ax,[%2+2]
  8261                              <1> 	mov [bp+0],ax
  8262                              <1> 	mov ax,[%2]
  8263                              <1> 	mov [bp+2],ax
  8264                              <1> 	mov byte [bp+8],%5	
  8265                              <1> 	call proc_sinorcos
  8266                              <1> 	mov ax,sp
  8267                              <1> 	mov bp,ax
  8268                              <1> 	mov ax,%3
  8269                              <1> 	mov ds,ax
  8270                              <1> 	mov ax,[bp+4]
  8271                              <1> 	mov [%4+2],ax
  8272                              <1> 	mov ax,[bp+6]
  8273                              <1> 	mov [%4],ax
  8274                              <1> 	stkclose 0x09
  8275                              <1> %endmacro
  8276                              <1> 	
  8277                              <1> %endif
  8278                                  		
  8279                                  section .data
  8280 00001BAF 000080BF                	x1: dd -1.0
  8281 00001BB3 0000803F                	x2: dd 1.0
  8282 00001BB7 CDCC4C3E                	i: dd 0.2
  8283 00001BBB 00000000                	a: dd 0
  8284 00001BBF CDCCCCBE                	n: dd -0.4
  8285                                  	
  8286                                  section .text
  8287                                  	global _start
  8288                                  	
  8289                                  _start:		
  8290                                  	prtstk
  8291                              <1>  printf "stack ---> "
  8292                              <2>  %rep %0
  8293                              <2>  __printf %1
  8294                              <2>  %rotate 1
  8295                              <2>  %endrep
  8296                              <3>  __printf %1
  8297                              <4>  section .data
  8298 00001BC3 737461636B202D2D2D- <4>  %%str: db %1,0
  8299 00001BCC 3E2000              <4>
  8300                              <4>  section .text
  8301                              <4>  prtstr cs, %%str
  8302                              <5>  stkopen 4
  8303 00000000 83EC04              <6>  sub word sp, %1
  8304 00000003 54                  <6>  push sp
  8305 00000004 5D                  <6>  pop bp
  8306 00000005 8C4E00              <5>  mov word [bp], %1
  8307 00000008 C74602[C31B]        <5>  mov word [bp+2], %2
  8308 0000000D E8(2804)            <5>  call proc_prtstr
  8309                              <5>  stkclose 4
  8310 00000010 83C404              <6>  add word sp, %1
  8311                              <3>  %rotate 1
  8312 00000013 89E0                <1>  mov ax,sp
  8313                              <1>  prthex16 ax
  8314                              <2>  stkopen 3
  8315 00000015 83EC03              <3>  sub word sp, %1
  8316 00000018 54                  <3>  push sp
  8317 00000019 5D                  <3>  pop bp
  8318 0000001A 894600              <2>  mov word [bp], %1
  8319 0000001D C6460201            <2>  mov byte [bp+2], TRUE
  8320 00000021 E8(2C03)            <2>  call proc_prthex16
  8321                              <2>  stkclose 3
  8322 00000024 83C403              <3>  add word sp, %1
  8323                                  	prtln
  8324                              <1>  __prtln
  8325 00000027 E8(5C04)            <2>  call proc_prtln
  8326                                  	prtln
  8327                              <1>  __prtln
  8328 0000002A E8(5C04)            <2>  call proc_prtln
  8329                                  	
  8330                                  	l1:		
  8331                                  		flcmp x1, x2, cl		
  8332                              <1>  flcmp cs, %1, cs, %2, %3
  8333                              <2>  stkopen 0x09
  8334 0000002D 83EC09              <3>  sub word sp, %1
  8335 00000030 54                  <3>  push sp
  8336 00000031 5D                  <3>  pop bp
  8337 00000032 8CC8                <2>  mov ax,%1
  8338 00000034 8ED8                <2>  mov ds,ax
  8339 00000036 A1[B11B]            <2>  mov ax,[%2+2]
  8340 00000039 894600              <2>  mov [bp+0],ax
  8341 0000003C A1[AF1B]            <2>  mov ax,[%2]
  8342 0000003F 894602              <2>  mov [bp+2],ax
  8343 00000042 8CC8                <2>  mov ax,%3
  8344 00000044 8ED8                <2>  mov ds,ax
  8345 00000046 A1[B51B]            <2>  mov ax,[%4+2]
  8346 00000049 894604              <2>  mov [bp+4],ax
  8347 0000004C A1[B31B]            <2>  mov ax,[%4]
  8348 0000004F 894606              <2>  mov [bp+6],ax
  8349 00000052 E8(A20B)            <2>  call proc_flcmp
  8350 00000055 89E0                <2>  mov ax,sp
  8351 00000057 89C5                <2>  mov bp,ax
  8352 00000059 8A4E08              <2>  mov byte %5,[bp+8]
  8353                              <2>  stkclose 0x09
  8354 0000005C 83C409              <3>  add word sp, %1
  8355 0000005F 80F900                  		cmp cl,0
  8356 00000062 0F8FEC00                		jg l2
  8357                                  		
  8358                                  		atan x1, a
  8359                              <1>  atan cs, %1, cs, %2
  8360                              <2>  stkopen 0x08
  8361 00000066 83EC08              <3>  sub word sp, %1
  8362 00000069 54                  <3>  push sp
  8363 0000006A 5D                  <3>  pop bp
  8364 0000006B 8CC8                <2>  mov ax,%1
  8365 0000006D 8ED8                <2>  mov ds,ax
  8366 0000006F A1[B11B]            <2>  mov ax,[%2+2]
  8367 00000072 894600              <2>  mov [bp+0],ax
  8368 00000075 A1[AF1B]            <2>  mov ax,[%2]
  8369 00000078 894602              <2>  mov [bp+2],ax
  8370 0000007B E8(4718)            <2>  call proc_atan
  8371 0000007E 89E0                <2>  mov ax,sp
  8372 00000080 89C5                <2>  mov bp,ax
  8373 00000082 8CC8                <2>  mov ax,%3
  8374 00000084 8ED8                <2>  mov ds,ax
  8375 00000086 8B4604              <2>  mov ax,[bp+4]
  8376 00000089 A3[BD1B]            <2>  mov [%4+2],ax
  8377 0000008C 8B4606              <2>  mov ax,[bp+6]
  8378 0000008F A3[BB1B]            <2>  mov [%4],ax
  8379                              <2>  stkclose 0x08
  8380 00000092 83C408              <3>  add word sp, %1
  8381                                  		
  8382                                  		prthex32 x1
  8383                              <1>  prthex32 cs, %1
  8384 00000095 8CC8                <2>  mov ax,%1
  8385 00000097 8ED8                <2>  mov ds,ax
  8386 00000099 A1[B11B]            <2>  mov word ax,[%2+2]
  8387                              <2>  prthex16 ax
  8388                              <3>  stkopen 3
  8389 0000009C 83EC03              <4>  sub word sp, %1
  8390 0000009F 54                  <4>  push sp
  8391 000000A0 5D                  <4>  pop bp
  8392 000000A1 894600              <3>  mov word [bp], %1
  8393 000000A4 C6460201            <3>  mov byte [bp+2], TRUE
  8394 000000A8 E8(2C03)            <3>  call proc_prthex16
  8395                              <3>  stkclose 3
  8396 000000AB 83C403              <4>  add word sp, %1
  8397 000000AE 8CC8                <2>  mov ax,%1
  8398 000000B0 8ED8                <2>  mov ds,ax
  8399 000000B2 A1[AF1B]            <2>  mov word ax,[%2]
  8400                              <2>  prthex16 ax
  8401                              <3>  stkopen 3
  8402 000000B5 83EC03              <4>  sub word sp, %1
  8403 000000B8 54                  <4>  push sp
  8404 000000B9 5D                  <4>  pop bp
  8405 000000BA 894600              <3>  mov word [bp], %1
  8406 000000BD C6460201            <3>  mov byte [bp+2], TRUE
  8407 000000C1 E8(2C03)            <3>  call proc_prthex16
  8408                              <3>  stkclose 3
  8409 000000C4 83C403              <4>  add word sp, %1
  8410                                  		prtch 20h
  8411                              <1>  __prtch %1
  8412                              <2>  stkopen 1
  8413 000000C7 83EC01              <3>  sub word sp, %1
  8414 000000CA 54                  <3>  push sp
  8415 000000CB 5D                  <3>  pop bp
  8416 000000CC C6460020            <2>  mov byte [ bp ], %1
  8417 000000D0 E8(4E04)            <2>  call proc_prtch
  8418                              <2>  stkclose 1
  8419 000000D3 83C401              <3>  add word sp, %1
  8420                                  		prthex32 a
  8421                              <1>  prthex32 cs, %1
  8422 000000D6 8CC8                <2>  mov ax,%1
  8423 000000D8 8ED8                <2>  mov ds,ax
  8424 000000DA A1[BD1B]            <2>  mov word ax,[%2+2]
  8425                              <2>  prthex16 ax
  8426                              <3>  stkopen 3
  8427 000000DD 83EC03              <4>  sub word sp, %1
  8428 000000E0 54                  <4>  push sp
  8429 000000E1 5D                  <4>  pop bp
  8430 000000E2 894600              <3>  mov word [bp], %1
  8431 000000E5 C6460201            <3>  mov byte [bp+2], TRUE
  8432 000000E9 E8(2C03)            <3>  call proc_prthex16
  8433                              <3>  stkclose 3
  8434 000000EC 83C403              <4>  add word sp, %1
  8435 000000EF 8CC8                <2>  mov ax,%1
  8436 000000F1 8ED8                <2>  mov ds,ax
  8437 000000F3 A1[BB1B]            <2>  mov word ax,[%2]
  8438                              <2>  prthex16 ax
  8439                              <3>  stkopen 3
  8440 000000F6 83EC03              <4>  sub word sp, %1
  8441 000000F9 54                  <4>  push sp
  8442 000000FA 5D                  <4>  pop bp
  8443 000000FB 894600              <3>  mov word [bp], %1
  8444 000000FE C6460201            <3>  mov byte [bp+2], TRUE
  8445 00000102 E8(2C03)            <3>  call proc_prthex16
  8446                              <3>  stkclose 3
  8447 00000105 83C403              <4>  add word sp, %1
  8448                                  		prtln
  8449                              <1>  __prtln
  8450 00000108 E8(5C04)            <2>  call proc_prtln
  8451                                  		
  8452                                  		fladd x1, i, x1
  8453                              <1>  fladd cs, %1, cs, %2, cs, %3
  8454                              <2>  fladdorsub %1, %2, %3, %4, %5, %6, 0
  8455                              <3>  stkopen 0x0E
  8456 0000010B 83EC0E              <4>  sub word sp, %1
  8457 0000010E 54                  <4>  push sp
  8458 0000010F 5D                  <4>  pop bp
  8459 00000110 8CC8                <3>  mov ax,%1
  8460 00000112 8ED8                <3>  mov ds,ax
  8461 00000114 A1[B11B]            <3>  mov ax,[%2+2]
  8462 00000117 894600              <3>  mov [bp+0],ax
  8463 0000011A A1[AF1B]            <3>  mov ax,[%2]
  8464 0000011D 894602              <3>  mov [bp+2],ax
  8465 00000120 8CC8                <3>  mov ax,%3
  8466 00000122 8ED8                <3>  mov ds,ax
  8467 00000124 A1[B91B]            <3>  mov ax,[%4+2]
  8468 00000127 894604              <3>  mov [bp+4],ax
  8469 0000012A A1[B71B]            <3>  mov ax,[%4]
  8470 0000012D 894606              <3>  mov [bp+6],ax
  8471 00000130 C7460C0000          <3>  mov word [bp+0x0C], %7
  8472 00000135 E8(350F)            <3>  call proc_fladdorsub
  8473 00000138 89E0                <3>  mov ax,sp
  8474 0000013A 89C5                <3>  mov bp,ax
  8475 0000013C 8CC8                <3>  mov ax,%5
  8476 0000013E 8ED8                <3>  mov ds,ax
  8477 00000140 8B4608              <3>  mov ax,[bp+8]
  8478 00000143 A3[B11B]            <3>  mov [%6+2],ax
  8479 00000146 8B460A              <3>  mov ax,[bp+0x0A]
  8480 00000149 A3[AF1B]            <3>  mov [%6],ax
  8481                              <3>  stkclose 0x0E
  8482 0000014C 83C40E              <4>  add word sp, %1
  8483 0000014F E9DBFE                  		jmp l1
  8484                                  	l2:
  8485                                  						 		
  8486                                  	prtln
  8487                              <1>  __prtln
  8488 00000152 E8(5C04)            <2>  call proc_prtln
  8489                                  	prtln
  8490                              <1>  __prtln
  8491 00000155 E8(5C04)            <2>  call proc_prtln
  8492                                  	prtstk			
  8493                              <1>  printf "stack ---> "
  8494                              <2>  %rep %0
  8495                              <2>  __printf %1
  8496                              <2>  %rotate 1
  8497                              <2>  %endrep
  8498                              <3>  __printf %1
  8499                              <4>  section .data
  8500 00001BCF 737461636B202D2D2D- <4>  %%str: db %1,0
  8501 00001BD8 3E2000              <4>
  8502                              <4>  section .text
  8503                              <4>  prtstr cs, %%str
  8504                              <5>  stkopen 4
  8505 00000158 83EC04              <6>  sub word sp, %1
  8506 0000015B 54                  <6>  push sp
  8507 0000015C 5D                  <6>  pop bp
  8508 0000015D 8C4E00              <5>  mov word [bp], %1
  8509 00000160 C74602[CF1B]        <5>  mov word [bp+2], %2
  8510 00000165 E8(2804)            <5>  call proc_prtstr
  8511                              <5>  stkclose 4
  8512 00000168 83C404              <6>  add word sp, %1
  8513                              <3>  %rotate 1
  8514 0000016B 89E0                <1>  mov ax,sp
  8515                              <1>  prthex16 ax
  8516                              <2>  stkopen 3
  8517 0000016D 83EC03              <3>  sub word sp, %1
  8518 00000170 54                  <3>  push sp
  8519 00000171 5D                  <3>  pop bp
  8520 00000172 894600              <2>  mov word [bp], %1
  8521 00000175 C6460201            <2>  mov byte [bp+2], TRUE
  8522 00000179 E8(2C03)            <2>  call proc_prthex16
  8523                              <2>  stkclose 3
  8524 0000017C 83C403              <3>  add word sp, %1
  8525                                  	
  8526 0000017F EBFE                    	jmp $		

     1                                  
     2                                  %include "lib/trigon.mac"
     3                              <1> 
     4                              <1> %ifndef TRIGON_MAC
     5                              <1> 	%define TRIGON_MAC
     6                              <1> 
     7                              <1> 	%include "lib/trigon.asm"
     8                              <2> 
     9                              <2> %ifndef TRIGON_ASM
    10                              <2> 	%define TRIGON_ASM
    11                              <2> 
    12                              <2> 	%include "lib/system.mac"
    13                              <3>  
    14                              <3> %ifndef SYSTEM_MAC
    15                              <3>  	%define SYSTEM_MAC
    16                              <3>  	
    17                              <3> 	%ifndef TRUE
    18                              <3> 		%define TRUE 01h
    19                              <3> 	%endif
    20                              <3> 	%ifndef FALSE
    21                              <3> 		%define FALSE 00h
    22                              <3> 	%endif
    23                              <3> 	
    24                              <3> %macro vlodsb 3
    25                              <3> 	vlodsb cs, %1, %2, %3
    26                              <3> %endmacro
    27                              <3> 
    28                              <3> %macro vstosb 3
    29                              <3> 	vstosb cs, %1, %2, %3
    30                              <3> %endmacro
    31                              <3> 	 	
    32                              <3> %macro int16toreg 2
    33                              <3> 	int16toreg cs, %1, %2
    34                              <3> %endmacro
    35                              <3> 
    36                              <3> %macro regtoint16 2
    37                              <3> 	regtoint16 %1, cs, %2
    38                              <3> %endmacro
    39                              <3> 
    40                              <3> %macro vstosb 4
    41                              <3> 	push %1
    42                              <3> 	pop ds
    43                              <3> 	mov si,%2
    44                              <3> 	add si,%3
    45                              <3> 	mov byte [si],%4	
    46                              <3> %endmacro
    47                              <3> 
    48                              <3> %macro vlodsb 4
    49                              <3> 	push %1
    50                              <3> 	pop ds
    51                              <3> 	mov si,%2
    52                              <3> 	add si,%3
    53                              <3> 	mov byte %4,[si]	
    54                              <3> %endmacro 	 
    55                              <3> 
    56                              <3> %macro int16toreg 3
    57                              <3> 	push %2
    58                              <3> 	push %1
    59                              <3> 	pop ds
    60                              <3> 	pop si
    61                              <3> 	mov word %3,[si]	
    62                              <3> %endmacro
    63                              <3> 
    64                              <3> %macro regtoint16 3
    65                              <3> 	push %3
    66                              <3> 	push %2
    67                              <3> 	pop ds
    68                              <3> 	pop si
    69                              <3> 	mov word [si],%1	
    70                              <3> %endmacro
    71                              <3> 
    72                              <3> %macro mov32 2
    73                              <3> 	mov32 cs, %1, cs, %2
    74                              <3> %endmacro
    75                              <3> 
    76                              <3> %macro mov16 2
    77                              <3> 	mov16 cs, %1, cs, %2
    78                              <3> %endmacro
    79                              <3> 
    80                              <3> %macro mov32 4
    81                              <3> 	mov ax,%3
    82                              <3> 	mov ds,ax
    83                              <3> 	mov cx,[%4+2]
    84                              <3> 	mov dx,[%4]
    85                              <3> 	mov ax,%1
    86                              <3> 	mov ds,ax
    87                              <3> 	mov [%2+2],cx
    88                              <3> 	mov [%2],dx
    89                              <3> %endmacro
    90                              <3> 
    91                              <3> %macro mov16 4
    92                              <3> 	mov ax,%3
    93                              <3> 	mov ds,ax
    94                              <3> 	mov bx,[%4]
    95                              <3> 	mov ax,%1
    96                              <3> 	mov ds,ax
    97                              <3> 	mov [%2],bx
    98                              <3> %endmacro
    99                              <3>  	 	
   100                              <3> %macro mformat 4
   101                              <3> 	stkopen 8
   102                              <3> 	mov word [ bp + 0 ], %1
   103                              <3> 	mov word [ bp + 2 ], %2
   104                              <3> 	mov word [ bp + 4 ], %3
   105                              <3> 	mov word [ bp + 6 ], %4
   106                              <3> 	call kernel_segment:mformat
   107                              <3> 	stkclose 8
   108                              <3> %endmacro
   109                              <3> 
   110                              <3> %macro malloc 6
   111                              <3> 	stkopen 0Bh
   112                              <3> 	mov word [ bp + 4 ], %3
   113                              <3> 	mov word [ bp + 6 ], %4
   114                              <3> 	mov word [ bp + 8 ], %5	
   115                              <3> 	call kernel_segment:malloc
   116                              <3> 	push sp
   117                              <3> 	pop bp
   118                              <3> 	mov word %1, [ bp ]
   119                              <3> 	mov word %2, [ bp + 2 ]
   120                              <3> 	mov byte %6, [ bp + 0x0A ]
   121                              <3> 	stkclose 0Bh
   122                              <3> %endmacro 	
   123                              <3> 
   124                              <3> %macro laddr 2
   125                              <3> 	laddr %1, %2, %1, %2
   126                              <3> %endmacro
   127                              <3> 
   128                              <3> %macro faddr 2
   129                              <3> 	faddr %1, %2, %1, %2
   130                              <3> %endmacro
   131                              <3>  	
   132                              <3> %macro laddr 4
   133                              <3> 	stkopen 8
   134                              <3> 	mov word [ bp + 4 ], %3
   135                              <3> 	mov word [ bp + 6 ], %4	
   136                              <3> 	call kernel_segment:laddr
   137                              <3> 	push sp
   138                              <3> 	pop bp
   139                              <3> 	mov word %1, [ bp + 0 ]
   140                              <3> 	mov word %2, [ bp + 2 ]	
   141                              <3> 	stkclose 8
   142                              <3> %endmacro
   143                              <3> 
   144                              <3> %macro faddr 4
   145                              <3> 	stkopen 8
   146                              <3> 	mov word [ bp + 4 ], %3
   147                              <3> 	mov word [ bp + 6 ], %4	
   148                              <3> 	call kernel_segment:faddr
   149                              <3> 	push sp
   150                              <3> 	pop bp
   151                              <3> 	mov word %1, [ bp + 0 ]
   152                              <3> 	mov word %2, [ bp + 2 ]	
   153                              <3> 	stkclose 8
   154                              <3> %endmacro	
   155                              <3>  
   156                              <3> 
   157                              <3> %macro stkopen 1		
   158                              <3> 	sub word sp, %1
   159                              <3> 	push sp
   160                              <3> 	pop bp
   161                              <3> %endmacro
   162                              <3> 
   163                              <3> %macro stkclose 1
   164                              <3> 	add word sp, %1
   165                              <3> %endmacro
   166                              <3> 
   167                              <3> %macro stkload 1-* 	
   168                              <3>  	%rep %0
   169                              <3>  	 	%rotate -1
   170                              <3>  		pop %1
   171                              <3>  	%endrep
   172                              <3>  	%rep %0
   173                              <3>  		push %1
   174                              <3>  		%rotate 1
   175                              <3>  	%endrep
   176                              <3> %endmacro
   177                              <3> 
   178                              <3> %macro stkpush 1-* 	
   179                              <3>  	%rep %0
   180                              <3>  		push %1
   181                              <3>  		%rotate 1
   182                              <3>  	%endrep 	
   183                              <3> %endmacro
   184                              <3>  
   185                              <3> %macro stkpop 1-*
   186                              <3>  	%rep %0
   187                              <3>  	 	%rotate -1
   188                              <3>  		pop %1
   189                              <3>  	%endrep 	 	
   190                              <3> %endmacro
   191                              <3> 
   192                              <3> %endif 
   193                              <2> 	%include "lib/math.mac"
   194                              <3> 
   195                              <3> %ifndef MATH_MAC
   196                              <3> 	%define MATH_MAC
   197                              <3> 	
   198                              <3> 	%include "lib/math.asm"
   199                              <4> 
   200                              <4> %ifndef MATH_ASM
   201                              <4> 	%define MATH_ASM
   202                              <4> 
   203                              <4> 	%include "lib/system.mac"
   204                              <5>  
   205                              <5> %ifndef SYSTEM_MAC
   206                              <5>  	%define SYSTEM_MAC
   207                              <5>  	
   208                              <5> 	%ifndef TRUE
   209                              <5> 		%define TRUE 01h
   210                              <5> 	%endif
   211                              <5> 	%ifndef FALSE
   212                              <5> 		%define FALSE 00h
   213                              <5> 	%endif
   214                              <5> 	
   215                              <5> %macro vlodsb 3
   216                              <5> 	vlodsb cs, %1, %2, %3
   217                              <5> %endmacro
   218                              <5> 
   219                              <5> %macro vstosb 3
   220                              <5> 	vstosb cs, %1, %2, %3
   221                              <5> %endmacro
   222                              <5> 	 	
   223                              <5> %macro int16toreg 2
   224                              <5> 	int16toreg cs, %1, %2
   225                              <5> %endmacro
   226                              <5> 
   227                              <5> %macro regtoint16 2
   228                              <5> 	regtoint16 %1, cs, %2
   229                              <5> %endmacro
   230                              <5> 
   231                              <5> %macro vstosb 4
   232                              <5> 	push %1
   233                              <5> 	pop ds
   234                              <5> 	mov si,%2
   235                              <5> 	add si,%3
   236                              <5> 	mov byte [si],%4	
   237                              <5> %endmacro
   238                              <5> 
   239                              <5> %macro vlodsb 4
   240                              <5> 	push %1
   241                              <5> 	pop ds
   242                              <5> 	mov si,%2
   243                              <5> 	add si,%3
   244                              <5> 	mov byte %4,[si]	
   245                              <5> %endmacro 	 
   246                              <5> 
   247                              <5> %macro int16toreg 3
   248                              <5> 	push %2
   249                              <5> 	push %1
   250                              <5> 	pop ds
   251                              <5> 	pop si
   252                              <5> 	mov word %3,[si]	
   253                              <5> %endmacro
   254                              <5> 
   255                              <5> %macro regtoint16 3
   256                              <5> 	push %3
   257                              <5> 	push %2
   258                              <5> 	pop ds
   259                              <5> 	pop si
   260                              <5> 	mov word [si],%1	
   261                              <5> %endmacro
   262                              <5> 
   263                              <5> %macro mov32 2
   264                              <5> 	mov32 cs, %1, cs, %2
   265                              <5> %endmacro
   266                              <5> 
   267                              <5> %macro mov16 2
   268                              <5> 	mov16 cs, %1, cs, %2
   269                              <5> %endmacro
   270                              <5> 
   271                              <5> %macro mov32 4
   272                              <5> 	mov ax,%3
   273                              <5> 	mov ds,ax
   274                              <5> 	mov cx,[%4+2]
   275                              <5> 	mov dx,[%4]
   276                              <5> 	mov ax,%1
   277                              <5> 	mov ds,ax
   278                              <5> 	mov [%2+2],cx
   279                              <5> 	mov [%2],dx
   280                              <5> %endmacro
   281                              <5> 
   282                              <5> %macro mov16 4
   283                              <5> 	mov ax,%3
   284                              <5> 	mov ds,ax
   285                              <5> 	mov bx,[%4]
   286                              <5> 	mov ax,%1
   287                              <5> 	mov ds,ax
   288                              <5> 	mov [%2],bx
   289                              <5> %endmacro
   290                              <5>  	 	
   291                              <5> %macro mformat 4
   292                              <5> 	stkopen 8
   293                              <5> 	mov word [ bp + 0 ], %1
   294                              <5> 	mov word [ bp + 2 ], %2
   295                              <5> 	mov word [ bp + 4 ], %3
   296                              <5> 	mov word [ bp + 6 ], %4
   297                              <5> 	call kernel_segment:mformat
   298                              <5> 	stkclose 8
   299                              <5> %endmacro
   300                              <5> 
   301                              <5> %macro malloc 6
   302                              <5> 	stkopen 0Bh
   303                              <5> 	mov word [ bp + 4 ], %3
   304                              <5> 	mov word [ bp + 6 ], %4
   305                              <5> 	mov word [ bp + 8 ], %5	
   306                              <5> 	call kernel_segment:malloc
   307                              <5> 	push sp
   308                              <5> 	pop bp
   309                              <5> 	mov word %1, [ bp ]
   310                              <5> 	mov word %2, [ bp + 2 ]
   311                              <5> 	mov byte %6, [ bp + 0x0A ]
   312                              <5> 	stkclose 0Bh
   313                              <5> %endmacro 	
   314                              <5> 
   315                              <5> %macro laddr 2
   316                              <5> 	laddr %1, %2, %1, %2
   317                              <5> %endmacro
   318                              <5> 
   319                              <5> %macro faddr 2
   320                              <5> 	faddr %1, %2, %1, %2
   321                              <5> %endmacro
   322                              <5>  	
   323                              <5> %macro laddr 4
   324                              <5> 	stkopen 8
   325                              <5> 	mov word [ bp + 4 ], %3
   326                              <5> 	mov word [ bp + 6 ], %4	
   327                              <5> 	call kernel_segment:laddr
   328                              <5> 	push sp
   329                              <5> 	pop bp
   330                              <5> 	mov word %1, [ bp + 0 ]
   331                              <5> 	mov word %2, [ bp + 2 ]	
   332                              <5> 	stkclose 8
   333                              <5> %endmacro
   334                              <5> 
   335                              <5> %macro faddr 4
   336                              <5> 	stkopen 8
   337                              <5> 	mov word [ bp + 4 ], %3
   338                              <5> 	mov word [ bp + 6 ], %4	
   339                              <5> 	call kernel_segment:faddr
   340                              <5> 	push sp
   341                              <5> 	pop bp
   342                              <5> 	mov word %1, [ bp + 0 ]
   343                              <5> 	mov word %2, [ bp + 2 ]	
   344                              <5> 	stkclose 8
   345                              <5> %endmacro	
   346                              <5>  
   347                              <5> 
   348                              <5> %macro stkopen 1		
   349                              <5> 	sub word sp, %1
   350                              <5> 	push sp
   351                              <5> 	pop bp
   352                              <5> %endmacro
   353                              <5> 
   354                              <5> %macro stkclose 1
   355                              <5> 	add word sp, %1
   356                              <5> %endmacro
   357                              <5> 
   358                              <5> %macro stkload 1-* 	
   359                              <5>  	%rep %0
   360                              <5>  	 	%rotate -1
   361                              <5>  		pop %1
   362                              <5>  	%endrep
   363                              <5>  	%rep %0
   364                              <5>  		push %1
   365                              <5>  		%rotate 1
   366                              <5>  	%endrep
   367                              <5> %endmacro
   368                              <5> 
   369                              <5> %macro stkpush 1-* 	
   370                              <5>  	%rep %0
   371                              <5>  		push %1
   372                              <5>  		%rotate 1
   373                              <5>  	%endrep 	
   374                              <5> %endmacro
   375                              <5>  
   376                              <5> %macro stkpop 1-*
   377                              <5>  	%rep %0
   378                              <5>  	 	%rotate -1
   379                              <5>  		pop %1
   380                              <5>  	%endrep 	 	
   381                              <5> %endmacro
   382                              <5> 
   383                              <5> %endif 
   384                              <4> 
   385                              <4> %macro __int16to32 3
   386                              <4> 	stkopen 0x06
   387                              <4> 	mov word [bp+0],%1
   388                              <4> 	call proc_int16to32
   389                              <4> 	push sp
   390                              <4> 	pop bp
   391                              <4> 	mov word %2, [bp+2]
   392                              <4> 	mov word %3, [bp+4]
   393                              <4> 	stkclose 0x06
   394                              <4> %endmacro
   395                              <4> 
   396                              <4> %macro __int32to16 3
   397                              <4> 	stkopen 0x06
   398                              <4> 	mov word [bp+0], %1
   399                              <4> 	mov word [bp+2], %2
   400                              <4> 	call proc_int32to16
   401                              <4> 	push sp
   402                              <4> 	pop bp
   403                              <4> 	mov word %3, [bp+4]
   404                              <4> 	stkclose 0x06
   405                              <4> %endmacro
   406                              <4> 
   407                              <4> %macro __add32 6
   408                              <4> 	stkopen 0x0C
   409                              <4> 	mov word [bp+0], %1
   410                              <4> 	mov word [bp+2], %2
   411                              <4> 	mov word [bp+4], %3
   412                              <4> 	mov word [bp+6], %4	
   413                              <4> 	call proc_add32
   414                              <4> 	push sp
   415                              <4> 	pop bp
   416                              <4> 	mov word %5, [bp+8]
   417                              <4> 	mov word %6, [bp+0x0A]
   418                              <4> 	stkclose 0x0C
   419                              <4> %endmacro
   420                              <4> 
   421                              <4> %macro __sub32 6
   422                              <4> 	stkopen 0x0C
   423                              <4> 	mov word [bp+0], %1
   424                              <4> 	mov word [bp+2], %2
   425                              <4> 	mov word [bp+4], %3
   426                              <4> 	mov word [bp+6], %4	
   427                              <4> 	call proc_sub32
   428                              <4> 	push sp
   429                              <4> 	pop bp
   430                              <4> 	mov word %5, [bp+8]
   431                              <4> 	mov word %6, [bp+0x0A]
   432                              <4> 	stkclose 0x0C
   433                              <4> %endmacro
   434                              <4> 
   435                              <4> %macro __mul32 6
   436                              <4> 	stkopen 0x0C
   437                              <4> 	mov word [bp+0], %1
   438                              <4> 	mov word [bp+2], %2
   439                              <4> 	mov word [bp+4], %3
   440                              <4> 	mov word [bp+6], %4	
   441                              <4> 	call proc_mul32
   442                              <4> 	push sp
   443                              <4> 	pop bp
   444                              <4> 	mov word %5, [bp+8]
   445                              <4> 	mov word %6, [bp+0x0A]
   446                              <4> 	stkclose 0x0C
   447                              <4> %endmacro
   448                              <4> 
   449                              <4> %macro __div32 9
   450                              <4> 	stkopen 0x11
   451                              <4> 	mov word [bp+0], %1
   452                              <4> 	mov word [bp+2], %2
   453                              <4> 	mov word [bp+4], %3
   454                              <4> 	mov word [bp+6], %4
   455                              <4> 	mov word [bp+8], %5
   456                              <4> 	mov word [bp+0x0A], %6	
   457                              <4> 	call proc_div32
   458                              <4> 	push sp
   459                              <4> 	pop bp
   460                              <4> 	mov word %7, [bp+0x0C]
   461                              <4> 	mov word %8, [bp+0x0E]
   462                              <4> 	mov byte %9, [bp+0x10]
   463                              <4> 	stkclose 0x11
   464                              <4> %endmacro
   465                              <4> 
   466                              <4> %macro __cmp32 5
   467                              <4> 	stkopen 9
   468                              <4> 	mov word [bp+0], %1
   469                              <4> 	mov word [bp+2], %2
   470                              <4> 	mov word [bp+4], %3
   471                              <4> 	mov word [bp+6], %4
   472                              <4> 	call proc_cmp32
   473                              <4> 	push sp
   474                              <4> 	pop bp
   475                              <4> 	mov byte %5, [bp+8]
   476                              <4> 	stkclose 9	
   477                              <4> %endmacro
   478                              <4> 
   479                              <4> %macro __shl32 3
   480                              <4> 	stkopen 5
   481                              <4> 	mov word [bp+0], %1
   482                              <4> 	mov word [bp+2], %2
   483                              <4> 	mov byte [bp+4], %3
   484                              <4> 	call proc_shl32
   485                              <4> 	push sp
   486                              <4> 	pop bp
   487                              <4> 	mov word %1, [bp+0]
   488                              <4> 	mov word %2, [bp+2]
   489                              <4> 	stkclose 5
   490                              <4> %endmacro
   491                              <4> 
   492                              <4> %macro __shr32 3
   493                              <4> 	stkopen 5
   494                              <4> 	mov word [bp+0], %1
   495                              <4> 	mov word [bp+2], %2
   496                              <4> 	mov byte [bp+4], %3
   497                              <4> 	call proc_shr32
   498                              <4> 	push sp
   499                              <4> 	pop bp
   500                              <4> 	mov word %1, [bp+0]
   501                              <4> 	mov word %2, [bp+2]
   502                              <4> 	stkclose 5
   503                              <4> %endmacro
   504                              <4> 
   505                              <4> %macro __lzcount32 3	
   506                              <4> 	push %2		
   507                              <4> 	__lzcount16 %1, cl	
   508                              <4> 	pop ax
   509                              <4> 	cmp cl,4
   510                              <4> 	jb .end
   511                              <4> 		push cx		
   512                              <4> 		__lzcount16 ax, al		
   513                              <4> 		pop cx
   514                              <4> 		add cl,al
   515                              <4> 	.end:	
   516                              <4> 	mov byte %3, cl 
   517                              <4> %endmacro
   518                              <4> 
   519                              <4> %macro __lzcount16 2
   520                              <4> 	stkopen 3
   521                              <4> 	mov word [bp+0], %1
   522                              <4> 	call proc__lzcount16
   523                              <4> 	push sp
   524                              <4> 	pop bp
   525                              <4> 	mov byte %2, [bp+2]	
   526                              <4> 	stkclose 3
   527                              <4> %endmacro
   528                              <4> 
   529                              <4> %macro __lzbitcount32 3	
   530                              <4> 	push %2		
   531                              <4> 	__lzbitcount16 %1, cl
   532                              <4> 	pop ax
   533                              <4> 	cmp cl,16
   534                              <4> 	jb .end
   535                              <4> 		push cx		
   536                              <4> 		__lzbitcount16 ax, al		
   537                              <4> 		pop cx
   538                              <4> 		add cl,al
   539                              <4> 	.end:	
   540                              <4> 	mov byte %3, cl 
   541                              <4> %endmacro
   542                              <4> 		
   543                              <4> %macro __lzbitcount16 2
   544                              <4> 	stkopen 3
   545                              <4> 	mov word [bp+0], %1
   546                              <4> 	call proc__lzbitcount16
   547                              <4> 	push sp
   548                              <4> 	pop bp
   549                              <4> 	mov byte %2, [bp+2]	
   550                              <4> 	stkclose 3
   551                              <4> %endmacro	
   552                              <4> 
   553                              <4> %macro __calc_dividendo1 7
   554                              <4> 	stkopen 0x0D
   555                              <4> 	mov word [bp+0], %1
   556                              <4> 	mov word [bp+2], %2
   557                              <4> 	mov word [bp+4], %3
   558                              <4> 	mov word [bp+6], %4
   559                              <4> 	call proc_calc_dividendo1
   560                              <4> 	push sp
   561                              <4> 	pop bp
   562                              <4> 	mov word %5, [bp+0x08]
   563                              <4> 	mov word %6, [bp+0x0A]
   564                              <4> 	mov byte %7, [bp+0x0C]
   565                              <4> 	stkclose 0x0D
   566                              <4> %endmacro
   567                              <4> 
   568                              <4> %macro __calc__prox_dividendo 5
   569                              <4> 	stkopen 9
   570                              <4> 	mov word [bp+0], %1
   571                              <4> 	mov word [bp+2], %2
   572                              <4> 	mov word [bp+4], %3
   573                              <4> 	mov word [bp+6], %4
   574                              <4> 	mov word [bp+8], %5
   575                              <4> 	call proc_calc_prox_dividendo
   576                              <4> 	push sp
   577                              <4> 	pop bp
   578                              <4> 	mov word %3, [bp+4]
   579                              <4> 	mov word %4, [bp+6]
   580                              <4> 	mov byte %5, [bp+8]
   581                              <4> 	stkclose 9
   582                              <4> %endmacro
   583                              <4> 				
   584                              <4> section .data
   585                              <4> 
   586                              <4> proc_int16to32:
   587 00000000 89E0                <4> 	mov ax,sp
   588 00000002 89C5                <4> 	mov bp,ax
   589                              <4> 	
   590 00000004 8B4602              <4> 	mov ax,[bp+2]
   591 00000007 894606              <4> 	mov [bp+6],ax
   592                              <4> 				
   593 0000000A 250080              <4> 	and ax,0x8000
   594 0000000D 83F800              <4> 	cmp ax,0
   595 00000010 7507                <4> 	jnz .one
   596 00000012 C746040000          <4> 		mov word [bp+4],0			
   597 00000017 EB05                <4> 		jmp .endcmp
   598                              <4> 	.one:				
   599 00000019 C74604FFFF          <4> 		mov word [bp+4],0xFFFF
   600                              <4> 	.endcmp:
   601                              <4> 	
   602 0000001E C3                  <4> 	ret
   603                              <4> 	
   604                              <4> proc_int32to16:
   605 0000001F 89E0                <4> 	mov ax,sp
   606 00000021 89C5                <4> 	mov bp,ax
   607                              <4> 	
   608 00000023 8B4602              <4> 	mov ax,[bp+2]
   609 00000026 89C3                <4> 	mov bx,ax			
   610                              <4> 
   611 00000028 25FF7F              <4> 	and ax,0x7FFF
   612 0000002B 894606              <4> 	mov [bp+6],ax
   613                              <4> 	
   614 0000002E 81E30080            <4> 	and bx,0x8000
   615 00000032 015E06              <4> 	add [bp+6],bx
   616                              <4> 		
   617 00000035 C3                  <4> 	ret
   618                              <4> 
   619                              <4> proc_setsig:
   620 00000036 89E0                <4> 	mov ax,sp
   621 00000038 89C5                <4> 	mov bp,ax
   622                              <4> 	
   623 0000003A 816602FF7F          <4> 	and word [bp+2],0x7FFF
   624 0000003F 8146020080          <4> 	add word [bp+2],0x8000	
   625                              <4> 	
   626 00000044 C3                  <4> 	ret
   627                              <4> 	
   628                              <4> proc_clrsig:
   629 00000045 89E0                <4> 	mov ax,sp
   630 00000047 89C5                <4> 	mov bp,ax
   631                              <4> 	
   632 00000049 816602FF7F          <4> 	and word [bp+2],0x7FFF
   633                              <4> 
   634 0000004E C3                  <4> 	ret
   635                              <4> 
   636                              <4> proc_idiv32:
   637                              <4> 	stkopen 0x11
   638 0000004F 83EC11              <5>  sub word sp, %1
   639 00000052 54                  <5>  push sp
   640 00000053 5D                  <5>  pop bp
   641 00000054 8B4613              <4> 	mov ax,[bp+0x13]
   642 00000057 25FF7F              <4> 	and ax,0x7FFF
   643 0000005A 894600              <4> 	mov [bp+0],ax
   644 0000005D 8B4615              <4> 	mov ax,[bp+0x15]
   645 00000060 894602              <4> 	mov [bp+2],ax
   646 00000063 8B4617              <4> 	mov ax,[bp+0x17]
   647 00000066 25FF7F              <4> 	and ax,0x7FFF
   648 00000069 894604              <4> 	mov [bp+4],ax
   649 0000006C 8B4619              <4> 	mov ax,[bp+0x19]
   650 0000006F 894606              <4> 	mov [bp+6],ax 
   651 00000072 E8B300              <4> 	call proc_div32
   652 00000075 89E0                <4> 	mov ax,sp
   653 00000077 89C5                <4> 	mov bp,ax
   654 00000079 8B4608              <4> 	mov ax,[bp+8]
   655 0000007C 89461B              <4> 	mov [bp+0x1B], ax
   656 0000007F 8B460A              <4> 	mov ax,[bp+0x0A]
   657 00000082 89461D              <4> 	mov [bp+0x1D], ax
   658 00000085 8B460C              <4> 	mov ax,[bp+0x0C]
   659 00000088 89461F              <4> 	mov [bp+0x1F], ax
   660 0000008B 8B460E              <4> 	mov ax,[bp+0x0E]
   661 0000008E 894621              <4> 	mov [bp+0x21], ax
   662 00000091 8A4610              <4> 	mov al,[bp+0x10]
   663 00000094 884623              <4> 	mov byte [bp+0x23], al
   664                              <4> 	stkclose 0x11
   665 00000097 83C411              <5>  add word sp, %1
   666                              <4> 	
   667 0000009A 54                  <4> 	push sp
   668 0000009B 5D                  <4> 	pop bp
   669                              <4> 		
   670 0000009C 8B4E02              <4> 	mov cx,[bp+2]
   671 0000009F 8B5606              <4> 	mov dx,[bp+6]
   672 000000A2 81E10080            <4> 	and cx,0x8000
   673 000000A6 81E20080            <4> 	and dx,0x8000
   674 000000AA 31D1                <4> 	xor cx,dx
   675                              <4> 	
   676 000000AC 837E0A00            <4> 	cmp word [bp+0x0A],0
   677 000000B0 7506                <4> 	jnz .signal1
   678 000000B2 837E0C00            <4> 	cmp word [bp+0x0C],0
   679 000000B6 7403                <4> 	jz .endsignal1
   680                              <4> 	.signal1:
   681 000000B8 014E0A              <4> 		add word [bp+0x0A],cx
   682                              <4> 	.endsignal1:
   683                              <4> 	
   684 000000BB 837E0E00            <4> 	cmp word [bp+0x0E],0
   685 000000BF 7506                <4> 	jnz .signal2
   686 000000C1 837E1000            <4> 	cmp word [bp+0x10],0
   687 000000C5 7403                <4> 	jz .endsignal2
   688                              <4> 	.signal2:
   689 000000C7 014E0E              <4> 		add word [bp+0x0E],cx	
   690                              <4> 	.endsignal2:
   691                              <4> 		
   692 000000CA C3                  <4> 	ret	
   693                              <4> 
   694                              <4> proc_imul32:		
   695                              <4> 	stkopen 0x0C
   696 000000CB 83EC0C              <5>  sub word sp, %1
   697 000000CE 54                  <5>  push sp
   698 000000CF 5D                  <5>  pop bp
   699 000000D0 8B460E              <4> 	mov ax,[bp+0x0E]
   700 000000D3 25FF7F              <4> 	and ax,0x7FFF
   701 000000D6 894600              <4> 	mov [bp+0],ax
   702 000000D9 8B4610              <4> 	mov ax,[bp+0x10]
   703 000000DC 894602              <4> 	mov [bp+2],ax
   704 000000DF 8B4612              <4> 	mov ax,[bp+0x12]
   705 000000E2 25FF7F              <4> 	and ax,0x7FFF
   706 000000E5 894604              <4> 	mov [bp+4],ax
   707 000000E8 8B4614              <4> 	mov ax,[bp+0x14]
   708 000000EB 894606              <4> 	mov [bp+6],ax 
   709 000000EE E8B901              <4> 	call proc_mul32
   710 000000F1 89E0                <4> 	mov ax,sp
   711 000000F3 89C5                <4> 	mov bp,ax
   712 000000F5 8B4608              <4> 	mov ax,[bp+8]
   713 000000F8 8B5E0A              <4> 	mov bx,[bp+0x0A]
   714                              <4> 	stkclose 0x0C
   715 000000FB 83C40C              <5>  add word sp, %1
   716                              <4> 	
   717 000000FE 89E1                <4> 	mov cx,sp
   718 00000100 89CD                <4> 	mov bp,cx		
   719                              <4> 		
   720 00000102 89460A              <4> 	mov [bp+0x0A],ax
   721 00000105 895E0C              <4> 	mov [bp+0x0C],bx
   722                              <4> 	
   723 00000108 837E0A00            <4> 	cmp word [bp+0x0A],0
   724 0000010C 7506                <4> 	jnz .signal1
   725 0000010E 837E0C00            <4> 	cmp word [bp+0x0C],0
   726 00000112 7413                <4> 	jz .endsignal1
   727                              <4> 	.signal1:
   728 00000114 8B4E02              <4> 		mov cx,[bp+2]
   729 00000117 8B5606              <4> 		mov dx,[bp+6]
   730 0000011A 81E10080            <4> 		and cx,0x8000
   731 0000011E 81E20080            <4> 		and dx,0x8000
   732 00000122 31D1                <4> 		xor cx,dx
   733 00000124 014E0A              <4> 		add word [bp+0x0A],cx
   734                              <4> 	.endsignal1:
   735                              <4> 	
   736 00000127 C3                  <4> 	ret
   737                              <4> 
   738                              <4> proc_div32:
   739 00000128 89E0                <4> 	mov ax,sp
   740 0000012A 89C5                <4> 	mov bp,ax
   741                              <4> 	
   742 0000012C 8B4606              <4> 	mov ax,[bp+6]
   743 0000012F 034608              <4> 	add ax,[bp+8]
   744 00000132 83F800              <4> 	cmp ax,0
   745 00000135 0F846C01            <4> 	jz .divbyzero
   746                              <4> 	
   747 00000139 837E0200            <4> 	cmp word [bp+2], 0
   748 0000013D 7521                <4> 	jnz .div2
   749 0000013F 837E0600            <4> 	cmp word [bp+6], 0
   750 00000143 751B                <4> 	jnz .div2
   751 00000145 31D2                <4> 		xor dx,dx
   752 00000147 8B4604              <4> 		mov ax, [bp+4]
   753 0000014A F77608              <4> 		div word [bp+8]
   754 0000014D C7460A0000          <4> 		mov word [bp+0x0A], 0
   755 00000152 89460C              <4> 		mov word [bp+0x0C], ax
   756 00000155 C7460E0000          <4> 		mov word [bp+0x0E], 0
   757 0000015A 895610              <4> 		mov word [bp+0x10], dx
   758 0000015D E93F01              <4> 		jmp .enddiv
   759                              <4> 	.div2:
   760 00000160 8B4602              <4> 		mov ax,[bp+2]
   761 00000163 3B4606              <4> 		cmp ax,[bp+6]
   762 00000166 0F821F01            <4> 		jb .qzero
   763 0000016A 770A                <4> 		ja .div
   764 0000016C 8B4604              <4> 		mov ax,[bp+4]
   765 0000016F 3B4608              <4> 		cmp ax,[bp+8]
   766 00000172 0F821301            <4> 		jb .qzero
   767                              <4> 		
   768                              <4> 		.div:
   769                              <4> 		
   770 00000176 C7460A0000          <4> 		mov word [bp+0x0A], 0
   771 0000017B C7460C0000          <4> 		mov word [bp+0x0C], 0		
   772 00000180 C7460E0000          <4> 		mov word [bp+0x0E], 0
   773 00000185 C746100000          <4> 		mov word [bp+0x10], 0
   774                              <4> 		
   775 0000018A 8B4602              <4> 		mov ax,[bp+2]
   776 0000018D 8B5E04              <4> 		mov bx,[bp+4]
   777 00000190 8B4E06              <4> 		mov cx,[bp+6]
   778 00000193 8B5608              <4> 		mov dx,[bp+8]		
   779                              <4> 		__calc_dividendo1 ax, bx, cx, dx, ax, bx, cl
   780                              <5>  stkopen 0x0D
   781 00000196 83EC0D              <6>  sub word sp, %1
   782 00000199 54                  <6>  push sp
   783 0000019A 5D                  <6>  pop bp
   784 0000019B 894600              <5>  mov word [bp+0], %1
   785 0000019E 895E02              <5>  mov word [bp+2], %2
   786 000001A1 894E04              <5>  mov word [bp+4], %3
   787 000001A4 895606              <5>  mov word [bp+6], %4
   788 000001A7 E89A02              <5>  call proc_calc_dividendo1
   789 000001AA 54                  <5>  push sp
   790 000001AB 5D                  <5>  pop bp
   791 000001AC 8B4608              <5>  mov word %5, [bp+0x08]
   792 000001AF 8B5E0A              <5>  mov word %6, [bp+0x0A]
   793 000001B2 8A4E0C              <5>  mov byte %7, [bp+0x0C]
   794                              <5>  stkclose 0x0D
   795 000001B5 83C40D              <6>  add word sp, %1
   796                              <4> 
   797 000001B8 89E2                <4> 		mov dx,sp
   798 000001BA 89D5                <4> 		mov bp,dx
   799 000001BC 89460E              <4> 		mov word [bp+0x0E], ax
   800 000001BF 895E10              <4> 		mov word [bp+0x10], bx
   801                              <4> 		
   802 000001C2 51                  <4> 		push cx
   803                              <4> 		.l1:							
   804 000001C3 89E2                <4> 			mov dx,sp
   805 000001C5 89D5                <4> 			mov bp,dx		
   806 000001C7 83C502              <4> 			add bp,2
   807 000001CA 8B460E              <4> 			mov ax, [bp+0x0E]
   808 000001CD 8B5E10              <4> 			mov bx, [bp+0x10]
   809 000001D0 8B4E06              <4> 			mov cx, [bp+6]
   810 000001D3 8B5608              <4> 			mov dx, [bp+8]
   811                              <4> 			__cmp32 ax, bx, cx, dx, cl
   812                              <5>  stkopen 9
   813 000001D6 83EC09              <6>  sub word sp, %1
   814 000001D9 54                  <6>  push sp
   815 000001DA 5D                  <6>  pop bp
   816 000001DB 894600              <5>  mov word [bp+0], %1
   817 000001DE 895E02              <5>  mov word [bp+2], %2
   818 000001E1 894E04              <5>  mov word [bp+4], %3
   819 000001E4 895606              <5>  mov word [bp+6], %4
   820 000001E7 E81F01              <5>  call proc_cmp32
   821 000001EA 54                  <5>  push sp
   822 000001EB 5D                  <5>  pop bp
   823 000001EC 8A4E08              <5>  mov byte %5, [bp+8]
   824                              <5>  stkclose 9
   825 000001EF 83C409              <6>  add word sp, %1
   826                              <4> 			
   827 000001F2 51                  <4> 			push cx
   828 000001F3 89E2                <4> 			mov dx,sp
   829 000001F5 89D5                <4> 			mov bp,dx
   830 000001F7 83C504              <4> 			add bp,4
   831 000001FA 8B460A              <4> 			mov ax,[bp+0x0A]
   832 000001FD 8B5E0C              <4> 			mov bx,[bp+0x0C]
   833 00000200 55                  <4> 			push bp
   834                              <4> 			__shl32 ax, bx, 1
   835                              <5>  stkopen 5
   836 00000201 83EC05              <6>  sub word sp, %1
   837 00000204 54                  <6>  push sp
   838 00000205 5D                  <6>  pop bp
   839 00000206 894600              <5>  mov word [bp+0], %1
   840 00000209 895E02              <5>  mov word [bp+2], %2
   841 0000020C C6460401            <5>  mov byte [bp+4], %3
   842 00000210 E82101              <5>  call proc_shl32
   843 00000213 54                  <5>  push sp
   844 00000214 5D                  <5>  pop bp
   845 00000215 8B4600              <5>  mov word %1, [bp+0]
   846 00000218 8B5E02              <5>  mov word %2, [bp+2]
   847                              <5>  stkclose 5
   848 0000021B 83C405              <6>  add word sp, %1
   849 0000021E 5D                  <4> 			pop bp				
   850 0000021F 59                  <4> 			pop cx	
   851                              <4> 									
   852 00000220 80F900              <4> 			cmp cl,0
   853 00000223 7C12                <4> 			jl .l11
   854 00000225 83C301              <4> 				add bx,1
   855 00000228 83D000              <4> 				adc ax,0	
   856                              <4> 				
   857 0000022B 8B4E06              <4> 				mov cx,[bp+6]
   858 0000022E 8B5608              <4> 				mov dx,[bp+8]
   859 00000231 295610              <4> 				sub [bp+0x10],dx
   860 00000234 194E0E              <4> 				sbb [bp+0x0E],cx							
   861                              <4> 			.l11:							
   862 00000237 89460A              <4> 			mov word [bp+0x0A], ax
   863 0000023A 895E0C              <4> 			mov word [bp+0x0C], bx					
   864                              <4> 					
   865 0000023D 59                  <4> 			pop cx
   866 0000023E 51                  <4> 			push cx												
   867                              <4> 			
   868 0000023F 80F920              <4> 			cmp cl,32
   869 00000242 7342                <4> 			jae .l2
   870                              <4> 						
   871 00000244 59                  <4> 			pop cx
   872                              <4> 			stkopen 9
   873 00000245 83EC09              <5>  sub word sp, %1
   874 00000248 54                  <5>  push sp
   875 00000249 5D                  <5>  pop bp
   876 0000024A 8B460B              <4> 			mov ax,[bp+0x0B]
   877 0000024D 894600              <4> 			mov word [bp+0], ax
   878 00000250 8B460D              <4> 			mov ax,[bp+0x0D]
   879 00000253 894602              <4> 			mov word [bp+2], ax
   880 00000256 8B4617              <4> 			mov ax,[bp+0x17]
   881 00000259 894604              <4> 			mov word [bp+4], ax
   882 0000025C 8B4619              <4> 			mov ax,[bp+0x19]
   883 0000025F 894606              <4> 			mov word [bp+6], ax
   884 00000262 884E08              <4> 			mov byte [bp+8], cl
   885 00000265 E8AD02              <4> 			call proc_calc_prox_dividendo
   886 00000268 89E0                <4> 			mov ax,sp
   887 0000026A 89C5                <4> 			mov bp,ax
   888 0000026C 8B4604              <4> 			mov word ax,[bp+4]
   889 0000026F 8B5E06              <4> 			mov word bx,[bp+6]
   890 00000272 8A4E08              <4> 			mov byte cl,[bp+8] 
   891                              <4> 			stkclose 9
   892 00000275 83C409              <5>  add word sp, %1
   893 00000278 89E2                <4> 			mov dx,sp
   894 0000027A 89D5                <4> 			mov bp,dx
   895 0000027C 89460E              <4> 			mov [bp+0x0E],ax
   896 0000027F 895E10              <4> 			mov [bp+0x10],bx
   897 00000282 51                  <4> 			push cx
   898 00000283 E93DFF              <4> 			jmp .l1
   899                              <4> 		.l2:	
   900 00000286 59                  <4> 		pop cx
   901                              <4> 			
   902 00000287 EB16                <4> 		jmp .enddiv
   903                              <4> 	.qzero:
   904 00000289 C7460A0000          <4> 		mov word [bp+0x0A], 0
   905 0000028E C7460C0000          <4> 		mov word [bp+0x0C], 0
   906 00000293 8B4602              <4> 		mov ax,[bp+2]
   907 00000296 89460E              <4> 		mov word [bp+0x0E], ax
   908 00000299 8B4604              <4> 		mov ax,[bp+4]
   909 0000029C 894610              <4> 		mov word [bp+0x10], ax	
   910                              <4> 	.enddiv:
   911 0000029F C6461200            <4> 		mov byte [bp+0x12], 0
   912 000002A3 EB04                <4> 		jmp .end
   913                              <4> 	.divbyzero:
   914 000002A5 C6461201            <4> 		mov byte [bp+0x12], 1						
   915                              <4> 	.end:		
   916                              <4> 			
   917 000002A9 C3                  <4> 	ret
   918                              <4> 		
   919                              <4> proc_mul32:
   920 000002AA 89E0                <4> 	mov ax,sp
   921 000002AC 89C5                <4> 	mov bp,ax
   922                              <4> 	
   923 000002AE 31D2                <4> 	xor dx,dx
   924 000002B0 8B4604              <4> 	mov ax,[bp+4]
   925 000002B3 F76608              <4> 	mul word [bp+8]
   926                              <4> 	
   927 000002B6 89560A              <4> 	mov word [bp+0x0A], dx
   928 000002B9 89460C              <4> 	mov word [bp+0x0C], ax	
   929                              <4> 	
   930 000002BC 31D2                <4> 	xor dx,dx
   931 000002BE 8B4604              <4> 	mov ax,[bp+4]
   932 000002C1 F76606              <4> 	mul word [bp+6]
   933                              <4> 		
   934 000002C4 01460A              <4> 	add word [bp+0x0A],ax
   935                              <4> 	
   936 000002C7 31D2                <4> 	xor dx,dx
   937 000002C9 8B4602              <4> 	mov ax,[bp+2]
   938 000002CC F76608              <4> 	mul word [bp+8]
   939                              <4> 	
   940 000002CF 01460A              <4> 	add word [bp+0x0A],ax
   941                              <4> 	
   942 000002D2 C3                  <4> 	ret
   943                              <4> 
   944                              <4> proc_add32:
   945 000002D3 89E0                <4> 	mov ax,sp
   946 000002D5 89C5                <4> 	mov bp,ax
   947                              <4> 	
   948 000002D7 8B4602              <4> 	mov ax,[bp+2]
   949 000002DA 8B5E04              <4> 	mov bx,[bp+4]
   950 000002DD 8B4E06              <4> 	mov cx,[bp+6]
   951 000002E0 8B5608              <4> 	mov dx,[bp+8]
   952                              <4> 	
   953 000002E3 01D3                <4> 	add bx,dx
   954 000002E5 11C8                <4> 	adc ax,cx
   955                              <4> 	
   956 000002E7 89460A              <4> 	mov [bp+0x0A],ax
   957 000002EA 895E0C              <4> 	mov [bp+0x0C],bx	
   958                              <4> 	
   959 000002ED C3                  <4> 	ret
   960                              <4> 	
   961                              <4> proc_sub32:
   962 000002EE 89E0                <4> 	mov ax,sp
   963 000002F0 89C5                <4> 	mov bp,ax
   964                              <4> 	
   965 000002F2 8B4602              <4> 	mov ax,[bp+2]
   966 000002F5 8B5E04              <4> 	mov bx,[bp+4]
   967 000002F8 8B4E06              <4> 	mov cx,[bp+6]
   968 000002FB 8B5608              <4> 	mov dx,[bp+8]
   969                              <4> 	
   970 000002FE 29D3                <4> 	sub bx,dx
   971 00000300 19C8                <4> 	sbb ax,cx
   972                              <4> 	
   973 00000302 89460A              <4> 	mov [bp+0x0A],ax
   974 00000305 895E0C              <4> 	mov [bp+0x0C],bx	
   975                              <4> 	
   976 00000308 C3                  <4> 	ret
   977                              <4> 		
   978                              <4> proc_cmp32:
   979 00000309 89E0                <4> 	mov ax,sp
   980 0000030B 89C5                <4> 	mov bp,ax		
   981                              <4> 		
   982 0000030D 8B4602              <4> 	mov ax,[bp+2]
   983 00000310 3B4606              <4> 	cmp word ax,[bp+6]
   984 00000313 7F04                <4> 	jg .above
   985 00000315 7C08                <4> 	jl .below
   986 00000317 740C                <4> 	je .equal
   987                              <4> 	.above:
   988 00000319 C6460A01            <4> 		mov byte [bp+0x0A], 00000001b
   989 0000031D EB14                <4> 		jmp .endcmp
   990                              <4> 	.below:
   991 0000031F C6460A81            <4> 		mov byte [bp+0x0A], 10000001b
   992 00000323 EB0E                <4> 		jmp .endcmp
   993                              <4> 	.equal:
   994 00000325 8B4604              <4> 		mov ax,[bp+4]
   995 00000328 3B4608              <4> 		cmp word ax,[bp+8]
   996 0000032B 7FEC                <4> 		jg .above
   997 0000032D 7CF0                <4> 		jl .below
   998 0000032F C6460A00            <4> 		mov byte [bp+0x0A], 00000000b
   999                              <4> 	.endcmp:		
  1000 00000333 C3                  <4> 	ret
  1001                              <4> 
  1002                              <4> proc_shl32:
  1003 00000334 89E0                <4> 	mov ax,sp
  1004 00000336 89C5                <4> 	mov bp,ax
  1005                              <4> 	
  1006 00000338 31C0                <4> 	xor ax,ax
  1007 0000033A 8A4606              <4> 	mov byte al,[bp+6]
  1008 0000033D B310                <4> 	mov bl,10h
  1009 0000033F F6F3                <4> 	div bl
  1010                              <4> 					
  1011 00000341 3C01                <4> 	cmp al,1
  1012 00000343 7204                <4> 	jb .zero
  1013 00000345 7418                <4> 	je .one	
  1014 00000347 EB27                <4> 	jmp .above
  1015                              <4> 	.zero:	
  1016 00000349 B110                <4> 		mov cl,10h
  1017 0000034B 28E1                <4> 		sub cl,ah
  1018 0000034D 8B5E04              <4> 		mov bx,[bp+4]		
  1019 00000350 D3EB                <4> 		shr bx,cl
  1020                              <4> 		
  1021 00000352 88E1                <4> 		mov cl,ah		
  1022 00000354 D36602              <4> 		shl word [bp+2],cl
  1023 00000357 015E02              <4> 		add word [bp+2],bx				
  1024 0000035A D36604              <4> 		shl word [bp+4],cl
  1025 0000035D EB1B                <4> 		jmp .endzo
  1026                              <4> 	.one:
  1027 0000035F 88E1                <4> 		mov cl,ah
  1028 00000361 8B5E04              <4> 		mov bx, [bp+4]				
  1029 00000364 D3E3                <4> 		shl bx, cl 
  1030 00000366 895E02              <4> 		mov word [bp+2], bx
  1031 00000369 C746040000          <4> 		mov word [bp+4], 0
  1032 0000036E EB0A                <4> 		jmp .endzo
  1033                              <4> 	.above:		
  1034 00000370 C746020000          <4> 		mov word [bp+2], 0
  1035 00000375 C746040000          <4> 		mov word [bp+4], 0
  1036                              <4> 	.endzo:	
  1037                              <4> 	
  1038 0000037A C3                  <4> 	ret
  1039                              <4> 	
  1040                              <4> proc_shr32:
  1041 0000037B 89E0                <4> 	mov ax,sp
  1042 0000037D 89C5                <4> 	mov bp,ax
  1043                              <4> 	
  1044 0000037F 31C0                <4> 	xor ax,ax
  1045 00000381 8A4606              <4> 	mov byte al,[bp+6]
  1046 00000384 B310                <4> 	mov bl,10h
  1047 00000386 F6F3                <4> 	div bl
  1048                              <4> 					
  1049 00000388 3C01                <4> 	cmp al,1
  1050 0000038A 7204                <4> 	jb .zero
  1051 0000038C 7418                <4> 	je .one	
  1052 0000038E EB27                <4> 	jmp .above
  1053                              <4> 	.zero:	
  1054 00000390 B110                <4> 		mov cl,10h
  1055 00000392 28E1                <4> 		sub cl,ah		
  1056 00000394 8B5E02              <4> 		mov bx,[bp+2]		
  1057 00000397 D3E3                <4> 		shl bx,cl
  1058                              <4> 		
  1059 00000399 88E1                <4> 		mov cl,ah		
  1060 0000039B D36E02              <4> 		shr word [bp+2],cl
  1061 0000039E D36E04              <4> 		shr word [bp+4],cl
  1062 000003A1 015E04              <4> 		add word [bp+4],bx	
  1063 000003A4 EB1B                <4> 		jmp .endzo
  1064                              <4> 	.one:			
  1065 000003A6 88E1                <4> 		mov cl,ah
  1066 000003A8 8B5E02              <4> 		mov bx,[bp+2]
  1067 000003AB D3EB                <4> 		shr bx,cl
  1068 000003AD C746020000          <4> 		mov word [bp+2],0 
  1069 000003B2 895E04              <4> 		mov word [bp+4],bx
  1070 000003B5 EB0A                <4> 		jmp .endzo
  1071                              <4> 	.above:		
  1072 000003B7 C746020000          <4> 		mov word [bp+2],0
  1073 000003BC C746040000          <4> 		mov word [bp+4],0
  1074                              <4> 	.endzo:		
  1075                              <4> 
  1076 000003C1 C3                  <4> 	ret
  1077                              <4> 	
  1078                              <4> proc__lzcount16:
  1079 000003C2 89E0                <4> 	mov ax,sp
  1080 000003C4 89C5                <4> 	mov bp,ax
  1081                              <4> 	
  1082 000003C6 B100                <4> 	mov cl,0
  1083                              <4> 		
  1084 000003C8 8A6603              <4> 	mov ah, [bp+3]	
  1085 000003CB 80E4F0              <4> 	and ah,0xF0
  1086 000003CE 80FC00              <4> 	cmp ah,0
  1087 000003D1 7529                <4> 	jnz .end
  1088 000003D3 FEC1                <4> 	inc cl
  1089                              <4> 	
  1090 000003D5 8A6603              <4> 	mov ah, [bp+3]
  1091 000003D8 80E40F              <4> 	and ah,0x0F
  1092 000003DB 80FC00              <4> 	cmp ah,0
  1093 000003DE 751C                <4> 	jnz .end
  1094 000003E0 FEC1                <4> 	inc cl
  1095                              <4> 	
  1096 000003E2 8A6602              <4> 	mov ah, [bp+2]
  1097 000003E5 80E4F0              <4> 	and ah,0xF0
  1098 000003E8 80FC00              <4> 	cmp ah,0
  1099 000003EB 750F                <4> 	jnz .end
  1100 000003ED FEC1                <4> 	inc cl
  1101                              <4> 	
  1102 000003EF 8A6602              <4> 	mov ah, [bp+2]
  1103 000003F2 80E40F              <4> 	and ah,0x0F
  1104 000003F5 80FC00              <4> 	cmp ah,0
  1105 000003F8 7502                <4> 	jnz .end
  1106 000003FA FEC1                <4> 	inc cl
  1107                              <4> 		
  1108                              <4> 	.end:
  1109 000003FC 884E04              <4> 	mov byte [bp+4], cl
  1110                              <4> 	
  1111 000003FF C3                  <4> 	ret
  1112                              <4> 
  1113                              <4> proc__lzbitcount16:
  1114 00000400 89E0                <4> 	mov ax,sp
  1115 00000402 89C5                <4> 	mov bp,ax
  1116                              <4> 	
  1117 00000404 8B4602              <4> 	mov word ax,[bp+2]
  1118                              <4> 		
  1119 00000407 B100                <4> 	mov cl,0
  1120                              <4> 	.l1:
  1121 00000409 80F910              <4> 		cmp cl,16
  1122 0000040C 7310                <4> 		jae .l2
  1123                              <4> 		
  1124 0000040E 89C3                <4> 		mov bx,ax
  1125 00000410 D3E3                <4> 		shl bx,cl
  1126 00000412 C1EB0F              <4> 		shr bx,15
  1127                              <4> 		
  1128 00000415 83FB00              <4> 		cmp bx,0
  1129 00000418 7504                <4> 		jnz .l2
  1130                              <4> 		
  1131 0000041A FEC1                <4> 		inc cl		
  1132 0000041C EBEB                <4> 		jmp .l1
  1133                              <4> 	.l2:
  1134                              <4> 	
  1135 0000041E 884E04              <4> 	mov byte [bp+4], cl
  1136                              <4> 	
  1137 00000421 C3                  <4> 	ret
  1138                              <4> 	
  1139                              <4> proc__lzbitcount8:
  1140 00000422 89E0                <4> 	mov ax,sp
  1141 00000424 89C5                <4> 	mov bp,ax
  1142                              <4> 	
  1143 00000426 8A4602              <4> 	mov byte al,[bp+2]
  1144                              <4> 	
  1145 00000429 B100                <4> 	mov cl,0
  1146                              <4> 	.l1:
  1147 0000042B 80F908              <4> 		cmp cl,8
  1148 0000042E 7410                <4> 		je .l2
  1149                              <4> 		
  1150 00000430 88C3                <4> 		mov bl,al
  1151 00000432 D2E3                <4> 		shl bl,cl
  1152 00000434 C0EB07              <4> 		shr bl,7
  1153                              <4> 		
  1154 00000437 80FB00              <4> 		cmp bl,0
  1155 0000043A 7504                <4> 		jnz .l2
  1156                              <4> 		
  1157 0000043C FEC1                <4> 		inc cl		
  1158 0000043E EBEB                <4> 		jmp .l1
  1159                              <4> 	.l2:
  1160                              <4> 	
  1161 00000440 884E03              <4> 	mov byte [bp+3], cl
  1162                              <4> 		
  1163 00000443 C3                  <4> 	ret
  1164                              <4> 	
  1165                              <4> proc_calc_dividendo1:
  1166 00000444 89E0                <4> 	mov ax,sp
  1167 00000446 89C5                <4> 	mov bp,ax
  1168                              <4> 	
  1169 00000448 8B4606              <4> 	mov ax,[bp+6]
  1170 0000044B 8B5E08              <4> 	mov bx,[bp+8]
  1171 0000044E 55                  <4> 	push bp
  1172                              <4> 	__lzbitcount32 ax, bx, cl
  1173 0000044F 53                  <5>  push %2
  1174                              <5>  __lzbitcount16 %1, cl
  1175                              <6>  stkopen 3
  1176 00000450 83EC03              <7>  sub word sp, %1
  1177 00000453 54                  <7>  push sp
  1178 00000454 5D                  <7>  pop bp
  1179 00000455 894600              <6>  mov word [bp+0], %1
  1180 00000458 E8A5FF              <6>  call proc__lzbitcount16
  1181 0000045B 54                  <6>  push sp
  1182 0000045C 5D                  <6>  pop bp
  1183 0000045D 8A4E02              <6>  mov byte %2, [bp+2]
  1184                              <6>  stkclose 3
  1185 00000460 83C403              <7>  add word sp, %1
  1186 00000463 58                  <5>  pop ax
  1187 00000464 80F910              <5>  cmp cl,16
  1188 00000467 7217                <5>  jb .end
  1189 00000469 51                  <5>  push cx
  1190                              <5>  __lzbitcount16 ax, al
  1191                              <6>  stkopen 3
  1192 0000046A 83EC03              <7>  sub word sp, %1
  1193 0000046D 54                  <7>  push sp
  1194 0000046E 5D                  <7>  pop bp
  1195 0000046F 894600              <6>  mov word [bp+0], %1
  1196 00000472 E88BFF              <6>  call proc__lzbitcount16
  1197 00000475 54                  <6>  push sp
  1198 00000476 5D                  <6>  pop bp
  1199 00000477 8A4602              <6>  mov byte %2, [bp+2]
  1200                              <6>  stkclose 3
  1201 0000047A 83C403              <7>  add word sp, %1
  1202 0000047D 59                  <5>  pop cx
  1203 0000047E 00C1                <5>  add cl,al
  1204                              <5>  .end:
  1205 00000480 88C9                <5>  mov byte %3, cl
  1206 00000482 5D                  <4> 	pop bp
  1207 00000483 B320                <4> 	mov bl,32
  1208 00000485 28CB                <4> 	sub bl,cl
  1209 00000487 53                  <4> 	push bx
  1210                              <4> 		
  1211 00000488 8B4602              <4> 	mov ax,[bp+2]
  1212 0000048B 8B5604              <4> 	mov dx,[bp+4]
  1213 0000048E 55                  <4> 	push bp
  1214                              <4> 	__shr32 ax, dx, cl
  1215                              <5>  stkopen 5
  1216 0000048F 83EC05              <6>  sub word sp, %1
  1217 00000492 54                  <6>  push sp
  1218 00000493 5D                  <6>  pop bp
  1219 00000494 894600              <5>  mov word [bp+0], %1
  1220 00000497 895602              <5>  mov word [bp+2], %2
  1221 0000049A 884E04              <5>  mov byte [bp+4], %3
  1222 0000049D E8DBFE              <5>  call proc_shr32
  1223 000004A0 54                  <5>  push sp
  1224 000004A1 5D                  <5>  pop bp
  1225 000004A2 8B4600              <5>  mov word %1, [bp+0]
  1226 000004A5 8B5602              <5>  mov word %2, [bp+2]
  1227                              <5>  stkclose 5
  1228 000004A8 83C405              <6>  add word sp, %1
  1229 000004AB 5D                  <4> 	pop bp
  1230 000004AC 50                  <4> 	push ax
  1231 000004AD 52                  <4> 	push dx	
  1232                              <4> 	
  1233 000004AE 8B4E06              <4> 	mov cx,[bp+6]
  1234 000004B1 8B5E08              <4> 	mov bx,[bp+8]
  1235                              <4> 	
  1236 000004B4 55                  <4> 	push bp
  1237                              <4> 	__cmp32 ax, dx, cx, bx, cl
  1238                              <5>  stkopen 9
  1239 000004B5 83EC09              <6>  sub word sp, %1
  1240 000004B8 54                  <6>  push sp
  1241 000004B9 5D                  <6>  pop bp
  1242 000004BA 894600              <5>  mov word [bp+0], %1
  1243 000004BD 895602              <5>  mov word [bp+2], %2
  1244 000004C0 894E04              <5>  mov word [bp+4], %3
  1245 000004C3 895E06              <5>  mov word [bp+6], %4
  1246 000004C6 E840FE              <5>  call proc_cmp32
  1247 000004C9 54                  <5>  push sp
  1248 000004CA 5D                  <5>  pop bp
  1249 000004CB 8A4E08              <5>  mov byte %5, [bp+8]
  1250                              <5>  stkclose 9
  1251 000004CE 83C409              <6>  add word sp, %1
  1252 000004D1 5D                  <4> 	pop bp
  1253 000004D2 5A                  <4> 	pop dx
  1254 000004D3 58                  <4> 	pop ax
  1255 000004D4 5B                  <4> 	pop bx
  1256                              <4> 		
  1257 000004D5 80F900              <4> 	cmp cl,0
  1258 000004D8 7D2D                <4> 	jge .l1
  1259                              <4> 		stkopen 9
  1260 000004DA 83EC09              <5>  sub word sp, %1
  1261 000004DD 54                  <5>  push sp
  1262 000004DE 5D                  <5>  pop bp
  1263 000004DF 8B4E0B              <4> 		mov cx,[bp+0x0B]
  1264 000004E2 894E00              <4> 		mov word [bp+0], cx
  1265 000004E5 8B4E0D              <4> 		mov cx,[bp+0x0D]
  1266 000004E8 894E02              <4> 		mov word [bp+2], cx
  1267 000004EB 894604              <4> 		mov word [bp+4], ax
  1268 000004EE 895606              <4> 		mov word [bp+6], dx
  1269 000004F1 885E08              <4> 		mov byte [bp+8], bl
  1270 000004F4 E81E00              <4> 		call proc_calc_prox_dividendo
  1271 000004F7 89E0                <4> 		mov ax,sp
  1272 000004F9 89C5                <4> 		mov bp,ax
  1273 000004FB 8B4604              <4> 		mov word ax,[bp+4]
  1274 000004FE 8B5606              <4> 		mov word dx,[bp+6]
  1275 00000501 8A5E08              <4> 		mov byte bl,[bp+8] 
  1276                              <4> 		stkclose 9		 
  1277 00000504 83C409              <5>  add word sp, %1
  1278                              <4> 	.l1:
  1279                              <4> 	
  1280 00000507 89E1                <4> 	mov cx,sp
  1281 00000509 89CD                <4> 	mov bp,cx
  1282 0000050B 89460A              <4> 	mov word [bp+0x0A], ax
  1283 0000050E 89560C              <4> 	mov word [bp+0x0C], dx
  1284 00000511 885E0E              <4> 	mov byte [bp+0x0E], bl	 
  1285                              <4> 	
  1286 00000514 C3                  <4> 	ret
  1287                              <4> 
  1288                              <4> proc_calc_prox_dividendo:
  1289 00000515 89E0                <4> 	mov ax,sp
  1290 00000517 89C5                <4> 	mov bp,ax
  1291                              <4> 	
  1292 00000519 30E4                <4> 	xor ah,ah	
  1293 0000051B 8A460A              <4> 	mov al,[bp+0x0A]
  1294 0000051E B310                <4> 	mov bl,10h
  1295 00000520 F6F3                <4> 	div bl
  1296                              <4> 	
  1297 00000522 3C00                <4> 	cmp al,0
  1298 00000524 7402                <4> 	jz .zero
  1299 00000526 EB05                <4> 	jmp .one
  1300                              <4> 	.zero:
  1301 00000528 8B5E02              <4> 		mov bx,[bp+2]
  1302 0000052B EB03                <4> 		jmp .endcmp
  1303                              <4> 	.one:
  1304 0000052D 8B5E04              <4> 		mov bx,[bp+4]		
  1305                              <4> 	.endcmp:
  1306                              <4> 		
  1307 00000530 88E1                <4> 	mov cl,ah
  1308 00000532 D3E3                <4> 	shl bx,cl
  1309 00000534 C1EB0F              <4> 	shr bx,15
  1310                              <4> 	
  1311 00000537 8B4606              <4> 	mov ax,[bp+6]
  1312 0000053A 8B5608              <4> 	mov dx,[bp+8]
  1313 0000053D 53                  <4> 	push bx
  1314                              <4> 	__shl32 ax, dx, 1
  1315                              <5>  stkopen 5
  1316 0000053E 83EC05              <6>  sub word sp, %1
  1317 00000541 54                  <6>  push sp
  1318 00000542 5D                  <6>  pop bp
  1319 00000543 894600              <5>  mov word [bp+0], %1
  1320 00000546 895602              <5>  mov word [bp+2], %2
  1321 00000549 C6460401            <5>  mov byte [bp+4], %3
  1322 0000054D E8E4FD              <5>  call proc_shl32
  1323 00000550 54                  <5>  push sp
  1324 00000551 5D                  <5>  pop bp
  1325 00000552 8B4600              <5>  mov word %1, [bp+0]
  1326 00000555 8B5602              <5>  mov word %2, [bp+2]
  1327                              <5>  stkclose 5
  1328 00000558 83C405              <6>  add word sp, %1
  1329 0000055B 5B                  <4> 	pop bx
  1330                              <4> 	
  1331 0000055C 01DA                <4> 	add dx,bx
  1332 0000055E 83D000              <4> 	adc ax,0
  1333                              <4> 
  1334 00000561 89E1                <4> 	mov cx,sp
  1335 00000563 89CD                <4> 	mov bp,cx	
  1336 00000565 894606              <4> 	mov [bp+6],ax
  1337 00000568 895608              <4> 	mov [bp+8],dx
  1338                              <4> 	
  1339 0000056B FE460A              <4> 	inc byte [bp+0x0A]
  1340                              <4> 	
  1341 0000056E C3                  <4> 	ret
  1342                              <4> 	
  1343                              <4> %endif
  1344                              <3> 	%include "lib/system.mac"
  1345                              <4>  
  1346                              <4> %ifndef SYSTEM_MAC
  1347                              <4>  	%define SYSTEM_MAC
  1348                              <4>  	
  1349                              <4> 	%ifndef TRUE
  1350                              <4> 		%define TRUE 01h
  1351                              <4> 	%endif
  1352                              <4> 	%ifndef FALSE
  1353                              <4> 		%define FALSE 00h
  1354                              <4> 	%endif
  1355                              <4> 	
  1356                              <4> %macro vlodsb 3
  1357                              <4> 	vlodsb cs, %1, %2, %3
  1358                              <4> %endmacro
  1359                              <4> 
  1360                              <4> %macro vstosb 3
  1361                              <4> 	vstosb cs, %1, %2, %3
  1362                              <4> %endmacro
  1363                              <4> 	 	
  1364                              <4> %macro int16toreg 2
  1365                              <4> 	int16toreg cs, %1, %2
  1366                              <4> %endmacro
  1367                              <4> 
  1368                              <4> %macro regtoint16 2
  1369                              <4> 	regtoint16 %1, cs, %2
  1370                              <4> %endmacro
  1371                              <4> 
  1372                              <4> %macro vstosb 4
  1373                              <4> 	push %1
  1374                              <4> 	pop ds
  1375                              <4> 	mov si,%2
  1376                              <4> 	add si,%3
  1377                              <4> 	mov byte [si],%4	
  1378                              <4> %endmacro
  1379                              <4> 
  1380                              <4> %macro vlodsb 4
  1381                              <4> 	push %1
  1382                              <4> 	pop ds
  1383                              <4> 	mov si,%2
  1384                              <4> 	add si,%3
  1385                              <4> 	mov byte %4,[si]	
  1386                              <4> %endmacro 	 
  1387                              <4> 
  1388                              <4> %macro int16toreg 3
  1389                              <4> 	push %2
  1390                              <4> 	push %1
  1391                              <4> 	pop ds
  1392                              <4> 	pop si
  1393                              <4> 	mov word %3,[si]	
  1394                              <4> %endmacro
  1395                              <4> 
  1396                              <4> %macro regtoint16 3
  1397                              <4> 	push %3
  1398                              <4> 	push %2
  1399                              <4> 	pop ds
  1400                              <4> 	pop si
  1401                              <4> 	mov word [si],%1	
  1402                              <4> %endmacro
  1403                              <4> 
  1404                              <4> %macro mov32 2
  1405                              <4> 	mov32 cs, %1, cs, %2
  1406                              <4> %endmacro
  1407                              <4> 
  1408                              <4> %macro mov16 2
  1409                              <4> 	mov16 cs, %1, cs, %2
  1410                              <4> %endmacro
  1411                              <4> 
  1412                              <4> %macro mov32 4
  1413                              <4> 	mov ax,%3
  1414                              <4> 	mov ds,ax
  1415                              <4> 	mov cx,[%4+2]
  1416                              <4> 	mov dx,[%4]
  1417                              <4> 	mov ax,%1
  1418                              <4> 	mov ds,ax
  1419                              <4> 	mov [%2+2],cx
  1420                              <4> 	mov [%2],dx
  1421                              <4> %endmacro
  1422                              <4> 
  1423                              <4> %macro mov16 4
  1424                              <4> 	mov ax,%3
  1425                              <4> 	mov ds,ax
  1426                              <4> 	mov bx,[%4]
  1427                              <4> 	mov ax,%1
  1428                              <4> 	mov ds,ax
  1429                              <4> 	mov [%2],bx
  1430                              <4> %endmacro
  1431                              <4>  	 	
  1432                              <4> %macro mformat 4
  1433                              <4> 	stkopen 8
  1434                              <4> 	mov word [ bp + 0 ], %1
  1435                              <4> 	mov word [ bp + 2 ], %2
  1436                              <4> 	mov word [ bp + 4 ], %3
  1437                              <4> 	mov word [ bp + 6 ], %4
  1438                              <4> 	call kernel_segment:mformat
  1439                              <4> 	stkclose 8
  1440                              <4> %endmacro
  1441                              <4> 
  1442                              <4> %macro malloc 6
  1443                              <4> 	stkopen 0Bh
  1444                              <4> 	mov word [ bp + 4 ], %3
  1445                              <4> 	mov word [ bp + 6 ], %4
  1446                              <4> 	mov word [ bp + 8 ], %5	
  1447                              <4> 	call kernel_segment:malloc
  1448                              <4> 	push sp
  1449                              <4> 	pop bp
  1450                              <4> 	mov word %1, [ bp ]
  1451                              <4> 	mov word %2, [ bp + 2 ]
  1452                              <4> 	mov byte %6, [ bp + 0x0A ]
  1453                              <4> 	stkclose 0Bh
  1454                              <4> %endmacro 	
  1455                              <4> 
  1456                              <4> %macro laddr 2
  1457                              <4> 	laddr %1, %2, %1, %2
  1458                              <4> %endmacro
  1459                              <4> 
  1460                              <4> %macro faddr 2
  1461                              <4> 	faddr %1, %2, %1, %2
  1462                              <4> %endmacro
  1463                              <4>  	
  1464                              <4> %macro laddr 4
  1465                              <4> 	stkopen 8
  1466                              <4> 	mov word [ bp + 4 ], %3
  1467                              <4> 	mov word [ bp + 6 ], %4	
  1468                              <4> 	call kernel_segment:laddr
  1469                              <4> 	push sp
  1470                              <4> 	pop bp
  1471                              <4> 	mov word %1, [ bp + 0 ]
  1472                              <4> 	mov word %2, [ bp + 2 ]	
  1473                              <4> 	stkclose 8
  1474                              <4> %endmacro
  1475                              <4> 
  1476                              <4> %macro faddr 4
  1477                              <4> 	stkopen 8
  1478                              <4> 	mov word [ bp + 4 ], %3
  1479                              <4> 	mov word [ bp + 6 ], %4	
  1480                              <4> 	call kernel_segment:faddr
  1481                              <4> 	push sp
  1482                              <4> 	pop bp
  1483                              <4> 	mov word %1, [ bp + 0 ]
  1484                              <4> 	mov word %2, [ bp + 2 ]	
  1485                              <4> 	stkclose 8
  1486                              <4> %endmacro	
  1487                              <4>  
  1488                              <4> 
  1489                              <4> %macro stkopen 1		
  1490                              <4> 	sub word sp, %1
  1491                              <4> 	push sp
  1492                              <4> 	pop bp
  1493                              <4> %endmacro
  1494                              <4> 
  1495                              <4> %macro stkclose 1
  1496                              <4> 	add word sp, %1
  1497                              <4> %endmacro
  1498                              <4> 
  1499                              <4> %macro stkload 1-* 	
  1500                              <4>  	%rep %0
  1501                              <4>  	 	%rotate -1
  1502                              <4>  		pop %1
  1503                              <4>  	%endrep
  1504                              <4>  	%rep %0
  1505                              <4>  		push %1
  1506                              <4>  		%rotate 1
  1507                              <4>  	%endrep
  1508                              <4> %endmacro
  1509                              <4> 
  1510                              <4> %macro stkpush 1-* 	
  1511                              <4>  	%rep %0
  1512                              <4>  		push %1
  1513                              <4>  		%rotate 1
  1514                              <4>  	%endrep 	
  1515                              <4> %endmacro
  1516                              <4>  
  1517                              <4> %macro stkpop 1-*
  1518                              <4>  	%rep %0
  1519                              <4>  	 	%rotate -1
  1520                              <4>  		pop %1
  1521                              <4>  	%endrep 	 	
  1522                              <4> %endmacro
  1523                              <4> 
  1524                              <4> %endif 
  1525                              <3> 
  1526                              <3> %macro chgsig 1
  1527                              <3> 	chgsig cs, %1
  1528                              <3> %endmacro
  1529                              <3> 
  1530                              <3> %macro cmp16 3
  1531                              <3> 	cmp16 cs, %1, cs, %2, %3
  1532                              <3> %endmacro
  1533                              <3> 
  1534                              <3> %macro mul16 2
  1535                              <3> 	mul16 cs, %1, cs, %2
  1536                              <3> %endmacro
  1537                              <3> 
  1538                              <3> %macro div16 2
  1539                              <3> 	div16 cs, %1, cs, %2
  1540                              <3> %endmacro
  1541                              <3> 
  1542                              <3> %macro mod16 2
  1543                              <3> 	mod16 cs, %1, cs, %2
  1544                              <3> %endmacro
  1545                              <3> 
  1546                              <3> %macro inc16 1
  1547                              <3> 	inc16 cs, %1
  1548                              <3> %endmacro
  1549                              <3> 
  1550                              <3> %macro dec16 1
  1551                              <3> 	dec16 cs, %1
  1552                              <3> %endmacro
  1553                              <3> 
  1554                              <3> %macro add16 2
  1555                              <3> 	add16 cs, %1, cs, %2
  1556                              <3> %endmacro
  1557                              <3> 
  1558                              <3> %macro sub16 2
  1559                              <3> 	sub16 cs, %1, cs, %2
  1560                              <3> %endmacro
  1561                              <3> 
  1562                              <3> %macro int32to16 2
  1563                              <3> 	int32to16 cs, %1, %2
  1564                              <3> %endmacro
  1565                              <3> 
  1566                              <3> %macro int16to32 2
  1567                              <3> 	int16to32 %1, cs, %2
  1568                              <3> %endmacro
  1569                              <3> 
  1570                              <3> %macro setsig 1
  1571                              <3> 	setsig cs, %1
  1572                              <3> %endmacro
  1573                              <3> 
  1574                              <3> %macro clrsig 1
  1575                              <3> 	clrsig cs, %1
  1576                              <3> %endmacro
  1577                              <3> 
  1578                              <3> %macro idiv32 5
  1579                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  1580                              <3> %endmacro
  1581                              <3> 
  1582                              <3> %macro imul32 3
  1583                              <3> 	imul32 cs, %1, cs, %2, cs, %3
  1584                              <3> %endmacro
  1585                              <3> 
  1586                              <3> %macro div32 5
  1587                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  1588                              <3> %endmacro
  1589                              <3> 
  1590                              <3> %macro mul32 3
  1591                              <3> 	mul32 cs, %1, cs, %2, cs, %3
  1592                              <3> %endmacro
  1593                              <3> 	
  1594                              <3> %macro add32 3
  1595                              <3> 	add32 cs, %1, cs, %2, cs, %3
  1596                              <3> %endmacro
  1597                              <3> 
  1598                              <3> %macro sub32 3
  1599                              <3> 	sub32 cs, %1, cs, %2, cs, %3
  1600                              <3> %endmacro
  1601                              <3> 
  1602                              <3> %macro int32to16 3
  1603                              <3> 	stkopen 0x06
  1604                              <3> 	mov ax,%1
  1605                              <3> 	mov ds,ax
  1606                              <3> 	mov ax,[%2+2]
  1607                              <3> 	mov word [bp+0], ax
  1608                              <3> 	mov ax,[%2]	
  1609                              <3> 	mov word [bp+2], ax
  1610                              <3> 	call proc_int32to16
  1611                              <3> 	mov ax,sp
  1612                              <3> 	mov bp,ax
  1613                              <3> 	mov ax,[bp+4]
  1614                              <3> 	mov word %3, ax	
  1615                              <3> 	stkclose 0x06
  1616                              <3> %endmacro
  1617                              <3> 
  1618                              <3> %macro int16to32 3
  1619                              <3> 	stkopen 0x06
  1620                              <3> 	mov word [bp+0], %1	
  1621                              <3> 	call proc_int16to32
  1622                              <3> 	mov ax,sp
  1623                              <3> 	mov bp,ax
  1624                              <3> 	mov ax,%2
  1625                              <3> 	mov ds,ax
  1626                              <3> 	mov ax,[bp+2]
  1627                              <3> 	mov [%3+2],ax
  1628                              <3> 	mov ax,[bp+4]
  1629                              <3> 	mov [%3],ax	
  1630                              <3> 	stkclose 0x06
  1631                              <3> %endmacro
  1632                              <3> 
  1633                              <3> %macro setsig 2
  1634                              <3> 	stkopen 0x02
  1635                              <3> 	mov ax,%1
  1636                              <3> 	mov ds,ax
  1637                              <3> 	mov ax,[%2+2]
  1638                              <3> 	mov word [bp+0], ax
  1639                              <3> 	call proc_setsig
  1640                              <3> 	mov ax,sp
  1641                              <3> 	mov bp,ax
  1642                              <3> 	mov ax,%1
  1643                              <3> 	mov ds,ax
  1644                              <3> 	mov ax,[bp+0]
  1645                              <3> 	mov word [%2+2], ax
  1646                              <3> 	stkclose 0x02
  1647                              <3> %endmacro
  1648                              <3> 
  1649                              <3> %macro clrsig 2
  1650                              <3> 	stkopen 0x02
  1651                              <3> 	mov ax,%1
  1652                              <3> 	mov ds,ax
  1653                              <3> 	mov ax,[%2+2]
  1654                              <3> 	mov word [bp+0], ax
  1655                              <3> 	call proc_clrsig
  1656                              <3> 	mov ax,sp
  1657                              <3> 	mov bp,ax
  1658                              <3> 	mov ax,%1
  1659                              <3> 	mov ds,ax
  1660                              <3> 	mov ax,[bp+0]
  1661                              <3> 	mov word [%2+2], ax
  1662                              <3> 	stkclose 0x02
  1663                              <3> %endmacro
  1664                              <3> 
  1665                              <3> %macro div32 10
  1666                              <3> 	stkopen 0x11
  1667                              <3> 	mov ax,%1
  1668                              <3> 	mov ds,ax
  1669                              <3> 	mov ax,[%2+2]
  1670                              <3> 	mov word [bp+0], ax
  1671                              <3> 	mov ax,[%2]
  1672                              <3> 	mov word [bp+2], ax
  1673                              <3> 	mov ax,%3
  1674                              <3> 	mov ds,ax
  1675                              <3> 	mov ax,[%4+2]
  1676                              <3> 	mov word [bp+4], ax
  1677                              <3> 	mov ax,[%4]
  1678                              <3> 	mov word [bp+6], ax
  1679                              <3> 	call proc_div32
  1680                              <3> 	mov ax,sp
  1681                              <3> 	mov bp,ax
  1682                              <3> 	mov ax,%5
  1683                              <3> 	mov ds,ax
  1684                              <3> 	mov word ax, [bp+8]
  1685                              <3> 	mov word [%6+2], ax
  1686                              <3> 	mov word ax, [bp+0x0A]
  1687                              <3> 	mov word [%6], ax
  1688                              <3> 	mov ax,%7
  1689                              <3> 	mov ds,ax
  1690                              <3> 	mov word ax,[bp+0x0C]
  1691                              <3> 	mov word [%8+2],ax
  1692                              <3> 	mov word ax,[bp+0x0E]
  1693                              <3> 	mov word [%8],ax
  1694                              <3> 	mov ax,%9
  1695                              <3> 	mov ds,ax
  1696                              <3> 	mov byte al,[bp+0x10]
  1697                              <3> 	mov byte [%10],al
  1698                              <3> 	stkclose 0x11
  1699                              <3> %endmacro
  1700                              <3> 	
  1701                              <3> %macro mul32 6
  1702                              <3> 	stkopen 0x0C
  1703                              <3> 	mov ax,%1
  1704                              <3> 	mov ds,ax
  1705                              <3> 	mov ax,[%2+2]
  1706                              <3> 	mov word [bp+0], ax
  1707                              <3> 	mov ax,[%2]
  1708                              <3> 	mov word [bp+2], ax
  1709                              <3> 	mov ax,%3
  1710                              <3> 	mov ds,ax
  1711                              <3> 	mov ax,[%4+2]
  1712                              <3> 	mov word [bp+4], ax
  1713                              <3> 	mov ax,[%4]
  1714                              <3> 	mov word [bp+6], ax
  1715                              <3> 	call proc_mul32
  1716                              <3> 	mov ax,sp
  1717                              <3> 	mov bp,ax
  1718                              <3> 	mov ax,%5
  1719                              <3> 	mov ds,ax
  1720                              <3> 	mov word ax, [bp+8]
  1721                              <3> 	mov word [%6+2], ax
  1722                              <3> 	mov word ax, [bp+0x0A]
  1723                              <3> 	mov word [%6], ax
  1724                              <3> 	stkclose 0x0C
  1725                              <3> %endmacro	
  1726                              <3> 	
  1727                              <3> %macro add32 6
  1728                              <3> 	stkopen 0x0C
  1729                              <3> 	mov ax,%1
  1730                              <3> 	mov ds,ax
  1731                              <3> 	mov ax,[%2+2]
  1732                              <3> 	mov word [bp+0], ax
  1733                              <3> 	mov ax,[%2]
  1734                              <3> 	mov word [bp+2], ax
  1735                              <3> 	mov ax,%3
  1736                              <3> 	mov ds,ax
  1737                              <3> 	mov ax,[%4+2]
  1738                              <3> 	mov word [bp+4], ax
  1739                              <3> 	mov ax,[%4]
  1740                              <3> 	mov word [bp+6], ax
  1741                              <3> 	call proc_add32
  1742                              <3> 	mov ax,sp
  1743                              <3> 	mov bp,ax
  1744                              <3> 	mov ax,%5
  1745                              <3> 	mov ds,ax
  1746                              <3> 	mov word ax, [bp+8]
  1747                              <3> 	mov word [%6+2], ax
  1748                              <3> 	mov word ax, [bp+0x0A]
  1749                              <3> 	mov word [%6], ax
  1750                              <3> 	stkclose 0x0C
  1751                              <3> %endmacro
  1752                              <3> 
  1753                              <3> %macro sub32 6
  1754                              <3> 	stkopen 0x0C
  1755                              <3> 	mov ax,%1
  1756                              <3> 	mov ds,ax
  1757                              <3> 	mov ax,[%2+2]
  1758                              <3> 	mov word [bp+0], ax
  1759                              <3> 	mov ax,[%2]
  1760                              <3> 	mov word [bp+2], ax
  1761                              <3> 	mov ax,%3
  1762                              <3> 	mov ds,ax
  1763                              <3> 	mov ax,[%4+2]
  1764                              <3> 	mov word [bp+4], ax
  1765                              <3> 	mov ax,[%4]
  1766                              <3> 	mov word [bp+6], ax
  1767                              <3> 	call proc_sub32
  1768                              <3> 	mov ax,sp
  1769                              <3> 	mov bp,ax
  1770                              <3> 	mov ax,%5
  1771                              <3> 	mov ds,ax
  1772                              <3> 	mov word ax, [bp+8]
  1773                              <3> 	mov word [%6+2], ax
  1774                              <3> 	mov word ax, [bp+0x0A]
  1775                              <3> 	mov word [%6], ax
  1776                              <3> 	stkclose 0x0C
  1777                              <3> %endmacro
  1778                              <3> 
  1779                              <3> %macro idiv32 10
  1780                              <3> 	stkopen 0x11
  1781                              <3> 	mov ax,%1
  1782                              <3> 	mov ds,ax
  1783                              <3> 	mov ax,[%2+2]
  1784                              <3> 	mov word [bp+0], ax
  1785                              <3> 	mov ax,[%2]
  1786                              <3> 	mov word [bp+2], ax
  1787                              <3> 	mov ax,%3
  1788                              <3> 	mov ds,ax
  1789                              <3> 	mov ax,[%4+2]
  1790                              <3> 	mov word [bp+4], ax
  1791                              <3> 	mov ax,[%4]
  1792                              <3> 	mov word [bp+6], ax
  1793                              <3> 	call proc_idiv32
  1794                              <3> 	mov ax,sp
  1795                              <3> 	mov bp,ax
  1796                              <3> 	mov ax,%5
  1797                              <3> 	mov ds,ax
  1798                              <3> 	mov word ax, [bp+8]
  1799                              <3> 	mov word [%6+2], ax
  1800                              <3> 	mov word ax, [bp+0x0A]
  1801                              <3> 	mov word [%6], ax
  1802                              <3> 	mov ax,%7
  1803                              <3> 	mov ds,ax
  1804                              <3> 	mov word ax,[bp+0x0C]
  1805                              <3> 	mov word [%8+2],ax
  1806                              <3> 	mov word ax,[bp+0x0E]
  1807                              <3> 	mov word [%8],ax
  1808                              <3> 	mov ax,%9
  1809                              <3> 	mov ds,ax
  1810                              <3> 	mov byte al,[bp+0x10]
  1811                              <3> 	mov byte [%10],al
  1812                              <3> 	stkclose 0x11
  1813                              <3> %endmacro
  1814                              <3> 
  1815                              <3> %macro imul32 6
  1816                              <3> 	stkopen 0x0C
  1817                              <3> 	mov ax,%1
  1818                              <3> 	mov ds,ax
  1819                              <3> 	mov ax,[%2+2]
  1820                              <3> 	mov word [bp+0], ax
  1821                              <3> 	mov ax,[%2]
  1822                              <3> 	mov word [bp+2], ax
  1823                              <3> 	mov ax,%3
  1824                              <3> 	mov ds,ax
  1825                              <3> 	mov ax,[%4+2]
  1826                              <3> 	mov word [bp+4], ax
  1827                              <3> 	mov ax,[%4]
  1828                              <3> 	mov word [bp+6], ax
  1829                              <3> 	call proc_imul32
  1830                              <3> 	mov ax,sp
  1831                              <3> 	mov bp,ax
  1832                              <3> 	mov ax,%5
  1833                              <3> 	mov ds,ax
  1834                              <3> 	mov word ax, [bp+8]
  1835                              <3> 	mov word [%6+2], ax
  1836                              <3> 	mov word ax, [bp+0x0A]
  1837                              <3> 	mov word [%6], ax
  1838                              <3> 	stkclose 0x0C
  1839                              <3> %endmacro
  1840                              <3> 	
  1841                              <3> %macro cmp32 3
  1842                              <3> 	cmp32 cs, %1, cs, %2, %3
  1843                              <3> %endmacro	
  1844                              <3> 	
  1845                              <3> %macro cmp32 5
  1846                              <3> 	stkopen 9
  1847                              <3> 	mov ax,%1
  1848                              <3> 	mov ds,ax
  1849                              <3> 	mov word ax,[%2+2]
  1850                              <3> 	mov word [bp+0], ax
  1851                              <3> 	mov word ax,[%2]
  1852                              <3> 	mov word [bp+2], ax	
  1853                              <3> 	mov ax,%3
  1854                              <3> 	mov ds,ax
  1855                              <3> 	mov word ax,[%4+2]
  1856                              <3> 	mov word [bp+4], ax
  1857                              <3> 	mov word ax,[%4]
  1858                              <3> 	mov word [bp+6], ax	
  1859                              <3> 	call proc_cmp32
  1860                              <3> 	mov ax,sp
  1861                              <3> 	mov bp,ax
  1862                              <3> 	mov al,[bp+8]
  1863                              <3> 	mov byte %5,al
  1864                              <3> 	stkclose 9
  1865                              <3> %endmacro
  1866                              <3> 	
  1867                              <3> %macro shl32 2
  1868                              <3> 	shl32 cs, %1, %2
  1869                              <3> %endmacro	
  1870                              <3> 	
  1871                              <3> %macro shl32 3
  1872                              <3> 	stkopen 5
  1873                              <3> 	mov ax,%1
  1874                              <3> 	mov ds,ax
  1875                              <3> 	mov word ax,[%2+2]
  1876                              <3> 	mov word [bp+0], ax
  1877                              <3> 	mov word ax,[%2]
  1878                              <3> 	mov word [bp+2], ax
  1879                              <3> 	mov byte al, %3
  1880                              <3> 	mov byte [bp+4], al 
  1881                              <3> 	call proc_shl32
  1882                              <3> 	mov ax,sp
  1883                              <3> 	mov bp,ax
  1884                              <3> 	mov ax,%1
  1885                              <3> 	mov ds,ax
  1886                              <3> 	mov ax,[bp+0]
  1887                              <3> 	mov word [%2+2],ax
  1888                              <3> 	mov ax,[bp+2]
  1889                              <3> 	mov word [%2],ax
  1890                              <3> 	stkclose 5
  1891                              <3> %endmacro
  1892                              <3> 
  1893                              <3> 
  1894                              <3> %macro shr32 2
  1895                              <3> 	shr32 cs, %1, %2
  1896                              <3> %endmacro	
  1897                              <3> 	
  1898                              <3> %macro shr32 3
  1899                              <3> 	stkopen 5
  1900                              <3> 	mov ax,%1
  1901                              <3> 	mov ds,ax
  1902                              <3> 	mov word ax,[%2+2]
  1903                              <3> 	mov word [bp+0], ax
  1904                              <3> 	mov word ax,[%2]
  1905                              <3> 	mov word [bp+2], ax
  1906                              <3> 	mov byte al, %3
  1907                              <3> 	mov byte [bp+4], al 
  1908                              <3> 	call proc_shr32
  1909                              <3> 	mov ax,sp
  1910                              <3> 	mov bp,ax
  1911                              <3> 	mov ax,%1
  1912                              <3> 	mov ds,ax
  1913                              <3> 	mov ax,[bp+0]
  1914                              <3> 	mov word [%2+2],ax
  1915                              <3> 	mov ax,[bp+2]
  1916                              <3> 	mov word [%2],ax
  1917                              <3> 	stkclose 5
  1918                              <3> %endmacro
  1919                              <3> 
  1920                              <3> %macro inc16 2
  1921                              <3> 	mov ax,%1
  1922                              <3> 	mov ds,ax
  1923                              <3> 	inc word [%2]
  1924                              <3> %endmacro
  1925                              <3> 
  1926                              <3> %macro dec16 2
  1927                              <3> 	mov ax,%1
  1928                              <3> 	mov ds,ax
  1929                              <3> 	dec word [%2]
  1930                              <3> %endmacro
  1931                              <3> 
  1932                              <3> %macro add16 4	
  1933                              <3> 	mov ax,%3
  1934                              <3> 	mov ds,ax
  1935                              <3> 	mov bx,[%4]	
  1936                              <3> 	mov ax,%1
  1937                              <3> 	mov ds,ax	
  1938                              <3> 	add [%2],bx
  1939                              <3> %endmacro
  1940                              <3> 
  1941                              <3> %macro sub16 4
  1942                              <3> 	mov ax,%3
  1943                              <3> 	mov ds,ax
  1944                              <3> 	mov bx,[%4]
  1945                              <3> 	mov ax,%1
  1946                              <3> 	mov ds,ax
  1947                              <3> 	sub [%2],bx
  1948                              <3> %endmacro
  1949                              <3> 
  1950                              <3> %macro mul16 4
  1951                              <3> 	mov ax,%1
  1952                              <3> 	mov ds,ax
  1953                              <3> 	mov bx,[%2]
  1954                              <3> 	mov ax,%3
  1955                              <3> 	mov ds,ax
  1956                              <3> 	mov cx,[%4]
  1957                              <3> 	
  1958                              <3> 	mov ax,bx
  1959                              <3> 	imul cx
  1960                              <3> 	
  1961                              <3> 	mov dx,%1
  1962                              <3> 	mov ds,dx
  1963                              <3> 	mov [%2],ax
  1964                              <3> %endmacro
  1965                              <3> 
  1966                              <3> %macro div16 4
  1967                              <3> 	mov ax,%1
  1968                              <3> 	mov ds,ax
  1969                              <3> 	mov bx,[%2]
  1970                              <3> 	mov ax,%3
  1971                              <3> 	mov ds,ax
  1972                              <3> 	mov cx,[%4]
  1973                              <3> 	
  1974                              <3> 	xor dx,dx
  1975                              <3> 	mov ax,bx
  1976                              <3> 	idiv cx
  1977                              <3> 	
  1978                              <3> 	mov dx,%1
  1979                              <3> 	mov ds,dx
  1980                              <3> 	mov [%2],ax
  1981                              <3> %endmacro
  1982                              <3> 
  1983                              <3> 
  1984                              <3> %macro mod16 4
  1985                              <3> 	mov ax,%1
  1986                              <3> 	mov ds,ax
  1987                              <3> 	mov bx,[%2]
  1988                              <3> 	mov ax,%3
  1989                              <3> 	mov ds,ax
  1990                              <3> 	mov cx,[%4]
  1991                              <3> 	
  1992                              <3> 	xor dx,dx
  1993                              <3> 	mov ax,bx
  1994                              <3> 	idiv cx
  1995                              <3> 	
  1996                              <3> 	mov bx,%1
  1997                              <3> 	mov ds,bx
  1998                              <3> 	mov [%2],dx
  1999                              <3> %endmacro
  2000                              <3> 
  2001                              <3> %macro cmp16 5
  2002                              <3> 	mov ax,%1
  2003                              <3> 	mov ds,ax
  2004                              <3> 	mov bx,[%2]
  2005                              <3> 	mov ax,%3
  2006                              <3> 	mov ds,ax
  2007                              <3> 	mov	cx,[%4]
  2008                              <3> 	
  2009                              <3> 	cmp bx,cx
  2010                              <3> 	jg %%above
  2011                              <3> 	jl %%below
  2012                              <3> 		mov byte %5, 0
  2013                              <3> 		jmp %%endcmp
  2014                              <3> 	%%above:
  2015                              <3> 		mov byte %5, 1
  2016                              <3> 		jmp %%endcmp
  2017                              <3> 	%%below:
  2018                              <3> 		mov byte %5, -1
  2019                              <3> 	%%endcmp:
  2020                              <3> %endmacro
  2021                              <3> 
  2022                              <3> %macro chgsig 2
  2023                              <3> 	mov ax,%1
  2024                              <3> 	mov ds,ax
  2025                              <3> 	mov ax,[%2]
  2026                              <3> 	mov bx,0xFFFF
  2027                              <3> 	sub bx,ax
  2028                              <3> 	inc bx
  2029                              <3> 	mov [%2],bx
  2030                              <3> %endmacro
  2031                              <3> 	
  2032                              <3> %endif
  2033                              <2> 	%include "lib/float.mac"
  2034                              <3> 
  2035                              <3> %ifndef FLOAT_MAC
  2036                              <3> 	%define FLOAT_MAC
  2037                              <3> 	
  2038                              <3> 	%include "lib/float.asm"
  2039                              <4> 
  2040                              <4> %ifndef FLOAT_ASM
  2041                              <4> 	%define FLOAT_ASM
  2042                              <4> 	
  2043                              <4> 	%include "lib/system.mac"
  2044                              <5>  
  2045                              <5> %ifndef SYSTEM_MAC
  2046                              <5>  	%define SYSTEM_MAC
  2047                              <5>  	
  2048                              <5> 	%ifndef TRUE
  2049                              <5> 		%define TRUE 01h
  2050                              <5> 	%endif
  2051                              <5> 	%ifndef FALSE
  2052                              <5> 		%define FALSE 00h
  2053                              <5> 	%endif
  2054                              <5> 	
  2055                              <5> %macro vlodsb 3
  2056                              <5> 	vlodsb cs, %1, %2, %3
  2057                              <5> %endmacro
  2058                              <5> 
  2059                              <5> %macro vstosb 3
  2060                              <5> 	vstosb cs, %1, %2, %3
  2061                              <5> %endmacro
  2062                              <5> 	 	
  2063                              <5> %macro int16toreg 2
  2064                              <5> 	int16toreg cs, %1, %2
  2065                              <5> %endmacro
  2066                              <5> 
  2067                              <5> %macro regtoint16 2
  2068                              <5> 	regtoint16 %1, cs, %2
  2069                              <5> %endmacro
  2070                              <5> 
  2071                              <5> %macro vstosb 4
  2072                              <5> 	push %1
  2073                              <5> 	pop ds
  2074                              <5> 	mov si,%2
  2075                              <5> 	add si,%3
  2076                              <5> 	mov byte [si],%4	
  2077                              <5> %endmacro
  2078                              <5> 
  2079                              <5> %macro vlodsb 4
  2080                              <5> 	push %1
  2081                              <5> 	pop ds
  2082                              <5> 	mov si,%2
  2083                              <5> 	add si,%3
  2084                              <5> 	mov byte %4,[si]	
  2085                              <5> %endmacro 	 
  2086                              <5> 
  2087                              <5> %macro int16toreg 3
  2088                              <5> 	push %2
  2089                              <5> 	push %1
  2090                              <5> 	pop ds
  2091                              <5> 	pop si
  2092                              <5> 	mov word %3,[si]	
  2093                              <5> %endmacro
  2094                              <5> 
  2095                              <5> %macro regtoint16 3
  2096                              <5> 	push %3
  2097                              <5> 	push %2
  2098                              <5> 	pop ds
  2099                              <5> 	pop si
  2100                              <5> 	mov word [si],%1	
  2101                              <5> %endmacro
  2102                              <5> 
  2103                              <5> %macro mov32 2
  2104                              <5> 	mov32 cs, %1, cs, %2
  2105                              <5> %endmacro
  2106                              <5> 
  2107                              <5> %macro mov16 2
  2108                              <5> 	mov16 cs, %1, cs, %2
  2109                              <5> %endmacro
  2110                              <5> 
  2111                              <5> %macro mov32 4
  2112                              <5> 	mov ax,%3
  2113                              <5> 	mov ds,ax
  2114                              <5> 	mov cx,[%4+2]
  2115                              <5> 	mov dx,[%4]
  2116                              <5> 	mov ax,%1
  2117                              <5> 	mov ds,ax
  2118                              <5> 	mov [%2+2],cx
  2119                              <5> 	mov [%2],dx
  2120                              <5> %endmacro
  2121                              <5> 
  2122                              <5> %macro mov16 4
  2123                              <5> 	mov ax,%3
  2124                              <5> 	mov ds,ax
  2125                              <5> 	mov bx,[%4]
  2126                              <5> 	mov ax,%1
  2127                              <5> 	mov ds,ax
  2128                              <5> 	mov [%2],bx
  2129                              <5> %endmacro
  2130                              <5>  	 	
  2131                              <5> %macro mformat 4
  2132                              <5> 	stkopen 8
  2133                              <5> 	mov word [ bp + 0 ], %1
  2134                              <5> 	mov word [ bp + 2 ], %2
  2135                              <5> 	mov word [ bp + 4 ], %3
  2136                              <5> 	mov word [ bp + 6 ], %4
  2137                              <5> 	call kernel_segment:mformat
  2138                              <5> 	stkclose 8
  2139                              <5> %endmacro
  2140                              <5> 
  2141                              <5> %macro malloc 6
  2142                              <5> 	stkopen 0Bh
  2143                              <5> 	mov word [ bp + 4 ], %3
  2144                              <5> 	mov word [ bp + 6 ], %4
  2145                              <5> 	mov word [ bp + 8 ], %5	
  2146                              <5> 	call kernel_segment:malloc
  2147                              <5> 	push sp
  2148                              <5> 	pop bp
  2149                              <5> 	mov word %1, [ bp ]
  2150                              <5> 	mov word %2, [ bp + 2 ]
  2151                              <5> 	mov byte %6, [ bp + 0x0A ]
  2152                              <5> 	stkclose 0Bh
  2153                              <5> %endmacro 	
  2154                              <5> 
  2155                              <5> %macro laddr 2
  2156                              <5> 	laddr %1, %2, %1, %2
  2157                              <5> %endmacro
  2158                              <5> 
  2159                              <5> %macro faddr 2
  2160                              <5> 	faddr %1, %2, %1, %2
  2161                              <5> %endmacro
  2162                              <5>  	
  2163                              <5> %macro laddr 4
  2164                              <5> 	stkopen 8
  2165                              <5> 	mov word [ bp + 4 ], %3
  2166                              <5> 	mov word [ bp + 6 ], %4	
  2167                              <5> 	call kernel_segment:laddr
  2168                              <5> 	push sp
  2169                              <5> 	pop bp
  2170                              <5> 	mov word %1, [ bp + 0 ]
  2171                              <5> 	mov word %2, [ bp + 2 ]	
  2172                              <5> 	stkclose 8
  2173                              <5> %endmacro
  2174                              <5> 
  2175                              <5> %macro faddr 4
  2176                              <5> 	stkopen 8
  2177                              <5> 	mov word [ bp + 4 ], %3
  2178                              <5> 	mov word [ bp + 6 ], %4	
  2179                              <5> 	call kernel_segment:faddr
  2180                              <5> 	push sp
  2181                              <5> 	pop bp
  2182                              <5> 	mov word %1, [ bp + 0 ]
  2183                              <5> 	mov word %2, [ bp + 2 ]	
  2184                              <5> 	stkclose 8
  2185                              <5> %endmacro	
  2186                              <5>  
  2187                              <5> 
  2188                              <5> %macro stkopen 1		
  2189                              <5> 	sub word sp, %1
  2190                              <5> 	push sp
  2191                              <5> 	pop bp
  2192                              <5> %endmacro
  2193                              <5> 
  2194                              <5> %macro stkclose 1
  2195                              <5> 	add word sp, %1
  2196                              <5> %endmacro
  2197                              <5> 
  2198                              <5> %macro stkload 1-* 	
  2199                              <5>  	%rep %0
  2200                              <5>  	 	%rotate -1
  2201                              <5>  		pop %1
  2202                              <5>  	%endrep
  2203                              <5>  	%rep %0
  2204                              <5>  		push %1
  2205                              <5>  		%rotate 1
  2206                              <5>  	%endrep
  2207                              <5> %endmacro
  2208                              <5> 
  2209                              <5> %macro stkpush 1-* 	
  2210                              <5>  	%rep %0
  2211                              <5>  		push %1
  2212                              <5>  		%rotate 1
  2213                              <5>  	%endrep 	
  2214                              <5> %endmacro
  2215                              <5>  
  2216                              <5> %macro stkpop 1-*
  2217                              <5>  	%rep %0
  2218                              <5>  	 	%rotate -1
  2219                              <5>  		pop %1
  2220                              <5>  	%endrep 	 	
  2221                              <5> %endmacro
  2222                              <5> 
  2223                              <5> %endif 
  2224                              <4> 	%include "lib/math.mac"
  2225                              <5> 
  2226                              <5> %ifndef MATH_MAC
  2227                              <5> 	%define MATH_MAC
  2228                              <5> 	
  2229                              <5> 	%include "lib/math.asm"
  2230                              <5> 	%include "lib/system.mac"
  2231                              <5> 
  2232                              <5> %macro chgsig 1
  2233                              <5> 	chgsig cs, %1
  2234                              <5> %endmacro
  2235                              <5> 
  2236                              <5> %macro cmp16 3
  2237                              <5> 	cmp16 cs, %1, cs, %2, %3
  2238                              <5> %endmacro
  2239                              <5> 
  2240                              <5> %macro mul16 2
  2241                              <5> 	mul16 cs, %1, cs, %2
  2242                              <5> %endmacro
  2243                              <5> 
  2244                              <5> %macro div16 2
  2245                              <5> 	div16 cs, %1, cs, %2
  2246                              <5> %endmacro
  2247                              <5> 
  2248                              <5> %macro mod16 2
  2249                              <5> 	mod16 cs, %1, cs, %2
  2250                              <5> %endmacro
  2251                              <5> 
  2252                              <5> %macro inc16 1
  2253                              <5> 	inc16 cs, %1
  2254                              <5> %endmacro
  2255                              <5> 
  2256                              <5> %macro dec16 1
  2257                              <5> 	dec16 cs, %1
  2258                              <5> %endmacro
  2259                              <5> 
  2260                              <5> %macro add16 2
  2261                              <5> 	add16 cs, %1, cs, %2
  2262                              <5> %endmacro
  2263                              <5> 
  2264                              <5> %macro sub16 2
  2265                              <5> 	sub16 cs, %1, cs, %2
  2266                              <5> %endmacro
  2267                              <5> 
  2268                              <5> %macro int32to16 2
  2269                              <5> 	int32to16 cs, %1, %2
  2270                              <5> %endmacro
  2271                              <5> 
  2272                              <5> %macro int16to32 2
  2273                              <5> 	int16to32 %1, cs, %2
  2274                              <5> %endmacro
  2275                              <5> 
  2276                              <5> %macro setsig 1
  2277                              <5> 	setsig cs, %1
  2278                              <5> %endmacro
  2279                              <5> 
  2280                              <5> %macro clrsig 1
  2281                              <5> 	clrsig cs, %1
  2282                              <5> %endmacro
  2283                              <5> 
  2284                              <5> %macro idiv32 5
  2285                              <5> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2286                              <5> %endmacro
  2287                              <5> 
  2288                              <5> %macro imul32 3
  2289                              <5> 	imul32 cs, %1, cs, %2, cs, %3
  2290                              <5> %endmacro
  2291                              <5> 
  2292                              <5> %macro div32 5
  2293                              <5> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2294                              <5> %endmacro
  2295                              <5> 
  2296                              <5> %macro mul32 3
  2297                              <5> 	mul32 cs, %1, cs, %2, cs, %3
  2298                              <5> %endmacro
  2299                              <5> 	
  2300                              <5> %macro add32 3
  2301                              <5> 	add32 cs, %1, cs, %2, cs, %3
  2302                              <5> %endmacro
  2303                              <5> 
  2304                              <5> %macro sub32 3
  2305                              <5> 	sub32 cs, %1, cs, %2, cs, %3
  2306                              <5> %endmacro
  2307                              <5> 
  2308                              <5> %macro int32to16 3
  2309                              <5> 	stkopen 0x06
  2310                              <5> 	mov ax,%1
  2311                              <5> 	mov ds,ax
  2312                              <5> 	mov ax,[%2+2]
  2313                              <5> 	mov word [bp+0], ax
  2314                              <5> 	mov ax,[%2]	
  2315                              <5> 	mov word [bp+2], ax
  2316                              <5> 	call proc_int32to16
  2317                              <5> 	mov ax,sp
  2318                              <5> 	mov bp,ax
  2319                              <5> 	mov ax,[bp+4]
  2320                              <5> 	mov word %3, ax	
  2321                              <5> 	stkclose 0x06
  2322                              <5> %endmacro
  2323                              <5> 
  2324                              <5> %macro int16to32 3
  2325                              <5> 	stkopen 0x06
  2326                              <5> 	mov word [bp+0], %1	
  2327                              <5> 	call proc_int16to32
  2328                              <5> 	mov ax,sp
  2329                              <5> 	mov bp,ax
  2330                              <5> 	mov ax,%2
  2331                              <5> 	mov ds,ax
  2332                              <5> 	mov ax,[bp+2]
  2333                              <5> 	mov [%3+2],ax
  2334                              <5> 	mov ax,[bp+4]
  2335                              <5> 	mov [%3],ax	
  2336                              <5> 	stkclose 0x06
  2337                              <5> %endmacro
  2338                              <5> 
  2339                              <5> %macro setsig 2
  2340                              <5> 	stkopen 0x02
  2341                              <5> 	mov ax,%1
  2342                              <5> 	mov ds,ax
  2343                              <5> 	mov ax,[%2+2]
  2344                              <5> 	mov word [bp+0], ax
  2345                              <5> 	call proc_setsig
  2346                              <5> 	mov ax,sp
  2347                              <5> 	mov bp,ax
  2348                              <5> 	mov ax,%1
  2349                              <5> 	mov ds,ax
  2350                              <5> 	mov ax,[bp+0]
  2351                              <5> 	mov word [%2+2], ax
  2352                              <5> 	stkclose 0x02
  2353                              <5> %endmacro
  2354                              <5> 
  2355                              <5> %macro clrsig 2
  2356                              <5> 	stkopen 0x02
  2357                              <5> 	mov ax,%1
  2358                              <5> 	mov ds,ax
  2359                              <5> 	mov ax,[%2+2]
  2360                              <5> 	mov word [bp+0], ax
  2361                              <5> 	call proc_clrsig
  2362                              <5> 	mov ax,sp
  2363                              <5> 	mov bp,ax
  2364                              <5> 	mov ax,%1
  2365                              <5> 	mov ds,ax
  2366                              <5> 	mov ax,[bp+0]
  2367                              <5> 	mov word [%2+2], ax
  2368                              <5> 	stkclose 0x02
  2369                              <5> %endmacro
  2370                              <5> 
  2371                              <5> %macro div32 10
  2372                              <5> 	stkopen 0x11
  2373                              <5> 	mov ax,%1
  2374                              <5> 	mov ds,ax
  2375                              <5> 	mov ax,[%2+2]
  2376                              <5> 	mov word [bp+0], ax
  2377                              <5> 	mov ax,[%2]
  2378                              <5> 	mov word [bp+2], ax
  2379                              <5> 	mov ax,%3
  2380                              <5> 	mov ds,ax
  2381                              <5> 	mov ax,[%4+2]
  2382                              <5> 	mov word [bp+4], ax
  2383                              <5> 	mov ax,[%4]
  2384                              <5> 	mov word [bp+6], ax
  2385                              <5> 	call proc_div32
  2386                              <5> 	mov ax,sp
  2387                              <5> 	mov bp,ax
  2388                              <5> 	mov ax,%5
  2389                              <5> 	mov ds,ax
  2390                              <5> 	mov word ax, [bp+8]
  2391                              <5> 	mov word [%6+2], ax
  2392                              <5> 	mov word ax, [bp+0x0A]
  2393                              <5> 	mov word [%6], ax
  2394                              <5> 	mov ax,%7
  2395                              <5> 	mov ds,ax
  2396                              <5> 	mov word ax,[bp+0x0C]
  2397                              <5> 	mov word [%8+2],ax
  2398                              <5> 	mov word ax,[bp+0x0E]
  2399                              <5> 	mov word [%8],ax
  2400                              <5> 	mov ax,%9
  2401                              <5> 	mov ds,ax
  2402                              <5> 	mov byte al,[bp+0x10]
  2403                              <5> 	mov byte [%10],al
  2404                              <5> 	stkclose 0x11
  2405                              <5> %endmacro
  2406                              <5> 	
  2407                              <5> %macro mul32 6
  2408                              <5> 	stkopen 0x0C
  2409                              <5> 	mov ax,%1
  2410                              <5> 	mov ds,ax
  2411                              <5> 	mov ax,[%2+2]
  2412                              <5> 	mov word [bp+0], ax
  2413                              <5> 	mov ax,[%2]
  2414                              <5> 	mov word [bp+2], ax
  2415                              <5> 	mov ax,%3
  2416                              <5> 	mov ds,ax
  2417                              <5> 	mov ax,[%4+2]
  2418                              <5> 	mov word [bp+4], ax
  2419                              <5> 	mov ax,[%4]
  2420                              <5> 	mov word [bp+6], ax
  2421                              <5> 	call proc_mul32
  2422                              <5> 	mov ax,sp
  2423                              <5> 	mov bp,ax
  2424                              <5> 	mov ax,%5
  2425                              <5> 	mov ds,ax
  2426                              <5> 	mov word ax, [bp+8]
  2427                              <5> 	mov word [%6+2], ax
  2428                              <5> 	mov word ax, [bp+0x0A]
  2429                              <5> 	mov word [%6], ax
  2430                              <5> 	stkclose 0x0C
  2431                              <5> %endmacro	
  2432                              <5> 	
  2433                              <5> %macro add32 6
  2434                              <5> 	stkopen 0x0C
  2435                              <5> 	mov ax,%1
  2436                              <5> 	mov ds,ax
  2437                              <5> 	mov ax,[%2+2]
  2438                              <5> 	mov word [bp+0], ax
  2439                              <5> 	mov ax,[%2]
  2440                              <5> 	mov word [bp+2], ax
  2441                              <5> 	mov ax,%3
  2442                              <5> 	mov ds,ax
  2443                              <5> 	mov ax,[%4+2]
  2444                              <5> 	mov word [bp+4], ax
  2445                              <5> 	mov ax,[%4]
  2446                              <5> 	mov word [bp+6], ax
  2447                              <5> 	call proc_add32
  2448                              <5> 	mov ax,sp
  2449                              <5> 	mov bp,ax
  2450                              <5> 	mov ax,%5
  2451                              <5> 	mov ds,ax
  2452                              <5> 	mov word ax, [bp+8]
  2453                              <5> 	mov word [%6+2], ax
  2454                              <5> 	mov word ax, [bp+0x0A]
  2455                              <5> 	mov word [%6], ax
  2456                              <5> 	stkclose 0x0C
  2457                              <5> %endmacro
  2458                              <5> 
  2459                              <5> %macro sub32 6
  2460                              <5> 	stkopen 0x0C
  2461                              <5> 	mov ax,%1
  2462                              <5> 	mov ds,ax
  2463                              <5> 	mov ax,[%2+2]
  2464                              <5> 	mov word [bp+0], ax
  2465                              <5> 	mov ax,[%2]
  2466                              <5> 	mov word [bp+2], ax
  2467                              <5> 	mov ax,%3
  2468                              <5> 	mov ds,ax
  2469                              <5> 	mov ax,[%4+2]
  2470                              <5> 	mov word [bp+4], ax
  2471                              <5> 	mov ax,[%4]
  2472                              <5> 	mov word [bp+6], ax
  2473                              <5> 	call proc_sub32
  2474                              <5> 	mov ax,sp
  2475                              <5> 	mov bp,ax
  2476                              <5> 	mov ax,%5
  2477                              <5> 	mov ds,ax
  2478                              <5> 	mov word ax, [bp+8]
  2479                              <5> 	mov word [%6+2], ax
  2480                              <5> 	mov word ax, [bp+0x0A]
  2481                              <5> 	mov word [%6], ax
  2482                              <5> 	stkclose 0x0C
  2483                              <5> %endmacro
  2484                              <5> 
  2485                              <5> %macro idiv32 10
  2486                              <5> 	stkopen 0x11
  2487                              <5> 	mov ax,%1
  2488                              <5> 	mov ds,ax
  2489                              <5> 	mov ax,[%2+2]
  2490                              <5> 	mov word [bp+0], ax
  2491                              <5> 	mov ax,[%2]
  2492                              <5> 	mov word [bp+2], ax
  2493                              <5> 	mov ax,%3
  2494                              <5> 	mov ds,ax
  2495                              <5> 	mov ax,[%4+2]
  2496                              <5> 	mov word [bp+4], ax
  2497                              <5> 	mov ax,[%4]
  2498                              <5> 	mov word [bp+6], ax
  2499                              <5> 	call proc_idiv32
  2500                              <5> 	mov ax,sp
  2501                              <5> 	mov bp,ax
  2502                              <5> 	mov ax,%5
  2503                              <5> 	mov ds,ax
  2504                              <5> 	mov word ax, [bp+8]
  2505                              <5> 	mov word [%6+2], ax
  2506                              <5> 	mov word ax, [bp+0x0A]
  2507                              <5> 	mov word [%6], ax
  2508                              <5> 	mov ax,%7
  2509                              <5> 	mov ds,ax
  2510                              <5> 	mov word ax,[bp+0x0C]
  2511                              <5> 	mov word [%8+2],ax
  2512                              <5> 	mov word ax,[bp+0x0E]
  2513                              <5> 	mov word [%8],ax
  2514                              <5> 	mov ax,%9
  2515                              <5> 	mov ds,ax
  2516                              <5> 	mov byte al,[bp+0x10]
  2517                              <5> 	mov byte [%10],al
  2518                              <5> 	stkclose 0x11
  2519                              <5> %endmacro
  2520                              <5> 
  2521                              <5> %macro imul32 6
  2522                              <5> 	stkopen 0x0C
  2523                              <5> 	mov ax,%1
  2524                              <5> 	mov ds,ax
  2525                              <5> 	mov ax,[%2+2]
  2526                              <5> 	mov word [bp+0], ax
  2527                              <5> 	mov ax,[%2]
  2528                              <5> 	mov word [bp+2], ax
  2529                              <5> 	mov ax,%3
  2530                              <5> 	mov ds,ax
  2531                              <5> 	mov ax,[%4+2]
  2532                              <5> 	mov word [bp+4], ax
  2533                              <5> 	mov ax,[%4]
  2534                              <5> 	mov word [bp+6], ax
  2535                              <5> 	call proc_imul32
  2536                              <5> 	mov ax,sp
  2537                              <5> 	mov bp,ax
  2538                              <5> 	mov ax,%5
  2539                              <5> 	mov ds,ax
  2540                              <5> 	mov word ax, [bp+8]
  2541                              <5> 	mov word [%6+2], ax
  2542                              <5> 	mov word ax, [bp+0x0A]
  2543                              <5> 	mov word [%6], ax
  2544                              <5> 	stkclose 0x0C
  2545                              <5> %endmacro
  2546                              <5> 	
  2547                              <5> %macro cmp32 3
  2548                              <5> 	cmp32 cs, %1, cs, %2, %3
  2549                              <5> %endmacro	
  2550                              <5> 	
  2551                              <5> %macro cmp32 5
  2552                              <5> 	stkopen 9
  2553                              <5> 	mov ax,%1
  2554                              <5> 	mov ds,ax
  2555                              <5> 	mov word ax,[%2+2]
  2556                              <5> 	mov word [bp+0], ax
  2557                              <5> 	mov word ax,[%2]
  2558                              <5> 	mov word [bp+2], ax	
  2559                              <5> 	mov ax,%3
  2560                              <5> 	mov ds,ax
  2561                              <5> 	mov word ax,[%4+2]
  2562                              <5> 	mov word [bp+4], ax
  2563                              <5> 	mov word ax,[%4]
  2564                              <5> 	mov word [bp+6], ax	
  2565                              <5> 	call proc_cmp32
  2566                              <5> 	mov ax,sp
  2567                              <5> 	mov bp,ax
  2568                              <5> 	mov al,[bp+8]
  2569                              <5> 	mov byte %5,al
  2570                              <5> 	stkclose 9
  2571                              <5> %endmacro
  2572                              <5> 	
  2573                              <5> %macro shl32 2
  2574                              <5> 	shl32 cs, %1, %2
  2575                              <5> %endmacro	
  2576                              <5> 	
  2577                              <5> %macro shl32 3
  2578                              <5> 	stkopen 5
  2579                              <5> 	mov ax,%1
  2580                              <5> 	mov ds,ax
  2581                              <5> 	mov word ax,[%2+2]
  2582                              <5> 	mov word [bp+0], ax
  2583                              <5> 	mov word ax,[%2]
  2584                              <5> 	mov word [bp+2], ax
  2585                              <5> 	mov byte al, %3
  2586                              <5> 	mov byte [bp+4], al 
  2587                              <5> 	call proc_shl32
  2588                              <5> 	mov ax,sp
  2589                              <5> 	mov bp,ax
  2590                              <5> 	mov ax,%1
  2591                              <5> 	mov ds,ax
  2592                              <5> 	mov ax,[bp+0]
  2593                              <5> 	mov word [%2+2],ax
  2594                              <5> 	mov ax,[bp+2]
  2595                              <5> 	mov word [%2],ax
  2596                              <5> 	stkclose 5
  2597                              <5> %endmacro
  2598                              <5> 
  2599                              <5> 
  2600                              <5> %macro shr32 2
  2601                              <5> 	shr32 cs, %1, %2
  2602                              <5> %endmacro	
  2603                              <5> 	
  2604                              <5> %macro shr32 3
  2605                              <5> 	stkopen 5
  2606                              <5> 	mov ax,%1
  2607                              <5> 	mov ds,ax
  2608                              <5> 	mov word ax,[%2+2]
  2609                              <5> 	mov word [bp+0], ax
  2610                              <5> 	mov word ax,[%2]
  2611                              <5> 	mov word [bp+2], ax
  2612                              <5> 	mov byte al, %3
  2613                              <5> 	mov byte [bp+4], al 
  2614                              <5> 	call proc_shr32
  2615                              <5> 	mov ax,sp
  2616                              <5> 	mov bp,ax
  2617                              <5> 	mov ax,%1
  2618                              <5> 	mov ds,ax
  2619                              <5> 	mov ax,[bp+0]
  2620                              <5> 	mov word [%2+2],ax
  2621                              <5> 	mov ax,[bp+2]
  2622                              <5> 	mov word [%2],ax
  2623                              <5> 	stkclose 5
  2624                              <5> %endmacro
  2625                              <5> 
  2626                              <5> %macro inc16 2
  2627                              <5> 	mov ax,%1
  2628                              <5> 	mov ds,ax
  2629                              <5> 	inc word [%2]
  2630                              <5> %endmacro
  2631                              <5> 
  2632                              <5> %macro dec16 2
  2633                              <5> 	mov ax,%1
  2634                              <5> 	mov ds,ax
  2635                              <5> 	dec word [%2]
  2636                              <5> %endmacro
  2637                              <5> 
  2638                              <5> %macro add16 4	
  2639                              <5> 	mov ax,%3
  2640                              <5> 	mov ds,ax
  2641                              <5> 	mov bx,[%4]	
  2642                              <5> 	mov ax,%1
  2643                              <5> 	mov ds,ax	
  2644                              <5> 	add [%2],bx
  2645                              <5> %endmacro
  2646                              <5> 
  2647                              <5> %macro sub16 4
  2648                              <5> 	mov ax,%3
  2649                              <5> 	mov ds,ax
  2650                              <5> 	mov bx,[%4]
  2651                              <5> 	mov ax,%1
  2652                              <5> 	mov ds,ax
  2653                              <5> 	sub [%2],bx
  2654                              <5> %endmacro
  2655                              <5> 
  2656                              <5> %macro mul16 4
  2657                              <5> 	mov ax,%1
  2658                              <5> 	mov ds,ax
  2659                              <5> 	mov bx,[%2]
  2660                              <5> 	mov ax,%3
  2661                              <5> 	mov ds,ax
  2662                              <5> 	mov cx,[%4]
  2663                              <5> 	
  2664                              <5> 	mov ax,bx
  2665                              <5> 	imul cx
  2666                              <5> 	
  2667                              <5> 	mov dx,%1
  2668                              <5> 	mov ds,dx
  2669                              <5> 	mov [%2],ax
  2670                              <5> %endmacro
  2671                              <5> 
  2672                              <5> %macro div16 4
  2673                              <5> 	mov ax,%1
  2674                              <5> 	mov ds,ax
  2675                              <5> 	mov bx,[%2]
  2676                              <5> 	mov ax,%3
  2677                              <5> 	mov ds,ax
  2678                              <5> 	mov cx,[%4]
  2679                              <5> 	
  2680                              <5> 	xor dx,dx
  2681                              <5> 	mov ax,bx
  2682                              <5> 	idiv cx
  2683                              <5> 	
  2684                              <5> 	mov dx,%1
  2685                              <5> 	mov ds,dx
  2686                              <5> 	mov [%2],ax
  2687                              <5> %endmacro
  2688                              <5> 
  2689                              <5> 
  2690                              <5> %macro mod16 4
  2691                              <5> 	mov ax,%1
  2692                              <5> 	mov ds,ax
  2693                              <5> 	mov bx,[%2]
  2694                              <5> 	mov ax,%3
  2695                              <5> 	mov ds,ax
  2696                              <5> 	mov cx,[%4]
  2697                              <5> 	
  2698                              <5> 	xor dx,dx
  2699                              <5> 	mov ax,bx
  2700                              <5> 	idiv cx
  2701                              <5> 	
  2702                              <5> 	mov bx,%1
  2703                              <5> 	mov ds,bx
  2704                              <5> 	mov [%2],dx
  2705                              <5> %endmacro
  2706                              <5> 
  2707                              <5> %macro cmp16 5
  2708                              <5> 	mov ax,%1
  2709                              <5> 	mov ds,ax
  2710                              <5> 	mov bx,[%2]
  2711                              <5> 	mov ax,%3
  2712                              <5> 	mov ds,ax
  2713                              <5> 	mov	cx,[%4]
  2714                              <5> 	
  2715                              <5> 	cmp bx,cx
  2716                              <5> 	jg %%above
  2717                              <5> 	jl %%below
  2718                              <5> 		mov byte %5, 0
  2719                              <5> 		jmp %%endcmp
  2720                              <5> 	%%above:
  2721                              <5> 		mov byte %5, 1
  2722                              <5> 		jmp %%endcmp
  2723                              <5> 	%%below:
  2724                              <5> 		mov byte %5, -1
  2725                              <5> 	%%endcmp:
  2726                              <5> %endmacro
  2727                              <5> 
  2728                              <5> %macro chgsig 2
  2729                              <5> 	mov ax,%1
  2730                              <5> 	mov ds,ax
  2731                              <5> 	mov ax,[%2]
  2732                              <5> 	mov bx,0xFFFF
  2733                              <5> 	sub bx,ax
  2734                              <5> 	inc bx
  2735                              <5> 	mov [%2],bx
  2736                              <5> %endmacro
  2737                              <5> 	
  2738                              <5> %endif
  2739                              <4> 	
  2740                              <4> %macro __fltoint16 3
  2741                              <4> 	stkopen 0x06
  2742                              <4> 	mov word [bp+0],%1
  2743                              <4> 	mov word [bp+2],%2
  2744                              <4> 	call proc_fltoint16
  2745                              <4> 	push sp
  2746                              <4> 	pop bp
  2747                              <4> 	mov word %3,[bp+4]
  2748                              <4> 	stkclose 0x06
  2749                              <4> %endmacro
  2750                              <4> 
  2751                              <4> %macro __int16tofl 3	
  2752                              <4> 	stkopen 0x06
  2753                              <4> 	mov word [bp+0],%1
  2754                              <4> 	call proc_int16tofl
  2755                              <4> 	push sp
  2756                              <4> 	pop bp
  2757                              <4> 	mov word %2,[bp+2]
  2758                              <4> 	mov word %3,[bp+4]
  2759                              <4> 	stkclose 0x06
  2760                              <4> %endmacro
  2761                              <4> 		
  2762                              <4> %macro __fltoint32 4
  2763                              <4> 	stkopen 0x08
  2764                              <4> 	mov word [bp+0],%1
  2765                              <4> 	mov word [bp+2],%2
  2766                              <4> 	call proc_fltoint32
  2767                              <4> 	push sp
  2768                              <4> 	pop bp
  2769                              <4> 	mov word %3,[bp+4]
  2770                              <4> 	mov word %4,[bp+6]
  2771                              <4> 	stkclose 0x08
  2772                              <4> %endmacro
  2773                              <4> 
  2774                              <4> %macro __int32tofl 4
  2775                              <4> 	stkopen 0x08
  2776                              <4> 	mov word [bp+0],%1
  2777                              <4> 	mov word [bp+2],%2
  2778                              <4> 	call proc_int32tofl
  2779                              <4> 	push sp
  2780                              <4> 	pop bp
  2781                              <4> 	mov word %3,[bp+4]
  2782                              <4> 	mov word %4,[bp+6]
  2783                              <4> 	stkclose 0x08
  2784                              <4> %endmacro	
  2785                              <4> 
  2786                              <4> %macro __flcmp 5
  2787                              <4> 	stkopen 0x09
  2788                              <4> 	mov word [bp+0],%1
  2789                              <4> 	mov word [bp+2],%2
  2790                              <4> 	mov word [bp+4],%3
  2791                              <4> 	mov word [bp+6],%4
  2792                              <4> 	call proc_flcmp
  2793                              <4> 	push sp
  2794                              <4> 	pop bp
  2795                              <4> 	mov byte %5, [bp+8]
  2796                              <4> 	stkclose 0x09
  2797                              <4> %endmacro
  2798                              <4> 	
  2799                              <4> %macro __flshl 1
  2800                              <4> 	stkopen 0x02
  2801                              <4> 	mov word [bp+0],%1
  2802                              <4> 	call proc_flshl
  2803                              <4> 	push sp
  2804                              <4> 	pop bp
  2805                              <4> 	mov word %1,[bp+0]
  2806                              <4> 	stkclose 0x02
  2807                              <4> %endmacro	
  2808                              <4> 
  2809                              <4> %macro __flshr 1
  2810                              <4> 	stkopen 0x02
  2811                              <4> 	mov word [bp+0],%1
  2812                              <4> 	call proc_flshr
  2813                              <4> 	push sp
  2814                              <4> 	pop bp
  2815                              <4> 	mov word %1,[bp+0]
  2816                              <4> 	stkclose 0x02
  2817                              <4> %endmacro	
  2818                              <4> 	
  2819                              <4> %macro __flinvsig 1
  2820                              <4> 	stkopen 0x02
  2821                              <4> 	mov word [bp+0],%1
  2822                              <4> 	call proc_flinvsig
  2823                              <4> 	push sp
  2824                              <4> 	pop bp
  2825                              <4> 	mov word %1, [bp+0]
  2826                              <4> 	stkclose 0x02
  2827                              <4> %endmacro
  2828                              <4> 
  2829                              <4> %macro __flsetsig 1
  2830                              <4> 	stkopen 0x04
  2831                              <4> 	mov word [bp+0],%1
  2832                              <4> 	mov word [bp+2],0x8000
  2833                              <4> 	call proc_flsetsig
  2834                              <4> 	push sp
  2835                              <4> 	pop bp
  2836                              <4> 	mov word %1, [bp+0]
  2837                              <4> 	stkclose 0x04
  2838                              <4> %endmacro	
  2839                              <4> 
  2840                              <4> %macro __flclearsig 1
  2841                              <4> 	stkopen 0x04
  2842                              <4> 	mov word [bp+0],%1
  2843                              <4> 	mov word [bp+2],0
  2844                              <4> 	call proc_flclrsig
  2845                              <4> 	push sp
  2846                              <4> 	pop bp
  2847                              <4> 	mov word %1, [bp+0]
  2848                              <4> 	stkclose 0x04
  2849                              <4> %endmacro		
  2850                              <4> 	
  2851                              <4> %macro __fladd 6
  2852                              <4> 	stkopen 0x0E
  2853                              <4> 	mov word [bp+0],%1
  2854                              <4> 	mov word [bp+2],%2
  2855                              <4> 	mov word [bp+4],%3
  2856                              <4> 	mov word [bp+6],%4
  2857                              <4> 	mov word [bp+0x0C],0
  2858                              <4> 	call proc_fladdorsub
  2859                              <4> 	push sp
  2860                              <4> 	pop bp
  2861                              <4> 	mov word %5,[bp+8]
  2862                              <4> 	mov word %6,[bp+0x0A]
  2863                              <4> 	stkclose 0x0E
  2864                              <4> %endmacro
  2865                              <4> 
  2866                              <4> %macro __flsub 6
  2867                              <4> 	stkopen 0x0E
  2868                              <4> 	mov word [bp+0],%1
  2869                              <4> 	mov word [bp+2],%2
  2870                              <4> 	mov word [bp+4],%3
  2871                              <4> 	mov word [bp+6],%4
  2872                              <4> 	mov word [bp+0x0C],0x8000
  2873                              <4> 	call proc_fladdorsub
  2874                              <4> 	push sp
  2875                              <4> 	pop bp
  2876                              <4> 	mov word %5,[bp+8]
  2877                              <4> 	mov word %6,[bp+0x0A]
  2878                              <4> 	stkclose 0x0E
  2879                              <4> %endmacro
  2880                              <4> 
  2881                              <4> %macro __flmul 6
  2882                              <4> 	stkopen 0x0E
  2883                              <4> 	mov word [bp+0],%1
  2884                              <4> 	mov word [bp+2],%2
  2885                              <4> 	mov word [bp+4],%3
  2886                              <4> 	mov word [bp+6],%4
  2887                              <4> 	call proc_flmul
  2888                              <4> 	push sp
  2889                              <4> 	pop bp
  2890                              <4> 	mov word %5,[bp+8]
  2891                              <4> 	mov word %6,[bp+0x0A]
  2892                              <4> 	stkclose 0x0E
  2893                              <4> %endmacro
  2894                              <4> 
  2895                              <4> %macro __fldiv 6
  2896                              <4> 	stkopen 0x0E
  2897                              <4> 	mov word [bp+0],%1
  2898                              <4> 	mov word [bp+2],%2
  2899                              <4> 	mov word [bp+4],%3
  2900                              <4> 	mov word [bp+6],%4
  2901                              <4> 	call proc_fldiv
  2902                              <4> 	push sp
  2903                              <4> 	pop bp
  2904                              <4> 	mov word %5,[bp+8]
  2905                              <4> 	mov word %6,[bp+0x0A]
  2906                              <4> 	stkclose 0x0E
  2907                              <4> %endmacro
  2908                              <4> 
  2909                              <4> %macro __validate 7
  2910                              <4> 	stkopen 0x0D
  2911                              <4> 	mov word [bp+0],%1
  2912                              <4> 	mov word [bp+2],%2
  2913                              <4> 	mov word [bp+4],%3
  2914                              <4> 	mov word [bp+6],%4
  2915                              <4> 	call proc__validate
  2916                              <4> 	push sp
  2917                              <4> 	pop bp
  2918                              <4> 	mov word %5,[bp+8]
  2919                              <4> 	mov word %6,[bp+0x0A]
  2920                              <4> 	mov byte %7,[bp+0x0C]
  2921                              <4> 	stkclose 0x0D
  2922                              <4> %endmacro
  2923                              <4> 
  2924                              <4> %macro __div_validate 7
  2925                              <4> 	stkopen 0x0D
  2926                              <4> 	mov word [bp+0],%1
  2927                              <4> 	mov word [bp+2],%2
  2928                              <4> 	mov word [bp+4],%3
  2929                              <4> 	mov word [bp+6],%4
  2930                              <4> 	call proc__div_validate
  2931                              <4> 	push sp
  2932                              <4> 	pop bp
  2933                              <4> 	mov word %5,[bp+8]
  2934                              <4> 	mov word %6,[bp+0x0A]
  2935                              <4> 	mov byte %7,[bp+0x0C]
  2936                              <4> 	stkclose 0x0D
  2937                              <4> %endmacro
  2938                              <4> 
  2939                              <4> %macro __mul_validate 5
  2940                              <4> 	stkopen 0x09
  2941                              <4> 	mov word [bp+0],%1
  2942                              <4> 	mov word [bp+2],%2
  2943                              <4> 	call proc__mul_validate
  2944                              <4> 	push sp
  2945                              <4> 	pop bp
  2946                              <4> 	mov word %3,[bp+4]
  2947                              <4> 	mov word %4,[bp+6]
  2948                              <4> 	mov byte %5,[bp+8]
  2949                              <4> 	stkclose 0x09
  2950                              <4> %endmacro
  2951                              <4> 
  2952                              <4> %macro __addorsub_validate 7
  2953                              <4> 	stkopen 0x0D
  2954                              <4> 	mov word [bp+0],%1
  2955                              <4> 	mov word [bp+2],%2
  2956                              <4> 	mov word [bp+4],%3
  2957                              <4> 	mov word [bp+6],%4
  2958                              <4> 	call proc__addorsub_validate
  2959                              <4> 	push sp
  2960                              <4> 	pop bp
  2961                              <4> 	mov word %5,[bp+8]
  2962                              <4> 	mov word %6,[bp+0x0A]
  2963                              <4> 	mov byte %7,[bp+0x0C]
  2964                              <4> 	stkclose 0x0D
  2965                              <4> %endmacro
  2966                              <4> 
  2967                              <4> %macro __cmp_validate 4
  2968                              <4> 	stkopen 0x06
  2969                              <4> 	mov word [bp+0],%1
  2970                              <4> 	mov word [bp+2],%2
  2971                              <4> 	call proc__cmp_validate
  2972                              <4> 	push sp
  2973                              <4> 	pop bp
  2974                              <4> 	mov byte %3, [bp+4]
  2975                              <4> 	mov byte %4, [bp+5]
  2976                              <4> 	stkclose 0x06
  2977                              <4> %endmacro
  2978                              <4> 
  2979                              <4> %macro __iaddorsub32 7
  2980                              <4> 	stkopen 0x0D
  2981                              <4> 	mov word [bp+0],%1
  2982                              <4> 	mov word [bp+2],%2
  2983                              <4> 	mov word [bp+4],%3
  2984                              <4> 	mov word [bp+6],%4
  2985                              <4> 	mov word [bp+0x0C], %7
  2986                              <4> 	call proc__iaddorsub32
  2987                              <4> 	push sp
  2988                              <4> 	pop bp
  2989                              <4> 	mov word %5,[bp+8]
  2990                              <4> 	mov word %6,[bp+0x0A]
  2991                              <4> 	stkclose 0x0D
  2992                              <4> %endmacro
  2993                              <4> 
  2994                              <4> %macro __fldiv32 6
  2995                              <4> 	stkopen 0x11
  2996                              <4> 	mov word [bp+0],%1
  2997                              <4> 	mov word [bp+2],%2
  2998                              <4> 	mov word [bp+4],%3
  2999                              <4> 	mov word [bp+6],%4
  3000                              <4> 	call proc__fldiv32
  3001                              <4> 	push sp
  3002                              <4> 	pop bp
  3003                              <4> 	mov word %5,[bp+8]
  3004                              <4> 	mov word %6,[bp+0x0A]
  3005                              <4> 	stkclose 0x11
  3006                              <4> %endmacro
  3007                              <4> 
  3008                              <4> %macro __mul32_64 8
  3009                              <4> 	stkopen 0x10
  3010                              <4> 	mov word [bp+0],%1
  3011                              <4> 	mov word [bp+2],%2
  3012                              <4> 	mov word [bp+4],%3
  3013                              <4> 	mov word [bp+6],%4
  3014                              <4> 	call proc__mul32_64
  3015                              <4> 	push sp
  3016                              <4> 	pop bp
  3017                              <4> 	mov word %5,[bp+8]
  3018                              <4> 	mov word %6,[bp+0x0A]
  3019                              <4> 	mov word %7,[bp+0x0C]
  3020                              <4> 	mov word %8,[bp+0x0E]
  3021                              <4> 	stkclose 0x10
  3022                              <4> %endmacro
  3023                              <4> 
  3024                              <4> %macro __normalize 3
  3025                              <4> 	stkopen 0x06
  3026                              <4> 	mov word [bp+0],%1
  3027                              <4> 	mov word [bp+2],%2
  3028                              <4> 	mov word [bp+4],%3
  3029                              <4> 	call proc__normalize
  3030                              <4> 	push sp
  3031                              <4> 	pop bp
  3032                              <4> 	mov word %1,[bp+0]
  3033                              <4> 	mov word %2,[bp+2]
  3034                              <4> 	stkclose 0x06
  3035                              <4> %endmacro
  3036                              <4> 
  3037                              <4> section .data
  3038                              <4> 
  3039                              <4> proc_fltoint16:
  3040 0000056F 89E0                <4> 	mov ax,sp
  3041 00000571 89C5                <4> 	mov bp,ax
  3042                              <4> 	
  3043 00000573 8B4602              <4> 	mov ax,[bp+2]
  3044 00000576 8B5E04              <4> 	mov bx,[bp+4]
  3045                              <4> 	__fltoint32 ax, ax, ax, bx
  3046                              <5>  stkopen 0x08
  3047 00000579 83EC08              <6>  sub word sp, %1
  3048 0000057C 54                  <6>  push sp
  3049 0000057D 5D                  <6>  pop bp
  3050 0000057E 894600              <5>  mov word [bp+0],%1
  3051 00000581 894602              <5>  mov word [bp+2],%2
  3052 00000584 E86A00              <5>  call proc_fltoint32
  3053 00000587 54                  <5>  push sp
  3054 00000588 5D                  <5>  pop bp
  3055 00000589 8B4604              <5>  mov word %3,[bp+4]
  3056 0000058C 8B5E06              <5>  mov word %4,[bp+6]
  3057                              <5>  stkclose 0x08
  3058 0000058F 83C408              <6>  add word sp, %1
  3059                              <4> 	__int32to16 ax, bx, cx
  3060                              <5>  stkopen 0x06
  3061 00000592 83EC06              <6>  sub word sp, %1
  3062 00000595 54                  <6>  push sp
  3063 00000596 5D                  <6>  pop bp
  3064 00000597 894600              <5>  mov word [bp+0], %1
  3065 0000059A 895E02              <5>  mov word [bp+2], %2
  3066 0000059D E87FFA              <5>  call proc_int32to16
  3067 000005A0 54                  <5>  push sp
  3068 000005A1 5D                  <5>  pop bp
  3069 000005A2 8B4E04              <5>  mov word %3, [bp+4]
  3070                              <5>  stkclose 0x06
  3071 000005A5 83C406              <6>  add word sp, %1
  3072                              <4> 	
  3073 000005A8 89E0                <4> 	mov ax,sp
  3074 000005AA 89C5                <4> 	mov bp,ax
  3075 000005AC 894E06              <4> 	mov [bp+6],cx
  3076                              <4> 	
  3077 000005AF C3                  <4> 	ret
  3078                              <4> 	
  3079                              <4> proc_int16tofl:
  3080 000005B0 89E0                <4> 	mov ax,sp
  3081 000005B2 89C5                <4> 	mov bp,ax
  3082                              <4> 	
  3083 000005B4 8B4602              <4> 	mov ax,[bp+2]
  3084                              <4> 	__int16to32 ax, ax, bx
  3085                              <5>  stkopen 0x06
  3086 000005B7 83EC06              <6>  sub word sp, %1
  3087 000005BA 54                  <6>  push sp
  3088 000005BB 5D                  <6>  pop bp
  3089 000005BC 894600              <5>  mov word [bp+0],%1
  3090 000005BF E83EFA              <5>  call proc_int16to32
  3091 000005C2 54                  <5>  push sp
  3092 000005C3 5D                  <5>  pop bp
  3093 000005C4 8B4602              <5>  mov word %2, [bp+2]
  3094 000005C7 8B5E04              <5>  mov word %3, [bp+4]
  3095                              <5>  stkclose 0x06
  3096 000005CA 83C406              <6>  add word sp, %1
  3097                              <4> 	__int32tofl ax, bx, cx, dx
  3098                              <5>  stkopen 0x08
  3099 000005CD 83EC08              <6>  sub word sp, %1
  3100 000005D0 54                  <6>  push sp
  3101 000005D1 5D                  <6>  pop bp
  3102 000005D2 894600              <5>  mov word [bp+0],%1
  3103 000005D5 895E02              <5>  mov word [bp+2],%2
  3104 000005D8 E8F600              <5>  call proc_int32tofl
  3105 000005DB 54                  <5>  push sp
  3106 000005DC 5D                  <5>  pop bp
  3107 000005DD 8B4E04              <5>  mov word %3,[bp+4]
  3108 000005E0 8B5606              <5>  mov word %4,[bp+6]
  3109                              <5>  stkclose 0x08
  3110 000005E3 83C408              <6>  add word sp, %1
  3111                              <4> 	
  3112 000005E6 89E0                <4> 	mov ax,sp
  3113 000005E8 89C5                <4> 	mov bp,ax
  3114 000005EA 894E04              <4> 	mov [bp+4],cx
  3115 000005ED 895606              <4> 	mov [bp+6],dx
  3116                              <4> 
  3117 000005F0 C3                  <4> 	ret
  3118                              <4> 
  3119                              <4> proc_fltoint32:
  3120 000005F1 89E0                <4> 	mov ax,sp
  3121 000005F3 89C5                <4> 	mov bp,ax
  3122                              <4> 
  3123 000005F5 8B4602              <4> 	mov ax,[bp+2]
  3124 000005F8 8B5E04              <4> 	mov bx,[bp+4]
  3125 000005FB 25FF7F              <4> 	and ax,0x7FFF	
  3126 000005FE 09D8                <4> 	or ax,bx
  3127 00000600 83F800              <4> 	cmp ax,0
  3128 00000603 7510                <4> 	jnz .continue
  3129                              <4> 	.zero:
  3130 00000605 8B4602              <4> 		mov ax,[bp+2]
  3131 00000608 250080              <4> 		and ax,0x8000
  3132 0000060B 894606              <4> 		mov word [bp+6],ax
  3133 0000060E C746080000          <4> 		mov word [bp+8],0
  3134 00000613 EB50                <4> 		jmp .done
  3135                              <4> 	.continue:
  3136                              <4> 	
  3137 00000615 8B4E02              <4> 	mov cx,[bp+2]
  3138 00000618 D1E1                <4> 	shl cx,1
  3139 0000061A 80ED7F              <4> 	sub ch,0x7F
  3140 0000061D 80FD00              <4> 	cmp ch,0		
  3141 00000620 7CE3                <4> 	jl .zero
  3142                              <4> 	
  3143                              <4> 	;push cx	round	
  3144                              <4> 	
  3145 00000622 B117                <4> 	mov cl,23	
  3146 00000624 38CD                <4> 	cmp ch,cl
  3147 00000626 7302                <4> 	jae .endexp
  3148 00000628 28E9                <4> 		sub cl,ch
  3149                              <4> 	.endexp:
  3150                              <4> 	
  3151 0000062A 8B4602              <4> 	mov ax,[bp+2]
  3152 0000062D 83E07F              <4> 	and ax,0x007F
  3153 00000630 0D8000              <4> 	or ax,0x0080
  3154                              <4> 	
  3155 00000633 8B5E04              <4> 	mov bx,[bp+4]
  3156                              <4> 		
  3157                              <4> 	__shr32 ax, bx, cl
  3158                              <5>  stkopen 5
  3159 00000636 83EC05              <6>  sub word sp, %1
  3160 00000639 54                  <6>  push sp
  3161 0000063A 5D                  <6>  pop bp
  3162 0000063B 894600              <5>  mov word [bp+0], %1
  3163 0000063E 895E02              <5>  mov word [bp+2], %2
  3164 00000641 884E04              <5>  mov byte [bp+4], %3
  3165 00000644 E834FD              <5>  call proc_shr32
  3166 00000647 54                  <5>  push sp
  3167 00000648 5D                  <5>  pop bp
  3168 00000649 8B4600              <5>  mov word %1, [bp+0]
  3169 0000064C 8B5E02              <5>  mov word %2, [bp+2]
  3170                              <5>  stkclose 5
  3171 0000064F 83C405              <6>  add word sp, %1
  3172                              <4> 		
  3173 00000652 89E2                <4> 	mov dx,sp
  3174 00000654 89D5                <4> 	mov bp,dx
  3175                              <4> 	; add bp,2 		round
  3176                              <4> 	
  3177 00000656 8B4E02              <4> 	mov cx,[bp+2]
  3178 00000659 81E10080            <4> 	and cx,0x8000
  3179 0000065D 01C8                <4> 	add ax,cx
  3180                              <4> 		 
  3181 0000065F 894606              <4> 	mov [bp+6],ax
  3182 00000662 895E08              <4> 	mov [bp+8],bx
  3183                              <4> 	
  3184                              <4> 	;; round
  3185                              <4> 	%if 0	
  3186                              <4> 	pop cx
  3187                              <4> 	add ch,9
  3188                              <4> 	
  3189                              <4> 	mov ax,[bp+2]
  3190                              <4> 	mov bx,[bp+4]
  3191                              <4> 	__shl32 ax, bx, ch	
  3192                              <4> 	and ax,0x8000
  3193                              <4> 	cmp ax,0
  3194                              <4> 	jz .done
  3195                              <4> 		mov ax,sp
  3196                              <4> 		mov bp,ax		
  3197                              <4> 		add word [bp+8],1		
  3198                              <4> 		adc word [bp+6],0
  3199                              <4> 	%endif	
  3200                              <4> 			
  3201                              <4> 	.done:
  3202                              <4> 	
  3203 00000665 C3                  <4> 	ret
  3204                              <4> 	
  3205                              <4> proc_truncate:
  3206 00000666 89E0                <4> 	mov ax,sp
  3207 00000668 89C5                <4> 	mov bp,ax
  3208                              <4> 	
  3209 0000066A 8B4602              <4> 	mov ax,[bp+2]
  3210                              <4> 	
  3211 0000066D D1E0                <4> 	shl ax,1
  3212 0000066F 80EC7F              <4> 	sub ah,0x7F
  3213                              <4> 	
  3214 00000672 B517                <4> 	mov ch,23
  3215 00000674 38E5                <4> 	cmp ch,ah
  3216 00000676 770E                <4> 	ja .ok
  3217 00000678 8B4602              <4> 		mov ax,[bp+2]
  3218 0000067B 8B5E04              <4> 		mov bx,[bp+4]
  3219 0000067E 894606              <4> 		mov [bp+6],ax
  3220 00000681 895E08              <4> 		mov [bp+8],bx
  3221 00000684 EB4A                <4> 		jmp .done	
  3222                              <4> 	.ok:
  3223                              <4> 	
  3224 00000686 28E5                <4> 	sub ch,ah
  3225                              <4> 	
  3226 00000688 8B4602              <4> 	mov ax,[bp+2]
  3227 0000068B 8B5E04              <4> 	mov bx,[bp+4]
  3228                              <4> 	
  3229 0000068E 55                  <4> 	push bp
  3230 0000068F 51                  <4> 	push cx	
  3231                              <4> 	__shr32 ax, bx, ch
  3232                              <5>  stkopen 5
  3233 00000690 83EC05              <6>  sub word sp, %1
  3234 00000693 54                  <6>  push sp
  3235 00000694 5D                  <6>  pop bp
  3236 00000695 894600              <5>  mov word [bp+0], %1
  3237 00000698 895E02              <5>  mov word [bp+2], %2
  3238 0000069B 886E04              <5>  mov byte [bp+4], %3
  3239 0000069E E8DAFC              <5>  call proc_shr32
  3240 000006A1 54                  <5>  push sp
  3241 000006A2 5D                  <5>  pop bp
  3242 000006A3 8B4600              <5>  mov word %1, [bp+0]
  3243 000006A6 8B5E02              <5>  mov word %2, [bp+2]
  3244                              <5>  stkclose 5
  3245 000006A9 83C405              <6>  add word sp, %1
  3246 000006AC 59                  <4> 	pop cx
  3247                              <4> 	__shl32 ax, bx, ch
  3248                              <5>  stkopen 5
  3249 000006AD 83EC05              <6>  sub word sp, %1
  3250 000006B0 54                  <6>  push sp
  3251 000006B1 5D                  <6>  pop bp
  3252 000006B2 894600              <5>  mov word [bp+0], %1
  3253 000006B5 895E02              <5>  mov word [bp+2], %2
  3254 000006B8 886E04              <5>  mov byte [bp+4], %3
  3255 000006BB E876FC              <5>  call proc_shl32
  3256 000006BE 54                  <5>  push sp
  3257 000006BF 5D                  <5>  pop bp
  3258 000006C0 8B4600              <5>  mov word %1, [bp+0]
  3259 000006C3 8B5E02              <5>  mov word %2, [bp+2]
  3260                              <5>  stkclose 5
  3261 000006C6 83C405              <6>  add word sp, %1
  3262 000006C9 5D                  <4> 	pop bp	
  3263                              <4> 	
  3264 000006CA 894606              <4> 	mov [bp+6],ax	
  3265 000006CD 895E08              <4> 	mov [bp+8],bx		
  3266                              <4> 	
  3267                              <4> 	.done:
  3268                              <4> 	
  3269 000006D0 C3                  <4> 	ret
  3270                              <4> 		
  3271                              <4> proc_int32tofl:
  3272 000006D1 89E0                <4> 	mov ax,sp
  3273 000006D3 89C5                <4> 	mov bp,ax
  3274                              <4> 	
  3275 000006D5 8B4602              <4> 	mov ax,[bp+2]
  3276 000006D8 8B5E04              <4> 	mov bx,[bp+4]
  3277                              <4> 	
  3278 000006DB 89C1                <4> 	mov cx,ax
  3279 000006DD 81E1FF7F            <4> 	and cx,0x7FFF
  3280 000006E1 09D9                <4> 	or cx,bx
  3281 000006E3 83F900              <4> 	cmp cx,0
  3282 000006E6 7511                <4> 	jnz .continue
  3283 000006E8 8B4602              <4> 		mov ax,[bp+2]
  3284 000006EB 250080              <4> 		and ax,0x8000
  3285 000006EE 894606              <4> 		mov word [bp+6],ax
  3286 000006F1 C746080000          <4> 		mov word [bp+8],0
  3287 000006F6 E99100              <4> 		jmp .done
  3288                              <4> 	.continue:
  3289                              <4> 	
  3290 000006F9 83E07F              <4> 	and ax,0x007F	
  3291                              <4> 	
  3292 000006FC 894606              <4> 	mov [bp+6],ax
  3293 000006FF 895E08              <4> 	mov [bp+8],bx	
  3294                              <4> 		
  3295                              <4> 	__lzbitcount32 ax, bx, ch		
  3296 00000702 53                  <5>  push %2
  3297                              <5>  __lzbitcount16 %1, cl
  3298                              <6>  stkopen 3
  3299 00000703 83EC03              <7>  sub word sp, %1
  3300 00000706 54                  <7>  push sp
  3301 00000707 5D                  <7>  pop bp
  3302 00000708 894600              <6>  mov word [bp+0], %1
  3303 0000070B E8F2FC              <6>  call proc__lzbitcount16
  3304 0000070E 54                  <6>  push sp
  3305 0000070F 5D                  <6>  pop bp
  3306 00000710 8A4E02              <6>  mov byte %2, [bp+2]
  3307                              <6>  stkclose 3
  3308 00000713 83C403              <7>  add word sp, %1
  3309 00000716 58                  <5>  pop ax
  3310 00000717 80F910              <5>  cmp cl,16
  3311 0000071A 7217                <5>  jb .end
  3312 0000071C 51                  <5>  push cx
  3313                              <5>  __lzbitcount16 ax, al
  3314                              <6>  stkopen 3
  3315 0000071D 83EC03              <7>  sub word sp, %1
  3316 00000720 54                  <7>  push sp
  3317 00000721 5D                  <7>  pop bp
  3318 00000722 894600              <6>  mov word [bp+0], %1
  3319 00000725 E8D8FC              <6>  call proc__lzbitcount16
  3320 00000728 54                  <6>  push sp
  3321 00000729 5D                  <6>  pop bp
  3322 0000072A 8A4602              <6>  mov byte %2, [bp+2]
  3323                              <6>  stkclose 3
  3324 0000072D 83C403              <7>  add word sp, %1
  3325 00000730 59                  <5>  pop cx
  3326 00000731 00C1                <5>  add cl,al
  3327                              <5>  .end:
  3328 00000733 88CD                <5>  mov byte %3, cl
  3329 00000735 B120                <4> 	mov cl,32
  3330 00000737 28E9                <4> 	sub cl,ch
  3331                              <4> 	
  3332 00000739 80F918              <4> 	cmp cl,24
  3333 0000073C 732C                <4> 	jae .endmantissa
  3334                              <4> 	
  3335 0000073E B218                <4> 	mov dl,24
  3336 00000740 28CA                <4> 	sub dl,cl				
  3337                              <4> 	
  3338 00000742 89E0                <4> 	mov ax,sp
  3339 00000744 89C5                <4> 	mov bp,ax
  3340 00000746 8B4606              <4> 	mov ax,[bp+6]
  3341 00000749 8B5E08              <4> 	mov bx,[bp+8]
  3342                              <4> 	
  3343 0000074C 51                  <4> 	push cx	
  3344                              <4> 	__shl32 ax, bx, dl	
  3345                              <5>  stkopen 5
  3346 0000074D 83EC05              <6>  sub word sp, %1
  3347 00000750 54                  <6>  push sp
  3348 00000751 5D                  <6>  pop bp
  3349 00000752 894600              <5>  mov word [bp+0], %1
  3350 00000755 895E02              <5>  mov word [bp+2], %2
  3351 00000758 885604              <5>  mov byte [bp+4], %3
  3352 0000075B E8D6FB              <5>  call proc_shl32
  3353 0000075E 54                  <5>  push sp
  3354 0000075F 5D                  <5>  pop bp
  3355 00000760 8B4600              <5>  mov word %1, [bp+0]
  3356 00000763 8B5E02              <5>  mov word %2, [bp+2]
  3357                              <5>  stkclose 5
  3358 00000766 83C405              <6>  add word sp, %1
  3359 00000769 59                  <4> 	pop cx
  3360                              <4> 	
  3361                              <4> 	.endmantissa:
  3362                              <4> 	
  3363 0000076A 83E07F              <4> 	and ax,0x007F
  3364                              <4> 		
  3365 0000076D 80C17E              <4> 	add cl,0x7E
  3366 00000770 C1E108              <4> 	shl cx,8
  3367 00000773 D1E9                <4> 	shr cx,1
  3368 00000775 01C8                <4> 	add ax,cx
  3369                              <4> 	
  3370 00000777 89E1                <4> 	mov cx,sp
  3371 00000779 89CD                <4> 	mov bp,cx
  3372                              <4> 	
  3373 0000077B 8B4E02              <4> 	mov cx,[bp+2]
  3374 0000077E 81E10080            <4> 	and cx,0x8000	
  3375 00000782 01C8                <4> 	add ax,cx
  3376                              <4> 		
  3377 00000784 894606              <4> 	mov [bp+6],ax
  3378 00000787 895E08              <4> 	mov [bp+8],bx
  3379                              <4> 	
  3380                              <4> 	.done:		
  3381                              <4> 	
  3382 0000078A C3                  <4> 	ret
  3383                              <4> 	
  3384                              <4> proc_flcmp:
  3385 0000078B 89E0                <4> 	mov ax,sp
  3386 0000078D 89C5                <4> 	mov bp,ax		
  3387                              <4> 	
  3388 0000078F 8B4602              <4> 	mov ax,[bp+2]
  3389 00000792 8B5E06              <4> 	mov bx,[bp+6]
  3390 00000795 55                  <4> 	push bp
  3391                              <4> 	__cmp_validate ax, bx, cl, dl
  3392                              <5>  stkopen 0x06
  3393 00000796 83EC06              <6>  sub word sp, %1
  3394 00000799 54                  <6>  push sp
  3395 0000079A 5D                  <6>  pop bp
  3396 0000079B 894600              <5>  mov word [bp+0],%1
  3397 0000079E 895E02              <5>  mov word [bp+2],%2
  3398 000007A1 E84C09              <5>  call proc__cmp_validate
  3399 000007A4 54                  <5>  push sp
  3400 000007A5 5D                  <5>  pop bp
  3401 000007A6 8A4E04              <5>  mov byte %3, [bp+4]
  3402 000007A9 8A5605              <5>  mov byte %4, [bp+5]
  3403                              <5>  stkclose 0x06
  3404 000007AC 83C406              <6>  add word sp, %1
  3405 000007AF 5D                  <4> 	pop bp
  3406 000007B0 80FA00              <4> 	cmp dl,0
  3407 000007B3 7505                <4> 	jnz .continue
  3408 000007B5 884E0A              <4> 		mov byte [bp+0x0A], cl
  3409 000007B8 EB5E                <4> 		jmp .done		
  3410                              <4> 	.continue:
  3411                              <4> 			
  3412 000007BA 8B4602              <4> 	mov ax,[bp+2]
  3413 000007BD 8B5E06              <4> 	mov bx,[bp+6]
  3414 000007C0 250080              <4> 	and ax,0x8000
  3415 000007C3 81E30080            <4> 	and bx,0x8000	
  3416 000007C7 39D8                <4> 	cmp ax,bx
  3417 000007C9 723C                <4> 	jb .above
  3418 000007CB 773E                <4> 	ja .below
  3419                              <4> 	
  3420 000007CD 8B4602              <4> 	mov ax,[bp+2]
  3421 000007D0 8B5E06              <4> 	mov bx,[bp+6]
  3422 000007D3 D1E0                <4> 	shl ax,1
  3423 000007D5 D1E3                <4> 	shl bx,1
  3424 000007D7 38FC                <4> 	cmp ah,bh
  3425 000007D9 772C                <4> 	ja .above
  3426 000007DB 722E                <4> 	jb .below
  3427                              <4> 	
  3428 000007DD 8B4602              <4> 	mov ax,[bp+2]
  3429 000007E0 8B5E04              <4> 	mov bx,[bp+4]
  3430 000007E3 8B4E06              <4> 	mov cx,[bp+6]
  3431 000007E6 8B5608              <4> 	mov dx,[bp+8]
  3432                              <4> 	
  3433                              <4> 	__cmp32 ax, bx, cx, dx, cl
  3434                              <5>  stkopen 9
  3435 000007E9 83EC09              <6>  sub word sp, %1
  3436 000007EC 54                  <6>  push sp
  3437 000007ED 5D                  <6>  pop bp
  3438 000007EE 894600              <5>  mov word [bp+0], %1
  3439 000007F1 895E02              <5>  mov word [bp+2], %2
  3440 000007F4 894E04              <5>  mov word [bp+4], %3
  3441 000007F7 895606              <5>  mov word [bp+6], %4
  3442 000007FA E80CFB              <5>  call proc_cmp32
  3443 000007FD 54                  <5>  push sp
  3444 000007FE 5D                  <5>  pop bp
  3445 000007FF 8A4E08              <5>  mov byte %5, [bp+8]
  3446                              <5>  stkclose 9
  3447 00000802 83C409              <6>  add word sp, %1
  3448 00000805 EB0A                <4> 	jmp .endcmp
  3449                              <4> 		
  3450                              <4> 	.above:
  3451 00000807 B101                <4> 		mov cl, 1
  3452 00000809 EB06                <4> 		jmp .endcmp
  3453                              <4> 	.below:
  3454 0000080B B1FF                <4> 		mov cl, -1
  3455 0000080D EB02                <4> 		jmp .endcmp
  3456                              <4> 	.equal:	
  3457 0000080F B100                <4> 		mov cl, 0	
  3458                              <4> 	.endcmp:
  3459                              <4> 	
  3460 00000811 89E0                <4> 	mov ax,sp
  3461 00000813 89C5                <4> 	mov bp,ax
  3462 00000815 884E0A              <4> 	mov byte [bp+0x0A], cl
  3463                              <4> 	
  3464                              <4> 	.done:
  3465                              <4> 					
  3466 00000818 C3                  <4> 	ret
  3467                              <4> 
  3468                              <4> proc_flshl:
  3469 00000819 89E0                <4> 	mov ax,sp
  3470 0000081B 89C5                <4> 	mov bp,ax
  3471                              <4> 	
  3472 0000081D 8B4602              <4> 	mov ax,[bp+2]
  3473 00000820 25807F              <4> 	and ax,0x7F80
  3474 00000823 D1E0                <4> 	shl ax,1
  3475 00000825 FEC4                <4> 	inc ah	
  3476 00000827 D1E8                <4> 	shr ax,1
  3477                              <4> 	
  3478 00000829 8B5E02              <4> 	mov bx,[bp+2]
  3479 0000082C 81E37F80            <4> 	and bx,0x807F
  3480 00000830 01C3                <4> 	add bx,ax
  3481                              <4> 	
  3482 00000832 895E02              <4> 	mov [bp+2],bx		
  3483                              <4> 	
  3484 00000835 C3                  <4> 	ret
  3485                              <4> 
  3486                              <4> proc_flshr:
  3487 00000836 89E0                <4> 	mov ax,sp
  3488 00000838 89C5                <4> 	mov bp,ax
  3489                              <4> 	
  3490 0000083A 8B4602              <4> 	mov ax,[bp+2]
  3491 0000083D 25807F              <4> 	and ax,0x7F80
  3492 00000840 D1E0                <4> 	shl ax,1
  3493 00000842 FECC                <4> 	dec ah	
  3494 00000844 D1E8                <4> 	shr ax,1
  3495                              <4> 	
  3496 00000846 8B5E02              <4> 	mov bx,[bp+2]
  3497 00000849 81E37F80            <4> 	and bx,0x807F
  3498 0000084D 01C3                <4> 	add bx,ax
  3499                              <4> 	
  3500 0000084F 895E02              <4> 	mov [bp+2],bx	
  3501                              <4> 	
  3502 00000852 C3                  <4> 	ret
  3503                              <4> 
  3504                              <4> proc_fldiv:
  3505 00000853 89E0                <4> 	mov ax,sp
  3506 00000855 89C5                <4> 	mov bp,ax
  3507                              <4> 				
  3508                              <4> 	; sinal
  3509                              <4> 	
  3510 00000857 8B4602              <4> 	mov ax,[bp+2]
  3511 0000085A 8B5E06              <4> 	mov bx,[bp+6]
  3512 0000085D 250080              <4> 	and ax,0x8000
  3513 00000860 81E30080            <4> 	and bx,0x8000
  3514 00000864 31D8                <4> 	xor ax,bx
  3515 00000866 89460A              <4> 	mov word [bp+0x0A],ax
  3516                              <4> 		
  3517                              <4> 	; sinal calculado e setado
  3518                              <4> 
  3519                              <4> 	; valores especiais
  3520                              <4> 	
  3521 00000869 8B4602              <4> 	mov ax,[bp+2]
  3522 0000086C 8B5E04              <4> 	mov bx,[bp+4]
  3523 0000086F 8B4E06              <4> 	mov cx,[bp+6]
  3524 00000872 8B5608              <4> 	mov dx,[bp+8]
  3525                              <4> 	__validate ax, bx, cx, dx, ax, bx, cl
  3526                              <5>  stkopen 0x0D
  3527 00000875 83EC0D              <6>  sub word sp, %1
  3528 00000878 54                  <6>  push sp
  3529 00000879 5D                  <6>  pop bp
  3530 0000087A 894600              <5>  mov word [bp+0],%1
  3531 0000087D 895E02              <5>  mov word [bp+2],%2
  3532 00000880 894E04              <5>  mov word [bp+4],%3
  3533 00000883 895606              <5>  mov word [bp+6],%4
  3534 00000886 E81707              <5>  call proc__validate
  3535 00000889 54                  <5>  push sp
  3536 0000088A 5D                  <5>  pop bp
  3537 0000088B 8B4608              <5>  mov word %5,[bp+8]
  3538 0000088E 8B5E0A              <5>  mov word %6,[bp+0x0A]
  3539 00000891 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  3540                              <5>  stkclose 0x0D
  3541 00000894 83C40D              <6>  add word sp, %1
  3542 00000897 80F900              <4> 	cmp cl,0
  3543 0000089A 750D                <4> 	jnz .continue
  3544 0000089C 89E2                <4> 		mov dx,sp
  3545 0000089E 89D5                <4> 		mov bp,dx
  3546 000008A0 01460A              <4> 		add word [bp+0x0A],ax
  3547 000008A3 895E0C              <4> 		mov word [bp+0x0C],bx						
  3548 000008A6 E9C800              <4> 		jmp .done	
  3549                              <4> 	.continue:
  3550                              <4> 	
  3551 000008A9 89E0                <4> 	mov ax,sp
  3552 000008AB 89C5                <4> 	mov bp,ax
  3553 000008AD 8B4602              <4> 	mov ax,[bp+2]
  3554 000008B0 8B5E04              <4> 	mov bx,[bp+4]
  3555 000008B3 8B4E06              <4> 	mov cx,[bp+6]
  3556 000008B6 8B5608              <4> 	mov dx,[bp+8]
  3557                              <4> 	__div_validate ax, bx, cx, dx, ax, bx, cl
  3558                              <5>  stkopen 0x0D
  3559 000008B9 83EC0D              <6>  sub word sp, %1
  3560 000008BC 54                  <6>  push sp
  3561 000008BD 5D                  <6>  pop bp
  3562 000008BE 894600              <5>  mov word [bp+0],%1
  3563 000008C1 895E02              <5>  mov word [bp+2],%2
  3564 000008C4 894E04              <5>  mov word [bp+4],%3
  3565 000008C7 895606              <5>  mov word [bp+6],%4
  3566 000008CA E83A07              <5>  call proc__div_validate
  3567 000008CD 54                  <5>  push sp
  3568 000008CE 5D                  <5>  pop bp
  3569 000008CF 8B4608              <5>  mov word %5,[bp+8]
  3570 000008D2 8B5E0A              <5>  mov word %6,[bp+0x0A]
  3571 000008D5 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  3572                              <5>  stkclose 0x0D
  3573 000008D8 83C40D              <6>  add word sp, %1
  3574 000008DB 80F900              <4> 	cmp cl,0
  3575 000008DE 750D                <4> 	jnz .continue2
  3576 000008E0 89E2                <4> 		mov dx,sp
  3577 000008E2 89D5                <4> 		mov bp,dx
  3578 000008E4 01460A              <4> 		add word [bp+0x0A],ax
  3579 000008E7 895E0C              <4> 		mov word [bp+0x0C],bx				
  3580 000008EA E98400              <4> 		jmp .done	
  3581                              <4> 	.continue2:
  3582                              <4> 	; valores especiais tratados
  3583                              <4> 			
  3584                              <4> 	; expoente parcial
  3585                              <4> 
  3586 000008ED 89E0                <4> 	mov ax,sp
  3587 000008EF 89C5                <4> 	mov bp,ax
  3588 000008F1 8B4602              <4> 	mov ax,[bp+2]
  3589 000008F4 8B5E06              <4> 	mov bx,[bp+6]
  3590 000008F7 25807F              <4> 	and ax,0x7F80
  3591 000008FA 81E3807F            <4> 	and bx,0x7F80
  3592 000008FE D1E0                <4> 	shl ax,1
  3593 00000900 D1E3                <4> 	shl bx,1		
  3594                              <4> 			
  3595 00000902 28FC                <4> 	sub ah,bh		
  3596 00000904 80C47F              <4> 	add ah,0x7F
  3597                              <4> 	
  3598 00000907 50                  <4> 	push ax
  3599                              <4> 		
  3600                              <4> 	; expoente parcial calculado
  3601                              <4> 	
  3602                              <4> 	; mantissa
  3603                              <4> 
  3604 00000908 8B4602              <4> 	mov ax,[bp+2]
  3605 0000090B 8B5E04              <4> 	mov bx,[bp+4]
  3606 0000090E 8B4E06              <4> 	mov cx,[bp+6]
  3607 00000911 8B5608              <4> 	mov dx,[bp+8]
  3608 00000914 83E07F              <4> 	and ax,0x007F
  3609 00000917 83E17F              <4> 	and cx,0x007F
  3610 0000091A 0D8000              <4> 	or ax,0x0080
  3611 0000091D 81C98000            <4> 	or cx,0x0080
  3612                              <4> 	
  3613                              <4> 	__fldiv32 ax, bx, cx, dx, cx, dx
  3614                              <5>  stkopen 0x11
  3615 00000921 83EC11              <6>  sub word sp, %1
  3616 00000924 54                  <6>  push sp
  3617 00000925 5D                  <6>  pop bp
  3618 00000926 894600              <5>  mov word [bp+0],%1
  3619 00000929 895E02              <5>  mov word [bp+2],%2
  3620 0000092C 894E04              <5>  mov word [bp+4],%3
  3621 0000092F 895606              <5>  mov word [bp+6],%4
  3622 00000932 E87505              <5>  call proc__fldiv32
  3623 00000935 54                  <5>  push sp
  3624 00000936 5D                  <5>  pop bp
  3625 00000937 8B4E08              <5>  mov word %5,[bp+8]
  3626 0000093A 8B560A              <5>  mov word %6,[bp+0x0A]
  3627                              <5>  stkclose 0x11
  3628 0000093D 83C411              <6>  add word sp, %1
  3629                              <4> 		
  3630 00000940 89E0                <4> 	mov ax,sp
  3631 00000942 89C5                <4> 	mov bp,ax
  3632 00000944 83C502              <4> 	add bp,2
  3633                              <4> 	
  3634 00000947 034E0A              <4> 	add cx,[bp+0x0A]
  3635                              <4> 			
  3636 0000094A 58                  <4> 	pop ax	
  3637                              <4> 	__normalize cx, dx, ax
  3638                              <5>  stkopen 0x06
  3639 0000094B 83EC06              <6>  sub word sp, %1
  3640 0000094E 54                  <6>  push sp
  3641 0000094F 5D                  <6>  pop bp
  3642 00000950 894E00              <5>  mov word [bp+0],%1
  3643 00000953 895602              <5>  mov word [bp+2],%2
  3644 00000956 894604              <5>  mov word [bp+4],%3
  3645 00000959 E8B303              <5>  call proc__normalize
  3646 0000095C 54                  <5>  push sp
  3647 0000095D 5D                  <5>  pop bp
  3648 0000095E 8B4E00              <5>  mov word %1,[bp+0]
  3649 00000961 8B5602              <5>  mov word %2,[bp+2]
  3650                              <5>  stkclose 0x06
  3651 00000964 83C406              <6>  add word sp, %1
  3652                              <4> 	
  3653 00000967 89E0                <4> 	mov ax,sp
  3654 00000969 89C5                <4> 	mov bp,ax
  3655 0000096B 894E0A              <4> 	mov [bp+0x0A],cx
  3656 0000096E 89560C              <4> 	mov [bp+0x0C],dx
  3657                              <4> 	
  3658                              <4> 	.done:
  3659                              <4> 			
  3660 00000971 C3                  <4> 	ret
  3661                              <4> 
  3662                              <4> proc_flmul:
  3663 00000972 89E0                <4> 	mov ax,sp
  3664 00000974 89C5                <4> 	mov bp,ax
  3665                              <4> 	
  3666                              <4> 	; sinal
  3667                              <4> 	
  3668 00000976 8B4602              <4> 	mov ax,[bp+2]
  3669 00000979 8B5E06              <4> 	mov bx,[bp+6]
  3670 0000097C 250080              <4> 	and ax,0x8000
  3671 0000097F 81E30080            <4> 	and bx,0x8000
  3672 00000983 31D8                <4> 	xor ax,bx
  3673 00000985 89460A              <4> 	mov word [bp+0x0A],ax
  3674                              <4> 	
  3675                              <4> 	; sinal calculado e setado
  3676                              <4> 
  3677                              <4> 	; valores especiais
  3678                              <4> 
  3679 00000988 8B4602              <4> 	mov ax,[bp+2]
  3680 0000098B 8B5E04              <4> 	mov bx,[bp+4]
  3681 0000098E 8B4E06              <4> 	mov cx,[bp+6]
  3682 00000991 8B5608              <4> 	mov dx,[bp+8]
  3683                              <4> 	__validate ax, bx, cx, dx, ax, bx, cl
  3684                              <5>  stkopen 0x0D
  3685 00000994 83EC0D              <6>  sub word sp, %1
  3686 00000997 54                  <6>  push sp
  3687 00000998 5D                  <6>  pop bp
  3688 00000999 894600              <5>  mov word [bp+0],%1
  3689 0000099C 895E02              <5>  mov word [bp+2],%2
  3690 0000099F 894E04              <5>  mov word [bp+4],%3
  3691 000009A2 895606              <5>  mov word [bp+6],%4
  3692 000009A5 E8F805              <5>  call proc__validate
  3693 000009A8 54                  <5>  push sp
  3694 000009A9 5D                  <5>  pop bp
  3695 000009AA 8B4608              <5>  mov word %5,[bp+8]
  3696 000009AD 8B5E0A              <5>  mov word %6,[bp+0x0A]
  3697 000009B0 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  3698                              <5>  stkclose 0x0D
  3699 000009B3 83C40D              <6>  add word sp, %1
  3700 000009B6 80F900              <4> 	cmp cl,0
  3701 000009B9 750D                <4> 	jnz .continue
  3702 000009BB 89E2                <4> 		mov dx,sp
  3703 000009BD 89D5                <4> 		mov bp,dx
  3704 000009BF 01460A              <4> 		add word [bp+0x0A],ax
  3705 000009C2 895E0C              <4> 		mov word [bp+0x0C],bx						
  3706 000009C5 E95501              <4> 		jmp .done	
  3707                              <4> 	.continue:
  3708                              <4> 
  3709 000009C8 89E0                <4> 	mov ax,sp
  3710 000009CA 89C5                <4> 	mov bp,ax
  3711 000009CC 8B4602              <4> 	mov ax,[bp+2]
  3712 000009CF 8B4E06              <4> 	mov cx,[bp+6]
  3713                              <4> 	__mul_validate ax, cx, ax, bx, cl
  3714                              <5>  stkopen 0x09
  3715 000009D2 83EC09              <6>  sub word sp, %1
  3716 000009D5 54                  <6>  push sp
  3717 000009D6 5D                  <6>  pop bp
  3718 000009D7 894600              <5>  mov word [bp+0],%1
  3719 000009DA 894E02              <5>  mov word [bp+2],%2
  3720 000009DD E88106              <5>  call proc__mul_validate
  3721 000009E0 54                  <5>  push sp
  3722 000009E1 5D                  <5>  pop bp
  3723 000009E2 8B4604              <5>  mov word %3,[bp+4]
  3724 000009E5 8B5E06              <5>  mov word %4,[bp+6]
  3725 000009E8 8A4E08              <5>  mov byte %5,[bp+8]
  3726                              <5>  stkclose 0x09
  3727 000009EB 83C409              <6>  add word sp, %1
  3728 000009EE 80F900              <4> 	cmp cl,0
  3729 000009F1 750D                <4> 	jnz .continue2
  3730 000009F3 89E2                <4> 		mov dx,sp
  3731 000009F5 89D5                <4> 		mov bp,dx
  3732 000009F7 01460A              <4> 		add word [bp+0x0A],ax
  3733 000009FA 895E0C              <4> 		mov word [bp+0x0C],bx				
  3734 000009FD E91D01              <4> 		jmp .done	
  3735                              <4> 	.continue2:
  3736                              <4> 	; valores especiais tratados
  3737                              <4> 		
  3738                              <4> 	; expoente parcial
  3739                              <4> 
  3740 00000A00 89E0                <4> 	mov ax,sp
  3741 00000A02 89C5                <4> 	mov bp,ax
  3742 00000A04 8B4602              <4> 	mov ax,[bp+2]
  3743 00000A07 8B5E06              <4> 	mov bx,[bp+6]
  3744 00000A0A 25807F              <4> 	and ax,0x7F80
  3745 00000A0D 81E3807F            <4> 	and bx,0x7F80
  3746 00000A11 D1E0                <4> 	shl ax,1
  3747 00000A13 D1E3                <4> 	shl bx,1		
  3748                              <4> 			
  3749 00000A15 80EC7F              <4> 	sub ah,0x7F
  3750 00000A18 80EF7F              <4> 	sub bh,0x7F
  3751                              <4> 				
  3752 00000A1B 00FC                <4> 	add ah,bh
  3753 00000A1D 80C47F              <4> 	add ah,0x7F
  3754                              <4> 	
  3755 00000A20 50                  <4> 	push ax
  3756                              <4> 	
  3757                              <4> 	; expoente parcial calculado	
  3758                              <4> 	
  3759                              <4> 	; mantissa
  3760                              <4> 	
  3761 00000A21 8B4602              <4> 	mov ax,[bp+2]
  3762 00000A24 8B5E04              <4> 	mov bx,[bp+4]
  3763 00000A27 8B4E06              <4> 	mov cx,[bp+6]
  3764 00000A2A 8B5608              <4> 	mov dx,[bp+8]	
  3765                              <4> 	
  3766 00000A2D 83E07F              <4> 	and ax, 0x007F
  3767 00000A30 83E17F              <4> 	and cx, 0x007F
  3768 00000A33 0D8000              <4> 	or ax, 0x0080
  3769 00000A36 81C98000            <4> 	or cx, 0x0080
  3770                              <4> 		
  3771                              <4> 	__mul32_64 ax, bx, cx, dx, ax, bx, cx, dx
  3772                              <5>  stkopen 0x10
  3773 00000A3A 83EC10              <6>  sub word sp, %1
  3774 00000A3D 54                  <6>  push sp
  3775 00000A3E 5D                  <6>  pop bp
  3776 00000A3F 894600              <5>  mov word [bp+0],%1
  3777 00000A42 895E02              <5>  mov word [bp+2],%2
  3778 00000A45 894E04              <5>  mov word [bp+4],%3
  3779 00000A48 895606              <5>  mov word [bp+6],%4
  3780 00000A4B E81104              <5>  call proc__mul32_64
  3781 00000A4E 54                  <5>  push sp
  3782 00000A4F 5D                  <5>  pop bp
  3783 00000A50 8B4608              <5>  mov word %5,[bp+8]
  3784 00000A53 8B5E0A              <5>  mov word %6,[bp+0x0A]
  3785 00000A56 8B4E0C              <5>  mov word %7,[bp+0x0C]
  3786 00000A59 8B560E              <5>  mov word %8,[bp+0x0E]
  3787                              <5>  stkclose 0x10
  3788 00000A5C 83C410              <6>  add word sp, %1
  3789                              <4> 	
  3790 00000A5F 51                  <4> 	push cx
  3791                              <4> 	__shl32 ax, bx, 8
  3792                              <5>  stkopen 5
  3793 00000A60 83EC05              <6>  sub word sp, %1
  3794 00000A63 54                  <6>  push sp
  3795 00000A64 5D                  <6>  pop bp
  3796 00000A65 894600              <5>  mov word [bp+0], %1
  3797 00000A68 895E02              <5>  mov word [bp+2], %2
  3798 00000A6B C6460408            <5>  mov byte [bp+4], %3
  3799 00000A6F E8C2F8              <5>  call proc_shl32
  3800 00000A72 54                  <5>  push sp
  3801 00000A73 5D                  <5>  pop bp
  3802 00000A74 8B4600              <5>  mov word %1, [bp+0]
  3803 00000A77 8B5E02              <5>  mov word %2, [bp+2]
  3804                              <5>  stkclose 5
  3805 00000A7A 83C405              <6>  add word sp, %1
  3806 00000A7D 59                  <4> 	pop cx
  3807 00000A7E 88EB                <4> 	mov bl,ch
  3808                              <4> 								
  3809 00000A80 50                  <4> 	push ax
  3810 00000A81 53                  <4> 	push bx
  3811                              <4> 	__lzbitcount32 ax, bx, cl
  3812 00000A82 53                  <5>  push %2
  3813                              <5>  __lzbitcount16 %1, cl
  3814                              <6>  stkopen 3
  3815 00000A83 83EC03              <7>  sub word sp, %1
  3816 00000A86 54                  <7>  push sp
  3817 00000A87 5D                  <7>  pop bp
  3818 00000A88 894600              <6>  mov word [bp+0], %1
  3819 00000A8B E872F9              <6>  call proc__lzbitcount16
  3820 00000A8E 54                  <6>  push sp
  3821 00000A8F 5D                  <6>  pop bp
  3822 00000A90 8A4E02              <6>  mov byte %2, [bp+2]
  3823                              <6>  stkclose 3
  3824 00000A93 83C403              <7>  add word sp, %1
  3825 00000A96 58                  <5>  pop ax
  3826 00000A97 80F910              <5>  cmp cl,16
  3827 00000A9A 7217                <5>  jb .end
  3828 00000A9C 51                  <5>  push cx
  3829                              <5>  __lzbitcount16 ax, al
  3830                              <6>  stkopen 3
  3831 00000A9D 83EC03              <7>  sub word sp, %1
  3832 00000AA0 54                  <7>  push sp
  3833 00000AA1 5D                  <7>  pop bp
  3834 00000AA2 894600              <6>  mov word [bp+0], %1
  3835 00000AA5 E858F9              <6>  call proc__lzbitcount16
  3836 00000AA8 54                  <6>  push sp
  3837 00000AA9 5D                  <6>  pop bp
  3838 00000AAA 8A4602              <6>  mov byte %2, [bp+2]
  3839                              <6>  stkclose 3
  3840 00000AAD 83C403              <7>  add word sp, %1
  3841 00000AB0 59                  <5>  pop cx
  3842 00000AB1 00C1                <5>  add cl,al
  3843                              <5>  .end:
  3844 00000AB3 88C9                <5>  mov byte %3, cl
  3845 00000AB5 5B                  <4> 	pop bx
  3846 00000AB6 58                  <4> 	pop ax
  3847                              <4> 		
  3848 00000AB7 80E908              <4> 	sub cl,8	
  3849 00000ABA 80F908              <4> 	cmp cl,8
  3850 00000ABD 7402                <4> 	je .equal
  3851 00000ABF 7F06                <4> 	jg .great
  3852                              <4> 	.equal:	
  3853 00000AC1 5A                  <4> 		pop dx
  3854 00000AC2 FEC6                <4> 		inc dh
  3855 00000AC4 52                  <4> 		push dx
  3856 00000AC5 EB1C                <4> 		jmp .endcmp
  3857                              <4> 	.great:
  3858                              <4> 		__shl32 ax, bx, cl
  3859                              <5>  stkopen 5
  3860 00000AC7 83EC05              <6>  sub word sp, %1
  3861 00000ACA 54                  <6>  push sp
  3862 00000ACB 5D                  <6>  pop bp
  3863 00000ACC 894600              <5>  mov word [bp+0], %1
  3864 00000ACF 895E02              <5>  mov word [bp+2], %2
  3865 00000AD2 884E04              <5>  mov byte [bp+4], %3
  3866 00000AD5 E85CF8              <5>  call proc_shl32
  3867 00000AD8 54                  <5>  push sp
  3868 00000AD9 5D                  <5>  pop bp
  3869 00000ADA 8B4600              <5>  mov word %1, [bp+0]
  3870 00000ADD 8B5E02              <5>  mov word %2, [bp+2]
  3871                              <5>  stkclose 5
  3872 00000AE0 83C405              <6>  add word sp, %1
  3873                              <4> 	.endcmp:
  3874                              <4> 	
  3875 00000AE3 89E1                <4> 	mov cx,sp
  3876 00000AE5 89CD                <4> 	mov bp,cx
  3877 00000AE7 83C502              <4> 	add bp,2
  3878                              <4> 	
  3879 00000AEA 01460A              <4> 	add word [bp+0x0A],ax
  3880 00000AED 895E0C              <4> 	mov word [bp+0x0C],bx
  3881                              <4> 	
  3882                              <4> 	; mantissa setada e expoente calculado
  3883                              <4> 				
  3884 00000AF0 8B4E0A              <4> 	mov cx,[bp+0x0A]
  3885 00000AF3 8B560C              <4> 	mov dx,[bp+0x0C]
  3886                              <4> 	
  3887 00000AF6 58                  <4> 	pop ax						
  3888                              <4> 	__normalize cx, dx, ax	; normaliza, preserva sinal e seta expoente	
  3889                              <5>  stkopen 0x06
  3890 00000AF7 83EC06              <6>  sub word sp, %1
  3891 00000AFA 54                  <6>  push sp
  3892 00000AFB 5D                  <6>  pop bp
  3893 00000AFC 894E00              <5>  mov word [bp+0],%1
  3894 00000AFF 895602              <5>  mov word [bp+2],%2
  3895 00000B02 894604              <5>  mov word [bp+4],%3
  3896 00000B05 E80702              <5>  call proc__normalize
  3897 00000B08 54                  <5>  push sp
  3898 00000B09 5D                  <5>  pop bp
  3899 00000B0A 8B4E00              <5>  mov word %1,[bp+0]
  3900 00000B0D 8B5602              <5>  mov word %2,[bp+2]
  3901                              <5>  stkclose 0x06
  3902 00000B10 83C406              <6>  add word sp, %1
  3903                              <4> 		
  3904 00000B13 89E0                <4> 	mov ax,sp
  3905 00000B15 89C5                <4> 	mov bp,ax
  3906 00000B17 894E0A              <4> 	mov [bp+0x0A],cx
  3907 00000B1A 89560C              <4> 	mov [bp+0x0C],dx		
  3908                              <4> 
  3909                              <4> 	.done:
  3910                              <4> 																	
  3911 00000B1D C3                  <4> 	ret
  3912                              <4> 	
  3913                              <4> proc_fladdorsub:	
  3914                              <4> 	; valores especiais
  3915 00000B1E 89E0                <4> 	mov ax,sp
  3916 00000B20 89C5                <4> 	mov bp,ax
  3917 00000B22 8B4602              <4> 	mov ax,[bp+2]
  3918 00000B25 8B5E04              <4> 	mov bx,[bp+4]
  3919 00000B28 8B4E06              <4> 	mov cx,[bp+6]
  3920 00000B2B 81E10080            <4> 	and cx,0x8000
  3921 00000B2F 334E0E              <4> 	xor word cx,[bp+0x0E]	
  3922 00000B32 8B5606              <4> 	mov dx,[bp+6]
  3923 00000B35 81E2FF7F            <4> 	and dx,0x7FFF
  3924 00000B39 01D1                <4> 	add cx,dx	
  3925 00000B3B 8B5608              <4> 	mov dx,[bp+8]
  3926                              <4> 	__validate ax, bx, cx, dx, ax, bx, cl
  3927                              <5>  stkopen 0x0D
  3928 00000B3E 83EC0D              <6>  sub word sp, %1
  3929 00000B41 54                  <6>  push sp
  3930 00000B42 5D                  <6>  pop bp
  3931 00000B43 894600              <5>  mov word [bp+0],%1
  3932 00000B46 895E02              <5>  mov word [bp+2],%2
  3933 00000B49 894E04              <5>  mov word [bp+4],%3
  3934 00000B4C 895606              <5>  mov word [bp+6],%4
  3935 00000B4F E84E04              <5>  call proc__validate
  3936 00000B52 54                  <5>  push sp
  3937 00000B53 5D                  <5>  pop bp
  3938 00000B54 8B4608              <5>  mov word %5,[bp+8]
  3939 00000B57 8B5E0A              <5>  mov word %6,[bp+0x0A]
  3940 00000B5A 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  3941                              <5>  stkclose 0x0D
  3942 00000B5D 83C40D              <6>  add word sp, %1
  3943 00000B60 80F900              <4> 	cmp cl,0
  3944 00000B63 750D                <4> 	jnz .continue
  3945 00000B65 89E2                <4> 		mov dx,sp
  3946 00000B67 89D5                <4> 		mov bp,dx		
  3947 00000B69 89460A              <4> 		mov word [bp+0x0A],ax
  3948 00000B6C 895E0C              <4> 		mov word [bp+0x0C],bx										
  3949 00000B6F E99C01              <4> 		jmp .done	
  3950                              <4> 	.continue:
  3951                              <4> 	
  3952 00000B72 89E0                <4> 	mov ax,sp
  3953 00000B74 89C5                <4> 	mov bp,ax
  3954 00000B76 8B4602              <4> 	mov ax,[bp+2]
  3955 00000B79 8B5E04              <4> 	mov bx,[bp+4]
  3956 00000B7C 8B4E06              <4> 	mov cx,[bp+6]
  3957 00000B7F 81E10080            <4> 	and cx,0x8000
  3958 00000B83 334E0E              <4> 	xor word cx,[bp+0x0E]	
  3959 00000B86 8B5606              <4> 	mov dx,[bp+6]
  3960 00000B89 81E2FF7F            <4> 	and dx,0x7FFF
  3961 00000B8D 01D1                <4> 	add cx,dx
  3962 00000B8F 8B5608              <4> 	mov dx,[bp+8]
  3963                              <4> 	__addorsub_validate ax, bx, cx, dx, ax, bx, cl
  3964                              <5>  stkopen 0x0D
  3965 00000B92 83EC0D              <6>  sub word sp, %1
  3966 00000B95 54                  <6>  push sp
  3967 00000B96 5D                  <6>  pop bp
  3968 00000B97 894600              <5>  mov word [bp+0],%1
  3969 00000B9A 895E02              <5>  mov word [bp+2],%2
  3970 00000B9D 894E04              <5>  mov word [bp+4],%3
  3971 00000BA0 895606              <5>  mov word [bp+6],%4
  3972 00000BA3 E8EC04              <5>  call proc__addorsub_validate
  3973 00000BA6 54                  <5>  push sp
  3974 00000BA7 5D                  <5>  pop bp
  3975 00000BA8 8B4608              <5>  mov word %5,[bp+8]
  3976 00000BAB 8B5E0A              <5>  mov word %6,[bp+0x0A]
  3977 00000BAE 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  3978                              <5>  stkclose 0x0D
  3979 00000BB1 83C40D              <6>  add word sp, %1
  3980 00000BB4 80F900              <4> 	cmp cl,0
  3981 00000BB7 750D                <4> 	jnz .continue2
  3982 00000BB9 89E2                <4> 		mov dx,sp
  3983 00000BBB 89D5                <4> 		mov bp,dx					
  3984 00000BBD 89460A              <4> 		mov word [bp+0x0A],ax
  3985 00000BC0 895E0C              <4> 		mov word [bp+0x0C],bx
  3986 00000BC3 E94801              <4> 		jmp .done	
  3987                              <4> 	.continue2:
  3988                              <4> 	
  3989                              <4> 	; valores especiais tratados	
  3990                              <4> 
  3991 00000BC6 89E0                <4> 	mov ax,sp
  3992 00000BC8 89C5                <4> 	mov bp,ax	
  3993 00000BCA 8B4602              <4> 	mov ax,[bp+2]
  3994 00000BCD 8B5E06              <4> 	mov bx,[bp+6]
  3995                              <4> 	
  3996 00000BD0 D1E0                <4> 	shl ax,1
  3997 00000BD2 D1E3                <4> 	shl bx,1
  3998 00000BD4 88E5                <4> 	mov ch,ah	
  3999 00000BD6 28FD                <4> 	sub ch,bh	
  4000                              <4> 		
  4001 00000BD8 80FD00              <4> 	cmp ch,0
  4002 00000BDB 7402                <4> 	jz .expzero
  4003 00000BDD EB1E                <4> 	jmp .expnzero
  4004                              <4> 	.expzero:
  4005 00000BDF 50                  <4> 		push ax
  4006 00000BE0 8B4602              <4> 		mov ax,[bp+2]
  4007 00000BE3 8B5E04              <4> 		mov bx,[bp+4]
  4008 00000BE6 8B4E06              <4> 		mov cx,[bp+6]
  4009 00000BE9 8B5608              <4> 		mov dx,[bp+8]
  4010 00000BEC 257F80              <4> 		and ax,0x807F
  4011 00000BEF 81E17F80            <4> 		and cx,0x807F
  4012 00000BF3 0D8000              <4> 		or ax,0x0080
  4013 00000BF6 81C98000            <4> 		or cx,0x0080
  4014                              <4> 												
  4015 00000BFA E99A00              <4> 		jmp .endexpcmp
  4016                              <4> 	.expnzero:
  4017                              <4> 				
  4018 00000BFD 80FD00              <4> 		cmp ch,0
  4019 00000C00 7F05                <4> 		jg .exp1great
  4020 00000C02 7C49                <4> 		jl .exp1less
  4021 00000C04 E99000              <4> 		jmp .endexpcmp
  4022                              <4> 		.exp1great:					
  4023 00000C07 50                  <4> 			push ax
  4024                              <4> 		
  4025 00000C08 8B4606              <4> 			mov ax,[bp+6]
  4026 00000C0B 8B5E08              <4> 			mov bx,[bp+8]
  4027 00000C0E 83E07F              <4> 			and ax,0x007F
  4028 00000C11 0D8000              <4> 			or ax,0x0080
  4029                              <4> 						
  4030 00000C14 55                  <4> 			push bp
  4031                              <4> 			__shr32 ax, bx, ch
  4032                              <5>  stkopen 5
  4033 00000C15 83EC05              <6>  sub word sp, %1
  4034 00000C18 54                  <6>  push sp
  4035 00000C19 5D                  <6>  pop bp
  4036 00000C1A 894600              <5>  mov word [bp+0], %1
  4037 00000C1D 895E02              <5>  mov word [bp+2], %2
  4038 00000C20 886E04              <5>  mov byte [bp+4], %3
  4039 00000C23 E855F7              <5>  call proc_shr32
  4040 00000C26 54                  <5>  push sp
  4041 00000C27 5D                  <5>  pop bp
  4042 00000C28 8B4600              <5>  mov word %1, [bp+0]
  4043 00000C2B 8B5E02              <5>  mov word %2, [bp+2]
  4044                              <5>  stkclose 5
  4045 00000C2E 83C405              <6>  add word sp, %1
  4046 00000C31 5D                  <4> 			pop bp		
  4047                              <4> 				
  4048 00000C32 8B5606              <4> 			mov dx,[bp+6]
  4049 00000C35 81E20080            <4> 			and dx,0x8000
  4050 00000C39 01D0                <4> 			add ax,dx			
  4051                              <4> 			
  4052 00000C3B 89C1                <4> 			mov cx,ax
  4053 00000C3D 89DA                <4> 			mov dx,bx
  4054 00000C3F 8B4602              <4> 			mov ax,[bp+2]
  4055 00000C42 8B5E04              <4> 			mov bx,[bp+4]										
  4056                              <4> 									
  4057 00000C45 257F80              <4> 			and ax,0x807F
  4058 00000C48 0D8000              <4> 			or ax,0x0080
  4059                              <4> 						
  4060 00000C4B EB4A                <4> 			jmp .endexp1cmp	
  4061                              <4> 		.exp1less:
  4062 00000C4D 88E9                <4> 			mov cl,ch
  4063 00000C4F B5FF                <4> 			mov ch,0xFF
  4064 00000C51 28CD                <4> 			sub ch,cl
  4065 00000C53 FEC5                <4> 			inc ch
  4066 00000C55 53                  <4> 			push bx		
  4067                              <4> 		
  4068 00000C56 8B4602              <4> 			mov ax,[bp+2]
  4069 00000C59 8B5E04              <4> 			mov bx,[bp+4]
  4070 00000C5C 83E07F              <4> 			and ax,0x007F
  4071 00000C5F 0D8000              <4> 			or ax,0x0080
  4072                              <4> 						
  4073 00000C62 55                  <4> 			push bp
  4074                              <4> 			__shr32 ax, bx, ch
  4075                              <5>  stkopen 5
  4076 00000C63 83EC05              <6>  sub word sp, %1
  4077 00000C66 54                  <6>  push sp
  4078 00000C67 5D                  <6>  pop bp
  4079 00000C68 894600              <5>  mov word [bp+0], %1
  4080 00000C6B 895E02              <5>  mov word [bp+2], %2
  4081 00000C6E 886E04              <5>  mov byte [bp+4], %3
  4082 00000C71 E807F7              <5>  call proc_shr32
  4083 00000C74 54                  <5>  push sp
  4084 00000C75 5D                  <5>  pop bp
  4085 00000C76 8B4600              <5>  mov word %1, [bp+0]
  4086 00000C79 8B5E02              <5>  mov word %2, [bp+2]
  4087                              <5>  stkclose 5
  4088 00000C7C 83C405              <6>  add word sp, %1
  4089 00000C7F 5D                  <4> 			pop bp
  4090                              <4> 								
  4091 00000C80 8B5602              <4> 			mov dx,[bp+2]
  4092 00000C83 81E20080            <4> 			and dx,0x8000
  4093 00000C87 01D0                <4> 			add ax,dx			
  4094                              <4> 			
  4095 00000C89 8B4E06              <4> 			mov cx,[bp+6]
  4096 00000C8C 8B5608              <4> 			mov dx,[bp+8]										
  4097                              <4> 									
  4098 00000C8F 81E17F80            <4> 			and cx,0x807F
  4099 00000C93 81C98000            <4> 			or cx,0x0080
  4100                              <4> 									
  4101                              <4> 		.endexp1cmp:
  4102                              <4> 		
  4103                              <4> 	.endexpcmp:			
  4104                              <4> 	
  4105 00000C97 837E0E00            <4> 	cmp word [bp+0x0E],0
  4106 00000C9B 7526                <4> 	jnz .sub
  4107                              <4> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0
  4108                              <5>  stkopen 0x0D
  4109 00000C9D 83EC0D              <6>  sub word sp, %1
  4110 00000CA0 54                  <6>  push sp
  4111 00000CA1 5D                  <6>  pop bp
  4112 00000CA2 894600              <5>  mov word [bp+0],%1
  4113 00000CA5 895E02              <5>  mov word [bp+2],%2
  4114 00000CA8 894E04              <5>  mov word [bp+4],%3
  4115 00000CAB 895606              <5>  mov word [bp+6],%4
  4116 00000CAE C7460C0000          <5>  mov word [bp+0x0C], %7
  4117 00000CB3 E81201              <5>  call proc__iaddorsub32
  4118 00000CB6 54                  <5>  push sp
  4119 00000CB7 5D                  <5>  pop bp
  4120 00000CB8 8B4608              <5>  mov word %5,[bp+8]
  4121 00000CBB 8B5E0A              <5>  mov word %6,[bp+0x0A]
  4122                              <5>  stkclose 0x0D
  4123 00000CBE 83C40D              <6>  add word sp, %1
  4124 00000CC1 EB24                <4> 		jmp .endop
  4125                              <4> 	.sub:
  4126                              <4> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0x8000
  4127                              <5>  stkopen 0x0D
  4128 00000CC3 83EC0D              <6>  sub word sp, %1
  4129 00000CC6 54                  <6>  push sp
  4130 00000CC7 5D                  <6>  pop bp
  4131 00000CC8 894600              <5>  mov word [bp+0],%1
  4132 00000CCB 895E02              <5>  mov word [bp+2],%2
  4133 00000CCE 894E04              <5>  mov word [bp+4],%3
  4134 00000CD1 895606              <5>  mov word [bp+6],%4
  4135 00000CD4 C7460C0080          <5>  mov word [bp+0x0C], %7
  4136 00000CD9 E8EC00              <5>  call proc__iaddorsub32
  4137 00000CDC 54                  <5>  push sp
  4138 00000CDD 5D                  <5>  pop bp
  4139 00000CDE 8B4608              <5>  mov word %5,[bp+8]
  4140 00000CE1 8B5E0A              <5>  mov word %6,[bp+0x0A]
  4141                              <5>  stkclose 0x0D
  4142 00000CE4 83C40D              <6>  add word sp, %1
  4143                              <4> 	.endop:
  4144                              <4> 						
  4145 00000CE7 59                  <4> 	pop cx
  4146                              <4> 	
  4147                              <4> 	__normalize ax, bx, cx
  4148                              <5>  stkopen 0x06
  4149 00000CE8 83EC06              <6>  sub word sp, %1
  4150 00000CEB 54                  <6>  push sp
  4151 00000CEC 5D                  <6>  pop bp
  4152 00000CED 894600              <5>  mov word [bp+0],%1
  4153 00000CF0 895E02              <5>  mov word [bp+2],%2
  4154 00000CF3 894E04              <5>  mov word [bp+4],%3
  4155 00000CF6 E81600              <5>  call proc__normalize
  4156 00000CF9 54                  <5>  push sp
  4157 00000CFA 5D                  <5>  pop bp
  4158 00000CFB 8B4600              <5>  mov word %1,[bp+0]
  4159 00000CFE 8B5E02              <5>  mov word %2,[bp+2]
  4160                              <5>  stkclose 0x06
  4161 00000D01 83C406              <6>  add word sp, %1
  4162                              <4> 	
  4163 00000D04 89E1                <4> 	mov cx,sp
  4164 00000D06 89CD                <4> 	mov bp,cx
  4165 00000D08 89460A              <4> 	mov word [bp+0x0A],ax
  4166 00000D0B 895E0C              <4> 	mov word [bp+0x0C],bx
  4167                              <4> 									
  4168                              <4> 	.done:		
  4169                              <4> 							
  4170 00000D0E C3                  <4> 	ret
  4171                              <4> 	
  4172                              <4> proc__normalize:
  4173 00000D0F 89E0                <4> 	mov ax,sp
  4174 00000D11 89C5                <4> 	mov bp,ax	
  4175                              <4> 
  4176 00000D13 8B4E02              <4> 	mov cx,[bp+2]	
  4177 00000D16 8B5604              <4> 	mov dx,[bp+4]
  4178 00000D19 8B5E06              <4> 	mov bx,[bp+6]
  4179                              <4> 					
  4180 00000D1C 89C8                <4> 	mov ax,cx
  4181 00000D1E 250080              <4> 	and ax,0x8000			
  4182 00000D21 894602              <4> 	mov [bp+2],ax	
  4183                              <4> 					
  4184 00000D24 81E1FF7F            <4> 	and cx,0x7FFF
  4185                              <4> 			
  4186 00000D28 51                  <4> 	push cx
  4187 00000D29 52                  <4> 	push dx
  4188 00000D2A 53                  <4> 	push bx
  4189                              <4> 	__lzbitcount32 cx, dx, al	
  4190 00000D2B 52                  <5>  push %2
  4191                              <5>  __lzbitcount16 %1, cl
  4192                              <6>  stkopen 3
  4193 00000D2C 83EC03              <7>  sub word sp, %1
  4194 00000D2F 54                  <7>  push sp
  4195 00000D30 5D                  <7>  pop bp
  4196 00000D31 894E00              <6>  mov word [bp+0], %1
  4197 00000D34 E8C9F6              <6>  call proc__lzbitcount16
  4198 00000D37 54                  <6>  push sp
  4199 00000D38 5D                  <6>  pop bp
  4200 00000D39 8A4E02              <6>  mov byte %2, [bp+2]
  4201                              <6>  stkclose 3
  4202 00000D3C 83C403              <7>  add word sp, %1
  4203 00000D3F 58                  <5>  pop ax
  4204 00000D40 80F910              <5>  cmp cl,16
  4205 00000D43 7217                <5>  jb .end
  4206 00000D45 51                  <5>  push cx
  4207                              <5>  __lzbitcount16 ax, al
  4208                              <6>  stkopen 3
  4209 00000D46 83EC03              <7>  sub word sp, %1
  4210 00000D49 54                  <7>  push sp
  4211 00000D4A 5D                  <7>  pop bp
  4212 00000D4B 894600              <6>  mov word [bp+0], %1
  4213 00000D4E E8AFF6              <6>  call proc__lzbitcount16
  4214 00000D51 54                  <6>  push sp
  4215 00000D52 5D                  <6>  pop bp
  4216 00000D53 8A4602              <6>  mov byte %2, [bp+2]
  4217                              <6>  stkclose 3
  4218 00000D56 83C403              <7>  add word sp, %1
  4219 00000D59 59                  <5>  pop cx
  4220 00000D5A 00C1                <5>  add cl,al
  4221                              <5>  .end:
  4222 00000D5C 88C8                <5>  mov byte %3, cl
  4223 00000D5E 5B                  <4> 	pop bx
  4224 00000D5F 5A                  <4> 	pop dx
  4225 00000D60 59                  <4> 	pop cx								
  4226                              <4> 		
  4227 00000D61 3C08                <4> 	cmp al,8					
  4228 00000D63 7204                <4> 	jb .shr
  4229 00000D65 7728                <4> 	ja .shl
  4230 00000D67 EB4A                <4> 	jmp .endshrl
  4231                              <4> 	.shr:			
  4232 00000D69 B408                <4> 		mov ah,0x08
  4233 00000D6B 28C4                <4> 		sub ah,al
  4234 00000D6D 00E7                <4> 		add bh,ah
  4235 00000D6F 53                  <4> 		push bx
  4236                              <4> 		__shr32 cx, dx, ah
  4237                              <5>  stkopen 5
  4238 00000D70 83EC05              <6>  sub word sp, %1
  4239 00000D73 54                  <6>  push sp
  4240 00000D74 5D                  <6>  pop bp
  4241 00000D75 894E00              <5>  mov word [bp+0], %1
  4242 00000D78 895602              <5>  mov word [bp+2], %2
  4243 00000D7B 886604              <5>  mov byte [bp+4], %3
  4244 00000D7E E8FAF5              <5>  call proc_shr32
  4245 00000D81 54                  <5>  push sp
  4246 00000D82 5D                  <5>  pop bp
  4247 00000D83 8B4E00              <5>  mov word %1, [bp+0]
  4248 00000D86 8B5602              <5>  mov word %2, [bp+2]
  4249                              <5>  stkclose 5
  4250 00000D89 83C405              <6>  add word sp, %1
  4251 00000D8C 5B                  <4> 		pop bx
  4252 00000D8D EB24                <4> 		jmp .endshrl
  4253                              <4> 	.shl:		
  4254 00000D8F B408                <4> 		mov ah,0x08
  4255 00000D91 28E0                <4> 		sub al,ah
  4256 00000D93 28C7                <4> 		sub bh,al			
  4257 00000D95 53                  <4> 		push bx
  4258                              <4> 		__shl32 cx, dx, al
  4259                              <5>  stkopen 5
  4260 00000D96 83EC05              <6>  sub word sp, %1
  4261 00000D99 54                  <6>  push sp
  4262 00000D9A 5D                  <6>  pop bp
  4263 00000D9B 894E00              <5>  mov word [bp+0], %1
  4264 00000D9E 895602              <5>  mov word [bp+2], %2
  4265 00000DA1 884604              <5>  mov byte [bp+4], %3
  4266 00000DA4 E88DF5              <5>  call proc_shl32
  4267 00000DA7 54                  <5>  push sp
  4268 00000DA8 5D                  <5>  pop bp
  4269 00000DA9 8B4E00              <5>  mov word %1, [bp+0]
  4270 00000DAC 8B5602              <5>  mov word %2, [bp+2]
  4271                              <5>  stkclose 5
  4272 00000DAF 83C405              <6>  add word sp, %1
  4273 00000DB2 5B                  <4> 		pop bx			
  4274                              <4> 	.endshrl:											
  4275                              <4> 								
  4276 00000DB3 30DB                <4> 	xor bl,bl
  4277 00000DB5 D1EB                <4> 	shr bx,1	
  4278 00000DB7 83E17F              <4> 	and cx,0x007F	
  4279                              <4> 		
  4280 00000DBA 89E0                <4> 	mov ax,sp
  4281 00000DBC 89C5                <4> 	mov bp,ax
  4282 00000DBE 015E02              <4> 	add word [bp+2],bx
  4283 00000DC1 014E02              <4> 	add word [bp+2],cx	
  4284 00000DC4 895604              <4> 	mov word [bp+4],dx
  4285                              <4> 	
  4286 00000DC7 C3                  <4> 	ret
  4287                              <4> 
  4288                              <4> proc__iaddorsub32:
  4289 00000DC8 89E0                <4> 	mov ax,sp
  4290 00000DCA 89C5                <4> 	mov bp,ax
  4291                              <4> 	
  4292 00000DCC 8B4602              <4> 	mov ax,[bp+2]
  4293 00000DCF 8B5E04              <4> 	mov bx,[bp+4]
  4294 00000DD2 8B4E06              <4> 	mov cx,[bp+6]
  4295 00000DD5 8B5608              <4> 	mov dx,[bp+8]	
  4296                              <4> 	
  4297 00000DD8 50                  <4> 	push ax	
  4298 00000DD9 250080              <4> 	and ax, 0x8000
  4299 00000DDC 83F800              <4> 	cmp ax,0
  4300 00000DDF 741B                <4> 	jz .endv1neg
  4301 00000DE1 58                  <4> 		pop ax
  4302 00000DE2 51                  <4> 		push cx
  4303 00000DE3 52                  <4> 		push dx
  4304                              <4> 		
  4305 00000DE4 B9FFFF              <4> 		mov cx,0xFFFF
  4306 00000DE7 BAFFFF              <4> 		mov dx,0xFFFF
  4307 00000DEA 25FF7F              <4> 		and ax,0x7FFF
  4308 00000DED 29DA                <4> 		sub dx,bx
  4309 00000DEF 19C1                <4> 		sbb cx,ax
  4310 00000DF1 42                  <4> 		inc dx
  4311 00000DF2 83D100              <4> 		adc cx,0
  4312 00000DF5 89C8                <4> 		mov ax,cx
  4313 00000DF7 89D3                <4> 		mov bx,dx
  4314                              <4> 		
  4315 00000DF9 5A                  <4> 		pop dx
  4316 00000DFA 59                  <4> 		pop cx
  4317 00000DFB 50                  <4> 		push ax	
  4318                              <4> 	.endv1neg:		
  4319 00000DFC 58                  <4> 	pop ax	
  4320                              <4> 		
  4321 00000DFD 51                  <4> 	push cx
  4322 00000DFE 81E10080            <4> 	and cx,0x8000
  4323 00000E02 83F900              <4> 	cmp cx,0
  4324 00000E05 741C                <4> 	jz .endv2neg
  4325 00000E07 59                  <4> 		pop cx
  4326 00000E08 50                  <4> 		push ax
  4327 00000E09 53                  <4> 		push bx
  4328                              <4> 		
  4329 00000E0A B8FFFF              <4> 		mov ax,0xFFFF
  4330 00000E0D BBFFFF              <4> 		mov bx,0xFFFF
  4331 00000E10 81E1FF7F            <4> 		and cx,0x7FFF
  4332 00000E14 29D3                <4> 		sub bx,dx
  4333 00000E16 19C8                <4> 		sbb ax,cx
  4334 00000E18 43                  <4> 		inc bx
  4335 00000E19 83D000              <4> 		adc ax,0
  4336 00000E1C 89C1                <4> 		mov cx,ax
  4337 00000E1E 89DA                <4> 		mov dx,bx
  4338                              <4> 		
  4339 00000E20 5B                  <4> 		pop bx
  4340 00000E21 58                  <4> 		pop ax
  4341 00000E22 51                  <4> 		push cx
  4342                              <4> 	.endv2neg:	
  4343 00000E23 59                  <4> 	pop cx
  4344                              <4> 					
  4345 00000E24 837E0E00            <4> 	cmp word [bp+0x0E],0
  4346 00000E28 7506                <4> 	jnz .sub
  4347 00000E2A 01D3                <4> 		add bx, dx
  4348 00000E2C 11C8                <4> 		adc ax, cx				
  4349 00000E2E EB04                <4> 		jmp .endop
  4350                              <4> 	.sub:
  4351 00000E30 29D3                <4> 		sub bx, dx
  4352 00000E32 19C8                <4> 		sbb ax, cx
  4353                              <4> 	.endop:
  4354                              <4> 	
  4355 00000E34 89C1                <4> 	mov cx,ax
  4356 00000E36 81E10080            <4> 	and cx,0x8000
  4357 00000E3A 83F900              <4> 	cmp cx,0
  4358 00000E3D 7415                <4> 	jz .endresneg
  4359 00000E3F B9FFFF              <4> 		mov cx,0xFFFF
  4360 00000E42 BAFFFF              <4> 		mov dx,0xFFFF
  4361 00000E45 29DA                <4> 		sub dx,bx
  4362 00000E47 19C1                <4> 		sbb cx,ax
  4363 00000E49 42                  <4> 		inc dx
  4364 00000E4A 83D100              <4> 		adc cx,0
  4365 00000E4D 89C8                <4> 		mov ax,cx
  4366 00000E4F 89D3                <4> 		mov bx,dx
  4367                              <4> 		
  4368 00000E51 050080              <4> 		add ax,0x8000
  4369                              <4> 	.endresneg:
  4370                              <4> 	
  4371 00000E54 89E1                <4> 	mov cx,sp
  4372 00000E56 89CD                <4> 	mov bp,cx
  4373 00000E58 89460A              <4> 	mov [bp+0x0A], ax
  4374 00000E5B 895E0C              <4> 	mov [bp+0x0C], bx
  4375                              <4> 	
  4376 00000E5E C3                  <4> 	ret	
  4377                              <4> 	
  4378                              <4> proc__mul32_64:
  4379 00000E5F 89E0                <4> 	mov ax,sp
  4380 00000E61 89C5                <4> 	mov bp,ax
  4381                              <4> 		
  4382 00000E63 31D2                <4> 	xor dx,dx
  4383 00000E65 8B4604              <4> 	mov ax,[bp+4]
  4384 00000E68 F76608              <4> 	mul word [bp+8]
  4385                              <4> 	
  4386 00000E6B C7460A0000          <4> 	mov word [bp+0x0A], 0
  4387 00000E70 C7460C0000          <4> 	mov word [bp+0x0C], 0
  4388 00000E75 89560E              <4> 	mov word [bp+0x0E], dx
  4389 00000E78 894610              <4> 	mov word [bp+0x10], ax
  4390                              <4> 		
  4391 00000E7B 31D2                <4> 	xor dx,dx
  4392 00000E7D 8B4604              <4> 	mov ax,[bp+4]
  4393 00000E80 F76606              <4> 	mul word [bp+6]
  4394                              <4> 	
  4395 00000E83 01460E              <4> 	add [bp+0x0E],ax
  4396 00000E86 11560C              <4> 	adc [bp+0x0C],dx
  4397 00000E89 83560A00            <4> 	adc word [bp+0x0A],0
  4398                              <4> 	
  4399 00000E8D 31D2                <4> 	xor dx,dx
  4400 00000E8F 8B4602              <4> 	mov ax,[bp+2]
  4401 00000E92 F76608              <4> 	mul word [bp+8]
  4402                              <4> 	
  4403 00000E95 01460E              <4> 	add [bp+0x0E],ax
  4404 00000E98 11560C              <4> 	adc [bp+0x0C],dx
  4405                              <4> 	
  4406 00000E9B 31D2                <4> 	xor dx,dx
  4407 00000E9D 8B4602              <4> 	mov ax,[bp+2]
  4408 00000EA0 F76606              <4> 	mul word [bp+6]
  4409                              <4> 	
  4410 00000EA3 01460C              <4> 	add [bp+0x0C],ax
  4411 00000EA6 11560A              <4> 	adc [bp+0x0A],dx
  4412                              <4> 	
  4413 00000EA9 C3                  <4> 	ret
  4414                              <4> 	
  4415                              <4> proc__fldiv32:
  4416 00000EAA 89E0                <4> 	mov ax,sp
  4417 00000EAC 89C5                <4> 	mov bp,ax
  4418                              <4> 	
  4419 00000EAE 8B4602              <4> 	mov ax,[bp+2]
  4420 00000EB1 8B5E04              <4> 	mov bx,[bp+4]
  4421 00000EB4 C7460A0000          <4> 	mov word [bp+0x0A],0
  4422 00000EB9 C7460C0000          <4> 	mov word [bp+0x0C],0
  4423                              <4> 	
  4424 00000EBE B118                <4> 	mov cl,24
  4425                              <4> 	.l1:
  4426 00000EC0 80F900              <4> 		cmp cl,0
  4427 00000EC3 0F84AC00            <4> 		jz .l2
  4428 00000EC7 51                  <4> 		push cx
  4429                              <4> 		
  4430 00000EC8 8B4E0A              <4> 		mov cx,[bp+0x0A]
  4431 00000ECB 8B560C              <4> 		mov dx,[bp+0x0C]
  4432 00000ECE 55                  <4> 		push bp
  4433 00000ECF 50                  <4> 		push ax
  4434 00000ED0 53                  <4> 		push bx
  4435                              <4> 		__shl32 cx, dx, 1
  4436                              <5>  stkopen 5
  4437 00000ED1 83EC05              <6>  sub word sp, %1
  4438 00000ED4 54                  <6>  push sp
  4439 00000ED5 5D                  <6>  pop bp
  4440 00000ED6 894E00              <5>  mov word [bp+0], %1
  4441 00000ED9 895602              <5>  mov word [bp+2], %2
  4442 00000EDC C6460401            <5>  mov byte [bp+4], %3
  4443 00000EE0 E851F4              <5>  call proc_shl32
  4444 00000EE3 54                  <5>  push sp
  4445 00000EE4 5D                  <5>  pop bp
  4446 00000EE5 8B4E00              <5>  mov word %1, [bp+0]
  4447 00000EE8 8B5602              <5>  mov word %2, [bp+2]
  4448                              <5>  stkclose 5
  4449 00000EEB 83C405              <6>  add word sp, %1
  4450 00000EEE 5B                  <4> 		pop bx
  4451 00000EEF 58                  <4> 		pop ax
  4452 00000EF0 5D                  <4> 		pop bp
  4453 00000EF1 894E0A              <4> 		mov [bp+0x0A],cx
  4454 00000EF4 89560C              <4> 		mov [bp+0x0C],dx
  4455                              <4> 				
  4456 00000EF7 8B4E06              <4> 		mov cx,[bp+6]
  4457 00000EFA 8B5608              <4> 		mov dx,[bp+8]
  4458 00000EFD 50                  <4> 		push ax
  4459 00000EFE 53                  <4> 		push bx
  4460 00000EFF 55                  <4> 		push bp
  4461                              <4> 		__cmp32 ax, bx, cx, dx, dl
  4462                              <5>  stkopen 9
  4463 00000F00 83EC09              <6>  sub word sp, %1
  4464 00000F03 54                  <6>  push sp
  4465 00000F04 5D                  <6>  pop bp
  4466 00000F05 894600              <5>  mov word [bp+0], %1
  4467 00000F08 895E02              <5>  mov word [bp+2], %2
  4468 00000F0B 894E04              <5>  mov word [bp+4], %3
  4469 00000F0E 895606              <5>  mov word [bp+6], %4
  4470 00000F11 E8F5F3              <5>  call proc_cmp32
  4471 00000F14 54                  <5>  push sp
  4472 00000F15 5D                  <5>  pop bp
  4473 00000F16 8A5608              <5>  mov byte %5, [bp+8]
  4474                              <5>  stkclose 9
  4475 00000F19 83C409              <6>  add word sp, %1
  4476 00000F1C 5D                  <4> 		pop bp
  4477 00000F1D 5B                  <4> 		pop bx
  4478 00000F1E 58                  <4> 		pop ax				
  4479                              <4> 		
  4480 00000F1F 80FA00              <4> 		cmp dl,0
  4481 00000F22 7C2A                <4> 		jl .endsub
  4482 00000F24 8B4E06              <4> 			mov cx,[bp+6]
  4483 00000F27 8B5608              <4> 			mov dx,[bp+8]
  4484 00000F2A 55                  <4> 			push bp									
  4485                              <4> 			__sub32 ax, bx, cx, dx, ax, bx						
  4486                              <5>  stkopen 0x0C
  4487 00000F2B 83EC0C              <6>  sub word sp, %1
  4488 00000F2E 54                  <6>  push sp
  4489 00000F2F 5D                  <6>  pop bp
  4490 00000F30 894600              <5>  mov word [bp+0], %1
  4491 00000F33 895E02              <5>  mov word [bp+2], %2
  4492 00000F36 894E04              <5>  mov word [bp+4], %3
  4493 00000F39 895606              <5>  mov word [bp+6], %4
  4494 00000F3C E8AFF3              <5>  call proc_sub32
  4495 00000F3F 54                  <5>  push sp
  4496 00000F40 5D                  <5>  pop bp
  4497 00000F41 8B4608              <5>  mov word %5, [bp+8]
  4498 00000F44 8B5E0A              <5>  mov word %6, [bp+0x0A]
  4499                              <5>  stkclose 0x0C
  4500 00000F47 83C40C              <6>  add word sp, %1
  4501 00000F4A 5D                  <4> 			pop bp			
  4502 00000F4B FF460C              <4> 			inc word [bp+0x0C]			
  4503                              <4> 		.endsub:
  4504                              <4> 				
  4505 00000F4E 55                  <4> 		push bp
  4506                              <4> 		__shl32 ax, bx, 1
  4507                              <5>  stkopen 5
  4508 00000F4F 83EC05              <6>  sub word sp, %1
  4509 00000F52 54                  <6>  push sp
  4510 00000F53 5D                  <6>  pop bp
  4511 00000F54 894600              <5>  mov word [bp+0], %1
  4512 00000F57 895E02              <5>  mov word [bp+2], %2
  4513 00000F5A C6460401            <5>  mov byte [bp+4], %3
  4514 00000F5E E8D3F3              <5>  call proc_shl32
  4515 00000F61 54                  <5>  push sp
  4516 00000F62 5D                  <5>  pop bp
  4517 00000F63 8B4600              <5>  mov word %1, [bp+0]
  4518 00000F66 8B5E02              <5>  mov word %2, [bp+2]
  4519                              <5>  stkclose 5
  4520 00000F69 83C405              <6>  add word sp, %1
  4521 00000F6C 5D                  <4> 		pop bp
  4522                              <4> 		
  4523 00000F6D 59                  <4> 		pop cx
  4524 00000F6E FEC9                <4> 		dec cl
  4525 00000F70 E94DFF              <4> 		jmp .l1
  4526                              <4> 	.l2:
  4527                              <4> 	
  4528 00000F73 C3                  <4> 	ret
  4529                              <4> 
  4530                              <4> 
  4531                              <4> proc_flinvsig:
  4532 00000F74 89E0                <4> 	mov ax,sp
  4533 00000F76 89C5                <4> 	mov bp,ax
  4534                              <4> 	
  4535 00000F78 8B4602              <4> 	mov ax,[bp+2]	
  4536 00000F7B 89C1                <4> 	mov cx,ax	
  4537 00000F7D 83C900              <4> 	or cx, 0x0000
  4538 00000F80 F7D1                <4> 	not cx
  4539 00000F82 81E10080            <4> 	and cx,0x8000								
  4540 00000F86 25FF7F              <4> 	and ax,0x7FFF			
  4541 00000F89 01C8                <4> 	add ax,cx	
  4542 00000F8B 894602              <4> 	mov word [bp+2],ax
  4543                              <4> 	
  4544 00000F8E C3                  <4> 	ret
  4545                              <4> 
  4546                              <4> proc_flsetsig:
  4547 00000F8F 89E0                <4> 	mov ax,sp
  4548 00000F91 89C5                <4> 	mov bp,ax
  4549                              <4> 
  4550 00000F93 8B4602              <4> 	mov ax,[bp+2]
  4551 00000F96 25FF7F              <4> 	and ax,0x7FFF
  4552 00000F99 034604              <4> 	add ax,[bp+4]
  4553 00000F9C 894602              <4> 	mov [bp+2],ax
  4554                              <4> 				
  4555 00000F9F C3                  <4> 	ret
  4556                              <4> 
  4557                              <4> proc__validate:
  4558 00000FA0 89E0                <4> 	mov ax,sp
  4559 00000FA2 89C5                <4> 	mov bp,ax
  4560                              <4> 	
  4561 00000FA4 8B4602              <4> 	mov ax,[bp+2]
  4562 00000FA7 25FF7F              <4> 	and ax,0x7FFF
  4563 00000FAA 3DFF7F              <4> 	cmp ax,0x7FFF
  4564 00000FAD 750A                <4> 	jne .isnumber1
  4565                              <4> 
  4566 00000FAF 8B4604              <4> 	mov ax,[bp+4]
  4567 00000FB2 83F8FF              <4> 	cmp ax,0xFFFF
  4568 00000FB5 7502                <4> 	jnz .isnumber1
  4569                              <4> 	
  4570 00000FB7 EB37                <4> 	jmp .NaN
  4571                              <4> 	
  4572                              <4> 	.isnumber1:
  4573                              <4> 	
  4574 00000FB9 8B4606              <4> 	mov ax,[bp+6]
  4575 00000FBC 25FF7F              <4> 	and ax,0x7FFF
  4576 00000FBF 3DFF7F              <4> 	cmp ax,0x7FFF
  4577 00000FC2 750A                <4> 	jne .isnumber2
  4578                              <4> 
  4579 00000FC4 8B4608              <4> 	mov ax,[bp+8]
  4580 00000FC7 83F8FF              <4> 	cmp ax,0xFFFF
  4581 00000FCA 7502                <4> 	jnz .isnumber2
  4582                              <4> 	
  4583 00000FCC EB22                <4> 	jmp .NaN
  4584                              <4> 	
  4585                              <4> 	.isnumber2:
  4586                              <4> 	
  4587 00000FCE 8B4602              <4> 	mov ax,[bp+2]
  4588 00000FD1 D1E0                <4> 	shl ax,1
  4589 00000FD3 80FCFF              <4> 	cmp ah,0xFF
  4590 00000FD6 740C                <4> 	je .infinity
  4591                              <4> 
  4592 00000FD8 8B5E06              <4> 	mov bx,[bp+6]
  4593 00000FDB D1E3                <4> 	shl bx,1
  4594 00000FDD 80FFFF              <4> 	cmp bh,0xFF
  4595 00000FE0 7402                <4> 	je .infinity			
  4596                              <4> 	
  4597 00000FE2 EB18                <4> 	jmp .ok	
  4598                              <4> 	
  4599                              <4> 	.infinity:		
  4600 00000FE4 C7460A807F          <4> 		mov word [bp+0x0A],0x7F80
  4601 00000FE9 C7460C0000          <4> 		mov word [bp+0x0C],0
  4602 00000FEE EB12                <4> 		jmp .done
  4603                              <4> 	.NaN:
  4604 00000FF0 C7460AFF7F          <4> 		mov word [bp+0x0A],0x7FFF
  4605 00000FF5 C7460CFFFF          <4> 		mov word [bp+0x0C],0xFFFF
  4606 00000FFA EB06                <4> 		jmp .done
  4607                              <4> 			
  4608                              <4> 	.ok:
  4609 00000FFC C6460E01            <4> 		mov byte [bp+0x0E],1
  4610 00001000 EB04                <4> 		jmp .end
  4611                              <4> 	.done:
  4612 00001002 C6460E00            <4> 		mov byte [bp+0x0E],0		
  4613                              <4> 	.end:
  4614                              <4> 	
  4615 00001006 C3                  <4> 	ret
  4616                              <4> 
  4617                              <4> proc__div_validate:
  4618 00001007 89E0                <4> 	mov ax,sp
  4619 00001009 89C5                <4> 	mov bp,ax
  4620                              <4> 	
  4621 0000100B 8B4602              <4> 	mov ax,[bp+2]
  4622 0000100E 8B5E06              <4> 	mov bx,[bp+6]
  4623 00001011 D1E0                <4> 	shl ax,1
  4624 00001013 D1E3                <4> 	shl bx,1
  4625 00001015 08FC                <4> 	or ah,bh
  4626 00001017 80FC00              <4> 	cmp ah,0
  4627 0000101A 7422                <4> 	jz .NaN
  4628                              <4> 	
  4629 0000101C 8B4602              <4> 	mov ax,[bp+2]
  4630 0000101F D1E0                <4> 	shl ax,1
  4631 00001021 80FC00              <4> 	cmp ah,0
  4632 00001024 7424                <4> 	jz .zero
  4633 00001026 8B5E06              <4> 	mov bx,[bp+6]
  4634 00001029 D1E3                <4> 	shl bx,1
  4635 0000102B 80FF00              <4> 	cmp bh,0	
  4636 0000102E 7402                <4> 	jz .infinity		
  4637                              <4> 		
  4638 00001030 EB24                <4> 	jmp .ok
  4639                              <4> 	
  4640                              <4> 	.infinity:		
  4641 00001032 C7460A807F          <4> 		mov word [bp+0x0A],0x7F80
  4642 00001037 C7460C0000          <4> 		mov word [bp+0x0C],0
  4643 0000103C EB1E                <4> 		jmp .done
  4644                              <4> 	.NaN:
  4645 0000103E C7460AFF7F          <4> 		mov word [bp+0x0A],0x7FFF
  4646 00001043 C7460CFFFF          <4> 		mov word [bp+0x0C],0xFFFF
  4647 00001048 EB12                <4> 		jmp .done
  4648                              <4> 	.zero:
  4649 0000104A C7460A0000          <4> 		mov word [bp+0x0A],0
  4650 0000104F C7460C0000          <4> 		mov word [bp+0x0C],0
  4651 00001054 EB06                <4> 		jmp .done	
  4652                              <4> 			
  4653                              <4> 	.ok:
  4654 00001056 C6460E01            <4> 		mov byte [bp+0x0E],1
  4655 0000105A EB04                <4> 		jmp .end
  4656                              <4> 	.done:	
  4657 0000105C C6460E00            <4> 		mov byte [bp+0x0E],0
  4658                              <4> 	.end:	
  4659                              <4> 		
  4660 00001060 C3                  <4> 	ret
  4661                              <4> 	
  4662                              <4> proc__mul_validate:
  4663 00001061 89E0                <4> 	mov ax,sp
  4664 00001063 89C5                <4> 	mov bp,ax
  4665                              <4> 	
  4666 00001065 8B4602              <4> 	mov ax,[bp+2]
  4667 00001068 D1E0                <4> 	shl ax,1	
  4668 0000106A 80FC00              <4> 	cmp ah,0	
  4669 0000106D 740C                <4> 	jz .zero		
  4670                              <4> 
  4671 0000106F 8B5E04              <4> 	mov bx,[bp+4]
  4672 00001072 D1E3                <4> 	shl bx,1
  4673 00001074 80FF00              <4> 	cmp bh,0
  4674 00001077 7402                <4> 	jz .zero
  4675                              <4> 			
  4676 00001079 EB0C                <4> 	jmp .ok
  4677                              <4> 	
  4678                              <4> 	.zero:		
  4679 0000107B C746060000          <4> 		mov word [bp+6],0
  4680 00001080 C746080000          <4> 		mov word [bp+8],0
  4681 00001085 EB06                <4> 		jmp .done
  4682                              <4> 			
  4683                              <4> 	.ok:
  4684 00001087 C6460A01            <4> 		mov byte [bp+0x0A],1
  4685 0000108B EB04                <4> 		jmp .end
  4686                              <4> 	.done:	
  4687 0000108D C6460A00            <4> 		mov byte [bp+0x0A],0
  4688                              <4> 	.end:	
  4689                              <4> 		
  4690 00001091 C3                  <4> 	ret
  4691                              <4> 	
  4692                              <4> proc__addorsub_validate:
  4693 00001092 89E0                <4> 	mov ax,sp
  4694 00001094 89C5                <4> 	mov bp,ax
  4695                              <4> 	
  4696 00001096 8B4602              <4> 	mov ax,[bp+2]
  4697 00001099 8B5E06              <4> 	mov bx,[bp+6]	
  4698 0000109C D1E0                <4> 	shl ax,1
  4699 0000109E D1E3                <4> 	shl bx,1
  4700 000010A0 08FC                <4> 	or ah,bh
  4701 000010A2 80FC00              <4> 	cmp ah,0
  4702 000010A5 7416                <4> 	jz .zero
  4703                              <4> 	
  4704 000010A7 8B4602              <4> 	mov ax,[bp+2]
  4705 000010AA D1E0                <4> 	shl ax,1
  4706 000010AC 80FC00              <4> 	cmp ah,0		
  4707 000010AF 7426                <4> 	jz .value2
  4708                              <4> 	
  4709 000010B1 8B4606              <4> 	mov ax,[bp+6]
  4710 000010B4 D1E0                <4> 	shl ax,1
  4711 000010B6 80FC00              <4> 	cmp ah,0
  4712 000010B9 740E                <4> 	jz .value1	
  4713                              <4> 		
  4714 000010BB EB28                <4> 	jmp .ok
  4715                              <4> 	
  4716                              <4> 	.zero:		
  4717 000010BD C7460A0000          <4> 		mov word [bp+0x0A],0
  4718 000010C2 C7460C0000          <4> 		mov word [bp+0x0C],0
  4719 000010C7 EB22                <4> 		jmp .done
  4720                              <4> 	.value1:
  4721 000010C9 8B4602              <4> 		mov ax,[bp+2]
  4722 000010CC 8B5E04              <4> 		mov bx,[bp+4]
  4723 000010CF 89460A              <4> 		mov word [bp+0x0A],ax
  4724 000010D2 895E0C              <4> 		mov word [bp+0x0C],bx		
  4725 000010D5 EB14                <4> 		jmp .done
  4726                              <4> 	.value2:		
  4727 000010D7 8B4606              <4> 		mov ax,[bp+6]
  4728 000010DA 8B5E08              <4> 		mov bx,[bp+8]
  4729 000010DD 89460A              <4> 		mov word [bp+0x0A],ax
  4730 000010E0 895E0C              <4> 		mov word [bp+0x0C],bx
  4731 000010E3 EB06                <4> 		jmp .done
  4732                              <4> 			
  4733                              <4> 	.ok:
  4734 000010E5 C6460E01            <4> 		mov byte [bp+0x0E],1
  4735 000010E9 EB04                <4> 		jmp .end
  4736                              <4> 	.done:	
  4737 000010EB C6460E00            <4> 		mov byte [bp+0x0E],0
  4738                              <4> 	.end:	
  4739                              <4> 		
  4740 000010EF C3                  <4> 	ret
  4741                              <4> 	
  4742                              <4> 
  4743                              <4> proc__cmp_validate:
  4744 000010F0 89E0                <4> 	mov ax,sp
  4745 000010F2 89C5                <4> 	mov bp,ax
  4746                              <4> 	
  4747 000010F4 8B4602              <4> 	mov ax,[bp+2]
  4748 000010F7 8B5E04              <4> 	mov bx,[bp+4]
  4749 000010FA D1E0                <4> 	shl ax,1
  4750 000010FC D1E3                <4> 	shl bx,1
  4751                              <4> 	
  4752 000010FE 88E5                <4> 	mov ch,ah
  4753 00001100 30FD                <4> 	xor ch,bh
  4754 00001102 80FD00              <4> 	cmp ch,0
  4755 00001105 743A                <4> 	jz .ok
  4756                              <4> 		
  4757 00001107 80FC00              <4> 	cmp ah,0
  4758 0000110A 7407                <4> 	jz .zerov1
  4759                              <4> 	
  4760 0000110C 80FF00              <4> 	cmp bh,0
  4761 0000110F 7419                <4> 	jz .zerov2	
  4762                              <4> 			
  4763 00001111 EB2E                <4> 	jmp .ok
  4764                              <4> 	
  4765                              <4> 	.zerov1:
  4766 00001113 8B4604              <4> 		mov ax,[bp+4]
  4767 00001116 250080              <4> 		and ax,0x8000
  4768 00001119 83F800              <4> 		cmp ax,0
  4769 0000111C 7506                <4> 		jnz .neg1
  4770 0000111E C64606FF            <4> 			mov byte [bp+6],-1
  4771 00001122 EB04                <4> 			jmp .endcmp1
  4772                              <4> 		.neg1:
  4773 00001124 C6460601            <4> 			mov byte [bp+6], 1
  4774                              <4> 		.endcmp1:
  4775 00001128 EB1D                <4> 		jmp .done
  4776                              <4> 	.zerov2:		
  4777 0000112A 8B4602              <4> 		mov ax,[bp+2]
  4778 0000112D 250080              <4> 		and ax,0x8000
  4779 00001130 83F800              <4> 		cmp ax,0
  4780 00001133 7506                <4> 		jnz .neg2
  4781 00001135 C6460601            <4> 			mov byte [bp+6], 1
  4782 00001139 EB04                <4> 			jmp .endcmp2
  4783                              <4> 		.neg2:
  4784 0000113B C64606FF            <4> 			mov byte [bp+6],-1
  4785                              <4> 		.endcmp2:
  4786 0000113F EB06                <4> 		jmp .done	
  4787                              <4> 			
  4788                              <4> 	.ok:
  4789 00001141 C6460701            <4> 		mov byte [bp+7],1
  4790 00001145 EB04                <4> 		jmp .end
  4791                              <4> 	.done:	
  4792 00001147 C6460700            <4> 		mov byte [bp+7],0
  4793                              <4> 	.end:	
  4794                              <4> 		
  4795 0000114B C3                  <4> 	ret
  4796                              <4> 	
  4797                              <4> %endif
  4798                              <3> 
  4799                              <3> %macro flinvsig 1
  4800                              <3> 	flinvsig cs, %1
  4801                              <3> %endmacro
  4802                              <3> 
  4803                              <3> %macro flsetsig 1
  4804                              <3> 	flsetsig cs, %1
  4805                              <3> %endmacro
  4806                              <3> 
  4807                              <3> %macro flclrsig 1
  4808                              <3> 	flclrsig cs, %1
  4809                              <3> %endmacro
  4810                              <3> 
  4811                              <3> %macro int16tofl 2
  4812                              <3> 	int16tofl cs, %1, cs, %2
  4813                              <3> %endmacro
  4814                              <3> 
  4815                              <3> %macro fltoint16 2
  4816                              <3> 	fltoint16 cs, %1, cs, %2
  4817                              <3> %endmacro
  4818                              <3> 
  4819                              <3> %macro fltoint32 1
  4820                              <3> 	fltoint32 %1, %1
  4821                              <3> %endmacro
  4822                              <3> 
  4823                              <3> %macro fltoint32 2
  4824                              <3> 	fltoint32 cs, %1, cs, %2
  4825                              <3> %endmacro
  4826                              <3> 
  4827                              <3> %macro int32tofl 1
  4828                              <3> 	int32tofl %1, %1
  4829                              <3> %endmacro
  4830                              <3> 
  4831                              <3> %macro int32tofl 2
  4832                              <3> 	int32tofl cs, %1, cs, %2
  4833                              <3> %endmacro
  4834                              <3> 
  4835                              <3> %macro truncate 1
  4836                              <3> 	truncate %1, %1
  4837                              <3> %endmacro
  4838                              <3> 
  4839                              <3> %macro truncate 2
  4840                              <3> 	truncate cs, %1, cs, %2
  4841                              <3> %endmacro
  4842                              <3> 
  4843                              <3> %macro flcmp 3
  4844                              <3> 	flcmp cs, %1, cs, %2, %3
  4845                              <3> %endmacro
  4846                              <3> 
  4847                              <3> %macro flshl 1
  4848                              <3> 	flshl cs, %1
  4849                              <3> %endmacro
  4850                              <3> 
  4851                              <3> %macro flshr 1
  4852                              <3> 	flshr cs, %1
  4853                              <3> %endmacro
  4854                              <3> 
  4855                              <3> %macro fladd 3
  4856                              <3> 	fladd cs, %1, cs, %2, cs, %3
  4857                              <3> %endmacro
  4858                              <3> 
  4859                              <3> %macro flsub 3
  4860                              <3> 	flsub cs, %1, cs, %2, cs, %3
  4861                              <3> %endmacro	
  4862                              <3> 
  4863                              <3> %macro flmul 3
  4864                              <3> 	flmul cs, %1, cs, %2, cs, %3
  4865                              <3> %endmacro
  4866                              <3> 
  4867                              <3> %macro fldiv 3
  4868                              <3> 	fldiv cs, %1, cs, %2, cs, %3
  4869                              <3> %endmacro	
  4870                              <3> 
  4871                              <3> %macro fladd 6
  4872                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  4873                              <3> %endmacro
  4874                              <3> 
  4875                              <3> %macro flsub 6
  4876                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  4877                              <3> %endmacro
  4878                              <3> 
  4879                              <3> %macro fltoint16 4
  4880                              <3> 	stkopen 0x06
  4881                              <3> 	mov ax,%1
  4882                              <3> 	mov ds,ax
  4883                              <3> 	mov ax,[%2+2]
  4884                              <3> 	mov [bp+0],ax
  4885                              <3> 	mov ax,[%2]
  4886                              <3> 	mov [bp+2],ax	
  4887                              <3> 	call proc_fltoint16
  4888                              <3> 	mov ax,sp
  4889                              <3> 	mov bp,ax
  4890                              <3> 	mov ax,%3
  4891                              <3> 	mov ds,ax
  4892                              <3> 	mov ax,[bp+4]
  4893                              <3> 	mov [%4],ax
  4894                              <3> 	stkclose 0x06
  4895                              <3> %endmacro
  4896                              <3> 
  4897                              <3> %macro int16tofl 4	
  4898                              <3> 	stkopen 0x06
  4899                              <3> 	mov ax,%1
  4900                              <3> 	mov ds,ax
  4901                              <3> 	mov ax,[%2]
  4902                              <3> 	mov [bp+0],ax	
  4903                              <3> 	call proc_int16tofl
  4904                              <3> 	mov ax,sp
  4905                              <3> 	mov bp,ax
  4906                              <3> 	mov ax,%3
  4907                              <3> 	mov ds,ax
  4908                              <3> 	mov ax,[bp+2]
  4909                              <3> 	mov [%4+2],ax
  4910                              <3> 	mov ax,[bp+4]
  4911                              <3> 	mov [%4],ax
  4912                              <3> 	stkclose 0x06
  4913                              <3> %endmacro
  4914                              <3> 
  4915                              <3> %macro fltoint32 4
  4916                              <3> 	stkopen 0x08
  4917                              <3> 	mov ax,%1
  4918                              <3> 	mov ds,ax
  4919                              <3> 	mov ax,[%2+2]
  4920                              <3> 	mov [bp+0],ax
  4921                              <3> 	mov ax,[%2]
  4922                              <3> 	mov [bp+2],ax	
  4923                              <3> 	call proc_fltoint32
  4924                              <3> 	mov ax,sp
  4925                              <3> 	mov bp,ax
  4926                              <3> 	mov ax,%3
  4927                              <3> 	mov ds,ax
  4928                              <3> 	mov ax,[bp+4]
  4929                              <3> 	mov [%4+2],ax
  4930                              <3> 	mov ax,[bp+6]
  4931                              <3> 	mov [%4],ax
  4932                              <3> 	stkclose 0x08
  4933                              <3> %endmacro
  4934                              <3> 
  4935                              <3> %macro int32tofl 4
  4936                              <3> 	stkopen 0x08
  4937                              <3> 	mov ax,%1
  4938                              <3> 	mov ds,ax
  4939                              <3> 	mov ax,[%2+2]
  4940                              <3> 	mov [bp+0],ax
  4941                              <3> 	mov ax,[%2]
  4942                              <3> 	mov [bp+2],ax	
  4943                              <3> 	call proc_int32tofl
  4944                              <3> 	mov ax,sp
  4945                              <3> 	mov bp,ax
  4946                              <3> 	mov ax,%3
  4947                              <3> 	mov ds,ax
  4948                              <3> 	mov ax,[bp+4]
  4949                              <3> 	mov [%4+2],ax
  4950                              <3> 	mov ax,[bp+6]
  4951                              <3> 	mov [%4],ax
  4952                              <3> 	stkclose 0x08
  4953                              <3> %endmacro
  4954                              <3> 
  4955                              <3> 
  4956                              <3> %macro truncate 4
  4957                              <3> 	stkopen 0x08
  4958                              <3> 	mov ax,%1
  4959                              <3> 	mov ds,ax
  4960                              <3> 	mov ax,[%2+2]
  4961                              <3> 	mov [bp+0],ax
  4962                              <3> 	mov ax,[%2]
  4963                              <3> 	mov [bp+2],ax	
  4964                              <3> 	call proc_truncate
  4965                              <3> 	mov ax,sp
  4966                              <3> 	mov bp,ax
  4967                              <3> 	mov ax,%3
  4968                              <3> 	mov ds,ax
  4969                              <3> 	mov ax,[bp+4]
  4970                              <3> 	mov [%4+2],ax
  4971                              <3> 	mov ax,[bp+6]
  4972                              <3> 	mov [%4],ax
  4973                              <3> 	stkclose 0x08
  4974                              <3> %endmacro
  4975                              <3> 
  4976                              <3> %macro flinvsig 2
  4977                              <3> 	stkopen 0x02
  4978                              <3> 	mov ax,%1
  4979                              <3> 	mov ds,ax
  4980                              <3> 	mov ax,[%2+2]
  4981                              <3> 	mov word [bp+0], ax
  4982                              <3> 	call proc_flinvsig
  4983                              <3> 	push sp
  4984                              <3> 	pop bp
  4985                              <3> 	mov ax,[bp+0]
  4986                              <3> 	mov word [%2+2],ax
  4987                              <3> 	stkclose 0x02
  4988                              <3> %endmacro
  4989                              <3> 
  4990                              <3> %macro flsetsig 2
  4991                              <3> 	stkopen 0x04
  4992                              <3> 	mov ax,%1
  4993                              <3> 	mov ds,ax
  4994                              <3> 	mov ax,[%2+2]
  4995                              <3> 	mov word [bp+0], ax
  4996                              <3> 	mov word [bp+2], 0x8000
  4997                              <3> 	call proc_flsetsig
  4998                              <3> 	push sp
  4999                              <3> 	pop bp
  5000                              <3> 	mov ax,[bp+0]
  5001                              <3> 	mov word [%2+2],ax
  5002                              <3> 	stkclose 0x04	
  5003                              <3> %endmacro
  5004                              <3> 
  5005                              <3> %macro flclrsig 2
  5006                              <3> 	stkopen 0x04
  5007                              <3> 	mov ax,%1
  5008                              <3> 	mov ds,ax
  5009                              <3> 	mov ax,[%2+2]
  5010                              <3> 	mov word [bp+0], ax
  5011                              <3> 	mov word [bp+2], 0x0000
  5012                              <3> 	call proc_flsetsig
  5013                              <3> 	push sp
  5014                              <3> 	pop bp
  5015                              <3> 	mov ax,[bp+0]
  5016                              <3> 	mov word [%2+2],ax
  5017                              <3> 	stkclose 0x04	
  5018                              <3> %endmacro
  5019                              <3> 
  5020                              <3> %macro flcmp 5	
  5021                              <3> 	stkopen 0x09
  5022                              <3> 	mov ax,%1
  5023                              <3> 	mov ds,ax
  5024                              <3> 	mov ax,[%2+2]
  5025                              <3> 	mov [bp+0],ax
  5026                              <3> 	mov ax,[%2]
  5027                              <3> 	mov [bp+2],ax
  5028                              <3> 	mov ax,%3
  5029                              <3> 	mov ds,ax
  5030                              <3> 	mov ax,[%4+2]
  5031                              <3> 	mov [bp+4],ax
  5032                              <3> 	mov ax,[%4]
  5033                              <3> 	mov [bp+6],ax
  5034                              <3> 	call proc_flcmp
  5035                              <3> 	mov ax,sp
  5036                              <3> 	mov bp,ax
  5037                              <3> 	mov byte %5,[bp+8]
  5038                              <3> 	stkclose 0x09
  5039                              <3> %endmacro
  5040                              <3> 
  5041                              <3> %macro flshl 2	
  5042                              <3> 	stkopen 0x02
  5043                              <3> 	mov ax,%1
  5044                              <3> 	mov ds,ax
  5045                              <3> 	mov ax,[%2+2]
  5046                              <3> 	mov [bp+0],ax
  5047                              <3> 	call proc_flshl
  5048                              <3> 	mov ax,sp
  5049                              <3> 	mov bp,ax
  5050                              <3> 	mov ax,%1
  5051                              <3> 	mov ds,ax
  5052                              <3> 	mov ax,[bp+0]
  5053                              <3> 	mov [%2+2],ax
  5054                              <3> 	stkclose 0x02
  5055                              <3> %endmacro
  5056                              <3> 
  5057                              <3> %macro flshr 2	
  5058                              <3> 	stkopen 0x02
  5059                              <3> 	mov ax,%1
  5060                              <3> 	mov ds,ax
  5061                              <3> 	mov ax,[%2+2]
  5062                              <3> 	mov [bp+0],ax
  5063                              <3> 	call proc_flshr
  5064                              <3> 	mov ax,sp
  5065                              <3> 	mov bp,ax
  5066                              <3> 	mov ax,%1
  5067                              <3> 	mov ds,ax
  5068                              <3> 	mov ax,[bp+0]
  5069                              <3> 	mov [%2+2],ax
  5070                              <3> 	stkclose 0x02
  5071                              <3> %endmacro
  5072                              <3> 
  5073                              <3> %macro fldiv 6	
  5074                              <3> 	stkopen 0x0C
  5075                              <3> 	mov ax,%1
  5076                              <3> 	mov ds,ax
  5077                              <3> 	mov ax,[%2+2]
  5078                              <3> 	mov [bp+0],ax
  5079                              <3> 	mov ax,[%2]
  5080                              <3> 	mov [bp+2],ax
  5081                              <3> 	mov ax,%3
  5082                              <3> 	mov ds,ax
  5083                              <3> 	mov ax,[%4+2]
  5084                              <3> 	mov [bp+4],ax
  5085                              <3> 	mov ax,[%4]
  5086                              <3> 	mov [bp+6],ax
  5087                              <3> 	call proc_fldiv
  5088                              <3> 	mov ax,sp
  5089                              <3> 	mov bp,ax
  5090                              <3> 	mov ax,%5
  5091                              <3> 	mov ds,ax
  5092                              <3> 	mov ax,[bp+8]
  5093                              <3> 	mov [%6+2],ax
  5094                              <3> 	mov ax,[bp+0x0A]
  5095                              <3> 	mov [%6],ax
  5096                              <3> 	stkclose 0x0C
  5097                              <3> %endmacro
  5098                              <3> 
  5099                              <3> %macro flmul 6	
  5100                              <3> 	stkopen 0x0C
  5101                              <3> 	mov ax,%1
  5102                              <3> 	mov ds,ax
  5103                              <3> 	mov ax,[%2+2]
  5104                              <3> 	mov [bp+0],ax
  5105                              <3> 	mov ax,[%2]
  5106                              <3> 	mov [bp+2],ax
  5107                              <3> 	mov ax,%3
  5108                              <3> 	mov ds,ax
  5109                              <3> 	mov ax,[%4+2]
  5110                              <3> 	mov [bp+4],ax
  5111                              <3> 	mov ax,[%4]
  5112                              <3> 	mov [bp+6],ax
  5113                              <3> 	call proc_flmul
  5114                              <3> 	mov ax,sp
  5115                              <3> 	mov bp,ax
  5116                              <3> 	mov ax,%5
  5117                              <3> 	mov ds,ax
  5118                              <3> 	mov ax,[bp+8]
  5119                              <3> 	mov [%6+2],ax
  5120                              <3> 	mov ax,[bp+0x0A]
  5121                              <3> 	mov [%6],ax
  5122                              <3> 	stkclose 0x0C
  5123                              <3> %endmacro
  5124                              <3> 	
  5125                              <3> %macro fladdorsub 7
  5126                              <3> 	stkopen 0x0E
  5127                              <3> 	mov ax,%1
  5128                              <3> 	mov ds,ax
  5129                              <3> 	mov ax,[%2+2]
  5130                              <3> 	mov [bp+0],ax
  5131                              <3> 	mov ax,[%2]
  5132                              <3> 	mov [bp+2],ax
  5133                              <3> 	mov ax,%3
  5134                              <3> 	mov ds,ax
  5135                              <3> 	mov ax,[%4+2]
  5136                              <3> 	mov [bp+4],ax
  5137                              <3> 	mov ax,[%4]
  5138                              <3> 	mov [bp+6],ax
  5139                              <3> 	mov word [bp+0x0C], %7
  5140                              <3> 	call proc_fladdorsub
  5141                              <3> 	mov ax,sp
  5142                              <3> 	mov bp,ax
  5143                              <3> 	mov ax,%5
  5144                              <3> 	mov ds,ax
  5145                              <3> 	mov ax,[bp+8]
  5146                              <3> 	mov [%6+2],ax
  5147                              <3> 	mov ax,[bp+0x0A]
  5148                              <3> 	mov [%6],ax
  5149                              <3> 	stkclose 0x0E
  5150                              <3> %endmacro
  5151                              <3> 	
  5152                              <3> %endif
  5153                              <2> 
  5154                              <2> %macro __sin 4
  5155                              <2> 	__sinorcos %1, %2, %3, %4, 1
  5156                              <2> %endmacro
  5157                              <2> 
  5158                              <2> %macro __cos 4
  5159                              <2> 	__sinorcos %1, %2, %3, %4, 0
  5160                              <2> %endmacro
  5161                              <2> 
  5162                              <2> %macro __sin0x90 4
  5163                              <2> 	__sinorcos0x90 %1, %2, %3, %4, 1
  5164                              <2> %endmacro
  5165                              <2> 
  5166                              <2> %macro __cos0x90 4
  5167                              <2> 	__sinorcos0x90 %1, %2, %3, %4, 0
  5168                              <2> %endmacro
  5169                              <2> 
  5170                              <2> %macro __to0x360 4
  5171                              <2> 	stkopen 0x04
  5172                              <2> 	mov word [bp+0],%1
  5173                              <2> 	mov word [bp+2],%2	
  5174                              <2> 	call proc_to0x360
  5175                              <2> 	push sp
  5176                              <2> 	pop bp
  5177                              <2> 	mov word %3,[bp+4]
  5178                              <2> 	mov word %4,[bp+6]
  5179                              <2> 	stkclose 0x04
  5180                              <2> %endmacro
  5181                              <2> 
  5182                              <2> %macro __toradians 4
  5183                              <2> 	stkopen 0x08
  5184                              <2> 	mov word [bp+0],%1
  5185                              <2> 	mov word [bp+2],%2
  5186                              <2> 	call proc_toradians
  5187                              <2> 	push sp
  5188                              <2> 	pop bp
  5189                              <2> 	mov word %3, [bp+4]
  5190                              <2> 	mov word %4, [bp+6]
  5191                              <2> 	stkclose 0x08
  5192                              <2> %endmacro
  5193                              <2> 
  5194                              <2> %macro __todegrees 4
  5195                              <2> 	stkopen 0x08
  5196                              <2> 	mov word [bp+0],%1
  5197                              <2> 	mov word [bp+2],%2
  5198                              <2> 	call proc_todegrees
  5199                              <2> 	push sp
  5200                              <2> 	pop bp
  5201                              <2> 	mov word %3, [bp+4]
  5202                              <2> 	mov word %4, [bp+6]
  5203                              <2> 	stkclose 0x08
  5204                              <2> %endmacro
  5205                              <2> 
  5206                              <2> %macro __atan 4
  5207                              <2> 	stkopen 0x08
  5208                              <2> 	mov word [bp+0],%1
  5209                              <2> 	mov word [bp+2],%2	
  5210                              <2> 	call proc_atan
  5211                              <2> 	push sp
  5212                              <2> 	pop bp
  5213                              <2> 	mov word %3,[bp+4]
  5214                              <2> 	mov word %4,[bp+6]
  5215                              <2> 	stkclose 0x08
  5216                              <2> %endmacro
  5217                              <2> 
  5218                              <2> %macro __sinorcos 5
  5219                              <2> 	stkopen 0x09
  5220                              <2> 	mov word [bp+0],%1
  5221                              <2> 	mov word [bp+2],%2	
  5222                              <2> 	mov byte [bp+8],%5
  5223                              <2> 	call proc_sinorcos
  5224                              <2> 	push sp
  5225                              <2> 	pop bp
  5226                              <2> 	mov word %3,[bp+4]
  5227                              <2> 	mov word %4,[bp+6]
  5228                              <2> 	stkclose 0x09
  5229                              <2> %endmacro
  5230                              <2> 
  5231                              <2> %macro __sinorcos0x90 5
  5232                              <2> 	stkopen 0x09
  5233                              <2> 	mov word [bp+0],%1
  5234                              <2> 	mov word [bp+2],%2
  5235                              <2> 	mov byte [bp+8],%5
  5236                              <2> 	call proc_sinorcos0x90
  5237                              <2> 	push sp
  5238                              <2> 	pop bp
  5239                              <2> 	mov word %3,[bp+4]
  5240                              <2> 	mov word %4,[bp+6]
  5241                              <2> 	stkclose 0x09
  5242                              <2> %endmacro
  5243                              <2> 
  5244                              <2> %macro __sinnorm 3
  5245                              <2> 	stkopen 0x06
  5246                              <2> 	mov word [bp+0],%1
  5247                              <2> 	mov word [bp+2],%2
  5248                              <2> 	call proc__sinnorm
  5249                              <2> 	push sp
  5250                              <2> 	pop bp
  5251                              <2> 	mov word %1,[bp+0]
  5252                              <2> 	mov word %2,[bp+2]
  5253                              <2> 	mov word %3,[bp+4]
  5254                              <2> 	stkclose 0x06
  5255                              <2> %endmacro
  5256                              <2> 
  5257                              <2> %macro __cosnorm 3
  5258                              <2> 	stkopen 0x06
  5259                              <2> 	mov word [bp+0],%1
  5260                              <2> 	mov word [bp+2],%2
  5261                              <2> 	call proc__cosnorm
  5262                              <2> 	push sp
  5263                              <2> 	pop bp
  5264                              <2> 	mov word %1,[bp+0]
  5265                              <2> 	mov word %2,[bp+2]
  5266                              <2> 	mov word %3,[bp+4]
  5267                              <2> 	stkclose 0x06
  5268                              <2> %endmacro
  5269                              <2> 
  5270                              <2> %macro __norm_factors 5
  5271                              <2> 	stkopen 0x0A
  5272                              <2> 	mov word [bp+0],%1
  5273                              <2> 	mov word [bp+2],%2
  5274                              <2> 	call proc__norm_factors
  5275                              <2> 	push sp
  5276                              <2> 	pop bp
  5277                              <2> 	mov word %3,[bp+4]
  5278                              <2> 	mov word %4,[bp+6]
  5279                              <2> 	mov word %5,[bp+8]
  5280                              <2> 	stkclose 0x0A
  5281                              <2> %endmacro
  5282                              <2> 
  5283                              <2> %macro __fat16 2
  5284                              <2> 	stkopen 0x04
  5285                              <2> 	mov word [bp+0],%1
  5286                              <2> 	call proc__fat16
  5287                              <2> 	push sp
  5288                              <2> 	pop bp
  5289                              <2> 	mov word %2, [bp+2]
  5290                              <2> 	stkclose 0x04
  5291                              <2> %endmacro
  5292                              <2> 
  5293                              <2> %macro __pow16 3
  5294                              <2> 	stkopen 0x06
  5295                              <2> 	mov word [bp+0],%1
  5296                              <2> 	mov word [bp+2],%2
  5297                              <2> 	call proc__pow16
  5298                              <2> 	push sp
  5299                              <2> 	pop bp
  5300                              <2> 	mov word %3, [bp+4]
  5301                              <2> 	stkclose 0x06
  5302                              <2> %endmacro
  5303                              <2> 	
  5304                              <2> section .data
  5305 0000114C DB0F4940            <2> 	PI: dd 0x40490FDB
  5306 00001150 00003443            <2> 	__180dg: dd 0x43340000
  5307                              <2> 
  5308                              <2> proc_to0x360:
  5309 00001154 89E0                <2> 	mov ax,sp
  5310 00001156 89C5                <2> 	mov bp,ax
  5311                              <2> 	
  5312 00001158 8B4602              <2> 	mov ax,[bp+2]
  5313 0000115B 8B5E04              <2> 	mov bx,[bp+4]
  5314 0000115E 25FF7F              <2> 	and ax,0x7FFF
  5315                              <2> 	
  5316 00001161 B9C940              <2> 	mov cx,0x40C9	; 2*PI (alta)
  5317 00001164 BADB0F              <2> 	mov dx,0x0FDB	; 2*PI (baixa)		
  5318                              <2> 		
  5319 00001167 55                  <2> 	push bp
  5320                              <2> 	__fldiv ax, bx, cx, dx, cx, dx
  5321                              <3>  stkopen 0x0E
  5322 00001168 83EC0E              <4>  sub word sp, %1
  5323 0000116B 54                  <4>  push sp
  5324 0000116C 5D                  <4>  pop bp
  5325 0000116D 894600              <3>  mov word [bp+0],%1
  5326 00001170 895E02              <3>  mov word [bp+2],%2
  5327 00001173 894E04              <3>  mov word [bp+4],%3
  5328 00001176 895606              <3>  mov word [bp+6],%4
  5329 00001179 E8D7F6              <3>  call proc_fldiv
  5330 0000117C 54                  <3>  push sp
  5331 0000117D 5D                  <3>  pop bp
  5332 0000117E 8B4E08              <3>  mov word %5,[bp+8]
  5333 00001181 8B560A              <3>  mov word %6,[bp+0x0A]
  5334                              <3>  stkclose 0x0E
  5335 00001184 83C40E              <4>  add word sp, %1
  5336                              <2> 	__fltoint32 cx, dx, cx, dx
  5337                              <3>  stkopen 0x08
  5338 00001187 83EC08              <4>  sub word sp, %1
  5339 0000118A 54                  <4>  push sp
  5340 0000118B 5D                  <4>  pop bp
  5341 0000118C 894E00              <3>  mov word [bp+0],%1
  5342 0000118F 895602              <3>  mov word [bp+2],%2
  5343 00001192 E85CF4              <3>  call proc_fltoint32
  5344 00001195 54                  <3>  push sp
  5345 00001196 5D                  <3>  pop bp
  5346 00001197 8B4E04              <3>  mov word %3,[bp+4]
  5347 0000119A 8B5606              <3>  mov word %4,[bp+6]
  5348                              <3>  stkclose 0x08
  5349 0000119D 83C408              <4>  add word sp, %1
  5350                              <2> 	__int32tofl cx, dx, cx, dx
  5351                              <3>  stkopen 0x08
  5352 000011A0 83EC08              <4>  sub word sp, %1
  5353 000011A3 54                  <4>  push sp
  5354 000011A4 5D                  <4>  pop bp
  5355 000011A5 894E00              <3>  mov word [bp+0],%1
  5356 000011A8 895602              <3>  mov word [bp+2],%2
  5357 000011AB E823F5              <3>  call proc_int32tofl
  5358 000011AE 54                  <3>  push sp
  5359 000011AF 5D                  <3>  pop bp
  5360 000011B0 8B4E04              <3>  mov word %3,[bp+4]
  5361 000011B3 8B5606              <3>  mov word %4,[bp+6]
  5362                              <3>  stkclose 0x08
  5363 000011B6 83C408              <4>  add word sp, %1
  5364 000011B9 5D                  <2> 	pop bp
  5365                              <2> 		
  5366 000011BA B8C940              <2> 	mov ax,0x40C9	; 2*PI (alta)
  5367 000011BD BBDB0F              <2> 	mov bx,0x0FDB	; 2*PI (baixa)
  5368 000011C0 55                  <2> 	push bp
  5369                              <2> 	__flmul ax, bx, cx, dx, cx, dx
  5370                              <3>  stkopen 0x0E
  5371 000011C1 83EC0E              <4>  sub word sp, %1
  5372 000011C4 54                  <4>  push sp
  5373 000011C5 5D                  <4>  pop bp
  5374 000011C6 894600              <3>  mov word [bp+0],%1
  5375 000011C9 895E02              <3>  mov word [bp+2],%2
  5376 000011CC 894E04              <3>  mov word [bp+4],%3
  5377 000011CF 895606              <3>  mov word [bp+6],%4
  5378 000011D2 E89DF7              <3>  call proc_flmul
  5379 000011D5 54                  <3>  push sp
  5380 000011D6 5D                  <3>  pop bp
  5381 000011D7 8B4E08              <3>  mov word %5,[bp+8]
  5382 000011DA 8B560A              <3>  mov word %6,[bp+0x0A]
  5383                              <3>  stkclose 0x0E
  5384 000011DD 83C40E              <4>  add word sp, %1
  5385 000011E0 5D                  <2> 	pop bp				
  5386                              <2> 		
  5387 000011E1 8B4602              <2> 	mov ax,[bp+2]
  5388 000011E4 8B5E04              <2> 	mov bx,[bp+4]		
  5389 000011E7 25FF7F              <2> 	and ax,0x7FFF		
  5390 000011EA 55                  <2> 	push bp	
  5391                              <2> 	__flsub ax, bx, cx, dx, ax, bx
  5392                              <3>  stkopen 0x0E
  5393 000011EB 83EC0E              <4>  sub word sp, %1
  5394 000011EE 54                  <4>  push sp
  5395 000011EF 5D                  <4>  pop bp
  5396 000011F0 894600              <3>  mov word [bp+0],%1
  5397 000011F3 895E02              <3>  mov word [bp+2],%2
  5398 000011F6 894E04              <3>  mov word [bp+4],%3
  5399 000011F9 895606              <3>  mov word [bp+6],%4
  5400 000011FC C7460C0080          <3>  mov word [bp+0x0C],0x8000
  5401 00001201 E81AF9              <3>  call proc_fladdorsub
  5402 00001204 54                  <3>  push sp
  5403 00001205 5D                  <3>  pop bp
  5404 00001206 8B4608              <3>  mov word %5,[bp+8]
  5405 00001209 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5406                              <3>  stkclose 0x0E
  5407 0000120C 83C40E              <4>  add word sp, %1
  5408 0000120F 5D                  <2> 	pop bp	
  5409                              <2> 	
  5410 00001210 8B4E02              <2> 	mov cx,[bp+2]
  5411 00001213 81E10080            <2> 	and cx,0x8000
  5412 00001217 83F900              <2> 	cmp cx,0
  5413 0000121A 742C                <2> 	jz .endneg
  5414 0000121C B9C940              <2> 		mov cx,0x40C9	; 2*PI (alta)
  5415 0000121F BADB0F              <2> 		mov dx,0x0FDB	; 2*PI (baixa)
  5416 00001222 55                  <2> 		push bp		
  5417                              <2> 		__flsub cx, dx, ax, bx, ax, bx		
  5418                              <3>  stkopen 0x0E
  5419 00001223 83EC0E              <4>  sub word sp, %1
  5420 00001226 54                  <4>  push sp
  5421 00001227 5D                  <4>  pop bp
  5422 00001228 894E00              <3>  mov word [bp+0],%1
  5423 0000122B 895602              <3>  mov word [bp+2],%2
  5424 0000122E 894604              <3>  mov word [bp+4],%3
  5425 00001231 895E06              <3>  mov word [bp+6],%4
  5426 00001234 C7460C0080          <3>  mov word [bp+0x0C],0x8000
  5427 00001239 E8E2F8              <3>  call proc_fladdorsub
  5428 0000123C 54                  <3>  push sp
  5429 0000123D 5D                  <3>  pop bp
  5430 0000123E 8B4608              <3>  mov word %5,[bp+8]
  5431 00001241 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5432                              <3>  stkclose 0x0E
  5433 00001244 83C40E              <4>  add word sp, %1
  5434 00001247 5D                  <2> 		pop bp	
  5435                              <2> 	.endneg:	
  5436                              <2> 	
  5437 00001248 894606              <2> 	mov [bp+6],ax
  5438 0000124B 895E08              <2> 	mov [bp+8],bx	
  5439                              <2> 							
  5440 0000124E C3                  <2> 	ret
  5441                              <2> 	
  5442                              <2> proc_toradians:
  5443 0000124F 89E0                <2> 	mov ax,sp
  5444 00001251 89C5                <2> 	mov bp,ax
  5445                              <2> 	
  5446 00001253 8B4602              <2> 	mov ax,[bp+2]
  5447 00001256 8B5E04              <2> 	mov bx,[bp+4]		
  5448 00001259 B94940              <2> 	mov cx,0x4049
  5449 0000125C BADB0F              <2> 	mov dx,0x0FDB
  5450                              <2> 	__flmul ax, bx, cx, dx, ax, bx
  5451                              <3>  stkopen 0x0E
  5452 0000125F 83EC0E              <4>  sub word sp, %1
  5453 00001262 54                  <4>  push sp
  5454 00001263 5D                  <4>  pop bp
  5455 00001264 894600              <3>  mov word [bp+0],%1
  5456 00001267 895E02              <3>  mov word [bp+2],%2
  5457 0000126A 894E04              <3>  mov word [bp+4],%3
  5458 0000126D 895606              <3>  mov word [bp+6],%4
  5459 00001270 E8FFF6              <3>  call proc_flmul
  5460 00001273 54                  <3>  push sp
  5461 00001274 5D                  <3>  pop bp
  5462 00001275 8B4608              <3>  mov word %5,[bp+8]
  5463 00001278 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5464                              <3>  stkclose 0x0E
  5465 0000127B 83C40E              <4>  add word sp, %1
  5466 0000127E B93443              <2> 	mov cx,0x4334
  5467 00001281 BA0000              <2> 	mov dx,0x0000	
  5468                              <2> 	__fldiv ax, bx, cx, cx, ax, bx
  5469                              <3>  stkopen 0x0E
  5470 00001284 83EC0E              <4>  sub word sp, %1
  5471 00001287 54                  <4>  push sp
  5472 00001288 5D                  <4>  pop bp
  5473 00001289 894600              <3>  mov word [bp+0],%1
  5474 0000128C 895E02              <3>  mov word [bp+2],%2
  5475 0000128F 894E04              <3>  mov word [bp+4],%3
  5476 00001292 894E06              <3>  mov word [bp+6],%4
  5477 00001295 E8BBF5              <3>  call proc_fldiv
  5478 00001298 54                  <3>  push sp
  5479 00001299 5D                  <3>  pop bp
  5480 0000129A 8B4608              <3>  mov word %5,[bp+8]
  5481 0000129D 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5482                              <3>  stkclose 0x0E
  5483 000012A0 83C40E              <4>  add word sp, %1
  5484                              <2> 	
  5485 000012A3 89E1                <2> 	mov cx,sp
  5486 000012A5 89CD                <2> 	mov bp,cx
  5487 000012A7 894606              <2> 	mov [bp+6],ax
  5488 000012AA 895E08              <2> 	mov [bp+8],bx
  5489                              <2> 	
  5490 000012AD C3                  <2> 	ret
  5491                              <2> 	
  5492                              <2> proc_todegrees:
  5493 000012AE 89E0                <2> 	mov ax,sp
  5494 000012B0 89C5                <2> 	mov bp,ax
  5495                              <2> 	
  5496 000012B2 8B4602              <2> 	mov ax,[bp+2]
  5497 000012B5 8B5E04              <2> 	mov bx,[bp+4]		
  5498 000012B8 B93443              <2> 	mov cx,0x4334
  5499 000012BB BA0000              <2> 	mov dx,0x0000
  5500                              <2> 	__flmul ax, bx, cx, dx, ax, bx		
  5501                              <3>  stkopen 0x0E
  5502 000012BE 83EC0E              <4>  sub word sp, %1
  5503 000012C1 54                  <4>  push sp
  5504 000012C2 5D                  <4>  pop bp
  5505 000012C3 894600              <3>  mov word [bp+0],%1
  5506 000012C6 895E02              <3>  mov word [bp+2],%2
  5507 000012C9 894E04              <3>  mov word [bp+4],%3
  5508 000012CC 895606              <3>  mov word [bp+6],%4
  5509 000012CF E8A0F6              <3>  call proc_flmul
  5510 000012D2 54                  <3>  push sp
  5511 000012D3 5D                  <3>  pop bp
  5512 000012D4 8B4608              <3>  mov word %5,[bp+8]
  5513 000012D7 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5514                              <3>  stkclose 0x0E
  5515 000012DA 83C40E              <4>  add word sp, %1
  5516 000012DD B94940              <2> 	mov cx,0x4049
  5517 000012E0 BADB0F              <2> 	mov dx,0x0FDB	
  5518                              <2> 	__fldiv ax, bx, cx, cx, ax, bx
  5519                              <3>  stkopen 0x0E
  5520 000012E3 83EC0E              <4>  sub word sp, %1
  5521 000012E6 54                  <4>  push sp
  5522 000012E7 5D                  <4>  pop bp
  5523 000012E8 894600              <3>  mov word [bp+0],%1
  5524 000012EB 895E02              <3>  mov word [bp+2],%2
  5525 000012EE 894E04              <3>  mov word [bp+4],%3
  5526 000012F1 894E06              <3>  mov word [bp+6],%4
  5527 000012F4 E85CF5              <3>  call proc_fldiv
  5528 000012F7 54                  <3>  push sp
  5529 000012F8 5D                  <3>  pop bp
  5530 000012F9 8B4608              <3>  mov word %5,[bp+8]
  5531 000012FC 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5532                              <3>  stkclose 0x0E
  5533 000012FF 83C40E              <4>  add word sp, %1
  5534                              <2> 	
  5535 00001302 89E1                <2> 	mov cx,sp
  5536 00001304 89CD                <2> 	mov bp,cx
  5537 00001306 894606              <2> 	mov [bp+6],ax
  5538 00001309 895E08              <2> 	mov [bp+8],bx
  5539                              <2> 	
  5540 0000130C C3                  <2> 	ret
  5541                              <2> 
  5542                              <2> proc_sinorcos:
  5543 0000130D 89E0                <2> 	mov ax,sp
  5544 0000130F 89C5                <2> 	mov bp,ax
  5545                              <2> 	
  5546 00001311 8B4602              <2> 	mov ax,[bp+2]
  5547 00001314 8B5E04              <2> 	mov bx,[bp+4]
  5548 00001317 807E0A00            <2> 	cmp byte [bp+0x0A],0
  5549 0000131B 741E                <2> 	jz .normcos
  5550                              <2> 		__sinnorm ax, bx, cx
  5551                              <3>  stkopen 0x06
  5552 0000131D 83EC06              <4>  sub word sp, %1
  5553 00001320 54                  <4>  push sp
  5554 00001321 5D                  <4>  pop bp
  5555 00001322 894600              <3>  mov word [bp+0],%1
  5556 00001325 895E02              <3>  mov word [bp+2],%2
  5557 00001328 E82303              <3>  call proc__sinnorm
  5558 0000132B 54                  <3>  push sp
  5559 0000132C 5D                  <3>  pop bp
  5560 0000132D 8B4600              <3>  mov word %1,[bp+0]
  5561 00001330 8B5E02              <3>  mov word %2,[bp+2]
  5562 00001333 8B4E04              <3>  mov word %3,[bp+4]
  5563                              <3>  stkclose 0x06
  5564 00001336 83C406              <4>  add word sp, %1
  5565 00001339 EB1C                <2> 		jmp .endnorm
  5566                              <2> 	.normcos:
  5567                              <2> 		__cosnorm ax, bx, cx	
  5568                              <3>  stkopen 0x06
  5569 0000133B 83EC06              <4>  sub word sp, %1
  5570 0000133E 54                  <4>  push sp
  5571 0000133F 5D                  <4>  pop bp
  5572 00001340 894600              <3>  mov word [bp+0],%1
  5573 00001343 895E02              <3>  mov word [bp+2],%2
  5574 00001346 E8AB03              <3>  call proc__cosnorm
  5575 00001349 54                  <3>  push sp
  5576 0000134A 5D                  <3>  pop bp
  5577 0000134B 8B4600              <3>  mov word %1,[bp+0]
  5578 0000134E 8B5E02              <3>  mov word %2,[bp+2]
  5579 00001351 8B4E04              <3>  mov word %3,[bp+4]
  5580                              <3>  stkclose 0x06
  5581 00001354 83C406              <4>  add word sp, %1
  5582                              <2> 	.endnorm:
  5583                              <2> 	
  5584 00001357 51                  <2> 	push cx
  5585                              <2> 	
  5586 00001358 89E1                <2> 	mov cx,sp
  5587 0000135A 89CD                <2> 	mov bp,cx
  5588 0000135C 83C502              <2> 	add bp,2
  5589 0000135F 8A4E0A              <2> 	mov cl,[bp+0x0A]	
  5590                              <2> 	__sinorcos0x90 ax, bx, ax, bx, cl
  5591                              <3>  stkopen 0x09
  5592 00001362 83EC09              <4>  sub word sp, %1
  5593 00001365 54                  <4>  push sp
  5594 00001366 5D                  <4>  pop bp
  5595 00001367 894600              <3>  mov word [bp+0],%1
  5596 0000136A 895E02              <3>  mov word [bp+2],%2
  5597 0000136D 884E08              <3>  mov byte [bp+8],%5
  5598 00001370 E82C00              <3>  call proc_sinorcos0x90
  5599 00001373 54                  <3>  push sp
  5600 00001374 5D                  <3>  pop bp
  5601 00001375 8B4604              <3>  mov word %3,[bp+4]
  5602 00001378 8B5E06              <3>  mov word %4,[bp+6]
  5603                              <3>  stkclose 0x09
  5604 0000137B 83C409              <4>  add word sp, %1
  5605 0000137E 89E1                <2> 	mov cx,sp
  5606 00001380 89CD                <2> 	mov bp,cx
  5607 00001382 83C502              <2> 	add bp,2	
  5608 00001385 894606              <2> 	mov [bp+6],ax
  5609 00001388 895E08              <2> 	mov [bp+8],bx
  5610                              <2> 			
  5611 0000138B 59                  <2> 	pop cx
  5612                              <2> 		
  5613 0000138C 89E2                <2> 	mov dx,sp
  5614 0000138E 89D5                <2> 	mov bp,dx
  5615                              <2> 		
  5616 00001390 81F90080            <2> 	cmp cx,0x8000
  5617 00001394 7405                <2> 	je .one
  5618 00001396 214E06              <2> 		and word [bp+6],cx
  5619 00001399 EB03                <2> 		jmp .endcmp
  5620                              <2> 	.one:
  5621 0000139B 094E06              <2> 		or word [bp+6],cx	
  5622                              <2> 	.endcmp:
  5623                              <2> 	
  5624 0000139E C3                  <2> 	ret
  5625                              <2> 	
  5626                              <2> proc_sinorcos0x90:
  5627 0000139F 89E1                <2> 	mov cx,sp
  5628 000013A1 89CD                <2> 	mov bp,cx
  5629                              <2> 
  5630 000013A3 C746060000          <2> 	mov word [bp+6],0
  5631 000013A8 C746080000          <2> 	mov word [bp+8],0		
  5632                              <2> 	
  5633 000013AD B90000              <2> 	mov cx,0
  5634                              <2> 	.l1:
  5635 000013B0 83F903              <2> 		cmp cx,0x03
  5636 000013B3 0F877301            <2> 		ja .l2		
  5637 000013B7 51                  <2> 		push cx
  5638                              <2> 		
  5639 000013B8 83E101              <2> 		and cx,0x0001
  5640 000013BB 83F900              <2> 		cmp cx,0
  5641 000013BE 7505                <2> 		jnz .neg
  5642 000013C0 B80100              <2> 			mov ax,0x0001
  5643 000013C3 EB03                <2> 			jmp .endneg
  5644                              <2> 		.neg:
  5645 000013C5 B8FFFF              <2> 			mov ax,0xFFFF
  5646                              <2> 		.endneg:
  5647                              <2> 				
  5648 000013C8 59                  <2> 		pop cx
  5649 000013C9 51                  <2> 		push cx
  5650 000013CA 50                  <2> 		push ax
  5651                              <2> 		
  5652 000013CB BA0000              <2> 		mov dx,0
  5653 000013CE B80200              <2> 		mov ax,2
  5654 000013D1 F7E1                <2> 		mul cx
  5655                              <2> 		
  5656 000013D3 89E2                <2> 		mov dx,sp
  5657 000013D5 89D5                <2> 		mov bp,dx
  5658 000013D7 83C504              <2> 		add bp,4		
  5659 000013DA 807E0A00            <2> 		cmp byte [bp+0x0A],0
  5660 000013DE 7401                <2> 		jz .incremented
  5661 000013E0 40                  <2> 			inc ax
  5662                              <2> 		.incremented:
  5663                              <2> 						
  5664                              <2> 		__fat16 ax, dx
  5665                              <3>  stkopen 0x04
  5666 000013E1 83EC04              <4>  sub word sp, %1
  5667 000013E4 54                  <4>  push sp
  5668 000013E5 5D                  <4>  pop bp
  5669 000013E6 894600              <3>  mov word [bp+0],%1
  5670 000013E9 E82302              <3>  call proc__fat16
  5671 000013EC 54                  <3>  push sp
  5672 000013ED 5D                  <3>  pop bp
  5673 000013EE 8B5602              <3>  mov word %2, [bp+2]
  5674                              <3>  stkclose 0x04
  5675 000013F1 83C404              <4>  add word sp, %1
  5676                              <2> 						
  5677 000013F4 58                  <2> 		pop ax
  5678 000013F5 52                  <2> 		push dx	
  5679                              <2> 		__int16to32 ax, cx, dx						
  5680                              <3>  stkopen 0x06
  5681 000013F6 83EC06              <4>  sub word sp, %1
  5682 000013F9 54                  <4>  push sp
  5683 000013FA 5D                  <4>  pop bp
  5684 000013FB 894600              <3>  mov word [bp+0],%1
  5685 000013FE E8FFEB              <3>  call proc_int16to32
  5686 00001401 54                  <3>  push sp
  5687 00001402 5D                  <3>  pop bp
  5688 00001403 8B4E02              <3>  mov word %2, [bp+2]
  5689 00001406 8B5604              <3>  mov word %3, [bp+4]
  5690                              <3>  stkclose 0x06
  5691 00001409 83C406              <4>  add word sp, %1
  5692                              <2> 		__int32tofl cx, dx, ax, bx
  5693                              <3>  stkopen 0x08
  5694 0000140C 83EC08              <4>  sub word sp, %1
  5695 0000140F 54                  <4>  push sp
  5696 00001410 5D                  <4>  pop bp
  5697 00001411 894E00              <3>  mov word [bp+0],%1
  5698 00001414 895602              <3>  mov word [bp+2],%2
  5699 00001417 E8B7F2              <3>  call proc_int32tofl
  5700 0000141A 54                  <3>  push sp
  5701 0000141B 5D                  <3>  pop bp
  5702 0000141C 8B4604              <3>  mov word %3,[bp+4]
  5703 0000141F 8B5E06              <3>  mov word %4,[bp+6]
  5704                              <3>  stkclose 0x08
  5705 00001422 83C408              <4>  add word sp, %1
  5706                              <2> 		
  5707 00001425 59                  <2> 		pop cx
  5708 00001426 50                  <2> 		push ax
  5709 00001427 53                  <2> 		push bx		
  5710                              <2> 		__int16to32 cx, ax, bx
  5711                              <3>  stkopen 0x06
  5712 00001428 83EC06              <4>  sub word sp, %1
  5713 0000142B 54                  <4>  push sp
  5714 0000142C 5D                  <4>  pop bp
  5715 0000142D 894E00              <3>  mov word [bp+0],%1
  5716 00001430 E8CDEB              <3>  call proc_int16to32
  5717 00001433 54                  <3>  push sp
  5718 00001434 5D                  <3>  pop bp
  5719 00001435 8B4602              <3>  mov word %2, [bp+2]
  5720 00001438 8B5E04              <3>  mov word %3, [bp+4]
  5721                              <3>  stkclose 0x06
  5722 0000143B 83C406              <4>  add word sp, %1
  5723                              <2> 		__int32tofl ax, bx, cx, dx
  5724                              <3>  stkopen 0x08
  5725 0000143E 83EC08              <4>  sub word sp, %1
  5726 00001441 54                  <4>  push sp
  5727 00001442 5D                  <4>  pop bp
  5728 00001443 894600              <3>  mov word [bp+0],%1
  5729 00001446 895E02              <3>  mov word [bp+2],%2
  5730 00001449 E885F2              <3>  call proc_int32tofl
  5731 0000144C 54                  <3>  push sp
  5732 0000144D 5D                  <3>  pop bp
  5733 0000144E 8B4E04              <3>  mov word %3,[bp+4]
  5734 00001451 8B5606              <3>  mov word %4,[bp+6]
  5735                              <3>  stkclose 0x08
  5736 00001454 83C408              <4>  add word sp, %1
  5737                              <2> 		
  5738 00001457 5B                  <2> 		pop bx
  5739 00001458 58                  <2> 		pop ax
  5740                              <2> 		
  5741                              <2> 		__fldiv ax, bx, cx, dx, ax, bx
  5742                              <3>  stkopen 0x0E
  5743 00001459 83EC0E              <4>  sub word sp, %1
  5744 0000145C 54                  <4>  push sp
  5745 0000145D 5D                  <4>  pop bp
  5746 0000145E 894600              <3>  mov word [bp+0],%1
  5747 00001461 895E02              <3>  mov word [bp+2],%2
  5748 00001464 894E04              <3>  mov word [bp+4],%3
  5749 00001467 895606              <3>  mov word [bp+6],%4
  5750 0000146A E8E6F3              <3>  call proc_fldiv
  5751 0000146D 54                  <3>  push sp
  5752 0000146E 5D                  <3>  pop bp
  5753 0000146F 8B4608              <3>  mov word %5,[bp+8]
  5754 00001472 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5755                              <3>  stkclose 0x0E
  5756 00001475 83C40E              <4>  add word sp, %1
  5757                              <2> 						
  5758 00001478 59                  <2> 		pop cx
  5759 00001479 51                  <2> 		push cx
  5760 0000147A 50                  <2> 		push ax
  5761 0000147B 53                  <2> 		push bx
  5762                              <2> 		
  5763 0000147C 89E0                <2> 		mov ax,sp
  5764 0000147E 89C5                <2> 		mov bp,ax
  5765 00001480 83C506              <2> 		add bp,6
  5766                              <2> 		
  5767 00001483 BA0000              <2> 		mov dx,0
  5768 00001486 B80200              <2> 		mov ax,2
  5769 00001489 F7E1                <2> 		mul cx
  5770                              <2> 				
  5771 0000148B 807E0A00            <2> 		cmp byte [bp+0x0A],0
  5772 0000148F 7401                <2> 		jz .incremented2
  5773 00001491 40                  <2> 			inc ax
  5774                              <2> 		.incremented2:
  5775                              <2> 				
  5776 00001492 89C1                <2> 		mov cx,ax														
  5777                              <2> 		
  5778 00001494 B8803F              <2> 		mov ax,0x3F80
  5779 00001497 BB0000              <2> 		mov bx,0
  5780                              <2> 		
  5781                              <2> 		.l1.1:
  5782 0000149A 83F900              <2> 			cmp cx,0
  5783 0000149D 742C                <2> 			jz .l1.2
  5784 0000149F 51                  <2> 			push cx
  5785                              <2> 			
  5786 000014A0 8B4E02              <2> 			mov cx,[bp+2]
  5787 000014A3 8B5604              <2> 			mov dx,[bp+4]
  5788 000014A6 55                  <2> 			push bp	
  5789                              <2> 			__flmul ax, bx, cx, dx, ax, bx
  5790                              <3>  stkopen 0x0E
  5791 000014A7 83EC0E              <4>  sub word sp, %1
  5792 000014AA 54                  <4>  push sp
  5793 000014AB 5D                  <4>  pop bp
  5794 000014AC 894600              <3>  mov word [bp+0],%1
  5795 000014AF 895E02              <3>  mov word [bp+2],%2
  5796 000014B2 894E04              <3>  mov word [bp+4],%3
  5797 000014B5 895606              <3>  mov word [bp+6],%4
  5798 000014B8 E8B7F4              <3>  call proc_flmul
  5799 000014BB 54                  <3>  push sp
  5800 000014BC 5D                  <3>  pop bp
  5801 000014BD 8B4608              <3>  mov word %5,[bp+8]
  5802 000014C0 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5803                              <3>  stkclose 0x0E
  5804 000014C3 83C40E              <4>  add word sp, %1
  5805 000014C6 5D                  <2> 			pop bp	
  5806                              <2> 							
  5807 000014C7 59                  <2> 			pop cx
  5808 000014C8 49                  <2> 			dec cx
  5809 000014C9 EBCF                <2> 			jmp .l1.1
  5810                              <2> 		.l1.2: 
  5811                              <2> 					
  5812 000014CB 5A                  <2> 		pop dx
  5813 000014CC 59                  <2> 		pop cx
  5814                              <2> 		
  5815                              <2> 		__flmul ax, bx, cx, dx, ax, bx
  5816                              <3>  stkopen 0x0E
  5817 000014CD 83EC0E              <4>  sub word sp, %1
  5818 000014D0 54                  <4>  push sp
  5819 000014D1 5D                  <4>  pop bp
  5820 000014D2 894600              <3>  mov word [bp+0],%1
  5821 000014D5 895E02              <3>  mov word [bp+2],%2
  5822 000014D8 894E04              <3>  mov word [bp+4],%3
  5823 000014DB 895606              <3>  mov word [bp+6],%4
  5824 000014DE E891F4              <3>  call proc_flmul
  5825 000014E1 54                  <3>  push sp
  5826 000014E2 5D                  <3>  pop bp
  5827 000014E3 8B4608              <3>  mov word %5,[bp+8]
  5828 000014E6 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5829                              <3>  stkclose 0x0E
  5830 000014E9 83C40E              <4>  add word sp, %1
  5831                              <2> 						
  5832 000014EC 89E1                <2> 		mov cx,sp
  5833 000014EE 89CD                <2> 		mov bp,cx
  5834 000014F0 83C502              <2> 		add bp,2
  5835                              <2> 		
  5836 000014F3 8B4E06              <2> 		mov cx,[bp+6]
  5837 000014F6 8B5608              <2> 		mov dx,[bp+8]
  5838 000014F9 55                  <2> 		push bp
  5839                              <2> 		__fladd ax, bx, cx, dx, ax, bx		
  5840                              <3>  stkopen 0x0E
  5841 000014FA 83EC0E              <4>  sub word sp, %1
  5842 000014FD 54                  <4>  push sp
  5843 000014FE 5D                  <4>  pop bp
  5844 000014FF 894600              <3>  mov word [bp+0],%1
  5845 00001502 895E02              <3>  mov word [bp+2],%2
  5846 00001505 894E04              <3>  mov word [bp+4],%3
  5847 00001508 895606              <3>  mov word [bp+6],%4
  5848 0000150B C7460C0000          <3>  mov word [bp+0x0C],0
  5849 00001510 E80BF6              <3>  call proc_fladdorsub
  5850 00001513 54                  <3>  push sp
  5851 00001514 5D                  <3>  pop bp
  5852 00001515 8B4608              <3>  mov word %5,[bp+8]
  5853 00001518 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5854                              <3>  stkclose 0x0E
  5855 0000151B 83C40E              <4>  add word sp, %1
  5856 0000151E 5D                  <2> 		pop bp			
  5857 0000151F 894606              <2> 		mov [bp+6],ax
  5858 00001522 895E08              <2> 		mov [bp+8],bx
  5859                              <2> 				
  5860 00001525 59                  <2> 		pop cx
  5861 00001526 41                  <2> 		inc cx
  5862 00001527 E986FE              <2> 		jmp .l1
  5863                              <2> 	.l2:			
  5864                              <2> 	
  5865 0000152A C3                  <2> 	ret
  5866                              <2> 	
  5867                              <2> 
  5868                              <2> proc_atan:
  5869 0000152B 89E0                <2> 	mov ax,sp
  5870 0000152D 89C5                <2> 	mov bp,ax 
  5871                              <2> 
  5872 0000152F C746060000          <2> 	mov word [bp+6],0
  5873 00001534 C746080000          <2> 	mov word [bp+8],0		
  5874                              <2> 	
  5875 00001539 B90000              <2> 	mov cx,0
  5876                              <2> 	.l1:
  5877 0000153C 83F903              <2> 		cmp cx,0x03
  5878 0000153F 0F87CB00            <2> 		ja .l2		
  5879 00001543 51                  <2> 		push cx
  5880                              <2> 		
  5881 00001544 D1E1                <2> 		shl cx,1
  5882 00001546 41                  <2> 		inc cx
  5883 00001547 51                  <2> 		push cx
  5884                              <2> 								
  5885 00001548 B8803F              <2> 		mov ax,0x3F80	; 1.0 (alta)
  5886 0000154B BB0000              <2> 		mov bx,0x0000	; 1.0 (baixa)				
  5887                              <2> 		.l1.1:
  5888 0000154E 83F900              <2> 			cmp cx,0
  5889 00001551 742C                <2> 			jz .l1.2
  5890 00001553 51                  <2> 			push cx
  5891                              <2> 			
  5892 00001554 8B4E02              <2> 			mov cx,[bp+2]
  5893 00001557 8B5604              <2> 			mov dx,[bp+4]
  5894 0000155A 55                  <2> 			push bp	
  5895                              <2> 			__flmul ax, bx, cx, dx, ax, bx
  5896                              <3>  stkopen 0x0E
  5897 0000155B 83EC0E              <4>  sub word sp, %1
  5898 0000155E 54                  <4>  push sp
  5899 0000155F 5D                  <4>  pop bp
  5900 00001560 894600              <3>  mov word [bp+0],%1
  5901 00001563 895E02              <3>  mov word [bp+2],%2
  5902 00001566 894E04              <3>  mov word [bp+4],%3
  5903 00001569 895606              <3>  mov word [bp+6],%4
  5904 0000156C E803F4              <3>  call proc_flmul
  5905 0000156F 54                  <3>  push sp
  5906 00001570 5D                  <3>  pop bp
  5907 00001571 8B4608              <3>  mov word %5,[bp+8]
  5908 00001574 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5909                              <3>  stkclose 0x0E
  5910 00001577 83C40E              <4>  add word sp, %1
  5911 0000157A 5D                  <2> 			pop bp	
  5912                              <2> 							
  5913 0000157B 59                  <2> 			pop cx
  5914 0000157C 49                  <2> 			dec cx
  5915 0000157D EBCF                <2> 			jmp .l1.1
  5916                              <2> 		.l1.2:			
  5917                              <2> 		
  5918 0000157F 59                  <2> 		pop cx	
  5919 00001580 50                  <2> 		push ax
  5920 00001581 53                  <2> 		push bx
  5921                              <2> 				
  5922 00001582 55                  <2> 		push bp
  5923                              <2> 		__int16tofl cx, cx, dx
  5924                              <3>  stkopen 0x06
  5925 00001583 83EC06              <4>  sub word sp, %1
  5926 00001586 54                  <4>  push sp
  5927 00001587 5D                  <4>  pop bp
  5928 00001588 894E00              <3>  mov word [bp+0],%1
  5929 0000158B E822F0              <3>  call proc_int16tofl
  5930 0000158E 54                  <3>  push sp
  5931 0000158F 5D                  <3>  pop bp
  5932 00001590 8B4E02              <3>  mov word %2,[bp+2]
  5933 00001593 8B5604              <3>  mov word %3,[bp+4]
  5934                              <3>  stkclose 0x06
  5935 00001596 83C406              <4>  add word sp, %1
  5936 00001599 5D                  <2> 		pop bp
  5937                              <2> 		
  5938 0000159A 5B                  <2> 		pop bx
  5939 0000159B 58                  <2> 		pop ax
  5940                              <2> 		
  5941 0000159C 55                  <2> 		push bp	
  5942                              <2> 		__fldiv ax, bx, cx, dx, ax, bx
  5943                              <3>  stkopen 0x0E
  5944 0000159D 83EC0E              <4>  sub word sp, %1
  5945 000015A0 54                  <4>  push sp
  5946 000015A1 5D                  <4>  pop bp
  5947 000015A2 894600              <3>  mov word [bp+0],%1
  5948 000015A5 895E02              <3>  mov word [bp+2],%2
  5949 000015A8 894E04              <3>  mov word [bp+4],%3
  5950 000015AB 895606              <3>  mov word [bp+6],%4
  5951 000015AE E8A2F2              <3>  call proc_fldiv
  5952 000015B1 54                  <3>  push sp
  5953 000015B2 5D                  <3>  pop bp
  5954 000015B3 8B4608              <3>  mov word %5,[bp+8]
  5955 000015B6 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5956                              <3>  stkclose 0x0E
  5957 000015B9 83C40E              <4>  add word sp, %1
  5958 000015BC 5D                  <2> 		pop bp
  5959                              <2> 				
  5960 000015BD 59                  <2> 		pop cx
  5961 000015BE 51                  <2> 		push cx		
  5962 000015BF 83E101              <2> 		and cx,0x0001
  5963 000015C2 83F900              <2> 		cmp cx,0
  5964 000015C5 7410                <2> 		jz .endneg
  5965 000015C7 89C1                <2> 			mov cx,ax	
  5966 000015C9 83C900              <2> 			or cx, 0x0000
  5967 000015CC F7D1                <2> 			not cx
  5968 000015CE 81E10080            <2> 			and cx,0x8000								
  5969 000015D2 25FF7F              <2> 			and ax,0x7FFF			
  5970 000015D5 01C8                <2> 			add ax,cx
  5971                              <2> 		.endneg:
  5972                              <2> 				
  5973 000015D7 8B4E06              <2> 		mov cx,[bp+6]
  5974 000015DA 8B5608              <2> 		mov dx,[bp+8]
  5975 000015DD 55                  <2> 		push bp		
  5976                              <2> 		__fladd ax, bx, cx, dx, ax, bx
  5977                              <3>  stkopen 0x0E
  5978 000015DE 83EC0E              <4>  sub word sp, %1
  5979 000015E1 54                  <4>  push sp
  5980 000015E2 5D                  <4>  pop bp
  5981 000015E3 894600              <3>  mov word [bp+0],%1
  5982 000015E6 895E02              <3>  mov word [bp+2],%2
  5983 000015E9 894E04              <3>  mov word [bp+4],%3
  5984 000015EC 895606              <3>  mov word [bp+6],%4
  5985 000015EF C7460C0000          <3>  mov word [bp+0x0C],0
  5986 000015F4 E827F5              <3>  call proc_fladdorsub
  5987 000015F7 54                  <3>  push sp
  5988 000015F8 5D                  <3>  pop bp
  5989 000015F9 8B4608              <3>  mov word %5,[bp+8]
  5990 000015FC 8B5E0A              <3>  mov word %6,[bp+0x0A]
  5991                              <3>  stkclose 0x0E
  5992 000015FF 83C40E              <4>  add word sp, %1
  5993 00001602 5D                  <2> 		pop bp
  5994 00001603 894606              <2> 		mov [bp+6], ax
  5995 00001606 895E08              <2> 		mov [bp+8], bx
  5996                              <2> 				
  5997 00001609 59                  <2> 		pop cx
  5998 0000160A 41                  <2> 		inc cx
  5999 0000160B E92EFF              <2> 		jmp .l1
  6000                              <2> 	.l2:
  6001                              <2> 		
  6002 0000160E C3                  <2> 	ret
  6003                              <2> 	
  6004                              <2> proc__fat16:
  6005 0000160F 89E0                <2> 	mov ax,sp
  6006 00001611 89C5                <2> 	mov bp,ax
  6007                              <2> 	
  6008 00001613 B90100              <2> 	mov cx,1
  6009 00001616 C746040100          <2> 	mov word [bp+4], 1
  6010                              <2> 	.l1:
  6011 0000161B 3B4E02              <2> 		cmp word cx,[bp+2]
  6012 0000161E 770D                <2> 		ja .l2
  6013                              <2> 		
  6014 00001620 31D2                <2> 		xor dx,dx
  6015 00001622 8B4604              <2> 		mov ax,[bp+4]
  6016 00001625 F7E9                <2> 		imul cx
  6017                              <2> 		
  6018 00001627 894604              <2> 		mov [bp+4],ax
  6019                              <2> 		
  6020 0000162A 41                  <2> 		inc cx
  6021 0000162B EBEE                <2> 		jmp .l1
  6022                              <2> 	.l2:
  6023                              <2> 	
  6024 0000162D C3                  <2> 	ret
  6025                              <2> 		
  6026                              <2> proc__pow16:
  6027 0000162E 89E0                <2> 	mov ax,sp
  6028 00001630 89C5                <2> 	mov bp,ax
  6029                              <2> 	
  6030 00001632 8B4E04              <2> 	mov cx,[bp+4]
  6031 00001635 C746060100          <2> 	mov word [bp+6], 1	
  6032                              <2> 	.l1:
  6033 0000163A 83F900              <2> 		cmp cx,0
  6034 0000163D 740E                <2> 		jz .l2
  6035                              <2> 		
  6036 0000163F 31D2                <2> 		xor dx,dx
  6037 00001641 8B4602              <2> 		mov ax,[bp+2]
  6038 00001644 F76E06              <2> 		imul word [bp+6]
  6039                              <2> 		
  6040 00001647 894606              <2> 		mov [bp+6],ax
  6041                              <2> 		
  6042 0000164A 49                  <2> 		dec cx
  6043 0000164B EBED                <2> 		jmp .l1
  6044                              <2> 	.l2:
  6045                              <2> 		
  6046 0000164D C3                  <2> 	ret
  6047                              <2> 	
  6048                              <2> proc__sinnorm:
  6049 0000164E 89E0                <2> 	mov ax,sp
  6050 00001650 89C5                <2> 	mov bp,ax
  6051                              <2> 	
  6052 00001652 8B4602              <2> 	mov ax,[bp+2]
  6053 00001655 8B5E04              <2> 	mov bx,[bp+4]
  6054                              <2> 	
  6055                              <2> 	__norm_factors ax, bx, ax, bx, cx
  6056                              <3>  stkopen 0x0A
  6057 00001658 83EC0A              <4>  sub word sp, %1
  6058 0000165B 54                  <4>  push sp
  6059 0000165C 5D                  <4>  pop bp
  6060 0000165D 894600              <3>  mov word [bp+0],%1
  6061 00001660 895E02              <3>  mov word [bp+2],%2
  6062 00001663 E83601              <3>  call proc__norm_factors
  6063 00001666 54                  <3>  push sp
  6064 00001667 5D                  <3>  pop bp
  6065 00001668 8B4604              <3>  mov word %3,[bp+4]
  6066 0000166B 8B5E06              <3>  mov word %4,[bp+6]
  6067 0000166E 8B4E08              <3>  mov word %5,[bp+8]
  6068                              <3>  stkclose 0x0A
  6069 00001671 83C40A              <4>  add word sp, %1
  6070                              <2> 
  6071 00001674 51                  <2> 	push cx	; factor (phi/PI)
  6072                              <2> 		
  6073 00001675 B9C93F              <2> 	mov cx,0x3FC9 ; PI/2 (high)
  6074 00001678 BADB0F              <2> 	mov dx,0x0FDB ; PI/2 (low)
  6075                              <2> 	
  6076 0000167B 50                  <2> 	push ax
  6077 0000167C 53                  <2> 	push bx
  6078                              <2> 	__cmp32 ax, bx, cx, dx, cl
  6079                              <3>  stkopen 9
  6080 0000167D 83EC09              <4>  sub word sp, %1
  6081 00001680 54                  <4>  push sp
  6082 00001681 5D                  <4>  pop bp
  6083 00001682 894600              <3>  mov word [bp+0], %1
  6084 00001685 895E02              <3>  mov word [bp+2], %2
  6085 00001688 894E04              <3>  mov word [bp+4], %3
  6086 0000168B 895606              <3>  mov word [bp+6], %4
  6087 0000168E E878EC              <3>  call proc_cmp32
  6088 00001691 54                  <3>  push sp
  6089 00001692 5D                  <3>  pop bp
  6090 00001693 8A4E08              <3>  mov byte %5, [bp+8]
  6091                              <3>  stkclose 9
  6092 00001696 83C409              <4>  add word sp, %1
  6093 00001699 5B                  <2> 	pop bx
  6094 0000169A 58                  <2> 	pop ax
  6095 0000169B 80F900              <2> 	cmp cl,0
  6096 0000169E 7E2A                <2> 	jle .l1
  6097 000016A0 B94940              <2> 		mov cx,0x4049 ; PI (high)
  6098 000016A3 BADB0F              <2> 		mov dx,0x0FDB ; PI (low)
  6099                              <2> 		__flsub cx, dx, ax, bx, ax, bx				
  6100                              <3>  stkopen 0x0E
  6101 000016A6 83EC0E              <4>  sub word sp, %1
  6102 000016A9 54                  <4>  push sp
  6103 000016AA 5D                  <4>  pop bp
  6104 000016AB 894E00              <3>  mov word [bp+0],%1
  6105 000016AE 895602              <3>  mov word [bp+2],%2
  6106 000016B1 894604              <3>  mov word [bp+4],%3
  6107 000016B4 895E06              <3>  mov word [bp+6],%4
  6108 000016B7 C7460C0080          <3>  mov word [bp+0x0C],0x8000
  6109 000016BC E85FF4              <3>  call proc_fladdorsub
  6110 000016BF 54                  <3>  push sp
  6111 000016C0 5D                  <3>  pop bp
  6112 000016C1 8B4608              <3>  mov word %5,[bp+8]
  6113 000016C4 8B5E0A              <3>  mov word %6,[bp+0x0A]
  6114                              <3>  stkclose 0x0E
  6115 000016C7 83C40E              <4>  add word sp, %1
  6116                              <2> 	.l1:
  6117                              <2> 				
  6118 000016CA 59                  <2> 	pop cx
  6119                              <2> 
  6120 000016CB 89E2                <2> 	mov dx,sp
  6121 000016CD 89D5                <2> 	mov bp,dx
  6122 000016CF 8B5602              <2> 	mov dx,[bp+2]
  6123 000016D2 81E20080            <2> 	and dx,0x8000
  6124                              <2> 		
  6125 000016D6 83FA00              <2> 	cmp dx,0
  6126 000016D9 7D01                <2> 	jge .l2
  6127 000016DB 41                  <2> 		inc cx		
  6128                              <2> 	.l2:	
  6129                              <2> 			
  6130 000016DC BAFF7F              <2> 	mov dx,0x7FFF
  6131 000016DF 83E101              <2> 	and cx,0x0001
  6132 000016E2 83F900              <2> 	cmp cx,0
  6133 000016E5 7403                <2> 	jz .l3
  6134 000016E7 BA0080              <2> 		mov dx,0x8000
  6135                              <2> 	.l3:
  6136                              <2> 					
  6137 000016EA 894602              <2> 	mov [bp+2],ax
  6138 000016ED 895E04              <2> 	mov [bp+4],bx
  6139 000016F0 895606              <2> 	mov [bp+6],dx
  6140                              <2> 	
  6141 000016F3 C3                  <2> 	ret	
  6142                              <2> 	
  6143                              <2> proc__cosnorm:
  6144 000016F4 89E0                <2> 	mov ax,sp
  6145 000016F6 89C5                <2> 	mov bp,ax
  6146                              <2> 	
  6147 000016F8 8B4602              <2> 	mov ax,[bp+2]
  6148 000016FB 8B5E04              <2> 	mov bx,[bp+4]
  6149                              <2> 	
  6150                              <2> 	__norm_factors ax, bx, ax, bx, cx
  6151                              <3>  stkopen 0x0A
  6152 000016FE 83EC0A              <4>  sub word sp, %1
  6153 00001701 54                  <4>  push sp
  6154 00001702 5D                  <4>  pop bp
  6155 00001703 894600              <3>  mov word [bp+0],%1
  6156 00001706 895E02              <3>  mov word [bp+2],%2
  6157 00001709 E89000              <3>  call proc__norm_factors
  6158 0000170C 54                  <3>  push sp
  6159 0000170D 5D                  <3>  pop bp
  6160 0000170E 8B4604              <3>  mov word %3,[bp+4]
  6161 00001711 8B5E06              <3>  mov word %4,[bp+6]
  6162 00001714 8B4E08              <3>  mov word %5,[bp+8]
  6163                              <3>  stkclose 0x0A
  6164 00001717 83C40A              <4>  add word sp, %1
  6165                              <2> 
  6166 0000171A 51                  <2> 	push cx		; fator2 (phi/PI)
  6167                              <2> 	
  6168 0000171B B9C93F              <2> 	mov cx,0x3FC9 ; PI/2 (high)
  6169 0000171E BADB0F              <2> 	mov dx,0x0FDB ; PI/2 (low)
  6170                              <2> 		
  6171 00001721 50                  <2> 	push ax
  6172 00001722 53                  <2> 	push bx
  6173                              <2> 	__cmp32 ax, bx, cx, dx, cl
  6174                              <3>  stkopen 9
  6175 00001723 83EC09              <4>  sub word sp, %1
  6176 00001726 54                  <4>  push sp
  6177 00001727 5D                  <4>  pop bp
  6178 00001728 894600              <3>  mov word [bp+0], %1
  6179 0000172B 895E02              <3>  mov word [bp+2], %2
  6180 0000172E 894E04              <3>  mov word [bp+4], %3
  6181 00001731 895606              <3>  mov word [bp+6], %4
  6182 00001734 E8D2EB              <3>  call proc_cmp32
  6183 00001737 54                  <3>  push sp
  6184 00001738 5D                  <3>  pop bp
  6185 00001739 8A4E08              <3>  mov byte %5, [bp+8]
  6186                              <3>  stkclose 9
  6187 0000173C 83C409              <4>  add word sp, %1
  6188 0000173F 5B                  <2> 	pop bx
  6189 00001740 58                  <2> 	pop ax
  6190                              <2> 		
  6191 00001741 51                  <2> 	push cx
  6192 00001742 80F900              <2> 	cmp cl,0
  6193 00001745 7E2A                <2> 	jle .l1
  6194 00001747 B94940              <2> 		mov cx,0x4049 ; PI (high)
  6195 0000174A BADB0F              <2> 		mov dx,0x0FDB ; PI (low)
  6196                              <2> 		__flsub cx, dx, ax, bx, ax, bx	
  6197                              <3>  stkopen 0x0E
  6198 0000174D 83EC0E              <4>  sub word sp, %1
  6199 00001750 54                  <4>  push sp
  6200 00001751 5D                  <4>  pop bp
  6201 00001752 894E00              <3>  mov word [bp+0],%1
  6202 00001755 895602              <3>  mov word [bp+2],%2
  6203 00001758 894604              <3>  mov word [bp+4],%3
  6204 0000175B 895E06              <3>  mov word [bp+6],%4
  6205 0000175E C7460C0080          <3>  mov word [bp+0x0C],0x8000
  6206 00001763 E8B8F3              <3>  call proc_fladdorsub
  6207 00001766 54                  <3>  push sp
  6208 00001767 5D                  <3>  pop bp
  6209 00001768 8B4608              <3>  mov word %5,[bp+8]
  6210 0000176B 8B5E0A              <3>  mov word %6,[bp+0x0A]
  6211                              <3>  stkclose 0x0E
  6212 0000176E 83C40E              <4>  add word sp, %1
  6213                              <2> 	.l1:
  6214                              <2> 						
  6215 00001771 59                  <2> 	pop cx	; quadrante2 (true, false)
  6216 00001772 5A                  <2> 	pop dx	; fator2 (phi/PI)
  6217                              <2> 
  6218 00001773 54                  <2> 	push sp
  6219 00001774 5D                  <2> 	pop bp		
  6220 00001775 894602              <2> 	mov [bp+2],ax	
  6221 00001778 895E04              <2> 	mov [bp+4],bx
  6222                              <2> 	
  6223 0000177B B8FF7F              <2> 	mov ax,0x7FFF
  6224                              <2> 	
  6225 0000177E 83E201              <2> 	and dx,0x0001
  6226 00001781 83FA00              <2> 	cmp dx,0
  6227 00001784 750A                <2> 	jnz .fimpar
  6228 00001786 80F900              <2> 		cmp cl,0
  6229 00001789 7C0D                <2> 		jl .endf		
  6230 0000178B B80080              <2> 			mov ax,0x8000			
  6231 0000178E EB08                <2> 		jmp .endf
  6232                              <2> 	.fimpar:		
  6233 00001790 80F900              <2> 		cmp cl,0
  6234 00001793 7D03                <2> 		jge .endf
  6235 00001795 B80080              <2> 			mov ax,0x8000
  6236                              <2> 	.endf:		
  6237                              <2> 						
  6238 00001798 894606              <2> 	mov word [bp+6],ax
  6239                              <2> 	
  6240 0000179B C3                  <2> 	ret
  6241                              <2> 	
  6242                              <2> proc__norm_factors: ; f1=(phi%PI) --> float 32bits, f2=(phi/PI) --> int 16bits
  6243 0000179C 89E0                <2> 	mov ax,sp
  6244 0000179E 89C5                <2> 	mov bp,ax
  6245                              <2> 	
  6246 000017A0 8B4602              <2> 	mov ax,[bp+2]
  6247 000017A3 8B5E04              <2> 	mov bx,[bp+4]	
  6248 000017A6 25FF7F              <2> 	and ax,0x7FFF
  6249                              <2> 		
  6250 000017A9 B94940              <2> 	mov cx,0x4049 ; PI (high)
  6251 000017AC BADB0F              <2> 	mov dx,0x0FDB ; PI (low)
  6252                              <2> 
  6253 000017AF 55                  <2> 	push bp
  6254                              <2> 	__fldiv ax, bx, cx, dx, ax, bx		
  6255                              <3>  stkopen 0x0E
  6256 000017B0 83EC0E              <4>  sub word sp, %1
  6257 000017B3 54                  <4>  push sp
  6258 000017B4 5D                  <4>  pop bp
  6259 000017B5 894600              <3>  mov word [bp+0],%1
  6260 000017B8 895E02              <3>  mov word [bp+2],%2
  6261 000017BB 894E04              <3>  mov word [bp+4],%3
  6262 000017BE 895606              <3>  mov word [bp+6],%4
  6263 000017C1 E88FF0              <3>  call proc_fldiv
  6264 000017C4 54                  <3>  push sp
  6265 000017C5 5D                  <3>  pop bp
  6266 000017C6 8B4608              <3>  mov word %5,[bp+8]
  6267 000017C9 8B5E0A              <3>  mov word %6,[bp+0x0A]
  6268                              <3>  stkclose 0x0E
  6269 000017CC 83C40E              <4>  add word sp, %1
  6270                              <2> 	__fltoint32 ax, bx, ax, bx	
  6271                              <3>  stkopen 0x08
  6272 000017CF 83EC08              <4>  sub word sp, %1
  6273 000017D2 54                  <4>  push sp
  6274 000017D3 5D                  <4>  pop bp
  6275 000017D4 894600              <3>  mov word [bp+0],%1
  6276 000017D7 895E02              <3>  mov word [bp+2],%2
  6277 000017DA E814EE              <3>  call proc_fltoint32
  6278 000017DD 54                  <3>  push sp
  6279 000017DE 5D                  <3>  pop bp
  6280 000017DF 8B4604              <3>  mov word %3,[bp+4]
  6281 000017E2 8B5E06              <3>  mov word %4,[bp+6]
  6282                              <3>  stkclose 0x08
  6283 000017E5 83C408              <4>  add word sp, %1
  6284                              <2> 	__int32to16 ax, bx, ax
  6285                              <3>  stkopen 0x06
  6286 000017E8 83EC06              <4>  sub word sp, %1
  6287 000017EB 54                  <4>  push sp
  6288 000017EC 5D                  <4>  pop bp
  6289 000017ED 894600              <3>  mov word [bp+0], %1
  6290 000017F0 895E02              <3>  mov word [bp+2], %2
  6291 000017F3 E829E8              <3>  call proc_int32to16
  6292 000017F6 54                  <3>  push sp
  6293 000017F7 5D                  <3>  pop bp
  6294 000017F8 8B4604              <3>  mov word %3, [bp+4]
  6295                              <3>  stkclose 0x06
  6296 000017FB 83C406              <4>  add word sp, %1
  6297 000017FE 5D                  <2> 	pop bp
  6298                              <2> 		
  6299 000017FF 50                  <2> 	push ax		; fator
  6300                              <2> 		
  6301 00001800 55                  <2> 	push bp
  6302                              <2> 	__int16to32	ax, ax, bx
  6303                              <3>  stkopen 0x06
  6304 00001801 83EC06              <4>  sub word sp, %1
  6305 00001804 54                  <4>  push sp
  6306 00001805 5D                  <4>  pop bp
  6307 00001806 894600              <3>  mov word [bp+0],%1
  6308 00001809 E8F4E7              <3>  call proc_int16to32
  6309 0000180C 54                  <3>  push sp
  6310 0000180D 5D                  <3>  pop bp
  6311 0000180E 8B4602              <3>  mov word %2, [bp+2]
  6312 00001811 8B5E04              <3>  mov word %3, [bp+4]
  6313                              <3>  stkclose 0x06
  6314 00001814 83C406              <4>  add word sp, %1
  6315                              <2> 	__int32tofl ax, bx, ax, bx	
  6316                              <3>  stkopen 0x08
  6317 00001817 83EC08              <4>  sub word sp, %1
  6318 0000181A 54                  <4>  push sp
  6319 0000181B 5D                  <4>  pop bp
  6320 0000181C 894600              <3>  mov word [bp+0],%1
  6321 0000181F 895E02              <3>  mov word [bp+2],%2
  6322 00001822 E8ACEE              <3>  call proc_int32tofl
  6323 00001825 54                  <3>  push sp
  6324 00001826 5D                  <3>  pop bp
  6325 00001827 8B4604              <3>  mov word %3,[bp+4]
  6326 0000182A 8B5E06              <3>  mov word %4,[bp+6]
  6327                              <3>  stkclose 0x08
  6328 0000182D 83C408              <4>  add word sp, %1
  6329                              <2> 	
  6330 00001830 B94940              <2> 	mov cx,0x4049 ; PI (high)
  6331 00001833 BADB0F              <2> 	mov dx,0x0FDB ; PI (low)
  6332                              <2> 	__flmul ax, bx, cx, dx, ax, bx		
  6333                              <3>  stkopen 0x0E
  6334 00001836 83EC0E              <4>  sub word sp, %1
  6335 00001839 54                  <4>  push sp
  6336 0000183A 5D                  <4>  pop bp
  6337 0000183B 894600              <3>  mov word [bp+0],%1
  6338 0000183E 895E02              <3>  mov word [bp+2],%2
  6339 00001841 894E04              <3>  mov word [bp+4],%3
  6340 00001844 895606              <3>  mov word [bp+6],%4
  6341 00001847 E828F1              <3>  call proc_flmul
  6342 0000184A 54                  <3>  push sp
  6343 0000184B 5D                  <3>  pop bp
  6344 0000184C 8B4608              <3>  mov word %5,[bp+8]
  6345 0000184F 8B5E0A              <3>  mov word %6,[bp+0x0A]
  6346                              <3>  stkclose 0x0E
  6347 00001852 83C40E              <4>  add word sp, %1
  6348 00001855 5D                  <2> 	pop bp
  6349                              <2> 	
  6350 00001856 8B4E02              <2> 	mov cx,[bp+2]
  6351 00001859 8B5604              <2> 	mov dx,[bp+4]
  6352 0000185C 81E1FF7F            <2> 	and cx,0x7FFF
  6353                              <2> 		
  6354                              <2> 	__flsub cx, dx, ax, bx, ax, bx 			; theta -> ax bx
  6355                              <3>  stkopen 0x0E
  6356 00001860 83EC0E              <4>  sub word sp, %1
  6357 00001863 54                  <4>  push sp
  6358 00001864 5D                  <4>  pop bp
  6359 00001865 894E00              <3>  mov word [bp+0],%1
  6360 00001868 895602              <3>  mov word [bp+2],%2
  6361 0000186B 894604              <3>  mov word [bp+4],%3
  6362 0000186E 895E06              <3>  mov word [bp+6],%4
  6363 00001871 C7460C0080          <3>  mov word [bp+0x0C],0x8000
  6364 00001876 E8A5F2              <3>  call proc_fladdorsub
  6365 00001879 54                  <3>  push sp
  6366 0000187A 5D                  <3>  pop bp
  6367 0000187B 8B4608              <3>  mov word %5,[bp+8]
  6368 0000187E 8B5E0A              <3>  mov word %6,[bp+0x0A]
  6369                              <3>  stkclose 0x0E
  6370 00001881 83C40E              <4>  add word sp, %1
  6371                              <2> 	
  6372 00001884 59                  <2> 	pop cx				
  6373                              <2> 		
  6374 00001885 89E2                <2> 	mov dx,sp
  6375 00001887 89D5                <2> 	mov bp,dx	
  6376 00001889 894606              <2> 	mov [bp+6],ax
  6377 0000188C 895E08              <2> 	mov [bp+8],bx
  6378 0000188F 894E0A              <2> 	mov [bp+0x0A],cx
  6379                              <2> 		
  6380 00001892 C3                  <2> 	ret
  6381                              <2> 	
  6382                              <2> %endif
  6383                              <1> 	
  6384                              <1> %macro to0x360 1
  6385                              <1> 	to0x360 %1, %1
  6386                              <1> %endmacro
  6387                              <1> 
  6388                              <1> %macro to0x360 2
  6389                              <1> 	to0x360 cs, %1, cs, %2
  6390                              <1> %endmacro
  6391                              <1> 
  6392                              <1> %macro toradians 1
  6393                              <1> 	toradians %1, %1
  6394                              <1> %endmacro
  6395                              <1> 
  6396                              <1> %macro todegrees 1
  6397                              <1> 	todegrees %1, %1
  6398                              <1> %endmacro
  6399                              <1> 
  6400                              <1> %macro toradians 2
  6401                              <1> 	toradians cs, %1, cs, %2
  6402                              <1> %endmacro
  6403                              <1> 	
  6404                              <1> %macro todegrees 2
  6405                              <1> 	todegrees cs, %1, cs, %2
  6406                              <1> %endmacro	
  6407                              <1> 	
  6408                              <1> %macro atan 1
  6409                              <1> 	atan %1, %1
  6410                              <1> %endmacro	
  6411                              <1> 	
  6412                              <1> %macro atan 2
  6413                              <1> 	atan cs, %1, cs, %2
  6414                              <1> %endmacro	
  6415                              <1> 	
  6416                              <1> %macro sin 1
  6417                              <1> 	sin %1, %1
  6418                              <1> %endmacro	
  6419                              <1> 	
  6420                              <1> %macro sin 2
  6421                              <1> 	sin cs, %1, cs, %2
  6422                              <1> %endmacro
  6423                              <1> 
  6424                              <1> %macro cos 1
  6425                              <1> 	cos %1, %1
  6426                              <1> %endmacro	
  6427                              <1> 	
  6428                              <1> %macro cos 2
  6429                              <1> 	cos cs, %1, cs, %2
  6430                              <1> %endmacro		
  6431                              <1> 	
  6432                              <1> %macro sin 4
  6433                              <1> 	sinorcos %1, %2, %3, %4, 1
  6434                              <1> %endmacro
  6435                              <1> 
  6436                              <1> %macro cos 4
  6437                              <1> 	sinorcos %1, %2, %3, %4, 0
  6438                              <1> %endmacro
  6439                              <1> 
  6440                              <1> %macro to0x360 4
  6441                              <1> 	stkopen 0x08
  6442                              <1> 	mov ax,%1
  6443                              <1> 	mov ds,ax
  6444                              <1> 	mov ax,[%2+2]
  6445                              <1> 	mov [bp+0],ax
  6446                              <1> 	mov ax,[%2]
  6447                              <1> 	mov [bp+2],ax
  6448                              <1> 	call proc_to0x360
  6449                              <1> 	mov ax,sp
  6450                              <1> 	mov bp,ax
  6451                              <1> 	mov ax,%3
  6452                              <1> 	mov ds,ax
  6453                              <1> 	mov ax,[bp+4]
  6454                              <1> 	mov [%4+2],ax
  6455                              <1> 	mov ax,[bp+6]
  6456                              <1> 	mov [%4],ax
  6457                              <1> 	stkclose 0x08
  6458                              <1> %endmacro	
  6459                              <1> 
  6460                              <1> %macro toradians 4
  6461                              <1> 	stkopen 0x08
  6462                              <1> 	mov ax,%1
  6463                              <1> 	mov ds,ax
  6464                              <1> 	mov ax,[%2+2]
  6465                              <1> 	mov [bp+0],ax
  6466                              <1> 	mov ax,[%2]
  6467                              <1> 	mov [bp+2],ax
  6468                              <1> 	call proc_toradians
  6469                              <1> 	mov ax,sp
  6470                              <1> 	mov bp,ax
  6471                              <1> 	mov ax,%3
  6472                              <1> 	mov ds,ax
  6473                              <1> 	mov ax,[bp+4]
  6474                              <1> 	mov [%4+2],ax
  6475                              <1> 	mov ax,[bp+6]
  6476                              <1> 	mov [%4],ax
  6477                              <1> 	stkclose 0x08
  6478                              <1> %endmacro	
  6479                              <1> 
  6480                              <1> %macro todegrees 4
  6481                              <1> 	stkopen 0x08
  6482                              <1> 	mov ax,%1
  6483                              <1> 	mov ds,ax
  6484                              <1> 	mov ax,[%2+2]
  6485                              <1> 	mov [bp+0],ax
  6486                              <1> 	mov ax,[%2]
  6487                              <1> 	mov [bp+2],ax
  6488                              <1> 	call proc_todegrees
  6489                              <1> 	mov ax,sp
  6490                              <1> 	mov bp,ax
  6491                              <1> 	mov ax,%3
  6492                              <1> 	mov ds,ax
  6493                              <1> 	mov ax,[bp+4]
  6494                              <1> 	mov [%4+2],ax
  6495                              <1> 	mov ax,[bp+6]
  6496                              <1> 	mov [%4],ax
  6497                              <1> 	stkclose 0x08
  6498                              <1> %endmacro	
  6499                              <1> 
  6500                              <1> %macro atan 4
  6501                              <1> 	stkopen 0x08
  6502                              <1> 	mov ax,%1
  6503                              <1> 	mov ds,ax
  6504                              <1> 	mov ax,[%2+2]
  6505                              <1> 	mov [bp+0],ax
  6506                              <1> 	mov ax,[%2]
  6507                              <1> 	mov [bp+2],ax
  6508                              <1> 	call proc_atan
  6509                              <1> 	mov ax,sp
  6510                              <1> 	mov bp,ax
  6511                              <1> 	mov ax,%3
  6512                              <1> 	mov ds,ax
  6513                              <1> 	mov ax,[bp+4]
  6514                              <1> 	mov [%4+2],ax
  6515                              <1> 	mov ax,[bp+6]
  6516                              <1> 	mov [%4],ax
  6517                              <1> 	stkclose 0x08
  6518                              <1> %endmacro
  6519                              <1> 	
  6520                              <1> %macro sinorcos 5
  6521                              <1> 	stkopen 0x09
  6522                              <1> 	mov ax,%1
  6523                              <1> 	mov ds,ax
  6524                              <1> 	mov ax,[%2+2]
  6525                              <1> 	mov [bp+0],ax
  6526                              <1> 	mov ax,[%2]
  6527                              <1> 	mov [bp+2],ax
  6528                              <1> 	mov byte [bp+8],%5	
  6529                              <1> 	call proc_sinorcos
  6530                              <1> 	mov ax,sp
  6531                              <1> 	mov bp,ax
  6532                              <1> 	mov ax,%3
  6533                              <1> 	mov ds,ax
  6534                              <1> 	mov ax,[bp+4]
  6535                              <1> 	mov [%4+2],ax
  6536                              <1> 	mov ax,[bp+6]
  6537                              <1> 	mov [%4],ax
  6538                              <1> 	stkclose 0x09
  6539                              <1> %endmacro
  6540                              <1> 	
  6541                              <1> %endif
  6542                                  %include "lib/stdio.mac"
  6543                              <1> 
  6544                              <1> %ifndef STDIO_MAC
  6545                              <1> 	%define STDIO_MAC
  6546                              <1> 	
  6547                              <1> 	%include "lib/stdio.asm"
  6548                              <2> 
  6549                              <2> %ifndef STDIO_ASM
  6550                              <2> 	%define STDIO_ASM
  6551                              <2> 	
  6552                              <2> 	%include "lib/system.mac"
  6553                              <3>  
  6554                              <3> %ifndef SYSTEM_MAC
  6555                              <3>  	%define SYSTEM_MAC
  6556                              <3>  	
  6557                              <3> 	%ifndef TRUE
  6558                              <3> 		%define TRUE 01h
  6559                              <3> 	%endif
  6560                              <3> 	%ifndef FALSE
  6561                              <3> 		%define FALSE 00h
  6562                              <3> 	%endif
  6563                              <3> 	
  6564                              <3> %macro vlodsb 3
  6565                              <3> 	vlodsb cs, %1, %2, %3
  6566                              <3> %endmacro
  6567                              <3> 
  6568                              <3> %macro vstosb 3
  6569                              <3> 	vstosb cs, %1, %2, %3
  6570                              <3> %endmacro
  6571                              <3> 	 	
  6572                              <3> %macro int16toreg 2
  6573                              <3> 	int16toreg cs, %1, %2
  6574                              <3> %endmacro
  6575                              <3> 
  6576                              <3> %macro regtoint16 2
  6577                              <3> 	regtoint16 %1, cs, %2
  6578                              <3> %endmacro
  6579                              <3> 
  6580                              <3> %macro vstosb 4
  6581                              <3> 	push %1
  6582                              <3> 	pop ds
  6583                              <3> 	mov si,%2
  6584                              <3> 	add si,%3
  6585                              <3> 	mov byte [si],%4	
  6586                              <3> %endmacro
  6587                              <3> 
  6588                              <3> %macro vlodsb 4
  6589                              <3> 	push %1
  6590                              <3> 	pop ds
  6591                              <3> 	mov si,%2
  6592                              <3> 	add si,%3
  6593                              <3> 	mov byte %4,[si]	
  6594                              <3> %endmacro 	 
  6595                              <3> 
  6596                              <3> %macro int16toreg 3
  6597                              <3> 	push %2
  6598                              <3> 	push %1
  6599                              <3> 	pop ds
  6600                              <3> 	pop si
  6601                              <3> 	mov word %3,[si]	
  6602                              <3> %endmacro
  6603                              <3> 
  6604                              <3> %macro regtoint16 3
  6605                              <3> 	push %3
  6606                              <3> 	push %2
  6607                              <3> 	pop ds
  6608                              <3> 	pop si
  6609                              <3> 	mov word [si],%1	
  6610                              <3> %endmacro
  6611                              <3> 
  6612                              <3> %macro mov32 2
  6613                              <3> 	mov32 cs, %1, cs, %2
  6614                              <3> %endmacro
  6615                              <3> 
  6616                              <3> %macro mov16 2
  6617                              <3> 	mov16 cs, %1, cs, %2
  6618                              <3> %endmacro
  6619                              <3> 
  6620                              <3> %macro mov32 4
  6621                              <3> 	mov ax,%3
  6622                              <3> 	mov ds,ax
  6623                              <3> 	mov cx,[%4+2]
  6624                              <3> 	mov dx,[%4]
  6625                              <3> 	mov ax,%1
  6626                              <3> 	mov ds,ax
  6627                              <3> 	mov [%2+2],cx
  6628                              <3> 	mov [%2],dx
  6629                              <3> %endmacro
  6630                              <3> 
  6631                              <3> %macro mov16 4
  6632                              <3> 	mov ax,%3
  6633                              <3> 	mov ds,ax
  6634                              <3> 	mov bx,[%4]
  6635                              <3> 	mov ax,%1
  6636                              <3> 	mov ds,ax
  6637                              <3> 	mov [%2],bx
  6638                              <3> %endmacro
  6639                              <3>  	 	
  6640                              <3> %macro mformat 4
  6641                              <3> 	stkopen 8
  6642                              <3> 	mov word [ bp + 0 ], %1
  6643                              <3> 	mov word [ bp + 2 ], %2
  6644                              <3> 	mov word [ bp + 4 ], %3
  6645                              <3> 	mov word [ bp + 6 ], %4
  6646                              <3> 	call kernel_segment:mformat
  6647                              <3> 	stkclose 8
  6648                              <3> %endmacro
  6649                              <3> 
  6650                              <3> %macro malloc 6
  6651                              <3> 	stkopen 0Bh
  6652                              <3> 	mov word [ bp + 4 ], %3
  6653                              <3> 	mov word [ bp + 6 ], %4
  6654                              <3> 	mov word [ bp + 8 ], %5	
  6655                              <3> 	call kernel_segment:malloc
  6656                              <3> 	push sp
  6657                              <3> 	pop bp
  6658                              <3> 	mov word %1, [ bp ]
  6659                              <3> 	mov word %2, [ bp + 2 ]
  6660                              <3> 	mov byte %6, [ bp + 0x0A ]
  6661                              <3> 	stkclose 0Bh
  6662                              <3> %endmacro 	
  6663                              <3> 
  6664                              <3> %macro laddr 2
  6665                              <3> 	laddr %1, %2, %1, %2
  6666                              <3> %endmacro
  6667                              <3> 
  6668                              <3> %macro faddr 2
  6669                              <3> 	faddr %1, %2, %1, %2
  6670                              <3> %endmacro
  6671                              <3>  	
  6672                              <3> %macro laddr 4
  6673                              <3> 	stkopen 8
  6674                              <3> 	mov word [ bp + 4 ], %3
  6675                              <3> 	mov word [ bp + 6 ], %4	
  6676                              <3> 	call kernel_segment:laddr
  6677                              <3> 	push sp
  6678                              <3> 	pop bp
  6679                              <3> 	mov word %1, [ bp + 0 ]
  6680                              <3> 	mov word %2, [ bp + 2 ]	
  6681                              <3> 	stkclose 8
  6682                              <3> %endmacro
  6683                              <3> 
  6684                              <3> %macro faddr 4
  6685                              <3> 	stkopen 8
  6686                              <3> 	mov word [ bp + 4 ], %3
  6687                              <3> 	mov word [ bp + 6 ], %4	
  6688                              <3> 	call kernel_segment:faddr
  6689                              <3> 	push sp
  6690                              <3> 	pop bp
  6691                              <3> 	mov word %1, [ bp + 0 ]
  6692                              <3> 	mov word %2, [ bp + 2 ]	
  6693                              <3> 	stkclose 8
  6694                              <3> %endmacro	
  6695                              <3>  
  6696                              <3> 
  6697                              <3> %macro stkopen 1		
  6698                              <3> 	sub word sp, %1
  6699                              <3> 	push sp
  6700                              <3> 	pop bp
  6701                              <3> %endmacro
  6702                              <3> 
  6703                              <3> %macro stkclose 1
  6704                              <3> 	add word sp, %1
  6705                              <3> %endmacro
  6706                              <3> 
  6707                              <3> %macro stkload 1-* 	
  6708                              <3>  	%rep %0
  6709                              <3>  	 	%rotate -1
  6710                              <3>  		pop %1
  6711                              <3>  	%endrep
  6712                              <3>  	%rep %0
  6713                              <3>  		push %1
  6714                              <3>  		%rotate 1
  6715                              <3>  	%endrep
  6716                              <3> %endmacro
  6717                              <3> 
  6718                              <3> %macro stkpush 1-* 	
  6719                              <3>  	%rep %0
  6720                              <3>  		push %1
  6721                              <3>  		%rotate 1
  6722                              <3>  	%endrep 	
  6723                              <3> %endmacro
  6724                              <3>  
  6725                              <3> %macro stkpop 1-*
  6726                              <3>  	%rep %0
  6727                              <3>  	 	%rotate -1
  6728                              <3>  		pop %1
  6729                              <3>  	%endrep 	 	
  6730                              <3> %endmacro
  6731                              <3> 
  6732                              <3> %endif 
  6733                              <2> 	
  6734                              <2> %macro __prtch 1	
  6735                              <2> 	stkopen 1	
  6736                              <2> 	mov byte [ bp ], %1
  6737                              <2> 	call proc_prtch
  6738                              <2> 	stkclose 1
  6739                              <2> %endmacro
  6740                              <2> 
  6741                              <2> %macro __prtln 0
  6742                              <2> 	call proc_prtln
  6743                              <2> %endmacro	
  6744                              <2> 
  6745                              <2> %macro __prtsubbin8 3
  6746                              <2> 	stkopen 3
  6747                              <2> 	mov byte [bp+0],%1
  6748                              <2> 	mov byte [bp+1],%2
  6749                              <2> 	mov byte [bp+2],%3
  6750                              <2> 	call proc_prtsubbin8
  6751                              <2> 	stkclose 3
  6752                              <2> %endmacro
  6753                              <2> 	
  6754                              <2> section .data
  6755                              <2> 	
  6756                              <2> proc_prtIEEE754:
  6757 00001893 89E0                <2> 	mov ax,sp
  6758 00001895 89C5                <2> 	mov bp,ax			
  6759 00001897 8B4602              <2> 	mov ax,[bp+2]	
  6760 0000189A 50                  <2> 	push ax
  6761 0000189B 50                  <2> 	push ax
  6762 0000189C 50                  <2> 	push ax
  6763 0000189D 50                  <2> 	push ax	
  6764 0000189E 50                  <2> 	push ax
  6765                              <2> 	
  6766                              <2> 	__prtsubbin8 ah,0,1
  6767                              <3>  stkopen 3
  6768 0000189F 83EC03              <4>  sub word sp, %1
  6769 000018A2 54                  <4>  push sp
  6770 000018A3 5D                  <4>  pop bp
  6771 000018A4 886600              <3>  mov byte [bp+0],%1
  6772 000018A7 C6460100            <3>  mov byte [bp+1],%2
  6773 000018AB C6460201            <3>  mov byte [bp+2],%3
  6774 000018AF E87201              <3>  call proc_prtsubbin8
  6775                              <3>  stkclose 3
  6776 000018B2 83C403              <4>  add word sp, %1
  6777                              <2> 	__prtch 20h
  6778                              <3>  stkopen 1
  6779 000018B5 83EC01              <4>  sub word sp, %1
  6780 000018B8 54                  <4>  push sp
  6781 000018B9 5D                  <4>  pop bp
  6782 000018BA C6460020            <3>  mov byte [ bp ], %1
  6783 000018BE E82004              <3>  call proc_prtch
  6784                              <3>  stkclose 1
  6785 000018C1 83C401              <4>  add word sp, %1
  6786                              <2> 	__prtch 20h
  6787                              <3>  stkopen 1
  6788 000018C4 83EC01              <4>  sub word sp, %1
  6789 000018C7 54                  <4>  push sp
  6790 000018C8 5D                  <4>  pop bp
  6791 000018C9 C6460020            <3>  mov byte [ bp ], %1
  6792 000018CD E81104              <3>  call proc_prtch
  6793                              <3>  stkclose 1
  6794 000018D0 83C401              <4>  add word sp, %1
  6795 000018D3 58                  <2> 	pop ax
  6796                              <2> 	__prtsubbin8 ah,1,5
  6797                              <3>  stkopen 3
  6798 000018D4 83EC03              <4>  sub word sp, %1
  6799 000018D7 54                  <4>  push sp
  6800 000018D8 5D                  <4>  pop bp
  6801 000018D9 886600              <3>  mov byte [bp+0],%1
  6802 000018DC C6460101            <3>  mov byte [bp+1],%2
  6803 000018E0 C6460205            <3>  mov byte [bp+2],%3
  6804 000018E4 E83D01              <3>  call proc_prtsubbin8
  6805                              <3>  stkclose 3
  6806 000018E7 83C403              <4>  add word sp, %1
  6807 000018EA 58                  <2> 	pop ax
  6808                              <2> 	__prtsubbin8 ah,5,8
  6809                              <3>  stkopen 3
  6810 000018EB 83EC03              <4>  sub word sp, %1
  6811 000018EE 54                  <4>  push sp
  6812 000018EF 5D                  <4>  pop bp
  6813 000018F0 886600              <3>  mov byte [bp+0],%1
  6814 000018F3 C6460105            <3>  mov byte [bp+1],%2
  6815 000018F7 C6460208            <3>  mov byte [bp+2],%3
  6816 000018FB E82601              <3>  call proc_prtsubbin8
  6817                              <3>  stkclose 3
  6818 000018FE 83C403              <4>  add word sp, %1
  6819                              <2> 	
  6820 00001901 58                  <2> 	pop ax
  6821                              <2> 	__prtsubbin8 al,0,1
  6822                              <3>  stkopen 3
  6823 00001902 83EC03              <4>  sub word sp, %1
  6824 00001905 54                  <4>  push sp
  6825 00001906 5D                  <4>  pop bp
  6826 00001907 884600              <3>  mov byte [bp+0],%1
  6827 0000190A C6460100            <3>  mov byte [bp+1],%2
  6828 0000190E C6460201            <3>  mov byte [bp+2],%3
  6829 00001912 E80F01              <3>  call proc_prtsubbin8
  6830                              <3>  stkclose 3
  6831 00001915 83C403              <4>  add word sp, %1
  6832                              <2> 	__prtch 20h
  6833                              <3>  stkopen 1
  6834 00001918 83EC01              <4>  sub word sp, %1
  6835 0000191B 54                  <4>  push sp
  6836 0000191C 5D                  <4>  pop bp
  6837 0000191D C6460020            <3>  mov byte [ bp ], %1
  6838 00001921 E8BD03              <3>  call proc_prtch
  6839                              <3>  stkclose 1
  6840 00001924 83C401              <4>  add word sp, %1
  6841                              <2> 	__prtch 20h
  6842                              <3>  stkopen 1
  6843 00001927 83EC01              <4>  sub word sp, %1
  6844 0000192A 54                  <4>  push sp
  6845 0000192B 5D                  <4>  pop bp
  6846 0000192C C6460020            <3>  mov byte [ bp ], %1
  6847 00001930 E8AE03              <3>  call proc_prtch
  6848                              <3>  stkclose 1
  6849 00001933 83C401              <4>  add word sp, %1
  6850 00001936 58                  <2> 	pop ax
  6851                              <2> 	__prtsubbin8 al,1,4
  6852                              <3>  stkopen 3
  6853 00001937 83EC03              <4>  sub word sp, %1
  6854 0000193A 54                  <4>  push sp
  6855 0000193B 5D                  <4>  pop bp
  6856 0000193C 884600              <3>  mov byte [bp+0],%1
  6857 0000193F C6460101            <3>  mov byte [bp+1],%2
  6858 00001943 C6460204            <3>  mov byte [bp+2],%3
  6859 00001947 E8DA00              <3>  call proc_prtsubbin8
  6860                              <3>  stkclose 3
  6861 0000194A 83C403              <4>  add word sp, %1
  6862                              <2> 	__prtch 20h
  6863                              <3>  stkopen 1
  6864 0000194D 83EC01              <4>  sub word sp, %1
  6865 00001950 54                  <4>  push sp
  6866 00001951 5D                  <4>  pop bp
  6867 00001952 C6460020            <3>  mov byte [ bp ], %1
  6868 00001956 E88803              <3>  call proc_prtch
  6869                              <3>  stkclose 1
  6870 00001959 83C401              <4>  add word sp, %1
  6871 0000195C 58                  <2> 	pop ax
  6872                              <2> 	__prtsubbin8 al,4,8
  6873                              <3>  stkopen 3
  6874 0000195D 83EC03              <4>  sub word sp, %1
  6875 00001960 54                  <4>  push sp
  6876 00001961 5D                  <4>  pop bp
  6877 00001962 884600              <3>  mov byte [bp+0],%1
  6878 00001965 C6460104            <3>  mov byte [bp+1],%2
  6879 00001969 C6460208            <3>  mov byte [bp+2],%3
  6880 0000196D E8B400              <3>  call proc_prtsubbin8
  6881                              <3>  stkclose 3
  6882 00001970 83C403              <4>  add word sp, %1
  6883                              <2> 	__prtch 20h
  6884                              <3>  stkopen 1
  6885 00001973 83EC01              <4>  sub word sp, %1
  6886 00001976 54                  <4>  push sp
  6887 00001977 5D                  <4>  pop bp
  6888 00001978 C6460020            <3>  mov byte [ bp ], %1
  6889 0000197C E86203              <3>  call proc_prtch
  6890                              <3>  stkclose 1
  6891 0000197F 83C401              <4>  add word sp, %1
  6892                              <2> 	
  6893 00001982 89E0                <2> 	mov ax,sp
  6894 00001984 89C5                <2> 	mov bp,ax			
  6895 00001986 8B4604              <2> 	mov ax,[bp+4]
  6896 00001989 50                  <2> 	push ax
  6897 0000198A 50                  <2> 	push ax
  6898 0000198B 50                  <2> 	push ax
  6899                              <2> 	
  6900                              <2> 	__prtsubbin8 ah,0,4
  6901                              <3>  stkopen 3
  6902 0000198C 83EC03              <4>  sub word sp, %1
  6903 0000198F 54                  <4>  push sp
  6904 00001990 5D                  <4>  pop bp
  6905 00001991 886600              <3>  mov byte [bp+0],%1
  6906 00001994 C6460100            <3>  mov byte [bp+1],%2
  6907 00001998 C6460204            <3>  mov byte [bp+2],%3
  6908 0000199C E88500              <3>  call proc_prtsubbin8
  6909                              <3>  stkclose 3
  6910 0000199F 83C403              <4>  add word sp, %1
  6911                              <2> 	__prtch 20h
  6912                              <3>  stkopen 1
  6913 000019A2 83EC01              <4>  sub word sp, %1
  6914 000019A5 54                  <4>  push sp
  6915 000019A6 5D                  <4>  pop bp
  6916 000019A7 C6460020            <3>  mov byte [ bp ], %1
  6917 000019AB E83303              <3>  call proc_prtch
  6918                              <3>  stkclose 1
  6919 000019AE 83C401              <4>  add word sp, %1
  6920 000019B1 58                  <2> 	pop ax
  6921                              <2> 	__prtsubbin8 ah,4,8
  6922                              <3>  stkopen 3
  6923 000019B2 83EC03              <4>  sub word sp, %1
  6924 000019B5 54                  <4>  push sp
  6925 000019B6 5D                  <4>  pop bp
  6926 000019B7 886600              <3>  mov byte [bp+0],%1
  6927 000019BA C6460104            <3>  mov byte [bp+1],%2
  6928 000019BE C6460208            <3>  mov byte [bp+2],%3
  6929 000019C2 E85F00              <3>  call proc_prtsubbin8
  6930                              <3>  stkclose 3
  6931 000019C5 83C403              <4>  add word sp, %1
  6932                              <2> 	__prtch 20h
  6933                              <3>  stkopen 1
  6934 000019C8 83EC01              <4>  sub word sp, %1
  6935 000019CB 54                  <4>  push sp
  6936 000019CC 5D                  <4>  pop bp
  6937 000019CD C6460020            <3>  mov byte [ bp ], %1
  6938 000019D1 E80D03              <3>  call proc_prtch
  6939                              <3>  stkclose 1
  6940 000019D4 83C401              <4>  add word sp, %1
  6941                              <2> 	
  6942 000019D7 58                  <2> 	pop ax
  6943                              <2> 	__prtsubbin8 al,0,4
  6944                              <3>  stkopen 3
  6945 000019D8 83EC03              <4>  sub word sp, %1
  6946 000019DB 54                  <4>  push sp
  6947 000019DC 5D                  <4>  pop bp
  6948 000019DD 884600              <3>  mov byte [bp+0],%1
  6949 000019E0 C6460100            <3>  mov byte [bp+1],%2
  6950 000019E4 C6460204            <3>  mov byte [bp+2],%3
  6951 000019E8 E83900              <3>  call proc_prtsubbin8
  6952                              <3>  stkclose 3
  6953 000019EB 83C403              <4>  add word sp, %1
  6954                              <2> 	__prtch 20h
  6955                              <3>  stkopen 1
  6956 000019EE 83EC01              <4>  sub word sp, %1
  6957 000019F1 54                  <4>  push sp
  6958 000019F2 5D                  <4>  pop bp
  6959 000019F3 C6460020            <3>  mov byte [ bp ], %1
  6960 000019F7 E8E702              <3>  call proc_prtch
  6961                              <3>  stkclose 1
  6962 000019FA 83C401              <4>  add word sp, %1
  6963 000019FD 58                  <2> 	pop ax
  6964                              <2> 	__prtsubbin8 al,4,8
  6965                              <3>  stkopen 3
  6966 000019FE 83EC03              <4>  sub word sp, %1
  6967 00001A01 54                  <4>  push sp
  6968 00001A02 5D                  <4>  pop bp
  6969 00001A03 884600              <3>  mov byte [bp+0],%1
  6970 00001A06 C6460104            <3>  mov byte [bp+1],%2
  6971 00001A0A C6460208            <3>  mov byte [bp+2],%3
  6972 00001A0E E81300              <3>  call proc_prtsubbin8
  6973                              <3>  stkclose 3
  6974 00001A11 83C403              <4>  add word sp, %1
  6975                              <2> 	__prtch 20h
  6976                              <3>  stkopen 1
  6977 00001A14 83EC01              <4>  sub word sp, %1
  6978 00001A17 54                  <4>  push sp
  6979 00001A18 5D                  <4>  pop bp
  6980 00001A19 C6460020            <3>  mov byte [ bp ], %1
  6981 00001A1D E8C102              <3>  call proc_prtch
  6982                              <3>  stkclose 1
  6983 00001A20 83C401              <4>  add word sp, %1
  6984                              <2> 	
  6985 00001A23 C3                  <2> 	ret
  6986                              <2> 	
  6987                              <2> proc_prtsubbin8:
  6988 00001A24 89E0                <2> 	mov ax,sp
  6989 00001A26 89C5                <2> 	mov bp,ax
  6990                              <2> 	
  6991 00001A28 8A4602              <2> 	mov al,[bp+2]
  6992 00001A2B 50                  <2> 	push ax
  6993                              <2> 	
  6994 00001A2C 8A4E03              <2> 	mov cl,[bp+3]
  6995 00001A2F 8A6E04              <2> 	mov ch,[bp+4]
  6996 00001A32 80FD08              <2> 	cmp ch,8
  6997 00001A35 7602                <2> 	jbe .l1	
  6998 00001A37 B508                <2> 		mov ch,8
  6999                              <2> 	.l1:		
  7000 00001A39 38E9                <2> 		cmp cl,ch		
  7001 00001A3B 731D                <2> 		jae .l2
  7002                              <2> 		
  7003 00001A3D 58                  <2> 		pop ax
  7004 00001A3E 50                  <2> 		push ax
  7005 00001A3F D2E0                <2> 		shl al,cl
  7006 00001A41 C0E807              <2> 		shr al,7		
  7007 00001A44 0430                <2> 		add al,30h
  7008                              <2> 		
  7009 00001A46 51                  <2> 		push cx
  7010                              <2> 		__prtch al
  7011                              <3>  stkopen 1
  7012 00001A47 83EC01              <4>  sub word sp, %1
  7013 00001A4A 54                  <4>  push sp
  7014 00001A4B 5D                  <4>  pop bp
  7015 00001A4C 884600              <3>  mov byte [ bp ], %1
  7016 00001A4F E88F02              <3>  call proc_prtch
  7017                              <3>  stkclose 1
  7018 00001A52 83C401              <4>  add word sp, %1
  7019 00001A55 59                  <2> 		pop cx
  7020                              <2> 		
  7021 00001A56 FEC1                <2> 		inc cl
  7022 00001A58 EBDF                <2> 		jmp .l1
  7023                              <2> 	.l2:	
  7024 00001A5A 58                  <2> 	pop ax
  7025                              <2> 	
  7026 00001A5B C3                  <2> 	ret
  7027                              <2> 	
  7028                              <2> proc_prtbin16:
  7029 00001A5C 89E0                <2> 	mov ax,sp
  7030 00001A5E 89C5                <2> 	mov bp,ax
  7031                              <2> 		
  7032 00001A60 8A7E04              <2> 	mov bh, [bp+4]
  7033 00001A63 B300                <2> 	mov bl,0
  7034 00001A65 B201                <2> 	mov dl,TRUE
  7035 00001A67 30ED                <2> 	xor ch,ch
  7036 00001A69 B102                <2> 	mov cl,2
  7037                              <2> 	.l1:
  7038 00001A6B 80F900              <2> 		cmp cl,0
  7039 00001A6E 744B                <2> 		jz .l2		
  7040                              <2> 		
  7041 00001A70 55                  <2> 		push bp
  7042 00001A71 01CD                <2> 		add bp,cx
  7043 00001A73 45                  <2> 		inc bp
  7044                              <2> 		
  7045 00001A74 0A5E00              <2> 		or byte bl, [bp]
  7046 00001A77 08FB                <2> 		or byte bl, bh
  7047 00001A79 743B                <2> 		jz .prted											
  7048 00001A7B 53                  <2> 			push bx
  7049 00001A7C 51                  <2> 			push cx	
  7050 00001A7D 80FA01              <2> 			cmp dl, TRUE
  7051 00001A80 7402                <2> 			je .first
  7052 00001A82 EB10                <2> 			jmp .nfirst
  7053                              <2> 			.first:
  7054 00001A84 B200                <2> 				mov dl, FALSE
  7055 00001A86 52                  <2> 				push dx
  7056                              <2> 				
  7057 00001A87 88FC                <2> 				mov ah, bh
  7058 00001A89 8A4600              <2> 				mov byte al, [bp]
  7059 00001A8C 50                  <2> 				push ax
  7060 00001A8D E84000              <2> 				call proc_prtbin8
  7061 00001A90 58                  <2> 				pop ax
  7062                              <2> 							
  7063 00001A91 5A                  <2> 				pop dx
  7064 00001A92 EB0C                <2> 				jmp .endfirst
  7065                              <2> 			.nfirst:
  7066 00001A94 52                  <2> 				push dx
  7067                              <2> 				
  7068 00001A95 B401                <2> 				mov ah, TRUE
  7069 00001A97 8A4600              <2> 				mov byte al, [bp]
  7070 00001A9A 50                  <2> 				push ax
  7071 00001A9B E83200              <2> 				call proc_prtbin8
  7072 00001A9E 58                  <2> 				pop ax
  7073                              <2> 								
  7074 00001A9F 5A                  <2> 				pop dx
  7075                              <2> 			.endfirst:	
  7076 00001AA0 59                  <2> 			pop cx
  7077 00001AA1 5B                  <2> 			pop bx		
  7078                              <2> 			
  7079 00001AA2 80F901              <2> 			cmp cl,1
  7080 00001AA5 760F                <2> 			jbe .spaceprted
  7081                              <2> 				__prtch 20h
  7082                              <3>  stkopen 1
  7083 00001AA7 83EC01              <4>  sub word sp, %1
  7084 00001AAA 54                  <4>  push sp
  7085 00001AAB 5D                  <4>  pop bp
  7086 00001AAC C6460020            <3>  mov byte [ bp ], %1
  7087 00001AB0 E82E02              <3>  call proc_prtch
  7088                              <3>  stkclose 1
  7089 00001AB3 83C401              <4>  add word sp, %1
  7090                              <2> 			.spaceprted:
  7091                              <2> 		.prted:
  7092                              <2> 		
  7093 00001AB6 5D                  <2> 		pop bp
  7094                              <2> 		
  7095 00001AB7 FEC9                <2> 		dec cl
  7096 00001AB9 EBB0                <2> 		jmp .l1
  7097                              <2> 	.l2:
  7098                              <2> 	
  7099 00001ABB 80FB00              <2> 	cmp bl,0
  7100 00001ABE 750F                <2> 	jnz .end
  7101                              <2> 		__prtch 30h
  7102                              <3>  stkopen 1
  7103 00001AC0 83EC01              <4>  sub word sp, %1
  7104 00001AC3 54                  <4>  push sp
  7105 00001AC4 5D                  <4>  pop bp
  7106 00001AC5 C6460030            <3>  mov byte [ bp ], %1
  7107 00001AC9 E81502              <3>  call proc_prtch
  7108                              <3>  stkclose 1
  7109 00001ACC 83C401              <4>  add word sp, %1
  7110                              <2> 	.end:
  7111                              <2> 	
  7112 00001ACF C3                  <2> 	ret	
  7113                              <2> 	
  7114                              <2> proc_prtbin8:
  7115 00001AD0 89E0                <2> 	mov ax,sp
  7116 00001AD2 89C5                <2> 	mov bp,ax
  7117 00001AD4 8A4602              <2> 	mov byte al, [bp+2]
  7118 00001AD7 3C00                <2> 	cmp al, 0
  7119 00001AD9 0F858700            <2> 	jnz .nzero
  7120                              <2> 		__prtch 30h
  7121                              <3>  stkopen 1
  7122 00001ADD 83EC01              <4>  sub word sp, %1
  7123 00001AE0 54                  <4>  push sp
  7124 00001AE1 5D                  <4>  pop bp
  7125 00001AE2 C6460030            <3>  mov byte [ bp ], %1
  7126 00001AE6 E8F801              <3>  call proc_prtch
  7127                              <3>  stkclose 1
  7128 00001AE9 83C401              <4>  add word sp, %1
  7129                              <2> 		
  7130 00001AEC 89E0                <2> 		mov ax,sp
  7131 00001AEE 89C5                <2> 		mov bp,ax
  7132 00001AF0 8A4603              <2> 		mov byte al, [bp+3]		
  7133 00001AF3 3C00                <2> 		cmp al, FALSE
  7134 00001AF5 0F84C500            <2> 		je .end
  7135                              <2> 			__prtch 30h
  7136                              <3>  stkopen 1
  7137 00001AF9 83EC01              <4>  sub word sp, %1
  7138 00001AFC 54                  <4>  push sp
  7139 00001AFD 5D                  <4>  pop bp
  7140 00001AFE C6460030            <3>  mov byte [ bp ], %1
  7141 00001B02 E8DC01              <3>  call proc_prtch
  7142                              <3>  stkclose 1
  7143 00001B05 83C401              <4>  add word sp, %1
  7144                              <2> 			__prtch 30h
  7145                              <3>  stkopen 1
  7146 00001B08 83EC01              <4>  sub word sp, %1
  7147 00001B0B 54                  <4>  push sp
  7148 00001B0C 5D                  <4>  pop bp
  7149 00001B0D C6460030            <3>  mov byte [ bp ], %1
  7150 00001B11 E8CD01              <3>  call proc_prtch
  7151                              <3>  stkclose 1
  7152 00001B14 83C401              <4>  add word sp, %1
  7153                              <2> 			__prtch 30h
  7154                              <3>  stkopen 1
  7155 00001B17 83EC01              <4>  sub word sp, %1
  7156 00001B1A 54                  <4>  push sp
  7157 00001B1B 5D                  <4>  pop bp
  7158 00001B1C C6460030            <3>  mov byte [ bp ], %1
  7159 00001B20 E8BE01              <3>  call proc_prtch
  7160                              <3>  stkclose 1
  7161 00001B23 83C401              <4>  add word sp, %1
  7162                              <2> 			__prtch 30h
  7163                              <3>  stkopen 1
  7164 00001B26 83EC01              <4>  sub word sp, %1
  7165 00001B29 54                  <4>  push sp
  7166 00001B2A 5D                  <4>  pop bp
  7167 00001B2B C6460030            <3>  mov byte [ bp ], %1
  7168 00001B2F E8AF01              <3>  call proc_prtch
  7169                              <3>  stkclose 1
  7170 00001B32 83C401              <4>  add word sp, %1
  7171                              <2> 			__prtch 30h
  7172                              <3>  stkopen 1
  7173 00001B35 83EC01              <4>  sub word sp, %1
  7174 00001B38 54                  <4>  push sp
  7175 00001B39 5D                  <4>  pop bp
  7176 00001B3A C6460030            <3>  mov byte [ bp ], %1
  7177 00001B3E E8A001              <3>  call proc_prtch
  7178                              <3>  stkclose 1
  7179 00001B41 83C401              <4>  add word sp, %1
  7180                              <2> 			__prtch 30h
  7181                              <3>  stkopen 1
  7182 00001B44 83EC01              <4>  sub word sp, %1
  7183 00001B47 54                  <4>  push sp
  7184 00001B48 5D                  <4>  pop bp
  7185 00001B49 C6460030            <3>  mov byte [ bp ], %1
  7186 00001B4D E89101              <3>  call proc_prtch
  7187                              <3>  stkclose 1
  7188 00001B50 83C401              <4>  add word sp, %1
  7189                              <2> 			__prtch 30h
  7190                              <3>  stkopen 1
  7191 00001B53 83EC01              <4>  sub word sp, %1
  7192 00001B56 54                  <4>  push sp
  7193 00001B57 5D                  <4>  pop bp
  7194 00001B58 C6460030            <3>  mov byte [ bp ], %1
  7195 00001B5C E88201              <3>  call proc_prtch
  7196                              <3>  stkclose 1
  7197 00001B5F 83C401              <4>  add word sp, %1
  7198 00001B62 EB5A                <2> 			jmp .end		
  7199                              <2> 	.nzero:
  7200                              <2> 
  7201 00001B64 B000                <2> 	mov byte al, FALSE
  7202 00001B66 50                  <2> 	push ax
  7203                              <2> 
  7204 00001B67 89E0                <2> 	mov ax,sp
  7205 00001B69 89C5                <2> 	mov bp,ax
  7206 00001B6B 8A5E04              <2> 	mov byte bl, [bp+4]
  7207 00001B6E B100                <2> 	mov cl,0
  7208                              <2> 	.l1:
  7209 00001B70 80F908              <2> 		cmp cl,8
  7210 00001B73 7348                <2> 		jae .l2
  7211                              <2> 		
  7212 00001B75 88C8                <2> 		mov al,cl
  7213                              <2> 		
  7214 00001B77 88DA                <2> 		mov dl, bl		
  7215                              <2> 		
  7216                              <2> 		.l1.1:
  7217 00001B79 3C00                <2> 			cmp al,0
  7218 00001B7B 7406                <2> 			jz .l1.2
  7219                              <2> 							
  7220 00001B7D D0E2                <2> 			shl dl,1
  7221                              <2> 			
  7222 00001B7F FEC8                <2> 			dec al
  7223 00001B81 EBF6                <2> 			jmp .l1.1
  7224                              <2> 		.l1.2:
  7225                              <2> 						
  7226 00001B83 C0EA07              <2> 		shr dl,7
  7227                              <2> 		
  7228 00001B86 89E0                <2> 		mov ax,sp
  7229 00001B88 89C5                <2> 		mov bp,ax			
  7230 00001B8A 8A4605              <2> 		mov byte al, [bp+5]
  7231 00001B8D 3C01                <2> 		cmp al, TRUE
  7232 00001B8F 7413                <2> 		je .endzero		
  7233 00001B91 80FA00              <2> 			cmp dl,0
  7234 00001B94 7402                <2> 			jz .zero
  7235 00001B96 EB08                <2> 			jmp .notzero
  7236                              <2> 			.zero:
  7237 00001B98 58                  <2> 				pop ax
  7238 00001B99 50                  <2> 				push ax
  7239 00001B9A 3C01                <2> 				cmp al, TRUE				
  7240 00001B9C 7406                <2> 				je .endzero
  7241 00001B9E EB19                <2> 				jmp .inc
  7242                              <2> 			.notzero:
  7243 00001BA0 58                  <2> 				pop ax
  7244 00001BA1 B001                <2> 				mov al, TRUE	
  7245 00001BA3 50                  <2> 				push ax				
  7246                              <2> 		.endzero:
  7247                              <2> 									
  7248 00001BA4 80C230              <2> 		add dl,30h
  7249                              <2> 
  7250 00001BA7 51                  <2> 		push cx
  7251 00001BA8 52                  <2> 		push dx
  7252                              <2> 		__prtch dl
  7253                              <3>  stkopen 1
  7254 00001BA9 83EC01              <4>  sub word sp, %1
  7255 00001BAC 54                  <4>  push sp
  7256 00001BAD 5D                  <4>  pop bp
  7257 00001BAE 885600              <3>  mov byte [ bp ], %1
  7258 00001BB1 E82D01              <3>  call proc_prtch
  7259                              <3>  stkclose 1
  7260 00001BB4 83C401              <4>  add word sp, %1
  7261 00001BB7 5A                  <2> 		pop dx
  7262 00001BB8 59                  <2> 		pop cx	
  7263                              <2> 
  7264                              <2> 		.inc:
  7265                              <2> 	
  7266 00001BB9 FEC1                <2> 		inc cl
  7267 00001BBB EBB3                <2> 		jmp .l1	
  7268                              <2> 	.l2:
  7269                              <2> 	
  7270 00001BBD 58                  <2> 	pop ax
  7271                              <2> 	
  7272                              <2> 	.end:
  7273                              <2> 	
  7274 00001BBE C3                  <2> 	ret	
  7275                              <2> 
  7276                              <2> proc_prthex16:
  7277 00001BBF 89E0                <2> 	mov ax,sp
  7278 00001BC1 89C5                <2> 	mov bp,ax
  7279                              <2> 
  7280 00001BC3 8A7E04              <2> 	mov byte bh, [bp+4]		
  7281 00001BC6 B300                <2> 	mov bl,0	
  7282 00001BC8 B201                <2> 	mov dl,TRUE
  7283 00001BCA 30ED                <2> 	xor ch,ch
  7284 00001BCC B102                <2> 	mov cl, 2	
  7285                              <2> 	.l1:			
  7286 00001BCE 80F900              <2> 		cmp cl,0
  7287 00001BD1 7437                <2> 		jz .l2
  7288                              <2> 							
  7289 00001BD3 55                  <2> 		push bp		
  7290 00001BD4 01CD                <2> 		add bp,cx
  7291 00001BD6 45                  <2> 		inc bp		
  7292                              <2> 		
  7293 00001BD7 0A5E00              <2> 		or byte bl, [bp]
  7294 00001BDA 08FB                <2> 		or byte bl, bh
  7295 00001BDC 7427                <2> 		jz .prted							
  7296 00001BDE 53                  <2> 			push bx
  7297 00001BDF 51                  <2> 			push cx	
  7298 00001BE0 80FA01              <2> 			cmp dl, TRUE
  7299 00001BE3 7402                <2> 			je .first
  7300 00001BE5 EB10                <2> 			jmp .nfirst
  7301                              <2> 			.first:
  7302 00001BE7 B200                <2> 				mov dl, FALSE
  7303 00001BE9 52                  <2> 				push dx
  7304                              <2> 				
  7305 00001BEA 88FC                <2> 				mov ah, bh
  7306 00001BEC 8A4600              <2> 				mov byte al, [bp]
  7307 00001BEF 50                  <2> 				push ax
  7308 00001BF0 E82C00              <2> 				call proc_prthex8
  7309 00001BF3 58                  <2> 				pop ax
  7310                              <2> 							
  7311 00001BF4 5A                  <2> 				pop dx
  7312 00001BF5 EB0C                <2> 				jmp .endfirst
  7313                              <2> 			.nfirst:
  7314 00001BF7 52                  <2> 				push dx
  7315                              <2> 				
  7316 00001BF8 B401                <2> 				mov ah, TRUE
  7317 00001BFA 8A4600              <2> 				mov byte al, [bp]
  7318 00001BFD 50                  <2> 				push ax
  7319 00001BFE E81E00              <2> 				call proc_prthex8
  7320 00001C01 58                  <2> 				pop ax
  7321                              <2> 								
  7322 00001C02 5A                  <2> 				pop dx
  7323                              <2> 			.endfirst:	
  7324 00001C03 59                  <2> 			pop cx
  7325 00001C04 5B                  <2> 			pop bx		
  7326                              <2> 		.prted:
  7327                              <2> 		
  7328 00001C05 5D                  <2> 		pop bp
  7329                              <2> 	
  7330 00001C06 FEC9                <2> 		dec cl
  7331 00001C08 EBC4                <2> 		jmp .l1		
  7332                              <2> 	.l2:
  7333                              <2> 	
  7334 00001C0A 80FB00              <2> 	cmp bl,0
  7335 00001C0D 750F                <2> 	jnz .end
  7336                              <2> 		__prtch 30h
  7337                              <3>  stkopen 1
  7338 00001C0F 83EC01              <4>  sub word sp, %1
  7339 00001C12 54                  <4>  push sp
  7340 00001C13 5D                  <4>  pop bp
  7341 00001C14 C6460030            <3>  mov byte [ bp ], %1
  7342 00001C18 E8C600              <3>  call proc_prtch
  7343                              <3>  stkclose 1
  7344 00001C1B 83C401              <4>  add word sp, %1
  7345                              <2> 	.end:
  7346                              <2> 	
  7347 00001C1E C3                  <2> 	ret
  7348                              <2> 	
  7349                              <2> proc_prthex8:
  7350 00001C1F 89E0                <2> 	mov ax,sp
  7351 00001C21 89C5                <2> 	mov bp,ax
  7352 00001C23 8A4602              <2> 	mov byte al, [bp+2]
  7353 00001C26 3C00                <2> 	cmp al, 0
  7354 00001C28 752B                <2> 	jnz .nzero
  7355                              <2> 		__prtch 30h
  7356                              <3>  stkopen 1
  7357 00001C2A 83EC01              <4>  sub word sp, %1
  7358 00001C2D 54                  <4>  push sp
  7359 00001C2E 5D                  <4>  pop bp
  7360 00001C2F C6460030            <3>  mov byte [ bp ], %1
  7361 00001C33 E8AB00              <3>  call proc_prtch
  7362                              <3>  stkclose 1
  7363 00001C36 83C401              <4>  add word sp, %1
  7364                              <2> 		
  7365 00001C39 89E0                <2> 		mov ax,sp
  7366 00001C3B 89C5                <2> 		mov bp,ax
  7367 00001C3D 8A4603              <2> 		mov byte al, [bp+3]		
  7368 00001C40 3C00                <2> 		cmp al, FALSE
  7369 00001C42 7476                <2> 		je .end
  7370                              <2> 			__prtch 30h
  7371                              <3>  stkopen 1
  7372 00001C44 83EC01              <4>  sub word sp, %1
  7373 00001C47 54                  <4>  push sp
  7374 00001C48 5D                  <4>  pop bp
  7375 00001C49 C6460030            <3>  mov byte [ bp ], %1
  7376 00001C4D E89100              <3>  call proc_prtch
  7377                              <3>  stkclose 1
  7378 00001C50 83C401              <4>  add word sp, %1
  7379 00001C53 EB65                <2> 			jmp .end		
  7380                              <2> 	.nzero:
  7381                              <2> 
  7382 00001C55 B000                <2> 	mov byte al, FALSE
  7383 00001C57 50                  <2> 	push ax
  7384                              <2> 
  7385 00001C58 89E0                <2> 	mov ax,sp
  7386 00001C5A 89C5                <2> 	mov bp,ax
  7387 00001C5C 8A5E04              <2> 	mov byte bl, [bp+4]
  7388 00001C5F B102                <2> 	mov cl,2
  7389                              <2> 	.l1:
  7390 00001C61 80F900              <2> 		cmp cl,0
  7391 00001C64 7453                <2> 		jz .l2
  7392                              <2> 		
  7393 00001C66 B002                <2> 		mov al,2
  7394 00001C68 28C8                <2> 		sub al,cl
  7395                              <2> 		
  7396 00001C6A 88DA                <2> 		mov dl, bl	
  7397                              <2> 		
  7398                              <2> 		.l1.1:
  7399 00001C6C 3C00                <2> 			cmp al,0
  7400 00001C6E 7407                <2> 			jz .l1.2
  7401                              <2> 							
  7402 00001C70 C0E204              <2> 			shl dl,4
  7403                              <2> 			
  7404 00001C73 FEC8                <2> 			dec al
  7405 00001C75 EBF5                <2> 			jmp .l1.1
  7406                              <2> 		.l1.2:
  7407                              <2> 						
  7408 00001C77 C0EA04              <2> 		shr dl,4
  7409                              <2> 
  7410 00001C7A 89E0                <2> 		mov ax,sp
  7411 00001C7C 89C5                <2> 		mov bp,ax			
  7412 00001C7E 8A4605              <2> 		mov byte al, [bp+5]
  7413 00001C81 3C01                <2> 		cmp al, TRUE
  7414 00001C83 7413                <2> 		je .endzero		
  7415 00001C85 80FA00              <2> 			cmp dl,0
  7416 00001C88 7402                <2> 			jz .zero
  7417 00001C8A EB08                <2> 			jmp .notzero
  7418                              <2> 			.zero:
  7419 00001C8C 58                  <2> 				pop ax
  7420 00001C8D 50                  <2> 				push ax
  7421 00001C8E 3C01                <2> 				cmp al, TRUE				
  7422 00001C90 7406                <2> 				je .endzero
  7423 00001C92 EB21                <2> 				jmp .dec
  7424                              <2> 			.notzero:
  7425 00001C94 58                  <2> 				pop ax
  7426 00001C95 B001                <2> 				mov al, TRUE	
  7427 00001C97 50                  <2> 				push ax				
  7428                              <2> 		.endzero:
  7429                              <2> 						
  7430 00001C98 80FA09              <2> 		cmp dl,9
  7431 00001C9B 7603                <2> 		jbe .endsumseven  		
  7432 00001C9D 80C207              <2> 		add dl,7
  7433                              <2> 		.endsumseven:
  7434                              <2> 						
  7435 00001CA0 80C230              <2> 		add dl,30h
  7436                              <2> 
  7437 00001CA3 51                  <2> 		push cx
  7438 00001CA4 52                  <2> 		push dx
  7439                              <2> 		__prtch dl
  7440                              <3>  stkopen 1
  7441 00001CA5 83EC01              <4>  sub word sp, %1
  7442 00001CA8 54                  <4>  push sp
  7443 00001CA9 5D                  <4>  pop bp
  7444 00001CAA 885600              <3>  mov byte [ bp ], %1
  7445 00001CAD E83100              <3>  call proc_prtch
  7446                              <3>  stkclose 1
  7447 00001CB0 83C401              <4>  add word sp, %1
  7448 00001CB3 5A                  <2> 		pop dx
  7449 00001CB4 59                  <2> 		pop cx	
  7450                              <2> 
  7451                              <2> 		.dec:
  7452                              <2> 	
  7453 00001CB5 FEC9                <2> 		dec cl
  7454 00001CB7 EBA8                <2> 		jmp .l1	
  7455                              <2> 	.l2:
  7456                              <2> 	
  7457 00001CB9 58                  <2> 	pop ax
  7458                              <2> 	
  7459                              <2> 	.end:
  7460                              <2> 	
  7461 00001CBA C3                  <2> 	ret
  7462                              <2> 
  7463                              <2> proc_prtstr:
  7464 00001CBB 89E0                <2> 	mov ax,sp
  7465 00001CBD 89C5                <2> 	mov bp,ax
  7466                              <2> 	
  7467 00001CBF 8B4602              <2> 	mov ax, [bp+2]
  7468 00001CC2 8ED8                <2> 	mov ds, ax
  7469 00001CC4 8B7604              <2> 	mov si, [bp+4]						
  7470                              <2> 	.loop:
  7471 00001CC7 AC                  <2> 		lodsb
  7472 00001CC8 3C00                <2> 		cmp al,0h
  7473 00001CCA 7414                <2> 		jz .done
  7474                              <2> 		
  7475 00001CCC 1E                  <2> 		push ds
  7476 00001CCD 56                  <2> 		push si
  7477                              <2> 					
  7478                              <2> 		__prtch al										
  7479                              <3>  stkopen 1
  7480 00001CCE 83EC01              <4>  sub word sp, %1
  7481 00001CD1 54                  <4>  push sp
  7482 00001CD2 5D                  <4>  pop bp
  7483 00001CD3 884600              <3>  mov byte [ bp ], %1
  7484 00001CD6 E80800              <3>  call proc_prtch
  7485                              <3>  stkclose 1
  7486 00001CD9 83C401              <4>  add word sp, %1
  7487                              <2> 									
  7488 00001CDC 5E                  <2> 		pop si
  7489 00001CDD 1F                  <2> 		pop ds
  7490                              <2> 											
  7491 00001CDE EBE7                <2> 		jmp .loop 
  7492                              <2> 	.done:
  7493                              <2> 	
  7494 00001CE0 C3                  <2> 	ret	
  7495                              <2> 	
  7496                              <2> proc_prtch:
  7497 00001CE1 89E0                <2> 	mov ax,sp
  7498 00001CE3 89C5                <2> 	mov bp,ax
  7499                              <2> 
  7500 00001CE5 8A4602              <2> 	mov al,[bp+2]
  7501 00001CE8 B40E                <2> 	mov ah,0Eh
  7502 00001CEA B700                <2> 	mov bh,00h
  7503 00001CEC CD10                <2> 	int 10h	
  7504                              <2> 	
  7505 00001CEE C3                  <2> 	ret
  7506                              <2> 
  7507                              <2> proc_prtln:
  7508 00001CEF B403                <2> 	mov ah,03h
  7509 00001CF1 B700                <2> 	mov bh,00h
  7510 00001CF3 CD10                <2> 	int 10h
  7511                              <2> 	
  7512 00001CF5 B402                <2> 	mov ah,02h
  7513 00001CF7 FEC6                <2> 	inc dh
  7514 00001CF9 B200                <2> 	mov dl,00h
  7515 00001CFB CD10                <2> 	int 10h	
  7516                              <2> 	
  7517 00001CFD C3                  <2> 	ret
  7518                              <2> 	
  7519                              <2> %endif
  7520                              <1>  	%include "lib/system.mac"
  7521                              <2>  
  7522                              <2> %ifndef SYSTEM_MAC
  7523                              <2>  	%define SYSTEM_MAC
  7524                              <2>  	
  7525                              <2> 	%ifndef TRUE
  7526                              <2> 		%define TRUE 01h
  7527                              <2> 	%endif
  7528                              <2> 	%ifndef FALSE
  7529                              <2> 		%define FALSE 00h
  7530                              <2> 	%endif
  7531                              <2> 	
  7532                              <2> %macro vlodsb 3
  7533                              <2> 	vlodsb cs, %1, %2, %3
  7534                              <2> %endmacro
  7535                              <2> 
  7536                              <2> %macro vstosb 3
  7537                              <2> 	vstosb cs, %1, %2, %3
  7538                              <2> %endmacro
  7539                              <2> 	 	
  7540                              <2> %macro int16toreg 2
  7541                              <2> 	int16toreg cs, %1, %2
  7542                              <2> %endmacro
  7543                              <2> 
  7544                              <2> %macro regtoint16 2
  7545                              <2> 	regtoint16 %1, cs, %2
  7546                              <2> %endmacro
  7547                              <2> 
  7548                              <2> %macro vstosb 4
  7549                              <2> 	push %1
  7550                              <2> 	pop ds
  7551                              <2> 	mov si,%2
  7552                              <2> 	add si,%3
  7553                              <2> 	mov byte [si],%4	
  7554                              <2> %endmacro
  7555                              <2> 
  7556                              <2> %macro vlodsb 4
  7557                              <2> 	push %1
  7558                              <2> 	pop ds
  7559                              <2> 	mov si,%2
  7560                              <2> 	add si,%3
  7561                              <2> 	mov byte %4,[si]	
  7562                              <2> %endmacro 	 
  7563                              <2> 
  7564                              <2> %macro int16toreg 3
  7565                              <2> 	push %2
  7566                              <2> 	push %1
  7567                              <2> 	pop ds
  7568                              <2> 	pop si
  7569                              <2> 	mov word %3,[si]	
  7570                              <2> %endmacro
  7571                              <2> 
  7572                              <2> %macro regtoint16 3
  7573                              <2> 	push %3
  7574                              <2> 	push %2
  7575                              <2> 	pop ds
  7576                              <2> 	pop si
  7577                              <2> 	mov word [si],%1	
  7578                              <2> %endmacro
  7579                              <2> 
  7580                              <2> %macro mov32 2
  7581                              <2> 	mov32 cs, %1, cs, %2
  7582                              <2> %endmacro
  7583                              <2> 
  7584                              <2> %macro mov16 2
  7585                              <2> 	mov16 cs, %1, cs, %2
  7586                              <2> %endmacro
  7587                              <2> 
  7588                              <2> %macro mov32 4
  7589                              <2> 	mov ax,%3
  7590                              <2> 	mov ds,ax
  7591                              <2> 	mov cx,[%4+2]
  7592                              <2> 	mov dx,[%4]
  7593                              <2> 	mov ax,%1
  7594                              <2> 	mov ds,ax
  7595                              <2> 	mov [%2+2],cx
  7596                              <2> 	mov [%2],dx
  7597                              <2> %endmacro
  7598                              <2> 
  7599                              <2> %macro mov16 4
  7600                              <2> 	mov ax,%3
  7601                              <2> 	mov ds,ax
  7602                              <2> 	mov bx,[%4]
  7603                              <2> 	mov ax,%1
  7604                              <2> 	mov ds,ax
  7605                              <2> 	mov [%2],bx
  7606                              <2> %endmacro
  7607                              <2>  	 	
  7608                              <2> %macro mformat 4
  7609                              <2> 	stkopen 8
  7610                              <2> 	mov word [ bp + 0 ], %1
  7611                              <2> 	mov word [ bp + 2 ], %2
  7612                              <2> 	mov word [ bp + 4 ], %3
  7613                              <2> 	mov word [ bp + 6 ], %4
  7614                              <2> 	call kernel_segment:mformat
  7615                              <2> 	stkclose 8
  7616                              <2> %endmacro
  7617                              <2> 
  7618                              <2> %macro malloc 6
  7619                              <2> 	stkopen 0Bh
  7620                              <2> 	mov word [ bp + 4 ], %3
  7621                              <2> 	mov word [ bp + 6 ], %4
  7622                              <2> 	mov word [ bp + 8 ], %5	
  7623                              <2> 	call kernel_segment:malloc
  7624                              <2> 	push sp
  7625                              <2> 	pop bp
  7626                              <2> 	mov word %1, [ bp ]
  7627                              <2> 	mov word %2, [ bp + 2 ]
  7628                              <2> 	mov byte %6, [ bp + 0x0A ]
  7629                              <2> 	stkclose 0Bh
  7630                              <2> %endmacro 	
  7631                              <2> 
  7632                              <2> %macro laddr 2
  7633                              <2> 	laddr %1, %2, %1, %2
  7634                              <2> %endmacro
  7635                              <2> 
  7636                              <2> %macro faddr 2
  7637                              <2> 	faddr %1, %2, %1, %2
  7638                              <2> %endmacro
  7639                              <2>  	
  7640                              <2> %macro laddr 4
  7641                              <2> 	stkopen 8
  7642                              <2> 	mov word [ bp + 4 ], %3
  7643                              <2> 	mov word [ bp + 6 ], %4	
  7644                              <2> 	call kernel_segment:laddr
  7645                              <2> 	push sp
  7646                              <2> 	pop bp
  7647                              <2> 	mov word %1, [ bp + 0 ]
  7648                              <2> 	mov word %2, [ bp + 2 ]	
  7649                              <2> 	stkclose 8
  7650                              <2> %endmacro
  7651                              <2> 
  7652                              <2> %macro faddr 4
  7653                              <2> 	stkopen 8
  7654                              <2> 	mov word [ bp + 4 ], %3
  7655                              <2> 	mov word [ bp + 6 ], %4	
  7656                              <2> 	call kernel_segment:faddr
  7657                              <2> 	push sp
  7658                              <2> 	pop bp
  7659                              <2> 	mov word %1, [ bp + 0 ]
  7660                              <2> 	mov word %2, [ bp + 2 ]	
  7661                              <2> 	stkclose 8
  7662                              <2> %endmacro	
  7663                              <2>  
  7664                              <2> 
  7665                              <2> %macro stkopen 1		
  7666                              <2> 	sub word sp, %1
  7667                              <2> 	push sp
  7668                              <2> 	pop bp
  7669                              <2> %endmacro
  7670                              <2> 
  7671                              <2> %macro stkclose 1
  7672                              <2> 	add word sp, %1
  7673                              <2> %endmacro
  7674                              <2> 
  7675                              <2> %macro stkload 1-* 	
  7676                              <2>  	%rep %0
  7677                              <2>  	 	%rotate -1
  7678                              <2>  		pop %1
  7679                              <2>  	%endrep
  7680                              <2>  	%rep %0
  7681                              <2>  		push %1
  7682                              <2>  		%rotate 1
  7683                              <2>  	%endrep
  7684                              <2> %endmacro
  7685                              <2> 
  7686                              <2> %macro stkpush 1-* 	
  7687                              <2>  	%rep %0
  7688                              <2>  		push %1
  7689                              <2>  		%rotate 1
  7690                              <2>  	%endrep 	
  7691                              <2> %endmacro
  7692                              <2>  
  7693                              <2> %macro stkpop 1-*
  7694                              <2>  	%rep %0
  7695                              <2>  	 	%rotate -1
  7696                              <2>  		pop %1
  7697                              <2>  	%endrep 	 	
  7698                              <2> %endmacro
  7699                              <2> 
  7700                              <2> %endif 
  7701                              <1> 
  7702                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  7703                              <1> %macro printf 1-*	
  7704                              <1> 	%rep %0					
  7705                              <1> 		__printf %1
  7706                              <1> 		%rotate 1		
  7707                              <1> 	%endrep
  7708                              <1> %endmacro	
  7709                              <1> 
  7710                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  7711                              <1> %macro __printf 1
  7712                              <1> 	section .data
  7713                              <1> 		%%str: db %1,0
  7714                              <1> 	section .text
  7715                              <1> 		prtstr cs, %%str				
  7716                              <1> %endmacro
  7717                              <1> 
  7718                              <1> %macro prtstr 2
  7719                              <1> 	stkopen 4
  7720                              <1> 	mov word [bp], %1
  7721                              <1> 	mov word [bp+2], %2
  7722                              <1> 	call proc_prtstr
  7723                              <1> 	stkclose 4
  7724                              <1> %endmacro
  7725                              <1> 
  7726                              <1> 
  7727                              <1> %macro prtIEEE754 1
  7728                              <1> 	prtIEEE754 cs, %1
  7729                              <1> %endmacro
  7730                              <1> 
  7731                              <1> %macro prtIEEE754 2
  7732                              <1> 	stkopen 4
  7733                              <1> 	mov ax,%1
  7734                              <1> 	mov ds,ax
  7735                              <1> 	mov ax, [%2+2]
  7736                              <1> 	mov word [bp+0], ax
  7737                              <1> 	mov ax, [%2]
  7738                              <1> 	mov word [bp+2], ax
  7739                              <1> 	call proc_prtIEEE754
  7740                              <1> 	stkclose 4
  7741                              <1> %endmacro
  7742                              <1> 
  7743                              <1> %macro prtbool 1	
  7744                              <1> 	cmp byte %1, TRUE
  7745                              <1> 	je .true
  7746                              <1> 	jmp .false
  7747                              <1> 	.true:
  7748                              <1> 		prtf "true"
  7749                              <1> 		jmp .endcmp
  7750                              <1> 	.false:
  7751                              <1> 		prtf "false"
  7752                              <1> 	.endcmp:	
  7753                              <1> %endmacro
  7754                              <1> 
  7755                              <1> %macro prtptr 2-3 TRUE
  7756                              <1> 	stkopen 3
  7757                              <1> 	mov word [ bp + 0 ], %2
  7758                              <1> 	mov byte [ bp + 2 ], %3
  7759                              <1> 	prthex16 %1, %3
  7760                              <1> 	writechar ':'
  7761                              <1> 	push sp
  7762                              <1> 	pop bp
  7763                              <1> 	mov word ax, [ bp + 0 ]
  7764                              <1> 	mov byte bl, [ bp + 2 ]
  7765                              <1> 	prthex16 ax, bl
  7766                              <1> 	stkclose 3
  7767                              <1> %endmacro
  7768                              <1> 
  7769                              <1> %macro prtfptr 2-3 TRUE
  7770                              <1> 	stkopen 3
  7771                              <1> 	mov word [ bp + 0 ], %1
  7772                              <1> 	mov byte [ bp + 2 ], %3
  7773                              <1> 	prthex16 %2, %3
  7774                              <1> 	push sp
  7775                              <1> 	pop bp
  7776                              <1> 	mov word ax, [ bp + 0 ]
  7777                              <1> 	mov byte bl, [ bp + 2 ]
  7778                              <1> 	prthex16 ax, bl
  7779                              <1> 	stkclose 3
  7780                              <1> %endmacro
  7781                              <1> 
  7782                              <1> %macro prtbin32 1
  7783                              <1> 	prtbin32 cs, %1
  7784                              <1> %endmacro
  7785                              <1> 
  7786                              <1> %macro prtbin32 2
  7787                              <1> 	mov ax,%1
  7788                              <1> 	mov ds,ax
  7789                              <1> 	mov word ax,[%2+2]
  7790                              <1> 	prtbin16 ax
  7791                              <1> 	prtch 20h
  7792                              <1> 	mov ax,%1
  7793                              <1> 	mov ds,ax
  7794                              <1> 	mov word ax,[%2]
  7795                              <1> 	prtbin16 ax
  7796                              <1> %endmacro
  7797                              <1> 
  7798                              <1> %macro prthex32 1
  7799                              <1> 	prthex32 cs, %1
  7800                              <1> %endmacro
  7801                              <1> 
  7802                              <1> %macro iprthex32 1
  7803                              <1> 	iprthex32 cs, %1
  7804                              <1> %endmacro
  7805                              <1> 
  7806                              <1> %macro prthex32 2
  7807                              <1> 	mov ax,%1
  7808                              <1> 	mov ds,ax
  7809                              <1> 	mov word ax,[%2+2]
  7810                              <1> 	prthex16 ax	
  7811                              <1> 	mov ax,%1
  7812                              <1> 	mov ds,ax
  7813                              <1> 	mov word ax,[%2]
  7814                              <1> 	prthex16 ax
  7815                              <1> %endmacro
  7816                              <1> 
  7817                              <1> %macro iprthex32 2
  7818                              <1> 	mov ax,%1
  7819                              <1> 	mov ds,ax
  7820                              <1> 	mov word ax,[%2+2]
  7821                              <1> 	mov word bx,ax
  7822                              <1> 	and ax,0x7FFF
  7823                              <1> 	push ax
  7824                              <1> 	and bx,0x8000
  7825                              <1> 	cmp bx,0
  7826                              <1> 	jz %%prt
  7827                              <1> 		prtch '-'		
  7828                              <1> 	%%prt:	
  7829                              <1> 	pop ax
  7830                              <1> 	prthex16 ax
  7831                              <1> 	mov ax,%1
  7832                              <1> 	mov ds,ax
  7833                              <1> 	mov word ax,[%2]
  7834                              <1> 	prthex16 ax	
  7835                              <1> %endmacro
  7836                              <1> 
  7837                              <1> %macro prtsubbin8 3
  7838                              <1> 	__prtsubbin8 %1,%2,%3
  7839                              <1> %endmacro
  7840                              <1> 
  7841                              <1> %macro prtbin16 1
  7842                              <1> 	stkopen 3
  7843                              <1> 	mov word [bp], %1
  7844                              <1> 	mov byte [bp+2], TRUE
  7845                              <1> 	call proc_prtbin16
  7846                              <1> 	stkclose 3
  7847                              <1> %endmacro
  7848                              <1> 
  7849                              <1> %macro prtbin8 1
  7850                              <1> 	stkopen 2
  7851                              <1> 	mov byte [bp], %1
  7852                              <1> 	mov byte [bp+1], TRUE
  7853                              <1> 	call proc_prtbin8
  7854                              <1> 	stkclose 2
  7855                              <1> %endmacro
  7856                              <1> 
  7857                              <1> %macro prthex16 1
  7858                              <1> 	stkopen 3
  7859                              <1> 	mov word [bp], %1
  7860                              <1> 	mov byte [bp+2], TRUE
  7861                              <1> 	call proc_prthex16
  7862                              <1> 	stkclose 3
  7863                              <1> %endmacro
  7864                              <1> 
  7865                              <1> %macro prthex8 1
  7866                              <1> 	stkopen 2
  7867                              <1> 	mov byte [bp], %1
  7868                              <1> 	mov byte [bp+1], TRUE
  7869                              <1> 	call proc_prthex8
  7870                              <1> 	stkclose 2
  7871                              <1> %endmacro
  7872                              <1> 
  7873                              <1> %macro prtch 1
  7874                              <1> 	__prtch %1
  7875                              <1> %endmacro
  7876                              <1> 
  7877                              <1> %macro prtln 0
  7878                              <1> 	__prtln
  7879                              <1> %endmacro	
  7880                              <1> 
  7881                              <1> 
  7882                              <1> %macro prtstk 0
  7883                              <1> 	printf "stack ---> "
  7884                              <1> 	mov ax,sp
  7885                              <1> 	prthex16 ax
  7886                              <1> %endmacro  
  7887                              <1> 
  7888                              <1> %endif
  7889                                  
  7890                                  section .data
  7891 00001CFE EF71DBC3                	n: dd -438.8901
  7892                                  section .text
  7893                                  	global _start
  7894                                  
  7895                                  _start:		
  7896                                  	prthex32 n
  7897                              <1>  prthex32 cs, %1
  7898 00000000 8CC8                <2>  mov ax,%1
  7899 00000002 8ED8                <2>  mov ds,ax
  7900 00000004 A1[001D]            <2>  mov word ax,[%2+2]
  7901                              <2>  prthex16 ax
  7902                              <3>  stkopen 3
  7903 00000007 83EC03              <4>  sub word sp, %1
  7904 0000000A 54                  <4>  push sp
  7905 0000000B 5D                  <4>  pop bp
  7906 0000000C 894600              <3>  mov word [bp], %1
  7907 0000000F C6460201            <3>  mov byte [bp+2], TRUE
  7908 00000013 E8(BF1B)            <3>  call proc_prthex16
  7909                              <3>  stkclose 3
  7910 00000016 83C403              <4>  add word sp, %1
  7911 00000019 8CC8                <2>  mov ax,%1
  7912 0000001B 8ED8                <2>  mov ds,ax
  7913 0000001D A1[FE1C]            <2>  mov word ax,[%2]
  7914                              <2>  prthex16 ax
  7915                              <3>  stkopen 3
  7916 00000020 83EC03              <4>  sub word sp, %1
  7917 00000023 54                  <4>  push sp
  7918 00000024 5D                  <4>  pop bp
  7919 00000025 894600              <3>  mov word [bp], %1
  7920 00000028 C6460201            <3>  mov byte [bp+2], TRUE
  7921 0000002C E8(BF1B)            <3>  call proc_prthex16
  7922                              <3>  stkclose 3
  7923 0000002F 83C403              <4>  add word sp, %1
  7924                                  	prtln
  7925                              <1>  __prtln
  7926 00000032 E8(EF1C)            <2>  call proc_prtln
  7927                                  	
  7928                                  	truncate n
  7929                              <1>  truncate %1, %1
  7930                              <2>  truncate cs, %1, cs, %2
  7931                              <3>  stkopen 0x08
  7932 00000035 83EC08              <4>  sub word sp, %1
  7933 00000038 54                  <4>  push sp
  7934 00000039 5D                  <4>  pop bp
  7935 0000003A 8CC8                <3>  mov ax,%1
  7936 0000003C 8ED8                <3>  mov ds,ax
  7937 0000003E A1[001D]            <3>  mov ax,[%2+2]
  7938 00000041 894600              <3>  mov [bp+0],ax
  7939 00000044 A1[FE1C]            <3>  mov ax,[%2]
  7940 00000047 894602              <3>  mov [bp+2],ax
  7941 0000004A E8(6606)            <3>  call proc_truncate
  7942 0000004D 89E0                <3>  mov ax,sp
  7943 0000004F 89C5                <3>  mov bp,ax
  7944 00000051 8CC8                <3>  mov ax,%3
  7945 00000053 8ED8                <3>  mov ds,ax
  7946 00000055 8B4604              <3>  mov ax,[bp+4]
  7947 00000058 A3[001D]            <3>  mov [%4+2],ax
  7948 0000005B 8B4606              <3>  mov ax,[bp+6]
  7949 0000005E A3[FE1C]            <3>  mov [%4],ax
  7950                              <3>  stkclose 0x08
  7951 00000061 83C408              <4>  add word sp, %1
  7952                                  	prthex32 n		
  7953                              <1>  prthex32 cs, %1
  7954 00000064 8CC8                <2>  mov ax,%1
  7955 00000066 8ED8                <2>  mov ds,ax
  7956 00000068 A1[001D]            <2>  mov word ax,[%2+2]
  7957                              <2>  prthex16 ax
  7958                              <3>  stkopen 3
  7959 0000006B 83EC03              <4>  sub word sp, %1
  7960 0000006E 54                  <4>  push sp
  7961 0000006F 5D                  <4>  pop bp
  7962 00000070 894600              <3>  mov word [bp], %1
  7963 00000073 C6460201            <3>  mov byte [bp+2], TRUE
  7964 00000077 E8(BF1B)            <3>  call proc_prthex16
  7965                              <3>  stkclose 3
  7966 0000007A 83C403              <4>  add word sp, %1
  7967 0000007D 8CC8                <2>  mov ax,%1
  7968 0000007F 8ED8                <2>  mov ds,ax
  7969 00000081 A1[FE1C]            <2>  mov word ax,[%2]
  7970                              <2>  prthex16 ax
  7971                              <3>  stkopen 3
  7972 00000084 83EC03              <4>  sub word sp, %1
  7973 00000087 54                  <4>  push sp
  7974 00000088 5D                  <4>  pop bp
  7975 00000089 894600              <3>  mov word [bp], %1
  7976 0000008C C6460201            <3>  mov byte [bp+2], TRUE
  7977 00000090 E8(BF1B)            <3>  call proc_prthex16
  7978                              <3>  stkclose 3
  7979 00000093 83C403              <4>  add word sp, %1
  7980                                  	
  7981 00000096 EBFE                    	jmp $	
  7982                                  	

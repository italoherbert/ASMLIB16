     1                                  %include "lib/stdio.mac"
     2                              <1> 
     3                              <1> %ifndef STDIO_MAC
     4                              <1> 	%define STDIO_MAC
     5                              <1> 	
     6                              <1> 	%include "lib/stdio.asm"
     7                              <2> 
     8                              <2> %ifndef STDIO_ASM
     9                              <2> 	%define STDIO_ASM
    10                              <2> 	
    11                              <2> 	%include "lib/system.mac"
    12                              <3>  
    13                              <3> %ifndef SYSTEM_MAC
    14                              <3>  	%define SYSTEM_MAC
    15                              <3>  	
    16                              <3> 	%ifndef TRUE
    17                              <3> 		%define TRUE 01h
    18                              <3> 	%endif
    19                              <3> 	%ifndef FALSE
    20                              <3> 		%define FALSE 00h
    21                              <3> 	%endif
    22                              <3> 	
    23                              <3> %macro vlodsb 3
    24                              <3> 	vlodsb cs, %1, %2, %3
    25                              <3> %endmacro
    26                              <3> 
    27                              <3> %macro vstosb 3
    28                              <3> 	vstosb cs, %1, %2, %3
    29                              <3> %endmacro
    30                              <3> 	 	
    31                              <3> %macro int16toreg 2
    32                              <3> 	int16toreg cs, %1, %2
    33                              <3> %endmacro
    34                              <3> 
    35                              <3> %macro regtoint16 2
    36                              <3> 	regtoint16 %1, cs, %2
    37                              <3> %endmacro
    38                              <3> 
    39                              <3> %macro vstosb 4
    40                              <3> 	push %1
    41                              <3> 	pop ds
    42                              <3> 	mov si,%2
    43                              <3> 	add si,%3
    44                              <3> 	mov byte [si],%4	
    45                              <3> %endmacro
    46                              <3> 
    47                              <3> %macro vlodsb 4
    48                              <3> 	push %1
    49                              <3> 	pop ds
    50                              <3> 	mov si,%2
    51                              <3> 	add si,%3
    52                              <3> 	mov byte %4,[si]	
    53                              <3> %endmacro 	 
    54                              <3> 
    55                              <3> %macro int16toreg 3
    56                              <3> 	push %2
    57                              <3> 	push %1
    58                              <3> 	pop ds
    59                              <3> 	pop si
    60                              <3> 	mov word %3,[si]	
    61                              <3> %endmacro
    62                              <3> 
    63                              <3> %macro regtoint16 3
    64                              <3> 	push %3
    65                              <3> 	push %2
    66                              <3> 	pop ds
    67                              <3> 	pop si
    68                              <3> 	mov word [si],%1	
    69                              <3> %endmacro
    70                              <3> 
    71                              <3> %macro mov32 2
    72                              <3> 	mov32 cs, %1, cs, %2
    73                              <3> %endmacro
    74                              <3> 
    75                              <3> %macro mov16 2
    76                              <3> 	mov16 cs, %1, cs, %2
    77                              <3> %endmacro
    78                              <3> 
    79                              <3> %macro mov32 4
    80                              <3> 	mov ax,%3
    81                              <3> 	mov ds,ax
    82                              <3> 	mov cx,[%4+2]
    83                              <3> 	mov dx,[%4]
    84                              <3> 	mov ax,%1
    85                              <3> 	mov ds,ax
    86                              <3> 	mov [%2+2],cx
    87                              <3> 	mov [%2],dx
    88                              <3> %endmacro
    89                              <3> 
    90                              <3> %macro mov16 4
    91                              <3> 	mov ax,%3
    92                              <3> 	mov ds,ax
    93                              <3> 	mov bx,[%4]
    94                              <3> 	mov ax,%1
    95                              <3> 	mov ds,ax
    96                              <3> 	mov [%2],bx
    97                              <3> %endmacro
    98                              <3>  	 	
    99                              <3> %macro mformat 4
   100                              <3> 	stkopen 8
   101                              <3> 	mov word [ bp + 0 ], %1
   102                              <3> 	mov word [ bp + 2 ], %2
   103                              <3> 	mov word [ bp + 4 ], %3
   104                              <3> 	mov word [ bp + 6 ], %4
   105                              <3> 	call kernel_segment:mformat
   106                              <3> 	stkclose 8
   107                              <3> %endmacro
   108                              <3> 
   109                              <3> %macro malloc 6
   110                              <3> 	stkopen 0Bh
   111                              <3> 	mov word [ bp + 4 ], %3
   112                              <3> 	mov word [ bp + 6 ], %4
   113                              <3> 	mov word [ bp + 8 ], %5	
   114                              <3> 	call kernel_segment:malloc
   115                              <3> 	push sp
   116                              <3> 	pop bp
   117                              <3> 	mov word %1, [ bp ]
   118                              <3> 	mov word %2, [ bp + 2 ]
   119                              <3> 	mov byte %6, [ bp + 0x0A ]
   120                              <3> 	stkclose 0Bh
   121                              <3> %endmacro 	
   122                              <3> 
   123                              <3> %macro laddr 2
   124                              <3> 	laddr %1, %2, %1, %2
   125                              <3> %endmacro
   126                              <3> 
   127                              <3> %macro faddr 2
   128                              <3> 	faddr %1, %2, %1, %2
   129                              <3> %endmacro
   130                              <3>  	
   131                              <3> %macro laddr 4
   132                              <3> 	stkopen 8
   133                              <3> 	mov word [ bp + 4 ], %3
   134                              <3> 	mov word [ bp + 6 ], %4	
   135                              <3> 	call kernel_segment:laddr
   136                              <3> 	push sp
   137                              <3> 	pop bp
   138                              <3> 	mov word %1, [ bp + 0 ]
   139                              <3> 	mov word %2, [ bp + 2 ]	
   140                              <3> 	stkclose 8
   141                              <3> %endmacro
   142                              <3> 
   143                              <3> %macro faddr 4
   144                              <3> 	stkopen 8
   145                              <3> 	mov word [ bp + 4 ], %3
   146                              <3> 	mov word [ bp + 6 ], %4	
   147                              <3> 	call kernel_segment:faddr
   148                              <3> 	push sp
   149                              <3> 	pop bp
   150                              <3> 	mov word %1, [ bp + 0 ]
   151                              <3> 	mov word %2, [ bp + 2 ]	
   152                              <3> 	stkclose 8
   153                              <3> %endmacro	
   154                              <3>  
   155                              <3> 
   156                              <3> %macro stkopen 1		
   157                              <3> 	sub word sp, %1
   158                              <3> 	push sp
   159                              <3> 	pop bp
   160                              <3> %endmacro
   161                              <3> 
   162                              <3> %macro stkclose 1
   163                              <3> 	add word sp, %1
   164                              <3> %endmacro
   165                              <3> 
   166                              <3> %macro stkload 1-* 	
   167                              <3>  	%rep %0
   168                              <3>  	 	%rotate -1
   169                              <3>  		pop %1
   170                              <3>  	%endrep
   171                              <3>  	%rep %0
   172                              <3>  		push %1
   173                              <3>  		%rotate 1
   174                              <3>  	%endrep
   175                              <3> %endmacro
   176                              <3> 
   177                              <3> %macro stkpush 1-* 	
   178                              <3>  	%rep %0
   179                              <3>  		push %1
   180                              <3>  		%rotate 1
   181                              <3>  	%endrep 	
   182                              <3> %endmacro
   183                              <3>  
   184                              <3> %macro stkpop 1-*
   185                              <3>  	%rep %0
   186                              <3>  	 	%rotate -1
   187                              <3>  		pop %1
   188                              <3>  	%endrep 	 	
   189                              <3> %endmacro
   190                              <3> 
   191                              <3> %macro delay 1
   192                              <3> 	delay cs, %1
   193                              <3> %endmacro
   194                              <3> 
   195                              <3> %macro delay 2
   196                              <3> 	mov ax,%1
   197                              <3> 	mov ds,ax
   198                              <3> 	
   199                              <3> 	mov ah,86h
   200                              <3> 	mov cx,[%2+2]
   201                              <3> 	mov dx,[%2]
   202                              <3> 	int 15h	
   203                              <3> %endmacro
   204                              <3> 
   205                              <3> %endif 
   206                              <2> 	
   207                              <2> %macro __prtch 1	
   208                              <2> 	stkopen 1	
   209                              <2> 	mov byte [ bp ], %1
   210                              <2> 	call proc_prtch
   211                              <2> 	stkclose 1
   212                              <2> %endmacro
   213                              <2> 
   214                              <2> %macro __prtln 0
   215                              <2> 	call proc_prtln
   216                              <2> %endmacro	
   217                              <2> 
   218                              <2> %macro __prtsubbin8 3
   219                              <2> 	stkopen 3
   220                              <2> 	mov byte [bp+0],%1
   221                              <2> 	mov byte [bp+1],%2
   222                              <2> 	mov byte [bp+2],%3
   223                              <2> 	call proc_prtsubbin8
   224                              <2> 	stkclose 3
   225                              <2> %endmacro
   226                              <2> 	
   227                              <2> section .data
   228                              <2> 	
   229                              <2> proc_prtIEEE754:
   230 00000000 89E0                <2> 	mov ax,sp
   231 00000002 89C5                <2> 	mov bp,ax			
   232 00000004 8B4602              <2> 	mov ax,[bp+2]	
   233 00000007 50                  <2> 	push ax
   234 00000008 50                  <2> 	push ax
   235 00000009 50                  <2> 	push ax
   236 0000000A 50                  <2> 	push ax	
   237 0000000B 50                  <2> 	push ax
   238                              <2> 	
   239                              <2> 	__prtsubbin8 ah,0,1
   240                              <3>  stkopen 3
   241 0000000C 83EC03              <4>  sub word sp, %1
   242 0000000F 54                  <4>  push sp
   243 00000010 5D                  <4>  pop bp
   244 00000011 886600              <3>  mov byte [bp+0],%1
   245 00000014 C6460100            <3>  mov byte [bp+1],%2
   246 00000018 C6460201            <3>  mov byte [bp+2],%3
   247 0000001C E87201              <3>  call proc_prtsubbin8
   248                              <3>  stkclose 3
   249 0000001F 83C403              <4>  add word sp, %1
   250                              <2> 	__prtch 20h
   251                              <3>  stkopen 1
   252 00000022 83EC01              <4>  sub word sp, %1
   253 00000025 54                  <4>  push sp
   254 00000026 5D                  <4>  pop bp
   255 00000027 C6460020            <3>  mov byte [ bp ], %1
   256 0000002B E82004              <3>  call proc_prtch
   257                              <3>  stkclose 1
   258 0000002E 83C401              <4>  add word sp, %1
   259                              <2> 	__prtch 20h
   260                              <3>  stkopen 1
   261 00000031 83EC01              <4>  sub word sp, %1
   262 00000034 54                  <4>  push sp
   263 00000035 5D                  <4>  pop bp
   264 00000036 C6460020            <3>  mov byte [ bp ], %1
   265 0000003A E81104              <3>  call proc_prtch
   266                              <3>  stkclose 1
   267 0000003D 83C401              <4>  add word sp, %1
   268 00000040 58                  <2> 	pop ax
   269                              <2> 	__prtsubbin8 ah,1,5
   270                              <3>  stkopen 3
   271 00000041 83EC03              <4>  sub word sp, %1
   272 00000044 54                  <4>  push sp
   273 00000045 5D                  <4>  pop bp
   274 00000046 886600              <3>  mov byte [bp+0],%1
   275 00000049 C6460101            <3>  mov byte [bp+1],%2
   276 0000004D C6460205            <3>  mov byte [bp+2],%3
   277 00000051 E83D01              <3>  call proc_prtsubbin8
   278                              <3>  stkclose 3
   279 00000054 83C403              <4>  add word sp, %1
   280 00000057 58                  <2> 	pop ax
   281                              <2> 	__prtsubbin8 ah,5,8
   282                              <3>  stkopen 3
   283 00000058 83EC03              <4>  sub word sp, %1
   284 0000005B 54                  <4>  push sp
   285 0000005C 5D                  <4>  pop bp
   286 0000005D 886600              <3>  mov byte [bp+0],%1
   287 00000060 C6460105            <3>  mov byte [bp+1],%2
   288 00000064 C6460208            <3>  mov byte [bp+2],%3
   289 00000068 E82601              <3>  call proc_prtsubbin8
   290                              <3>  stkclose 3
   291 0000006B 83C403              <4>  add word sp, %1
   292                              <2> 	
   293 0000006E 58                  <2> 	pop ax
   294                              <2> 	__prtsubbin8 al,0,1
   295                              <3>  stkopen 3
   296 0000006F 83EC03              <4>  sub word sp, %1
   297 00000072 54                  <4>  push sp
   298 00000073 5D                  <4>  pop bp
   299 00000074 884600              <3>  mov byte [bp+0],%1
   300 00000077 C6460100            <3>  mov byte [bp+1],%2
   301 0000007B C6460201            <3>  mov byte [bp+2],%3
   302 0000007F E80F01              <3>  call proc_prtsubbin8
   303                              <3>  stkclose 3
   304 00000082 83C403              <4>  add word sp, %1
   305                              <2> 	__prtch 20h
   306                              <3>  stkopen 1
   307 00000085 83EC01              <4>  sub word sp, %1
   308 00000088 54                  <4>  push sp
   309 00000089 5D                  <4>  pop bp
   310 0000008A C6460020            <3>  mov byte [ bp ], %1
   311 0000008E E8BD03              <3>  call proc_prtch
   312                              <3>  stkclose 1
   313 00000091 83C401              <4>  add word sp, %1
   314                              <2> 	__prtch 20h
   315                              <3>  stkopen 1
   316 00000094 83EC01              <4>  sub word sp, %1
   317 00000097 54                  <4>  push sp
   318 00000098 5D                  <4>  pop bp
   319 00000099 C6460020            <3>  mov byte [ bp ], %1
   320 0000009D E8AE03              <3>  call proc_prtch
   321                              <3>  stkclose 1
   322 000000A0 83C401              <4>  add word sp, %1
   323 000000A3 58                  <2> 	pop ax
   324                              <2> 	__prtsubbin8 al,1,4
   325                              <3>  stkopen 3
   326 000000A4 83EC03              <4>  sub word sp, %1
   327 000000A7 54                  <4>  push sp
   328 000000A8 5D                  <4>  pop bp
   329 000000A9 884600              <3>  mov byte [bp+0],%1
   330 000000AC C6460101            <3>  mov byte [bp+1],%2
   331 000000B0 C6460204            <3>  mov byte [bp+2],%3
   332 000000B4 E8DA00              <3>  call proc_prtsubbin8
   333                              <3>  stkclose 3
   334 000000B7 83C403              <4>  add word sp, %1
   335                              <2> 	__prtch 20h
   336                              <3>  stkopen 1
   337 000000BA 83EC01              <4>  sub word sp, %1
   338 000000BD 54                  <4>  push sp
   339 000000BE 5D                  <4>  pop bp
   340 000000BF C6460020            <3>  mov byte [ bp ], %1
   341 000000C3 E88803              <3>  call proc_prtch
   342                              <3>  stkclose 1
   343 000000C6 83C401              <4>  add word sp, %1
   344 000000C9 58                  <2> 	pop ax
   345                              <2> 	__prtsubbin8 al,4,8
   346                              <3>  stkopen 3
   347 000000CA 83EC03              <4>  sub word sp, %1
   348 000000CD 54                  <4>  push sp
   349 000000CE 5D                  <4>  pop bp
   350 000000CF 884600              <3>  mov byte [bp+0],%1
   351 000000D2 C6460104            <3>  mov byte [bp+1],%2
   352 000000D6 C6460208            <3>  mov byte [bp+2],%3
   353 000000DA E8B400              <3>  call proc_prtsubbin8
   354                              <3>  stkclose 3
   355 000000DD 83C403              <4>  add word sp, %1
   356                              <2> 	__prtch 20h
   357                              <3>  stkopen 1
   358 000000E0 83EC01              <4>  sub word sp, %1
   359 000000E3 54                  <4>  push sp
   360 000000E4 5D                  <4>  pop bp
   361 000000E5 C6460020            <3>  mov byte [ bp ], %1
   362 000000E9 E86203              <3>  call proc_prtch
   363                              <3>  stkclose 1
   364 000000EC 83C401              <4>  add word sp, %1
   365                              <2> 	
   366 000000EF 89E0                <2> 	mov ax,sp
   367 000000F1 89C5                <2> 	mov bp,ax			
   368 000000F3 8B4604              <2> 	mov ax,[bp+4]
   369 000000F6 50                  <2> 	push ax
   370 000000F7 50                  <2> 	push ax
   371 000000F8 50                  <2> 	push ax
   372                              <2> 	
   373                              <2> 	__prtsubbin8 ah,0,4
   374                              <3>  stkopen 3
   375 000000F9 83EC03              <4>  sub word sp, %1
   376 000000FC 54                  <4>  push sp
   377 000000FD 5D                  <4>  pop bp
   378 000000FE 886600              <3>  mov byte [bp+0],%1
   379 00000101 C6460100            <3>  mov byte [bp+1],%2
   380 00000105 C6460204            <3>  mov byte [bp+2],%3
   381 00000109 E88500              <3>  call proc_prtsubbin8
   382                              <3>  stkclose 3
   383 0000010C 83C403              <4>  add word sp, %1
   384                              <2> 	__prtch 20h
   385                              <3>  stkopen 1
   386 0000010F 83EC01              <4>  sub word sp, %1
   387 00000112 54                  <4>  push sp
   388 00000113 5D                  <4>  pop bp
   389 00000114 C6460020            <3>  mov byte [ bp ], %1
   390 00000118 E83303              <3>  call proc_prtch
   391                              <3>  stkclose 1
   392 0000011B 83C401              <4>  add word sp, %1
   393 0000011E 58                  <2> 	pop ax
   394                              <2> 	__prtsubbin8 ah,4,8
   395                              <3>  stkopen 3
   396 0000011F 83EC03              <4>  sub word sp, %1
   397 00000122 54                  <4>  push sp
   398 00000123 5D                  <4>  pop bp
   399 00000124 886600              <3>  mov byte [bp+0],%1
   400 00000127 C6460104            <3>  mov byte [bp+1],%2
   401 0000012B C6460208            <3>  mov byte [bp+2],%3
   402 0000012F E85F00              <3>  call proc_prtsubbin8
   403                              <3>  stkclose 3
   404 00000132 83C403              <4>  add word sp, %1
   405                              <2> 	__prtch 20h
   406                              <3>  stkopen 1
   407 00000135 83EC01              <4>  sub word sp, %1
   408 00000138 54                  <4>  push sp
   409 00000139 5D                  <4>  pop bp
   410 0000013A C6460020            <3>  mov byte [ bp ], %1
   411 0000013E E80D03              <3>  call proc_prtch
   412                              <3>  stkclose 1
   413 00000141 83C401              <4>  add word sp, %1
   414                              <2> 	
   415 00000144 58                  <2> 	pop ax
   416                              <2> 	__prtsubbin8 al,0,4
   417                              <3>  stkopen 3
   418 00000145 83EC03              <4>  sub word sp, %1
   419 00000148 54                  <4>  push sp
   420 00000149 5D                  <4>  pop bp
   421 0000014A 884600              <3>  mov byte [bp+0],%1
   422 0000014D C6460100            <3>  mov byte [bp+1],%2
   423 00000151 C6460204            <3>  mov byte [bp+2],%3
   424 00000155 E83900              <3>  call proc_prtsubbin8
   425                              <3>  stkclose 3
   426 00000158 83C403              <4>  add word sp, %1
   427                              <2> 	__prtch 20h
   428                              <3>  stkopen 1
   429 0000015B 83EC01              <4>  sub word sp, %1
   430 0000015E 54                  <4>  push sp
   431 0000015F 5D                  <4>  pop bp
   432 00000160 C6460020            <3>  mov byte [ bp ], %1
   433 00000164 E8E702              <3>  call proc_prtch
   434                              <3>  stkclose 1
   435 00000167 83C401              <4>  add word sp, %1
   436 0000016A 58                  <2> 	pop ax
   437                              <2> 	__prtsubbin8 al,4,8
   438                              <3>  stkopen 3
   439 0000016B 83EC03              <4>  sub word sp, %1
   440 0000016E 54                  <4>  push sp
   441 0000016F 5D                  <4>  pop bp
   442 00000170 884600              <3>  mov byte [bp+0],%1
   443 00000173 C6460104            <3>  mov byte [bp+1],%2
   444 00000177 C6460208            <3>  mov byte [bp+2],%3
   445 0000017B E81300              <3>  call proc_prtsubbin8
   446                              <3>  stkclose 3
   447 0000017E 83C403              <4>  add word sp, %1
   448                              <2> 	__prtch 20h
   449                              <3>  stkopen 1
   450 00000181 83EC01              <4>  sub word sp, %1
   451 00000184 54                  <4>  push sp
   452 00000185 5D                  <4>  pop bp
   453 00000186 C6460020            <3>  mov byte [ bp ], %1
   454 0000018A E8C102              <3>  call proc_prtch
   455                              <3>  stkclose 1
   456 0000018D 83C401              <4>  add word sp, %1
   457                              <2> 	
   458 00000190 C3                  <2> 	ret
   459                              <2> 	
   460                              <2> proc_prtsubbin8:
   461 00000191 89E0                <2> 	mov ax,sp
   462 00000193 89C5                <2> 	mov bp,ax
   463                              <2> 	
   464 00000195 8A4602              <2> 	mov al,[bp+2]
   465 00000198 50                  <2> 	push ax
   466                              <2> 	
   467 00000199 8A4E03              <2> 	mov cl,[bp+3]
   468 0000019C 8A6E04              <2> 	mov ch,[bp+4]
   469 0000019F 80FD08              <2> 	cmp ch,8
   470 000001A2 7602                <2> 	jbe .l1	
   471 000001A4 B508                <2> 		mov ch,8
   472                              <2> 	.l1:		
   473 000001A6 38E9                <2> 		cmp cl,ch		
   474 000001A8 731D                <2> 		jae .l2
   475                              <2> 		
   476 000001AA 58                  <2> 		pop ax
   477 000001AB 50                  <2> 		push ax
   478 000001AC D2E0                <2> 		shl al,cl
   479 000001AE C0E807              <2> 		shr al,7		
   480 000001B1 0430                <2> 		add al,30h
   481                              <2> 		
   482 000001B3 51                  <2> 		push cx
   483                              <2> 		__prtch al
   484                              <3>  stkopen 1
   485 000001B4 83EC01              <4>  sub word sp, %1
   486 000001B7 54                  <4>  push sp
   487 000001B8 5D                  <4>  pop bp
   488 000001B9 884600              <3>  mov byte [ bp ], %1
   489 000001BC E88F02              <3>  call proc_prtch
   490                              <3>  stkclose 1
   491 000001BF 83C401              <4>  add word sp, %1
   492 000001C2 59                  <2> 		pop cx
   493                              <2> 		
   494 000001C3 FEC1                <2> 		inc cl
   495 000001C5 EBDF                <2> 		jmp .l1
   496                              <2> 	.l2:	
   497 000001C7 58                  <2> 	pop ax
   498                              <2> 	
   499 000001C8 C3                  <2> 	ret
   500                              <2> 	
   501                              <2> proc_prtbin16:
   502 000001C9 89E0                <2> 	mov ax,sp
   503 000001CB 89C5                <2> 	mov bp,ax
   504                              <2> 		
   505 000001CD 8A7E04              <2> 	mov bh, [bp+4]
   506 000001D0 B300                <2> 	mov bl,0
   507 000001D2 B201                <2> 	mov dl,TRUE
   508 000001D4 30ED                <2> 	xor ch,ch
   509 000001D6 B102                <2> 	mov cl,2
   510                              <2> 	.l1:
   511 000001D8 80F900              <2> 		cmp cl,0
   512 000001DB 744B                <2> 		jz .l2		
   513                              <2> 		
   514 000001DD 55                  <2> 		push bp
   515 000001DE 01CD                <2> 		add bp,cx
   516 000001E0 45                  <2> 		inc bp
   517                              <2> 		
   518 000001E1 0A5E00              <2> 		or byte bl, [bp]
   519 000001E4 08FB                <2> 		or byte bl, bh
   520 000001E6 743B                <2> 		jz .prted											
   521 000001E8 53                  <2> 			push bx
   522 000001E9 51                  <2> 			push cx	
   523 000001EA 80FA01              <2> 			cmp dl, TRUE
   524 000001ED 7402                <2> 			je .first
   525 000001EF EB10                <2> 			jmp .nfirst
   526                              <2> 			.first:
   527 000001F1 B200                <2> 				mov dl, FALSE
   528 000001F3 52                  <2> 				push dx
   529                              <2> 				
   530 000001F4 88FC                <2> 				mov ah, bh
   531 000001F6 8A4600              <2> 				mov byte al, [bp]
   532 000001F9 50                  <2> 				push ax
   533 000001FA E84000              <2> 				call proc_prtbin8
   534 000001FD 58                  <2> 				pop ax
   535                              <2> 							
   536 000001FE 5A                  <2> 				pop dx
   537 000001FF EB0C                <2> 				jmp .endfirst
   538                              <2> 			.nfirst:
   539 00000201 52                  <2> 				push dx
   540                              <2> 				
   541 00000202 B401                <2> 				mov ah, TRUE
   542 00000204 8A4600              <2> 				mov byte al, [bp]
   543 00000207 50                  <2> 				push ax
   544 00000208 E83200              <2> 				call proc_prtbin8
   545 0000020B 58                  <2> 				pop ax
   546                              <2> 								
   547 0000020C 5A                  <2> 				pop dx
   548                              <2> 			.endfirst:	
   549 0000020D 59                  <2> 			pop cx
   550 0000020E 5B                  <2> 			pop bx		
   551                              <2> 			
   552 0000020F 80F901              <2> 			cmp cl,1
   553 00000212 760F                <2> 			jbe .spaceprted
   554                              <2> 				__prtch 20h
   555                              <3>  stkopen 1
   556 00000214 83EC01              <4>  sub word sp, %1
   557 00000217 54                  <4>  push sp
   558 00000218 5D                  <4>  pop bp
   559 00000219 C6460020            <3>  mov byte [ bp ], %1
   560 0000021D E82E02              <3>  call proc_prtch
   561                              <3>  stkclose 1
   562 00000220 83C401              <4>  add word sp, %1
   563                              <2> 			.spaceprted:
   564                              <2> 		.prted:
   565                              <2> 		
   566 00000223 5D                  <2> 		pop bp
   567                              <2> 		
   568 00000224 FEC9                <2> 		dec cl
   569 00000226 EBB0                <2> 		jmp .l1
   570                              <2> 	.l2:
   571                              <2> 	
   572 00000228 80FB00              <2> 	cmp bl,0
   573 0000022B 750F                <2> 	jnz .end
   574                              <2> 		__prtch 30h
   575                              <3>  stkopen 1
   576 0000022D 83EC01              <4>  sub word sp, %1
   577 00000230 54                  <4>  push sp
   578 00000231 5D                  <4>  pop bp
   579 00000232 C6460030            <3>  mov byte [ bp ], %1
   580 00000236 E81502              <3>  call proc_prtch
   581                              <3>  stkclose 1
   582 00000239 83C401              <4>  add word sp, %1
   583                              <2> 	.end:
   584                              <2> 	
   585 0000023C C3                  <2> 	ret	
   586                              <2> 	
   587                              <2> proc_prtbin8:
   588 0000023D 89E0                <2> 	mov ax,sp
   589 0000023F 89C5                <2> 	mov bp,ax
   590 00000241 8A4602              <2> 	mov byte al, [bp+2]
   591 00000244 3C00                <2> 	cmp al, 0
   592 00000246 0F858700            <2> 	jnz .nzero
   593                              <2> 		__prtch 30h
   594                              <3>  stkopen 1
   595 0000024A 83EC01              <4>  sub word sp, %1
   596 0000024D 54                  <4>  push sp
   597 0000024E 5D                  <4>  pop bp
   598 0000024F C6460030            <3>  mov byte [ bp ], %1
   599 00000253 E8F801              <3>  call proc_prtch
   600                              <3>  stkclose 1
   601 00000256 83C401              <4>  add word sp, %1
   602                              <2> 		
   603 00000259 89E0                <2> 		mov ax,sp
   604 0000025B 89C5                <2> 		mov bp,ax
   605 0000025D 8A4603              <2> 		mov byte al, [bp+3]		
   606 00000260 3C00                <2> 		cmp al, FALSE
   607 00000262 0F84C500            <2> 		je .end
   608                              <2> 			__prtch 30h
   609                              <3>  stkopen 1
   610 00000266 83EC01              <4>  sub word sp, %1
   611 00000269 54                  <4>  push sp
   612 0000026A 5D                  <4>  pop bp
   613 0000026B C6460030            <3>  mov byte [ bp ], %1
   614 0000026F E8DC01              <3>  call proc_prtch
   615                              <3>  stkclose 1
   616 00000272 83C401              <4>  add word sp, %1
   617                              <2> 			__prtch 30h
   618                              <3>  stkopen 1
   619 00000275 83EC01              <4>  sub word sp, %1
   620 00000278 54                  <4>  push sp
   621 00000279 5D                  <4>  pop bp
   622 0000027A C6460030            <3>  mov byte [ bp ], %1
   623 0000027E E8CD01              <3>  call proc_prtch
   624                              <3>  stkclose 1
   625 00000281 83C401              <4>  add word sp, %1
   626                              <2> 			__prtch 30h
   627                              <3>  stkopen 1
   628 00000284 83EC01              <4>  sub word sp, %1
   629 00000287 54                  <4>  push sp
   630 00000288 5D                  <4>  pop bp
   631 00000289 C6460030            <3>  mov byte [ bp ], %1
   632 0000028D E8BE01              <3>  call proc_prtch
   633                              <3>  stkclose 1
   634 00000290 83C401              <4>  add word sp, %1
   635                              <2> 			__prtch 30h
   636                              <3>  stkopen 1
   637 00000293 83EC01              <4>  sub word sp, %1
   638 00000296 54                  <4>  push sp
   639 00000297 5D                  <4>  pop bp
   640 00000298 C6460030            <3>  mov byte [ bp ], %1
   641 0000029C E8AF01              <3>  call proc_prtch
   642                              <3>  stkclose 1
   643 0000029F 83C401              <4>  add word sp, %1
   644                              <2> 			__prtch 30h
   645                              <3>  stkopen 1
   646 000002A2 83EC01              <4>  sub word sp, %1
   647 000002A5 54                  <4>  push sp
   648 000002A6 5D                  <4>  pop bp
   649 000002A7 C6460030            <3>  mov byte [ bp ], %1
   650 000002AB E8A001              <3>  call proc_prtch
   651                              <3>  stkclose 1
   652 000002AE 83C401              <4>  add word sp, %1
   653                              <2> 			__prtch 30h
   654                              <3>  stkopen 1
   655 000002B1 83EC01              <4>  sub word sp, %1
   656 000002B4 54                  <4>  push sp
   657 000002B5 5D                  <4>  pop bp
   658 000002B6 C6460030            <3>  mov byte [ bp ], %1
   659 000002BA E89101              <3>  call proc_prtch
   660                              <3>  stkclose 1
   661 000002BD 83C401              <4>  add word sp, %1
   662                              <2> 			__prtch 30h
   663                              <3>  stkopen 1
   664 000002C0 83EC01              <4>  sub word sp, %1
   665 000002C3 54                  <4>  push sp
   666 000002C4 5D                  <4>  pop bp
   667 000002C5 C6460030            <3>  mov byte [ bp ], %1
   668 000002C9 E88201              <3>  call proc_prtch
   669                              <3>  stkclose 1
   670 000002CC 83C401              <4>  add word sp, %1
   671 000002CF EB5A                <2> 			jmp .end		
   672                              <2> 	.nzero:
   673                              <2> 
   674 000002D1 B000                <2> 	mov byte al, FALSE
   675 000002D3 50                  <2> 	push ax
   676                              <2> 
   677 000002D4 89E0                <2> 	mov ax,sp
   678 000002D6 89C5                <2> 	mov bp,ax
   679 000002D8 8A5E04              <2> 	mov byte bl, [bp+4]
   680 000002DB B100                <2> 	mov cl,0
   681                              <2> 	.l1:
   682 000002DD 80F908              <2> 		cmp cl,8
   683 000002E0 7348                <2> 		jae .l2
   684                              <2> 		
   685 000002E2 88C8                <2> 		mov al,cl
   686                              <2> 		
   687 000002E4 88DA                <2> 		mov dl, bl		
   688                              <2> 		
   689                              <2> 		.l1.1:
   690 000002E6 3C00                <2> 			cmp al,0
   691 000002E8 7406                <2> 			jz .l1.2
   692                              <2> 							
   693 000002EA D0E2                <2> 			shl dl,1
   694                              <2> 			
   695 000002EC FEC8                <2> 			dec al
   696 000002EE EBF6                <2> 			jmp .l1.1
   697                              <2> 		.l1.2:
   698                              <2> 						
   699 000002F0 C0EA07              <2> 		shr dl,7
   700                              <2> 		
   701 000002F3 89E0                <2> 		mov ax,sp
   702 000002F5 89C5                <2> 		mov bp,ax			
   703 000002F7 8A4605              <2> 		mov byte al, [bp+5]
   704 000002FA 3C01                <2> 		cmp al, TRUE
   705 000002FC 7413                <2> 		je .endzero		
   706 000002FE 80FA00              <2> 			cmp dl,0
   707 00000301 7402                <2> 			jz .zero
   708 00000303 EB08                <2> 			jmp .notzero
   709                              <2> 			.zero:
   710 00000305 58                  <2> 				pop ax
   711 00000306 50                  <2> 				push ax
   712 00000307 3C01                <2> 				cmp al, TRUE				
   713 00000309 7406                <2> 				je .endzero
   714 0000030B EB19                <2> 				jmp .inc
   715                              <2> 			.notzero:
   716 0000030D 58                  <2> 				pop ax
   717 0000030E B001                <2> 				mov al, TRUE	
   718 00000310 50                  <2> 				push ax				
   719                              <2> 		.endzero:
   720                              <2> 									
   721 00000311 80C230              <2> 		add dl,30h
   722                              <2> 
   723 00000314 51                  <2> 		push cx
   724 00000315 52                  <2> 		push dx
   725                              <2> 		__prtch dl
   726                              <3>  stkopen 1
   727 00000316 83EC01              <4>  sub word sp, %1
   728 00000319 54                  <4>  push sp
   729 0000031A 5D                  <4>  pop bp
   730 0000031B 885600              <3>  mov byte [ bp ], %1
   731 0000031E E82D01              <3>  call proc_prtch
   732                              <3>  stkclose 1
   733 00000321 83C401              <4>  add word sp, %1
   734 00000324 5A                  <2> 		pop dx
   735 00000325 59                  <2> 		pop cx	
   736                              <2> 
   737                              <2> 		.inc:
   738                              <2> 	
   739 00000326 FEC1                <2> 		inc cl
   740 00000328 EBB3                <2> 		jmp .l1	
   741                              <2> 	.l2:
   742                              <2> 	
   743 0000032A 58                  <2> 	pop ax
   744                              <2> 	
   745                              <2> 	.end:
   746                              <2> 	
   747 0000032B C3                  <2> 	ret	
   748                              <2> 
   749                              <2> proc_prthex16:
   750 0000032C 89E0                <2> 	mov ax,sp
   751 0000032E 89C5                <2> 	mov bp,ax
   752                              <2> 
   753 00000330 8A7E04              <2> 	mov byte bh, [bp+4]		
   754 00000333 B300                <2> 	mov bl,0	
   755 00000335 B201                <2> 	mov dl,TRUE
   756 00000337 30ED                <2> 	xor ch,ch
   757 00000339 B102                <2> 	mov cl, 2	
   758                              <2> 	.l1:			
   759 0000033B 80F900              <2> 		cmp cl,0
   760 0000033E 7437                <2> 		jz .l2
   761                              <2> 							
   762 00000340 55                  <2> 		push bp		
   763 00000341 01CD                <2> 		add bp,cx
   764 00000343 45                  <2> 		inc bp		
   765                              <2> 		
   766 00000344 0A5E00              <2> 		or byte bl, [bp]
   767 00000347 08FB                <2> 		or byte bl, bh
   768 00000349 7427                <2> 		jz .prted							
   769 0000034B 53                  <2> 			push bx
   770 0000034C 51                  <2> 			push cx	
   771 0000034D 80FA01              <2> 			cmp dl, TRUE
   772 00000350 7402                <2> 			je .first
   773 00000352 EB10                <2> 			jmp .nfirst
   774                              <2> 			.first:
   775 00000354 B200                <2> 				mov dl, FALSE
   776 00000356 52                  <2> 				push dx
   777                              <2> 				
   778 00000357 88FC                <2> 				mov ah, bh
   779 00000359 8A4600              <2> 				mov byte al, [bp]
   780 0000035C 50                  <2> 				push ax
   781 0000035D E82C00              <2> 				call proc_prthex8
   782 00000360 58                  <2> 				pop ax
   783                              <2> 							
   784 00000361 5A                  <2> 				pop dx
   785 00000362 EB0C                <2> 				jmp .endfirst
   786                              <2> 			.nfirst:
   787 00000364 52                  <2> 				push dx
   788                              <2> 				
   789 00000365 B401                <2> 				mov ah, TRUE
   790 00000367 8A4600              <2> 				mov byte al, [bp]
   791 0000036A 50                  <2> 				push ax
   792 0000036B E81E00              <2> 				call proc_prthex8
   793 0000036E 58                  <2> 				pop ax
   794                              <2> 								
   795 0000036F 5A                  <2> 				pop dx
   796                              <2> 			.endfirst:	
   797 00000370 59                  <2> 			pop cx
   798 00000371 5B                  <2> 			pop bx		
   799                              <2> 		.prted:
   800                              <2> 		
   801 00000372 5D                  <2> 		pop bp
   802                              <2> 	
   803 00000373 FEC9                <2> 		dec cl
   804 00000375 EBC4                <2> 		jmp .l1		
   805                              <2> 	.l2:
   806                              <2> 	
   807 00000377 80FB00              <2> 	cmp bl,0
   808 0000037A 750F                <2> 	jnz .end
   809                              <2> 		__prtch 30h
   810                              <3>  stkopen 1
   811 0000037C 83EC01              <4>  sub word sp, %1
   812 0000037F 54                  <4>  push sp
   813 00000380 5D                  <4>  pop bp
   814 00000381 C6460030            <3>  mov byte [ bp ], %1
   815 00000385 E8C600              <3>  call proc_prtch
   816                              <3>  stkclose 1
   817 00000388 83C401              <4>  add word sp, %1
   818                              <2> 	.end:
   819                              <2> 	
   820 0000038B C3                  <2> 	ret
   821                              <2> 	
   822                              <2> proc_prthex8:
   823 0000038C 89E0                <2> 	mov ax,sp
   824 0000038E 89C5                <2> 	mov bp,ax
   825 00000390 8A4602              <2> 	mov byte al, [bp+2]
   826 00000393 3C00                <2> 	cmp al, 0
   827 00000395 752B                <2> 	jnz .nzero
   828                              <2> 		__prtch 30h
   829                              <3>  stkopen 1
   830 00000397 83EC01              <4>  sub word sp, %1
   831 0000039A 54                  <4>  push sp
   832 0000039B 5D                  <4>  pop bp
   833 0000039C C6460030            <3>  mov byte [ bp ], %1
   834 000003A0 E8AB00              <3>  call proc_prtch
   835                              <3>  stkclose 1
   836 000003A3 83C401              <4>  add word sp, %1
   837                              <2> 		
   838 000003A6 89E0                <2> 		mov ax,sp
   839 000003A8 89C5                <2> 		mov bp,ax
   840 000003AA 8A4603              <2> 		mov byte al, [bp+3]		
   841 000003AD 3C00                <2> 		cmp al, FALSE
   842 000003AF 7476                <2> 		je .end
   843                              <2> 			__prtch 30h
   844                              <3>  stkopen 1
   845 000003B1 83EC01              <4>  sub word sp, %1
   846 000003B4 54                  <4>  push sp
   847 000003B5 5D                  <4>  pop bp
   848 000003B6 C6460030            <3>  mov byte [ bp ], %1
   849 000003BA E89100              <3>  call proc_prtch
   850                              <3>  stkclose 1
   851 000003BD 83C401              <4>  add word sp, %1
   852 000003C0 EB65                <2> 			jmp .end		
   853                              <2> 	.nzero:
   854                              <2> 
   855 000003C2 B000                <2> 	mov byte al, FALSE
   856 000003C4 50                  <2> 	push ax
   857                              <2> 
   858 000003C5 89E0                <2> 	mov ax,sp
   859 000003C7 89C5                <2> 	mov bp,ax
   860 000003C9 8A5E04              <2> 	mov byte bl, [bp+4]
   861 000003CC B102                <2> 	mov cl,2
   862                              <2> 	.l1:
   863 000003CE 80F900              <2> 		cmp cl,0
   864 000003D1 7453                <2> 		jz .l2
   865                              <2> 		
   866 000003D3 B002                <2> 		mov al,2
   867 000003D5 28C8                <2> 		sub al,cl
   868                              <2> 		
   869 000003D7 88DA                <2> 		mov dl, bl	
   870                              <2> 		
   871                              <2> 		.l1.1:
   872 000003D9 3C00                <2> 			cmp al,0
   873 000003DB 7407                <2> 			jz .l1.2
   874                              <2> 							
   875 000003DD C0E204              <2> 			shl dl,4
   876                              <2> 			
   877 000003E0 FEC8                <2> 			dec al
   878 000003E2 EBF5                <2> 			jmp .l1.1
   879                              <2> 		.l1.2:
   880                              <2> 						
   881 000003E4 C0EA04              <2> 		shr dl,4
   882                              <2> 
   883 000003E7 89E0                <2> 		mov ax,sp
   884 000003E9 89C5                <2> 		mov bp,ax			
   885 000003EB 8A4605              <2> 		mov byte al, [bp+5]
   886 000003EE 3C01                <2> 		cmp al, TRUE
   887 000003F0 7413                <2> 		je .endzero		
   888 000003F2 80FA00              <2> 			cmp dl,0
   889 000003F5 7402                <2> 			jz .zero
   890 000003F7 EB08                <2> 			jmp .notzero
   891                              <2> 			.zero:
   892 000003F9 58                  <2> 				pop ax
   893 000003FA 50                  <2> 				push ax
   894 000003FB 3C01                <2> 				cmp al, TRUE				
   895 000003FD 7406                <2> 				je .endzero
   896 000003FF EB21                <2> 				jmp .dec
   897                              <2> 			.notzero:
   898 00000401 58                  <2> 				pop ax
   899 00000402 B001                <2> 				mov al, TRUE	
   900 00000404 50                  <2> 				push ax				
   901                              <2> 		.endzero:
   902                              <2> 						
   903 00000405 80FA09              <2> 		cmp dl,9
   904 00000408 7603                <2> 		jbe .endsumseven  		
   905 0000040A 80C207              <2> 		add dl,7
   906                              <2> 		.endsumseven:
   907                              <2> 						
   908 0000040D 80C230              <2> 		add dl,30h
   909                              <2> 
   910 00000410 51                  <2> 		push cx
   911 00000411 52                  <2> 		push dx
   912                              <2> 		__prtch dl
   913                              <3>  stkopen 1
   914 00000412 83EC01              <4>  sub word sp, %1
   915 00000415 54                  <4>  push sp
   916 00000416 5D                  <4>  pop bp
   917 00000417 885600              <3>  mov byte [ bp ], %1
   918 0000041A E83100              <3>  call proc_prtch
   919                              <3>  stkclose 1
   920 0000041D 83C401              <4>  add word sp, %1
   921 00000420 5A                  <2> 		pop dx
   922 00000421 59                  <2> 		pop cx	
   923                              <2> 
   924                              <2> 		.dec:
   925                              <2> 	
   926 00000422 FEC9                <2> 		dec cl
   927 00000424 EBA8                <2> 		jmp .l1	
   928                              <2> 	.l2:
   929                              <2> 	
   930 00000426 58                  <2> 	pop ax
   931                              <2> 	
   932                              <2> 	.end:
   933                              <2> 	
   934 00000427 C3                  <2> 	ret
   935                              <2> 
   936                              <2> proc_prtstr:
   937 00000428 89E0                <2> 	mov ax,sp
   938 0000042A 89C5                <2> 	mov bp,ax
   939                              <2> 	
   940 0000042C 8B4602              <2> 	mov ax, [bp+2]
   941 0000042F 8ED8                <2> 	mov ds, ax
   942 00000431 8B7604              <2> 	mov si, [bp+4]						
   943                              <2> 	.loop:
   944 00000434 AC                  <2> 		lodsb
   945 00000435 3C00                <2> 		cmp al,0h
   946 00000437 7414                <2> 		jz .done
   947                              <2> 		
   948 00000439 1E                  <2> 		push ds
   949 0000043A 56                  <2> 		push si
   950                              <2> 					
   951                              <2> 		__prtch al										
   952                              <3>  stkopen 1
   953 0000043B 83EC01              <4>  sub word sp, %1
   954 0000043E 54                  <4>  push sp
   955 0000043F 5D                  <4>  pop bp
   956 00000440 884600              <3>  mov byte [ bp ], %1
   957 00000443 E80800              <3>  call proc_prtch
   958                              <3>  stkclose 1
   959 00000446 83C401              <4>  add word sp, %1
   960                              <2> 									
   961 00000449 5E                  <2> 		pop si
   962 0000044A 1F                  <2> 		pop ds
   963                              <2> 											
   964 0000044B EBE7                <2> 		jmp .loop 
   965                              <2> 	.done:
   966                              <2> 	
   967 0000044D C3                  <2> 	ret	
   968                              <2> 	
   969                              <2> proc_prtch:
   970 0000044E 89E0                <2> 	mov ax,sp
   971 00000450 89C5                <2> 	mov bp,ax
   972                              <2> 
   973 00000452 8A4602              <2> 	mov al,[bp+2]
   974 00000455 B40E                <2> 	mov ah,0Eh
   975 00000457 B700                <2> 	mov bh,00h
   976 00000459 CD10                <2> 	int 10h	
   977                              <2> 	
   978 0000045B C3                  <2> 	ret
   979                              <2> 
   980                              <2> proc_prtln:
   981 0000045C B403                <2> 	mov ah,03h
   982 0000045E B700                <2> 	mov bh,00h
   983 00000460 CD10                <2> 	int 10h
   984                              <2> 	
   985 00000462 B402                <2> 	mov ah,02h
   986 00000464 FEC6                <2> 	inc dh
   987 00000466 B200                <2> 	mov dl,00h
   988 00000468 CD10                <2> 	int 10h	
   989                              <2> 	
   990 0000046A C3                  <2> 	ret
   991                              <2> 	
   992                              <2> %endif
   993                              <1>  	%include "lib/system.mac"
   994                              <2>  
   995                              <2> %ifndef SYSTEM_MAC
   996                              <2>  	%define SYSTEM_MAC
   997                              <2>  	
   998                              <2> 	%ifndef TRUE
   999                              <2> 		%define TRUE 01h
  1000                              <2> 	%endif
  1001                              <2> 	%ifndef FALSE
  1002                              <2> 		%define FALSE 00h
  1003                              <2> 	%endif
  1004                              <2> 	
  1005                              <2> %macro vlodsb 3
  1006                              <2> 	vlodsb cs, %1, %2, %3
  1007                              <2> %endmacro
  1008                              <2> 
  1009                              <2> %macro vstosb 3
  1010                              <2> 	vstosb cs, %1, %2, %3
  1011                              <2> %endmacro
  1012                              <2> 	 	
  1013                              <2> %macro int16toreg 2
  1014                              <2> 	int16toreg cs, %1, %2
  1015                              <2> %endmacro
  1016                              <2> 
  1017                              <2> %macro regtoint16 2
  1018                              <2> 	regtoint16 %1, cs, %2
  1019                              <2> %endmacro
  1020                              <2> 
  1021                              <2> %macro vstosb 4
  1022                              <2> 	push %1
  1023                              <2> 	pop ds
  1024                              <2> 	mov si,%2
  1025                              <2> 	add si,%3
  1026                              <2> 	mov byte [si],%4	
  1027                              <2> %endmacro
  1028                              <2> 
  1029                              <2> %macro vlodsb 4
  1030                              <2> 	push %1
  1031                              <2> 	pop ds
  1032                              <2> 	mov si,%2
  1033                              <2> 	add si,%3
  1034                              <2> 	mov byte %4,[si]	
  1035                              <2> %endmacro 	 
  1036                              <2> 
  1037                              <2> %macro int16toreg 3
  1038                              <2> 	push %2
  1039                              <2> 	push %1
  1040                              <2> 	pop ds
  1041                              <2> 	pop si
  1042                              <2> 	mov word %3,[si]	
  1043                              <2> %endmacro
  1044                              <2> 
  1045                              <2> %macro regtoint16 3
  1046                              <2> 	push %3
  1047                              <2> 	push %2
  1048                              <2> 	pop ds
  1049                              <2> 	pop si
  1050                              <2> 	mov word [si],%1	
  1051                              <2> %endmacro
  1052                              <2> 
  1053                              <2> %macro mov32 2
  1054                              <2> 	mov32 cs, %1, cs, %2
  1055                              <2> %endmacro
  1056                              <2> 
  1057                              <2> %macro mov16 2
  1058                              <2> 	mov16 cs, %1, cs, %2
  1059                              <2> %endmacro
  1060                              <2> 
  1061                              <2> %macro mov32 4
  1062                              <2> 	mov ax,%3
  1063                              <2> 	mov ds,ax
  1064                              <2> 	mov cx,[%4+2]
  1065                              <2> 	mov dx,[%4]
  1066                              <2> 	mov ax,%1
  1067                              <2> 	mov ds,ax
  1068                              <2> 	mov [%2+2],cx
  1069                              <2> 	mov [%2],dx
  1070                              <2> %endmacro
  1071                              <2> 
  1072                              <2> %macro mov16 4
  1073                              <2> 	mov ax,%3
  1074                              <2> 	mov ds,ax
  1075                              <2> 	mov bx,[%4]
  1076                              <2> 	mov ax,%1
  1077                              <2> 	mov ds,ax
  1078                              <2> 	mov [%2],bx
  1079                              <2> %endmacro
  1080                              <2>  	 	
  1081                              <2> %macro mformat 4
  1082                              <2> 	stkopen 8
  1083                              <2> 	mov word [ bp + 0 ], %1
  1084                              <2> 	mov word [ bp + 2 ], %2
  1085                              <2> 	mov word [ bp + 4 ], %3
  1086                              <2> 	mov word [ bp + 6 ], %4
  1087                              <2> 	call kernel_segment:mformat
  1088                              <2> 	stkclose 8
  1089                              <2> %endmacro
  1090                              <2> 
  1091                              <2> %macro malloc 6
  1092                              <2> 	stkopen 0Bh
  1093                              <2> 	mov word [ bp + 4 ], %3
  1094                              <2> 	mov word [ bp + 6 ], %4
  1095                              <2> 	mov word [ bp + 8 ], %5	
  1096                              <2> 	call kernel_segment:malloc
  1097                              <2> 	push sp
  1098                              <2> 	pop bp
  1099                              <2> 	mov word %1, [ bp ]
  1100                              <2> 	mov word %2, [ bp + 2 ]
  1101                              <2> 	mov byte %6, [ bp + 0x0A ]
  1102                              <2> 	stkclose 0Bh
  1103                              <2> %endmacro 	
  1104                              <2> 
  1105                              <2> %macro laddr 2
  1106                              <2> 	laddr %1, %2, %1, %2
  1107                              <2> %endmacro
  1108                              <2> 
  1109                              <2> %macro faddr 2
  1110                              <2> 	faddr %1, %2, %1, %2
  1111                              <2> %endmacro
  1112                              <2>  	
  1113                              <2> %macro laddr 4
  1114                              <2> 	stkopen 8
  1115                              <2> 	mov word [ bp + 4 ], %3
  1116                              <2> 	mov word [ bp + 6 ], %4	
  1117                              <2> 	call kernel_segment:laddr
  1118                              <2> 	push sp
  1119                              <2> 	pop bp
  1120                              <2> 	mov word %1, [ bp + 0 ]
  1121                              <2> 	mov word %2, [ bp + 2 ]	
  1122                              <2> 	stkclose 8
  1123                              <2> %endmacro
  1124                              <2> 
  1125                              <2> %macro faddr 4
  1126                              <2> 	stkopen 8
  1127                              <2> 	mov word [ bp + 4 ], %3
  1128                              <2> 	mov word [ bp + 6 ], %4	
  1129                              <2> 	call kernel_segment:faddr
  1130                              <2> 	push sp
  1131                              <2> 	pop bp
  1132                              <2> 	mov word %1, [ bp + 0 ]
  1133                              <2> 	mov word %2, [ bp + 2 ]	
  1134                              <2> 	stkclose 8
  1135                              <2> %endmacro	
  1136                              <2>  
  1137                              <2> 
  1138                              <2> %macro stkopen 1		
  1139                              <2> 	sub word sp, %1
  1140                              <2> 	push sp
  1141                              <2> 	pop bp
  1142                              <2> %endmacro
  1143                              <2> 
  1144                              <2> %macro stkclose 1
  1145                              <2> 	add word sp, %1
  1146                              <2> %endmacro
  1147                              <2> 
  1148                              <2> %macro stkload 1-* 	
  1149                              <2>  	%rep %0
  1150                              <2>  	 	%rotate -1
  1151                              <2>  		pop %1
  1152                              <2>  	%endrep
  1153                              <2>  	%rep %0
  1154                              <2>  		push %1
  1155                              <2>  		%rotate 1
  1156                              <2>  	%endrep
  1157                              <2> %endmacro
  1158                              <2> 
  1159                              <2> %macro stkpush 1-* 	
  1160                              <2>  	%rep %0
  1161                              <2>  		push %1
  1162                              <2>  		%rotate 1
  1163                              <2>  	%endrep 	
  1164                              <2> %endmacro
  1165                              <2>  
  1166                              <2> %macro stkpop 1-*
  1167                              <2>  	%rep %0
  1168                              <2>  	 	%rotate -1
  1169                              <2>  		pop %1
  1170                              <2>  	%endrep 	 	
  1171                              <2> %endmacro
  1172                              <2> 
  1173                              <2> %macro delay 1
  1174                              <2> 	delay cs, %1
  1175                              <2> %endmacro
  1176                              <2> 
  1177                              <2> %macro delay 2
  1178                              <2> 	mov ax,%1
  1179                              <2> 	mov ds,ax
  1180                              <2> 	
  1181                              <2> 	mov ah,86h
  1182                              <2> 	mov cx,[%2+2]
  1183                              <2> 	mov dx,[%2]
  1184                              <2> 	int 15h	
  1185                              <2> %endmacro
  1186                              <2> 
  1187                              <2> %endif 
  1188                              <1> 
  1189                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1190                              <1> %macro printf 1-*	
  1191                              <1> 	%rep %0					
  1192                              <1> 		__printf %1
  1193                              <1> 		%rotate 1		
  1194                              <1> 	%endrep
  1195                              <1> %endmacro	
  1196                              <1> 
  1197                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1198                              <1> %macro __printf 1
  1199                              <1> 	section .data
  1200                              <1> 		%%str: db %1,0
  1201                              <1> 	section .text
  1202                              <1> 		prtstr cs, %%str				
  1203                              <1> %endmacro
  1204                              <1> 
  1205                              <1> %macro prtstr 2
  1206                              <1> 	stkopen 4
  1207                              <1> 	mov word [bp], %1
  1208                              <1> 	mov word [bp+2], %2
  1209                              <1> 	call proc_prtstr
  1210                              <1> 	stkclose 4
  1211                              <1> %endmacro
  1212                              <1> 
  1213                              <1> 
  1214                              <1> %macro prtIEEE754 1
  1215                              <1> 	prtIEEE754 cs, %1
  1216                              <1> %endmacro
  1217                              <1> 
  1218                              <1> %macro prtIEEE754 2
  1219                              <1> 	stkopen 4
  1220                              <1> 	mov ax,%1
  1221                              <1> 	mov ds,ax
  1222                              <1> 	mov ax, [%2+2]
  1223                              <1> 	mov word [bp+0], ax
  1224                              <1> 	mov ax, [%2]
  1225                              <1> 	mov word [bp+2], ax
  1226                              <1> 	call proc_prtIEEE754
  1227                              <1> 	stkclose 4
  1228                              <1> %endmacro
  1229                              <1> 
  1230                              <1> %macro prtbool 1	
  1231                              <1> 	cmp byte %1, TRUE
  1232                              <1> 	je .true
  1233                              <1> 	jmp .false
  1234                              <1> 	.true:
  1235                              <1> 		prtf "true"
  1236                              <1> 		jmp .endcmp
  1237                              <1> 	.false:
  1238                              <1> 		prtf "false"
  1239                              <1> 	.endcmp:	
  1240                              <1> %endmacro
  1241                              <1> 
  1242                              <1> %macro prtptr 2-3 TRUE
  1243                              <1> 	stkopen 3
  1244                              <1> 	mov word [ bp + 0 ], %2
  1245                              <1> 	mov byte [ bp + 2 ], %3
  1246                              <1> 	prthex16 %1, %3
  1247                              <1> 	writechar ':'
  1248                              <1> 	push sp
  1249                              <1> 	pop bp
  1250                              <1> 	mov word ax, [ bp + 0 ]
  1251                              <1> 	mov byte bl, [ bp + 2 ]
  1252                              <1> 	prthex16 ax, bl
  1253                              <1> 	stkclose 3
  1254                              <1> %endmacro
  1255                              <1> 
  1256                              <1> %macro prtfptr 2-3 TRUE
  1257                              <1> 	stkopen 3
  1258                              <1> 	mov word [ bp + 0 ], %1
  1259                              <1> 	mov byte [ bp + 2 ], %3
  1260                              <1> 	prthex16 %2, %3
  1261                              <1> 	push sp
  1262                              <1> 	pop bp
  1263                              <1> 	mov word ax, [ bp + 0 ]
  1264                              <1> 	mov byte bl, [ bp + 2 ]
  1265                              <1> 	prthex16 ax, bl
  1266                              <1> 	stkclose 3
  1267                              <1> %endmacro
  1268                              <1> 
  1269                              <1> %macro prtbin32 1
  1270                              <1> 	prtbin32 cs, %1
  1271                              <1> %endmacro
  1272                              <1> 
  1273                              <1> %macro prtbin32 2
  1274                              <1> 	mov ax,%1
  1275                              <1> 	mov ds,ax
  1276                              <1> 	mov word ax,[%2+2]
  1277                              <1> 	prtbin16 ax
  1278                              <1> 	prtch 20h
  1279                              <1> 	mov ax,%1
  1280                              <1> 	mov ds,ax
  1281                              <1> 	mov word ax,[%2]
  1282                              <1> 	prtbin16 ax
  1283                              <1> %endmacro
  1284                              <1> 
  1285                              <1> %macro prthex32 1
  1286                              <1> 	prthex32 cs, %1
  1287                              <1> %endmacro
  1288                              <1> 
  1289                              <1> %macro iprthex32 1
  1290                              <1> 	iprthex32 cs, %1
  1291                              <1> %endmacro
  1292                              <1> 
  1293                              <1> %macro prthex32 2
  1294                              <1> 	mov ax,%1
  1295                              <1> 	mov ds,ax
  1296                              <1> 	mov word ax,[%2+2]
  1297                              <1> 	prthex16 ax	
  1298                              <1> 	mov ax,%1
  1299                              <1> 	mov ds,ax
  1300                              <1> 	mov word ax,[%2]
  1301                              <1> 	prthex16 ax
  1302                              <1> %endmacro
  1303                              <1> 
  1304                              <1> %macro iprthex32 2
  1305                              <1> 	mov ax,%1
  1306                              <1> 	mov ds,ax
  1307                              <1> 	mov word ax,[%2+2]
  1308                              <1> 	mov word bx,ax
  1309                              <1> 	and ax,0x7FFF
  1310                              <1> 	push ax
  1311                              <1> 	and bx,0x8000
  1312                              <1> 	cmp bx,0
  1313                              <1> 	jz %%prt
  1314                              <1> 		prtch '-'		
  1315                              <1> 	%%prt:	
  1316                              <1> 	pop ax
  1317                              <1> 	prthex16 ax
  1318                              <1> 	mov ax,%1
  1319                              <1> 	mov ds,ax
  1320                              <1> 	mov word ax,[%2]
  1321                              <1> 	prthex16 ax	
  1322                              <1> %endmacro
  1323                              <1> 
  1324                              <1> %macro prtsubbin8 3
  1325                              <1> 	__prtsubbin8 %1,%2,%3
  1326                              <1> %endmacro
  1327                              <1> 
  1328                              <1> %macro prtbin16 1
  1329                              <1> 	stkopen 3
  1330                              <1> 	mov word [bp], %1
  1331                              <1> 	mov byte [bp+2], TRUE
  1332                              <1> 	call proc_prtbin16
  1333                              <1> 	stkclose 3
  1334                              <1> %endmacro
  1335                              <1> 
  1336                              <1> %macro prtbin8 1
  1337                              <1> 	stkopen 2
  1338                              <1> 	mov byte [bp], %1
  1339                              <1> 	mov byte [bp+1], TRUE
  1340                              <1> 	call proc_prtbin8
  1341                              <1> 	stkclose 2
  1342                              <1> %endmacro
  1343                              <1> 
  1344                              <1> %macro prthex16 1
  1345                              <1> 	stkopen 3
  1346                              <1> 	mov word [bp], %1
  1347                              <1> 	mov byte [bp+2], TRUE
  1348                              <1> 	call proc_prthex16
  1349                              <1> 	stkclose 3
  1350                              <1> %endmacro
  1351                              <1> 
  1352                              <1> %macro prthex8 1
  1353                              <1> 	stkopen 2
  1354                              <1> 	mov byte [bp], %1
  1355                              <1> 	mov byte [bp+1], TRUE
  1356                              <1> 	call proc_prthex8
  1357                              <1> 	stkclose 2
  1358                              <1> %endmacro
  1359                              <1> 
  1360                              <1> %macro prtch 1
  1361                              <1> 	__prtch %1
  1362                              <1> %endmacro
  1363                              <1> 
  1364                              <1> %macro prtln 0
  1365                              <1> 	__prtln
  1366                              <1> %endmacro	
  1367                              <1> 
  1368                              <1> 
  1369                              <1> %macro prtstk 0
  1370                              <1> 	printf "stack ---> "
  1371                              <1> 	mov ax,sp
  1372                              <1> 	prthex16 ax
  1373                              <1> %endmacro  
  1374                              <1> 
  1375                              <1> %endif
  1376                                  %include "lib/system.mac"
  1377                              <1>  
  1378                              <1> %ifndef SYSTEM_MAC
  1379                              <1>  	%define SYSTEM_MAC
  1380                              <1>  	
  1381                              <1> 	%ifndef TRUE
  1382                              <1> 		%define TRUE 01h
  1383                              <1> 	%endif
  1384                              <1> 	%ifndef FALSE
  1385                              <1> 		%define FALSE 00h
  1386                              <1> 	%endif
  1387                              <1> 	
  1388                              <1> %macro vlodsb 3
  1389                              <1> 	vlodsb cs, %1, %2, %3
  1390                              <1> %endmacro
  1391                              <1> 
  1392                              <1> %macro vstosb 3
  1393                              <1> 	vstosb cs, %1, %2, %3
  1394                              <1> %endmacro
  1395                              <1> 	 	
  1396                              <1> %macro int16toreg 2
  1397                              <1> 	int16toreg cs, %1, %2
  1398                              <1> %endmacro
  1399                              <1> 
  1400                              <1> %macro regtoint16 2
  1401                              <1> 	regtoint16 %1, cs, %2
  1402                              <1> %endmacro
  1403                              <1> 
  1404                              <1> %macro vstosb 4
  1405                              <1> 	push %1
  1406                              <1> 	pop ds
  1407                              <1> 	mov si,%2
  1408                              <1> 	add si,%3
  1409                              <1> 	mov byte [si],%4	
  1410                              <1> %endmacro
  1411                              <1> 
  1412                              <1> %macro vlodsb 4
  1413                              <1> 	push %1
  1414                              <1> 	pop ds
  1415                              <1> 	mov si,%2
  1416                              <1> 	add si,%3
  1417                              <1> 	mov byte %4,[si]	
  1418                              <1> %endmacro 	 
  1419                              <1> 
  1420                              <1> %macro int16toreg 3
  1421                              <1> 	push %2
  1422                              <1> 	push %1
  1423                              <1> 	pop ds
  1424                              <1> 	pop si
  1425                              <1> 	mov word %3,[si]	
  1426                              <1> %endmacro
  1427                              <1> 
  1428                              <1> %macro regtoint16 3
  1429                              <1> 	push %3
  1430                              <1> 	push %2
  1431                              <1> 	pop ds
  1432                              <1> 	pop si
  1433                              <1> 	mov word [si],%1	
  1434                              <1> %endmacro
  1435                              <1> 
  1436                              <1> %macro mov32 2
  1437                              <1> 	mov32 cs, %1, cs, %2
  1438                              <1> %endmacro
  1439                              <1> 
  1440                              <1> %macro mov16 2
  1441                              <1> 	mov16 cs, %1, cs, %2
  1442                              <1> %endmacro
  1443                              <1> 
  1444                              <1> %macro mov32 4
  1445                              <1> 	mov ax,%3
  1446                              <1> 	mov ds,ax
  1447                              <1> 	mov cx,[%4+2]
  1448                              <1> 	mov dx,[%4]
  1449                              <1> 	mov ax,%1
  1450                              <1> 	mov ds,ax
  1451                              <1> 	mov [%2+2],cx
  1452                              <1> 	mov [%2],dx
  1453                              <1> %endmacro
  1454                              <1> 
  1455                              <1> %macro mov16 4
  1456                              <1> 	mov ax,%3
  1457                              <1> 	mov ds,ax
  1458                              <1> 	mov bx,[%4]
  1459                              <1> 	mov ax,%1
  1460                              <1> 	mov ds,ax
  1461                              <1> 	mov [%2],bx
  1462                              <1> %endmacro
  1463                              <1>  	 	
  1464                              <1> %macro mformat 4
  1465                              <1> 	stkopen 8
  1466                              <1> 	mov word [ bp + 0 ], %1
  1467                              <1> 	mov word [ bp + 2 ], %2
  1468                              <1> 	mov word [ bp + 4 ], %3
  1469                              <1> 	mov word [ bp + 6 ], %4
  1470                              <1> 	call kernel_segment:mformat
  1471                              <1> 	stkclose 8
  1472                              <1> %endmacro
  1473                              <1> 
  1474                              <1> %macro malloc 6
  1475                              <1> 	stkopen 0Bh
  1476                              <1> 	mov word [ bp + 4 ], %3
  1477                              <1> 	mov word [ bp + 6 ], %4
  1478                              <1> 	mov word [ bp + 8 ], %5	
  1479                              <1> 	call kernel_segment:malloc
  1480                              <1> 	push sp
  1481                              <1> 	pop bp
  1482                              <1> 	mov word %1, [ bp ]
  1483                              <1> 	mov word %2, [ bp + 2 ]
  1484                              <1> 	mov byte %6, [ bp + 0x0A ]
  1485                              <1> 	stkclose 0Bh
  1486                              <1> %endmacro 	
  1487                              <1> 
  1488                              <1> %macro laddr 2
  1489                              <1> 	laddr %1, %2, %1, %2
  1490                              <1> %endmacro
  1491                              <1> 
  1492                              <1> %macro faddr 2
  1493                              <1> 	faddr %1, %2, %1, %2
  1494                              <1> %endmacro
  1495                              <1>  	
  1496                              <1> %macro laddr 4
  1497                              <1> 	stkopen 8
  1498                              <1> 	mov word [ bp + 4 ], %3
  1499                              <1> 	mov word [ bp + 6 ], %4	
  1500                              <1> 	call kernel_segment:laddr
  1501                              <1> 	push sp
  1502                              <1> 	pop bp
  1503                              <1> 	mov word %1, [ bp + 0 ]
  1504                              <1> 	mov word %2, [ bp + 2 ]	
  1505                              <1> 	stkclose 8
  1506                              <1> %endmacro
  1507                              <1> 
  1508                              <1> %macro faddr 4
  1509                              <1> 	stkopen 8
  1510                              <1> 	mov word [ bp + 4 ], %3
  1511                              <1> 	mov word [ bp + 6 ], %4	
  1512                              <1> 	call kernel_segment:faddr
  1513                              <1> 	push sp
  1514                              <1> 	pop bp
  1515                              <1> 	mov word %1, [ bp + 0 ]
  1516                              <1> 	mov word %2, [ bp + 2 ]	
  1517                              <1> 	stkclose 8
  1518                              <1> %endmacro	
  1519                              <1>  
  1520                              <1> 
  1521                              <1> %macro stkopen 1		
  1522                              <1> 	sub word sp, %1
  1523                              <1> 	push sp
  1524                              <1> 	pop bp
  1525                              <1> %endmacro
  1526                              <1> 
  1527                              <1> %macro stkclose 1
  1528                              <1> 	add word sp, %1
  1529                              <1> %endmacro
  1530                              <1> 
  1531                              <1> %macro stkload 1-* 	
  1532                              <1>  	%rep %0
  1533                              <1>  	 	%rotate -1
  1534                              <1>  		pop %1
  1535                              <1>  	%endrep
  1536                              <1>  	%rep %0
  1537                              <1>  		push %1
  1538                              <1>  		%rotate 1
  1539                              <1>  	%endrep
  1540                              <1> %endmacro
  1541                              <1> 
  1542                              <1> %macro stkpush 1-* 	
  1543                              <1>  	%rep %0
  1544                              <1>  		push %1
  1545                              <1>  		%rotate 1
  1546                              <1>  	%endrep 	
  1547                              <1> %endmacro
  1548                              <1>  
  1549                              <1> %macro stkpop 1-*
  1550                              <1>  	%rep %0
  1551                              <1>  	 	%rotate -1
  1552                              <1>  		pop %1
  1553                              <1>  	%endrep 	 	
  1554                              <1> %endmacro
  1555                              <1> 
  1556                              <1> %macro delay 1
  1557                              <1> 	delay cs, %1
  1558                              <1> %endmacro
  1559                              <1> 
  1560                              <1> %macro delay 2
  1561                              <1> 	mov ax,%1
  1562                              <1> 	mov ds,ax
  1563                              <1> 	
  1564                              <1> 	mov ah,86h
  1565                              <1> 	mov cx,[%2+2]
  1566                              <1> 	mov dx,[%2]
  1567                              <1> 	int 15h	
  1568                              <1> %endmacro
  1569                              <1> 
  1570                              <1> %endif 
  1571                                  %include "lib/math.mac"
  1572                              <1> 
  1573                              <1> %ifndef MATH_MAC
  1574                              <1> 	%define MATH_MAC
  1575                              <1> 	
  1576                              <1> 	%include "lib/math.asm"
  1577                              <2> 
  1578                              <2> %ifndef MATH_ASM
  1579                              <2> 	%define MATH_ASM
  1580                              <2> 
  1581                              <2> 	%include "lib/system.mac"
  1582                              <3>  
  1583                              <3> %ifndef SYSTEM_MAC
  1584                              <3>  	%define SYSTEM_MAC
  1585                              <3>  	
  1586                              <3> 	%ifndef TRUE
  1587                              <3> 		%define TRUE 01h
  1588                              <3> 	%endif
  1589                              <3> 	%ifndef FALSE
  1590                              <3> 		%define FALSE 00h
  1591                              <3> 	%endif
  1592                              <3> 	
  1593                              <3> %macro vlodsb 3
  1594                              <3> 	vlodsb cs, %1, %2, %3
  1595                              <3> %endmacro
  1596                              <3> 
  1597                              <3> %macro vstosb 3
  1598                              <3> 	vstosb cs, %1, %2, %3
  1599                              <3> %endmacro
  1600                              <3> 	 	
  1601                              <3> %macro int16toreg 2
  1602                              <3> 	int16toreg cs, %1, %2
  1603                              <3> %endmacro
  1604                              <3> 
  1605                              <3> %macro regtoint16 2
  1606                              <3> 	regtoint16 %1, cs, %2
  1607                              <3> %endmacro
  1608                              <3> 
  1609                              <3> %macro vstosb 4
  1610                              <3> 	push %1
  1611                              <3> 	pop ds
  1612                              <3> 	mov si,%2
  1613                              <3> 	add si,%3
  1614                              <3> 	mov byte [si],%4	
  1615                              <3> %endmacro
  1616                              <3> 
  1617                              <3> %macro vlodsb 4
  1618                              <3> 	push %1
  1619                              <3> 	pop ds
  1620                              <3> 	mov si,%2
  1621                              <3> 	add si,%3
  1622                              <3> 	mov byte %4,[si]	
  1623                              <3> %endmacro 	 
  1624                              <3> 
  1625                              <3> %macro int16toreg 3
  1626                              <3> 	push %2
  1627                              <3> 	push %1
  1628                              <3> 	pop ds
  1629                              <3> 	pop si
  1630                              <3> 	mov word %3,[si]	
  1631                              <3> %endmacro
  1632                              <3> 
  1633                              <3> %macro regtoint16 3
  1634                              <3> 	push %3
  1635                              <3> 	push %2
  1636                              <3> 	pop ds
  1637                              <3> 	pop si
  1638                              <3> 	mov word [si],%1	
  1639                              <3> %endmacro
  1640                              <3> 
  1641                              <3> %macro mov32 2
  1642                              <3> 	mov32 cs, %1, cs, %2
  1643                              <3> %endmacro
  1644                              <3> 
  1645                              <3> %macro mov16 2
  1646                              <3> 	mov16 cs, %1, cs, %2
  1647                              <3> %endmacro
  1648                              <3> 
  1649                              <3> %macro mov32 4
  1650                              <3> 	mov ax,%3
  1651                              <3> 	mov ds,ax
  1652                              <3> 	mov cx,[%4+2]
  1653                              <3> 	mov dx,[%4]
  1654                              <3> 	mov ax,%1
  1655                              <3> 	mov ds,ax
  1656                              <3> 	mov [%2+2],cx
  1657                              <3> 	mov [%2],dx
  1658                              <3> %endmacro
  1659                              <3> 
  1660                              <3> %macro mov16 4
  1661                              <3> 	mov ax,%3
  1662                              <3> 	mov ds,ax
  1663                              <3> 	mov bx,[%4]
  1664                              <3> 	mov ax,%1
  1665                              <3> 	mov ds,ax
  1666                              <3> 	mov [%2],bx
  1667                              <3> %endmacro
  1668                              <3>  	 	
  1669                              <3> %macro mformat 4
  1670                              <3> 	stkopen 8
  1671                              <3> 	mov word [ bp + 0 ], %1
  1672                              <3> 	mov word [ bp + 2 ], %2
  1673                              <3> 	mov word [ bp + 4 ], %3
  1674                              <3> 	mov word [ bp + 6 ], %4
  1675                              <3> 	call kernel_segment:mformat
  1676                              <3> 	stkclose 8
  1677                              <3> %endmacro
  1678                              <3> 
  1679                              <3> %macro malloc 6
  1680                              <3> 	stkopen 0Bh
  1681                              <3> 	mov word [ bp + 4 ], %3
  1682                              <3> 	mov word [ bp + 6 ], %4
  1683                              <3> 	mov word [ bp + 8 ], %5	
  1684                              <3> 	call kernel_segment:malloc
  1685                              <3> 	push sp
  1686                              <3> 	pop bp
  1687                              <3> 	mov word %1, [ bp ]
  1688                              <3> 	mov word %2, [ bp + 2 ]
  1689                              <3> 	mov byte %6, [ bp + 0x0A ]
  1690                              <3> 	stkclose 0Bh
  1691                              <3> %endmacro 	
  1692                              <3> 
  1693                              <3> %macro laddr 2
  1694                              <3> 	laddr %1, %2, %1, %2
  1695                              <3> %endmacro
  1696                              <3> 
  1697                              <3> %macro faddr 2
  1698                              <3> 	faddr %1, %2, %1, %2
  1699                              <3> %endmacro
  1700                              <3>  	
  1701                              <3> %macro laddr 4
  1702                              <3> 	stkopen 8
  1703                              <3> 	mov word [ bp + 4 ], %3
  1704                              <3> 	mov word [ bp + 6 ], %4	
  1705                              <3> 	call kernel_segment:laddr
  1706                              <3> 	push sp
  1707                              <3> 	pop bp
  1708                              <3> 	mov word %1, [ bp + 0 ]
  1709                              <3> 	mov word %2, [ bp + 2 ]	
  1710                              <3> 	stkclose 8
  1711                              <3> %endmacro
  1712                              <3> 
  1713                              <3> %macro faddr 4
  1714                              <3> 	stkopen 8
  1715                              <3> 	mov word [ bp + 4 ], %3
  1716                              <3> 	mov word [ bp + 6 ], %4	
  1717                              <3> 	call kernel_segment:faddr
  1718                              <3> 	push sp
  1719                              <3> 	pop bp
  1720                              <3> 	mov word %1, [ bp + 0 ]
  1721                              <3> 	mov word %2, [ bp + 2 ]	
  1722                              <3> 	stkclose 8
  1723                              <3> %endmacro	
  1724                              <3>  
  1725                              <3> 
  1726                              <3> %macro stkopen 1		
  1727                              <3> 	sub word sp, %1
  1728                              <3> 	push sp
  1729                              <3> 	pop bp
  1730                              <3> %endmacro
  1731                              <3> 
  1732                              <3> %macro stkclose 1
  1733                              <3> 	add word sp, %1
  1734                              <3> %endmacro
  1735                              <3> 
  1736                              <3> %macro stkload 1-* 	
  1737                              <3>  	%rep %0
  1738                              <3>  	 	%rotate -1
  1739                              <3>  		pop %1
  1740                              <3>  	%endrep
  1741                              <3>  	%rep %0
  1742                              <3>  		push %1
  1743                              <3>  		%rotate 1
  1744                              <3>  	%endrep
  1745                              <3> %endmacro
  1746                              <3> 
  1747                              <3> %macro stkpush 1-* 	
  1748                              <3>  	%rep %0
  1749                              <3>  		push %1
  1750                              <3>  		%rotate 1
  1751                              <3>  	%endrep 	
  1752                              <3> %endmacro
  1753                              <3>  
  1754                              <3> %macro stkpop 1-*
  1755                              <3>  	%rep %0
  1756                              <3>  	 	%rotate -1
  1757                              <3>  		pop %1
  1758                              <3>  	%endrep 	 	
  1759                              <3> %endmacro
  1760                              <3> 
  1761                              <3> %macro delay 1
  1762                              <3> 	delay cs, %1
  1763                              <3> %endmacro
  1764                              <3> 
  1765                              <3> %macro delay 2
  1766                              <3> 	mov ax,%1
  1767                              <3> 	mov ds,ax
  1768                              <3> 	
  1769                              <3> 	mov ah,86h
  1770                              <3> 	mov cx,[%2+2]
  1771                              <3> 	mov dx,[%2]
  1772                              <3> 	int 15h	
  1773                              <3> %endmacro
  1774                              <3> 
  1775                              <3> %endif 
  1776                              <2> 
  1777                              <2> %macro __int16to32 3
  1778                              <2> 	stkopen 0x06
  1779                              <2> 	mov word [bp+0],%1
  1780                              <2> 	call proc_int16to32
  1781                              <2> 	push sp
  1782                              <2> 	pop bp
  1783                              <2> 	mov word %2, [bp+2]
  1784                              <2> 	mov word %3, [bp+4]
  1785                              <2> 	stkclose 0x06
  1786                              <2> %endmacro
  1787                              <2> 
  1788                              <2> %macro __int32to16 3
  1789                              <2> 	stkopen 0x06
  1790                              <2> 	mov word [bp+0], %1
  1791                              <2> 	mov word [bp+2], %2
  1792                              <2> 	call proc_int32to16
  1793                              <2> 	push sp
  1794                              <2> 	pop bp
  1795                              <2> 	mov word %3, [bp+4]
  1796                              <2> 	stkclose 0x06
  1797                              <2> %endmacro
  1798                              <2> 
  1799                              <2> %macro __add32 6
  1800                              <2> 	stkopen 0x0C
  1801                              <2> 	mov word [bp+0], %1
  1802                              <2> 	mov word [bp+2], %2
  1803                              <2> 	mov word [bp+4], %3
  1804                              <2> 	mov word [bp+6], %4	
  1805                              <2> 	call proc_add32
  1806                              <2> 	push sp
  1807                              <2> 	pop bp
  1808                              <2> 	mov word %5, [bp+8]
  1809                              <2> 	mov word %6, [bp+0x0A]
  1810                              <2> 	stkclose 0x0C
  1811                              <2> %endmacro
  1812                              <2> 
  1813                              <2> %macro __sub32 6
  1814                              <2> 	stkopen 0x0C
  1815                              <2> 	mov word [bp+0], %1
  1816                              <2> 	mov word [bp+2], %2
  1817                              <2> 	mov word [bp+4], %3
  1818                              <2> 	mov word [bp+6], %4	
  1819                              <2> 	call proc_sub32
  1820                              <2> 	push sp
  1821                              <2> 	pop bp
  1822                              <2> 	mov word %5, [bp+8]
  1823                              <2> 	mov word %6, [bp+0x0A]
  1824                              <2> 	stkclose 0x0C
  1825                              <2> %endmacro
  1826                              <2> 
  1827                              <2> %macro __mul32 6
  1828                              <2> 	stkopen 0x0C
  1829                              <2> 	mov word [bp+0], %1
  1830                              <2> 	mov word [bp+2], %2
  1831                              <2> 	mov word [bp+4], %3
  1832                              <2> 	mov word [bp+6], %4	
  1833                              <2> 	call proc_mul32
  1834                              <2> 	push sp
  1835                              <2> 	pop bp
  1836                              <2> 	mov word %5, [bp+8]
  1837                              <2> 	mov word %6, [bp+0x0A]
  1838                              <2> 	stkclose 0x0C
  1839                              <2> %endmacro
  1840                              <2> 
  1841                              <2> %macro __div32 9
  1842                              <2> 	stkopen 0x11
  1843                              <2> 	mov word [bp+0], %1
  1844                              <2> 	mov word [bp+2], %2
  1845                              <2> 	mov word [bp+4], %3
  1846                              <2> 	mov word [bp+6], %4
  1847                              <2> 	mov word [bp+8], %5
  1848                              <2> 	mov word [bp+0x0A], %6	
  1849                              <2> 	call proc_div32
  1850                              <2> 	push sp
  1851                              <2> 	pop bp
  1852                              <2> 	mov word %7, [bp+0x0C]
  1853                              <2> 	mov word %8, [bp+0x0E]
  1854                              <2> 	mov byte %9, [bp+0x10]
  1855                              <2> 	stkclose 0x11
  1856                              <2> %endmacro
  1857                              <2> 
  1858                              <2> %macro __cmp32 5
  1859                              <2> 	stkopen 9
  1860                              <2> 	mov word [bp+0], %1
  1861                              <2> 	mov word [bp+2], %2
  1862                              <2> 	mov word [bp+4], %3
  1863                              <2> 	mov word [bp+6], %4
  1864                              <2> 	call proc_cmp32
  1865                              <2> 	push sp
  1866                              <2> 	pop bp
  1867                              <2> 	mov byte %5, [bp+8]
  1868                              <2> 	stkclose 9	
  1869                              <2> %endmacro
  1870                              <2> 
  1871                              <2> %macro __shl32 3
  1872                              <2> 	stkopen 5
  1873                              <2> 	mov word [bp+0], %1
  1874                              <2> 	mov word [bp+2], %2
  1875                              <2> 	mov byte [bp+4], %3
  1876                              <2> 	call proc_shl32
  1877                              <2> 	push sp
  1878                              <2> 	pop bp
  1879                              <2> 	mov word %1, [bp+0]
  1880                              <2> 	mov word %2, [bp+2]
  1881                              <2> 	stkclose 5
  1882                              <2> %endmacro
  1883                              <2> 
  1884                              <2> %macro __shr32 3
  1885                              <2> 	stkopen 5
  1886                              <2> 	mov word [bp+0], %1
  1887                              <2> 	mov word [bp+2], %2
  1888                              <2> 	mov byte [bp+4], %3
  1889                              <2> 	call proc_shr32
  1890                              <2> 	push sp
  1891                              <2> 	pop bp
  1892                              <2> 	mov word %1, [bp+0]
  1893                              <2> 	mov word %2, [bp+2]
  1894                              <2> 	stkclose 5
  1895                              <2> %endmacro
  1896                              <2> 
  1897                              <2> %macro __lzcount32 3	
  1898                              <2> 	push %2		
  1899                              <2> 	__lzcount16 %1, cl	
  1900                              <2> 	pop ax
  1901                              <2> 	cmp cl,4
  1902                              <2> 	jb .end
  1903                              <2> 		push cx		
  1904                              <2> 		__lzcount16 ax, al		
  1905                              <2> 		pop cx
  1906                              <2> 		add cl,al
  1907                              <2> 	.end:	
  1908                              <2> 	mov byte %3, cl 
  1909                              <2> %endmacro
  1910                              <2> 
  1911                              <2> %macro __lzcount16 2
  1912                              <2> 	stkopen 3
  1913                              <2> 	mov word [bp+0], %1
  1914                              <2> 	call proc__lzcount16
  1915                              <2> 	push sp
  1916                              <2> 	pop bp
  1917                              <2> 	mov byte %2, [bp+2]	
  1918                              <2> 	stkclose 3
  1919                              <2> %endmacro
  1920                              <2> 
  1921                              <2> %macro __lzbitcount32 3	
  1922                              <2> 	push %2		
  1923                              <2> 	__lzbitcount16 %1, cl
  1924                              <2> 	pop ax
  1925                              <2> 	cmp cl,16
  1926                              <2> 	jb .end
  1927                              <2> 		push cx		
  1928                              <2> 		__lzbitcount16 ax, al		
  1929                              <2> 		pop cx
  1930                              <2> 		add cl,al
  1931                              <2> 	.end:	
  1932                              <2> 	mov byte %3, cl 
  1933                              <2> %endmacro
  1934                              <2> 		
  1935                              <2> %macro __lzbitcount16 2
  1936                              <2> 	stkopen 3
  1937                              <2> 	mov word [bp+0], %1
  1938                              <2> 	call proc__lzbitcount16
  1939                              <2> 	push sp
  1940                              <2> 	pop bp
  1941                              <2> 	mov byte %2, [bp+2]	
  1942                              <2> 	stkclose 3
  1943                              <2> %endmacro	
  1944                              <2> 
  1945                              <2> %macro __calc_dividendo1 7
  1946                              <2> 	stkopen 0x0D
  1947                              <2> 	mov word [bp+0], %1
  1948                              <2> 	mov word [bp+2], %2
  1949                              <2> 	mov word [bp+4], %3
  1950                              <2> 	mov word [bp+6], %4
  1951                              <2> 	call proc_calc_dividendo1
  1952                              <2> 	push sp
  1953                              <2> 	pop bp
  1954                              <2> 	mov word %5, [bp+0x08]
  1955                              <2> 	mov word %6, [bp+0x0A]
  1956                              <2> 	mov byte %7, [bp+0x0C]
  1957                              <2> 	stkclose 0x0D
  1958                              <2> %endmacro
  1959                              <2> 
  1960                              <2> %macro __calc__prox_dividendo 5
  1961                              <2> 	stkopen 9
  1962                              <2> 	mov word [bp+0], %1
  1963                              <2> 	mov word [bp+2], %2
  1964                              <2> 	mov word [bp+4], %3
  1965                              <2> 	mov word [bp+6], %4
  1966                              <2> 	mov word [bp+8], %5
  1967                              <2> 	call proc_calc_prox_dividendo
  1968                              <2> 	push sp
  1969                              <2> 	pop bp
  1970                              <2> 	mov word %3, [bp+4]
  1971                              <2> 	mov word %4, [bp+6]
  1972                              <2> 	mov byte %5, [bp+8]
  1973                              <2> 	stkclose 9
  1974                              <2> %endmacro
  1975                              <2> 				
  1976                              <2> section .data
  1977                              <2> 
  1978                              <2> proc_int16to32:
  1979 0000046B 89E0                <2> 	mov ax,sp
  1980 0000046D 89C5                <2> 	mov bp,ax
  1981                              <2> 	
  1982 0000046F 8B4602              <2> 	mov ax,[bp+2]
  1983 00000472 894606              <2> 	mov [bp+6],ax
  1984                              <2> 				
  1985 00000475 250080              <2> 	and ax,0x8000
  1986 00000478 83F800              <2> 	cmp ax,0
  1987 0000047B 7507                <2> 	jnz .one
  1988 0000047D C746040000          <2> 		mov word [bp+4],0			
  1989 00000482 EB05                <2> 		jmp .endcmp
  1990                              <2> 	.one:				
  1991 00000484 C74604FFFF          <2> 		mov word [bp+4],0xFFFF
  1992                              <2> 	.endcmp:
  1993                              <2> 	
  1994 00000489 C3                  <2> 	ret
  1995                              <2> 	
  1996                              <2> proc_int32to16:
  1997 0000048A 89E0                <2> 	mov ax,sp
  1998 0000048C 89C5                <2> 	mov bp,ax
  1999                              <2> 		
  2000 0000048E 8B4604              <2> 	mov ax,[bp+4]
  2001 00000491 25FF7F              <2> 	and ax,0x7FFF
  2002 00000494 894606              <2> 	mov [bp+6],ax
  2003                              <2> 	
  2004 00000497 8B4602              <2> 	mov ax,[bp+2]
  2005 0000049A 250080              <2> 	and ax,0x8000
  2006 0000049D 014606              <2> 	add [bp+6],ax
  2007                              <2> 		
  2008 000004A0 C3                  <2> 	ret
  2009                              <2> 
  2010                              <2> proc_idiv32:
  2011                              <2> 	stkopen 0x11
  2012 000004A1 83EC11              <3>  sub word sp, %1
  2013 000004A4 54                  <3>  push sp
  2014 000004A5 5D                  <3>  pop bp
  2015 000004A6 8B4613              <2> 	mov ax,[bp+0x13]
  2016 000004A9 25FF7F              <2> 	and ax,0x7FFF
  2017 000004AC 894600              <2> 	mov [bp+0],ax
  2018 000004AF 8B4615              <2> 	mov ax,[bp+0x15]
  2019 000004B2 894602              <2> 	mov [bp+2],ax
  2020 000004B5 8B4617              <2> 	mov ax,[bp+0x17]
  2021 000004B8 25FF7F              <2> 	and ax,0x7FFF
  2022 000004BB 894604              <2> 	mov [bp+4],ax
  2023 000004BE 8B4619              <2> 	mov ax,[bp+0x19]
  2024 000004C1 894606              <2> 	mov [bp+6],ax 
  2025 000004C4 E8B300              <2> 	call proc_div32
  2026 000004C7 89E0                <2> 	mov ax,sp
  2027 000004C9 89C5                <2> 	mov bp,ax
  2028 000004CB 8B4608              <2> 	mov ax,[bp+8]
  2029 000004CE 89461B              <2> 	mov [bp+0x1B], ax
  2030 000004D1 8B460A              <2> 	mov ax,[bp+0x0A]
  2031 000004D4 89461D              <2> 	mov [bp+0x1D], ax
  2032 000004D7 8B460C              <2> 	mov ax,[bp+0x0C]
  2033 000004DA 89461F              <2> 	mov [bp+0x1F], ax
  2034 000004DD 8B460E              <2> 	mov ax,[bp+0x0E]
  2035 000004E0 894621              <2> 	mov [bp+0x21], ax
  2036 000004E3 8A4610              <2> 	mov al,[bp+0x10]
  2037 000004E6 884623              <2> 	mov byte [bp+0x23], al
  2038                              <2> 	stkclose 0x11
  2039 000004E9 83C411              <3>  add word sp, %1
  2040                              <2> 	
  2041 000004EC 54                  <2> 	push sp
  2042 000004ED 5D                  <2> 	pop bp
  2043                              <2> 		
  2044 000004EE 8B4E02              <2> 	mov cx,[bp+2]
  2045 000004F1 8B5606              <2> 	mov dx,[bp+6]
  2046 000004F4 81E10080            <2> 	and cx,0x8000
  2047 000004F8 81E20080            <2> 	and dx,0x8000
  2048 000004FC 31D1                <2> 	xor cx,dx
  2049                              <2> 	
  2050 000004FE 837E0A00            <2> 	cmp word [bp+0x0A],0
  2051 00000502 7506                <2> 	jnz .signal1
  2052 00000504 837E0C00            <2> 	cmp word [bp+0x0C],0
  2053 00000508 7403                <2> 	jz .endsignal1
  2054                              <2> 	.signal1:
  2055 0000050A 014E0A              <2> 		add word [bp+0x0A],cx
  2056                              <2> 	.endsignal1:
  2057                              <2> 	
  2058 0000050D 837E0E00            <2> 	cmp word [bp+0x0E],0
  2059 00000511 7506                <2> 	jnz .signal2
  2060 00000513 837E1000            <2> 	cmp word [bp+0x10],0
  2061 00000517 7403                <2> 	jz .endsignal2
  2062                              <2> 	.signal2:
  2063 00000519 014E0E              <2> 		add word [bp+0x0E],cx	
  2064                              <2> 	.endsignal2:
  2065                              <2> 		
  2066 0000051C C3                  <2> 	ret	
  2067                              <2> 
  2068                              <2> proc_imul32:		
  2069                              <2> 	stkopen 0x0C
  2070 0000051D 83EC0C              <3>  sub word sp, %1
  2071 00000520 54                  <3>  push sp
  2072 00000521 5D                  <3>  pop bp
  2073 00000522 8B460E              <2> 	mov ax,[bp+0x0E]
  2074 00000525 25FF7F              <2> 	and ax,0x7FFF
  2075 00000528 894600              <2> 	mov [bp+0],ax
  2076 0000052B 8B4610              <2> 	mov ax,[bp+0x10]
  2077 0000052E 894602              <2> 	mov [bp+2],ax
  2078 00000531 8B4612              <2> 	mov ax,[bp+0x12]
  2079 00000534 25FF7F              <2> 	and ax,0x7FFF
  2080 00000537 894604              <2> 	mov [bp+4],ax
  2081 0000053A 8B4614              <2> 	mov ax,[bp+0x14]
  2082 0000053D 894606              <2> 	mov [bp+6],ax 
  2083 00000540 E8B901              <2> 	call proc_mul32
  2084 00000543 89E0                <2> 	mov ax,sp
  2085 00000545 89C5                <2> 	mov bp,ax
  2086 00000547 8B4608              <2> 	mov ax,[bp+8]
  2087 0000054A 8B5E0A              <2> 	mov bx,[bp+0x0A]
  2088                              <2> 	stkclose 0x0C
  2089 0000054D 83C40C              <3>  add word sp, %1
  2090                              <2> 	
  2091 00000550 89E1                <2> 	mov cx,sp
  2092 00000552 89CD                <2> 	mov bp,cx		
  2093                              <2> 		
  2094 00000554 89460A              <2> 	mov [bp+0x0A],ax
  2095 00000557 895E0C              <2> 	mov [bp+0x0C],bx
  2096                              <2> 	
  2097 0000055A 837E0A00            <2> 	cmp word [bp+0x0A],0
  2098 0000055E 7506                <2> 	jnz .signal1
  2099 00000560 837E0C00            <2> 	cmp word [bp+0x0C],0
  2100 00000564 7413                <2> 	jz .endsignal1
  2101                              <2> 	.signal1:
  2102 00000566 8B4E02              <2> 		mov cx,[bp+2]
  2103 00000569 8B5606              <2> 		mov dx,[bp+6]
  2104 0000056C 81E10080            <2> 		and cx,0x8000
  2105 00000570 81E20080            <2> 		and dx,0x8000
  2106 00000574 31D1                <2> 		xor cx,dx
  2107 00000576 014E0A              <2> 		add word [bp+0x0A],cx
  2108                              <2> 	.endsignal1:
  2109                              <2> 	
  2110 00000579 C3                  <2> 	ret
  2111                              <2> 
  2112                              <2> proc_div32:
  2113 0000057A 89E0                <2> 	mov ax,sp
  2114 0000057C 89C5                <2> 	mov bp,ax
  2115                              <2> 	
  2116 0000057E 8B4606              <2> 	mov ax,[bp+6]
  2117 00000581 034608              <2> 	add ax,[bp+8]
  2118 00000584 83F800              <2> 	cmp ax,0
  2119 00000587 0F846C01            <2> 	jz .divbyzero
  2120                              <2> 	
  2121 0000058B 837E0200            <2> 	cmp word [bp+2], 0
  2122 0000058F 7521                <2> 	jnz .div2
  2123 00000591 837E0600            <2> 	cmp word [bp+6], 0
  2124 00000595 751B                <2> 	jnz .div2
  2125 00000597 31D2                <2> 		xor dx,dx
  2126 00000599 8B4604              <2> 		mov ax, [bp+4]
  2127 0000059C F77608              <2> 		div word [bp+8]
  2128 0000059F C7460A0000          <2> 		mov word [bp+0x0A], 0
  2129 000005A4 89460C              <2> 		mov word [bp+0x0C], ax
  2130 000005A7 C7460E0000          <2> 		mov word [bp+0x0E], 0
  2131 000005AC 895610              <2> 		mov word [bp+0x10], dx
  2132 000005AF E93F01              <2> 		jmp .enddiv
  2133                              <2> 	.div2:
  2134 000005B2 8B4602              <2> 		mov ax,[bp+2]
  2135 000005B5 3B4606              <2> 		cmp ax,[bp+6]
  2136 000005B8 0F821F01            <2> 		jb .qzero
  2137 000005BC 770A                <2> 		ja .div
  2138 000005BE 8B4604              <2> 		mov ax,[bp+4]
  2139 000005C1 3B4608              <2> 		cmp ax,[bp+8]
  2140 000005C4 0F821301            <2> 		jb .qzero
  2141                              <2> 		
  2142                              <2> 		.div:
  2143                              <2> 		
  2144 000005C8 C7460A0000          <2> 		mov word [bp+0x0A], 0
  2145 000005CD C7460C0000          <2> 		mov word [bp+0x0C], 0		
  2146 000005D2 C7460E0000          <2> 		mov word [bp+0x0E], 0
  2147 000005D7 C746100000          <2> 		mov word [bp+0x10], 0
  2148                              <2> 		
  2149 000005DC 8B4602              <2> 		mov ax,[bp+2]
  2150 000005DF 8B5E04              <2> 		mov bx,[bp+4]
  2151 000005E2 8B4E06              <2> 		mov cx,[bp+6]
  2152 000005E5 8B5608              <2> 		mov dx,[bp+8]		
  2153                              <2> 		__calc_dividendo1 ax, bx, cx, dx, ax, bx, cl
  2154                              <3>  stkopen 0x0D
  2155 000005E8 83EC0D              <4>  sub word sp, %1
  2156 000005EB 54                  <4>  push sp
  2157 000005EC 5D                  <4>  pop bp
  2158 000005ED 894600              <3>  mov word [bp+0], %1
  2159 000005F0 895E02              <3>  mov word [bp+2], %2
  2160 000005F3 894E04              <3>  mov word [bp+4], %3
  2161 000005F6 895606              <3>  mov word [bp+6], %4
  2162 000005F9 E89A02              <3>  call proc_calc_dividendo1
  2163 000005FC 54                  <3>  push sp
  2164 000005FD 5D                  <3>  pop bp
  2165 000005FE 8B4608              <3>  mov word %5, [bp+0x08]
  2166 00000601 8B5E0A              <3>  mov word %6, [bp+0x0A]
  2167 00000604 8A4E0C              <3>  mov byte %7, [bp+0x0C]
  2168                              <3>  stkclose 0x0D
  2169 00000607 83C40D              <4>  add word sp, %1
  2170                              <2> 
  2171 0000060A 89E2                <2> 		mov dx,sp
  2172 0000060C 89D5                <2> 		mov bp,dx
  2173 0000060E 89460E              <2> 		mov word [bp+0x0E], ax
  2174 00000611 895E10              <2> 		mov word [bp+0x10], bx
  2175                              <2> 		
  2176 00000614 51                  <2> 		push cx
  2177                              <2> 		.l1:							
  2178 00000615 89E2                <2> 			mov dx,sp
  2179 00000617 89D5                <2> 			mov bp,dx		
  2180 00000619 83C502              <2> 			add bp,2
  2181 0000061C 8B460E              <2> 			mov ax, [bp+0x0E]
  2182 0000061F 8B5E10              <2> 			mov bx, [bp+0x10]
  2183 00000622 8B4E06              <2> 			mov cx, [bp+6]
  2184 00000625 8B5608              <2> 			mov dx, [bp+8]
  2185                              <2> 			__cmp32 ax, bx, cx, dx, cl
  2186                              <3>  stkopen 9
  2187 00000628 83EC09              <4>  sub word sp, %1
  2188 0000062B 54                  <4>  push sp
  2189 0000062C 5D                  <4>  pop bp
  2190 0000062D 894600              <3>  mov word [bp+0], %1
  2191 00000630 895E02              <3>  mov word [bp+2], %2
  2192 00000633 894E04              <3>  mov word [bp+4], %3
  2193 00000636 895606              <3>  mov word [bp+6], %4
  2194 00000639 E81F01              <3>  call proc_cmp32
  2195 0000063C 54                  <3>  push sp
  2196 0000063D 5D                  <3>  pop bp
  2197 0000063E 8A4E08              <3>  mov byte %5, [bp+8]
  2198                              <3>  stkclose 9
  2199 00000641 83C409              <4>  add word sp, %1
  2200                              <2> 			
  2201 00000644 51                  <2> 			push cx
  2202 00000645 89E2                <2> 			mov dx,sp
  2203 00000647 89D5                <2> 			mov bp,dx
  2204 00000649 83C504              <2> 			add bp,4
  2205 0000064C 8B460A              <2> 			mov ax,[bp+0x0A]
  2206 0000064F 8B5E0C              <2> 			mov bx,[bp+0x0C]
  2207 00000652 55                  <2> 			push bp
  2208                              <2> 			__shl32 ax, bx, 1
  2209                              <3>  stkopen 5
  2210 00000653 83EC05              <4>  sub word sp, %1
  2211 00000656 54                  <4>  push sp
  2212 00000657 5D                  <4>  pop bp
  2213 00000658 894600              <3>  mov word [bp+0], %1
  2214 0000065B 895E02              <3>  mov word [bp+2], %2
  2215 0000065E C6460401            <3>  mov byte [bp+4], %3
  2216 00000662 E82101              <3>  call proc_shl32
  2217 00000665 54                  <3>  push sp
  2218 00000666 5D                  <3>  pop bp
  2219 00000667 8B4600              <3>  mov word %1, [bp+0]
  2220 0000066A 8B5E02              <3>  mov word %2, [bp+2]
  2221                              <3>  stkclose 5
  2222 0000066D 83C405              <4>  add word sp, %1
  2223 00000670 5D                  <2> 			pop bp				
  2224 00000671 59                  <2> 			pop cx	
  2225                              <2> 									
  2226 00000672 80F900              <2> 			cmp cl,0
  2227 00000675 7C12                <2> 			jl .l11
  2228 00000677 83C301              <2> 				add bx,1
  2229 0000067A 83D000              <2> 				adc ax,0	
  2230                              <2> 				
  2231 0000067D 8B4E06              <2> 				mov cx,[bp+6]
  2232 00000680 8B5608              <2> 				mov dx,[bp+8]
  2233 00000683 295610              <2> 				sub [bp+0x10],dx
  2234 00000686 194E0E              <2> 				sbb [bp+0x0E],cx							
  2235                              <2> 			.l11:							
  2236 00000689 89460A              <2> 			mov word [bp+0x0A], ax
  2237 0000068C 895E0C              <2> 			mov word [bp+0x0C], bx					
  2238                              <2> 					
  2239 0000068F 59                  <2> 			pop cx
  2240 00000690 51                  <2> 			push cx												
  2241                              <2> 			
  2242 00000691 80F920              <2> 			cmp cl,32
  2243 00000694 7342                <2> 			jae .l2
  2244                              <2> 						
  2245 00000696 59                  <2> 			pop cx
  2246                              <2> 			stkopen 9
  2247 00000697 83EC09              <3>  sub word sp, %1
  2248 0000069A 54                  <3>  push sp
  2249 0000069B 5D                  <3>  pop bp
  2250 0000069C 8B460B              <2> 			mov ax,[bp+0x0B]
  2251 0000069F 894600              <2> 			mov word [bp+0], ax
  2252 000006A2 8B460D              <2> 			mov ax,[bp+0x0D]
  2253 000006A5 894602              <2> 			mov word [bp+2], ax
  2254 000006A8 8B4617              <2> 			mov ax,[bp+0x17]
  2255 000006AB 894604              <2> 			mov word [bp+4], ax
  2256 000006AE 8B4619              <2> 			mov ax,[bp+0x19]
  2257 000006B1 894606              <2> 			mov word [bp+6], ax
  2258 000006B4 884E08              <2> 			mov byte [bp+8], cl
  2259 000006B7 E8AD02              <2> 			call proc_calc_prox_dividendo
  2260 000006BA 89E0                <2> 			mov ax,sp
  2261 000006BC 89C5                <2> 			mov bp,ax
  2262 000006BE 8B4604              <2> 			mov word ax,[bp+4]
  2263 000006C1 8B5E06              <2> 			mov word bx,[bp+6]
  2264 000006C4 8A4E08              <2> 			mov byte cl,[bp+8] 
  2265                              <2> 			stkclose 9
  2266 000006C7 83C409              <3>  add word sp, %1
  2267 000006CA 89E2                <2> 			mov dx,sp
  2268 000006CC 89D5                <2> 			mov bp,dx
  2269 000006CE 89460E              <2> 			mov [bp+0x0E],ax
  2270 000006D1 895E10              <2> 			mov [bp+0x10],bx
  2271 000006D4 51                  <2> 			push cx
  2272 000006D5 E93DFF              <2> 			jmp .l1
  2273                              <2> 		.l2:	
  2274 000006D8 59                  <2> 		pop cx
  2275                              <2> 			
  2276 000006D9 EB16                <2> 		jmp .enddiv
  2277                              <2> 	.qzero:
  2278 000006DB C7460A0000          <2> 		mov word [bp+0x0A], 0
  2279 000006E0 C7460C0000          <2> 		mov word [bp+0x0C], 0
  2280 000006E5 8B4602              <2> 		mov ax,[bp+2]
  2281 000006E8 89460E              <2> 		mov word [bp+0x0E], ax
  2282 000006EB 8B4604              <2> 		mov ax,[bp+4]
  2283 000006EE 894610              <2> 		mov word [bp+0x10], ax	
  2284                              <2> 	.enddiv:
  2285 000006F1 C6461200            <2> 		mov byte [bp+0x12], 0
  2286 000006F5 EB04                <2> 		jmp .end
  2287                              <2> 	.divbyzero:
  2288 000006F7 C6461201            <2> 		mov byte [bp+0x12], 1						
  2289                              <2> 	.end:		
  2290                              <2> 			
  2291 000006FB C3                  <2> 	ret
  2292                              <2> 		
  2293                              <2> proc_mul32:
  2294 000006FC 89E0                <2> 	mov ax,sp
  2295 000006FE 89C5                <2> 	mov bp,ax
  2296                              <2> 	
  2297 00000700 31D2                <2> 	xor dx,dx
  2298 00000702 8B4604              <2> 	mov ax,[bp+4]
  2299 00000705 F76608              <2> 	mul word [bp+8]
  2300                              <2> 	
  2301 00000708 89560A              <2> 	mov word [bp+0x0A], dx
  2302 0000070B 89460C              <2> 	mov word [bp+0x0C], ax	
  2303                              <2> 	
  2304 0000070E 31D2                <2> 	xor dx,dx
  2305 00000710 8B4604              <2> 	mov ax,[bp+4]
  2306 00000713 F76606              <2> 	mul word [bp+6]
  2307                              <2> 		
  2308 00000716 01460A              <2> 	add word [bp+0x0A],ax
  2309                              <2> 	
  2310 00000719 31D2                <2> 	xor dx,dx
  2311 0000071B 8B4602              <2> 	mov ax,[bp+2]
  2312 0000071E F76608              <2> 	mul word [bp+8]
  2313                              <2> 	
  2314 00000721 01460A              <2> 	add word [bp+0x0A],ax
  2315                              <2> 	
  2316 00000724 C3                  <2> 	ret
  2317                              <2> 
  2318                              <2> proc_add32:
  2319 00000725 89E0                <2> 	mov ax,sp
  2320 00000727 89C5                <2> 	mov bp,ax
  2321                              <2> 	
  2322 00000729 8B4602              <2> 	mov ax,[bp+2]
  2323 0000072C 8B5E04              <2> 	mov bx,[bp+4]
  2324 0000072F 8B4E06              <2> 	mov cx,[bp+6]
  2325 00000732 8B5608              <2> 	mov dx,[bp+8]
  2326                              <2> 	
  2327 00000735 01D3                <2> 	add bx,dx
  2328 00000737 11C8                <2> 	adc ax,cx
  2329                              <2> 	
  2330 00000739 89460A              <2> 	mov [bp+0x0A],ax
  2331 0000073C 895E0C              <2> 	mov [bp+0x0C],bx	
  2332                              <2> 	
  2333 0000073F C3                  <2> 	ret
  2334                              <2> 	
  2335                              <2> proc_sub32:
  2336 00000740 89E0                <2> 	mov ax,sp
  2337 00000742 89C5                <2> 	mov bp,ax
  2338                              <2> 	
  2339 00000744 8B4602              <2> 	mov ax,[bp+2]
  2340 00000747 8B5E04              <2> 	mov bx,[bp+4]
  2341 0000074A 8B4E06              <2> 	mov cx,[bp+6]
  2342 0000074D 8B5608              <2> 	mov dx,[bp+8]
  2343                              <2> 	
  2344 00000750 29D3                <2> 	sub bx,dx
  2345 00000752 19C8                <2> 	sbb ax,cx
  2346                              <2> 	
  2347 00000754 89460A              <2> 	mov [bp+0x0A],ax
  2348 00000757 895E0C              <2> 	mov [bp+0x0C],bx	
  2349                              <2> 	
  2350 0000075A C3                  <2> 	ret
  2351                              <2> 		
  2352                              <2> proc_cmp32:
  2353 0000075B 89E0                <2> 	mov ax,sp
  2354 0000075D 89C5                <2> 	mov bp,ax		
  2355                              <2> 		
  2356 0000075F 8B4602              <2> 	mov ax,[bp+2]
  2357 00000762 3B4606              <2> 	cmp word ax,[bp+6]
  2358 00000765 7F04                <2> 	jg .above
  2359 00000767 7C08                <2> 	jl .below
  2360 00000769 740C                <2> 	je .equal
  2361                              <2> 	.above:
  2362 0000076B C6460A01            <2> 		mov byte [bp+0x0A], 00000001b
  2363 0000076F EB14                <2> 		jmp .endcmp
  2364                              <2> 	.below:
  2365 00000771 C6460A81            <2> 		mov byte [bp+0x0A], 10000001b
  2366 00000775 EB0E                <2> 		jmp .endcmp
  2367                              <2> 	.equal:
  2368 00000777 8B4604              <2> 		mov ax,[bp+4]
  2369 0000077A 3B4608              <2> 		cmp word ax,[bp+8]
  2370 0000077D 7FEC                <2> 		jg .above
  2371 0000077F 7CF0                <2> 		jl .below
  2372 00000781 C6460A00            <2> 		mov byte [bp+0x0A], 00000000b
  2373                              <2> 	.endcmp:		
  2374 00000785 C3                  <2> 	ret
  2375                              <2> 
  2376                              <2> proc_shl32:
  2377 00000786 89E0                <2> 	mov ax,sp
  2378 00000788 89C5                <2> 	mov bp,ax
  2379                              <2> 	
  2380 0000078A 31C0                <2> 	xor ax,ax
  2381 0000078C 8A4606              <2> 	mov byte al,[bp+6]
  2382 0000078F B310                <2> 	mov bl,10h
  2383 00000791 F6F3                <2> 	div bl
  2384                              <2> 					
  2385 00000793 3C01                <2> 	cmp al,1
  2386 00000795 7204                <2> 	jb .zero
  2387 00000797 7418                <2> 	je .one	
  2388 00000799 EB27                <2> 	jmp .above
  2389                              <2> 	.zero:	
  2390 0000079B B110                <2> 		mov cl,10h
  2391 0000079D 28E1                <2> 		sub cl,ah
  2392 0000079F 8B5E04              <2> 		mov bx,[bp+4]		
  2393 000007A2 D3EB                <2> 		shr bx,cl
  2394                              <2> 		
  2395 000007A4 88E1                <2> 		mov cl,ah		
  2396 000007A6 D36602              <2> 		shl word [bp+2],cl
  2397 000007A9 015E02              <2> 		add word [bp+2],bx				
  2398 000007AC D36604              <2> 		shl word [bp+4],cl
  2399 000007AF EB1B                <2> 		jmp .endzo
  2400                              <2> 	.one:
  2401 000007B1 88E1                <2> 		mov cl,ah
  2402 000007B3 8B5E04              <2> 		mov bx, [bp+4]				
  2403 000007B6 D3E3                <2> 		shl bx, cl 
  2404 000007B8 895E02              <2> 		mov word [bp+2], bx
  2405 000007BB C746040000          <2> 		mov word [bp+4], 0
  2406 000007C0 EB0A                <2> 		jmp .endzo
  2407                              <2> 	.above:		
  2408 000007C2 C746020000          <2> 		mov word [bp+2], 0
  2409 000007C7 C746040000          <2> 		mov word [bp+4], 0
  2410                              <2> 	.endzo:	
  2411                              <2> 	
  2412 000007CC C3                  <2> 	ret
  2413                              <2> 	
  2414                              <2> proc_shr32:
  2415 000007CD 89E0                <2> 	mov ax,sp
  2416 000007CF 89C5                <2> 	mov bp,ax
  2417                              <2> 	
  2418 000007D1 31C0                <2> 	xor ax,ax
  2419 000007D3 8A4606              <2> 	mov byte al,[bp+6]
  2420 000007D6 B310                <2> 	mov bl,10h
  2421 000007D8 F6F3                <2> 	div bl
  2422                              <2> 					
  2423 000007DA 3C01                <2> 	cmp al,1
  2424 000007DC 7204                <2> 	jb .zero
  2425 000007DE 7418                <2> 	je .one	
  2426 000007E0 EB27                <2> 	jmp .above
  2427                              <2> 	.zero:	
  2428 000007E2 B110                <2> 		mov cl,10h
  2429 000007E4 28E1                <2> 		sub cl,ah		
  2430 000007E6 8B5E02              <2> 		mov bx,[bp+2]		
  2431 000007E9 D3E3                <2> 		shl bx,cl
  2432                              <2> 		
  2433 000007EB 88E1                <2> 		mov cl,ah		
  2434 000007ED D36E02              <2> 		shr word [bp+2],cl
  2435 000007F0 D36E04              <2> 		shr word [bp+4],cl
  2436 000007F3 015E04              <2> 		add word [bp+4],bx	
  2437 000007F6 EB1B                <2> 		jmp .endzo
  2438                              <2> 	.one:			
  2439 000007F8 88E1                <2> 		mov cl,ah
  2440 000007FA 8B5E02              <2> 		mov bx,[bp+2]
  2441 000007FD D3EB                <2> 		shr bx,cl
  2442 000007FF C746020000          <2> 		mov word [bp+2],0 
  2443 00000804 895E04              <2> 		mov word [bp+4],bx
  2444 00000807 EB0A                <2> 		jmp .endzo
  2445                              <2> 	.above:		
  2446 00000809 C746020000          <2> 		mov word [bp+2],0
  2447 0000080E C746040000          <2> 		mov word [bp+4],0
  2448                              <2> 	.endzo:		
  2449                              <2> 
  2450 00000813 C3                  <2> 	ret
  2451                              <2> 	
  2452                              <2> proc__lzcount16:
  2453 00000814 89E0                <2> 	mov ax,sp
  2454 00000816 89C5                <2> 	mov bp,ax
  2455                              <2> 	
  2456 00000818 B100                <2> 	mov cl,0
  2457                              <2> 		
  2458 0000081A 8A6603              <2> 	mov ah, [bp+3]	
  2459 0000081D 80E4F0              <2> 	and ah,0xF0
  2460 00000820 80FC00              <2> 	cmp ah,0
  2461 00000823 7529                <2> 	jnz .end
  2462 00000825 FEC1                <2> 	inc cl
  2463                              <2> 	
  2464 00000827 8A6603              <2> 	mov ah, [bp+3]
  2465 0000082A 80E40F              <2> 	and ah,0x0F
  2466 0000082D 80FC00              <2> 	cmp ah,0
  2467 00000830 751C                <2> 	jnz .end
  2468 00000832 FEC1                <2> 	inc cl
  2469                              <2> 	
  2470 00000834 8A6602              <2> 	mov ah, [bp+2]
  2471 00000837 80E4F0              <2> 	and ah,0xF0
  2472 0000083A 80FC00              <2> 	cmp ah,0
  2473 0000083D 750F                <2> 	jnz .end
  2474 0000083F FEC1                <2> 	inc cl
  2475                              <2> 	
  2476 00000841 8A6602              <2> 	mov ah, [bp+2]
  2477 00000844 80E40F              <2> 	and ah,0x0F
  2478 00000847 80FC00              <2> 	cmp ah,0
  2479 0000084A 7502                <2> 	jnz .end
  2480 0000084C FEC1                <2> 	inc cl
  2481                              <2> 		
  2482                              <2> 	.end:
  2483 0000084E 884E04              <2> 	mov byte [bp+4], cl
  2484                              <2> 	
  2485 00000851 C3                  <2> 	ret
  2486                              <2> 
  2487                              <2> proc__lzbitcount16:
  2488 00000852 89E0                <2> 	mov ax,sp
  2489 00000854 89C5                <2> 	mov bp,ax
  2490                              <2> 	
  2491 00000856 8B4602              <2> 	mov word ax,[bp+2]
  2492                              <2> 		
  2493 00000859 B100                <2> 	mov cl,0
  2494                              <2> 	.l1:
  2495 0000085B 80F910              <2> 		cmp cl,16
  2496 0000085E 7310                <2> 		jae .l2
  2497                              <2> 		
  2498 00000860 89C3                <2> 		mov bx,ax
  2499 00000862 D3E3                <2> 		shl bx,cl
  2500 00000864 C1EB0F              <2> 		shr bx,15
  2501                              <2> 		
  2502 00000867 83FB00              <2> 		cmp bx,0
  2503 0000086A 7504                <2> 		jnz .l2
  2504                              <2> 		
  2505 0000086C FEC1                <2> 		inc cl		
  2506 0000086E EBEB                <2> 		jmp .l1
  2507                              <2> 	.l2:
  2508                              <2> 	
  2509 00000870 884E04              <2> 	mov byte [bp+4], cl
  2510                              <2> 	
  2511 00000873 C3                  <2> 	ret
  2512                              <2> 	
  2513                              <2> proc__lzbitcount8:
  2514 00000874 89E0                <2> 	mov ax,sp
  2515 00000876 89C5                <2> 	mov bp,ax
  2516                              <2> 	
  2517 00000878 8A4602              <2> 	mov byte al,[bp+2]
  2518                              <2> 	
  2519 0000087B B100                <2> 	mov cl,0
  2520                              <2> 	.l1:
  2521 0000087D 80F908              <2> 		cmp cl,8
  2522 00000880 7410                <2> 		je .l2
  2523                              <2> 		
  2524 00000882 88C3                <2> 		mov bl,al
  2525 00000884 D2E3                <2> 		shl bl,cl
  2526 00000886 C0EB07              <2> 		shr bl,7
  2527                              <2> 		
  2528 00000889 80FB00              <2> 		cmp bl,0
  2529 0000088C 7504                <2> 		jnz .l2
  2530                              <2> 		
  2531 0000088E FEC1                <2> 		inc cl		
  2532 00000890 EBEB                <2> 		jmp .l1
  2533                              <2> 	.l2:
  2534                              <2> 	
  2535 00000892 884E03              <2> 	mov byte [bp+3], cl
  2536                              <2> 		
  2537 00000895 C3                  <2> 	ret
  2538                              <2> 	
  2539                              <2> proc_calc_dividendo1:
  2540 00000896 89E0                <2> 	mov ax,sp
  2541 00000898 89C5                <2> 	mov bp,ax
  2542                              <2> 	
  2543 0000089A 8B4606              <2> 	mov ax,[bp+6]
  2544 0000089D 8B5E08              <2> 	mov bx,[bp+8]
  2545 000008A0 55                  <2> 	push bp
  2546                              <2> 	__lzbitcount32 ax, bx, cl
  2547 000008A1 53                  <3>  push %2
  2548                              <3>  __lzbitcount16 %1, cl
  2549                              <4>  stkopen 3
  2550 000008A2 83EC03              <5>  sub word sp, %1
  2551 000008A5 54                  <5>  push sp
  2552 000008A6 5D                  <5>  pop bp
  2553 000008A7 894600              <4>  mov word [bp+0], %1
  2554 000008AA E8A5FF              <4>  call proc__lzbitcount16
  2555 000008AD 54                  <4>  push sp
  2556 000008AE 5D                  <4>  pop bp
  2557 000008AF 8A4E02              <4>  mov byte %2, [bp+2]
  2558                              <4>  stkclose 3
  2559 000008B2 83C403              <5>  add word sp, %1
  2560 000008B5 58                  <3>  pop ax
  2561 000008B6 80F910              <3>  cmp cl,16
  2562 000008B9 7217                <3>  jb .end
  2563 000008BB 51                  <3>  push cx
  2564                              <3>  __lzbitcount16 ax, al
  2565                              <4>  stkopen 3
  2566 000008BC 83EC03              <5>  sub word sp, %1
  2567 000008BF 54                  <5>  push sp
  2568 000008C0 5D                  <5>  pop bp
  2569 000008C1 894600              <4>  mov word [bp+0], %1
  2570 000008C4 E88BFF              <4>  call proc__lzbitcount16
  2571 000008C7 54                  <4>  push sp
  2572 000008C8 5D                  <4>  pop bp
  2573 000008C9 8A4602              <4>  mov byte %2, [bp+2]
  2574                              <4>  stkclose 3
  2575 000008CC 83C403              <5>  add word sp, %1
  2576 000008CF 59                  <3>  pop cx
  2577 000008D0 00C1                <3>  add cl,al
  2578                              <3>  .end:
  2579 000008D2 88C9                <3>  mov byte %3, cl
  2580 000008D4 5D                  <2> 	pop bp
  2581 000008D5 B320                <2> 	mov bl,32
  2582 000008D7 28CB                <2> 	sub bl,cl
  2583 000008D9 53                  <2> 	push bx
  2584                              <2> 		
  2585 000008DA 8B4602              <2> 	mov ax,[bp+2]
  2586 000008DD 8B5604              <2> 	mov dx,[bp+4]
  2587 000008E0 55                  <2> 	push bp
  2588                              <2> 	__shr32 ax, dx, cl
  2589                              <3>  stkopen 5
  2590 000008E1 83EC05              <4>  sub word sp, %1
  2591 000008E4 54                  <4>  push sp
  2592 000008E5 5D                  <4>  pop bp
  2593 000008E6 894600              <3>  mov word [bp+0], %1
  2594 000008E9 895602              <3>  mov word [bp+2], %2
  2595 000008EC 884E04              <3>  mov byte [bp+4], %3
  2596 000008EF E8DBFE              <3>  call proc_shr32
  2597 000008F2 54                  <3>  push sp
  2598 000008F3 5D                  <3>  pop bp
  2599 000008F4 8B4600              <3>  mov word %1, [bp+0]
  2600 000008F7 8B5602              <3>  mov word %2, [bp+2]
  2601                              <3>  stkclose 5
  2602 000008FA 83C405              <4>  add word sp, %1
  2603 000008FD 5D                  <2> 	pop bp
  2604 000008FE 50                  <2> 	push ax
  2605 000008FF 52                  <2> 	push dx	
  2606                              <2> 	
  2607 00000900 8B4E06              <2> 	mov cx,[bp+6]
  2608 00000903 8B5E08              <2> 	mov bx,[bp+8]
  2609                              <2> 	
  2610 00000906 55                  <2> 	push bp
  2611                              <2> 	__cmp32 ax, dx, cx, bx, cl
  2612                              <3>  stkopen 9
  2613 00000907 83EC09              <4>  sub word sp, %1
  2614 0000090A 54                  <4>  push sp
  2615 0000090B 5D                  <4>  pop bp
  2616 0000090C 894600              <3>  mov word [bp+0], %1
  2617 0000090F 895602              <3>  mov word [bp+2], %2
  2618 00000912 894E04              <3>  mov word [bp+4], %3
  2619 00000915 895E06              <3>  mov word [bp+6], %4
  2620 00000918 E840FE              <3>  call proc_cmp32
  2621 0000091B 54                  <3>  push sp
  2622 0000091C 5D                  <3>  pop bp
  2623 0000091D 8A4E08              <3>  mov byte %5, [bp+8]
  2624                              <3>  stkclose 9
  2625 00000920 83C409              <4>  add word sp, %1
  2626 00000923 5D                  <2> 	pop bp
  2627 00000924 5A                  <2> 	pop dx
  2628 00000925 58                  <2> 	pop ax
  2629 00000926 5B                  <2> 	pop bx
  2630                              <2> 		
  2631 00000927 80F900              <2> 	cmp cl,0
  2632 0000092A 7D2D                <2> 	jge .l1
  2633                              <2> 		stkopen 9
  2634 0000092C 83EC09              <3>  sub word sp, %1
  2635 0000092F 54                  <3>  push sp
  2636 00000930 5D                  <3>  pop bp
  2637 00000931 8B4E0B              <2> 		mov cx,[bp+0x0B]
  2638 00000934 894E00              <2> 		mov word [bp+0], cx
  2639 00000937 8B4E0D              <2> 		mov cx,[bp+0x0D]
  2640 0000093A 894E02              <2> 		mov word [bp+2], cx
  2641 0000093D 894604              <2> 		mov word [bp+4], ax
  2642 00000940 895606              <2> 		mov word [bp+6], dx
  2643 00000943 885E08              <2> 		mov byte [bp+8], bl
  2644 00000946 E81E00              <2> 		call proc_calc_prox_dividendo
  2645 00000949 89E0                <2> 		mov ax,sp
  2646 0000094B 89C5                <2> 		mov bp,ax
  2647 0000094D 8B4604              <2> 		mov word ax,[bp+4]
  2648 00000950 8B5606              <2> 		mov word dx,[bp+6]
  2649 00000953 8A5E08              <2> 		mov byte bl,[bp+8] 
  2650                              <2> 		stkclose 9		 
  2651 00000956 83C409              <3>  add word sp, %1
  2652                              <2> 	.l1:
  2653                              <2> 	
  2654 00000959 89E1                <2> 	mov cx,sp
  2655 0000095B 89CD                <2> 	mov bp,cx
  2656 0000095D 89460A              <2> 	mov word [bp+0x0A], ax
  2657 00000960 89560C              <2> 	mov word [bp+0x0C], dx
  2658 00000963 885E0E              <2> 	mov byte [bp+0x0E], bl	 
  2659                              <2> 	
  2660 00000966 C3                  <2> 	ret
  2661                              <2> 
  2662                              <2> proc_calc_prox_dividendo:
  2663 00000967 89E0                <2> 	mov ax,sp
  2664 00000969 89C5                <2> 	mov bp,ax
  2665                              <2> 	
  2666 0000096B 30E4                <2> 	xor ah,ah	
  2667 0000096D 8A460A              <2> 	mov al,[bp+0x0A]
  2668 00000970 B310                <2> 	mov bl,10h
  2669 00000972 F6F3                <2> 	div bl
  2670                              <2> 	
  2671 00000974 3C00                <2> 	cmp al,0
  2672 00000976 7402                <2> 	jz .zero
  2673 00000978 EB05                <2> 	jmp .one
  2674                              <2> 	.zero:
  2675 0000097A 8B5E02              <2> 		mov bx,[bp+2]
  2676 0000097D EB03                <2> 		jmp .endcmp
  2677                              <2> 	.one:
  2678 0000097F 8B5E04              <2> 		mov bx,[bp+4]		
  2679                              <2> 	.endcmp:
  2680                              <2> 		
  2681 00000982 88E1                <2> 	mov cl,ah
  2682 00000984 D3E3                <2> 	shl bx,cl
  2683 00000986 C1EB0F              <2> 	shr bx,15
  2684                              <2> 	
  2685 00000989 8B4606              <2> 	mov ax,[bp+6]
  2686 0000098C 8B5608              <2> 	mov dx,[bp+8]
  2687 0000098F 53                  <2> 	push bx
  2688                              <2> 	__shl32 ax, dx, 1
  2689                              <3>  stkopen 5
  2690 00000990 83EC05              <4>  sub word sp, %1
  2691 00000993 54                  <4>  push sp
  2692 00000994 5D                  <4>  pop bp
  2693 00000995 894600              <3>  mov word [bp+0], %1
  2694 00000998 895602              <3>  mov word [bp+2], %2
  2695 0000099B C6460401            <3>  mov byte [bp+4], %3
  2696 0000099F E8E4FD              <3>  call proc_shl32
  2697 000009A2 54                  <3>  push sp
  2698 000009A3 5D                  <3>  pop bp
  2699 000009A4 8B4600              <3>  mov word %1, [bp+0]
  2700 000009A7 8B5602              <3>  mov word %2, [bp+2]
  2701                              <3>  stkclose 5
  2702 000009AA 83C405              <4>  add word sp, %1
  2703 000009AD 5B                  <2> 	pop bx
  2704                              <2> 	
  2705 000009AE 01DA                <2> 	add dx,bx
  2706 000009B0 83D000              <2> 	adc ax,0
  2707                              <2> 
  2708 000009B3 89E1                <2> 	mov cx,sp
  2709 000009B5 89CD                <2> 	mov bp,cx	
  2710 000009B7 894606              <2> 	mov [bp+6],ax
  2711 000009BA 895608              <2> 	mov [bp+8],dx
  2712                              <2> 	
  2713 000009BD FE460A              <2> 	inc byte [bp+0x0A]
  2714                              <2> 	
  2715 000009C0 C3                  <2> 	ret
  2716                              <2> 	
  2717                              <2> %endif
  2718                              <1> 	%include "lib/system.mac"
  2719                              <2>  
  2720                              <2> %ifndef SYSTEM_MAC
  2721                              <2>  	%define SYSTEM_MAC
  2722                              <2>  	
  2723                              <2> 	%ifndef TRUE
  2724                              <2> 		%define TRUE 01h
  2725                              <2> 	%endif
  2726                              <2> 	%ifndef FALSE
  2727                              <2> 		%define FALSE 00h
  2728                              <2> 	%endif
  2729                              <2> 	
  2730                              <2> %macro vlodsb 3
  2731                              <2> 	vlodsb cs, %1, %2, %3
  2732                              <2> %endmacro
  2733                              <2> 
  2734                              <2> %macro vstosb 3
  2735                              <2> 	vstosb cs, %1, %2, %3
  2736                              <2> %endmacro
  2737                              <2> 	 	
  2738                              <2> %macro int16toreg 2
  2739                              <2> 	int16toreg cs, %1, %2
  2740                              <2> %endmacro
  2741                              <2> 
  2742                              <2> %macro regtoint16 2
  2743                              <2> 	regtoint16 %1, cs, %2
  2744                              <2> %endmacro
  2745                              <2> 
  2746                              <2> %macro vstosb 4
  2747                              <2> 	push %1
  2748                              <2> 	pop ds
  2749                              <2> 	mov si,%2
  2750                              <2> 	add si,%3
  2751                              <2> 	mov byte [si],%4	
  2752                              <2> %endmacro
  2753                              <2> 
  2754                              <2> %macro vlodsb 4
  2755                              <2> 	push %1
  2756                              <2> 	pop ds
  2757                              <2> 	mov si,%2
  2758                              <2> 	add si,%3
  2759                              <2> 	mov byte %4,[si]	
  2760                              <2> %endmacro 	 
  2761                              <2> 
  2762                              <2> %macro int16toreg 3
  2763                              <2> 	push %2
  2764                              <2> 	push %1
  2765                              <2> 	pop ds
  2766                              <2> 	pop si
  2767                              <2> 	mov word %3,[si]	
  2768                              <2> %endmacro
  2769                              <2> 
  2770                              <2> %macro regtoint16 3
  2771                              <2> 	push %3
  2772                              <2> 	push %2
  2773                              <2> 	pop ds
  2774                              <2> 	pop si
  2775                              <2> 	mov word [si],%1	
  2776                              <2> %endmacro
  2777                              <2> 
  2778                              <2> %macro mov32 2
  2779                              <2> 	mov32 cs, %1, cs, %2
  2780                              <2> %endmacro
  2781                              <2> 
  2782                              <2> %macro mov16 2
  2783                              <2> 	mov16 cs, %1, cs, %2
  2784                              <2> %endmacro
  2785                              <2> 
  2786                              <2> %macro mov32 4
  2787                              <2> 	mov ax,%3
  2788                              <2> 	mov ds,ax
  2789                              <2> 	mov cx,[%4+2]
  2790                              <2> 	mov dx,[%4]
  2791                              <2> 	mov ax,%1
  2792                              <2> 	mov ds,ax
  2793                              <2> 	mov [%2+2],cx
  2794                              <2> 	mov [%2],dx
  2795                              <2> %endmacro
  2796                              <2> 
  2797                              <2> %macro mov16 4
  2798                              <2> 	mov ax,%3
  2799                              <2> 	mov ds,ax
  2800                              <2> 	mov bx,[%4]
  2801                              <2> 	mov ax,%1
  2802                              <2> 	mov ds,ax
  2803                              <2> 	mov [%2],bx
  2804                              <2> %endmacro
  2805                              <2>  	 	
  2806                              <2> %macro mformat 4
  2807                              <2> 	stkopen 8
  2808                              <2> 	mov word [ bp + 0 ], %1
  2809                              <2> 	mov word [ bp + 2 ], %2
  2810                              <2> 	mov word [ bp + 4 ], %3
  2811                              <2> 	mov word [ bp + 6 ], %4
  2812                              <2> 	call kernel_segment:mformat
  2813                              <2> 	stkclose 8
  2814                              <2> %endmacro
  2815                              <2> 
  2816                              <2> %macro malloc 6
  2817                              <2> 	stkopen 0Bh
  2818                              <2> 	mov word [ bp + 4 ], %3
  2819                              <2> 	mov word [ bp + 6 ], %4
  2820                              <2> 	mov word [ bp + 8 ], %5	
  2821                              <2> 	call kernel_segment:malloc
  2822                              <2> 	push sp
  2823                              <2> 	pop bp
  2824                              <2> 	mov word %1, [ bp ]
  2825                              <2> 	mov word %2, [ bp + 2 ]
  2826                              <2> 	mov byte %6, [ bp + 0x0A ]
  2827                              <2> 	stkclose 0Bh
  2828                              <2> %endmacro 	
  2829                              <2> 
  2830                              <2> %macro laddr 2
  2831                              <2> 	laddr %1, %2, %1, %2
  2832                              <2> %endmacro
  2833                              <2> 
  2834                              <2> %macro faddr 2
  2835                              <2> 	faddr %1, %2, %1, %2
  2836                              <2> %endmacro
  2837                              <2>  	
  2838                              <2> %macro laddr 4
  2839                              <2> 	stkopen 8
  2840                              <2> 	mov word [ bp + 4 ], %3
  2841                              <2> 	mov word [ bp + 6 ], %4	
  2842                              <2> 	call kernel_segment:laddr
  2843                              <2> 	push sp
  2844                              <2> 	pop bp
  2845                              <2> 	mov word %1, [ bp + 0 ]
  2846                              <2> 	mov word %2, [ bp + 2 ]	
  2847                              <2> 	stkclose 8
  2848                              <2> %endmacro
  2849                              <2> 
  2850                              <2> %macro faddr 4
  2851                              <2> 	stkopen 8
  2852                              <2> 	mov word [ bp + 4 ], %3
  2853                              <2> 	mov word [ bp + 6 ], %4	
  2854                              <2> 	call kernel_segment:faddr
  2855                              <2> 	push sp
  2856                              <2> 	pop bp
  2857                              <2> 	mov word %1, [ bp + 0 ]
  2858                              <2> 	mov word %2, [ bp + 2 ]	
  2859                              <2> 	stkclose 8
  2860                              <2> %endmacro	
  2861                              <2>  
  2862                              <2> 
  2863                              <2> %macro stkopen 1		
  2864                              <2> 	sub word sp, %1
  2865                              <2> 	push sp
  2866                              <2> 	pop bp
  2867                              <2> %endmacro
  2868                              <2> 
  2869                              <2> %macro stkclose 1
  2870                              <2> 	add word sp, %1
  2871                              <2> %endmacro
  2872                              <2> 
  2873                              <2> %macro stkload 1-* 	
  2874                              <2>  	%rep %0
  2875                              <2>  	 	%rotate -1
  2876                              <2>  		pop %1
  2877                              <2>  	%endrep
  2878                              <2>  	%rep %0
  2879                              <2>  		push %1
  2880                              <2>  		%rotate 1
  2881                              <2>  	%endrep
  2882                              <2> %endmacro
  2883                              <2> 
  2884                              <2> %macro stkpush 1-* 	
  2885                              <2>  	%rep %0
  2886                              <2>  		push %1
  2887                              <2>  		%rotate 1
  2888                              <2>  	%endrep 	
  2889                              <2> %endmacro
  2890                              <2>  
  2891                              <2> %macro stkpop 1-*
  2892                              <2>  	%rep %0
  2893                              <2>  	 	%rotate -1
  2894                              <2>  		pop %1
  2895                              <2>  	%endrep 	 	
  2896                              <2> %endmacro
  2897                              <2> 
  2898                              <2> %macro delay 1
  2899                              <2> 	delay cs, %1
  2900                              <2> %endmacro
  2901                              <2> 
  2902                              <2> %macro delay 2
  2903                              <2> 	mov ax,%1
  2904                              <2> 	mov ds,ax
  2905                              <2> 	
  2906                              <2> 	mov ah,86h
  2907                              <2> 	mov cx,[%2+2]
  2908                              <2> 	mov dx,[%2]
  2909                              <2> 	int 15h	
  2910                              <2> %endmacro
  2911                              <2> 
  2912                              <2> %endif 
  2913                              <1> 
  2914                              <1> %macro chgsig 1
  2915                              <1> 	chgsig cs, %1
  2916                              <1> %endmacro
  2917                              <1> 
  2918                              <1> %macro cmp16 3
  2919                              <1> 	cmp16 cs, %1, cs, %2, %3
  2920                              <1> %endmacro
  2921                              <1> 
  2922                              <1> %macro mul16 2
  2923                              <1> 	mul16 cs, %1, cs, %2
  2924                              <1> %endmacro
  2925                              <1> 
  2926                              <1> %macro div16 2
  2927                              <1> 	div16 cs, %1, cs, %2
  2928                              <1> %endmacro
  2929                              <1> 
  2930                              <1> %macro mod16 2
  2931                              <1> 	mod16 cs, %1, cs, %2
  2932                              <1> %endmacro
  2933                              <1> 
  2934                              <1> %macro inc16 1
  2935                              <1> 	inc16 cs, %1
  2936                              <1> %endmacro
  2937                              <1> 
  2938                              <1> %macro dec16 1
  2939                              <1> 	dec16 cs, %1
  2940                              <1> %endmacro
  2941                              <1> 
  2942                              <1> %macro add16 2
  2943                              <1> 	add16 cs, %1, cs, %2
  2944                              <1> %endmacro
  2945                              <1> 
  2946                              <1> %macro sub16 2
  2947                              <1> 	sub16 cs, %1, cs, %2
  2948                              <1> %endmacro
  2949                              <1> 
  2950                              <1> %macro int32to16 2
  2951                              <1> 	int32to16 cs, %1, %2
  2952                              <1> %endmacro
  2953                              <1> 
  2954                              <1> %macro int16to32 2
  2955                              <1> 	int16to32 %1, cs, %2
  2956                              <1> %endmacro
  2957                              <1> 
  2958                              <1> %macro idiv32 5
  2959                              <1> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2960                              <1> %endmacro
  2961                              <1> 
  2962                              <1> %macro imul32 3
  2963                              <1> 	imul32 cs, %1, cs, %2, cs, %3
  2964                              <1> %endmacro
  2965                              <1> 
  2966                              <1> %macro div32 5
  2967                              <1> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2968                              <1> %endmacro
  2969                              <1> 
  2970                              <1> %macro mul32 3
  2971                              <1> 	mul32 cs, %1, cs, %2, cs, %3
  2972                              <1> %endmacro
  2973                              <1> 	
  2974                              <1> %macro add32 3
  2975                              <1> 	add32 cs, %1, cs, %2, cs, %3
  2976                              <1> %endmacro
  2977                              <1> 
  2978                              <1> %macro sub32 3
  2979                              <1> 	sub32 cs, %1, cs, %2, cs, %3
  2980                              <1> %endmacro
  2981                              <1> 
  2982                              <1> %macro int32to16 3
  2983                              <1> 	stkopen 0x06
  2984                              <1> 	mov ax,%1
  2985                              <1> 	mov ds,ax
  2986                              <1> 	mov ax,[%2+2]
  2987                              <1> 	mov word [bp+0], ax
  2988                              <1> 	mov ax,[%2]	
  2989                              <1> 	mov word [bp+2], ax
  2990                              <1> 	call proc_int32to16
  2991                              <1> 	mov ax,sp
  2992                              <1> 	mov bp,ax
  2993                              <1> 	mov ax,[bp+4]
  2994                              <1> 	mov word %3, ax	
  2995                              <1> 	stkclose 0x06
  2996                              <1> %endmacro
  2997                              <1> 
  2998                              <1> %macro int16to32 3
  2999                              <1> 	stkopen 0x06
  3000                              <1> 	mov word [bp+0], %1	
  3001                              <1> 	call proc_int16to32
  3002                              <1> 	mov ax,sp
  3003                              <1> 	mov bp,ax
  3004                              <1> 	mov ax,%2
  3005                              <1> 	mov ds,ax
  3006                              <1> 	mov ax,[bp+2]
  3007                              <1> 	mov [%3+2],ax
  3008                              <1> 	mov ax,[bp+4]
  3009                              <1> 	mov [%3],ax	
  3010                              <1> 	stkclose 0x06
  3011                              <1> %endmacro
  3012                              <1> 
  3013                              <1> %macro div32 10
  3014                              <1> 	stkopen 0x11
  3015                              <1> 	mov ax,%1
  3016                              <1> 	mov ds,ax
  3017                              <1> 	mov ax,[%2+2]
  3018                              <1> 	mov word [bp+0], ax
  3019                              <1> 	mov ax,[%2]
  3020                              <1> 	mov word [bp+2], ax
  3021                              <1> 	mov ax,%3
  3022                              <1> 	mov ds,ax
  3023                              <1> 	mov ax,[%4+2]
  3024                              <1> 	mov word [bp+4], ax
  3025                              <1> 	mov ax,[%4]
  3026                              <1> 	mov word [bp+6], ax
  3027                              <1> 	call proc_div32
  3028                              <1> 	mov ax,sp
  3029                              <1> 	mov bp,ax
  3030                              <1> 	mov ax,%5
  3031                              <1> 	mov ds,ax
  3032                              <1> 	mov word ax, [bp+8]
  3033                              <1> 	mov word [%6+2], ax
  3034                              <1> 	mov word ax, [bp+0x0A]
  3035                              <1> 	mov word [%6], ax
  3036                              <1> 	mov ax,%7
  3037                              <1> 	mov ds,ax
  3038                              <1> 	mov word ax,[bp+0x0C]
  3039                              <1> 	mov word [%8+2],ax
  3040                              <1> 	mov word ax,[bp+0x0E]
  3041                              <1> 	mov word [%8],ax
  3042                              <1> 	mov ax,%9
  3043                              <1> 	mov ds,ax
  3044                              <1> 	mov byte al,[bp+0x10]
  3045                              <1> 	mov byte [%10],al
  3046                              <1> 	stkclose 0x11
  3047                              <1> %endmacro
  3048                              <1> 	
  3049                              <1> %macro mul32 6
  3050                              <1> 	stkopen 0x0C
  3051                              <1> 	mov ax,%1
  3052                              <1> 	mov ds,ax
  3053                              <1> 	mov ax,[%2+2]
  3054                              <1> 	mov word [bp+0], ax
  3055                              <1> 	mov ax,[%2]
  3056                              <1> 	mov word [bp+2], ax
  3057                              <1> 	mov ax,%3
  3058                              <1> 	mov ds,ax
  3059                              <1> 	mov ax,[%4+2]
  3060                              <1> 	mov word [bp+4], ax
  3061                              <1> 	mov ax,[%4]
  3062                              <1> 	mov word [bp+6], ax
  3063                              <1> 	call proc_mul32
  3064                              <1> 	mov ax,sp
  3065                              <1> 	mov bp,ax
  3066                              <1> 	mov ax,%5
  3067                              <1> 	mov ds,ax
  3068                              <1> 	mov word ax, [bp+8]
  3069                              <1> 	mov word [%6+2], ax
  3070                              <1> 	mov word ax, [bp+0x0A]
  3071                              <1> 	mov word [%6], ax
  3072                              <1> 	stkclose 0x0C
  3073                              <1> %endmacro	
  3074                              <1> 	
  3075                              <1> %macro add32 6
  3076                              <1> 	stkopen 0x0C
  3077                              <1> 	mov ax,%1
  3078                              <1> 	mov ds,ax
  3079                              <1> 	mov ax,[%2+2]
  3080                              <1> 	mov word [bp+0], ax
  3081                              <1> 	mov ax,[%2]
  3082                              <1> 	mov word [bp+2], ax
  3083                              <1> 	mov ax,%3
  3084                              <1> 	mov ds,ax
  3085                              <1> 	mov ax,[%4+2]
  3086                              <1> 	mov word [bp+4], ax
  3087                              <1> 	mov ax,[%4]
  3088                              <1> 	mov word [bp+6], ax
  3089                              <1> 	call proc_add32
  3090                              <1> 	mov ax,sp
  3091                              <1> 	mov bp,ax
  3092                              <1> 	mov ax,%5
  3093                              <1> 	mov ds,ax
  3094                              <1> 	mov word ax, [bp+8]
  3095                              <1> 	mov word [%6+2], ax
  3096                              <1> 	mov word ax, [bp+0x0A]
  3097                              <1> 	mov word [%6], ax
  3098                              <1> 	stkclose 0x0C
  3099                              <1> %endmacro
  3100                              <1> 
  3101                              <1> %macro sub32 6
  3102                              <1> 	stkopen 0x0C
  3103                              <1> 	mov ax,%1
  3104                              <1> 	mov ds,ax
  3105                              <1> 	mov ax,[%2+2]
  3106                              <1> 	mov word [bp+0], ax
  3107                              <1> 	mov ax,[%2]
  3108                              <1> 	mov word [bp+2], ax
  3109                              <1> 	mov ax,%3
  3110                              <1> 	mov ds,ax
  3111                              <1> 	mov ax,[%4+2]
  3112                              <1> 	mov word [bp+4], ax
  3113                              <1> 	mov ax,[%4]
  3114                              <1> 	mov word [bp+6], ax
  3115                              <1> 	call proc_sub32
  3116                              <1> 	mov ax,sp
  3117                              <1> 	mov bp,ax
  3118                              <1> 	mov ax,%5
  3119                              <1> 	mov ds,ax
  3120                              <1> 	mov word ax, [bp+8]
  3121                              <1> 	mov word [%6+2], ax
  3122                              <1> 	mov word ax, [bp+0x0A]
  3123                              <1> 	mov word [%6], ax
  3124                              <1> 	stkclose 0x0C
  3125                              <1> %endmacro
  3126                              <1> 
  3127                              <1> %macro idiv32 10
  3128                              <1> 	stkopen 0x11
  3129                              <1> 	mov ax,%1
  3130                              <1> 	mov ds,ax
  3131                              <1> 	mov ax,[%2+2]
  3132                              <1> 	mov word [bp+0], ax
  3133                              <1> 	mov ax,[%2]
  3134                              <1> 	mov word [bp+2], ax
  3135                              <1> 	mov ax,%3
  3136                              <1> 	mov ds,ax
  3137                              <1> 	mov ax,[%4+2]
  3138                              <1> 	mov word [bp+4], ax
  3139                              <1> 	mov ax,[%4]
  3140                              <1> 	mov word [bp+6], ax
  3141                              <1> 	call proc_idiv32
  3142                              <1> 	mov ax,sp
  3143                              <1> 	mov bp,ax
  3144                              <1> 	mov ax,%5
  3145                              <1> 	mov ds,ax
  3146                              <1> 	mov word ax, [bp+8]
  3147                              <1> 	mov word [%6+2], ax
  3148                              <1> 	mov word ax, [bp+0x0A]
  3149                              <1> 	mov word [%6], ax
  3150                              <1> 	mov ax,%7
  3151                              <1> 	mov ds,ax
  3152                              <1> 	mov word ax,[bp+0x0C]
  3153                              <1> 	mov word [%8+2],ax
  3154                              <1> 	mov word ax,[bp+0x0E]
  3155                              <1> 	mov word [%8],ax
  3156                              <1> 	mov ax,%9
  3157                              <1> 	mov ds,ax
  3158                              <1> 	mov byte al,[bp+0x10]
  3159                              <1> 	mov byte [%10],al
  3160                              <1> 	stkclose 0x11
  3161                              <1> %endmacro
  3162                              <1> 
  3163                              <1> %macro imul32 6
  3164                              <1> 	stkopen 0x0C
  3165                              <1> 	mov ax,%1
  3166                              <1> 	mov ds,ax
  3167                              <1> 	mov ax,[%2+2]
  3168                              <1> 	mov word [bp+0], ax
  3169                              <1> 	mov ax,[%2]
  3170                              <1> 	mov word [bp+2], ax
  3171                              <1> 	mov ax,%3
  3172                              <1> 	mov ds,ax
  3173                              <1> 	mov ax,[%4+2]
  3174                              <1> 	mov word [bp+4], ax
  3175                              <1> 	mov ax,[%4]
  3176                              <1> 	mov word [bp+6], ax
  3177                              <1> 	call proc_imul32
  3178                              <1> 	mov ax,sp
  3179                              <1> 	mov bp,ax
  3180                              <1> 	mov ax,%5
  3181                              <1> 	mov ds,ax
  3182                              <1> 	mov word ax, [bp+8]
  3183                              <1> 	mov word [%6+2], ax
  3184                              <1> 	mov word ax, [bp+0x0A]
  3185                              <1> 	mov word [%6], ax
  3186                              <1> 	stkclose 0x0C
  3187                              <1> %endmacro
  3188                              <1> 	
  3189                              <1> %macro cmp32 3
  3190                              <1> 	cmp32 cs, %1, cs, %2, %3
  3191                              <1> %endmacro	
  3192                              <1> 	
  3193                              <1> %macro cmp32 5
  3194                              <1> 	stkopen 9
  3195                              <1> 	mov ax,%1
  3196                              <1> 	mov ds,ax
  3197                              <1> 	mov word ax,[%2+2]
  3198                              <1> 	mov word [bp+0], ax
  3199                              <1> 	mov word ax,[%2]
  3200                              <1> 	mov word [bp+2], ax	
  3201                              <1> 	mov ax,%3
  3202                              <1> 	mov ds,ax
  3203                              <1> 	mov word ax,[%4+2]
  3204                              <1> 	mov word [bp+4], ax
  3205                              <1> 	mov word ax,[%4]
  3206                              <1> 	mov word [bp+6], ax	
  3207                              <1> 	call proc_cmp32
  3208                              <1> 	mov ax,sp
  3209                              <1> 	mov bp,ax
  3210                              <1> 	mov al,[bp+8]
  3211                              <1> 	mov byte %5,al
  3212                              <1> 	stkclose 9
  3213                              <1> %endmacro
  3214                              <1> 	
  3215                              <1> %macro shl32 2
  3216                              <1> 	shl32 cs, %1, %2
  3217                              <1> %endmacro	
  3218                              <1> 	
  3219                              <1> %macro shl32 3
  3220                              <1> 	stkopen 5
  3221                              <1> 	mov ax,%1
  3222                              <1> 	mov ds,ax
  3223                              <1> 	mov word ax,[%2+2]
  3224                              <1> 	mov word [bp+0], ax
  3225                              <1> 	mov word ax,[%2]
  3226                              <1> 	mov word [bp+2], ax
  3227                              <1> 	mov byte al, %3
  3228                              <1> 	mov byte [bp+4], al 
  3229                              <1> 	call proc_shl32
  3230                              <1> 	mov ax,sp
  3231                              <1> 	mov bp,ax
  3232                              <1> 	mov ax,%1
  3233                              <1> 	mov ds,ax
  3234                              <1> 	mov ax,[bp+0]
  3235                              <1> 	mov word [%2+2],ax
  3236                              <1> 	mov ax,[bp+2]
  3237                              <1> 	mov word [%2],ax
  3238                              <1> 	stkclose 5
  3239                              <1> %endmacro
  3240                              <1> 
  3241                              <1> 
  3242                              <1> %macro shr32 2
  3243                              <1> 	shr32 cs, %1, %2
  3244                              <1> %endmacro	
  3245                              <1> 	
  3246                              <1> %macro shr32 3
  3247                              <1> 	stkopen 5
  3248                              <1> 	mov ax,%1
  3249                              <1> 	mov ds,ax
  3250                              <1> 	mov word ax,[%2+2]
  3251                              <1> 	mov word [bp+0], ax
  3252                              <1> 	mov word ax,[%2]
  3253                              <1> 	mov word [bp+2], ax
  3254                              <1> 	mov byte al, %3
  3255                              <1> 	mov byte [bp+4], al 
  3256                              <1> 	call proc_shr32
  3257                              <1> 	mov ax,sp
  3258                              <1> 	mov bp,ax
  3259                              <1> 	mov ax,%1
  3260                              <1> 	mov ds,ax
  3261                              <1> 	mov ax,[bp+0]
  3262                              <1> 	mov word [%2+2],ax
  3263                              <1> 	mov ax,[bp+2]
  3264                              <1> 	mov word [%2],ax
  3265                              <1> 	stkclose 5
  3266                              <1> %endmacro
  3267                              <1> 
  3268                              <1> %macro inc16 2
  3269                              <1> 	mov ax,%1
  3270                              <1> 	mov ds,ax
  3271                              <1> 	inc word [%2]
  3272                              <1> %endmacro
  3273                              <1> 
  3274                              <1> %macro dec16 2
  3275                              <1> 	mov ax,%1
  3276                              <1> 	mov ds,ax
  3277                              <1> 	dec word [%2]
  3278                              <1> %endmacro
  3279                              <1> 
  3280                              <1> %macro add16 4	
  3281                              <1> 	mov ax,%3
  3282                              <1> 	mov ds,ax
  3283                              <1> 	mov bx,[%4]	
  3284                              <1> 	mov ax,%1
  3285                              <1> 	mov ds,ax	
  3286                              <1> 	add [%2],bx
  3287                              <1> %endmacro
  3288                              <1> 
  3289                              <1> %macro sub16 4
  3290                              <1> 	mov ax,%3
  3291                              <1> 	mov ds,ax
  3292                              <1> 	mov bx,[%4]
  3293                              <1> 	mov ax,%1
  3294                              <1> 	mov ds,ax
  3295                              <1> 	sub [%2],bx
  3296                              <1> %endmacro
  3297                              <1> 
  3298                              <1> %macro mul16 4
  3299                              <1> 	mov ax,%1
  3300                              <1> 	mov ds,ax
  3301                              <1> 	mov bx,[%2]
  3302                              <1> 	mov ax,%3
  3303                              <1> 	mov ds,ax
  3304                              <1> 	mov cx,[%4]
  3305                              <1> 	
  3306                              <1> 	mov ax,bx
  3307                              <1> 	imul cx
  3308                              <1> 	
  3309                              <1> 	mov dx,%1
  3310                              <1> 	mov ds,dx
  3311                              <1> 	mov [%2],ax
  3312                              <1> %endmacro
  3313                              <1> 
  3314                              <1> %macro div16 4
  3315                              <1> 	mov ax,%1
  3316                              <1> 	mov ds,ax
  3317                              <1> 	mov bx,[%2]
  3318                              <1> 	mov ax,%3
  3319                              <1> 	mov ds,ax
  3320                              <1> 	mov cx,[%4]
  3321                              <1> 	
  3322                              <1> 	xor dx,dx
  3323                              <1> 	mov ax,bx
  3324                              <1> 	idiv cx
  3325                              <1> 	
  3326                              <1> 	mov dx,%1
  3327                              <1> 	mov ds,dx
  3328                              <1> 	mov [%2],ax
  3329                              <1> %endmacro
  3330                              <1> 
  3331                              <1> 
  3332                              <1> %macro mod16 4
  3333                              <1> 	mov ax,%1
  3334                              <1> 	mov ds,ax
  3335                              <1> 	mov bx,[%2]
  3336                              <1> 	mov ax,%3
  3337                              <1> 	mov ds,ax
  3338                              <1> 	mov cx,[%4]
  3339                              <1> 	
  3340                              <1> 	xor dx,dx
  3341                              <1> 	mov ax,bx
  3342                              <1> 	idiv cx
  3343                              <1> 	
  3344                              <1> 	mov bx,%1
  3345                              <1> 	mov ds,bx
  3346                              <1> 	mov [%2],dx
  3347                              <1> %endmacro
  3348                              <1> 
  3349                              <1> %macro cmp16 5
  3350                              <1> 	mov ax,%1
  3351                              <1> 	mov ds,ax
  3352                              <1> 	mov bx,[%2]
  3353                              <1> 	mov ax,%3
  3354                              <1> 	mov ds,ax
  3355                              <1> 	mov	cx,[%4]
  3356                              <1> 	
  3357                              <1> 	cmp bx,cx
  3358                              <1> 	jg %%above
  3359                              <1> 	jl %%below
  3360                              <1> 		mov byte %5, 0
  3361                              <1> 		jmp %%endcmp
  3362                              <1> 	%%above:
  3363                              <1> 		mov byte %5, 1
  3364                              <1> 		jmp %%endcmp
  3365                              <1> 	%%below:
  3366                              <1> 		mov byte %5, -1
  3367                              <1> 	%%endcmp:
  3368                              <1> %endmacro
  3369                              <1> 
  3370                              <1> %macro chgsig 2
  3371                              <1> 	mov ax,%1
  3372                              <1> 	mov ds,ax
  3373                              <1> 	mov ax,[%2]
  3374                              <1> 	mov bx,0xFFFF
  3375                              <1> 	sub bx,ax
  3376                              <1> 	inc bx
  3377                              <1> 	mov [%2],bx
  3378                              <1> %endmacro
  3379                              <1> 	
  3380                              <1> %endif
  3381                                  %include "lib/speaker.mac"
  3382                              <1> 
  3383                              <1> %ifndef SPEAKER_MAC
  3384                              <1> 	%define SPEAKER_MAC
  3385                              <1> 
  3386                              <1> 	%include "lib/speaker.asm"
  3387                              <2> 
  3388                              <2> %ifndef SPEAKER_ASM
  3389                              <2> 	%define SPEAKER_ASM
  3390                              <2> 	
  3391                              <2> section .data
  3392                              <2> 
  3393                              <2> proc_speaker_init:
  3394 000009C1 B0B6                <2> 	mov al,10110110b
  3395 000009C3 E643                <2> 	out 43h, al	
  3396                              <2> 	
  3397 000009C5 C3                  <2> 	ret
  3398                              <2> 
  3399                              <2> proc_speaker_start:
  3400 000009C6 E461                <2> 	in al, 61h
  3401 000009C8 0C03                <2> 	or al, 0x03
  3402 000009CA E661                <2> 	out 61h, al
  3403                              <2> 	
  3404 000009CC C3                  <2> 	ret	
  3405                              <2> 	
  3406                              <2> proc_speaker_setf:
  3407 000009CD 89E0                <2> 	mov ax,sp
  3408 000009CF 89C5                <2> 	mov bp,ax
  3409                              <2> 	
  3410 000009D1 8B5E02              <2> 	mov bx,[bp+2]
  3411 000009D4 BA1200              <2> 	mov dx, 0012h
  3412 000009D7 B8DC34              <2> 	mov ax, 34DCh
  3413 000009DA F7F3                <2> 	div bx
  3414                              <2> 	
  3415 000009DC E642                <2> 	out 42h, al
  3416 000009DE 88E0                <2> 	mov al, ah
  3417 000009E0 E642                <2> 	out 42h, al
  3418                              <2> 	
  3419 000009E2 C3                  <2> 	ret
  3420                              <2> 	
  3421                              <2> proc_speaker_stop:
  3422 000009E3 E461                <2> 	in al, 61h
  3423 000009E5 24FC                <2> 	and al, 0xFC
  3424 000009E7 E661                <2> 	out 61h, al
  3425                              <2> 
  3426 000009E9 C3                  <2> 	ret
  3427                              <2> 	
  3428                              <2> 	
  3429                              <2> %endif
  3430                              <1> 
  3431                              <1> %macro speaker_setf 1
  3432                              <1> 	speaker_setf cs, %1
  3433                              <1> %endmacro
  3434                              <1> 
  3435                              <1> %macro speaker_init 0
  3436                              <1> 	call proc_speaker_init
  3437                              <1> %endmacro
  3438                              <1> 
  3439                              <1> %macro speaker_start 0
  3440                              <1> 	call proc_speaker_start
  3441                              <1> %endmacro
  3442                              <1> 
  3443                              <1> %macro speaker_stop 0
  3444                              <1> 	call proc_speaker_stop
  3445                              <1> %endmacro
  3446                              <1> 
  3447                              <1> %macro speaker_setf 2
  3448                              <1> 	stkopen 0x04
  3449                              <1> 	mov ax,%1
  3450                              <1> 	mov ds,ax
  3451                              <1> 	mov ax,[%2]
  3452                              <1> 	mov [bp+0],ax
  3453                              <1> 	call proc_speaker_setf	
  3454                              <1> 	stkclose 0x04	
  3455                              <1> %endmacro
  3456                              <1> 	
  3457                              <1> %endif
  3458                                  
  3459                                  section .data
  3460 000009EA 20A10700                	SLEEP: dd 500000
  3461 000009EE 0800                    	COUNT: dw 8
  3462 000009F0 E803                    	FREQ: dw 1000
  3463 000009F2 6400                    	FREQINC: dw 100
  3464 000009F4 E803                    	FREQINC2: dw 1000
  3465                                  
  3466 000009F6 00000000                	sleep: dd 0
  3467 000009FA 0000                    	freq: dw 0
  3468 000009FC 0000                    	freqinc: dw 0
  3469 000009FE 0000                    	count: dw 0
  3470                                  
  3471                                  section .text
  3472                                  	global _start
  3473                                  	
  3474                                  _start:		
  3475                                  	mov16 freq, FREQ
  3476                              <1>  mov16 cs, %1, cs, %2
  3477 00000000 8CC8                <2>  mov ax,%3
  3478 00000002 8ED8                <2>  mov ds,ax
  3479 00000004 8B1E[F009]          <2>  mov bx,[%4]
  3480 00000008 8CC8                <2>  mov ax,%1
  3481 0000000A 8ED8                <2>  mov ds,ax
  3482 0000000C 891E[FA09]          <2>  mov [%2],bx
  3483                                  
  3484                                  	speaker_init
  3485 00000010 E8(C109)            <1>  call proc_speaker_init
  3486                                  	
  3487                                  	tocar:
  3488                                  	mov32 sleep, SLEEP
  3489                              <1>  mov32 cs, %1, cs, %2
  3490 00000013 8CC8                <2>  mov ax,%3
  3491 00000015 8ED8                <2>  mov ds,ax
  3492 00000017 8B0E[EC09]          <2>  mov cx,[%4+2]
  3493 0000001B 8B16[EA09]          <2>  mov dx,[%4]
  3494 0000001F 8CC8                <2>  mov ax,%1
  3495 00000021 8ED8                <2>  mov ds,ax
  3496 00000023 890E[F809]          <2>  mov [%2+2],cx
  3497 00000027 8916[F609]          <2>  mov [%2],dx
  3498                                  	mov16 count, COUNT
  3499                              <1>  mov16 cs, %1, cs, %2
  3500 0000002B 8CC8                <2>  mov ax,%3
  3501 0000002D 8ED8                <2>  mov ds,ax
  3502 0000002F 8B1E[EE09]          <2>  mov bx,[%4]
  3503 00000033 8CC8                <2>  mov ax,%1
  3504 00000035 8ED8                <2>  mov ds,ax
  3505 00000037 891E[FE09]          <2>  mov [%2],bx
  3506                                  	mov16 freqinc, FREQINC
  3507                              <1>  mov16 cs, %1, cs, %2
  3508 0000003B 8CC8                <2>  mov ax,%3
  3509 0000003D 8ED8                <2>  mov ds,ax
  3510 0000003F 8B1E[F209]          <2>  mov bx,[%4]
  3511 00000043 8CC8                <2>  mov ax,%1
  3512 00000045 8ED8                <2>  mov ds,ax
  3513 00000047 891E[FC09]          <2>  mov [%2],bx
  3514                                  	
  3515                                  	speaker_start	
  3516 0000004B E8(C609)            <1>  call proc_speaker_start
  3517                                  	printf "Tocando "	
  3518                              <1>  %rep %0
  3519                              <1>  __printf %1
  3520                              <1>  %rotate 1
  3521                              <1>  %endrep
  3522                              <2>  __printf %1
  3523                              <3>  section .data
  3524 00000A00 546F63616E646F2000  <3>  %%str: db %1,0
  3525                              <3>  section .text
  3526                              <3>  prtstr cs, %%str
  3527                              <4>  stkopen 4
  3528 0000004E 83EC04              <5>  sub word sp, %1
  3529 00000051 54                  <5>  push sp
  3530 00000052 5D                  <5>  pop bp
  3531 00000053 8C4E00              <4>  mov word [bp], %1
  3532 00000056 C74602[000A]        <4>  mov word [bp+2], %2
  3533 0000005B E8(2804)            <4>  call proc_prtstr
  3534                              <4>  stkclose 4
  3535 0000005E 83C404              <5>  add word sp, %1
  3536                              <2>  %rotate 1
  3537                                  	
  3538                                  	l1:
  3539                                  		int16toreg count, cx
  3540                              <1>  int16toreg cs, %1, %2
  3541 00000061 68[FE09]            <2>  push %2
  3542 00000064 0E                  <2>  push %1
  3543 00000065 1F                  <2>  pop ds
  3544 00000066 5E                  <2>  pop si
  3545 00000067 8B0C                <2>  mov word %3,[si]
  3546 00000069 83F900                  		cmp cx,0
  3547 0000006C 7468                    		jz l2
  3548                                  		
  3549                                  		int16toreg freq, ax
  3550                              <1>  int16toreg cs, %1, %2
  3551 0000006E 68[FA09]            <2>  push %2
  3552 00000071 0E                  <2>  push %1
  3553 00000072 1F                  <2>  pop ds
  3554 00000073 5E                  <2>  pop si
  3555 00000074 8B04                <2>  mov word %3,[si]
  3556                                  		prthex16 ax
  3557                              <1>  stkopen 3
  3558 00000076 83EC03              <2>  sub word sp, %1
  3559 00000079 54                  <2>  push sp
  3560 0000007A 5D                  <2>  pop bp
  3561 0000007B 894600              <1>  mov word [bp], %1
  3562 0000007E C6460201            <1>  mov byte [bp+2], TRUE
  3563 00000082 E8(2C03)            <1>  call proc_prthex16
  3564                              <1>  stkclose 3
  3565 00000085 83C403              <2>  add word sp, %1
  3566                                  		prtch 20h
  3567                              <1>  __prtch %1
  3568                              <2>  stkopen 1
  3569 00000088 83EC01              <3>  sub word sp, %1
  3570 0000008B 54                  <3>  push sp
  3571 0000008C 5D                  <3>  pop bp
  3572 0000008D C6460020            <2>  mov byte [ bp ], %1
  3573 00000091 E8(4E04)            <2>  call proc_prtch
  3574                              <2>  stkclose 1
  3575 00000094 83C401              <3>  add word sp, %1
  3576                                  						
  3577                                  		speaker_setf freq 
  3578                              <1>  speaker_setf cs, %1
  3579                              <2>  stkopen 0x04
  3580 00000097 83EC04              <3>  sub word sp, %1
  3581 0000009A 54                  <3>  push sp
  3582 0000009B 5D                  <3>  pop bp
  3583 0000009C 8CC8                <2>  mov ax,%1
  3584 0000009E 8ED8                <2>  mov ds,ax
  3585 000000A0 A1[FA09]            <2>  mov ax,[%2]
  3586 000000A3 894600              <2>  mov [bp+0],ax
  3587 000000A6 E8(CD09)            <2>  call proc_speaker_setf
  3588                              <2>  stkclose 0x04
  3589 000000A9 83C404              <3>  add word sp, %1
  3590                                  				
  3591                                  		delay sleep		
  3592                              <1>  delay cs, %1
  3593 000000AC 8CC8                <2>  mov ax,%1
  3594 000000AE 8ED8                <2>  mov ds,ax
  3595                              <2> 
  3596 000000B0 B486                <2>  mov ah,86h
  3597 000000B2 8B0E[F809]          <2>  mov cx,[%2+2]
  3598 000000B6 8B16[F609]          <2>  mov dx,[%2]
  3599 000000BA CD15                <2>  int 15h
  3600                                  		
  3601                                  		add16 freq, freqinc
  3602                              <1>  add16 cs, %1, cs, %2
  3603 000000BC 8CC8                <2>  mov ax,%3
  3604 000000BE 8ED8                <2>  mov ds,ax
  3605 000000C0 8B1E[FC09]          <2>  mov bx,[%4]
  3606 000000C4 8CC8                <2>  mov ax,%1
  3607 000000C6 8ED8                <2>  mov ds,ax
  3608 000000C8 011E[FA09]          <2>  add [%2],bx
  3609                                  		
  3610                                  		dec16 count
  3611                              <1>  dec16 cs, %1
  3612 000000CC 8CC8                <2>  mov ax,%1
  3613 000000CE 8ED8                <2>  mov ds,ax
  3614 000000D0 FF0E[FE09]          <2>  dec word [%2]
  3615 000000D4 EB8B                    		jmp l1
  3616                                  	l2:
  3617                                  	
  3618                                  	speaker_stop
  3619 000000D6 E8(E309)            <1>  call proc_speaker_stop
  3620                                  	
  3621                                  	add16 freq, FREQINC2 
  3622                              <1>  add16 cs, %1, cs, %2
  3623 000000D9 8CC8                <2>  mov ax,%3
  3624 000000DB 8ED8                <2>  mov ds,ax
  3625 000000DD 8B1E[F409]          <2>  mov bx,[%4]
  3626 000000E1 8CC8                <2>  mov ax,%1
  3627 000000E3 8ED8                <2>  mov ds,ax
  3628 000000E5 011E[FA09]          <2>  add [%2],bx
  3629                                  	
  3630                                  	printf " (ESQ) - Sair"
  3631                              <1>  %rep %0
  3632                              <1>  __printf %1
  3633                              <1>  %rotate 1
  3634                              <1>  %endrep
  3635                              <2>  __printf %1
  3636                              <3>  section .data
  3637 00000A09 202845535129202D20- <3>  %%str: db %1,0
  3638 00000A12 5361697200          <3>
  3639                              <3>  section .text
  3640                              <3>  prtstr cs, %%str
  3641                              <4>  stkopen 4
  3642 000000E9 83EC04              <5>  sub word sp, %1
  3643 000000EC 54                  <5>  push sp
  3644 000000ED 5D                  <5>  pop bp
  3645 000000EE 8C4E00              <4>  mov word [bp], %1
  3646 000000F1 C74602[090A]        <4>  mov word [bp+2], %2
  3647 000000F6 E8(2804)            <4>  call proc_prtstr
  3648                              <4>  stkclose 4
  3649 000000F9 83C404              <5>  add word sp, %1
  3650                              <2>  %rotate 1
  3651                                  	prtln
  3652                              <1>  __prtln
  3653 000000FC E8(5C04)            <2>  call proc_prtln
  3654 000000FF B400                    	mov ah,00h
  3655 00000101 CD16                    	int 16h
  3656 00000103 3C1B                    	cmp al,27
  3657 00000105 0F850AFF                	jne tocar
  3658                                  	
  3659                                  	printf "Saindo...."
  3660                              <1>  %rep %0
  3661                              <1>  __printf %1
  3662                              <1>  %rotate 1
  3663                              <1>  %endrep
  3664                              <2>  __printf %1
  3665                              <3>  section .data
  3666 00000A17 5361696E646F2E2E2E- <3>  %%str: db %1,0
  3667 00000A20 2E00                <3>
  3668                              <3>  section .text
  3669                              <3>  prtstr cs, %%str
  3670                              <4>  stkopen 4
  3671 00000109 83EC04              <5>  sub word sp, %1
  3672 0000010C 54                  <5>  push sp
  3673 0000010D 5D                  <5>  pop bp
  3674 0000010E 8C4E00              <4>  mov word [bp], %1
  3675 00000111 C74602[170A]        <4>  mov word [bp+2], %2
  3676 00000116 E8(2804)            <4>  call proc_prtstr
  3677                              <4>  stkclose 4
  3678 00000119 83C404              <5>  add word sp, %1
  3679                              <2>  %rotate 1
  3680                                  	
  3681 0000011C CD19                    	int 19h 	
  3682                                  	
  3683 0000011E EBFE                    	jmp $

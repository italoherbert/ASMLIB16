     1                                  
     2                                  %include "lib/system.mac"
     3                              <1>  
     4                              <1> %ifndef SYSTEM_MAC
     5                              <1>  	%define SYSTEM_MAC
     6                              <1>  	
     7                              <1> 	%ifndef TRUE
     8                              <1> 		%define TRUE 01h
     9                              <1> 	%endif
    10                              <1> 	%ifndef FALSE
    11                              <1> 		%define FALSE 00h
    12                              <1> 	%endif 	
    13                              <1>  	
    14                              <1>  	%include "lib/kernel.asmh"
    15                              <2> %ifndef KERNEL_ASMH
    16                              <2> 	%define KERNEL_ASMH
    17                              <2> 
    18                              <2> section .data
    19                              <2> 
    20                              <2> 	kernel_segment: equ 0x50
    21                              <2> 
    22                              <2> 	mformat: equ 0x144
    23                              <2> 	malloc: equ 0x175
    24                              <2> 	laddr: equ 0x1EB
    25                              <2> 	faddr: equ 0x201
    26                              <2> 
    27                              <2> %endif
    28                              <1>  	 	
    29                              <1> %macro mformat 4
    30                              <1> 	stkopen 8
    31                              <1> 	mov word [ bp + 0 ], %1
    32                              <1> 	mov word [ bp + 2 ], %2
    33                              <1> 	mov word [ bp + 4 ], %3
    34                              <1> 	mov word [ bp + 6 ], %4
    35                              <1> 	call kernel_segment:mformat
    36                              <1> 	stkclose 8
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> %macro malloc 6
    40                              <1> 	stkopen 0Bh
    41                              <1> 	mov word [ bp + 4 ], %3
    42                              <1> 	mov word [ bp + 6 ], %4
    43                              <1> 	mov word [ bp + 8 ], %5	
    44                              <1> 	call kernel_segment:malloc
    45                              <1> 	push sp
    46                              <1> 	pop bp
    47                              <1> 	mov word %1, [ bp ]
    48                              <1> 	mov word %2, [ bp + 2 ]
    49                              <1> 	mov byte %6, [ bp + 0x0A ]
    50                              <1> 	stkclose 0Bh
    51                              <1> %endmacro 	
    52                              <1> 
    53                              <1> %macro laddr 2
    54                              <1> 	laddr %1, %2, %1, %2
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro faddr 2
    58                              <1> 	faddr %1, %2, %1, %2
    59                              <1> %endmacro
    60                              <1>  	
    61                              <1> %macro laddr 4
    62                              <1> 	stkopen 8
    63                              <1> 	mov word [ bp + 4 ], %3
    64                              <1> 	mov word [ bp + 6 ], %4	
    65                              <1> 	call kernel_segment:laddr
    66                              <1> 	push sp
    67                              <1> 	pop bp
    68                              <1> 	mov word %1, [ bp + 0 ]
    69                              <1> 	mov word %2, [ bp + 2 ]	
    70                              <1> 	stkclose 8
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro faddr 4
    74                              <1> 	stkopen 8
    75                              <1> 	mov word [ bp + 4 ], %3
    76                              <1> 	mov word [ bp + 6 ], %4	
    77                              <1> 	call kernel_segment:faddr
    78                              <1> 	push sp
    79                              <1> 	pop bp
    80                              <1> 	mov word %1, [ bp + 0 ]
    81                              <1> 	mov word %2, [ bp + 2 ]	
    82                              <1> 	stkclose 8
    83                              <1> %endmacro	
    84                              <1>  
    85                              <1> 
    86                              <1> %macro stkopen 1		
    87                              <1> 	sub word sp, %1
    88                              <1> 	push sp
    89                              <1> 	pop bp
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> %macro stkclose 1
    93                              <1> 	add word sp, %1
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> %macro stkload 1-* 	
    97                              <1>  	%rep %0
    98                              <1>  	 	%rotate -1
    99                              <1>  		pop %1
   100                              <1>  	%endrep
   101                              <1>  	%rep %0
   102                              <1>  		push %1
   103                              <1>  		%rotate 1
   104                              <1>  	%endrep
   105                              <1> %endmacro
   106                              <1> 
   107                              <1> %macro stkpush 1-* 	
   108                              <1>  	%rep %0
   109                              <1>  		push %1
   110                              <1>  		%rotate 1
   111                              <1>  	%endrep 	
   112                              <1> %endmacro
   113                              <1>  
   114                              <1> %macro stkpop 1-*
   115                              <1>  	%rep %0
   116                              <1>  	 	%rotate -1
   117                              <1>  		pop %1
   118                              <1>  	%endrep 	 	
   119                              <1> %endmacro
   120                              <1> 
   121                              <1> %macro toreg16 3
   122                              <1> 	push %1
   123                              <1> 	pop ds
   124                              <1> 	mov word %3, [%2]
   125                              <1> %endmacro
   126                              <1> 
   127                              <1> %macro toreg8 3
   128                              <1> 	push %1
   129                              <1> 	pop ds
   130                              <1> 	mov byte %3, [%2]
   131                              <1> %endmacro
   132                              <1> 
   133                              <1> %macro tovar16 3
   134                              <1> 	push %1
   135                              <1> 	pop ds
   136                              <1> 	mov word [%2], %3
   137                              <1> %endmacro
   138                              <1> 
   139                              <1> %macro tovar8 3
   140                              <1> 	push %1
   141                              <1> 	pop ds
   142                              <1> 	mov byte [%2], %3
   143                              <1> %endmacro 
   144                              <1>  	
   145                              <1> %endif 
   146                                  %include "lib/stdio.mac"
   147                              <1> 
   148                              <1> %ifndef STDIO_MAC
   149                              <1> 	%define STDIO_MAC
   150                              <1> 	
   151                              <1> 	%include "lib/stdio.asm"
   152                              <2> 
   153                              <2> %ifndef STDIO_ASM
   154                              <2> 	%define STDIO_ASM
   155                              <2> 	
   156                              <2> 	%include "lib/system.mac"
   157                              <3>  
   158                              <3> %ifndef SYSTEM_MAC
   159                              <3>  	%define SYSTEM_MAC
   160                              <3>  	
   161                              <3> 	%ifndef TRUE
   162                              <3> 		%define TRUE 01h
   163                              <3> 	%endif
   164                              <3> 	%ifndef FALSE
   165                              <3> 		%define FALSE 00h
   166                              <3> 	%endif 	
   167                              <3>  	
   168                              <3>  	%include "lib/kernel.asmh"
   169                              <3>  	 	
   170                              <3> %macro mformat 4
   171                              <3> 	stkopen 8
   172                              <3> 	mov word [ bp + 0 ], %1
   173                              <3> 	mov word [ bp + 2 ], %2
   174                              <3> 	mov word [ bp + 4 ], %3
   175                              <3> 	mov word [ bp + 6 ], %4
   176                              <3> 	call kernel_segment:mformat
   177                              <3> 	stkclose 8
   178                              <3> %endmacro
   179                              <3> 
   180                              <3> %macro malloc 6
   181                              <3> 	stkopen 0Bh
   182                              <3> 	mov word [ bp + 4 ], %3
   183                              <3> 	mov word [ bp + 6 ], %4
   184                              <3> 	mov word [ bp + 8 ], %5	
   185                              <3> 	call kernel_segment:malloc
   186                              <3> 	push sp
   187                              <3> 	pop bp
   188                              <3> 	mov word %1, [ bp ]
   189                              <3> 	mov word %2, [ bp + 2 ]
   190                              <3> 	mov byte %6, [ bp + 0x0A ]
   191                              <3> 	stkclose 0Bh
   192                              <3> %endmacro 	
   193                              <3> 
   194                              <3> %macro laddr 2
   195                              <3> 	laddr %1, %2, %1, %2
   196                              <3> %endmacro
   197                              <3> 
   198                              <3> %macro faddr 2
   199                              <3> 	faddr %1, %2, %1, %2
   200                              <3> %endmacro
   201                              <3>  	
   202                              <3> %macro laddr 4
   203                              <3> 	stkopen 8
   204                              <3> 	mov word [ bp + 4 ], %3
   205                              <3> 	mov word [ bp + 6 ], %4	
   206                              <3> 	call kernel_segment:laddr
   207                              <3> 	push sp
   208                              <3> 	pop bp
   209                              <3> 	mov word %1, [ bp + 0 ]
   210                              <3> 	mov word %2, [ bp + 2 ]	
   211                              <3> 	stkclose 8
   212                              <3> %endmacro
   213                              <3> 
   214                              <3> %macro faddr 4
   215                              <3> 	stkopen 8
   216                              <3> 	mov word [ bp + 4 ], %3
   217                              <3> 	mov word [ bp + 6 ], %4	
   218                              <3> 	call kernel_segment:faddr
   219                              <3> 	push sp
   220                              <3> 	pop bp
   221                              <3> 	mov word %1, [ bp + 0 ]
   222                              <3> 	mov word %2, [ bp + 2 ]	
   223                              <3> 	stkclose 8
   224                              <3> %endmacro	
   225                              <3>  
   226                              <3> 
   227                              <3> %macro stkopen 1		
   228                              <3> 	sub word sp, %1
   229                              <3> 	push sp
   230                              <3> 	pop bp
   231                              <3> %endmacro
   232                              <3> 
   233                              <3> %macro stkclose 1
   234                              <3> 	add word sp, %1
   235                              <3> %endmacro
   236                              <3> 
   237                              <3> %macro stkload 1-* 	
   238                              <3>  	%rep %0
   239                              <3>  	 	%rotate -1
   240                              <3>  		pop %1
   241                              <3>  	%endrep
   242                              <3>  	%rep %0
   243                              <3>  		push %1
   244                              <3>  		%rotate 1
   245                              <3>  	%endrep
   246                              <3> %endmacro
   247                              <3> 
   248                              <3> %macro stkpush 1-* 	
   249                              <3>  	%rep %0
   250                              <3>  		push %1
   251                              <3>  		%rotate 1
   252                              <3>  	%endrep 	
   253                              <3> %endmacro
   254                              <3>  
   255                              <3> %macro stkpop 1-*
   256                              <3>  	%rep %0
   257                              <3>  	 	%rotate -1
   258                              <3>  		pop %1
   259                              <3>  	%endrep 	 	
   260                              <3> %endmacro
   261                              <3> 
   262                              <3> %macro toreg16 3
   263                              <3> 	push %1
   264                              <3> 	pop ds
   265                              <3> 	mov word %3, [%2]
   266                              <3> %endmacro
   267                              <3> 
   268                              <3> %macro toreg8 3
   269                              <3> 	push %1
   270                              <3> 	pop ds
   271                              <3> 	mov byte %3, [%2]
   272                              <3> %endmacro
   273                              <3> 
   274                              <3> %macro tovar16 3
   275                              <3> 	push %1
   276                              <3> 	pop ds
   277                              <3> 	mov word [%2], %3
   278                              <3> %endmacro
   279                              <3> 
   280                              <3> %macro tovar8 3
   281                              <3> 	push %1
   282                              <3> 	pop ds
   283                              <3> 	mov byte [%2], %3
   284                              <3> %endmacro 
   285                              <3>  	
   286                              <3> %endif 
   287                              <2> 	
   288                              <2> %macro __prtch 1	
   289                              <2> 	stkopen 1	
   290                              <2> 	mov byte [ bp ], %1
   291                              <2> 	call proc_prtch
   292                              <2> 	stkclose 1
   293                              <2> %endmacro
   294                              <2> 
   295                              <2> %macro __prtln 0
   296                              <2> 	call proc_prtln
   297                              <2> %endmacro	
   298                              <2> 
   299                              <2> %macro __prtsubbin8 3
   300                              <2> 	stkopen 3
   301                              <2> 	mov byte [bp+0],%1
   302                              <2> 	mov byte [bp+1],%2
   303                              <2> 	mov byte [bp+2],%3
   304                              <2> 	call proc_prtsubbin8
   305                              <2> 	stkclose 3
   306                              <2> %endmacro
   307                              <2> 	
   308                              <2> section .data
   309                              <2> 	
   310                              <2> proc_prtIEEE754:
   311 00000000 89E0                <2> 	mov ax,sp
   312 00000002 89C5                <2> 	mov bp,ax			
   313 00000004 8B4602              <2> 	mov ax,[bp+2]	
   314 00000007 50                  <2> 	push ax
   315 00000008 50                  <2> 	push ax
   316 00000009 50                  <2> 	push ax
   317 0000000A 50                  <2> 	push ax	
   318 0000000B 50                  <2> 	push ax
   319                              <2> 	
   320                              <2> 	__prtsubbin8 ah,0,1
   321                              <3>  stkopen 3
   322 0000000C 83EC03              <4>  sub word sp, %1
   323 0000000F 54                  <4>  push sp
   324 00000010 5D                  <4>  pop bp
   325 00000011 886600              <3>  mov byte [bp+0],%1
   326 00000014 C6460100            <3>  mov byte [bp+1],%2
   327 00000018 C6460201            <3>  mov byte [bp+2],%3
   328 0000001C E87201              <3>  call proc_prtsubbin8
   329                              <3>  stkclose 3
   330 0000001F 83C403              <4>  add word sp, %1
   331                              <2> 	__prtch 20h
   332                              <3>  stkopen 1
   333 00000022 83EC01              <4>  sub word sp, %1
   334 00000025 54                  <4>  push sp
   335 00000026 5D                  <4>  pop bp
   336 00000027 C6460020            <3>  mov byte [ bp ], %1
   337 0000002B E82004              <3>  call proc_prtch
   338                              <3>  stkclose 1
   339 0000002E 83C401              <4>  add word sp, %1
   340                              <2> 	__prtch 20h
   341                              <3>  stkopen 1
   342 00000031 83EC01              <4>  sub word sp, %1
   343 00000034 54                  <4>  push sp
   344 00000035 5D                  <4>  pop bp
   345 00000036 C6460020            <3>  mov byte [ bp ], %1
   346 0000003A E81104              <3>  call proc_prtch
   347                              <3>  stkclose 1
   348 0000003D 83C401              <4>  add word sp, %1
   349 00000040 58                  <2> 	pop ax
   350                              <2> 	__prtsubbin8 ah,1,5
   351                              <3>  stkopen 3
   352 00000041 83EC03              <4>  sub word sp, %1
   353 00000044 54                  <4>  push sp
   354 00000045 5D                  <4>  pop bp
   355 00000046 886600              <3>  mov byte [bp+0],%1
   356 00000049 C6460101            <3>  mov byte [bp+1],%2
   357 0000004D C6460205            <3>  mov byte [bp+2],%3
   358 00000051 E83D01              <3>  call proc_prtsubbin8
   359                              <3>  stkclose 3
   360 00000054 83C403              <4>  add word sp, %1
   361 00000057 58                  <2> 	pop ax
   362                              <2> 	__prtsubbin8 ah,5,8
   363                              <3>  stkopen 3
   364 00000058 83EC03              <4>  sub word sp, %1
   365 0000005B 54                  <4>  push sp
   366 0000005C 5D                  <4>  pop bp
   367 0000005D 886600              <3>  mov byte [bp+0],%1
   368 00000060 C6460105            <3>  mov byte [bp+1],%2
   369 00000064 C6460208            <3>  mov byte [bp+2],%3
   370 00000068 E82601              <3>  call proc_prtsubbin8
   371                              <3>  stkclose 3
   372 0000006B 83C403              <4>  add word sp, %1
   373                              <2> 	
   374 0000006E 58                  <2> 	pop ax
   375                              <2> 	__prtsubbin8 al,0,1
   376                              <3>  stkopen 3
   377 0000006F 83EC03              <4>  sub word sp, %1
   378 00000072 54                  <4>  push sp
   379 00000073 5D                  <4>  pop bp
   380 00000074 884600              <3>  mov byte [bp+0],%1
   381 00000077 C6460100            <3>  mov byte [bp+1],%2
   382 0000007B C6460201            <3>  mov byte [bp+2],%3
   383 0000007F E80F01              <3>  call proc_prtsubbin8
   384                              <3>  stkclose 3
   385 00000082 83C403              <4>  add word sp, %1
   386                              <2> 	__prtch 20h
   387                              <3>  stkopen 1
   388 00000085 83EC01              <4>  sub word sp, %1
   389 00000088 54                  <4>  push sp
   390 00000089 5D                  <4>  pop bp
   391 0000008A C6460020            <3>  mov byte [ bp ], %1
   392 0000008E E8BD03              <3>  call proc_prtch
   393                              <3>  stkclose 1
   394 00000091 83C401              <4>  add word sp, %1
   395                              <2> 	__prtch 20h
   396                              <3>  stkopen 1
   397 00000094 83EC01              <4>  sub word sp, %1
   398 00000097 54                  <4>  push sp
   399 00000098 5D                  <4>  pop bp
   400 00000099 C6460020            <3>  mov byte [ bp ], %1
   401 0000009D E8AE03              <3>  call proc_prtch
   402                              <3>  stkclose 1
   403 000000A0 83C401              <4>  add word sp, %1
   404 000000A3 58                  <2> 	pop ax
   405                              <2> 	__prtsubbin8 al,1,4
   406                              <3>  stkopen 3
   407 000000A4 83EC03              <4>  sub word sp, %1
   408 000000A7 54                  <4>  push sp
   409 000000A8 5D                  <4>  pop bp
   410 000000A9 884600              <3>  mov byte [bp+0],%1
   411 000000AC C6460101            <3>  mov byte [bp+1],%2
   412 000000B0 C6460204            <3>  mov byte [bp+2],%3
   413 000000B4 E8DA00              <3>  call proc_prtsubbin8
   414                              <3>  stkclose 3
   415 000000B7 83C403              <4>  add word sp, %1
   416                              <2> 	__prtch 20h
   417                              <3>  stkopen 1
   418 000000BA 83EC01              <4>  sub word sp, %1
   419 000000BD 54                  <4>  push sp
   420 000000BE 5D                  <4>  pop bp
   421 000000BF C6460020            <3>  mov byte [ bp ], %1
   422 000000C3 E88803              <3>  call proc_prtch
   423                              <3>  stkclose 1
   424 000000C6 83C401              <4>  add word sp, %1
   425 000000C9 58                  <2> 	pop ax
   426                              <2> 	__prtsubbin8 al,4,8
   427                              <3>  stkopen 3
   428 000000CA 83EC03              <4>  sub word sp, %1
   429 000000CD 54                  <4>  push sp
   430 000000CE 5D                  <4>  pop bp
   431 000000CF 884600              <3>  mov byte [bp+0],%1
   432 000000D2 C6460104            <3>  mov byte [bp+1],%2
   433 000000D6 C6460208            <3>  mov byte [bp+2],%3
   434 000000DA E8B400              <3>  call proc_prtsubbin8
   435                              <3>  stkclose 3
   436 000000DD 83C403              <4>  add word sp, %1
   437                              <2> 	__prtch 20h
   438                              <3>  stkopen 1
   439 000000E0 83EC01              <4>  sub word sp, %1
   440 000000E3 54                  <4>  push sp
   441 000000E4 5D                  <4>  pop bp
   442 000000E5 C6460020            <3>  mov byte [ bp ], %1
   443 000000E9 E86203              <3>  call proc_prtch
   444                              <3>  stkclose 1
   445 000000EC 83C401              <4>  add word sp, %1
   446                              <2> 	
   447 000000EF 89E0                <2> 	mov ax,sp
   448 000000F1 89C5                <2> 	mov bp,ax			
   449 000000F3 8B4604              <2> 	mov ax,[bp+4]
   450 000000F6 50                  <2> 	push ax
   451 000000F7 50                  <2> 	push ax
   452 000000F8 50                  <2> 	push ax
   453                              <2> 	
   454                              <2> 	__prtsubbin8 ah,0,4
   455                              <3>  stkopen 3
   456 000000F9 83EC03              <4>  sub word sp, %1
   457 000000FC 54                  <4>  push sp
   458 000000FD 5D                  <4>  pop bp
   459 000000FE 886600              <3>  mov byte [bp+0],%1
   460 00000101 C6460100            <3>  mov byte [bp+1],%2
   461 00000105 C6460204            <3>  mov byte [bp+2],%3
   462 00000109 E88500              <3>  call proc_prtsubbin8
   463                              <3>  stkclose 3
   464 0000010C 83C403              <4>  add word sp, %1
   465                              <2> 	__prtch 20h
   466                              <3>  stkopen 1
   467 0000010F 83EC01              <4>  sub word sp, %1
   468 00000112 54                  <4>  push sp
   469 00000113 5D                  <4>  pop bp
   470 00000114 C6460020            <3>  mov byte [ bp ], %1
   471 00000118 E83303              <3>  call proc_prtch
   472                              <3>  stkclose 1
   473 0000011B 83C401              <4>  add word sp, %1
   474 0000011E 58                  <2> 	pop ax
   475                              <2> 	__prtsubbin8 ah,4,8
   476                              <3>  stkopen 3
   477 0000011F 83EC03              <4>  sub word sp, %1
   478 00000122 54                  <4>  push sp
   479 00000123 5D                  <4>  pop bp
   480 00000124 886600              <3>  mov byte [bp+0],%1
   481 00000127 C6460104            <3>  mov byte [bp+1],%2
   482 0000012B C6460208            <3>  mov byte [bp+2],%3
   483 0000012F E85F00              <3>  call proc_prtsubbin8
   484                              <3>  stkclose 3
   485 00000132 83C403              <4>  add word sp, %1
   486                              <2> 	__prtch 20h
   487                              <3>  stkopen 1
   488 00000135 83EC01              <4>  sub word sp, %1
   489 00000138 54                  <4>  push sp
   490 00000139 5D                  <4>  pop bp
   491 0000013A C6460020            <3>  mov byte [ bp ], %1
   492 0000013E E80D03              <3>  call proc_prtch
   493                              <3>  stkclose 1
   494 00000141 83C401              <4>  add word sp, %1
   495                              <2> 	
   496 00000144 58                  <2> 	pop ax
   497                              <2> 	__prtsubbin8 al,0,4
   498                              <3>  stkopen 3
   499 00000145 83EC03              <4>  sub word sp, %1
   500 00000148 54                  <4>  push sp
   501 00000149 5D                  <4>  pop bp
   502 0000014A 884600              <3>  mov byte [bp+0],%1
   503 0000014D C6460100            <3>  mov byte [bp+1],%2
   504 00000151 C6460204            <3>  mov byte [bp+2],%3
   505 00000155 E83900              <3>  call proc_prtsubbin8
   506                              <3>  stkclose 3
   507 00000158 83C403              <4>  add word sp, %1
   508                              <2> 	__prtch 20h
   509                              <3>  stkopen 1
   510 0000015B 83EC01              <4>  sub word sp, %1
   511 0000015E 54                  <4>  push sp
   512 0000015F 5D                  <4>  pop bp
   513 00000160 C6460020            <3>  mov byte [ bp ], %1
   514 00000164 E8E702              <3>  call proc_prtch
   515                              <3>  stkclose 1
   516 00000167 83C401              <4>  add word sp, %1
   517 0000016A 58                  <2> 	pop ax
   518                              <2> 	__prtsubbin8 al,4,8
   519                              <3>  stkopen 3
   520 0000016B 83EC03              <4>  sub word sp, %1
   521 0000016E 54                  <4>  push sp
   522 0000016F 5D                  <4>  pop bp
   523 00000170 884600              <3>  mov byte [bp+0],%1
   524 00000173 C6460104            <3>  mov byte [bp+1],%2
   525 00000177 C6460208            <3>  mov byte [bp+2],%3
   526 0000017B E81300              <3>  call proc_prtsubbin8
   527                              <3>  stkclose 3
   528 0000017E 83C403              <4>  add word sp, %1
   529                              <2> 	__prtch 20h
   530                              <3>  stkopen 1
   531 00000181 83EC01              <4>  sub word sp, %1
   532 00000184 54                  <4>  push sp
   533 00000185 5D                  <4>  pop bp
   534 00000186 C6460020            <3>  mov byte [ bp ], %1
   535 0000018A E8C102              <3>  call proc_prtch
   536                              <3>  stkclose 1
   537 0000018D 83C401              <4>  add word sp, %1
   538                              <2> 	
   539 00000190 C3                  <2> 	ret
   540                              <2> 	
   541                              <2> proc_prtsubbin8:
   542 00000191 89E0                <2> 	mov ax,sp
   543 00000193 89C5                <2> 	mov bp,ax
   544                              <2> 	
   545 00000195 8A4602              <2> 	mov al,[bp+2]
   546 00000198 50                  <2> 	push ax
   547                              <2> 	
   548 00000199 8A4E03              <2> 	mov cl,[bp+3]
   549 0000019C 8A6E04              <2> 	mov ch,[bp+4]
   550 0000019F 80FD08              <2> 	cmp ch,8
   551 000001A2 7602                <2> 	jbe .l1	
   552 000001A4 B508                <2> 		mov ch,8
   553                              <2> 	.l1:		
   554 000001A6 38E9                <2> 		cmp cl,ch		
   555 000001A8 731D                <2> 		jae .l2
   556                              <2> 		
   557 000001AA 58                  <2> 		pop ax
   558 000001AB 50                  <2> 		push ax
   559 000001AC D2E0                <2> 		shl al,cl
   560 000001AE C0E807              <2> 		shr al,7		
   561 000001B1 0430                <2> 		add al,30h
   562                              <2> 		
   563 000001B3 51                  <2> 		push cx
   564                              <2> 		__prtch al
   565                              <3>  stkopen 1
   566 000001B4 83EC01              <4>  sub word sp, %1
   567 000001B7 54                  <4>  push sp
   568 000001B8 5D                  <4>  pop bp
   569 000001B9 884600              <3>  mov byte [ bp ], %1
   570 000001BC E88F02              <3>  call proc_prtch
   571                              <3>  stkclose 1
   572 000001BF 83C401              <4>  add word sp, %1
   573 000001C2 59                  <2> 		pop cx
   574                              <2> 		
   575 000001C3 FEC1                <2> 		inc cl
   576 000001C5 EBDF                <2> 		jmp .l1
   577                              <2> 	.l2:	
   578 000001C7 58                  <2> 	pop ax
   579                              <2> 	
   580 000001C8 C3                  <2> 	ret
   581                              <2> 	
   582                              <2> proc_prtbin16:
   583 000001C9 89E0                <2> 	mov ax,sp
   584 000001CB 89C5                <2> 	mov bp,ax
   585                              <2> 		
   586 000001CD 8A7E04              <2> 	mov bh, [bp+4]
   587 000001D0 B300                <2> 	mov bl,0
   588 000001D2 B201                <2> 	mov dl,TRUE
   589 000001D4 30ED                <2> 	xor ch,ch
   590 000001D6 B102                <2> 	mov cl,2
   591                              <2> 	.l1:
   592 000001D8 80F900              <2> 		cmp cl,0
   593 000001DB 744B                <2> 		jz .l2		
   594                              <2> 		
   595 000001DD 55                  <2> 		push bp
   596 000001DE 01CD                <2> 		add bp,cx
   597 000001E0 45                  <2> 		inc bp
   598                              <2> 		
   599 000001E1 0A5E00              <2> 		or byte bl, [bp]
   600 000001E4 08FB                <2> 		or byte bl, bh
   601 000001E6 743B                <2> 		jz .prted											
   602 000001E8 53                  <2> 			push bx
   603 000001E9 51                  <2> 			push cx	
   604 000001EA 80FA01              <2> 			cmp dl, TRUE
   605 000001ED 7402                <2> 			je .first
   606 000001EF EB10                <2> 			jmp .nfirst
   607                              <2> 			.first:
   608 000001F1 B200                <2> 				mov dl, FALSE
   609 000001F3 52                  <2> 				push dx
   610                              <2> 				
   611 000001F4 88FC                <2> 				mov ah, bh
   612 000001F6 8A4600              <2> 				mov byte al, [bp]
   613 000001F9 50                  <2> 				push ax
   614 000001FA E84000              <2> 				call proc_prtbin8
   615 000001FD 58                  <2> 				pop ax
   616                              <2> 							
   617 000001FE 5A                  <2> 				pop dx
   618 000001FF EB0C                <2> 				jmp .endfirst
   619                              <2> 			.nfirst:
   620 00000201 52                  <2> 				push dx
   621                              <2> 				
   622 00000202 B401                <2> 				mov ah, TRUE
   623 00000204 8A4600              <2> 				mov byte al, [bp]
   624 00000207 50                  <2> 				push ax
   625 00000208 E83200              <2> 				call proc_prtbin8
   626 0000020B 58                  <2> 				pop ax
   627                              <2> 								
   628 0000020C 5A                  <2> 				pop dx
   629                              <2> 			.endfirst:	
   630 0000020D 59                  <2> 			pop cx
   631 0000020E 5B                  <2> 			pop bx		
   632                              <2> 			
   633 0000020F 80F901              <2> 			cmp cl,1
   634 00000212 760F                <2> 			jbe .spaceprted
   635                              <2> 				__prtch 20h
   636                              <3>  stkopen 1
   637 00000214 83EC01              <4>  sub word sp, %1
   638 00000217 54                  <4>  push sp
   639 00000218 5D                  <4>  pop bp
   640 00000219 C6460020            <3>  mov byte [ bp ], %1
   641 0000021D E82E02              <3>  call proc_prtch
   642                              <3>  stkclose 1
   643 00000220 83C401              <4>  add word sp, %1
   644                              <2> 			.spaceprted:
   645                              <2> 		.prted:
   646                              <2> 		
   647 00000223 5D                  <2> 		pop bp
   648                              <2> 		
   649 00000224 FEC9                <2> 		dec cl
   650 00000226 EBB0                <2> 		jmp .l1
   651                              <2> 	.l2:
   652                              <2> 	
   653 00000228 80FB00              <2> 	cmp bl,0
   654 0000022B 750F                <2> 	jnz .end
   655                              <2> 		__prtch 30h
   656                              <3>  stkopen 1
   657 0000022D 83EC01              <4>  sub word sp, %1
   658 00000230 54                  <4>  push sp
   659 00000231 5D                  <4>  pop bp
   660 00000232 C6460030            <3>  mov byte [ bp ], %1
   661 00000236 E81502              <3>  call proc_prtch
   662                              <3>  stkclose 1
   663 00000239 83C401              <4>  add word sp, %1
   664                              <2> 	.end:
   665                              <2> 	
   666 0000023C C3                  <2> 	ret	
   667                              <2> 	
   668                              <2> proc_prtbin8:
   669 0000023D 89E0                <2> 	mov ax,sp
   670 0000023F 89C5                <2> 	mov bp,ax
   671 00000241 8A4602              <2> 	mov byte al, [bp+2]
   672 00000244 3C00                <2> 	cmp al, 0
   673 00000246 0F858700            <2> 	jnz .nzero
   674                              <2> 		__prtch 30h
   675                              <3>  stkopen 1
   676 0000024A 83EC01              <4>  sub word sp, %1
   677 0000024D 54                  <4>  push sp
   678 0000024E 5D                  <4>  pop bp
   679 0000024F C6460030            <3>  mov byte [ bp ], %1
   680 00000253 E8F801              <3>  call proc_prtch
   681                              <3>  stkclose 1
   682 00000256 83C401              <4>  add word sp, %1
   683                              <2> 		
   684 00000259 89E0                <2> 		mov ax,sp
   685 0000025B 89C5                <2> 		mov bp,ax
   686 0000025D 8A4603              <2> 		mov byte al, [bp+3]		
   687 00000260 3C00                <2> 		cmp al, FALSE
   688 00000262 0F84C500            <2> 		je .end
   689                              <2> 			__prtch 30h
   690                              <3>  stkopen 1
   691 00000266 83EC01              <4>  sub word sp, %1
   692 00000269 54                  <4>  push sp
   693 0000026A 5D                  <4>  pop bp
   694 0000026B C6460030            <3>  mov byte [ bp ], %1
   695 0000026F E8DC01              <3>  call proc_prtch
   696                              <3>  stkclose 1
   697 00000272 83C401              <4>  add word sp, %1
   698                              <2> 			__prtch 30h
   699                              <3>  stkopen 1
   700 00000275 83EC01              <4>  sub word sp, %1
   701 00000278 54                  <4>  push sp
   702 00000279 5D                  <4>  pop bp
   703 0000027A C6460030            <3>  mov byte [ bp ], %1
   704 0000027E E8CD01              <3>  call proc_prtch
   705                              <3>  stkclose 1
   706 00000281 83C401              <4>  add word sp, %1
   707                              <2> 			__prtch 30h
   708                              <3>  stkopen 1
   709 00000284 83EC01              <4>  sub word sp, %1
   710 00000287 54                  <4>  push sp
   711 00000288 5D                  <4>  pop bp
   712 00000289 C6460030            <3>  mov byte [ bp ], %1
   713 0000028D E8BE01              <3>  call proc_prtch
   714                              <3>  stkclose 1
   715 00000290 83C401              <4>  add word sp, %1
   716                              <2> 			__prtch 30h
   717                              <3>  stkopen 1
   718 00000293 83EC01              <4>  sub word sp, %1
   719 00000296 54                  <4>  push sp
   720 00000297 5D                  <4>  pop bp
   721 00000298 C6460030            <3>  mov byte [ bp ], %1
   722 0000029C E8AF01              <3>  call proc_prtch
   723                              <3>  stkclose 1
   724 0000029F 83C401              <4>  add word sp, %1
   725                              <2> 			__prtch 30h
   726                              <3>  stkopen 1
   727 000002A2 83EC01              <4>  sub word sp, %1
   728 000002A5 54                  <4>  push sp
   729 000002A6 5D                  <4>  pop bp
   730 000002A7 C6460030            <3>  mov byte [ bp ], %1
   731 000002AB E8A001              <3>  call proc_prtch
   732                              <3>  stkclose 1
   733 000002AE 83C401              <4>  add word sp, %1
   734                              <2> 			__prtch 30h
   735                              <3>  stkopen 1
   736 000002B1 83EC01              <4>  sub word sp, %1
   737 000002B4 54                  <4>  push sp
   738 000002B5 5D                  <4>  pop bp
   739 000002B6 C6460030            <3>  mov byte [ bp ], %1
   740 000002BA E89101              <3>  call proc_prtch
   741                              <3>  stkclose 1
   742 000002BD 83C401              <4>  add word sp, %1
   743                              <2> 			__prtch 30h
   744                              <3>  stkopen 1
   745 000002C0 83EC01              <4>  sub word sp, %1
   746 000002C3 54                  <4>  push sp
   747 000002C4 5D                  <4>  pop bp
   748 000002C5 C6460030            <3>  mov byte [ bp ], %1
   749 000002C9 E88201              <3>  call proc_prtch
   750                              <3>  stkclose 1
   751 000002CC 83C401              <4>  add word sp, %1
   752 000002CF EB5A                <2> 			jmp .end		
   753                              <2> 	.nzero:
   754                              <2> 
   755 000002D1 B000                <2> 	mov byte al, FALSE
   756 000002D3 50                  <2> 	push ax
   757                              <2> 
   758 000002D4 89E0                <2> 	mov ax,sp
   759 000002D6 89C5                <2> 	mov bp,ax
   760 000002D8 8A5E04              <2> 	mov byte bl, [bp+4]
   761 000002DB B100                <2> 	mov cl,0
   762                              <2> 	.l1:
   763 000002DD 80F908              <2> 		cmp cl,8
   764 000002E0 7348                <2> 		jae .l2
   765                              <2> 		
   766 000002E2 88C8                <2> 		mov al,cl
   767                              <2> 		
   768 000002E4 88DA                <2> 		mov dl, bl		
   769                              <2> 		
   770                              <2> 		.l1.1:
   771 000002E6 3C00                <2> 			cmp al,0
   772 000002E8 7406                <2> 			jz .l1.2
   773                              <2> 							
   774 000002EA D0E2                <2> 			shl dl,1
   775                              <2> 			
   776 000002EC FEC8                <2> 			dec al
   777 000002EE EBF6                <2> 			jmp .l1.1
   778                              <2> 		.l1.2:
   779                              <2> 						
   780 000002F0 C0EA07              <2> 		shr dl,7
   781                              <2> 		
   782 000002F3 89E0                <2> 		mov ax,sp
   783 000002F5 89C5                <2> 		mov bp,ax			
   784 000002F7 8A4605              <2> 		mov byte al, [bp+5]
   785 000002FA 3C01                <2> 		cmp al, TRUE
   786 000002FC 7413                <2> 		je .endzero		
   787 000002FE 80FA00              <2> 			cmp dl,0
   788 00000301 7402                <2> 			jz .zero
   789 00000303 EB08                <2> 			jmp .notzero
   790                              <2> 			.zero:
   791 00000305 58                  <2> 				pop ax
   792 00000306 50                  <2> 				push ax
   793 00000307 3C01                <2> 				cmp al, TRUE				
   794 00000309 7406                <2> 				je .endzero
   795 0000030B EB19                <2> 				jmp .inc
   796                              <2> 			.notzero:
   797 0000030D 58                  <2> 				pop ax
   798 0000030E B001                <2> 				mov al, TRUE	
   799 00000310 50                  <2> 				push ax				
   800                              <2> 		.endzero:
   801                              <2> 									
   802 00000311 80C230              <2> 		add dl,30h
   803                              <2> 
   804 00000314 51                  <2> 		push cx
   805 00000315 52                  <2> 		push dx
   806                              <2> 		__prtch dl
   807                              <3>  stkopen 1
   808 00000316 83EC01              <4>  sub word sp, %1
   809 00000319 54                  <4>  push sp
   810 0000031A 5D                  <4>  pop bp
   811 0000031B 885600              <3>  mov byte [ bp ], %1
   812 0000031E E82D01              <3>  call proc_prtch
   813                              <3>  stkclose 1
   814 00000321 83C401              <4>  add word sp, %1
   815 00000324 5A                  <2> 		pop dx
   816 00000325 59                  <2> 		pop cx	
   817                              <2> 
   818                              <2> 		.inc:
   819                              <2> 	
   820 00000326 FEC1                <2> 		inc cl
   821 00000328 EBB3                <2> 		jmp .l1	
   822                              <2> 	.l2:
   823                              <2> 	
   824 0000032A 58                  <2> 	pop ax
   825                              <2> 	
   826                              <2> 	.end:
   827                              <2> 	
   828 0000032B C3                  <2> 	ret	
   829                              <2> 
   830                              <2> proc_prthex16:
   831 0000032C 89E0                <2> 	mov ax,sp
   832 0000032E 89C5                <2> 	mov bp,ax
   833                              <2> 
   834 00000330 8A7E04              <2> 	mov byte bh, [bp+4]		
   835 00000333 B300                <2> 	mov bl,0	
   836 00000335 B201                <2> 	mov dl,TRUE
   837 00000337 30ED                <2> 	xor ch,ch
   838 00000339 B102                <2> 	mov cl, 2	
   839                              <2> 	.l1:			
   840 0000033B 80F900              <2> 		cmp cl,0
   841 0000033E 7437                <2> 		jz .l2
   842                              <2> 							
   843 00000340 55                  <2> 		push bp		
   844 00000341 01CD                <2> 		add bp,cx
   845 00000343 45                  <2> 		inc bp		
   846                              <2> 		
   847 00000344 0A5E00              <2> 		or byte bl, [bp]
   848 00000347 08FB                <2> 		or byte bl, bh
   849 00000349 7427                <2> 		jz .prted							
   850 0000034B 53                  <2> 			push bx
   851 0000034C 51                  <2> 			push cx	
   852 0000034D 80FA01              <2> 			cmp dl, TRUE
   853 00000350 7402                <2> 			je .first
   854 00000352 EB10                <2> 			jmp .nfirst
   855                              <2> 			.first:
   856 00000354 B200                <2> 				mov dl, FALSE
   857 00000356 52                  <2> 				push dx
   858                              <2> 				
   859 00000357 88FC                <2> 				mov ah, bh
   860 00000359 8A4600              <2> 				mov byte al, [bp]
   861 0000035C 50                  <2> 				push ax
   862 0000035D E82C00              <2> 				call proc_prthex8
   863 00000360 58                  <2> 				pop ax
   864                              <2> 							
   865 00000361 5A                  <2> 				pop dx
   866 00000362 EB0C                <2> 				jmp .endfirst
   867                              <2> 			.nfirst:
   868 00000364 52                  <2> 				push dx
   869                              <2> 				
   870 00000365 B401                <2> 				mov ah, TRUE
   871 00000367 8A4600              <2> 				mov byte al, [bp]
   872 0000036A 50                  <2> 				push ax
   873 0000036B E81E00              <2> 				call proc_prthex8
   874 0000036E 58                  <2> 				pop ax
   875                              <2> 								
   876 0000036F 5A                  <2> 				pop dx
   877                              <2> 			.endfirst:	
   878 00000370 59                  <2> 			pop cx
   879 00000371 5B                  <2> 			pop bx		
   880                              <2> 		.prted:
   881                              <2> 		
   882 00000372 5D                  <2> 		pop bp
   883                              <2> 	
   884 00000373 FEC9                <2> 		dec cl
   885 00000375 EBC4                <2> 		jmp .l1		
   886                              <2> 	.l2:
   887                              <2> 	
   888 00000377 80FB00              <2> 	cmp bl,0
   889 0000037A 750F                <2> 	jnz .end
   890                              <2> 		__prtch 30h
   891                              <3>  stkopen 1
   892 0000037C 83EC01              <4>  sub word sp, %1
   893 0000037F 54                  <4>  push sp
   894 00000380 5D                  <4>  pop bp
   895 00000381 C6460030            <3>  mov byte [ bp ], %1
   896 00000385 E8C600              <3>  call proc_prtch
   897                              <3>  stkclose 1
   898 00000388 83C401              <4>  add word sp, %1
   899                              <2> 	.end:
   900                              <2> 	
   901 0000038B C3                  <2> 	ret
   902                              <2> 	
   903                              <2> proc_prthex8:
   904 0000038C 89E0                <2> 	mov ax,sp
   905 0000038E 89C5                <2> 	mov bp,ax
   906 00000390 8A4602              <2> 	mov byte al, [bp+2]
   907 00000393 3C00                <2> 	cmp al, 0
   908 00000395 752B                <2> 	jnz .nzero
   909                              <2> 		__prtch 30h
   910                              <3>  stkopen 1
   911 00000397 83EC01              <4>  sub word sp, %1
   912 0000039A 54                  <4>  push sp
   913 0000039B 5D                  <4>  pop bp
   914 0000039C C6460030            <3>  mov byte [ bp ], %1
   915 000003A0 E8AB00              <3>  call proc_prtch
   916                              <3>  stkclose 1
   917 000003A3 83C401              <4>  add word sp, %1
   918                              <2> 		
   919 000003A6 89E0                <2> 		mov ax,sp
   920 000003A8 89C5                <2> 		mov bp,ax
   921 000003AA 8A4603              <2> 		mov byte al, [bp+3]		
   922 000003AD 3C00                <2> 		cmp al, FALSE
   923 000003AF 7476                <2> 		je .end
   924                              <2> 			__prtch 30h
   925                              <3>  stkopen 1
   926 000003B1 83EC01              <4>  sub word sp, %1
   927 000003B4 54                  <4>  push sp
   928 000003B5 5D                  <4>  pop bp
   929 000003B6 C6460030            <3>  mov byte [ bp ], %1
   930 000003BA E89100              <3>  call proc_prtch
   931                              <3>  stkclose 1
   932 000003BD 83C401              <4>  add word sp, %1
   933 000003C0 EB65                <2> 			jmp .end		
   934                              <2> 	.nzero:
   935                              <2> 
   936 000003C2 B000                <2> 	mov byte al, FALSE
   937 000003C4 50                  <2> 	push ax
   938                              <2> 
   939 000003C5 89E0                <2> 	mov ax,sp
   940 000003C7 89C5                <2> 	mov bp,ax
   941 000003C9 8A5E04              <2> 	mov byte bl, [bp+4]
   942 000003CC B102                <2> 	mov cl,2
   943                              <2> 	.l1:
   944 000003CE 80F900              <2> 		cmp cl,0
   945 000003D1 7453                <2> 		jz .l2
   946                              <2> 		
   947 000003D3 B002                <2> 		mov al,2
   948 000003D5 28C8                <2> 		sub al,cl
   949                              <2> 		
   950 000003D7 88DA                <2> 		mov dl, bl	
   951                              <2> 		
   952                              <2> 		.l1.1:
   953 000003D9 3C00                <2> 			cmp al,0
   954 000003DB 7407                <2> 			jz .l1.2
   955                              <2> 							
   956 000003DD C0E204              <2> 			shl dl,4
   957                              <2> 			
   958 000003E0 FEC8                <2> 			dec al
   959 000003E2 EBF5                <2> 			jmp .l1.1
   960                              <2> 		.l1.2:
   961                              <2> 						
   962 000003E4 C0EA04              <2> 		shr dl,4
   963                              <2> 
   964 000003E7 89E0                <2> 		mov ax,sp
   965 000003E9 89C5                <2> 		mov bp,ax			
   966 000003EB 8A4605              <2> 		mov byte al, [bp+5]
   967 000003EE 3C01                <2> 		cmp al, TRUE
   968 000003F0 7413                <2> 		je .endzero		
   969 000003F2 80FA00              <2> 			cmp dl,0
   970 000003F5 7402                <2> 			jz .zero
   971 000003F7 EB08                <2> 			jmp .notzero
   972                              <2> 			.zero:
   973 000003F9 58                  <2> 				pop ax
   974 000003FA 50                  <2> 				push ax
   975 000003FB 3C01                <2> 				cmp al, TRUE				
   976 000003FD 7406                <2> 				je .endzero
   977 000003FF EB21                <2> 				jmp .dec
   978                              <2> 			.notzero:
   979 00000401 58                  <2> 				pop ax
   980 00000402 B001                <2> 				mov al, TRUE	
   981 00000404 50                  <2> 				push ax				
   982                              <2> 		.endzero:
   983                              <2> 						
   984 00000405 80FA09              <2> 		cmp dl,9
   985 00000408 7603                <2> 		jbe .endsumseven  		
   986 0000040A 80C207              <2> 		add dl,7
   987                              <2> 		.endsumseven:
   988                              <2> 						
   989 0000040D 80C230              <2> 		add dl,30h
   990                              <2> 
   991 00000410 51                  <2> 		push cx
   992 00000411 52                  <2> 		push dx
   993                              <2> 		__prtch dl
   994                              <3>  stkopen 1
   995 00000412 83EC01              <4>  sub word sp, %1
   996 00000415 54                  <4>  push sp
   997 00000416 5D                  <4>  pop bp
   998 00000417 885600              <3>  mov byte [ bp ], %1
   999 0000041A E83100              <3>  call proc_prtch
  1000                              <3>  stkclose 1
  1001 0000041D 83C401              <4>  add word sp, %1
  1002 00000420 5A                  <2> 		pop dx
  1003 00000421 59                  <2> 		pop cx	
  1004                              <2> 
  1005                              <2> 		.dec:
  1006                              <2> 	
  1007 00000422 FEC9                <2> 		dec cl
  1008 00000424 EBA8                <2> 		jmp .l1	
  1009                              <2> 	.l2:
  1010                              <2> 	
  1011 00000426 58                  <2> 	pop ax
  1012                              <2> 	
  1013                              <2> 	.end:
  1014                              <2> 	
  1015 00000427 C3                  <2> 	ret
  1016                              <2> 
  1017                              <2> proc_prtstr:
  1018 00000428 89E0                <2> 	mov ax,sp
  1019 0000042A 89C5                <2> 	mov bp,ax
  1020                              <2> 	
  1021 0000042C 8B4602              <2> 	mov ax, [bp+2]
  1022 0000042F 8ED8                <2> 	mov ds, ax
  1023 00000431 8B7604              <2> 	mov si, [bp+4]						
  1024                              <2> 	.loop:
  1025 00000434 AC                  <2> 		lodsb
  1026 00000435 3C00                <2> 		cmp al,0h
  1027 00000437 7414                <2> 		jz .done
  1028                              <2> 		
  1029 00000439 1E                  <2> 		push ds
  1030 0000043A 56                  <2> 		push si
  1031                              <2> 					
  1032                              <2> 		__prtch al										
  1033                              <3>  stkopen 1
  1034 0000043B 83EC01              <4>  sub word sp, %1
  1035 0000043E 54                  <4>  push sp
  1036 0000043F 5D                  <4>  pop bp
  1037 00000440 884600              <3>  mov byte [ bp ], %1
  1038 00000443 E80800              <3>  call proc_prtch
  1039                              <3>  stkclose 1
  1040 00000446 83C401              <4>  add word sp, %1
  1041                              <2> 									
  1042 00000449 5E                  <2> 		pop si
  1043 0000044A 1F                  <2> 		pop ds
  1044                              <2> 											
  1045 0000044B EBE7                <2> 		jmp .loop 
  1046                              <2> 	.done:
  1047                              <2> 	
  1048 0000044D C3                  <2> 	ret	
  1049                              <2> 	
  1050                              <2> proc_prtch:
  1051 0000044E 89E0                <2> 	mov ax,sp
  1052 00000450 89C5                <2> 	mov bp,ax
  1053                              <2> 
  1054 00000452 8A4602              <2> 	mov al,[bp+2]
  1055 00000455 B40E                <2> 	mov ah,0Eh
  1056 00000457 B700                <2> 	mov bh,00h
  1057 00000459 CD10                <2> 	int 10h	
  1058                              <2> 	
  1059 0000045B C3                  <2> 	ret
  1060                              <2> 
  1061                              <2> proc_prtln:
  1062 0000045C B403                <2> 	mov ah,03h
  1063 0000045E B700                <2> 	mov bh,00h
  1064 00000460 CD10                <2> 	int 10h
  1065                              <2> 	
  1066 00000462 B402                <2> 	mov ah,02h
  1067 00000464 FEC6                <2> 	inc dh
  1068 00000466 B200                <2> 	mov dl,00h
  1069 00000468 CD10                <2> 	int 10h	
  1070                              <2> 	
  1071 0000046A C3                  <2> 	ret
  1072                              <2> 	
  1073                              <2> %endif
  1074                              <1>  	%include "lib/system.mac"
  1075                              <2>  
  1076                              <2> %ifndef SYSTEM_MAC
  1077                              <2>  	%define SYSTEM_MAC
  1078                              <2>  	
  1079                              <2> 	%ifndef TRUE
  1080                              <2> 		%define TRUE 01h
  1081                              <2> 	%endif
  1082                              <2> 	%ifndef FALSE
  1083                              <2> 		%define FALSE 00h
  1084                              <2> 	%endif 	
  1085                              <2>  	
  1086                              <2>  	%include "lib/kernel.asmh"
  1087                              <2>  	 	
  1088                              <2> %macro mformat 4
  1089                              <2> 	stkopen 8
  1090                              <2> 	mov word [ bp + 0 ], %1
  1091                              <2> 	mov word [ bp + 2 ], %2
  1092                              <2> 	mov word [ bp + 4 ], %3
  1093                              <2> 	mov word [ bp + 6 ], %4
  1094                              <2> 	call kernel_segment:mformat
  1095                              <2> 	stkclose 8
  1096                              <2> %endmacro
  1097                              <2> 
  1098                              <2> %macro malloc 6
  1099                              <2> 	stkopen 0Bh
  1100                              <2> 	mov word [ bp + 4 ], %3
  1101                              <2> 	mov word [ bp + 6 ], %4
  1102                              <2> 	mov word [ bp + 8 ], %5	
  1103                              <2> 	call kernel_segment:malloc
  1104                              <2> 	push sp
  1105                              <2> 	pop bp
  1106                              <2> 	mov word %1, [ bp ]
  1107                              <2> 	mov word %2, [ bp + 2 ]
  1108                              <2> 	mov byte %6, [ bp + 0x0A ]
  1109                              <2> 	stkclose 0Bh
  1110                              <2> %endmacro 	
  1111                              <2> 
  1112                              <2> %macro laddr 2
  1113                              <2> 	laddr %1, %2, %1, %2
  1114                              <2> %endmacro
  1115                              <2> 
  1116                              <2> %macro faddr 2
  1117                              <2> 	faddr %1, %2, %1, %2
  1118                              <2> %endmacro
  1119                              <2>  	
  1120                              <2> %macro laddr 4
  1121                              <2> 	stkopen 8
  1122                              <2> 	mov word [ bp + 4 ], %3
  1123                              <2> 	mov word [ bp + 6 ], %4	
  1124                              <2> 	call kernel_segment:laddr
  1125                              <2> 	push sp
  1126                              <2> 	pop bp
  1127                              <2> 	mov word %1, [ bp + 0 ]
  1128                              <2> 	mov word %2, [ bp + 2 ]	
  1129                              <2> 	stkclose 8
  1130                              <2> %endmacro
  1131                              <2> 
  1132                              <2> %macro faddr 4
  1133                              <2> 	stkopen 8
  1134                              <2> 	mov word [ bp + 4 ], %3
  1135                              <2> 	mov word [ bp + 6 ], %4	
  1136                              <2> 	call kernel_segment:faddr
  1137                              <2> 	push sp
  1138                              <2> 	pop bp
  1139                              <2> 	mov word %1, [ bp + 0 ]
  1140                              <2> 	mov word %2, [ bp + 2 ]	
  1141                              <2> 	stkclose 8
  1142                              <2> %endmacro	
  1143                              <2>  
  1144                              <2> 
  1145                              <2> %macro stkopen 1		
  1146                              <2> 	sub word sp, %1
  1147                              <2> 	push sp
  1148                              <2> 	pop bp
  1149                              <2> %endmacro
  1150                              <2> 
  1151                              <2> %macro stkclose 1
  1152                              <2> 	add word sp, %1
  1153                              <2> %endmacro
  1154                              <2> 
  1155                              <2> %macro stkload 1-* 	
  1156                              <2>  	%rep %0
  1157                              <2>  	 	%rotate -1
  1158                              <2>  		pop %1
  1159                              <2>  	%endrep
  1160                              <2>  	%rep %0
  1161                              <2>  		push %1
  1162                              <2>  		%rotate 1
  1163                              <2>  	%endrep
  1164                              <2> %endmacro
  1165                              <2> 
  1166                              <2> %macro stkpush 1-* 	
  1167                              <2>  	%rep %0
  1168                              <2>  		push %1
  1169                              <2>  		%rotate 1
  1170                              <2>  	%endrep 	
  1171                              <2> %endmacro
  1172                              <2>  
  1173                              <2> %macro stkpop 1-*
  1174                              <2>  	%rep %0
  1175                              <2>  	 	%rotate -1
  1176                              <2>  		pop %1
  1177                              <2>  	%endrep 	 	
  1178                              <2> %endmacro
  1179                              <2> 
  1180                              <2> %macro toreg16 3
  1181                              <2> 	push %1
  1182                              <2> 	pop ds
  1183                              <2> 	mov word %3, [%2]
  1184                              <2> %endmacro
  1185                              <2> 
  1186                              <2> %macro toreg8 3
  1187                              <2> 	push %1
  1188                              <2> 	pop ds
  1189                              <2> 	mov byte %3, [%2]
  1190                              <2> %endmacro
  1191                              <2> 
  1192                              <2> %macro tovar16 3
  1193                              <2> 	push %1
  1194                              <2> 	pop ds
  1195                              <2> 	mov word [%2], %3
  1196                              <2> %endmacro
  1197                              <2> 
  1198                              <2> %macro tovar8 3
  1199                              <2> 	push %1
  1200                              <2> 	pop ds
  1201                              <2> 	mov byte [%2], %3
  1202                              <2> %endmacro 
  1203                              <2>  	
  1204                              <2> %endif 
  1205                              <1> 
  1206                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1207                              <1> %macro printf 1-*	
  1208                              <1> 	%rep %0					
  1209                              <1> 		__printf %1
  1210                              <1> 		%rotate 1		
  1211                              <1> 	%endrep
  1212                              <1> %endmacro	
  1213                              <1> 
  1214                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1215                              <1> %macro __printf 1
  1216                              <1> 	section .data
  1217                              <1> 		%%str: db %1,0
  1218                              <1> 	section .text
  1219                              <1> 		prtstr cs, %%str				
  1220                              <1> %endmacro
  1221                              <1> 
  1222                              <1> %macro prtstr 2
  1223                              <1> 	stkopen 4
  1224                              <1> 	mov word [bp], %1
  1225                              <1> 	mov word [bp+2], %2
  1226                              <1> 	call proc_prtstr
  1227                              <1> 	stkclose 4
  1228                              <1> %endmacro
  1229                              <1> 
  1230                              <1> 
  1231                              <1> %macro prtIEEE754 1
  1232                              <1> 	prtIEEE754 cs, %1
  1233                              <1> %endmacro
  1234                              <1> 
  1235                              <1> %macro prtIEEE754 2
  1236                              <1> 	stkopen 4
  1237                              <1> 	mov ax,%1
  1238                              <1> 	mov ds,ax
  1239                              <1> 	mov ax, [%2+2]
  1240                              <1> 	mov word [bp+0], ax
  1241                              <1> 	mov ax, [%2]
  1242                              <1> 	mov word [bp+2], ax
  1243                              <1> 	call proc_prtIEEE754
  1244                              <1> 	stkclose 4
  1245                              <1> %endmacro
  1246                              <1> 
  1247                              <1> %macro prtbool 1	
  1248                              <1> 	cmp byte %1, TRUE
  1249                              <1> 	je .true
  1250                              <1> 	jmp .false
  1251                              <1> 	.true:
  1252                              <1> 		prtf "true"
  1253                              <1> 		jmp .endcmp
  1254                              <1> 	.false:
  1255                              <1> 		prtf "false"
  1256                              <1> 	.endcmp:	
  1257                              <1> %endmacro
  1258                              <1> 
  1259                              <1> %macro prtptr 2-3 TRUE
  1260                              <1> 	stkopen 3
  1261                              <1> 	mov word [ bp + 0 ], %2
  1262                              <1> 	mov byte [ bp + 2 ], %3
  1263                              <1> 	prthex16 %1, %3
  1264                              <1> 	writechar ':'
  1265                              <1> 	push sp
  1266                              <1> 	pop bp
  1267                              <1> 	mov word ax, [ bp + 0 ]
  1268                              <1> 	mov byte bl, [ bp + 2 ]
  1269                              <1> 	prthex16 ax, bl
  1270                              <1> 	stkclose 3
  1271                              <1> %endmacro
  1272                              <1> 
  1273                              <1> %macro prtfptr 2-3 TRUE
  1274                              <1> 	stkopen 3
  1275                              <1> 	mov word [ bp + 0 ], %1
  1276                              <1> 	mov byte [ bp + 2 ], %3
  1277                              <1> 	prthex16 %2, %3
  1278                              <1> 	push sp
  1279                              <1> 	pop bp
  1280                              <1> 	mov word ax, [ bp + 0 ]
  1281                              <1> 	mov byte bl, [ bp + 2 ]
  1282                              <1> 	prthex16 ax, bl
  1283                              <1> 	stkclose 3
  1284                              <1> %endmacro
  1285                              <1> 
  1286                              <1> %macro prtbin32 1
  1287                              <1> 	prtbin32 cs, %1
  1288                              <1> %endmacro
  1289                              <1> 
  1290                              <1> %macro prtbin32 2
  1291                              <1> 	mov ax,%1
  1292                              <1> 	mov ds,ax
  1293                              <1> 	mov word ax,[%2+2]
  1294                              <1> 	prtbin16 ax
  1295                              <1> 	prtch 20h
  1296                              <1> 	mov ax,%1
  1297                              <1> 	mov ds,ax
  1298                              <1> 	mov word ax,[%2]
  1299                              <1> 	prtbin16 ax
  1300                              <1> %endmacro
  1301                              <1> 
  1302                              <1> %macro prthex32 1
  1303                              <1> 	prthex32 cs, %1
  1304                              <1> %endmacro
  1305                              <1> 
  1306                              <1> %macro iprthex32 1
  1307                              <1> 	iprthex32 cs, %1
  1308                              <1> %endmacro
  1309                              <1> 
  1310                              <1> %macro prthex32 2
  1311                              <1> 	mov ax,%1
  1312                              <1> 	mov ds,ax
  1313                              <1> 	mov word ax,[%2+2]
  1314                              <1> 	prthex16 ax	
  1315                              <1> 	mov ax,%1
  1316                              <1> 	mov ds,ax
  1317                              <1> 	mov word ax,[%2]
  1318                              <1> 	prthex16 ax
  1319                              <1> %endmacro
  1320                              <1> 
  1321                              <1> %macro iprthex32 2
  1322                              <1> 	mov ax,%1
  1323                              <1> 	mov ds,ax
  1324                              <1> 	mov word ax,[%2+2]
  1325                              <1> 	mov word bx,ax
  1326                              <1> 	and ax,0x7FFF
  1327                              <1> 	push ax
  1328                              <1> 	and bx,0x8000
  1329                              <1> 	cmp bx,0
  1330                              <1> 	jz %%prt
  1331                              <1> 		prtch '-'		
  1332                              <1> 	%%prt:	
  1333                              <1> 	pop ax
  1334                              <1> 	prthex16 ax
  1335                              <1> 	mov ax,%1
  1336                              <1> 	mov ds,ax
  1337                              <1> 	mov word ax,[%2]
  1338                              <1> 	prthex16 ax	
  1339                              <1> %endmacro
  1340                              <1> 
  1341                              <1> %macro prtsubbin8 3
  1342                              <1> 	__prtsubbin8 %1,%2,%3
  1343                              <1> %endmacro
  1344                              <1> 
  1345                              <1> %macro prtbin16 1
  1346                              <1> 	stkopen 3
  1347                              <1> 	mov word [bp], %1
  1348                              <1> 	mov byte [bp+2], TRUE
  1349                              <1> 	call proc_prtbin16
  1350                              <1> 	stkclose 3
  1351                              <1> %endmacro
  1352                              <1> 
  1353                              <1> %macro prtbin8 1
  1354                              <1> 	stkopen 2
  1355                              <1> 	mov byte [bp], %1
  1356                              <1> 	mov byte [bp+1], TRUE
  1357                              <1> 	call proc_prtbin8
  1358                              <1> 	stkclose 2
  1359                              <1> %endmacro
  1360                              <1> 
  1361                              <1> %macro prthex16 1
  1362                              <1> 	stkopen 3
  1363                              <1> 	mov word [bp], %1
  1364                              <1> 	mov byte [bp+2], TRUE
  1365                              <1> 	call proc_prthex16
  1366                              <1> 	stkclose 3
  1367                              <1> %endmacro
  1368                              <1> 
  1369                              <1> %macro prthex8 1
  1370                              <1> 	stkopen 2
  1371                              <1> 	mov byte [bp], %1
  1372                              <1> 	mov byte [bp+1], TRUE
  1373                              <1> 	call proc_prthex8
  1374                              <1> 	stkclose 2
  1375                              <1> %endmacro
  1376                              <1> 
  1377                              <1> %macro prtch 1
  1378                              <1> 	__prtch %1
  1379                              <1> %endmacro
  1380                              <1> 
  1381                              <1> %macro prtln 0
  1382                              <1> 	__prtln
  1383                              <1> %endmacro	
  1384                              <1> 
  1385                              <1> 
  1386                              <1> %macro prtstk 0
  1387                              <1> 	printf "stack ---> "
  1388                              <1> 	mov ax,sp
  1389                              <1> 	prthex16 ax
  1390                              <1> %endmacro  
  1391                              <1> 
  1392                              <1> %endif
  1393                                  %include "lib/math.mac"
  1394                              <1> 
  1395                              <1> %ifndef MATH_MAC
  1396                              <1> 	%define MATH_MAC
  1397                              <1> 	
  1398                              <1> 	%include "lib/math.asm"
  1399                              <2> 
  1400                              <2> %ifndef MATH_ASM
  1401                              <2> 	%define MATH_ASM
  1402                              <2> 
  1403                              <2> %macro __int16to32 3
  1404                              <2> 	stkopen 0x06
  1405                              <2> 	mov word [bp+0],%1
  1406                              <2> 	call proc_int16to32
  1407                              <2> 	push sp
  1408                              <2> 	pop bp
  1409                              <2> 	mov word %2, [bp+2]
  1410                              <2> 	mov word %3, [bp+4]
  1411                              <2> 	stkclose 0x06
  1412                              <2> %endmacro
  1413                              <2> 
  1414                              <2> %macro __int32to16 3
  1415                              <2> 	stkopen 0x06
  1416                              <2> 	mov word [bp+0], %1
  1417                              <2> 	mov word [bp+2], %2
  1418                              <2> 	call proc_int32to16
  1419                              <2> 	push sp
  1420                              <2> 	pop bp
  1421                              <2> 	mov word %3, [bp+4]
  1422                              <2> 	stkclose 0x06
  1423                              <2> %endmacro
  1424                              <2> 
  1425                              <2> %macro __iaddorsub32 7
  1426                              <2> 	stkopen 0x0E
  1427                              <2> 	mov word [bp+0], %1
  1428                              <2> 	mov word [bp+2], %2
  1429                              <2> 	mov word [bp+4], %3
  1430                              <2> 	mov word [bp+6], %4
  1431                              <2> 	mov word [bp+0x0C], %7	
  1432                              <2> 	call proc_iaddorsub32
  1433                              <2> 	push sp
  1434                              <2> 	pop bp
  1435                              <2> 	mov word %5, [bp+8]
  1436                              <2> 	mov word %6, [bp+0x0A]
  1437                              <2> 	stkclose 0x0E
  1438                              <2> %endmacro
  1439                              <2> 
  1440                              <2> %macro __add32 6
  1441                              <2> 	stkopen 0x0C
  1442                              <2> 	mov word [bp+0], %1
  1443                              <2> 	mov word [bp+2], %2
  1444                              <2> 	mov word [bp+4], %3
  1445                              <2> 	mov word [bp+6], %4	
  1446                              <2> 	call proc_add32
  1447                              <2> 	push sp
  1448                              <2> 	pop bp
  1449                              <2> 	mov word %5, [bp+8]
  1450                              <2> 	mov word %6, [bp+0x0A]
  1451                              <2> 	stkclose 0x0C
  1452                              <2> %endmacro
  1453                              <2> 
  1454                              <2> %macro __sub32 6
  1455                              <2> 	stkopen 0x0C
  1456                              <2> 	mov word [bp+0], %1
  1457                              <2> 	mov word [bp+2], %2
  1458                              <2> 	mov word [bp+4], %3
  1459                              <2> 	mov word [bp+6], %4	
  1460                              <2> 	call proc_sub32
  1461                              <2> 	push sp
  1462                              <2> 	pop bp
  1463                              <2> 	mov word %5, [bp+8]
  1464                              <2> 	mov word %6, [bp+0x0A]
  1465                              <2> 	stkclose 0x0C
  1466                              <2> %endmacro
  1467                              <2> 
  1468                              <2> %macro __mul32 6
  1469                              <2> 	stkopen 0x0C
  1470                              <2> 	mov word [bp+0], %1
  1471                              <2> 	mov word [bp+2], %2
  1472                              <2> 	mov word [bp+4], %3
  1473                              <2> 	mov word [bp+6], %4	
  1474                              <2> 	call proc_mul32
  1475                              <2> 	push sp
  1476                              <2> 	pop bp
  1477                              <2> 	mov word %5, [bp+8]
  1478                              <2> 	mov word %6, [bp+0x0A]
  1479                              <2> 	stkclose 0x0C
  1480                              <2> %endmacro
  1481                              <2> 
  1482                              <2> %macro __div32 9
  1483                              <2> 	stkopen 0x11
  1484                              <2> 	mov word [bp+0], %1
  1485                              <2> 	mov word [bp+2], %2
  1486                              <2> 	mov word [bp+4], %3
  1487                              <2> 	mov word [bp+6], %4
  1488                              <2> 	mov word [bp+8], %5
  1489                              <2> 	mov word [bp+0x0A], %6	
  1490                              <2> 	call proc_div32
  1491                              <2> 	push sp
  1492                              <2> 	pop bp
  1493                              <2> 	mov word %7, [bp+0x0C]
  1494                              <2> 	mov word %8, [bp+0x0E]
  1495                              <2> 	mov byte %9, [bp+0x10]
  1496                              <2> 	stkclose 0x11
  1497                              <2> %endmacro
  1498                              <2> 
  1499                              <2> %macro __cmp32 5
  1500                              <2> 	stkopen 9
  1501                              <2> 	mov word [bp+0], %1
  1502                              <2> 	mov word [bp+2], %2
  1503                              <2> 	mov word [bp+4], %3
  1504                              <2> 	mov word [bp+6], %4
  1505                              <2> 	call proc_cmp32
  1506                              <2> 	push sp
  1507                              <2> 	pop bp
  1508                              <2> 	mov byte %5, [bp+8]
  1509                              <2> 	stkclose 9	
  1510                              <2> %endmacro
  1511                              <2> 
  1512                              <2> %macro __shl32 3
  1513                              <2> 	stkopen 5
  1514                              <2> 	mov word [bp+0], %1
  1515                              <2> 	mov word [bp+2], %2
  1516                              <2> 	mov byte [bp+4], %3
  1517                              <2> 	call proc_shl32
  1518                              <2> 	push sp
  1519                              <2> 	pop bp
  1520                              <2> 	mov word %1, [bp+0]
  1521                              <2> 	mov word %2, [bp+2]
  1522                              <2> 	stkclose 5
  1523                              <2> %endmacro
  1524                              <2> 
  1525                              <2> %macro __shr32 3
  1526                              <2> 	stkopen 5
  1527                              <2> 	mov word [bp+0], %1
  1528                              <2> 	mov word [bp+2], %2
  1529                              <2> 	mov byte [bp+4], %3
  1530                              <2> 	call proc_shr32
  1531                              <2> 	push sp
  1532                              <2> 	pop bp
  1533                              <2> 	mov word %1, [bp+0]
  1534                              <2> 	mov word %2, [bp+2]
  1535                              <2> 	stkclose 5
  1536                              <2> %endmacro
  1537                              <2> 
  1538                              <2> %macro __lzcount32 3	
  1539                              <2> 	push %2		
  1540                              <2> 	__lzcount16 %1, cl	
  1541                              <2> 	pop ax
  1542                              <2> 	cmp cl,4
  1543                              <2> 	jb .end
  1544                              <2> 		push cx		
  1545                              <2> 		__lzcount16 ax, al		
  1546                              <2> 		pop cx
  1547                              <2> 		add cl,al
  1548                              <2> 	.end:	
  1549                              <2> 	mov byte %3, cl 
  1550                              <2> %endmacro
  1551                              <2> 
  1552                              <2> %macro __lzcount16 2
  1553                              <2> 	stkopen 3
  1554                              <2> 	mov word [bp+0], %1
  1555                              <2> 	call proc__lzcount16
  1556                              <2> 	push sp
  1557                              <2> 	pop bp
  1558                              <2> 	mov byte %2, [bp+2]	
  1559                              <2> 	stkclose 3
  1560                              <2> %endmacro
  1561                              <2> 
  1562                              <2> %macro __lzbitcount32 3	
  1563                              <2> 	push %2		
  1564                              <2> 	__lzbitcount16 %1, cl
  1565                              <2> 	pop ax
  1566                              <2> 	cmp cl,16
  1567                              <2> 	jb .end
  1568                              <2> 		push cx		
  1569                              <2> 		__lzbitcount16 ax, al		
  1570                              <2> 		pop cx
  1571                              <2> 		add cl,al
  1572                              <2> 	.end:	
  1573                              <2> 	mov byte %3, cl 
  1574                              <2> %endmacro
  1575                              <2> 		
  1576                              <2> %macro __lzbitcount16 2
  1577                              <2> 	stkopen 3
  1578                              <2> 	mov word [bp+0], %1
  1579                              <2> 	call proc__lzbitcount16
  1580                              <2> 	push sp
  1581                              <2> 	pop bp
  1582                              <2> 	mov byte %2, [bp+2]	
  1583                              <2> 	stkclose 3
  1584                              <2> %endmacro	
  1585                              <2> 
  1586                              <2> %macro __calc_dividendo1 7
  1587                              <2> 	stkopen 0x0D
  1588                              <2> 	mov word [bp+0], %1
  1589                              <2> 	mov word [bp+2], %2
  1590                              <2> 	mov word [bp+4], %3
  1591                              <2> 	mov word [bp+6], %4
  1592                              <2> 	call proc_calc_dividendo1
  1593                              <2> 	push sp
  1594                              <2> 	pop bp
  1595                              <2> 	mov word %5, [bp+0x08]
  1596                              <2> 	mov word %6, [bp+0x0A]
  1597                              <2> 	mov byte %7, [bp+0x0C]
  1598                              <2> 	stkclose 0x0D
  1599                              <2> %endmacro
  1600                              <2> 
  1601                              <2> %macro __calc__prox_dividendo 5
  1602                              <2> 	stkopen 9
  1603                              <2> 	mov word [bp+0], %1
  1604                              <2> 	mov word [bp+2], %2
  1605                              <2> 	mov word [bp+4], %3
  1606                              <2> 	mov word [bp+6], %4
  1607                              <2> 	mov word [bp+8], %5
  1608                              <2> 	call proc_calc_prox_dividendo
  1609                              <2> 	push sp
  1610                              <2> 	pop bp
  1611                              <2> 	mov word %3, [bp+4]
  1612                              <2> 	mov word %4, [bp+6]
  1613                              <2> 	mov byte %5, [bp+8]
  1614                              <2> 	stkclose 9
  1615                              <2> %endmacro
  1616                              <2> 				
  1617                              <2> section .data
  1618                              <2> 
  1619                              <2> proc_int16to32:
  1620 0000046B 89E0                <2> 	mov ax,sp
  1621 0000046D 89C5                <2> 	mov bp,ax
  1622                              <2> 	
  1623 0000046F 8B4602              <2> 	mov ax,[bp+2]
  1624 00000472 89C3                <2> 	mov bx,ax
  1625 00000474 250080              <2> 	and ax,0x8000
  1626 00000477 83F800              <2> 	cmp ax,0
  1627 0000047A 7402                <2> 	jz .zero
  1628 0000047C EB08                <2> 	jmp .one
  1629                              <2> 	.zero:
  1630 0000047E 81E3FF7F            <2> 		and bx,0x7FFF
  1631 00000482 89DA                <2> 		mov dx,bx			
  1632 00000484 EB06                <2> 		jmp .endcmp
  1633                              <2> 	.one:
  1634 00000486 BAFFFF              <2> 		mov dx,0xFFFF
  1635 00000489 29DA                <2> 		sub dx,bx
  1636 0000048B 42                  <2> 		inc dx
  1637                              <2> 	.endcmp:
  1638 0000048C 894604              <2> 	mov [bp+4],ax
  1639 0000048F 895606              <2> 	mov [bp+6],dx
  1640                              <2> 	
  1641 00000492 C3                  <2> 	ret
  1642                              <2> 	
  1643                              <2> proc_int32to16:
  1644 00000493 89E0                <2> 	mov ax,sp
  1645 00000495 89C5                <2> 	mov bp,ax
  1646                              <2> 	
  1647 00000497 8B4602              <2> 	mov ax,[bp+2]
  1648 0000049A 8B5E04              <2> 	mov bx,[bp+4]
  1649 0000049D 250080              <2> 	and ax,0x8000
  1650 000004A0 81E3FF7F            <2> 	and bx,0x7FFF	
  1651 000004A4 83F800              <2> 	cmp ax,0
  1652 000004A7 7402                <2> 	jz .zero
  1653 000004A9 EB04                <2> 	jmp .one
  1654                              <2> 	.zero:
  1655 000004AB 01D8                <2> 		add ax,bx
  1656 000004AD EB05                <2> 		jmp .endcmp
  1657                              <2> 	.one:
  1658 000004AF B8FFFF              <2> 		mov ax,0xFFFF
  1659 000004B2 29D8                <2> 		sub ax,bx
  1660                              <2> 	.endcmp:	
  1661 000004B4 894606              <2> 	mov word [bp+6], ax	
  1662                              <2> 	
  1663 000004B7 C3                  <2> 	ret
  1664                              <2> 
  1665                              <2> proc_setsig:
  1666 000004B8 89E0                <2> 	mov ax,sp
  1667 000004BA 89C5                <2> 	mov bp,ax
  1668                              <2> 	
  1669 000004BC 816602FF7F          <2> 	and word [bp+2],0x7FFF
  1670 000004C1 8146020080          <2> 	add word [bp+2],0x8000	
  1671                              <2> 	
  1672 000004C6 C3                  <2> 	ret
  1673                              <2> 	
  1674                              <2> proc_clrsig:
  1675 000004C7 89E0                <2> 	mov ax,sp
  1676 000004C9 89C5                <2> 	mov bp,ax
  1677                              <2> 	
  1678 000004CB 816602FF7F          <2> 	and word [bp+2],0x7FFF
  1679                              <2> 
  1680 000004D0 C3                  <2> 	ret
  1681                              <2> 
  1682                              <2> proc_idiv32:
  1683                              <2> 	stkopen 0x11
  1684 000004D1 83EC11              <3>  sub word sp, %1
  1685 000004D4 54                  <3>  push sp
  1686 000004D5 5D                  <3>  pop bp
  1687 000004D6 8B4613              <2> 	mov ax,[bp+0x13]
  1688 000004D9 25FF7F              <2> 	and ax,0x7FFF
  1689 000004DC 894600              <2> 	mov [bp+0],ax
  1690 000004DF 8B4615              <2> 	mov ax,[bp+0x15]
  1691 000004E2 894602              <2> 	mov [bp+2],ax
  1692 000004E5 8B4617              <2> 	mov ax,[bp+0x17]
  1693 000004E8 25FF7F              <2> 	and ax,0x7FFF
  1694 000004EB 894604              <2> 	mov [bp+4],ax
  1695 000004EE 8B4619              <2> 	mov ax,[bp+0x19]
  1696 000004F1 894606              <2> 	mov [bp+6],ax 
  1697 000004F4 E88401              <2> 	call proc_div32
  1698 000004F7 89E0                <2> 	mov ax,sp
  1699 000004F9 89C5                <2> 	mov bp,ax
  1700 000004FB 8B4608              <2> 	mov ax,[bp+8]
  1701 000004FE 89461B              <2> 	mov [bp+0x1B], ax
  1702 00000501 8B460A              <2> 	mov ax,[bp+0x0A]
  1703 00000504 89461D              <2> 	mov [bp+0x1D], ax
  1704 00000507 8B460C              <2> 	mov ax,[bp+0x0C]
  1705 0000050A 89461F              <2> 	mov [bp+0x1F], ax
  1706 0000050D 8B460E              <2> 	mov ax,[bp+0x0E]
  1707 00000510 894621              <2> 	mov [bp+0x21], ax
  1708 00000513 8A4610              <2> 	mov al,[bp+0x10]
  1709 00000516 884623              <2> 	mov byte [bp+0x23], al
  1710                              <2> 	stkclose 0x11
  1711 00000519 83C411              <3>  add word sp, %1
  1712                              <2> 	
  1713 0000051C 54                  <2> 	push sp
  1714 0000051D 5D                  <2> 	pop bp
  1715                              <2> 		
  1716 0000051E 8B4E02              <2> 	mov cx,[bp+2]
  1717 00000521 8B5606              <2> 	mov dx,[bp+6]
  1718 00000524 81E10080            <2> 	and cx,0x8000
  1719 00000528 81E20080            <2> 	and dx,0x8000
  1720 0000052C 31D1                <2> 	xor cx,dx
  1721                              <2> 	
  1722 0000052E 837E0A00            <2> 	cmp word [bp+0x0A],0
  1723 00000532 7506                <2> 	jnz .signal1
  1724 00000534 837E0C00            <2> 	cmp word [bp+0x0C],0
  1725 00000538 7403                <2> 	jz .endsignal1
  1726                              <2> 	.signal1:
  1727 0000053A 014E0A              <2> 		add word [bp+0x0A],cx
  1728                              <2> 	.endsignal1:
  1729                              <2> 	
  1730 0000053D 837E0E00            <2> 	cmp word [bp+0x0E],0
  1731 00000541 7506                <2> 	jnz .signal2
  1732 00000543 837E1000            <2> 	cmp word [bp+0x10],0
  1733 00000547 7403                <2> 	jz .endsignal2
  1734                              <2> 	.signal2:
  1735 00000549 014E0E              <2> 		add word [bp+0x0E],cx	
  1736                              <2> 	.endsignal2:
  1737                              <2> 		
  1738 0000054C C3                  <2> 	ret	
  1739                              <2> 
  1740                              <2> proc_imul32:		
  1741                              <2> 	stkopen 0x0C
  1742 0000054D 83EC0C              <3>  sub word sp, %1
  1743 00000550 54                  <3>  push sp
  1744 00000551 5D                  <3>  pop bp
  1745 00000552 8B460E              <2> 	mov ax,[bp+0x0E]
  1746 00000555 25FF7F              <2> 	and ax,0x7FFF
  1747 00000558 894600              <2> 	mov [bp+0],ax
  1748 0000055B 8B4610              <2> 	mov ax,[bp+0x10]
  1749 0000055E 894602              <2> 	mov [bp+2],ax
  1750 00000561 8B4612              <2> 	mov ax,[bp+0x12]
  1751 00000564 25FF7F              <2> 	and ax,0x7FFF
  1752 00000567 894604              <2> 	mov [bp+4],ax
  1753 0000056A 8B4614              <2> 	mov ax,[bp+0x14]
  1754 0000056D 894606              <2> 	mov [bp+6],ax 
  1755 00000570 E88A02              <2> 	call proc_mul32
  1756 00000573 89E0                <2> 	mov ax,sp
  1757 00000575 89C5                <2> 	mov bp,ax
  1758 00000577 8B4608              <2> 	mov ax,[bp+8]
  1759 0000057A 8B5E0A              <2> 	mov bx,[bp+0x0A]
  1760                              <2> 	stkclose 0x0C
  1761 0000057D 83C40C              <3>  add word sp, %1
  1762                              <2> 	
  1763 00000580 89E1                <2> 	mov cx,sp
  1764 00000582 89CD                <2> 	mov bp,cx		
  1765                              <2> 		
  1766 00000584 89460A              <2> 	mov [bp+0x0A],ax
  1767 00000587 895E0C              <2> 	mov [bp+0x0C],bx
  1768                              <2> 	
  1769 0000058A 837E0A00            <2> 	cmp word [bp+0x0A],0
  1770 0000058E 7506                <2> 	jnz .signal1
  1771 00000590 837E0C00            <2> 	cmp word [bp+0x0C],0
  1772 00000594 7413                <2> 	jz .endsignal1
  1773                              <2> 	.signal1:
  1774 00000596 8B4E02              <2> 		mov cx,[bp+2]
  1775 00000599 8B5606              <2> 		mov dx,[bp+6]
  1776 0000059C 81E10080            <2> 		and cx,0x8000
  1777 000005A0 81E20080            <2> 		and dx,0x8000
  1778 000005A4 31D1                <2> 		xor cx,dx
  1779 000005A6 014E0A              <2> 		add word [bp+0x0A],cx
  1780                              <2> 	.endsignal1:
  1781                              <2> 	
  1782 000005A9 C3                  <2> 	ret
  1783                              <2> 
  1784                              <2> proc_iaddorsub32:
  1785 000005AA 89E0                <2> 	mov ax,sp
  1786 000005AC 89C5                <2> 	mov bp,ax
  1787                              <2> 	
  1788 000005AE 8B4E02              <2> 	mov cx,[bp+2]
  1789 000005B1 8B5606              <2> 	mov dx,[bp+6]
  1790 000005B4 81E10080            <2> 	and cx,0x8000
  1791 000005B8 81E20080            <2> 	and dx,0x8000
  1792 000005BC 33560E              <2> 	xor dx,[bp+0x0E]
  1793                              <2> 	
  1794 000005BF 31D1                <2> 	xor cx,dx
  1795 000005C1 83F900              <2> 	cmp cx,0
  1796 000005C4 0F848300            <2> 	jz .add
  1797                              <2> 	
  1798 000005C8 8B4602              <2> 	mov ax,[bp+2]
  1799 000005CB 8B5E06              <2> 	mov bx,[bp+6]
  1800 000005CE 25FF7F              <2> 	and ax,0x7FFF
  1801 000005D1 81E3FF7F            <2> 	and bx,0x7FFF	
  1802 000005D5 39D8                <2> 	cmp ax,bx
  1803 000005D7 7710                <2> 	ja .maior1
  1804 000005D9 7224                <2> 	jb .maior2
  1805                              <2> 	
  1806 000005DB 8B4604              <2> 	mov ax,[bp+4]
  1807 000005DE 8B5E08              <2> 	mov bx,[bp+8]
  1808 000005E1 39D8                <2> 	cmp ax,bx
  1809 000005E3 7704                <2> 	ja .maior1
  1810 000005E5 7218                <2> 	jb .maior2
  1811 000005E7 EB2A                <2> 	jmp .iguais
  1812                              <2> 	.maior1:
  1813 000005E9 8B4602              <2> 		mov ax,[bp+2]
  1814 000005EC 89C2                <2> 		mov dx,ax
  1815 000005EE 8B5E04              <2> 		mov bx,[bp+4]
  1816 000005F1 89460A              <2> 		mov [bp+0x0A],ax
  1817 000005F4 895E0C              <2> 		mov [bp+0x0C],bx
  1818 000005F7 8B4606              <2> 		mov ax,[bp+6]
  1819 000005FA 8B5E08              <2> 		mov bx,[bp+8]
  1820 000005FD EB29                <2> 		jmp .sub
  1821                              <2> 	.maior2:
  1822 000005FF 8B4606              <2> 		mov ax,[bp+6]
  1823 00000602 8B5E08              <2> 		mov bx,[bp+8]
  1824 00000605 89460A              <2> 		mov [bp+0x0A],ax
  1825 00000608 895E0C              <2> 		mov [bp+0x0C],bx
  1826 0000060B 8B4602              <2> 		mov ax,[bp+2]
  1827 0000060E 8B5E04              <2> 		mov bx,[bp+4]
  1828 00000611 EB15                <2> 		jmp .sub
  1829                              <2> 	.iguais:
  1830 00000613 8B4602              <2> 		mov ax,[bp+2]
  1831 00000616 BA0000              <2> 		mov dx,0x0000
  1832 00000619 8B5E04              <2> 		mov bx,[bp+4]
  1833 0000061C 89460A              <2> 		mov [bp+0x0A],ax
  1834 0000061F 895E0C              <2> 		mov [bp+0x0C],bx
  1835 00000622 8B4606              <2> 		mov ax,[bp+6]
  1836 00000625 8B5E08              <2> 		mov bx,[bp+8]
  1837                              <2> 		
  1838                              <2> 		
  1839                              <2> 	.sub:
  1840 00000628 25FF7F              <2> 		and ax, 0x7FFF
  1841 0000062B 81660AFF7F          <2> 		and word [bp+0x0A], 0x7FFF		
  1842                              <2> 	
  1843 00000630 295E0C              <2> 		sub [bp+0x0C],bx
  1844 00000633 19460A              <2> 		sbb [bp+0x0A],ax		
  1845                              <2> 		
  1846 00000636 837E0A00            <2> 		cmp word [bp+0x0A],0
  1847 0000063A 7506                <2> 		jnz .signal1
  1848 0000063C 837E0C00            <2> 		cmp word [bp+0x0C],0
  1849 00000640 7438                <2> 		jz .end
  1850                              <2> 		.signal1:
  1851 00000642 81E20080            <2> 			and dx,0x8000		
  1852 00000646 01560A              <2> 			add word [bp+0x0A],dx
  1853 00000649 EB2F                <2> 		jmp .end			
  1854                              <2> 		
  1855                              <2> 	.add:		
  1856 0000064B 8B4602              <2> 		mov ax,[bp+2]
  1857 0000064E 8B5E04              <2> 		mov bx,[bp+4]
  1858 00000651 89460A              <2> 		mov [bp+0x0A],ax
  1859 00000654 895E0C              <2> 		mov [bp+0x0C],bx
  1860 00000657 8B4606              <2> 		mov ax,[bp+6]
  1861 0000065A 8B5E08              <2> 		mov bx,[bp+8]
  1862                              <2> 		
  1863 0000065D 25FF7F              <2> 		and ax, 0x7FFF
  1864 00000660 81660AFF7F          <2> 		and word [bp+0x0A], 0x7FFF
  1865                              <2> 	
  1866 00000665 015E0C              <2> 		add [bp+0x0C],bx
  1867 00000668 11460A              <2> 		adc [bp+0x0A],ax
  1868                              <2> 		
  1869 0000066B 837E0A00            <2> 		cmp word [bp+0x0A],0
  1870 0000066F 7506                <2> 		jnz .signal2
  1871 00000671 837E0C00            <2> 		cmp word [bp+0x0C],0
  1872 00000675 7403                <2> 		jz .end
  1873                              <2> 		.signal2:
  1874 00000677 01560A              <2> 			add word [bp+0x0A],dx
  1875                              <2> 		
  1876                              <2> 	.end:
  1877                              <2> 		
  1878                              <2> 		
  1879 0000067A C3                  <2> 	ret
  1880                              <2> 	
  1881                              <2> 
  1882                              <2> proc_div32:
  1883 0000067B 89E0                <2> 	mov ax,sp
  1884 0000067D 89C5                <2> 	mov bp,ax
  1885                              <2> 	
  1886 0000067F 8B4606              <2> 	mov ax,[bp+6]
  1887 00000682 034608              <2> 	add ax,[bp+8]
  1888 00000685 83F800              <2> 	cmp ax,0
  1889 00000688 0F846C01            <2> 	jz .divbyzero
  1890                              <2> 	
  1891 0000068C 837E0200            <2> 	cmp word [bp+2], 0
  1892 00000690 7521                <2> 	jnz .div2
  1893 00000692 837E0600            <2> 	cmp word [bp+6], 0
  1894 00000696 751B                <2> 	jnz .div2
  1895 00000698 31D2                <2> 		xor dx,dx
  1896 0000069A 8B4604              <2> 		mov ax, [bp+4]
  1897 0000069D F77608              <2> 		div word [bp+8]
  1898 000006A0 C7460A0000          <2> 		mov word [bp+0x0A], 0
  1899 000006A5 89460C              <2> 		mov word [bp+0x0C], ax
  1900 000006A8 C7460E0000          <2> 		mov word [bp+0x0E], 0
  1901 000006AD 895610              <2> 		mov word [bp+0x10], dx
  1902 000006B0 E93F01              <2> 		jmp .enddiv
  1903                              <2> 	.div2:
  1904 000006B3 8B4602              <2> 		mov ax,[bp+2]
  1905 000006B6 3B4606              <2> 		cmp ax,[bp+6]
  1906 000006B9 0F821F01            <2> 		jb .qzero
  1907 000006BD 770A                <2> 		ja .div
  1908 000006BF 8B4604              <2> 		mov ax,[bp+4]
  1909 000006C2 3B4608              <2> 		cmp ax,[bp+8]
  1910 000006C5 0F821301            <2> 		jb .qzero
  1911                              <2> 		
  1912                              <2> 		.div:
  1913                              <2> 		
  1914 000006C9 C7460A0000          <2> 		mov word [bp+0x0A], 0
  1915 000006CE C7460C0000          <2> 		mov word [bp+0x0C], 0		
  1916 000006D3 C7460E0000          <2> 		mov word [bp+0x0E], 0
  1917 000006D8 C746100000          <2> 		mov word [bp+0x10], 0
  1918                              <2> 		
  1919 000006DD 8B4602              <2> 		mov ax,[bp+2]
  1920 000006E0 8B5E04              <2> 		mov bx,[bp+4]
  1921 000006E3 8B4E06              <2> 		mov cx,[bp+6]
  1922 000006E6 8B5608              <2> 		mov dx,[bp+8]		
  1923                              <2> 		__calc_dividendo1 ax, bx, cx, dx, ax, bx, cl
  1924                              <3>  stkopen 0x0D
  1925 000006E9 83EC0D              <4>  sub word sp, %1
  1926 000006EC 54                  <4>  push sp
  1927 000006ED 5D                  <4>  pop bp
  1928 000006EE 894600              <3>  mov word [bp+0], %1
  1929 000006F1 895E02              <3>  mov word [bp+2], %2
  1930 000006F4 894E04              <3>  mov word [bp+4], %3
  1931 000006F7 895606              <3>  mov word [bp+6], %4
  1932 000006FA E89A02              <3>  call proc_calc_dividendo1
  1933 000006FD 54                  <3>  push sp
  1934 000006FE 5D                  <3>  pop bp
  1935 000006FF 8B4608              <3>  mov word %5, [bp+0x08]
  1936 00000702 8B5E0A              <3>  mov word %6, [bp+0x0A]
  1937 00000705 8A4E0C              <3>  mov byte %7, [bp+0x0C]
  1938                              <3>  stkclose 0x0D
  1939 00000708 83C40D              <4>  add word sp, %1
  1940                              <2> 
  1941 0000070B 89E2                <2> 		mov dx,sp
  1942 0000070D 89D5                <2> 		mov bp,dx
  1943 0000070F 89460E              <2> 		mov word [bp+0x0E], ax
  1944 00000712 895E10              <2> 		mov word [bp+0x10], bx
  1945                              <2> 		
  1946 00000715 51                  <2> 		push cx
  1947                              <2> 		.l1:							
  1948 00000716 89E2                <2> 			mov dx,sp
  1949 00000718 89D5                <2> 			mov bp,dx		
  1950 0000071A 83C502              <2> 			add bp,2
  1951 0000071D 8B460E              <2> 			mov ax, [bp+0x0E]
  1952 00000720 8B5E10              <2> 			mov bx, [bp+0x10]
  1953 00000723 8B4E06              <2> 			mov cx, [bp+6]
  1954 00000726 8B5608              <2> 			mov dx, [bp+8]
  1955                              <2> 			__cmp32 ax, bx, cx, dx, cl
  1956                              <3>  stkopen 9
  1957 00000729 83EC09              <4>  sub word sp, %1
  1958 0000072C 54                  <4>  push sp
  1959 0000072D 5D                  <4>  pop bp
  1960 0000072E 894600              <3>  mov word [bp+0], %1
  1961 00000731 895E02              <3>  mov word [bp+2], %2
  1962 00000734 894E04              <3>  mov word [bp+4], %3
  1963 00000737 895606              <3>  mov word [bp+6], %4
  1964 0000073A E81F01              <3>  call proc_cmp32
  1965 0000073D 54                  <3>  push sp
  1966 0000073E 5D                  <3>  pop bp
  1967 0000073F 8A4E08              <3>  mov byte %5, [bp+8]
  1968                              <3>  stkclose 9
  1969 00000742 83C409              <4>  add word sp, %1
  1970                              <2> 			
  1971 00000745 51                  <2> 			push cx
  1972 00000746 89E2                <2> 			mov dx,sp
  1973 00000748 89D5                <2> 			mov bp,dx
  1974 0000074A 83C504              <2> 			add bp,4
  1975 0000074D 8B460A              <2> 			mov ax,[bp+0x0A]
  1976 00000750 8B5E0C              <2> 			mov bx,[bp+0x0C]
  1977 00000753 55                  <2> 			push bp
  1978                              <2> 			__shl32 ax, bx, 1
  1979                              <3>  stkopen 5
  1980 00000754 83EC05              <4>  sub word sp, %1
  1981 00000757 54                  <4>  push sp
  1982 00000758 5D                  <4>  pop bp
  1983 00000759 894600              <3>  mov word [bp+0], %1
  1984 0000075C 895E02              <3>  mov word [bp+2], %2
  1985 0000075F C6460401            <3>  mov byte [bp+4], %3
  1986 00000763 E82101              <3>  call proc_shl32
  1987 00000766 54                  <3>  push sp
  1988 00000767 5D                  <3>  pop bp
  1989 00000768 8B4600              <3>  mov word %1, [bp+0]
  1990 0000076B 8B5E02              <3>  mov word %2, [bp+2]
  1991                              <3>  stkclose 5
  1992 0000076E 83C405              <4>  add word sp, %1
  1993 00000771 5D                  <2> 			pop bp				
  1994 00000772 59                  <2> 			pop cx	
  1995                              <2> 									
  1996 00000773 80F900              <2> 			cmp cl,0
  1997 00000776 7C12                <2> 			jl .l11
  1998 00000778 83C301              <2> 				add bx,1
  1999 0000077B 83D000              <2> 				adc ax,0	
  2000                              <2> 				
  2001 0000077E 8B4E06              <2> 				mov cx,[bp+6]
  2002 00000781 8B5608              <2> 				mov dx,[bp+8]
  2003 00000784 295610              <2> 				sub [bp+0x10],dx
  2004 00000787 194E0E              <2> 				sbb [bp+0x0E],cx							
  2005                              <2> 			.l11:							
  2006 0000078A 89460A              <2> 			mov word [bp+0x0A], ax
  2007 0000078D 895E0C              <2> 			mov word [bp+0x0C], bx					
  2008                              <2> 					
  2009 00000790 59                  <2> 			pop cx
  2010 00000791 51                  <2> 			push cx												
  2011                              <2> 			
  2012 00000792 80F920              <2> 			cmp cl,32
  2013 00000795 7342                <2> 			jae .l2
  2014                              <2> 						
  2015 00000797 59                  <2> 			pop cx
  2016                              <2> 			stkopen 9
  2017 00000798 83EC09              <3>  sub word sp, %1
  2018 0000079B 54                  <3>  push sp
  2019 0000079C 5D                  <3>  pop bp
  2020 0000079D 8B460B              <2> 			mov ax,[bp+0x0B]
  2021 000007A0 894600              <2> 			mov word [bp+0], ax
  2022 000007A3 8B460D              <2> 			mov ax,[bp+0x0D]
  2023 000007A6 894602              <2> 			mov word [bp+2], ax
  2024 000007A9 8B4617              <2> 			mov ax,[bp+0x17]
  2025 000007AC 894604              <2> 			mov word [bp+4], ax
  2026 000007AF 8B4619              <2> 			mov ax,[bp+0x19]
  2027 000007B2 894606              <2> 			mov word [bp+6], ax
  2028 000007B5 884E08              <2> 			mov byte [bp+8], cl
  2029 000007B8 E8AD02              <2> 			call proc_calc_prox_dividendo
  2030 000007BB 89E0                <2> 			mov ax,sp
  2031 000007BD 89C5                <2> 			mov bp,ax
  2032 000007BF 8B4604              <2> 			mov word ax,[bp+4]
  2033 000007C2 8B5E06              <2> 			mov word bx,[bp+6]
  2034 000007C5 8A4E08              <2> 			mov byte cl,[bp+8] 
  2035                              <2> 			stkclose 9
  2036 000007C8 83C409              <3>  add word sp, %1
  2037 000007CB 89E2                <2> 			mov dx,sp
  2038 000007CD 89D5                <2> 			mov bp,dx
  2039 000007CF 89460E              <2> 			mov [bp+0x0E],ax
  2040 000007D2 895E10              <2> 			mov [bp+0x10],bx
  2041 000007D5 51                  <2> 			push cx
  2042 000007D6 E93DFF              <2> 			jmp .l1
  2043                              <2> 		.l2:	
  2044 000007D9 59                  <2> 		pop cx
  2045                              <2> 			
  2046 000007DA EB16                <2> 		jmp .enddiv
  2047                              <2> 	.qzero:
  2048 000007DC C7460A0000          <2> 		mov word [bp+0x0A], 0
  2049 000007E1 C7460C0000          <2> 		mov word [bp+0x0C], 0
  2050 000007E6 8B4602              <2> 		mov ax,[bp+2]
  2051 000007E9 89460E              <2> 		mov word [bp+0x0E], ax
  2052 000007EC 8B4604              <2> 		mov ax,[bp+4]
  2053 000007EF 894610              <2> 		mov word [bp+0x10], ax	
  2054                              <2> 	.enddiv:
  2055 000007F2 C6461200            <2> 		mov byte [bp+0x12], 0
  2056 000007F6 EB04                <2> 		jmp .end
  2057                              <2> 	.divbyzero:
  2058 000007F8 C6461201            <2> 		mov byte [bp+0x12], 1						
  2059                              <2> 	.end:		
  2060                              <2> 			
  2061 000007FC C3                  <2> 	ret
  2062                              <2> 		
  2063                              <2> proc_mul32:
  2064 000007FD 89E0                <2> 	mov ax,sp
  2065 000007FF 89C5                <2> 	mov bp,ax
  2066                              <2> 	
  2067 00000801 31D2                <2> 	xor dx,dx
  2068 00000803 8B4604              <2> 	mov ax,[bp+4]
  2069 00000806 F76608              <2> 	mul word [bp+8]
  2070                              <2> 	
  2071 00000809 89560A              <2> 	mov word [bp+0x0A], dx
  2072 0000080C 89460C              <2> 	mov word [bp+0x0C], ax	
  2073                              <2> 	
  2074 0000080F 31D2                <2> 	xor dx,dx
  2075 00000811 8B4604              <2> 	mov ax,[bp+4]
  2076 00000814 F76606              <2> 	mul word [bp+6]
  2077                              <2> 		
  2078 00000817 01460A              <2> 	add word [bp+0x0A],ax
  2079                              <2> 	
  2080 0000081A 31D2                <2> 	xor dx,dx
  2081 0000081C 8B4602              <2> 	mov ax,[bp+2]
  2082 0000081F F76608              <2> 	mul word [bp+8]
  2083                              <2> 	
  2084 00000822 01460A              <2> 	add word [bp+0x0A],ax
  2085                              <2> 	
  2086 00000825 C3                  <2> 	ret
  2087                              <2> 
  2088                              <2> proc_add32:
  2089 00000826 89E0                <2> 	mov ax,sp
  2090 00000828 89C5                <2> 	mov bp,ax
  2091                              <2> 	
  2092 0000082A 8B4602              <2> 	mov ax,[bp+2]
  2093 0000082D 8B5E04              <2> 	mov bx,[bp+4]
  2094 00000830 8B4E06              <2> 	mov cx,[bp+6]
  2095 00000833 8B5608              <2> 	mov dx,[bp+8]
  2096                              <2> 	
  2097 00000836 01D3                <2> 	add bx,dx
  2098 00000838 11C8                <2> 	adc ax,cx
  2099                              <2> 	
  2100 0000083A 89460A              <2> 	mov [bp+0x0A],ax
  2101 0000083D 895E0C              <2> 	mov [bp+0x0C],bx	
  2102                              <2> 	
  2103 00000840 C3                  <2> 	ret
  2104                              <2> 	
  2105                              <2> proc_sub32:
  2106 00000841 89E0                <2> 	mov ax,sp
  2107 00000843 89C5                <2> 	mov bp,ax
  2108                              <2> 	
  2109 00000845 8B4602              <2> 	mov ax,[bp+2]
  2110 00000848 8B5E04              <2> 	mov bx,[bp+4]
  2111 0000084B 8B4E06              <2> 	mov cx,[bp+6]
  2112 0000084E 8B5608              <2> 	mov dx,[bp+8]
  2113                              <2> 	
  2114 00000851 29D3                <2> 	sub bx,dx
  2115 00000853 19C8                <2> 	sbb ax,cx
  2116                              <2> 	
  2117 00000855 89460A              <2> 	mov [bp+0x0A],ax
  2118 00000858 895E0C              <2> 	mov [bp+0x0C],bx	
  2119                              <2> 	
  2120 0000085B C3                  <2> 	ret
  2121                              <2> 		
  2122                              <2> proc_cmp32:
  2123 0000085C 89E0                <2> 	mov ax,sp
  2124 0000085E 89C5                <2> 	mov bp,ax		
  2125                              <2> 		
  2126 00000860 8B4602              <2> 	mov ax,[bp+2]
  2127 00000863 3B4606              <2> 	cmp word ax,[bp+6]
  2128 00000866 7F04                <2> 	jg .above
  2129 00000868 7C08                <2> 	jl .below
  2130 0000086A 740C                <2> 	je .equal
  2131                              <2> 	.above:
  2132 0000086C C6460A01            <2> 		mov byte [bp+0x0A], 00000001b
  2133 00000870 EB14                <2> 		jmp .endcmp
  2134                              <2> 	.below:
  2135 00000872 C6460A81            <2> 		mov byte [bp+0x0A], 10000001b
  2136 00000876 EB0E                <2> 		jmp .endcmp
  2137                              <2> 	.equal:
  2138 00000878 8B4604              <2> 		mov ax,[bp+4]
  2139 0000087B 3B4608              <2> 		cmp word ax,[bp+8]
  2140 0000087E 7FEC                <2> 		jg .above
  2141 00000880 7CF0                <2> 		jl .below
  2142 00000882 C6460A00            <2> 		mov byte [bp+0x0A], 00000000b
  2143                              <2> 	.endcmp:		
  2144 00000886 C3                  <2> 	ret
  2145                              <2> 
  2146                              <2> proc_shl32:
  2147 00000887 89E0                <2> 	mov ax,sp
  2148 00000889 89C5                <2> 	mov bp,ax
  2149                              <2> 	
  2150 0000088B 31C0                <2> 	xor ax,ax
  2151 0000088D 8A4606              <2> 	mov byte al,[bp+6]
  2152 00000890 B310                <2> 	mov bl,10h
  2153 00000892 F6F3                <2> 	div bl
  2154                              <2> 					
  2155 00000894 3C01                <2> 	cmp al,1
  2156 00000896 7204                <2> 	jb .zero
  2157 00000898 7418                <2> 	je .one	
  2158 0000089A EB27                <2> 	jmp .above
  2159                              <2> 	.zero:	
  2160 0000089C B110                <2> 		mov cl,10h
  2161 0000089E 28E1                <2> 		sub cl,ah
  2162 000008A0 8B5E04              <2> 		mov bx,[bp+4]		
  2163 000008A3 D3EB                <2> 		shr bx,cl
  2164                              <2> 		
  2165 000008A5 88E1                <2> 		mov cl,ah		
  2166 000008A7 D36602              <2> 		shl word [bp+2],cl
  2167 000008AA 015E02              <2> 		add word [bp+2],bx				
  2168 000008AD D36604              <2> 		shl word [bp+4],cl
  2169 000008B0 EB1B                <2> 		jmp .endzo
  2170                              <2> 	.one:
  2171 000008B2 88E1                <2> 		mov cl,ah
  2172 000008B4 8B5E04              <2> 		mov bx, [bp+4]				
  2173 000008B7 D3E3                <2> 		shl bx, cl 
  2174 000008B9 895E02              <2> 		mov word [bp+2], bx
  2175 000008BC C746040000          <2> 		mov word [bp+4], 0
  2176 000008C1 EB0A                <2> 		jmp .endzo
  2177                              <2> 	.above:		
  2178 000008C3 C746020000          <2> 		mov word [bp+2], 0
  2179 000008C8 C746040000          <2> 		mov word [bp+4], 0
  2180                              <2> 	.endzo:	
  2181                              <2> 	
  2182 000008CD C3                  <2> 	ret
  2183                              <2> 	
  2184                              <2> proc_shr32:
  2185 000008CE 89E0                <2> 	mov ax,sp
  2186 000008D0 89C5                <2> 	mov bp,ax
  2187                              <2> 	
  2188 000008D2 31C0                <2> 	xor ax,ax
  2189 000008D4 8A4606              <2> 	mov byte al,[bp+6]
  2190 000008D7 B310                <2> 	mov bl,10h
  2191 000008D9 F6F3                <2> 	div bl
  2192                              <2> 					
  2193 000008DB 3C01                <2> 	cmp al,1
  2194 000008DD 7204                <2> 	jb .zero
  2195 000008DF 7418                <2> 	je .one	
  2196 000008E1 EB27                <2> 	jmp .above
  2197                              <2> 	.zero:	
  2198 000008E3 B110                <2> 		mov cl,10h
  2199 000008E5 28E1                <2> 		sub cl,ah		
  2200 000008E7 8B5E02              <2> 		mov bx,[bp+2]		
  2201 000008EA D3E3                <2> 		shl bx,cl
  2202                              <2> 		
  2203 000008EC 88E1                <2> 		mov cl,ah		
  2204 000008EE D36E02              <2> 		shr word [bp+2],cl
  2205 000008F1 D36E04              <2> 		shr word [bp+4],cl
  2206 000008F4 015E04              <2> 		add word [bp+4],bx	
  2207 000008F7 EB1B                <2> 		jmp .endzo
  2208                              <2> 	.one:			
  2209 000008F9 88E1                <2> 		mov cl,ah
  2210 000008FB 8B5E02              <2> 		mov bx,[bp+2]
  2211 000008FE D3EB                <2> 		shr bx,cl
  2212 00000900 C746020000          <2> 		mov word [bp+2],0 
  2213 00000905 895E04              <2> 		mov word [bp+4],bx
  2214 00000908 EB0A                <2> 		jmp .endzo
  2215                              <2> 	.above:		
  2216 0000090A C746020000          <2> 		mov word [bp+2],0
  2217 0000090F C746040000          <2> 		mov word [bp+4],0
  2218                              <2> 	.endzo:		
  2219                              <2> 
  2220 00000914 C3                  <2> 	ret
  2221                              <2> 	
  2222                              <2> proc__lzcount16:
  2223 00000915 89E0                <2> 	mov ax,sp
  2224 00000917 89C5                <2> 	mov bp,ax
  2225                              <2> 	
  2226 00000919 B100                <2> 	mov cl,0
  2227                              <2> 		
  2228 0000091B 8A6603              <2> 	mov ah, [bp+3]	
  2229 0000091E 80E4F0              <2> 	and ah,0xF0
  2230 00000921 80FC00              <2> 	cmp ah,0
  2231 00000924 7529                <2> 	jnz .end
  2232 00000926 FEC1                <2> 	inc cl
  2233                              <2> 	
  2234 00000928 8A6603              <2> 	mov ah, [bp+3]
  2235 0000092B 80E40F              <2> 	and ah,0x0F
  2236 0000092E 80FC00              <2> 	cmp ah,0
  2237 00000931 751C                <2> 	jnz .end
  2238 00000933 FEC1                <2> 	inc cl
  2239                              <2> 	
  2240 00000935 8A6602              <2> 	mov ah, [bp+2]
  2241 00000938 80E4F0              <2> 	and ah,0xF0
  2242 0000093B 80FC00              <2> 	cmp ah,0
  2243 0000093E 750F                <2> 	jnz .end
  2244 00000940 FEC1                <2> 	inc cl
  2245                              <2> 	
  2246 00000942 8A6602              <2> 	mov ah, [bp+2]
  2247 00000945 80E40F              <2> 	and ah,0x0F
  2248 00000948 80FC00              <2> 	cmp ah,0
  2249 0000094B 7502                <2> 	jnz .end
  2250 0000094D FEC1                <2> 	inc cl
  2251                              <2> 		
  2252                              <2> 	.end:
  2253 0000094F 884E04              <2> 	mov byte [bp+4], cl
  2254                              <2> 	
  2255 00000952 C3                  <2> 	ret
  2256                              <2> 
  2257                              <2> proc__lzbitcount16:
  2258 00000953 89E0                <2> 	mov ax,sp
  2259 00000955 89C5                <2> 	mov bp,ax
  2260                              <2> 	
  2261 00000957 8B4602              <2> 	mov word ax,[bp+2]
  2262                              <2> 		
  2263 0000095A B100                <2> 	mov cl,0
  2264                              <2> 	.l1:
  2265 0000095C 80F910              <2> 		cmp cl,16
  2266 0000095F 7310                <2> 		jae .l2
  2267                              <2> 		
  2268 00000961 89C3                <2> 		mov bx,ax
  2269 00000963 D3E3                <2> 		shl bx,cl
  2270 00000965 C1EB0F              <2> 		shr bx,15
  2271                              <2> 		
  2272 00000968 83FB00              <2> 		cmp bx,0
  2273 0000096B 7504                <2> 		jnz .l2
  2274                              <2> 		
  2275 0000096D FEC1                <2> 		inc cl		
  2276 0000096F EBEB                <2> 		jmp .l1
  2277                              <2> 	.l2:
  2278                              <2> 	
  2279 00000971 884E04              <2> 	mov byte [bp+4], cl
  2280                              <2> 	
  2281 00000974 C3                  <2> 	ret
  2282                              <2> 	
  2283                              <2> proc__lzbitcount8:
  2284 00000975 89E0                <2> 	mov ax,sp
  2285 00000977 89C5                <2> 	mov bp,ax
  2286                              <2> 	
  2287 00000979 8A4602              <2> 	mov byte al,[bp+2]
  2288                              <2> 	
  2289 0000097C B100                <2> 	mov cl,0
  2290                              <2> 	.l1:
  2291 0000097E 80F908              <2> 		cmp cl,8
  2292 00000981 7410                <2> 		je .l2
  2293                              <2> 		
  2294 00000983 88C3                <2> 		mov bl,al
  2295 00000985 D2E3                <2> 		shl bl,cl
  2296 00000987 C0EB07              <2> 		shr bl,7
  2297                              <2> 		
  2298 0000098A 80FB00              <2> 		cmp bl,0
  2299 0000098D 7504                <2> 		jnz .l2
  2300                              <2> 		
  2301 0000098F FEC1                <2> 		inc cl		
  2302 00000991 EBEB                <2> 		jmp .l1
  2303                              <2> 	.l2:
  2304                              <2> 	
  2305 00000993 884E03              <2> 	mov byte [bp+3], cl
  2306                              <2> 		
  2307 00000996 C3                  <2> 	ret
  2308                              <2> 	
  2309                              <2> proc_calc_dividendo1:
  2310 00000997 89E0                <2> 	mov ax,sp
  2311 00000999 89C5                <2> 	mov bp,ax
  2312                              <2> 	
  2313 0000099B 8B4606              <2> 	mov ax,[bp+6]
  2314 0000099E 8B5E08              <2> 	mov bx,[bp+8]
  2315 000009A1 55                  <2> 	push bp
  2316                              <2> 	__lzbitcount32 ax, bx, cl
  2317 000009A2 53                  <3>  push %2
  2318                              <3>  __lzbitcount16 %1, cl
  2319                              <4>  stkopen 3
  2320 000009A3 83EC03              <5>  sub word sp, %1
  2321 000009A6 54                  <5>  push sp
  2322 000009A7 5D                  <5>  pop bp
  2323 000009A8 894600              <4>  mov word [bp+0], %1
  2324 000009AB E8A5FF              <4>  call proc__lzbitcount16
  2325 000009AE 54                  <4>  push sp
  2326 000009AF 5D                  <4>  pop bp
  2327 000009B0 8A4E02              <4>  mov byte %2, [bp+2]
  2328                              <4>  stkclose 3
  2329 000009B3 83C403              <5>  add word sp, %1
  2330 000009B6 58                  <3>  pop ax
  2331 000009B7 80F910              <3>  cmp cl,16
  2332 000009BA 7217                <3>  jb .end
  2333 000009BC 51                  <3>  push cx
  2334                              <3>  __lzbitcount16 ax, al
  2335                              <4>  stkopen 3
  2336 000009BD 83EC03              <5>  sub word sp, %1
  2337 000009C0 54                  <5>  push sp
  2338 000009C1 5D                  <5>  pop bp
  2339 000009C2 894600              <4>  mov word [bp+0], %1
  2340 000009C5 E88BFF              <4>  call proc__lzbitcount16
  2341 000009C8 54                  <4>  push sp
  2342 000009C9 5D                  <4>  pop bp
  2343 000009CA 8A4602              <4>  mov byte %2, [bp+2]
  2344                              <4>  stkclose 3
  2345 000009CD 83C403              <5>  add word sp, %1
  2346 000009D0 59                  <3>  pop cx
  2347 000009D1 00C1                <3>  add cl,al
  2348                              <3>  .end:
  2349 000009D3 88C9                <3>  mov byte %3, cl
  2350 000009D5 5D                  <2> 	pop bp
  2351 000009D6 B320                <2> 	mov bl,32
  2352 000009D8 28CB                <2> 	sub bl,cl
  2353 000009DA 53                  <2> 	push bx
  2354                              <2> 		
  2355 000009DB 8B4602              <2> 	mov ax,[bp+2]
  2356 000009DE 8B5604              <2> 	mov dx,[bp+4]
  2357 000009E1 55                  <2> 	push bp
  2358                              <2> 	__shr32 ax, dx, cl
  2359                              <3>  stkopen 5
  2360 000009E2 83EC05              <4>  sub word sp, %1
  2361 000009E5 54                  <4>  push sp
  2362 000009E6 5D                  <4>  pop bp
  2363 000009E7 894600              <3>  mov word [bp+0], %1
  2364 000009EA 895602              <3>  mov word [bp+2], %2
  2365 000009ED 884E04              <3>  mov byte [bp+4], %3
  2366 000009F0 E8DBFE              <3>  call proc_shr32
  2367 000009F3 54                  <3>  push sp
  2368 000009F4 5D                  <3>  pop bp
  2369 000009F5 8B4600              <3>  mov word %1, [bp+0]
  2370 000009F8 8B5602              <3>  mov word %2, [bp+2]
  2371                              <3>  stkclose 5
  2372 000009FB 83C405              <4>  add word sp, %1
  2373 000009FE 5D                  <2> 	pop bp
  2374 000009FF 50                  <2> 	push ax
  2375 00000A00 52                  <2> 	push dx	
  2376                              <2> 	
  2377 00000A01 8B4E06              <2> 	mov cx,[bp+6]
  2378 00000A04 8B5E08              <2> 	mov bx,[bp+8]
  2379                              <2> 	
  2380 00000A07 55                  <2> 	push bp
  2381                              <2> 	__cmp32 ax, dx, cx, bx, cl
  2382                              <3>  stkopen 9
  2383 00000A08 83EC09              <4>  sub word sp, %1
  2384 00000A0B 54                  <4>  push sp
  2385 00000A0C 5D                  <4>  pop bp
  2386 00000A0D 894600              <3>  mov word [bp+0], %1
  2387 00000A10 895602              <3>  mov word [bp+2], %2
  2388 00000A13 894E04              <3>  mov word [bp+4], %3
  2389 00000A16 895E06              <3>  mov word [bp+6], %4
  2390 00000A19 E840FE              <3>  call proc_cmp32
  2391 00000A1C 54                  <3>  push sp
  2392 00000A1D 5D                  <3>  pop bp
  2393 00000A1E 8A4E08              <3>  mov byte %5, [bp+8]
  2394                              <3>  stkclose 9
  2395 00000A21 83C409              <4>  add word sp, %1
  2396 00000A24 5D                  <2> 	pop bp
  2397 00000A25 5A                  <2> 	pop dx
  2398 00000A26 58                  <2> 	pop ax
  2399 00000A27 5B                  <2> 	pop bx
  2400                              <2> 		
  2401 00000A28 80F900              <2> 	cmp cl,0
  2402 00000A2B 7D2D                <2> 	jge .l1
  2403                              <2> 		stkopen 9
  2404 00000A2D 83EC09              <3>  sub word sp, %1
  2405 00000A30 54                  <3>  push sp
  2406 00000A31 5D                  <3>  pop bp
  2407 00000A32 8B4E0B              <2> 		mov cx,[bp+0x0B]
  2408 00000A35 894E00              <2> 		mov word [bp+0], cx
  2409 00000A38 8B4E0D              <2> 		mov cx,[bp+0x0D]
  2410 00000A3B 894E02              <2> 		mov word [bp+2], cx
  2411 00000A3E 894604              <2> 		mov word [bp+4], ax
  2412 00000A41 895606              <2> 		mov word [bp+6], dx
  2413 00000A44 885E08              <2> 		mov byte [bp+8], bl
  2414 00000A47 E81E00              <2> 		call proc_calc_prox_dividendo
  2415 00000A4A 89E0                <2> 		mov ax,sp
  2416 00000A4C 89C5                <2> 		mov bp,ax
  2417 00000A4E 8B4604              <2> 		mov word ax,[bp+4]
  2418 00000A51 8B5606              <2> 		mov word dx,[bp+6]
  2419 00000A54 8A5E08              <2> 		mov byte bl,[bp+8] 
  2420                              <2> 		stkclose 9		 
  2421 00000A57 83C409              <3>  add word sp, %1
  2422                              <2> 	.l1:
  2423                              <2> 	
  2424 00000A5A 89E1                <2> 	mov cx,sp
  2425 00000A5C 89CD                <2> 	mov bp,cx
  2426 00000A5E 89460A              <2> 	mov word [bp+0x0A], ax
  2427 00000A61 89560C              <2> 	mov word [bp+0x0C], dx
  2428 00000A64 885E0E              <2> 	mov byte [bp+0x0E], bl	 
  2429                              <2> 	
  2430 00000A67 C3                  <2> 	ret
  2431                              <2> 
  2432                              <2> proc_calc_prox_dividendo:
  2433 00000A68 89E0                <2> 	mov ax,sp
  2434 00000A6A 89C5                <2> 	mov bp,ax
  2435                              <2> 	
  2436 00000A6C 30E4                <2> 	xor ah,ah	
  2437 00000A6E 8A460A              <2> 	mov al,[bp+0x0A]
  2438 00000A71 B310                <2> 	mov bl,10h
  2439 00000A73 F6F3                <2> 	div bl
  2440                              <2> 	
  2441 00000A75 3C00                <2> 	cmp al,0
  2442 00000A77 7402                <2> 	jz .zero
  2443 00000A79 EB05                <2> 	jmp .one
  2444                              <2> 	.zero:
  2445 00000A7B 8B5E02              <2> 		mov bx,[bp+2]
  2446 00000A7E EB03                <2> 		jmp .endcmp
  2447                              <2> 	.one:
  2448 00000A80 8B5E04              <2> 		mov bx,[bp+4]		
  2449                              <2> 	.endcmp:
  2450                              <2> 		
  2451 00000A83 88E1                <2> 	mov cl,ah
  2452 00000A85 D3E3                <2> 	shl bx,cl
  2453 00000A87 C1EB0F              <2> 	shr bx,15
  2454                              <2> 	
  2455 00000A8A 8B4606              <2> 	mov ax,[bp+6]
  2456 00000A8D 8B5608              <2> 	mov dx,[bp+8]
  2457 00000A90 53                  <2> 	push bx
  2458                              <2> 	__shl32 ax, dx, 1
  2459                              <3>  stkopen 5
  2460 00000A91 83EC05              <4>  sub word sp, %1
  2461 00000A94 54                  <4>  push sp
  2462 00000A95 5D                  <4>  pop bp
  2463 00000A96 894600              <3>  mov word [bp+0], %1
  2464 00000A99 895602              <3>  mov word [bp+2], %2
  2465 00000A9C C6460401            <3>  mov byte [bp+4], %3
  2466 00000AA0 E8E4FD              <3>  call proc_shl32
  2467 00000AA3 54                  <3>  push sp
  2468 00000AA4 5D                  <3>  pop bp
  2469 00000AA5 8B4600              <3>  mov word %1, [bp+0]
  2470 00000AA8 8B5602              <3>  mov word %2, [bp+2]
  2471                              <3>  stkclose 5
  2472 00000AAB 83C405              <4>  add word sp, %1
  2473 00000AAE 5B                  <2> 	pop bx
  2474                              <2> 	
  2475 00000AAF 01DA                <2> 	add dx,bx
  2476 00000AB1 83D000              <2> 	adc ax,0
  2477                              <2> 
  2478 00000AB4 89E1                <2> 	mov cx,sp
  2479 00000AB6 89CD                <2> 	mov bp,cx	
  2480 00000AB8 894606              <2> 	mov [bp+6],ax
  2481 00000ABB 895608              <2> 	mov [bp+8],dx
  2482                              <2> 	
  2483 00000ABE FE460A              <2> 	inc byte [bp+0x0A]
  2484                              <2> 	
  2485 00000AC1 C3                  <2> 	ret
  2486                              <2> 	
  2487                              <2> %endif
  2488                              <1> 	%include "lib/system.mac"
  2489                              <2>  
  2490                              <2> %ifndef SYSTEM_MAC
  2491                              <2>  	%define SYSTEM_MAC
  2492                              <2>  	
  2493                              <2> 	%ifndef TRUE
  2494                              <2> 		%define TRUE 01h
  2495                              <2> 	%endif
  2496                              <2> 	%ifndef FALSE
  2497                              <2> 		%define FALSE 00h
  2498                              <2> 	%endif 	
  2499                              <2>  	
  2500                              <2>  	%include "lib/kernel.asmh"
  2501                              <2>  	 	
  2502                              <2> %macro mformat 4
  2503                              <2> 	stkopen 8
  2504                              <2> 	mov word [ bp + 0 ], %1
  2505                              <2> 	mov word [ bp + 2 ], %2
  2506                              <2> 	mov word [ bp + 4 ], %3
  2507                              <2> 	mov word [ bp + 6 ], %4
  2508                              <2> 	call kernel_segment:mformat
  2509                              <2> 	stkclose 8
  2510                              <2> %endmacro
  2511                              <2> 
  2512                              <2> %macro malloc 6
  2513                              <2> 	stkopen 0Bh
  2514                              <2> 	mov word [ bp + 4 ], %3
  2515                              <2> 	mov word [ bp + 6 ], %4
  2516                              <2> 	mov word [ bp + 8 ], %5	
  2517                              <2> 	call kernel_segment:malloc
  2518                              <2> 	push sp
  2519                              <2> 	pop bp
  2520                              <2> 	mov word %1, [ bp ]
  2521                              <2> 	mov word %2, [ bp + 2 ]
  2522                              <2> 	mov byte %6, [ bp + 0x0A ]
  2523                              <2> 	stkclose 0Bh
  2524                              <2> %endmacro 	
  2525                              <2> 
  2526                              <2> %macro laddr 2
  2527                              <2> 	laddr %1, %2, %1, %2
  2528                              <2> %endmacro
  2529                              <2> 
  2530                              <2> %macro faddr 2
  2531                              <2> 	faddr %1, %2, %1, %2
  2532                              <2> %endmacro
  2533                              <2>  	
  2534                              <2> %macro laddr 4
  2535                              <2> 	stkopen 8
  2536                              <2> 	mov word [ bp + 4 ], %3
  2537                              <2> 	mov word [ bp + 6 ], %4	
  2538                              <2> 	call kernel_segment:laddr
  2539                              <2> 	push sp
  2540                              <2> 	pop bp
  2541                              <2> 	mov word %1, [ bp + 0 ]
  2542                              <2> 	mov word %2, [ bp + 2 ]	
  2543                              <2> 	stkclose 8
  2544                              <2> %endmacro
  2545                              <2> 
  2546                              <2> %macro faddr 4
  2547                              <2> 	stkopen 8
  2548                              <2> 	mov word [ bp + 4 ], %3
  2549                              <2> 	mov word [ bp + 6 ], %4	
  2550                              <2> 	call kernel_segment:faddr
  2551                              <2> 	push sp
  2552                              <2> 	pop bp
  2553                              <2> 	mov word %1, [ bp + 0 ]
  2554                              <2> 	mov word %2, [ bp + 2 ]	
  2555                              <2> 	stkclose 8
  2556                              <2> %endmacro	
  2557                              <2>  
  2558                              <2> 
  2559                              <2> %macro stkopen 1		
  2560                              <2> 	sub word sp, %1
  2561                              <2> 	push sp
  2562                              <2> 	pop bp
  2563                              <2> %endmacro
  2564                              <2> 
  2565                              <2> %macro stkclose 1
  2566                              <2> 	add word sp, %1
  2567                              <2> %endmacro
  2568                              <2> 
  2569                              <2> %macro stkload 1-* 	
  2570                              <2>  	%rep %0
  2571                              <2>  	 	%rotate -1
  2572                              <2>  		pop %1
  2573                              <2>  	%endrep
  2574                              <2>  	%rep %0
  2575                              <2>  		push %1
  2576                              <2>  		%rotate 1
  2577                              <2>  	%endrep
  2578                              <2> %endmacro
  2579                              <2> 
  2580                              <2> %macro stkpush 1-* 	
  2581                              <2>  	%rep %0
  2582                              <2>  		push %1
  2583                              <2>  		%rotate 1
  2584                              <2>  	%endrep 	
  2585                              <2> %endmacro
  2586                              <2>  
  2587                              <2> %macro stkpop 1-*
  2588                              <2>  	%rep %0
  2589                              <2>  	 	%rotate -1
  2590                              <2>  		pop %1
  2591                              <2>  	%endrep 	 	
  2592                              <2> %endmacro
  2593                              <2> 
  2594                              <2> %macro toreg16 3
  2595                              <2> 	push %1
  2596                              <2> 	pop ds
  2597                              <2> 	mov word %3, [%2]
  2598                              <2> %endmacro
  2599                              <2> 
  2600                              <2> %macro toreg8 3
  2601                              <2> 	push %1
  2602                              <2> 	pop ds
  2603                              <2> 	mov byte %3, [%2]
  2604                              <2> %endmacro
  2605                              <2> 
  2606                              <2> %macro tovar16 3
  2607                              <2> 	push %1
  2608                              <2> 	pop ds
  2609                              <2> 	mov word [%2], %3
  2610                              <2> %endmacro
  2611                              <2> 
  2612                              <2> %macro tovar8 3
  2613                              <2> 	push %1
  2614                              <2> 	pop ds
  2615                              <2> 	mov byte [%2], %3
  2616                              <2> %endmacro 
  2617                              <2>  	
  2618                              <2> %endif 
  2619                              <1> 
  2620                              <1> %macro int32to16 2
  2621                              <1> 	int32to16 cs, %1, %2
  2622                              <1> %endmacro
  2623                              <1> 
  2624                              <1> %macro int16to32 2
  2625                              <1> 	int16to32 %1, cs, %2
  2626                              <1> %endmacro
  2627                              <1> 
  2628                              <1> %macro setsig 1
  2629                              <1> 	setsig cs, %1
  2630                              <1> %endmacro
  2631                              <1> 
  2632                              <1> %macro clrsig 1
  2633                              <1> 	clrsig cs, %1
  2634                              <1> %endmacro
  2635                              <1> 
  2636                              <1> %macro idiv32 5
  2637                              <1> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2638                              <1> %endmacro
  2639                              <1> 
  2640                              <1> %macro imul32 3
  2641                              <1> 	imul32 cs, %1, cs, %2, cs, %3
  2642                              <1> %endmacro
  2643                              <1> 
  2644                              <1> %macro iadd32 3
  2645                              <1> 	iadd32 cs, %1, cs, %2, cs, %3
  2646                              <1> %endmacro
  2647                              <1> 
  2648                              <1> %macro isub32 3
  2649                              <1> 	isub32 cs, %1, cs, %2, cs, %3
  2650                              <1> %endmacro
  2651                              <1> 
  2652                              <1> %macro div32 5
  2653                              <1> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  2654                              <1> %endmacro
  2655                              <1> 
  2656                              <1> %macro mul32 3
  2657                              <1> 	mul32 cs, %1, cs, %2, cs, %3
  2658                              <1> %endmacro
  2659                              <1> 	
  2660                              <1> %macro add32 3
  2661                              <1> 	add32 cs, %1, cs, %2, cs, %3
  2662                              <1> %endmacro
  2663                              <1> 
  2664                              <1> %macro sub32 3
  2665                              <1> 	sub32 cs, %1, cs, %2, cs, %3
  2666                              <1> %endmacro
  2667                              <1> 
  2668                              <1> %macro int32to16 3
  2669                              <1> 	stkopen 0x06
  2670                              <1> 	mov ax,%1
  2671                              <1> 	mov ds,ax
  2672                              <1> 	mov ax,[%2+2]
  2673                              <1> 	mov word [bp+0], ax
  2674                              <1> 	mov ax,[%2]	
  2675                              <1> 	mov word [bp+2], ax
  2676                              <1> 	call proc_int32to16
  2677                              <1> 	mov ax,sp
  2678                              <1> 	mov bp,ax
  2679                              <1> 	mov ax,[bp+4]
  2680                              <1> 	mov word %3, ax	
  2681                              <1> 	stkclose 0x06
  2682                              <1> %endmacro
  2683                              <1> 
  2684                              <1> %macro int16to32 3
  2685                              <1> 	stkopen 0x06
  2686                              <1> 	mov word [bp+0], %1	
  2687                              <1> 	call proc_int16to32
  2688                              <1> 	mov ax,sp
  2689                              <1> 	mov bp,ax
  2690                              <1> 	mov ax,%2
  2691                              <1> 	mov ds,ax
  2692                              <1> 	mov ax,[bp+2]
  2693                              <1> 	mov [%3+2],ax
  2694                              <1> 	mov ax,[bp+4]
  2695                              <1> 	mov [%3],ax	
  2696                              <1> 	stkclose 0x06
  2697                              <1> %endmacro
  2698                              <1> 
  2699                              <1> %macro setsig 2
  2700                              <1> 	stkopen 0x02
  2701                              <1> 	mov ax,%1
  2702                              <1> 	mov ds,ax
  2703                              <1> 	mov ax,[%2+2]
  2704                              <1> 	mov word [bp+0], ax
  2705                              <1> 	call proc_setsig
  2706                              <1> 	mov ax,sp
  2707                              <1> 	mov bp,ax
  2708                              <1> 	mov ax,%1
  2709                              <1> 	mov ds,ax
  2710                              <1> 	mov ax,[bp+0]
  2711                              <1> 	mov word [%2+2], ax
  2712                              <1> 	stkclose 0x02
  2713                              <1> %endmacro
  2714                              <1> 
  2715                              <1> %macro clrsig 2
  2716                              <1> 	stkopen 0x02
  2717                              <1> 	mov ax,%1
  2718                              <1> 	mov ds,ax
  2719                              <1> 	mov ax,[%2+2]
  2720                              <1> 	mov word [bp+0], ax
  2721                              <1> 	call proc_clrsig
  2722                              <1> 	mov ax,sp
  2723                              <1> 	mov bp,ax
  2724                              <1> 	mov ax,%1
  2725                              <1> 	mov ds,ax
  2726                              <1> 	mov ax,[bp+0]
  2727                              <1> 	mov word [%2+2], ax
  2728                              <1> 	stkclose 0x02
  2729                              <1> %endmacro
  2730                              <1> 
  2731                              <1> %macro div32 10
  2732                              <1> 	stkopen 0x11
  2733                              <1> 	mov ax,%1
  2734                              <1> 	mov ds,ax
  2735                              <1> 	mov ax,[%2+2]
  2736                              <1> 	mov word [bp+0], ax
  2737                              <1> 	mov ax,[%2]
  2738                              <1> 	mov word [bp+2], ax
  2739                              <1> 	mov ax,%3
  2740                              <1> 	mov ds,ax
  2741                              <1> 	mov ax,[%4+2]
  2742                              <1> 	mov word [bp+4], ax
  2743                              <1> 	mov ax,[%4]
  2744                              <1> 	mov word [bp+6], ax
  2745                              <1> 	call proc_div32
  2746                              <1> 	mov ax,sp
  2747                              <1> 	mov bp,ax
  2748                              <1> 	mov ax,%5
  2749                              <1> 	mov ds,ax
  2750                              <1> 	mov word ax, [bp+8]
  2751                              <1> 	mov word [%6+2], ax
  2752                              <1> 	mov word ax, [bp+0x0A]
  2753                              <1> 	mov word [%6], ax
  2754                              <1> 	mov ax,%7
  2755                              <1> 	mov ds,ax
  2756                              <1> 	mov word ax,[bp+0x0C]
  2757                              <1> 	mov word [%8+2],ax
  2758                              <1> 	mov word ax,[bp+0x0E]
  2759                              <1> 	mov word [%8],ax
  2760                              <1> 	mov ax,%9
  2761                              <1> 	mov ds,ax
  2762                              <1> 	mov byte al,[bp+0x10]
  2763                              <1> 	mov byte [%10],al
  2764                              <1> 	stkclose 0x11
  2765                              <1> %endmacro
  2766                              <1> 	
  2767                              <1> %macro mul32 6
  2768                              <1> 	stkopen 0x0C
  2769                              <1> 	mov ax,%1
  2770                              <1> 	mov ds,ax
  2771                              <1> 	mov ax,[%2+2]
  2772                              <1> 	mov word [bp+0], ax
  2773                              <1> 	mov ax,[%2]
  2774                              <1> 	mov word [bp+2], ax
  2775                              <1> 	mov ax,%3
  2776                              <1> 	mov ds,ax
  2777                              <1> 	mov ax,[%4+2]
  2778                              <1> 	mov word [bp+4], ax
  2779                              <1> 	mov ax,[%4]
  2780                              <1> 	mov word [bp+6], ax
  2781                              <1> 	call proc_mul32
  2782                              <1> 	mov ax,sp
  2783                              <1> 	mov bp,ax
  2784                              <1> 	mov ax,%5
  2785                              <1> 	mov ds,ax
  2786                              <1> 	mov word ax, [bp+8]
  2787                              <1> 	mov word [%6+2], ax
  2788                              <1> 	mov word ax, [bp+0x0A]
  2789                              <1> 	mov word [%6], ax
  2790                              <1> 	stkclose 0x0C
  2791                              <1> %endmacro	
  2792                              <1> 	
  2793                              <1> %macro add32 6
  2794                              <1> 	stkopen 0x0C
  2795                              <1> 	mov ax,%1
  2796                              <1> 	mov ds,ax
  2797                              <1> 	mov ax,[%2+2]
  2798                              <1> 	mov word [bp+0], ax
  2799                              <1> 	mov ax,[%2]
  2800                              <1> 	mov word [bp+2], ax
  2801                              <1> 	mov ax,%3
  2802                              <1> 	mov ds,ax
  2803                              <1> 	mov ax,[%4+2]
  2804                              <1> 	mov word [bp+4], ax
  2805                              <1> 	mov ax,[%4]
  2806                              <1> 	mov word [bp+6], ax
  2807                              <1> 	call proc_add32
  2808                              <1> 	mov ax,sp
  2809                              <1> 	mov bp,ax
  2810                              <1> 	mov ax,%5
  2811                              <1> 	mov ds,ax
  2812                              <1> 	mov word ax, [bp+8]
  2813                              <1> 	mov word [%6+2], ax
  2814                              <1> 	mov word ax, [bp+0x0A]
  2815                              <1> 	mov word [%6], ax
  2816                              <1> 	stkclose 0x0C
  2817                              <1> %endmacro
  2818                              <1> 
  2819                              <1> %macro sub32 6
  2820                              <1> 	stkopen 0x0C
  2821                              <1> 	mov ax,%1
  2822                              <1> 	mov ds,ax
  2823                              <1> 	mov ax,[%2+2]
  2824                              <1> 	mov word [bp+0], ax
  2825                              <1> 	mov ax,[%2]
  2826                              <1> 	mov word [bp+2], ax
  2827                              <1> 	mov ax,%3
  2828                              <1> 	mov ds,ax
  2829                              <1> 	mov ax,[%4+2]
  2830                              <1> 	mov word [bp+4], ax
  2831                              <1> 	mov ax,[%4]
  2832                              <1> 	mov word [bp+6], ax
  2833                              <1> 	call proc_sub32
  2834                              <1> 	mov ax,sp
  2835                              <1> 	mov bp,ax
  2836                              <1> 	mov ax,%5
  2837                              <1> 	mov ds,ax
  2838                              <1> 	mov word ax, [bp+8]
  2839                              <1> 	mov word [%6+2], ax
  2840                              <1> 	mov word ax, [bp+0x0A]
  2841                              <1> 	mov word [%6], ax
  2842                              <1> 	stkclose 0x0C
  2843                              <1> %endmacro
  2844                              <1> 
  2845                              <1> %macro idiv32 10
  2846                              <1> 	stkopen 0x11
  2847                              <1> 	mov ax,%1
  2848                              <1> 	mov ds,ax
  2849                              <1> 	mov ax,[%2+2]
  2850                              <1> 	mov word [bp+0], ax
  2851                              <1> 	mov ax,[%2]
  2852                              <1> 	mov word [bp+2], ax
  2853                              <1> 	mov ax,%3
  2854                              <1> 	mov ds,ax
  2855                              <1> 	mov ax,[%4+2]
  2856                              <1> 	mov word [bp+4], ax
  2857                              <1> 	mov ax,[%4]
  2858                              <1> 	mov word [bp+6], ax
  2859                              <1> 	call proc_idiv32
  2860                              <1> 	mov ax,sp
  2861                              <1> 	mov bp,ax
  2862                              <1> 	mov ax,%5
  2863                              <1> 	mov ds,ax
  2864                              <1> 	mov word ax, [bp+8]
  2865                              <1> 	mov word [%6+2], ax
  2866                              <1> 	mov word ax, [bp+0x0A]
  2867                              <1> 	mov word [%6], ax
  2868                              <1> 	mov ax,%7
  2869                              <1> 	mov ds,ax
  2870                              <1> 	mov word ax,[bp+0x0C]
  2871                              <1> 	mov word [%8+2],ax
  2872                              <1> 	mov word ax,[bp+0x0E]
  2873                              <1> 	mov word [%8],ax
  2874                              <1> 	mov ax,%9
  2875                              <1> 	mov ds,ax
  2876                              <1> 	mov byte al,[bp+0x10]
  2877                              <1> 	mov byte [%10],al
  2878                              <1> 	stkclose 0x11
  2879                              <1> %endmacro
  2880                              <1> 
  2881                              <1> %macro imul32 6
  2882                              <1> 	stkopen 0x0C
  2883                              <1> 	mov ax,%1
  2884                              <1> 	mov ds,ax
  2885                              <1> 	mov ax,[%2+2]
  2886                              <1> 	mov word [bp+0], ax
  2887                              <1> 	mov ax,[%2]
  2888                              <1> 	mov word [bp+2], ax
  2889                              <1> 	mov ax,%3
  2890                              <1> 	mov ds,ax
  2891                              <1> 	mov ax,[%4+2]
  2892                              <1> 	mov word [bp+4], ax
  2893                              <1> 	mov ax,[%4]
  2894                              <1> 	mov word [bp+6], ax
  2895                              <1> 	call proc_imul32
  2896                              <1> 	mov ax,sp
  2897                              <1> 	mov bp,ax
  2898                              <1> 	mov ax,%5
  2899                              <1> 	mov ds,ax
  2900                              <1> 	mov word ax, [bp+8]
  2901                              <1> 	mov word [%6+2], ax
  2902                              <1> 	mov word ax, [bp+0x0A]
  2903                              <1> 	mov word [%6], ax
  2904                              <1> 	stkclose 0x0C
  2905                              <1> %endmacro
  2906                              <1> 
  2907                              <1> %macro iadd32 6
  2908                              <1> 	iaddorsub32 %1, %2, %3, %4, %5, %6, 0
  2909                              <1> %endmacro
  2910                              <1> 
  2911                              <1> 
  2912                              <1> %macro isub32 6
  2913                              <1> 	iaddorsub32 %1, %2, %3, %4, %5, %6, 0x8000
  2914                              <1> %endmacro
  2915                              <1> 
  2916                              <1> %macro iaddorsub32 7
  2917                              <1> 	stkopen 0x0E
  2918                              <1> 	mov ax,%1
  2919                              <1> 	mov ds,ax
  2920                              <1> 	mov ax,[%2+2]
  2921                              <1> 	mov word [bp+0], ax
  2922                              <1> 	mov ax,[%2]
  2923                              <1> 	mov word [bp+2], ax
  2924                              <1> 	mov ax,%3
  2925                              <1> 	mov ds,ax
  2926                              <1> 	mov ax,[%4+2]
  2927                              <1> 	mov word [bp+4], ax
  2928                              <1> 	mov ax,[%4]
  2929                              <1> 	mov word [bp+6], ax
  2930                              <1> 	mov word [bp+0x0C], %7
  2931                              <1> 	call proc_iaddorsub32
  2932                              <1> 	mov ax,sp
  2933                              <1> 	mov bp,ax
  2934                              <1> 	mov ax,%5
  2935                              <1> 	mov ds,ax
  2936                              <1> 	mov word ax, [bp+8]
  2937                              <1> 	mov word [%6+2], ax
  2938                              <1> 	mov word ax, [bp+0x0A]
  2939                              <1> 	mov word [%6], ax
  2940                              <1> 	stkclose 0x0E
  2941                              <1> %endmacro	
  2942                              <1> 	
  2943                              <1> %macro cmp32 3
  2944                              <1> 	cmp32 cs, %1, cs, %2, %3
  2945                              <1> %endmacro	
  2946                              <1> 	
  2947                              <1> %macro cmp32 5
  2948                              <1> 	stkopen 9
  2949                              <1> 	mov ax,%1
  2950                              <1> 	mov ds,ax
  2951                              <1> 	mov word ax,[%2+2]
  2952                              <1> 	mov word [bp+0], ax
  2953                              <1> 	mov word ax,[%2]
  2954                              <1> 	mov word [bp+2], ax	
  2955                              <1> 	mov ax,%3
  2956                              <1> 	mov ds,ax
  2957                              <1> 	mov word ax,[%4+2]
  2958                              <1> 	mov word [bp+4], ax
  2959                              <1> 	mov word ax,[%4]
  2960                              <1> 	mov word [bp+6], ax	
  2961                              <1> 	call proc_cmp32
  2962                              <1> 	mov ax,sp
  2963                              <1> 	mov bp,ax
  2964                              <1> 	mov al,[bp+8]
  2965                              <1> 	mov byte %5,al
  2966                              <1> 	stkclose 9
  2967                              <1> %endmacro
  2968                              <1> 	
  2969                              <1> %macro shl32 2
  2970                              <1> 	shl32 cs, %1, %2
  2971                              <1> %endmacro	
  2972                              <1> 	
  2973                              <1> %macro shl32 3
  2974                              <1> 	stkopen 5
  2975                              <1> 	mov ax,%1
  2976                              <1> 	mov ds,ax
  2977                              <1> 	mov word ax,[%2+2]
  2978                              <1> 	mov word [bp+0], ax
  2979                              <1> 	mov word ax,[%2]
  2980                              <1> 	mov word [bp+2], ax
  2981                              <1> 	mov byte al, %3
  2982                              <1> 	mov byte [bp+4], al 
  2983                              <1> 	call proc_shl32
  2984                              <1> 	mov ax,sp
  2985                              <1> 	mov bp,ax
  2986                              <1> 	mov ax,%1
  2987                              <1> 	mov ds,ax
  2988                              <1> 	mov ax,[bp+0]
  2989                              <1> 	mov word [%2+2],ax
  2990                              <1> 	mov ax,[bp+2]
  2991                              <1> 	mov word [%2],ax
  2992                              <1> 	stkclose 5
  2993                              <1> %endmacro
  2994                              <1> 
  2995                              <1> 
  2996                              <1> %macro shr32 2
  2997                              <1> 	shr32 cs, %1, %2
  2998                              <1> %endmacro	
  2999                              <1> 	
  3000                              <1> %macro shr32 3
  3001                              <1> 	stkopen 5
  3002                              <1> 	mov ax,%1
  3003                              <1> 	mov ds,ax
  3004                              <1> 	mov word ax,[%2+2]
  3005                              <1> 	mov word [bp+0], ax
  3006                              <1> 	mov word ax,[%2]
  3007                              <1> 	mov word [bp+2], ax
  3008                              <1> 	mov byte al, %3
  3009                              <1> 	mov byte [bp+4], al 
  3010                              <1> 	call proc_shr32
  3011                              <1> 	mov ax,sp
  3012                              <1> 	mov bp,ax
  3013                              <1> 	mov ax,%1
  3014                              <1> 	mov ds,ax
  3015                              <1> 	mov ax,[bp+0]
  3016                              <1> 	mov word [%2+2],ax
  3017                              <1> 	mov ax,[bp+2]
  3018                              <1> 	mov word [%2],ax
  3019                              <1> 	stkclose 5
  3020                              <1> %endmacro
  3021                              <1> 	
  3022                              <1> %endif
  3023                                  %include "lib/float.mac"
  3024                              <1> 
  3025                              <1> %ifndef FLOAT_MAC
  3026                              <1> 	%define FLOAT_MAC
  3027                              <1> 	
  3028                              <1> 	%include "lib/float.asm"
  3029                              <2> 
  3030                              <2> %ifndef FLOAT_ASM
  3031                              <2> 	%define FLOAT_ASM
  3032                              <2> 	
  3033                              <2> 	%include "lib/system.mac"
  3034                              <3>  
  3035                              <3> %ifndef SYSTEM_MAC
  3036                              <3>  	%define SYSTEM_MAC
  3037                              <3>  	
  3038                              <3> 	%ifndef TRUE
  3039                              <3> 		%define TRUE 01h
  3040                              <3> 	%endif
  3041                              <3> 	%ifndef FALSE
  3042                              <3> 		%define FALSE 00h
  3043                              <3> 	%endif 	
  3044                              <3>  	
  3045                              <3>  	%include "lib/kernel.asmh"
  3046                              <3>  	 	
  3047                              <3> %macro mformat 4
  3048                              <3> 	stkopen 8
  3049                              <3> 	mov word [ bp + 0 ], %1
  3050                              <3> 	mov word [ bp + 2 ], %2
  3051                              <3> 	mov word [ bp + 4 ], %3
  3052                              <3> 	mov word [ bp + 6 ], %4
  3053                              <3> 	call kernel_segment:mformat
  3054                              <3> 	stkclose 8
  3055                              <3> %endmacro
  3056                              <3> 
  3057                              <3> %macro malloc 6
  3058                              <3> 	stkopen 0Bh
  3059                              <3> 	mov word [ bp + 4 ], %3
  3060                              <3> 	mov word [ bp + 6 ], %4
  3061                              <3> 	mov word [ bp + 8 ], %5	
  3062                              <3> 	call kernel_segment:malloc
  3063                              <3> 	push sp
  3064                              <3> 	pop bp
  3065                              <3> 	mov word %1, [ bp ]
  3066                              <3> 	mov word %2, [ bp + 2 ]
  3067                              <3> 	mov byte %6, [ bp + 0x0A ]
  3068                              <3> 	stkclose 0Bh
  3069                              <3> %endmacro 	
  3070                              <3> 
  3071                              <3> %macro laddr 2
  3072                              <3> 	laddr %1, %2, %1, %2
  3073                              <3> %endmacro
  3074                              <3> 
  3075                              <3> %macro faddr 2
  3076                              <3> 	faddr %1, %2, %1, %2
  3077                              <3> %endmacro
  3078                              <3>  	
  3079                              <3> %macro laddr 4
  3080                              <3> 	stkopen 8
  3081                              <3> 	mov word [ bp + 4 ], %3
  3082                              <3> 	mov word [ bp + 6 ], %4	
  3083                              <3> 	call kernel_segment:laddr
  3084                              <3> 	push sp
  3085                              <3> 	pop bp
  3086                              <3> 	mov word %1, [ bp + 0 ]
  3087                              <3> 	mov word %2, [ bp + 2 ]	
  3088                              <3> 	stkclose 8
  3089                              <3> %endmacro
  3090                              <3> 
  3091                              <3> %macro faddr 4
  3092                              <3> 	stkopen 8
  3093                              <3> 	mov word [ bp + 4 ], %3
  3094                              <3> 	mov word [ bp + 6 ], %4	
  3095                              <3> 	call kernel_segment:faddr
  3096                              <3> 	push sp
  3097                              <3> 	pop bp
  3098                              <3> 	mov word %1, [ bp + 0 ]
  3099                              <3> 	mov word %2, [ bp + 2 ]	
  3100                              <3> 	stkclose 8
  3101                              <3> %endmacro	
  3102                              <3>  
  3103                              <3> 
  3104                              <3> %macro stkopen 1		
  3105                              <3> 	sub word sp, %1
  3106                              <3> 	push sp
  3107                              <3> 	pop bp
  3108                              <3> %endmacro
  3109                              <3> 
  3110                              <3> %macro stkclose 1
  3111                              <3> 	add word sp, %1
  3112                              <3> %endmacro
  3113                              <3> 
  3114                              <3> %macro stkload 1-* 	
  3115                              <3>  	%rep %0
  3116                              <3>  	 	%rotate -1
  3117                              <3>  		pop %1
  3118                              <3>  	%endrep
  3119                              <3>  	%rep %0
  3120                              <3>  		push %1
  3121                              <3>  		%rotate 1
  3122                              <3>  	%endrep
  3123                              <3> %endmacro
  3124                              <3> 
  3125                              <3> %macro stkpush 1-* 	
  3126                              <3>  	%rep %0
  3127                              <3>  		push %1
  3128                              <3>  		%rotate 1
  3129                              <3>  	%endrep 	
  3130                              <3> %endmacro
  3131                              <3>  
  3132                              <3> %macro stkpop 1-*
  3133                              <3>  	%rep %0
  3134                              <3>  	 	%rotate -1
  3135                              <3>  		pop %1
  3136                              <3>  	%endrep 	 	
  3137                              <3> %endmacro
  3138                              <3> 
  3139                              <3> %macro toreg16 3
  3140                              <3> 	push %1
  3141                              <3> 	pop ds
  3142                              <3> 	mov word %3, [%2]
  3143                              <3> %endmacro
  3144                              <3> 
  3145                              <3> %macro toreg8 3
  3146                              <3> 	push %1
  3147                              <3> 	pop ds
  3148                              <3> 	mov byte %3, [%2]
  3149                              <3> %endmacro
  3150                              <3> 
  3151                              <3> %macro tovar16 3
  3152                              <3> 	push %1
  3153                              <3> 	pop ds
  3154                              <3> 	mov word [%2], %3
  3155                              <3> %endmacro
  3156                              <3> 
  3157                              <3> %macro tovar8 3
  3158                              <3> 	push %1
  3159                              <3> 	pop ds
  3160                              <3> 	mov byte [%2], %3
  3161                              <3> %endmacro 
  3162                              <3>  	
  3163                              <3> %endif 
  3164                              <2> 	%include "lib/math.mac"
  3165                              <3> 
  3166                              <3> %ifndef MATH_MAC
  3167                              <3> 	%define MATH_MAC
  3168                              <3> 	
  3169                              <3> 	%include "lib/math.asm"
  3170                              <3> 	%include "lib/system.mac"
  3171                              <3> 
  3172                              <3> %macro int32to16 2
  3173                              <3> 	int32to16 cs, %1, %2
  3174                              <3> %endmacro
  3175                              <3> 
  3176                              <3> %macro int16to32 2
  3177                              <3> 	int16to32 %1, cs, %2
  3178                              <3> %endmacro
  3179                              <3> 
  3180                              <3> %macro setsig 1
  3181                              <3> 	setsig cs, %1
  3182                              <3> %endmacro
  3183                              <3> 
  3184                              <3> %macro clrsig 1
  3185                              <3> 	clrsig cs, %1
  3186                              <3> %endmacro
  3187                              <3> 
  3188                              <3> %macro idiv32 5
  3189                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  3190                              <3> %endmacro
  3191                              <3> 
  3192                              <3> %macro imul32 3
  3193                              <3> 	imul32 cs, %1, cs, %2, cs, %3
  3194                              <3> %endmacro
  3195                              <3> 
  3196                              <3> %macro iadd32 3
  3197                              <3> 	iadd32 cs, %1, cs, %2, cs, %3
  3198                              <3> %endmacro
  3199                              <3> 
  3200                              <3> %macro isub32 3
  3201                              <3> 	isub32 cs, %1, cs, %2, cs, %3
  3202                              <3> %endmacro
  3203                              <3> 
  3204                              <3> %macro div32 5
  3205                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  3206                              <3> %endmacro
  3207                              <3> 
  3208                              <3> %macro mul32 3
  3209                              <3> 	mul32 cs, %1, cs, %2, cs, %3
  3210                              <3> %endmacro
  3211                              <3> 	
  3212                              <3> %macro add32 3
  3213                              <3> 	add32 cs, %1, cs, %2, cs, %3
  3214                              <3> %endmacro
  3215                              <3> 
  3216                              <3> %macro sub32 3
  3217                              <3> 	sub32 cs, %1, cs, %2, cs, %3
  3218                              <3> %endmacro
  3219                              <3> 
  3220                              <3> %macro int32to16 3
  3221                              <3> 	stkopen 0x06
  3222                              <3> 	mov ax,%1
  3223                              <3> 	mov ds,ax
  3224                              <3> 	mov ax,[%2+2]
  3225                              <3> 	mov word [bp+0], ax
  3226                              <3> 	mov ax,[%2]	
  3227                              <3> 	mov word [bp+2], ax
  3228                              <3> 	call proc_int32to16
  3229                              <3> 	mov ax,sp
  3230                              <3> 	mov bp,ax
  3231                              <3> 	mov ax,[bp+4]
  3232                              <3> 	mov word %3, ax	
  3233                              <3> 	stkclose 0x06
  3234                              <3> %endmacro
  3235                              <3> 
  3236                              <3> %macro int16to32 3
  3237                              <3> 	stkopen 0x06
  3238                              <3> 	mov word [bp+0], %1	
  3239                              <3> 	call proc_int16to32
  3240                              <3> 	mov ax,sp
  3241                              <3> 	mov bp,ax
  3242                              <3> 	mov ax,%2
  3243                              <3> 	mov ds,ax
  3244                              <3> 	mov ax,[bp+2]
  3245                              <3> 	mov [%3+2],ax
  3246                              <3> 	mov ax,[bp+4]
  3247                              <3> 	mov [%3],ax	
  3248                              <3> 	stkclose 0x06
  3249                              <3> %endmacro
  3250                              <3> 
  3251                              <3> %macro setsig 2
  3252                              <3> 	stkopen 0x02
  3253                              <3> 	mov ax,%1
  3254                              <3> 	mov ds,ax
  3255                              <3> 	mov ax,[%2+2]
  3256                              <3> 	mov word [bp+0], ax
  3257                              <3> 	call proc_setsig
  3258                              <3> 	mov ax,sp
  3259                              <3> 	mov bp,ax
  3260                              <3> 	mov ax,%1
  3261                              <3> 	mov ds,ax
  3262                              <3> 	mov ax,[bp+0]
  3263                              <3> 	mov word [%2+2], ax
  3264                              <3> 	stkclose 0x02
  3265                              <3> %endmacro
  3266                              <3> 
  3267                              <3> %macro clrsig 2
  3268                              <3> 	stkopen 0x02
  3269                              <3> 	mov ax,%1
  3270                              <3> 	mov ds,ax
  3271                              <3> 	mov ax,[%2+2]
  3272                              <3> 	mov word [bp+0], ax
  3273                              <3> 	call proc_clrsig
  3274                              <3> 	mov ax,sp
  3275                              <3> 	mov bp,ax
  3276                              <3> 	mov ax,%1
  3277                              <3> 	mov ds,ax
  3278                              <3> 	mov ax,[bp+0]
  3279                              <3> 	mov word [%2+2], ax
  3280                              <3> 	stkclose 0x02
  3281                              <3> %endmacro
  3282                              <3> 
  3283                              <3> %macro div32 10
  3284                              <3> 	stkopen 0x11
  3285                              <3> 	mov ax,%1
  3286                              <3> 	mov ds,ax
  3287                              <3> 	mov ax,[%2+2]
  3288                              <3> 	mov word [bp+0], ax
  3289                              <3> 	mov ax,[%2]
  3290                              <3> 	mov word [bp+2], ax
  3291                              <3> 	mov ax,%3
  3292                              <3> 	mov ds,ax
  3293                              <3> 	mov ax,[%4+2]
  3294                              <3> 	mov word [bp+4], ax
  3295                              <3> 	mov ax,[%4]
  3296                              <3> 	mov word [bp+6], ax
  3297                              <3> 	call proc_div32
  3298                              <3> 	mov ax,sp
  3299                              <3> 	mov bp,ax
  3300                              <3> 	mov ax,%5
  3301                              <3> 	mov ds,ax
  3302                              <3> 	mov word ax, [bp+8]
  3303                              <3> 	mov word [%6+2], ax
  3304                              <3> 	mov word ax, [bp+0x0A]
  3305                              <3> 	mov word [%6], ax
  3306                              <3> 	mov ax,%7
  3307                              <3> 	mov ds,ax
  3308                              <3> 	mov word ax,[bp+0x0C]
  3309                              <3> 	mov word [%8+2],ax
  3310                              <3> 	mov word ax,[bp+0x0E]
  3311                              <3> 	mov word [%8],ax
  3312                              <3> 	mov ax,%9
  3313                              <3> 	mov ds,ax
  3314                              <3> 	mov byte al,[bp+0x10]
  3315                              <3> 	mov byte [%10],al
  3316                              <3> 	stkclose 0x11
  3317                              <3> %endmacro
  3318                              <3> 	
  3319                              <3> %macro mul32 6
  3320                              <3> 	stkopen 0x0C
  3321                              <3> 	mov ax,%1
  3322                              <3> 	mov ds,ax
  3323                              <3> 	mov ax,[%2+2]
  3324                              <3> 	mov word [bp+0], ax
  3325                              <3> 	mov ax,[%2]
  3326                              <3> 	mov word [bp+2], ax
  3327                              <3> 	mov ax,%3
  3328                              <3> 	mov ds,ax
  3329                              <3> 	mov ax,[%4+2]
  3330                              <3> 	mov word [bp+4], ax
  3331                              <3> 	mov ax,[%4]
  3332                              <3> 	mov word [bp+6], ax
  3333                              <3> 	call proc_mul32
  3334                              <3> 	mov ax,sp
  3335                              <3> 	mov bp,ax
  3336                              <3> 	mov ax,%5
  3337                              <3> 	mov ds,ax
  3338                              <3> 	mov word ax, [bp+8]
  3339                              <3> 	mov word [%6+2], ax
  3340                              <3> 	mov word ax, [bp+0x0A]
  3341                              <3> 	mov word [%6], ax
  3342                              <3> 	stkclose 0x0C
  3343                              <3> %endmacro	
  3344                              <3> 	
  3345                              <3> %macro add32 6
  3346                              <3> 	stkopen 0x0C
  3347                              <3> 	mov ax,%1
  3348                              <3> 	mov ds,ax
  3349                              <3> 	mov ax,[%2+2]
  3350                              <3> 	mov word [bp+0], ax
  3351                              <3> 	mov ax,[%2]
  3352                              <3> 	mov word [bp+2], ax
  3353                              <3> 	mov ax,%3
  3354                              <3> 	mov ds,ax
  3355                              <3> 	mov ax,[%4+2]
  3356                              <3> 	mov word [bp+4], ax
  3357                              <3> 	mov ax,[%4]
  3358                              <3> 	mov word [bp+6], ax
  3359                              <3> 	call proc_add32
  3360                              <3> 	mov ax,sp
  3361                              <3> 	mov bp,ax
  3362                              <3> 	mov ax,%5
  3363                              <3> 	mov ds,ax
  3364                              <3> 	mov word ax, [bp+8]
  3365                              <3> 	mov word [%6+2], ax
  3366                              <3> 	mov word ax, [bp+0x0A]
  3367                              <3> 	mov word [%6], ax
  3368                              <3> 	stkclose 0x0C
  3369                              <3> %endmacro
  3370                              <3> 
  3371                              <3> %macro sub32 6
  3372                              <3> 	stkopen 0x0C
  3373                              <3> 	mov ax,%1
  3374                              <3> 	mov ds,ax
  3375                              <3> 	mov ax,[%2+2]
  3376                              <3> 	mov word [bp+0], ax
  3377                              <3> 	mov ax,[%2]
  3378                              <3> 	mov word [bp+2], ax
  3379                              <3> 	mov ax,%3
  3380                              <3> 	mov ds,ax
  3381                              <3> 	mov ax,[%4+2]
  3382                              <3> 	mov word [bp+4], ax
  3383                              <3> 	mov ax,[%4]
  3384                              <3> 	mov word [bp+6], ax
  3385                              <3> 	call proc_sub32
  3386                              <3> 	mov ax,sp
  3387                              <3> 	mov bp,ax
  3388                              <3> 	mov ax,%5
  3389                              <3> 	mov ds,ax
  3390                              <3> 	mov word ax, [bp+8]
  3391                              <3> 	mov word [%6+2], ax
  3392                              <3> 	mov word ax, [bp+0x0A]
  3393                              <3> 	mov word [%6], ax
  3394                              <3> 	stkclose 0x0C
  3395                              <3> %endmacro
  3396                              <3> 
  3397                              <3> %macro idiv32 10
  3398                              <3> 	stkopen 0x11
  3399                              <3> 	mov ax,%1
  3400                              <3> 	mov ds,ax
  3401                              <3> 	mov ax,[%2+2]
  3402                              <3> 	mov word [bp+0], ax
  3403                              <3> 	mov ax,[%2]
  3404                              <3> 	mov word [bp+2], ax
  3405                              <3> 	mov ax,%3
  3406                              <3> 	mov ds,ax
  3407                              <3> 	mov ax,[%4+2]
  3408                              <3> 	mov word [bp+4], ax
  3409                              <3> 	mov ax,[%4]
  3410                              <3> 	mov word [bp+6], ax
  3411                              <3> 	call proc_idiv32
  3412                              <3> 	mov ax,sp
  3413                              <3> 	mov bp,ax
  3414                              <3> 	mov ax,%5
  3415                              <3> 	mov ds,ax
  3416                              <3> 	mov word ax, [bp+8]
  3417                              <3> 	mov word [%6+2], ax
  3418                              <3> 	mov word ax, [bp+0x0A]
  3419                              <3> 	mov word [%6], ax
  3420                              <3> 	mov ax,%7
  3421                              <3> 	mov ds,ax
  3422                              <3> 	mov word ax,[bp+0x0C]
  3423                              <3> 	mov word [%8+2],ax
  3424                              <3> 	mov word ax,[bp+0x0E]
  3425                              <3> 	mov word [%8],ax
  3426                              <3> 	mov ax,%9
  3427                              <3> 	mov ds,ax
  3428                              <3> 	mov byte al,[bp+0x10]
  3429                              <3> 	mov byte [%10],al
  3430                              <3> 	stkclose 0x11
  3431                              <3> %endmacro
  3432                              <3> 
  3433                              <3> %macro imul32 6
  3434                              <3> 	stkopen 0x0C
  3435                              <3> 	mov ax,%1
  3436                              <3> 	mov ds,ax
  3437                              <3> 	mov ax,[%2+2]
  3438                              <3> 	mov word [bp+0], ax
  3439                              <3> 	mov ax,[%2]
  3440                              <3> 	mov word [bp+2], ax
  3441                              <3> 	mov ax,%3
  3442                              <3> 	mov ds,ax
  3443                              <3> 	mov ax,[%4+2]
  3444                              <3> 	mov word [bp+4], ax
  3445                              <3> 	mov ax,[%4]
  3446                              <3> 	mov word [bp+6], ax
  3447                              <3> 	call proc_imul32
  3448                              <3> 	mov ax,sp
  3449                              <3> 	mov bp,ax
  3450                              <3> 	mov ax,%5
  3451                              <3> 	mov ds,ax
  3452                              <3> 	mov word ax, [bp+8]
  3453                              <3> 	mov word [%6+2], ax
  3454                              <3> 	mov word ax, [bp+0x0A]
  3455                              <3> 	mov word [%6], ax
  3456                              <3> 	stkclose 0x0C
  3457                              <3> %endmacro
  3458                              <3> 
  3459                              <3> %macro iadd32 6
  3460                              <3> 	iaddorsub32 %1, %2, %3, %4, %5, %6, 0
  3461                              <3> %endmacro
  3462                              <3> 
  3463                              <3> 
  3464                              <3> %macro isub32 6
  3465                              <3> 	iaddorsub32 %1, %2, %3, %4, %5, %6, 0x8000
  3466                              <3> %endmacro
  3467                              <3> 
  3468                              <3> %macro iaddorsub32 7
  3469                              <3> 	stkopen 0x0E
  3470                              <3> 	mov ax,%1
  3471                              <3> 	mov ds,ax
  3472                              <3> 	mov ax,[%2+2]
  3473                              <3> 	mov word [bp+0], ax
  3474                              <3> 	mov ax,[%2]
  3475                              <3> 	mov word [bp+2], ax
  3476                              <3> 	mov ax,%3
  3477                              <3> 	mov ds,ax
  3478                              <3> 	mov ax,[%4+2]
  3479                              <3> 	mov word [bp+4], ax
  3480                              <3> 	mov ax,[%4]
  3481                              <3> 	mov word [bp+6], ax
  3482                              <3> 	mov word [bp+0x0C], %7
  3483                              <3> 	call proc_iaddorsub32
  3484                              <3> 	mov ax,sp
  3485                              <3> 	mov bp,ax
  3486                              <3> 	mov ax,%5
  3487                              <3> 	mov ds,ax
  3488                              <3> 	mov word ax, [bp+8]
  3489                              <3> 	mov word [%6+2], ax
  3490                              <3> 	mov word ax, [bp+0x0A]
  3491                              <3> 	mov word [%6], ax
  3492                              <3> 	stkclose 0x0E
  3493                              <3> %endmacro	
  3494                              <3> 	
  3495                              <3> %macro cmp32 3
  3496                              <3> 	cmp32 cs, %1, cs, %2, %3
  3497                              <3> %endmacro	
  3498                              <3> 	
  3499                              <3> %macro cmp32 5
  3500                              <3> 	stkopen 9
  3501                              <3> 	mov ax,%1
  3502                              <3> 	mov ds,ax
  3503                              <3> 	mov word ax,[%2+2]
  3504                              <3> 	mov word [bp+0], ax
  3505                              <3> 	mov word ax,[%2]
  3506                              <3> 	mov word [bp+2], ax	
  3507                              <3> 	mov ax,%3
  3508                              <3> 	mov ds,ax
  3509                              <3> 	mov word ax,[%4+2]
  3510                              <3> 	mov word [bp+4], ax
  3511                              <3> 	mov word ax,[%4]
  3512                              <3> 	mov word [bp+6], ax	
  3513                              <3> 	call proc_cmp32
  3514                              <3> 	mov ax,sp
  3515                              <3> 	mov bp,ax
  3516                              <3> 	mov al,[bp+8]
  3517                              <3> 	mov byte %5,al
  3518                              <3> 	stkclose 9
  3519                              <3> %endmacro
  3520                              <3> 	
  3521                              <3> %macro shl32 2
  3522                              <3> 	shl32 cs, %1, %2
  3523                              <3> %endmacro	
  3524                              <3> 	
  3525                              <3> %macro shl32 3
  3526                              <3> 	stkopen 5
  3527                              <3> 	mov ax,%1
  3528                              <3> 	mov ds,ax
  3529                              <3> 	mov word ax,[%2+2]
  3530                              <3> 	mov word [bp+0], ax
  3531                              <3> 	mov word ax,[%2]
  3532                              <3> 	mov word [bp+2], ax
  3533                              <3> 	mov byte al, %3
  3534                              <3> 	mov byte [bp+4], al 
  3535                              <3> 	call proc_shl32
  3536                              <3> 	mov ax,sp
  3537                              <3> 	mov bp,ax
  3538                              <3> 	mov ax,%1
  3539                              <3> 	mov ds,ax
  3540                              <3> 	mov ax,[bp+0]
  3541                              <3> 	mov word [%2+2],ax
  3542                              <3> 	mov ax,[bp+2]
  3543                              <3> 	mov word [%2],ax
  3544                              <3> 	stkclose 5
  3545                              <3> %endmacro
  3546                              <3> 
  3547                              <3> 
  3548                              <3> %macro shr32 2
  3549                              <3> 	shr32 cs, %1, %2
  3550                              <3> %endmacro	
  3551                              <3> 	
  3552                              <3> %macro shr32 3
  3553                              <3> 	stkopen 5
  3554                              <3> 	mov ax,%1
  3555                              <3> 	mov ds,ax
  3556                              <3> 	mov word ax,[%2+2]
  3557                              <3> 	mov word [bp+0], ax
  3558                              <3> 	mov word ax,[%2]
  3559                              <3> 	mov word [bp+2], ax
  3560                              <3> 	mov byte al, %3
  3561                              <3> 	mov byte [bp+4], al 
  3562                              <3> 	call proc_shr32
  3563                              <3> 	mov ax,sp
  3564                              <3> 	mov bp,ax
  3565                              <3> 	mov ax,%1
  3566                              <3> 	mov ds,ax
  3567                              <3> 	mov ax,[bp+0]
  3568                              <3> 	mov word [%2+2],ax
  3569                              <3> 	mov ax,[bp+2]
  3570                              <3> 	mov word [%2],ax
  3571                              <3> 	stkclose 5
  3572                              <3> %endmacro
  3573                              <3> 	
  3574                              <3> %endif
  3575                              <2> 	
  3576                              <2> %macro __fltoint32 4
  3577                              <2> 	stkopen 0x08
  3578                              <2> 	mov word [bp+0],%1
  3579                              <2> 	mov word [bp+2],%2
  3580                              <2> 	call proc_fltoint32
  3581                              <2> 	push sp
  3582                              <2> 	pop bp
  3583                              <2> 	mov word %3,[bp+4]
  3584                              <2> 	mov word %4,[bp+6]
  3585                              <2> 	stkclose 0x08
  3586                              <2> %endmacro
  3587                              <2> 
  3588                              <2> %macro __int32tofl 4
  3589                              <2> 	stkopen 0x08
  3590                              <2> 	mov word [bp+0],%1
  3591                              <2> 	mov word [bp+2],%2
  3592                              <2> 	call proc_int32tofl
  3593                              <2> 	push sp
  3594                              <2> 	pop bp
  3595                              <2> 	mov word %3,[bp+4]
  3596                              <2> 	mov word %4,[bp+6]
  3597                              <2> 	stkclose 0x08
  3598                              <2> %endmacro	
  3599                              <2> 	
  3600                              <2> %macro __fladd 6
  3601                              <2> 	stkopen 0x0E
  3602                              <2> 	mov word [bp+0],%1
  3603                              <2> 	mov word [bp+2],%2
  3604                              <2> 	mov word [bp+4],%3
  3605                              <2> 	mov word [bp+6],%4
  3606                              <2> 	mov word [bp+0x0C],0
  3607                              <2> 	call proc_fladdorsub
  3608                              <2> 	push sp
  3609                              <2> 	pop bp
  3610                              <2> 	mov word %5,[bp+8]
  3611                              <2> 	mov word %6,[bp+0x0A]
  3612                              <2> 	stkclose 0x0E
  3613                              <2> %endmacro
  3614                              <2> 
  3615                              <2> %macro __flsub 6
  3616                              <2> 	stkopen 0x0E
  3617                              <2> 	mov word [bp+0],%1
  3618                              <2> 	mov word [bp+2],%2
  3619                              <2> 	mov word [bp+4],%3
  3620                              <2> 	mov word [bp+6],%4
  3621                              <2> 	mov word [bp+0x0C],0x8000
  3622                              <2> 	call proc_fladdorsub
  3623                              <2> 	push sp
  3624                              <2> 	pop bp
  3625                              <2> 	mov word %5,[bp+8]
  3626                              <2> 	mov word %6,[bp+0x0A]
  3627                              <2> 	stkclose 0x0E
  3628                              <2> %endmacro
  3629                              <2> 
  3630                              <2> %macro __flmul 6
  3631                              <2> 	stkopen 0x0E
  3632                              <2> 	mov word [bp+0],%1
  3633                              <2> 	mov word [bp+2],%2
  3634                              <2> 	mov word [bp+4],%3
  3635                              <2> 	mov word [bp+6],%4
  3636                              <2> 	call proc_flmul
  3637                              <2> 	push sp
  3638                              <2> 	pop bp
  3639                              <2> 	mov word %5,[bp+8]
  3640                              <2> 	mov word %6,[bp+0x0A]
  3641                              <2> 	stkclose 0x0E
  3642                              <2> %endmacro
  3643                              <2> 
  3644                              <2> %macro __fldiv 6
  3645                              <2> 	stkopen 0x0E
  3646                              <2> 	mov word [bp+0],%1
  3647                              <2> 	mov word [bp+2],%2
  3648                              <2> 	mov word [bp+4],%3
  3649                              <2> 	mov word [bp+6],%4
  3650                              <2> 	call proc_fldiv
  3651                              <2> 	push sp
  3652                              <2> 	pop bp
  3653                              <2> 	mov word %5,[bp+8]
  3654                              <2> 	mov word %6,[bp+0x0A]
  3655                              <2> 	stkclose 0x0E
  3656                              <2> %endmacro
  3657                              <2> 
  3658                              <2> %macro __validate 7
  3659                              <2> 	stkopen 0x0D
  3660                              <2> 	mov word [bp+0],%1
  3661                              <2> 	mov word [bp+2],%2
  3662                              <2> 	mov word [bp+4],%3
  3663                              <2> 	mov word [bp+6],%4
  3664                              <2> 	call proc__validate
  3665                              <2> 	push sp
  3666                              <2> 	pop bp
  3667                              <2> 	mov word %5,[bp+8]
  3668                              <2> 	mov word %6,[bp+0x0A]
  3669                              <2> 	mov byte %7,[bp+0x0C]
  3670                              <2> 	stkclose 0x0D
  3671                              <2> %endmacro
  3672                              <2> 
  3673                              <2> %macro __div_validate 5
  3674                              <2> 	stkopen 0x09
  3675                              <2> 	mov word [bp+0],%1
  3676                              <2> 	mov word [bp+2],%2
  3677                              <2> 	call proc__div_validate
  3678                              <2> 	push sp
  3679                              <2> 	pop bp
  3680                              <2> 	mov word %3,[bp+4]
  3681                              <2> 	mov word %4,[bp+6]
  3682                              <2> 	mov byte %5,[bp+8]
  3683                              <2> 	stkclose 0x09
  3684                              <2> %endmacro
  3685                              <2> 
  3686                              <2> %macro __mul_validate 5
  3687                              <2> 	stkopen 0x09
  3688                              <2> 	mov word [bp+0],%1
  3689                              <2> 	mov word [bp+2],%2
  3690                              <2> 	call proc__mul_validate
  3691                              <2> 	push sp
  3692                              <2> 	pop bp
  3693                              <2> 	mov word %3,[bp+4]
  3694                              <2> 	mov word %4,[bp+6]
  3695                              <2> 	mov byte %5,[bp+8]
  3696                              <2> 	stkclose 0x09
  3697                              <2> %endmacro
  3698                              <2> 
  3699                              <2> %macro __addorsub_validate 7
  3700                              <2> 	stkopen 0x0D
  3701                              <2> 	mov word [bp+0],%1
  3702                              <2> 	mov word [bp+2],%2
  3703                              <2> 	mov word [bp+4],%3
  3704                              <2> 	mov word [bp+6],%4
  3705                              <2> 	call proc__addorsub_validate
  3706                              <2> 	push sp
  3707                              <2> 	pop bp
  3708                              <2> 	mov word %5,[bp+8]
  3709                              <2> 	mov word %6,[bp+0x0A]
  3710                              <2> 	mov byte %7,[bp+0x0C]
  3711                              <2> 	stkclose 0x0D
  3712                              <2> %endmacro
  3713                              <2> 
  3714                              <2> %macro __mul32_64 8
  3715                              <2> 	stkopen 0x10
  3716                              <2> 	mov word [bp+0],%1
  3717                              <2> 	mov word [bp+2],%2
  3718                              <2> 	mov word [bp+4],%3
  3719                              <2> 	mov word [bp+6],%4
  3720                              <2> 	call proc__mul32_64
  3721                              <2> 	push sp
  3722                              <2> 	pop bp
  3723                              <2> 	mov word %5,[bp+8]
  3724                              <2> 	mov word %6,[bp+0x0A]
  3725                              <2> 	mov word %7,[bp+0x0C]
  3726                              <2> 	mov word %8,[bp+0x0E]
  3727                              <2> 	stkclose 0x10
  3728                              <2> %endmacro
  3729                              <2> 
  3730                              <2> %macro __normalize 3
  3731                              <2> 	stkopen 0x06
  3732                              <2> 	mov word [bp+0],%1
  3733                              <2> 	mov word [bp+2],%2
  3734                              <2> 	mov word [bp+4],%3
  3735                              <2> 	call proc__normalize
  3736                              <2> 	push sp
  3737                              <2> 	pop bp
  3738                              <2> 	mov word %1,[bp+0]
  3739                              <2> 	mov word %2,[bp+2]
  3740                              <2> 	stkclose 0x06
  3741                              <2> %endmacro
  3742                              <2> 
  3743                              <2> %macro __setsig 3
  3744                              <2> 	stkopen 0x0C
  3745                              <2> 	mov word [bp+0],%1
  3746                              <2> 	mov word [bp+2],%2
  3747                              <2> 	call proc_setsig
  3748                              <2> 	push sp
  3749                              <2> 	pop bp
  3750                              <2> 	mov word %2,[bp+4]
  3751                              <2> 	stkclose 0x0C
  3752                              <2> %endmacro
  3753                              <2> 	
  3754                              <2> section .data
  3755                              <2> 
  3756                              <2> proc_fltoint32:
  3757 00000AC2 89E0                <2> 	mov ax,sp
  3758 00000AC4 89C5                <2> 	mov bp,ax
  3759                              <2> 
  3760 00000AC6 8B4602              <2> 	mov ax,[bp+2]
  3761 00000AC9 8B5E04              <2> 	mov bx,[bp+4]
  3762 00000ACC 25FF7F              <2> 	and ax,0x7FFF
  3763 00000ACF 09D8                <2> 	or ax,bx
  3764 00000AD1 83F800              <2> 	cmp ax,0
  3765 00000AD4 7510                <2> 	jnz .continue
  3766 00000AD6 8B4602              <2> 		mov ax,[bp+2]
  3767 00000AD9 250080              <2> 		and ax,0x8000
  3768 00000ADC 894606              <2> 		mov word [bp+6],ax
  3769 00000ADF C746080000          <2> 		mov word [bp+8],0
  3770 00000AE4 EB4B                <2> 		jmp .done
  3771                              <2> 	.continue:
  3772                              <2> 	
  3773 00000AE6 8B4E02              <2> 	mov cx,[bp+2]
  3774 00000AE9 D1E1                <2> 	shl cx,1
  3775 00000AEB 80ED7F              <2> 	sub ch,0x7F
  3776 00000AEE B117                <2> 	mov cl,23
  3777 00000AF0 38CD                <2> 	cmp ch,cl
  3778 00000AF2 7302                <2> 	jae .endexp
  3779 00000AF4 28E9                <2> 		sub cl,ch
  3780                              <2> 	.endexp:
  3781                              <2> 	
  3782 00000AF6 8B4602              <2> 	mov ax,[bp+2]
  3783 00000AF9 83E07F              <2> 	and ax,0x007F
  3784 00000AFC 0D8000              <2> 	or ax,0x0080
  3785                              <2> 	
  3786 00000AFF 8B5E04              <2> 	mov bx,[bp+4]
  3787                              <2> 		
  3788                              <2> 	__shr32 ax, bx, cl
  3789                              <3>  stkopen 5
  3790 00000B02 83EC05              <4>  sub word sp, %1
  3791 00000B05 54                  <4>  push sp
  3792 00000B06 5D                  <4>  pop bp
  3793 00000B07 894600              <3>  mov word [bp+0], %1
  3794 00000B0A 895E02              <3>  mov word [bp+2], %2
  3795 00000B0D 884E04              <3>  mov byte [bp+4], %3
  3796 00000B10 E8BBFD              <3>  call proc_shr32
  3797 00000B13 54                  <3>  push sp
  3798 00000B14 5D                  <3>  pop bp
  3799 00000B15 8B4600              <3>  mov word %1, [bp+0]
  3800 00000B18 8B5E02              <3>  mov word %2, [bp+2]
  3801                              <3>  stkclose 5
  3802 00000B1B 83C405              <4>  add word sp, %1
  3803                              <2> 		
  3804 00000B1E 89E2                <2> 	mov dx,sp
  3805 00000B20 89D5                <2> 	mov bp,dx
  3806                              <2> 	
  3807 00000B22 8B4E02              <2> 	mov cx,[bp+2]
  3808 00000B25 81E10080            <2> 	and cx,0x8000
  3809 00000B29 01C8                <2> 	add ax,cx
  3810                              <2> 	 
  3811 00000B2B 894606              <2> 	mov [bp+6],ax
  3812 00000B2E 895E08              <2> 	mov [bp+8],bx
  3813                              <2> 	
  3814                              <2> 	.done:
  3815                              <2> 	
  3816 00000B31 C3                  <2> 	ret
  3817                              <2> 	
  3818                              <2> proc_int32tofl:
  3819 00000B32 89E0                <2> 	mov ax,sp
  3820 00000B34 89C5                <2> 	mov bp,ax
  3821                              <2> 	
  3822 00000B36 8B4602              <2> 	mov ax,[bp+2]
  3823 00000B39 8B5E04              <2> 	mov bx,[bp+4]
  3824                              <2> 	
  3825 00000B3C 89C1                <2> 	mov cx,ax
  3826 00000B3E 81E1FF7F            <2> 	and cx,0x7FFF
  3827 00000B42 09D9                <2> 	or cx,bx
  3828 00000B44 83F900              <2> 	cmp cx,0
  3829 00000B47 7511                <2> 	jnz .continue
  3830 00000B49 8B4602              <2> 		mov ax,[bp+2]
  3831 00000B4C 250080              <2> 		and ax,0x8000
  3832 00000B4F 894606              <2> 		mov word [bp+6],ax
  3833 00000B52 C746080000          <2> 		mov word [bp+8],0
  3834 00000B57 E99100              <2> 		jmp .done
  3835                              <2> 	.continue:
  3836                              <2> 	
  3837 00000B5A 83E07F              <2> 	and ax,0x007F	
  3838                              <2> 	
  3839 00000B5D 894606              <2> 	mov [bp+6],ax
  3840 00000B60 895E08              <2> 	mov [bp+8],bx	
  3841                              <2> 		
  3842                              <2> 	__lzbitcount32 ax, bx, ch		
  3843 00000B63 53                  <3>  push %2
  3844                              <3>  __lzbitcount16 %1, cl
  3845                              <4>  stkopen 3
  3846 00000B64 83EC03              <5>  sub word sp, %1
  3847 00000B67 54                  <5>  push sp
  3848 00000B68 5D                  <5>  pop bp
  3849 00000B69 894600              <4>  mov word [bp+0], %1
  3850 00000B6C E8E4FD              <4>  call proc__lzbitcount16
  3851 00000B6F 54                  <4>  push sp
  3852 00000B70 5D                  <4>  pop bp
  3853 00000B71 8A4E02              <4>  mov byte %2, [bp+2]
  3854                              <4>  stkclose 3
  3855 00000B74 83C403              <5>  add word sp, %1
  3856 00000B77 58                  <3>  pop ax
  3857 00000B78 80F910              <3>  cmp cl,16
  3858 00000B7B 7217                <3>  jb .end
  3859 00000B7D 51                  <3>  push cx
  3860                              <3>  __lzbitcount16 ax, al
  3861                              <4>  stkopen 3
  3862 00000B7E 83EC03              <5>  sub word sp, %1
  3863 00000B81 54                  <5>  push sp
  3864 00000B82 5D                  <5>  pop bp
  3865 00000B83 894600              <4>  mov word [bp+0], %1
  3866 00000B86 E8CAFD              <4>  call proc__lzbitcount16
  3867 00000B89 54                  <4>  push sp
  3868 00000B8A 5D                  <4>  pop bp
  3869 00000B8B 8A4602              <4>  mov byte %2, [bp+2]
  3870                              <4>  stkclose 3
  3871 00000B8E 83C403              <5>  add word sp, %1
  3872 00000B91 59                  <3>  pop cx
  3873 00000B92 00C1                <3>  add cl,al
  3874                              <3>  .end:
  3875 00000B94 88CD                <3>  mov byte %3, cl
  3876 00000B96 B120                <2> 	mov cl,32
  3877 00000B98 28E9                <2> 	sub cl,ch
  3878                              <2> 	
  3879 00000B9A 80F918              <2> 	cmp cl,24
  3880 00000B9D 732C                <2> 	jae .endmantissa
  3881                              <2> 	
  3882 00000B9F B218                <2> 	mov dl,24
  3883 00000BA1 28CA                <2> 	sub dl,cl				
  3884                              <2> 	
  3885 00000BA3 89E0                <2> 	mov ax,sp
  3886 00000BA5 89C5                <2> 	mov bp,ax
  3887 00000BA7 8B4606              <2> 	mov ax,[bp+6]
  3888 00000BAA 8B5E08              <2> 	mov bx,[bp+8]
  3889                              <2> 	
  3890 00000BAD 51                  <2> 	push cx	
  3891                              <2> 	__shl32 ax, bx, dl	
  3892                              <3>  stkopen 5
  3893 00000BAE 83EC05              <4>  sub word sp, %1
  3894 00000BB1 54                  <4>  push sp
  3895 00000BB2 5D                  <4>  pop bp
  3896 00000BB3 894600              <3>  mov word [bp+0], %1
  3897 00000BB6 895E02              <3>  mov word [bp+2], %2
  3898 00000BB9 885604              <3>  mov byte [bp+4], %3
  3899 00000BBC E8C8FC              <3>  call proc_shl32
  3900 00000BBF 54                  <3>  push sp
  3901 00000BC0 5D                  <3>  pop bp
  3902 00000BC1 8B4600              <3>  mov word %1, [bp+0]
  3903 00000BC4 8B5E02              <3>  mov word %2, [bp+2]
  3904                              <3>  stkclose 5
  3905 00000BC7 83C405              <4>  add word sp, %1
  3906 00000BCA 59                  <2> 	pop cx
  3907                              <2> 	
  3908                              <2> 	.endmantissa:
  3909                              <2> 	
  3910 00000BCB 83E07F              <2> 	and ax,0x007F
  3911                              <2> 		
  3912 00000BCE 80C17E              <2> 	add cl,0x7E
  3913 00000BD1 C1E108              <2> 	shl cx,8
  3914 00000BD4 D1E9                <2> 	shr cx,1
  3915 00000BD6 01C8                <2> 	add ax,cx
  3916                              <2> 	
  3917 00000BD8 89E1                <2> 	mov cx,sp
  3918 00000BDA 89CD                <2> 	mov bp,cx
  3919                              <2> 	
  3920 00000BDC 8B4E02              <2> 	mov cx,[bp+2]
  3921 00000BDF 81E10080            <2> 	and cx,0x8000	
  3922 00000BE3 01C8                <2> 	add ax,cx
  3923                              <2> 		
  3924 00000BE5 894606              <2> 	mov [bp+6],ax
  3925 00000BE8 895E08              <2> 	mov [bp+8],bx
  3926                              <2> 	
  3927                              <2> 	.done:		
  3928                              <2> 	
  3929 00000BEB C3                  <2> 	ret
  3930                              <2> 
  3931                              <2> proc_fldiv:
  3932 00000BEC 89E0                <2> 	mov ax,sp
  3933 00000BEE 89C5                <2> 	mov bp,ax
  3934                              <2> 				
  3935                              <2> 	; sinal
  3936                              <2> 	
  3937 00000BF0 8B4602              <2> 	mov ax,[bp+2]
  3938 00000BF3 8B5E06              <2> 	mov bx,[bp+6]
  3939 00000BF6 250080              <2> 	and ax,0x8000
  3940 00000BF9 81E30080            <2> 	and bx,0x8000
  3941 00000BFD 31D8                <2> 	xor ax,bx
  3942 00000BFF 89460A              <2> 	mov word [bp+0x0A],ax
  3943                              <2> 		
  3944                              <2> 	; sinal calculado e setado
  3945                              <2> 
  3946                              <2> 	; valores especiais
  3947                              <2> 	
  3948 00000C02 8B4602              <2> 	mov ax,[bp+2]
  3949 00000C05 8B5E04              <2> 	mov bx,[bp+4]
  3950 00000C08 8B4E06              <2> 	mov cx,[bp+6]
  3951 00000C0B 8B5608              <2> 	mov dx,[bp+8]
  3952                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  3953                              <3>  stkopen 0x0D
  3954 00000C0E 83EC0D              <4>  sub word sp, %1
  3955 00000C11 54                  <4>  push sp
  3956 00000C12 5D                  <4>  pop bp
  3957 00000C13 894600              <3>  mov word [bp+0],%1
  3958 00000C16 895E02              <3>  mov word [bp+2],%2
  3959 00000C19 894E04              <3>  mov word [bp+4],%3
  3960 00000C1C 895606              <3>  mov word [bp+6],%4
  3961 00000C1F E83A06              <3>  call proc__validate
  3962 00000C22 54                  <3>  push sp
  3963 00000C23 5D                  <3>  pop bp
  3964 00000C24 8B4608              <3>  mov word %5,[bp+8]
  3965 00000C27 8B5E0A              <3>  mov word %6,[bp+0x0A]
  3966 00000C2A 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  3967                              <3>  stkclose 0x0D
  3968 00000C2D 83C40D              <4>  add word sp, %1
  3969 00000C30 80F900              <2> 	cmp cl,0
  3970 00000C33 750D                <2> 	jnz .continue
  3971 00000C35 89E2                <2> 		mov dx,sp
  3972 00000C37 89D5                <2> 		mov bp,dx
  3973 00000C39 01460A              <2> 		add word [bp+0x0A],ax
  3974 00000C3C 895E0C              <2> 		mov word [bp+0x0C],bx						
  3975 00000C3F E9BC00              <2> 		jmp .done	
  3976                              <2> 	.continue:
  3977                              <2> 	
  3978 00000C42 89E0                <2> 	mov ax,sp
  3979 00000C44 89C5                <2> 	mov bp,ax
  3980 00000C46 8B4602              <2> 	mov ax,[bp+2]
  3981 00000C49 8B4E06              <2> 	mov cx,[bp+6]
  3982                              <2> 	__div_validate ax, cx, ax, bx, cl
  3983                              <3>  stkopen 0x09
  3984 00000C4C 83EC09              <4>  sub word sp, %1
  3985 00000C4F 54                  <4>  push sp
  3986 00000C50 5D                  <4>  pop bp
  3987 00000C51 894600              <3>  mov word [bp+0],%1
  3988 00000C54 894E02              <3>  mov word [bp+2],%2
  3989 00000C57 E86906              <3>  call proc__div_validate
  3990 00000C5A 54                  <3>  push sp
  3991 00000C5B 5D                  <3>  pop bp
  3992 00000C5C 8B4604              <3>  mov word %3,[bp+4]
  3993 00000C5F 8B5E06              <3>  mov word %4,[bp+6]
  3994 00000C62 8A4E08              <3>  mov byte %5,[bp+8]
  3995                              <3>  stkclose 0x09
  3996 00000C65 83C409              <4>  add word sp, %1
  3997 00000C68 80F900              <2> 	cmp cl,0
  3998 00000C6B 750D                <2> 	jnz .continue2
  3999 00000C6D 89E2                <2> 		mov dx,sp
  4000 00000C6F 89D5                <2> 		mov bp,dx
  4001 00000C71 01460A              <2> 		add word [bp+0x0A],ax
  4002 00000C74 895E0C              <2> 		mov word [bp+0x0C],bx				
  4003 00000C77 E98400              <2> 		jmp .done	
  4004                              <2> 	.continue2:
  4005                              <2> 	; valores especiais tratados
  4006                              <2> 			
  4007                              <2> 	; expoente parcial
  4008                              <2> 
  4009 00000C7A 89E0                <2> 	mov ax,sp
  4010 00000C7C 89C5                <2> 	mov bp,ax
  4011 00000C7E 8B4602              <2> 	mov ax,[bp+2]
  4012 00000C81 8B5E06              <2> 	mov bx,[bp+6]
  4013 00000C84 25807F              <2> 	and ax,0x7F80
  4014 00000C87 81E3807F            <2> 	and bx,0x7F80
  4015 00000C8B D1E0                <2> 	shl ax,1
  4016 00000C8D D1E3                <2> 	shl bx,1		
  4017                              <2> 			
  4018 00000C8F 28FC                <2> 	sub ah,bh		
  4019 00000C91 80C47F              <2> 	add ah,0x7F
  4020                              <2> 	
  4021 00000C94 50                  <2> 	push ax
  4022                              <2> 		
  4023                              <2> 	; expoente parcial calculado
  4024                              <2> 	
  4025                              <2> 	; mantissa
  4026                              <2> 
  4027 00000C95 8B4602              <2> 	mov ax,[bp+2]
  4028 00000C98 8B5E04              <2> 	mov bx,[bp+4]
  4029 00000C9B 8B4E06              <2> 	mov cx,[bp+6]
  4030 00000C9E 8B5608              <2> 	mov dx,[bp+8]
  4031 00000CA1 83E07F              <2> 	and ax,0x007F
  4032 00000CA4 83E17F              <2> 	and cx,0x007F
  4033 00000CA7 0D8000              <2> 	or ax,0x0080
  4034 00000CAA 81C98000            <2> 	or cx,0x0080
  4035                              <2> 	
  4036                              <2> 	stkopen 0x11
  4037 00000CAE 83EC11              <3>  sub word sp, %1
  4038 00000CB1 54                  <3>  push sp
  4039 00000CB2 5D                  <3>  pop bp
  4040 00000CB3 894600              <2> 	mov [bp+0],ax
  4041 00000CB6 895E02              <2> 	mov [bp+2],bx
  4042 00000CB9 894E04              <2> 	mov [bp+4],cx
  4043 00000CBC 895606              <2> 	mov [bp+6],dx
  4044 00000CBF E8B504              <2> 	call proc__fldiv32
  4045 00000CC2 54                  <2> 	push sp
  4046 00000CC3 5D                  <2> 	pop bp
  4047 00000CC4 8B4E08              <2> 	mov cx,[bp+8]
  4048 00000CC7 8B560A              <2> 	mov dx,[bp+0x0A]
  4049                              <2> 	stkclose 0x11
  4050 00000CCA 83C411              <3>  add word sp, %1
  4051                              <2> 		
  4052 00000CCD 89E0                <2> 	mov ax,sp
  4053 00000CCF 89C5                <2> 	mov bp,ax
  4054 00000CD1 83C502              <2> 	add bp,2
  4055                              <2> 	
  4056 00000CD4 034E0A              <2> 	add cx,[bp+0x0A]
  4057                              <2> 			
  4058 00000CD7 58                  <2> 	pop ax	
  4059                              <2> 	__normalize cx, dx, ax
  4060                              <3>  stkopen 0x06
  4061 00000CD8 83EC06              <4>  sub word sp, %1
  4062 00000CDB 54                  <4>  push sp
  4063 00000CDC 5D                  <4>  pop bp
  4064 00000CDD 894E00              <3>  mov word [bp+0],%1
  4065 00000CE0 895602              <3>  mov word [bp+2],%2
  4066 00000CE3 894604              <3>  mov word [bp+4],%3
  4067 00000CE6 E88A03              <3>  call proc__normalize
  4068 00000CE9 54                  <3>  push sp
  4069 00000CEA 5D                  <3>  pop bp
  4070 00000CEB 8B4E00              <3>  mov word %1,[bp+0]
  4071 00000CEE 8B5602              <3>  mov word %2,[bp+2]
  4072                              <3>  stkclose 0x06
  4073 00000CF1 83C406              <4>  add word sp, %1
  4074                              <2> 	
  4075 00000CF4 89E0                <2> 	mov ax,sp
  4076 00000CF6 89C5                <2> 	mov bp,ax
  4077 00000CF8 894E0A              <2> 	mov [bp+0x0A],cx
  4078 00000CFB 89560C              <2> 	mov [bp+0x0C],dx
  4079                              <2> 	
  4080                              <2> 	.done:
  4081                              <2> 			
  4082 00000CFE C3                  <2> 	ret
  4083                              <2> 
  4084                              <2> proc_flmul:
  4085 00000CFF 89E0                <2> 	mov ax,sp
  4086 00000D01 89C5                <2> 	mov bp,ax
  4087                              <2> 	
  4088                              <2> 	; sinal
  4089                              <2> 	
  4090 00000D03 8B4602              <2> 	mov ax,[bp+2]
  4091 00000D06 8B5E06              <2> 	mov bx,[bp+6]
  4092 00000D09 250080              <2> 	and ax,0x8000
  4093 00000D0C 81E30080            <2> 	and bx,0x8000
  4094 00000D10 31D8                <2> 	xor ax,bx
  4095 00000D12 89460A              <2> 	mov word [bp+0x0A],ax
  4096                              <2> 	
  4097                              <2> 	; sinal calculado e setado
  4098                              <2> 
  4099                              <2> 	; valores especiais
  4100                              <2> 
  4101 00000D15 8B4602              <2> 	mov ax,[bp+2]
  4102 00000D18 8B5E04              <2> 	mov bx,[bp+4]
  4103 00000D1B 8B4E06              <2> 	mov cx,[bp+6]
  4104 00000D1E 8B5608              <2> 	mov dx,[bp+8]
  4105                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  4106                              <3>  stkopen 0x0D
  4107 00000D21 83EC0D              <4>  sub word sp, %1
  4108 00000D24 54                  <4>  push sp
  4109 00000D25 5D                  <4>  pop bp
  4110 00000D26 894600              <3>  mov word [bp+0],%1
  4111 00000D29 895E02              <3>  mov word [bp+2],%2
  4112 00000D2C 894E04              <3>  mov word [bp+4],%3
  4113 00000D2F 895606              <3>  mov word [bp+6],%4
  4114 00000D32 E82705              <3>  call proc__validate
  4115 00000D35 54                  <3>  push sp
  4116 00000D36 5D                  <3>  pop bp
  4117 00000D37 8B4608              <3>  mov word %5,[bp+8]
  4118 00000D3A 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4119 00000D3D 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4120                              <3>  stkclose 0x0D
  4121 00000D40 83C40D              <4>  add word sp, %1
  4122 00000D43 80F900              <2> 	cmp cl,0
  4123 00000D46 750D                <2> 	jnz .continue
  4124 00000D48 89E2                <2> 		mov dx,sp
  4125 00000D4A 89D5                <2> 		mov bp,dx
  4126 00000D4C 01460A              <2> 		add word [bp+0x0A],ax
  4127 00000D4F 895E0C              <2> 		mov word [bp+0x0C],bx						
  4128 00000D52 E95501              <2> 		jmp .done	
  4129                              <2> 	.continue:
  4130                              <2> 
  4131 00000D55 89E0                <2> 	mov ax,sp
  4132 00000D57 89C5                <2> 	mov bp,ax
  4133 00000D59 8B4602              <2> 	mov ax,[bp+2]
  4134 00000D5C 8B4E06              <2> 	mov cx,[bp+6]
  4135                              <2> 	__mul_validate ax, cx, ax, bx, cl
  4136                              <3>  stkopen 0x09
  4137 00000D5F 83EC09              <4>  sub word sp, %1
  4138 00000D62 54                  <4>  push sp
  4139 00000D63 5D                  <4>  pop bp
  4140 00000D64 894600              <3>  mov word [bp+0],%1
  4141 00000D67 894E02              <3>  mov word [bp+2],%2
  4142 00000D6A E8B005              <3>  call proc__mul_validate
  4143 00000D6D 54                  <3>  push sp
  4144 00000D6E 5D                  <3>  pop bp
  4145 00000D6F 8B4604              <3>  mov word %3,[bp+4]
  4146 00000D72 8B5E06              <3>  mov word %4,[bp+6]
  4147 00000D75 8A4E08              <3>  mov byte %5,[bp+8]
  4148                              <3>  stkclose 0x09
  4149 00000D78 83C409              <4>  add word sp, %1
  4150 00000D7B 80F900              <2> 	cmp cl,0
  4151 00000D7E 750D                <2> 	jnz .continue2
  4152 00000D80 89E2                <2> 		mov dx,sp
  4153 00000D82 89D5                <2> 		mov bp,dx
  4154 00000D84 01460A              <2> 		add word [bp+0x0A],ax
  4155 00000D87 895E0C              <2> 		mov word [bp+0x0C],bx				
  4156 00000D8A E91D01              <2> 		jmp .done	
  4157                              <2> 	.continue2:
  4158                              <2> 	; valores especiais tratados
  4159                              <2> 		
  4160                              <2> 	; expoente parcial
  4161                              <2> 
  4162 00000D8D 89E0                <2> 	mov ax,sp
  4163 00000D8F 89C5                <2> 	mov bp,ax
  4164 00000D91 8B4602              <2> 	mov ax,[bp+2]
  4165 00000D94 8B5E06              <2> 	mov bx,[bp+6]
  4166 00000D97 25807F              <2> 	and ax,0x7F80
  4167 00000D9A 81E3807F            <2> 	and bx,0x7F80
  4168 00000D9E D1E0                <2> 	shl ax,1
  4169 00000DA0 D1E3                <2> 	shl bx,1		
  4170                              <2> 			
  4171 00000DA2 80EC7F              <2> 	sub ah,0x7F
  4172 00000DA5 80EF7F              <2> 	sub bh,0x7F
  4173                              <2> 				
  4174 00000DA8 00FC                <2> 	add ah,bh
  4175 00000DAA 80C47F              <2> 	add ah,0x7F
  4176                              <2> 	
  4177 00000DAD 50                  <2> 	push ax
  4178                              <2> 	
  4179                              <2> 	; expoente parcial calculado	
  4180                              <2> 	
  4181                              <2> 	; mantissa
  4182                              <2> 	
  4183 00000DAE 8B4602              <2> 	mov ax,[bp+2]
  4184 00000DB1 8B5E04              <2> 	mov bx,[bp+4]
  4185 00000DB4 8B4E06              <2> 	mov cx,[bp+6]
  4186 00000DB7 8B5608              <2> 	mov dx,[bp+8]	
  4187                              <2> 	
  4188 00000DBA 83E07F              <2> 	and ax, 0x007F
  4189 00000DBD 83E17F              <2> 	and cx, 0x007F
  4190 00000DC0 0D8000              <2> 	or ax, 0x0080
  4191 00000DC3 81C98000            <2> 	or cx, 0x0080
  4192                              <2> 		
  4193                              <2> 	__mul32_64 ax, bx, cx, dx, ax, bx, cx, dx
  4194                              <3>  stkopen 0x10
  4195 00000DC7 83EC10              <4>  sub word sp, %1
  4196 00000DCA 54                  <4>  push sp
  4197 00000DCB 5D                  <4>  pop bp
  4198 00000DCC 894600              <3>  mov word [bp+0],%1
  4199 00000DCF 895E02              <3>  mov word [bp+2],%2
  4200 00000DD2 894E04              <3>  mov word [bp+4],%3
  4201 00000DD5 895606              <3>  mov word [bp+6],%4
  4202 00000DD8 E85103              <3>  call proc__mul32_64
  4203 00000DDB 54                  <3>  push sp
  4204 00000DDC 5D                  <3>  pop bp
  4205 00000DDD 8B4608              <3>  mov word %5,[bp+8]
  4206 00000DE0 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4207 00000DE3 8B4E0C              <3>  mov word %7,[bp+0x0C]
  4208 00000DE6 8B560E              <3>  mov word %8,[bp+0x0E]
  4209                              <3>  stkclose 0x10
  4210 00000DE9 83C410              <4>  add word sp, %1
  4211                              <2> 	
  4212 00000DEC 51                  <2> 	push cx
  4213                              <2> 	__shl32 ax, bx, 8
  4214                              <3>  stkopen 5
  4215 00000DED 83EC05              <4>  sub word sp, %1
  4216 00000DF0 54                  <4>  push sp
  4217 00000DF1 5D                  <4>  pop bp
  4218 00000DF2 894600              <3>  mov word [bp+0], %1
  4219 00000DF5 895E02              <3>  mov word [bp+2], %2
  4220 00000DF8 C6460408            <3>  mov byte [bp+4], %3
  4221 00000DFC E888FA              <3>  call proc_shl32
  4222 00000DFF 54                  <3>  push sp
  4223 00000E00 5D                  <3>  pop bp
  4224 00000E01 8B4600              <3>  mov word %1, [bp+0]
  4225 00000E04 8B5E02              <3>  mov word %2, [bp+2]
  4226                              <3>  stkclose 5
  4227 00000E07 83C405              <4>  add word sp, %1
  4228 00000E0A 59                  <2> 	pop cx
  4229 00000E0B 88EB                <2> 	mov bl,ch
  4230                              <2> 								
  4231 00000E0D 50                  <2> 	push ax
  4232 00000E0E 53                  <2> 	push bx
  4233                              <2> 	__lzbitcount32 ax, bx, cl
  4234 00000E0F 53                  <3>  push %2
  4235                              <3>  __lzbitcount16 %1, cl
  4236                              <4>  stkopen 3
  4237 00000E10 83EC03              <5>  sub word sp, %1
  4238 00000E13 54                  <5>  push sp
  4239 00000E14 5D                  <5>  pop bp
  4240 00000E15 894600              <4>  mov word [bp+0], %1
  4241 00000E18 E838FB              <4>  call proc__lzbitcount16
  4242 00000E1B 54                  <4>  push sp
  4243 00000E1C 5D                  <4>  pop bp
  4244 00000E1D 8A4E02              <4>  mov byte %2, [bp+2]
  4245                              <4>  stkclose 3
  4246 00000E20 83C403              <5>  add word sp, %1
  4247 00000E23 58                  <3>  pop ax
  4248 00000E24 80F910              <3>  cmp cl,16
  4249 00000E27 7217                <3>  jb .end
  4250 00000E29 51                  <3>  push cx
  4251                              <3>  __lzbitcount16 ax, al
  4252                              <4>  stkopen 3
  4253 00000E2A 83EC03              <5>  sub word sp, %1
  4254 00000E2D 54                  <5>  push sp
  4255 00000E2E 5D                  <5>  pop bp
  4256 00000E2F 894600              <4>  mov word [bp+0], %1
  4257 00000E32 E81EFB              <4>  call proc__lzbitcount16
  4258 00000E35 54                  <4>  push sp
  4259 00000E36 5D                  <4>  pop bp
  4260 00000E37 8A4602              <4>  mov byte %2, [bp+2]
  4261                              <4>  stkclose 3
  4262 00000E3A 83C403              <5>  add word sp, %1
  4263 00000E3D 59                  <3>  pop cx
  4264 00000E3E 00C1                <3>  add cl,al
  4265                              <3>  .end:
  4266 00000E40 88C9                <3>  mov byte %3, cl
  4267 00000E42 5B                  <2> 	pop bx
  4268 00000E43 58                  <2> 	pop ax
  4269                              <2> 		
  4270 00000E44 80E908              <2> 	sub cl,8	
  4271 00000E47 80F908              <2> 	cmp cl,8
  4272 00000E4A 7402                <2> 	je .equal
  4273 00000E4C 7F06                <2> 	jg .great
  4274                              <2> 	.equal:	
  4275 00000E4E 5A                  <2> 		pop dx
  4276 00000E4F FEC6                <2> 		inc dh
  4277 00000E51 52                  <2> 		push dx
  4278 00000E52 EB1C                <2> 		jmp .endcmp
  4279                              <2> 	.great:
  4280                              <2> 		__shl32 ax, bx, cl
  4281                              <3>  stkopen 5
  4282 00000E54 83EC05              <4>  sub word sp, %1
  4283 00000E57 54                  <4>  push sp
  4284 00000E58 5D                  <4>  pop bp
  4285 00000E59 894600              <3>  mov word [bp+0], %1
  4286 00000E5C 895E02              <3>  mov word [bp+2], %2
  4287 00000E5F 884E04              <3>  mov byte [bp+4], %3
  4288 00000E62 E822FA              <3>  call proc_shl32
  4289 00000E65 54                  <3>  push sp
  4290 00000E66 5D                  <3>  pop bp
  4291 00000E67 8B4600              <3>  mov word %1, [bp+0]
  4292 00000E6A 8B5E02              <3>  mov word %2, [bp+2]
  4293                              <3>  stkclose 5
  4294 00000E6D 83C405              <4>  add word sp, %1
  4295                              <2> 	.endcmp:
  4296                              <2> 	
  4297 00000E70 89E1                <2> 	mov cx,sp
  4298 00000E72 89CD                <2> 	mov bp,cx
  4299 00000E74 83C502              <2> 	add bp,2
  4300                              <2> 	
  4301 00000E77 01460A              <2> 	add word [bp+0x0A],ax
  4302 00000E7A 895E0C              <2> 	mov word [bp+0x0C],bx
  4303                              <2> 	
  4304                              <2> 	; mantissa setada e expoente calculado
  4305                              <2> 				
  4306 00000E7D 8B4E0A              <2> 	mov cx,[bp+0x0A]
  4307 00000E80 8B560C              <2> 	mov dx,[bp+0x0C]
  4308                              <2> 	
  4309 00000E83 58                  <2> 	pop ax						
  4310                              <2> 	__normalize cx, dx, ax	; normaliza, preserva sinal e seta expoente	
  4311                              <3>  stkopen 0x06
  4312 00000E84 83EC06              <4>  sub word sp, %1
  4313 00000E87 54                  <4>  push sp
  4314 00000E88 5D                  <4>  pop bp
  4315 00000E89 894E00              <3>  mov word [bp+0],%1
  4316 00000E8C 895602              <3>  mov word [bp+2],%2
  4317 00000E8F 894604              <3>  mov word [bp+4],%3
  4318 00000E92 E8DE01              <3>  call proc__normalize
  4319 00000E95 54                  <3>  push sp
  4320 00000E96 5D                  <3>  pop bp
  4321 00000E97 8B4E00              <3>  mov word %1,[bp+0]
  4322 00000E9A 8B5602              <3>  mov word %2,[bp+2]
  4323                              <3>  stkclose 0x06
  4324 00000E9D 83C406              <4>  add word sp, %1
  4325                              <2> 		
  4326 00000EA0 89E0                <2> 	mov ax,sp
  4327 00000EA2 89C5                <2> 	mov bp,ax
  4328 00000EA4 894E0A              <2> 	mov [bp+0x0A],cx
  4329 00000EA7 89560C              <2> 	mov [bp+0x0C],dx		
  4330                              <2> 
  4331                              <2> 	.done:
  4332                              <2> 																	
  4333 00000EAA C3                  <2> 	ret
  4334                              <2> 	
  4335                              <2> proc_fladdorsub:	
  4336                              <2> 	; valores especiais
  4337 00000EAB 89E0                <2> 	mov ax,sp
  4338 00000EAD 89C5                <2> 	mov bp,ax
  4339 00000EAF 8B4602              <2> 	mov ax,[bp+2]
  4340 00000EB2 8B5E04              <2> 	mov bx,[bp+4]
  4341 00000EB5 8B4E06              <2> 	mov cx,[bp+6]
  4342 00000EB8 81E10080            <2> 	and cx,0x8000
  4343 00000EBC 334E0E              <2> 	xor word cx,[bp+0x0E]	
  4344 00000EBF 8B5606              <2> 	mov dx,[bp+6]
  4345 00000EC2 81E2FF7F            <2> 	and dx,0x7FFF
  4346 00000EC6 01D1                <2> 	add cx,dx	
  4347 00000EC8 8B5608              <2> 	mov dx,[bp+8]
  4348                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  4349                              <3>  stkopen 0x0D
  4350 00000ECB 83EC0D              <4>  sub word sp, %1
  4351 00000ECE 54                  <4>  push sp
  4352 00000ECF 5D                  <4>  pop bp
  4353 00000ED0 894600              <3>  mov word [bp+0],%1
  4354 00000ED3 895E02              <3>  mov word [bp+2],%2
  4355 00000ED6 894E04              <3>  mov word [bp+4],%3
  4356 00000ED9 895606              <3>  mov word [bp+6],%4
  4357 00000EDC E87D03              <3>  call proc__validate
  4358 00000EDF 54                  <3>  push sp
  4359 00000EE0 5D                  <3>  pop bp
  4360 00000EE1 8B4608              <3>  mov word %5,[bp+8]
  4361 00000EE4 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4362 00000EE7 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4363                              <3>  stkclose 0x0D
  4364 00000EEA 83C40D              <4>  add word sp, %1
  4365 00000EED 80F900              <2> 	cmp cl,0
  4366 00000EF0 750D                <2> 	jnz .continue
  4367 00000EF2 89E2                <2> 		mov dx,sp
  4368 00000EF4 89D5                <2> 		mov bp,dx		
  4369 00000EF6 89460A              <2> 		mov word [bp+0x0A],ax
  4370 00000EF9 895E0C              <2> 		mov word [bp+0x0C],bx										
  4371 00000EFC E97301              <2> 		jmp .done	
  4372                              <2> 	.continue:
  4373                              <2> 	
  4374 00000EFF 89E0                <2> 	mov ax,sp
  4375 00000F01 89C5                <2> 	mov bp,ax
  4376 00000F03 8B4602              <2> 	mov ax,[bp+2]
  4377 00000F06 8B5E04              <2> 	mov bx,[bp+4]
  4378 00000F09 8B4E06              <2> 	mov cx,[bp+6]
  4379 00000F0C 81E10080            <2> 	and cx,0x8000
  4380 00000F10 334E0E              <2> 	xor word cx,[bp+0x0E]	
  4381 00000F13 8B5606              <2> 	mov dx,[bp+6]
  4382 00000F16 81E2FF7F            <2> 	and dx,0x7FFF
  4383 00000F1A 01D1                <2> 	add cx,dx
  4384 00000F1C 8B5608              <2> 	mov dx,[bp+8]
  4385                              <2> 	__addorsub_validate ax, bx, cx, dx, ax, bx, cl
  4386                              <3>  stkopen 0x0D
  4387 00000F1F 83EC0D              <4>  sub word sp, %1
  4388 00000F22 54                  <4>  push sp
  4389 00000F23 5D                  <4>  pop bp
  4390 00000F24 894600              <3>  mov word [bp+0],%1
  4391 00000F27 895E02              <3>  mov word [bp+2],%2
  4392 00000F2A 894E04              <3>  mov word [bp+4],%3
  4393 00000F2D 895606              <3>  mov word [bp+6],%4
  4394 00000F30 E81B04              <3>  call proc__addorsub_validate
  4395 00000F33 54                  <3>  push sp
  4396 00000F34 5D                  <3>  pop bp
  4397 00000F35 8B4608              <3>  mov word %5,[bp+8]
  4398 00000F38 8B5E0A              <3>  mov word %6,[bp+0x0A]
  4399 00000F3B 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  4400                              <3>  stkclose 0x0D
  4401 00000F3E 83C40D              <4>  add word sp, %1
  4402 00000F41 80F900              <2> 	cmp cl,0
  4403 00000F44 750D                <2> 	jnz .continue2
  4404 00000F46 89E2                <2> 		mov dx,sp
  4405 00000F48 89D5                <2> 		mov bp,dx					
  4406 00000F4A 89460A              <2> 		mov word [bp+0x0A],ax
  4407 00000F4D 895E0C              <2> 		mov word [bp+0x0C],bx
  4408 00000F50 E91F01              <2> 		jmp .done	
  4409                              <2> 	.continue2:
  4410                              <2> 	
  4411                              <2> 	; valores especiais tratados	
  4412                              <2> 
  4413 00000F53 89E0                <2> 	mov ax,sp
  4414 00000F55 89C5                <2> 	mov bp,ax	
  4415 00000F57 8B4602              <2> 	mov ax,[bp+2]
  4416 00000F5A 8B5E06              <2> 	mov bx,[bp+6]
  4417                              <2> 	
  4418 00000F5D D1E0                <2> 	shl ax,1
  4419 00000F5F D1E3                <2> 	shl bx,1
  4420 00000F61 88E5                <2> 	mov ch,ah	
  4421 00000F63 28FD                <2> 	sub ch,bh	
  4422                              <2> 		
  4423 00000F65 80FD00              <2> 	cmp ch,0
  4424 00000F68 7402                <2> 	jz .expzero
  4425 00000F6A EB1E                <2> 	jmp .expnzero
  4426                              <2> 	.expzero:
  4427 00000F6C 50                  <2> 		push ax
  4428 00000F6D 8B4602              <2> 		mov ax,[bp+2]
  4429 00000F70 8B5E04              <2> 		mov bx,[bp+4]
  4430 00000F73 8B4E06              <2> 		mov cx,[bp+6]
  4431 00000F76 8B5608              <2> 		mov dx,[bp+8]
  4432 00000F79 257F80              <2> 		and ax,0x807F
  4433 00000F7C 81E17F80            <2> 		and cx,0x807F
  4434 00000F80 0D8000              <2> 		or ax,0x0080
  4435 00000F83 81C98000            <2> 		or cx,0x0080
  4436                              <2> 												
  4437 00000F87 E99A00              <2> 		jmp .endexpcmp
  4438                              <2> 	.expnzero:
  4439                              <2> 				
  4440 00000F8A 80FD00              <2> 		cmp ch,0
  4441 00000F8D 7F05                <2> 		jg .exp1great
  4442 00000F8F 7C49                <2> 		jl .exp1less
  4443 00000F91 E99000              <2> 		jmp .endexpcmp
  4444                              <2> 		.exp1great:					
  4445 00000F94 50                  <2> 			push ax
  4446                              <2> 		
  4447 00000F95 8B4606              <2> 			mov ax,[bp+6]
  4448 00000F98 8B5E08              <2> 			mov bx,[bp+8]
  4449 00000F9B 83E07F              <2> 			and ax,0x007F
  4450 00000F9E 0D8000              <2> 			or ax,0x0080
  4451                              <2> 						
  4452 00000FA1 55                  <2> 			push bp
  4453                              <2> 			__shr32 ax, bx, ch
  4454                              <3>  stkopen 5
  4455 00000FA2 83EC05              <4>  sub word sp, %1
  4456 00000FA5 54                  <4>  push sp
  4457 00000FA6 5D                  <4>  pop bp
  4458 00000FA7 894600              <3>  mov word [bp+0], %1
  4459 00000FAA 895E02              <3>  mov word [bp+2], %2
  4460 00000FAD 886E04              <3>  mov byte [bp+4], %3
  4461 00000FB0 E81BF9              <3>  call proc_shr32
  4462 00000FB3 54                  <3>  push sp
  4463 00000FB4 5D                  <3>  pop bp
  4464 00000FB5 8B4600              <3>  mov word %1, [bp+0]
  4465 00000FB8 8B5E02              <3>  mov word %2, [bp+2]
  4466                              <3>  stkclose 5
  4467 00000FBB 83C405              <4>  add word sp, %1
  4468 00000FBE 5D                  <2> 			pop bp		
  4469                              <2> 				
  4470 00000FBF 8B5606              <2> 			mov dx,[bp+6]
  4471 00000FC2 81E20080            <2> 			and dx,0x8000
  4472 00000FC6 01D0                <2> 			add ax,dx			
  4473                              <2> 			
  4474 00000FC8 89C1                <2> 			mov cx,ax
  4475 00000FCA 89DA                <2> 			mov dx,bx
  4476 00000FCC 8B4602              <2> 			mov ax,[bp+2]
  4477 00000FCF 8B5E04              <2> 			mov bx,[bp+4]										
  4478                              <2> 									
  4479 00000FD2 257F80              <2> 			and ax,0x807F
  4480 00000FD5 0D8000              <2> 			or ax,0x0080
  4481                              <2> 						
  4482 00000FD8 EB4A                <2> 			jmp .endexp1cmp	
  4483                              <2> 		.exp1less:
  4484 00000FDA 88E9                <2> 			mov cl,ch
  4485 00000FDC B5FF                <2> 			mov ch,0xFF
  4486 00000FDE 28CD                <2> 			sub ch,cl
  4487 00000FE0 FEC5                <2> 			inc ch
  4488 00000FE2 53                  <2> 			push bx		
  4489                              <2> 		
  4490 00000FE3 8B4602              <2> 			mov ax,[bp+2]
  4491 00000FE6 8B5E04              <2> 			mov bx,[bp+4]
  4492 00000FE9 83E07F              <2> 			and ax,0x007F
  4493 00000FEC 0D8000              <2> 			or ax,0x0080
  4494                              <2> 						
  4495 00000FEF 55                  <2> 			push bp
  4496                              <2> 			__shr32 ax, bx, ch
  4497                              <3>  stkopen 5
  4498 00000FF0 83EC05              <4>  sub word sp, %1
  4499 00000FF3 54                  <4>  push sp
  4500 00000FF4 5D                  <4>  pop bp
  4501 00000FF5 894600              <3>  mov word [bp+0], %1
  4502 00000FF8 895E02              <3>  mov word [bp+2], %2
  4503 00000FFB 886E04              <3>  mov byte [bp+4], %3
  4504 00000FFE E8CDF8              <3>  call proc_shr32
  4505 00001001 54                  <3>  push sp
  4506 00001002 5D                  <3>  pop bp
  4507 00001003 8B4600              <3>  mov word %1, [bp+0]
  4508 00001006 8B5E02              <3>  mov word %2, [bp+2]
  4509                              <3>  stkclose 5
  4510 00001009 83C405              <4>  add word sp, %1
  4511 0000100C 5D                  <2> 			pop bp
  4512                              <2> 								
  4513 0000100D 8B5602              <2> 			mov dx,[bp+2]
  4514 00001010 81E20080            <2> 			and dx,0x8000
  4515 00001014 01D0                <2> 			add ax,dx			
  4516                              <2> 			
  4517 00001016 8B4E06              <2> 			mov cx,[bp+6]
  4518 00001019 8B5608              <2> 			mov dx,[bp+8]										
  4519                              <2> 									
  4520 0000101C 81E17F80            <2> 			and cx,0x807F
  4521 00001020 81C98000            <2> 			or cx,0x0080
  4522                              <2> 									
  4523                              <2> 		.endexp1cmp:
  4524                              <2> 		
  4525                              <2> 	.endexpcmp:
  4526                              <2> 		
  4527                              <2> 	stkopen 0x0E
  4528 00001024 83EC0E              <3>  sub word sp, %1
  4529 00001027 54                  <3>  push sp
  4530 00001028 5D                  <3>  pop bp
  4531 00001029 894600              <2> 	mov [bp+0], ax
  4532 0000102C 895E02              <2> 	mov [bp+2], bx
  4533 0000102F 894E04              <2> 	mov [bp+4], cx
  4534 00001032 895606              <2> 	mov [bp+6], dx
  4535 00001035 8B461E              <2> 	mov ax,[bp+0x1E]
  4536 00001038 89460C              <2> 	mov word [bp+0x0C], ax
  4537 0000103B E86CF5              <2> 	call proc_iaddorsub32
  4538 0000103E 89E0                <2> 	mov ax,sp
  4539 00001040 89C5                <2> 	mov bp,ax
  4540 00001042 8B4E08              <2> 	mov cx,[bp+8]
  4541 00001045 8B560A              <2> 	mov dx,[bp+0x0A]
  4542                              <2> 	stkclose 0x0E
  4543 00001048 83C40E              <3>  add word sp, %1
  4544                              <2> 					
  4545 0000104B 5B                  <2> 	pop bx
  4546                              <2> 						
  4547                              <2> 	__normalize cx, dx, bx
  4548                              <3>  stkopen 0x06
  4549 0000104C 83EC06              <4>  sub word sp, %1
  4550 0000104F 54                  <4>  push sp
  4551 00001050 5D                  <4>  pop bp
  4552 00001051 894E00              <3>  mov word [bp+0],%1
  4553 00001054 895602              <3>  mov word [bp+2],%2
  4554 00001057 895E04              <3>  mov word [bp+4],%3
  4555 0000105A E81600              <3>  call proc__normalize
  4556 0000105D 54                  <3>  push sp
  4557 0000105E 5D                  <3>  pop bp
  4558 0000105F 8B4E00              <3>  mov word %1,[bp+0]
  4559 00001062 8B5602              <3>  mov word %2,[bp+2]
  4560                              <3>  stkclose 0x06
  4561 00001065 83C406              <4>  add word sp, %1
  4562                              <2> 	
  4563 00001068 89E0                <2> 	mov ax,sp
  4564 0000106A 89C5                <2> 	mov bp,ax
  4565 0000106C 894E0A              <2> 	mov word [bp+0x0A],cx
  4566 0000106F 89560C              <2> 	mov word [bp+0x0C],dx
  4567                              <2> 			
  4568                              <2> 	.done:		
  4569                              <2> 							
  4570 00001072 C3                  <2> 	ret
  4571                              <2> 	
  4572                              <2> proc__normalize:
  4573 00001073 89E0                <2> 	mov ax,sp
  4574 00001075 89C5                <2> 	mov bp,ax	
  4575                              <2> 
  4576 00001077 8B4E02              <2> 	mov cx,[bp+2]	
  4577 0000107A 8B5604              <2> 	mov dx,[bp+4]
  4578 0000107D 8B5E06              <2> 	mov bx,[bp+6]
  4579                              <2> 					
  4580 00001080 89C8                <2> 	mov ax,cx
  4581 00001082 250080              <2> 	and ax,0x8000			
  4582 00001085 894602              <2> 	mov [bp+2],ax	
  4583                              <2> 					
  4584 00001088 81E1FF7F            <2> 	and cx,0x7FFF
  4585                              <2> 			
  4586 0000108C 51                  <2> 	push cx
  4587 0000108D 52                  <2> 	push dx
  4588 0000108E 53                  <2> 	push bx
  4589                              <2> 	__lzbitcount32 cx, dx, al	
  4590 0000108F 52                  <3>  push %2
  4591                              <3>  __lzbitcount16 %1, cl
  4592                              <4>  stkopen 3
  4593 00001090 83EC03              <5>  sub word sp, %1
  4594 00001093 54                  <5>  push sp
  4595 00001094 5D                  <5>  pop bp
  4596 00001095 894E00              <4>  mov word [bp+0], %1
  4597 00001098 E8B8F8              <4>  call proc__lzbitcount16
  4598 0000109B 54                  <4>  push sp
  4599 0000109C 5D                  <4>  pop bp
  4600 0000109D 8A4E02              <4>  mov byte %2, [bp+2]
  4601                              <4>  stkclose 3
  4602 000010A0 83C403              <5>  add word sp, %1
  4603 000010A3 58                  <3>  pop ax
  4604 000010A4 80F910              <3>  cmp cl,16
  4605 000010A7 7217                <3>  jb .end
  4606 000010A9 51                  <3>  push cx
  4607                              <3>  __lzbitcount16 ax, al
  4608                              <4>  stkopen 3
  4609 000010AA 83EC03              <5>  sub word sp, %1
  4610 000010AD 54                  <5>  push sp
  4611 000010AE 5D                  <5>  pop bp
  4612 000010AF 894600              <4>  mov word [bp+0], %1
  4613 000010B2 E89EF8              <4>  call proc__lzbitcount16
  4614 000010B5 54                  <4>  push sp
  4615 000010B6 5D                  <4>  pop bp
  4616 000010B7 8A4602              <4>  mov byte %2, [bp+2]
  4617                              <4>  stkclose 3
  4618 000010BA 83C403              <5>  add word sp, %1
  4619 000010BD 59                  <3>  pop cx
  4620 000010BE 00C1                <3>  add cl,al
  4621                              <3>  .end:
  4622 000010C0 88C8                <3>  mov byte %3, cl
  4623 000010C2 5B                  <2> 	pop bx
  4624 000010C3 5A                  <2> 	pop dx
  4625 000010C4 59                  <2> 	pop cx								
  4626                              <2> 		
  4627 000010C5 3C08                <2> 	cmp al,8					
  4628 000010C7 7204                <2> 	jb .shr
  4629 000010C9 7728                <2> 	ja .shl
  4630 000010CB EB4A                <2> 	jmp .endshrl
  4631                              <2> 	.shr:			
  4632 000010CD B408                <2> 		mov ah,0x08
  4633 000010CF 28C4                <2> 		sub ah,al
  4634 000010D1 00E7                <2> 		add bh,ah
  4635 000010D3 53                  <2> 		push bx
  4636                              <2> 		__shr32 cx, dx, ah
  4637                              <3>  stkopen 5
  4638 000010D4 83EC05              <4>  sub word sp, %1
  4639 000010D7 54                  <4>  push sp
  4640 000010D8 5D                  <4>  pop bp
  4641 000010D9 894E00              <3>  mov word [bp+0], %1
  4642 000010DC 895602              <3>  mov word [bp+2], %2
  4643 000010DF 886604              <3>  mov byte [bp+4], %3
  4644 000010E2 E8E9F7              <3>  call proc_shr32
  4645 000010E5 54                  <3>  push sp
  4646 000010E6 5D                  <3>  pop bp
  4647 000010E7 8B4E00              <3>  mov word %1, [bp+0]
  4648 000010EA 8B5602              <3>  mov word %2, [bp+2]
  4649                              <3>  stkclose 5
  4650 000010ED 83C405              <4>  add word sp, %1
  4651 000010F0 5B                  <2> 		pop bx
  4652 000010F1 EB24                <2> 		jmp .endshrl
  4653                              <2> 	.shl:		
  4654 000010F3 B408                <2> 		mov ah,0x08
  4655 000010F5 28E0                <2> 		sub al,ah
  4656 000010F7 28C7                <2> 		sub bh,al			
  4657 000010F9 53                  <2> 		push bx
  4658                              <2> 		__shl32 cx, dx, al
  4659                              <3>  stkopen 5
  4660 000010FA 83EC05              <4>  sub word sp, %1
  4661 000010FD 54                  <4>  push sp
  4662 000010FE 5D                  <4>  pop bp
  4663 000010FF 894E00              <3>  mov word [bp+0], %1
  4664 00001102 895602              <3>  mov word [bp+2], %2
  4665 00001105 884604              <3>  mov byte [bp+4], %3
  4666 00001108 E87CF7              <3>  call proc_shl32
  4667 0000110B 54                  <3>  push sp
  4668 0000110C 5D                  <3>  pop bp
  4669 0000110D 8B4E00              <3>  mov word %1, [bp+0]
  4670 00001110 8B5602              <3>  mov word %2, [bp+2]
  4671                              <3>  stkclose 5
  4672 00001113 83C405              <4>  add word sp, %1
  4673 00001116 5B                  <2> 		pop bx			
  4674                              <2> 	.endshrl:											
  4675                              <2> 								
  4676 00001117 30DB                <2> 	xor bl,bl
  4677 00001119 D1EB                <2> 	shr bx,1	
  4678 0000111B 83E17F              <2> 	and cx,0x007F	
  4679                              <2> 		
  4680 0000111E 89E0                <2> 	mov ax,sp
  4681 00001120 89C5                <2> 	mov bp,ax
  4682 00001122 015E02              <2> 	add word [bp+2],bx
  4683 00001125 014E02              <2> 	add word [bp+2],cx	
  4684 00001128 895604              <2> 	mov word [bp+4],dx
  4685                              <2> 	
  4686 0000112B C3                  <2> 	ret
  4687                              <2> 
  4688                              <2> ; ifladdorsub	
  4689                              <2> 	
  4690                              <2> proc__mul32_64:
  4691 0000112C 89E0                <2> 	mov ax,sp
  4692 0000112E 89C5                <2> 	mov bp,ax
  4693                              <2> 		
  4694 00001130 31D2                <2> 	xor dx,dx
  4695 00001132 8B4604              <2> 	mov ax,[bp+4]
  4696 00001135 F76608              <2> 	mul word [bp+8]
  4697                              <2> 	
  4698 00001138 C7460A0000          <2> 	mov word [bp+0x0A], 0
  4699 0000113D C7460C0000          <2> 	mov word [bp+0x0C], 0
  4700 00001142 89560E              <2> 	mov word [bp+0x0E], dx
  4701 00001145 894610              <2> 	mov word [bp+0x10], ax
  4702                              <2> 		
  4703 00001148 31D2                <2> 	xor dx,dx
  4704 0000114A 8B4604              <2> 	mov ax,[bp+4]
  4705 0000114D F76606              <2> 	mul word [bp+6]
  4706                              <2> 	
  4707 00001150 01460E              <2> 	add [bp+0x0E],ax
  4708 00001153 11560C              <2> 	adc [bp+0x0C],dx
  4709 00001156 83560A00            <2> 	adc word [bp+0x0A],0
  4710                              <2> 	
  4711 0000115A 31D2                <2> 	xor dx,dx
  4712 0000115C 8B4602              <2> 	mov ax,[bp+2]
  4713 0000115F F76608              <2> 	mul word [bp+8]
  4714                              <2> 	
  4715 00001162 01460E              <2> 	add [bp+0x0E],ax
  4716 00001165 11560C              <2> 	adc [bp+0x0C],dx
  4717                              <2> 	
  4718 00001168 31D2                <2> 	xor dx,dx
  4719 0000116A 8B4602              <2> 	mov ax,[bp+2]
  4720 0000116D F76606              <2> 	mul word [bp+6]
  4721                              <2> 	
  4722 00001170 01460C              <2> 	add [bp+0x0C],ax
  4723 00001173 11560A              <2> 	adc [bp+0x0A],dx
  4724                              <2> 	
  4725 00001176 C3                  <2> 	ret
  4726                              <2> 	
  4727                              <2> proc__fldiv32:
  4728 00001177 89E0                <2> 	mov ax,sp
  4729 00001179 89C5                <2> 	mov bp,ax
  4730                              <2> 	
  4731 0000117B 8B4602              <2> 	mov ax,[bp+2]
  4732 0000117E 8B5E04              <2> 	mov bx,[bp+4]
  4733 00001181 C7460A0000          <2> 	mov word [bp+0x0A],0
  4734 00001186 C7460C0000          <2> 	mov word [bp+0x0C],0
  4735                              <2> 	
  4736 0000118B B118                <2> 	mov cl,24
  4737                              <2> 	.l1:
  4738 0000118D 80F900              <2> 		cmp cl,0
  4739 00001190 0F84AC00            <2> 		jz .l2
  4740 00001194 51                  <2> 		push cx
  4741                              <2> 		
  4742 00001195 8B4E0A              <2> 		mov cx,[bp+0x0A]
  4743 00001198 8B560C              <2> 		mov dx,[bp+0x0C]
  4744 0000119B 55                  <2> 		push bp
  4745 0000119C 50                  <2> 		push ax
  4746 0000119D 53                  <2> 		push bx
  4747                              <2> 		__shl32 cx, dx, 1
  4748                              <3>  stkopen 5
  4749 0000119E 83EC05              <4>  sub word sp, %1
  4750 000011A1 54                  <4>  push sp
  4751 000011A2 5D                  <4>  pop bp
  4752 000011A3 894E00              <3>  mov word [bp+0], %1
  4753 000011A6 895602              <3>  mov word [bp+2], %2
  4754 000011A9 C6460401            <3>  mov byte [bp+4], %3
  4755 000011AD E8D7F6              <3>  call proc_shl32
  4756 000011B0 54                  <3>  push sp
  4757 000011B1 5D                  <3>  pop bp
  4758 000011B2 8B4E00              <3>  mov word %1, [bp+0]
  4759 000011B5 8B5602              <3>  mov word %2, [bp+2]
  4760                              <3>  stkclose 5
  4761 000011B8 83C405              <4>  add word sp, %1
  4762 000011BB 5B                  <2> 		pop bx
  4763 000011BC 58                  <2> 		pop ax
  4764 000011BD 5D                  <2> 		pop bp
  4765 000011BE 894E0A              <2> 		mov [bp+0x0A],cx
  4766 000011C1 89560C              <2> 		mov [bp+0x0C],dx
  4767                              <2> 				
  4768 000011C4 8B4E06              <2> 		mov cx,[bp+6]
  4769 000011C7 8B5608              <2> 		mov dx,[bp+8]
  4770 000011CA 50                  <2> 		push ax
  4771 000011CB 53                  <2> 		push bx
  4772 000011CC 55                  <2> 		push bp
  4773                              <2> 		__cmp32 ax, bx, cx, dx, dl
  4774                              <3>  stkopen 9
  4775 000011CD 83EC09              <4>  sub word sp, %1
  4776 000011D0 54                  <4>  push sp
  4777 000011D1 5D                  <4>  pop bp
  4778 000011D2 894600              <3>  mov word [bp+0], %1
  4779 000011D5 895E02              <3>  mov word [bp+2], %2
  4780 000011D8 894E04              <3>  mov word [bp+4], %3
  4781 000011DB 895606              <3>  mov word [bp+6], %4
  4782 000011DE E87BF6              <3>  call proc_cmp32
  4783 000011E1 54                  <3>  push sp
  4784 000011E2 5D                  <3>  pop bp
  4785 000011E3 8A5608              <3>  mov byte %5, [bp+8]
  4786                              <3>  stkclose 9
  4787 000011E6 83C409              <4>  add word sp, %1
  4788 000011E9 5D                  <2> 		pop bp
  4789 000011EA 5B                  <2> 		pop bx
  4790 000011EB 58                  <2> 		pop ax				
  4791                              <2> 		
  4792 000011EC 80FA00              <2> 		cmp dl,0
  4793 000011EF 7C2A                <2> 		jl .endsub
  4794 000011F1 8B4E06              <2> 			mov cx,[bp+6]
  4795 000011F4 8B5608              <2> 			mov dx,[bp+8]
  4796 000011F7 55                  <2> 			push bp									
  4797                              <2> 			__sub32 ax, bx, cx, dx, ax, bx						
  4798                              <3>  stkopen 0x0C
  4799 000011F8 83EC0C              <4>  sub word sp, %1
  4800 000011FB 54                  <4>  push sp
  4801 000011FC 5D                  <4>  pop bp
  4802 000011FD 894600              <3>  mov word [bp+0], %1
  4803 00001200 895E02              <3>  mov word [bp+2], %2
  4804 00001203 894E04              <3>  mov word [bp+4], %3
  4805 00001206 895606              <3>  mov word [bp+6], %4
  4806 00001209 E835F6              <3>  call proc_sub32
  4807 0000120C 54                  <3>  push sp
  4808 0000120D 5D                  <3>  pop bp
  4809 0000120E 8B4608              <3>  mov word %5, [bp+8]
  4810 00001211 8B5E0A              <3>  mov word %6, [bp+0x0A]
  4811                              <3>  stkclose 0x0C
  4812 00001214 83C40C              <4>  add word sp, %1
  4813 00001217 5D                  <2> 			pop bp			
  4814 00001218 FF460C              <2> 			inc word [bp+0x0C]			
  4815                              <2> 		.endsub:
  4816                              <2> 				
  4817 0000121B 55                  <2> 		push bp
  4818                              <2> 		__shl32 ax, bx, 1
  4819                              <3>  stkopen 5
  4820 0000121C 83EC05              <4>  sub word sp, %1
  4821 0000121F 54                  <4>  push sp
  4822 00001220 5D                  <4>  pop bp
  4823 00001221 894600              <3>  mov word [bp+0], %1
  4824 00001224 895E02              <3>  mov word [bp+2], %2
  4825 00001227 C6460401            <3>  mov byte [bp+4], %3
  4826 0000122B E859F6              <3>  call proc_shl32
  4827 0000122E 54                  <3>  push sp
  4828 0000122F 5D                  <3>  pop bp
  4829 00001230 8B4600              <3>  mov word %1, [bp+0]
  4830 00001233 8B5E02              <3>  mov word %2, [bp+2]
  4831                              <3>  stkclose 5
  4832 00001236 83C405              <4>  add word sp, %1
  4833 00001239 5D                  <2> 		pop bp
  4834                              <2> 		
  4835 0000123A 59                  <2> 		pop cx
  4836 0000123B FEC9                <2> 		dec cl
  4837 0000123D E94DFF              <2> 		jmp .l1
  4838                              <2> 	.l2:
  4839                              <2> 	
  4840 00001240 C3                  <2> 	ret
  4841                              <2> 
  4842                              <2> proc__setsig:
  4843 00001241 89E0                <2> 	mov ax,sp
  4844 00001243 89C5                <2> 	mov bp,ax
  4845                              <2> 
  4846 00001245 8B4602              <2> 	mov ax,[bp+2]
  4847 00001248 8B5E04              <2> 	mov bx,[bp+4]
  4848 0000124B D1E0                <2> 	shl ax,1
  4849 0000124D D1E3                <2> 	shl bx,1
  4850 0000124F 250080              <2> 	and ax,0x8000
  4851 00001252 81E30080            <2> 	and bx,0x8000
  4852 00001256 31D8                <2> 	xor ax,bx
  4853 00001258 894606              <2> 	mov [bp+6],ax
  4854                              <2> 	
  4855 0000125B C3                  <2> 	ret
  4856                              <2> 
  4857                              <2> proc__validate:
  4858 0000125C 89E0                <2> 	mov ax,sp
  4859 0000125E 89C5                <2> 	mov bp,ax
  4860                              <2> 	
  4861 00001260 8B4602              <2> 	mov ax,[bp+2]
  4862 00001263 25FF7F              <2> 	and ax,0x7FFF
  4863 00001266 3DFF7F              <2> 	cmp ax,0x7FFF
  4864 00001269 750A                <2> 	jne .isnumber1
  4865                              <2> 
  4866 0000126B 8B4604              <2> 	mov ax,[bp+4]
  4867 0000126E 83F8FF              <2> 	cmp ax,0xFFFF
  4868 00001271 7502                <2> 	jnz .isnumber1
  4869                              <2> 	
  4870 00001273 EB37                <2> 	jmp .NaN
  4871                              <2> 	
  4872                              <2> 	.isnumber1:
  4873                              <2> 	
  4874 00001275 8B4606              <2> 	mov ax,[bp+6]
  4875 00001278 25FF7F              <2> 	and ax,0x7FFF
  4876 0000127B 3DFF7F              <2> 	cmp ax,0x7FFF
  4877 0000127E 750A                <2> 	jne .isnumber2
  4878                              <2> 
  4879 00001280 8B4608              <2> 	mov ax,[bp+8]
  4880 00001283 83F8FF              <2> 	cmp ax,0xFFFF
  4881 00001286 7502                <2> 	jnz .isnumber2
  4882                              <2> 	
  4883 00001288 EB22                <2> 	jmp .NaN
  4884                              <2> 	
  4885                              <2> 	.isnumber2:
  4886                              <2> 	
  4887 0000128A 8B4602              <2> 	mov ax,[bp+2]
  4888 0000128D D1E0                <2> 	shl ax,1
  4889 0000128F 80FCFF              <2> 	cmp ah,0xFF
  4890 00001292 740C                <2> 	je .infinity
  4891                              <2> 
  4892 00001294 8B5E06              <2> 	mov bx,[bp+6]
  4893 00001297 D1E3                <2> 	shl bx,1
  4894 00001299 80FFFF              <2> 	cmp bh,0xFF
  4895 0000129C 7402                <2> 	je .infinity			
  4896                              <2> 	
  4897 0000129E EB18                <2> 	jmp .ok	
  4898                              <2> 	
  4899                              <2> 	.infinity:		
  4900 000012A0 C7460A807F          <2> 		mov word [bp+0x0A],0x7F80
  4901 000012A5 C7460C0000          <2> 		mov word [bp+0x0C],0
  4902 000012AA EB12                <2> 		jmp .done
  4903                              <2> 	.NaN:
  4904 000012AC C7460AFF7F          <2> 		mov word [bp+0x0A],0x7FFF
  4905 000012B1 C7460CFFFF          <2> 		mov word [bp+0x0C],0xFFFF
  4906 000012B6 EB06                <2> 		jmp .done
  4907                              <2> 			
  4908                              <2> 	.ok:
  4909 000012B8 C6460E01            <2> 		mov byte [bp+0x0E],1
  4910 000012BC EB04                <2> 		jmp .end
  4911                              <2> 	.done:
  4912 000012BE C6460E00            <2> 		mov byte [bp+0x0E],0		
  4913                              <2> 	.end:
  4914                              <2> 	
  4915 000012C2 C3                  <2> 	ret
  4916                              <2> 
  4917                              <2> proc__div_validate:
  4918 000012C3 89E0                <2> 	mov ax,sp
  4919 000012C5 89C5                <2> 	mov bp,ax
  4920                              <2> 	
  4921 000012C7 8B4602              <2> 	mov ax,[bp+2]
  4922 000012CA 8B5E04              <2> 	mov bx,[bp+4]
  4923 000012CD D1E0                <2> 	shl ax,1
  4924 000012CF D1E3                <2> 	shl bx,1
  4925 000012D1 08FC                <2> 	or ah,bh
  4926 000012D3 80FC00              <2> 	cmp ah,0
  4927 000012D6 7422                <2> 	jz .NaN
  4928                              <2> 	
  4929 000012D8 8B4602              <2> 	mov ax,[bp+2]
  4930 000012DB D1E0                <2> 	shl ax,1
  4931 000012DD 80FC00              <2> 	cmp ah,0
  4932 000012E0 7424                <2> 	jz .zero
  4933 000012E2 8B5E04              <2> 	mov bx,[bp+4]
  4934 000012E5 D1E3                <2> 	shl bx,1
  4935 000012E7 80FF00              <2> 	cmp bh,0	
  4936 000012EA 7402                <2> 	jz .infinity
  4937                              <2> 		
  4938 000012EC EB24                <2> 	jmp .ok
  4939                              <2> 	
  4940                              <2> 	.infinity:		
  4941 000012EE C74606807F          <2> 		mov word [bp+6],0x7F80
  4942 000012F3 C746080000          <2> 		mov word [bp+8],0
  4943 000012F8 EB1E                <2> 		jmp .done
  4944                              <2> 	.NaN:
  4945 000012FA C74606FF7F          <2> 		mov word [bp+6],0x7FFF
  4946 000012FF C74608FFFF          <2> 		mov word [bp+8],0xFFFF
  4947 00001304 EB12                <2> 		jmp .done
  4948                              <2> 	.zero:
  4949 00001306 C746060000          <2> 		mov word [bp+6],0
  4950 0000130B C746080000          <2> 		mov word [bp+8],0
  4951 00001310 EB06                <2> 		jmp .done
  4952                              <2> 			
  4953                              <2> 	.ok:
  4954 00001312 C6460A01            <2> 		mov byte [bp+0x0A],1
  4955 00001316 EB04                <2> 		jmp .end
  4956                              <2> 	.done:	
  4957 00001318 C6460A00            <2> 		mov byte [bp+0x0A],0
  4958                              <2> 	.end:	
  4959                              <2> 		
  4960 0000131C C3                  <2> 	ret
  4961                              <2> 	
  4962                              <2> proc__mul_validate:
  4963 0000131D 89E0                <2> 	mov ax,sp
  4964 0000131F 89C5                <2> 	mov bp,ax
  4965                              <2> 	
  4966 00001321 8B4602              <2> 	mov ax,[bp+2]
  4967 00001324 D1E0                <2> 	shl ax,1	
  4968 00001326 80FC00              <2> 	cmp ah,0	
  4969 00001329 740C                <2> 	jz .zero		
  4970                              <2> 
  4971 0000132B 8B5E04              <2> 	mov bx,[bp+4]
  4972 0000132E D1E3                <2> 	shl bx,1
  4973 00001330 80FF00              <2> 	cmp bh,0
  4974 00001333 7402                <2> 	jz .zero
  4975                              <2> 			
  4976 00001335 EB0C                <2> 	jmp .ok
  4977                              <2> 	
  4978                              <2> 	.zero:		
  4979 00001337 C746060000          <2> 		mov word [bp+6],0
  4980 0000133C C746080000          <2> 		mov word [bp+8],0
  4981 00001341 EB06                <2> 		jmp .done
  4982                              <2> 			
  4983                              <2> 	.ok:
  4984 00001343 C6460A01            <2> 		mov byte [bp+0x0A],1
  4985 00001347 EB04                <2> 		jmp .end
  4986                              <2> 	.done:	
  4987 00001349 C6460A00            <2> 		mov byte [bp+0x0A],0
  4988                              <2> 	.end:	
  4989                              <2> 		
  4990 0000134D C3                  <2> 	ret
  4991                              <2> 	
  4992                              <2> proc__addorsub_validate:
  4993 0000134E 89E0                <2> 	mov ax,sp
  4994 00001350 89C5                <2> 	mov bp,ax
  4995                              <2> 	
  4996 00001352 8B4602              <2> 	mov ax,[bp+2]
  4997 00001355 8B5E06              <2> 	mov bx,[bp+6]	
  4998 00001358 D1E0                <2> 	shl ax,1
  4999 0000135A D1E3                <2> 	shl bx,1
  5000 0000135C 08FC                <2> 	or ah,bh
  5001 0000135E 80FC00              <2> 	cmp ah,0
  5002 00001361 7416                <2> 	jz .zero
  5003                              <2> 	
  5004 00001363 8B4602              <2> 	mov ax,[bp+2]
  5005 00001366 D1E0                <2> 	shl ax,1
  5006 00001368 80FC00              <2> 	cmp ah,0		
  5007 0000136B 7426                <2> 	jz .value2
  5008                              <2> 	
  5009 0000136D 8B4606              <2> 	mov ax,[bp+6]
  5010 00001370 D1E0                <2> 	shl ax,1
  5011 00001372 80FC00              <2> 	cmp ah,0
  5012 00001375 740E                <2> 	jz .value1	
  5013                              <2> 		
  5014 00001377 EB28                <2> 	jmp .ok
  5015                              <2> 	
  5016                              <2> 	.zero:		
  5017 00001379 C7460A0000          <2> 		mov word [bp+0x0A],0
  5018 0000137E C7460C0000          <2> 		mov word [bp+0x0C],0
  5019 00001383 EB22                <2> 		jmp .done
  5020                              <2> 	.value1:
  5021 00001385 8B4602              <2> 		mov ax,[bp+2]
  5022 00001388 8B5E04              <2> 		mov bx,[bp+4]
  5023 0000138B 89460A              <2> 		mov word [bp+0x0A],ax
  5024 0000138E 895E0C              <2> 		mov word [bp+0x0C],bx		
  5025 00001391 EB14                <2> 		jmp .done
  5026                              <2> 	.value2:		
  5027 00001393 8B4606              <2> 		mov ax,[bp+6]
  5028 00001396 8B5E08              <2> 		mov bx,[bp+8]
  5029 00001399 89460A              <2> 		mov word [bp+0x0A],ax
  5030 0000139C 895E0C              <2> 		mov word [bp+0x0C],bx
  5031 0000139F EB06                <2> 		jmp .done
  5032                              <2> 			
  5033                              <2> 	.ok:
  5034 000013A1 C6460E01            <2> 		mov byte [bp+0x0E],1
  5035 000013A5 EB04                <2> 		jmp .end
  5036                              <2> 	.done:	
  5037 000013A7 C6460E00            <2> 		mov byte [bp+0x0E],0
  5038                              <2> 	.end:	
  5039                              <2> 		
  5040 000013AB C3                  <2> 	ret
  5041                              <2> 	
  5042                              <2> %endif
  5043                              <1> 
  5044                              <1> %macro fltoint32 1
  5045                              <1> 	fltoint32 %1, %1
  5046                              <1> %endmacro
  5047                              <1> 
  5048                              <1> %macro fltoint32 2
  5049                              <1> 	fltoint32 cs, %1, cs, %2
  5050                              <1> %endmacro
  5051                              <1> 
  5052                              <1> %macro int32tofl 1
  5053                              <1> 	int32tofl %1, %1
  5054                              <1> %endmacro
  5055                              <1> 
  5056                              <1> %macro int32tofl 2
  5057                              <1> 	int32tofl cs, %1, cs, %2
  5058                              <1> %endmacro
  5059                              <1> 
  5060                              <1> %macro fladd 3
  5061                              <1> 	fladd cs, %1, cs, %2, cs, %3
  5062                              <1> %endmacro
  5063                              <1> 
  5064                              <1> %macro flsub 3
  5065                              <1> 	flsub cs, %1, cs, %2, cs, %3
  5066                              <1> %endmacro	
  5067                              <1> 
  5068                              <1> %macro flmul 3
  5069                              <1> 	flmul cs, %1, cs, %2, cs, %3
  5070                              <1> %endmacro
  5071                              <1> 
  5072                              <1> %macro fldiv 3
  5073                              <1> 	fldiv cs, %1, cs, %2, cs, %3
  5074                              <1> %endmacro	
  5075                              <1> 
  5076                              <1> %macro fladd 6
  5077                              <1> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  5078                              <1> %endmacro
  5079                              <1> 
  5080                              <1> %macro flsub 6
  5081                              <1> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  5082                              <1> %endmacro
  5083                              <1> 
  5084                              <1> %macro fltoint32 4
  5085                              <1> 	stkopen 0x08
  5086                              <1> 	mov ax,%1
  5087                              <1> 	mov ds,ax
  5088                              <1> 	mov ax,[%2+2]
  5089                              <1> 	mov [bp+0],ax
  5090                              <1> 	mov ax,[%2]
  5091                              <1> 	mov [bp+2],ax	
  5092                              <1> 	call proc_fltoint32
  5093                              <1> 	mov ax,sp
  5094                              <1> 	mov bp,ax
  5095                              <1> 	mov ax,%3
  5096                              <1> 	mov ds,ax
  5097                              <1> 	mov ax,[bp+4]
  5098                              <1> 	mov [%4+2],ax
  5099                              <1> 	mov ax,[bp+6]
  5100                              <1> 	mov [%4],ax
  5101                              <1> 	stkclose 0x08
  5102                              <1> %endmacro
  5103                              <1> 
  5104                              <1> %macro int32tofl 4
  5105                              <1> 	stkopen 0x08
  5106                              <1> 	mov ax,%1
  5107                              <1> 	mov ds,ax
  5108                              <1> 	mov ax,[%2+2]
  5109                              <1> 	mov [bp+0],ax
  5110                              <1> 	mov ax,[%2]
  5111                              <1> 	mov [bp+2],ax	
  5112                              <1> 	call proc_int32tofl
  5113                              <1> 	mov ax,sp
  5114                              <1> 	mov bp,ax
  5115                              <1> 	mov ax,%3
  5116                              <1> 	mov ds,ax
  5117                              <1> 	mov ax,[bp+4]
  5118                              <1> 	mov [%4+2],ax
  5119                              <1> 	mov ax,[bp+6]
  5120                              <1> 	mov [%4],ax
  5121                              <1> 	stkclose 0x08
  5122                              <1> %endmacro
  5123                              <1> 
  5124                              <1> %macro fldiv 6	
  5125                              <1> 	stkopen 0x0C
  5126                              <1> 	mov ax,%1
  5127                              <1> 	mov ds,ax
  5128                              <1> 	mov ax,[%2+2]
  5129                              <1> 	mov [bp+0],ax
  5130                              <1> 	mov ax,[%2]
  5131                              <1> 	mov [bp+2],ax
  5132                              <1> 	mov ax,%3
  5133                              <1> 	mov ds,ax
  5134                              <1> 	mov ax,[%4+2]
  5135                              <1> 	mov [bp+4],ax
  5136                              <1> 	mov ax,[%4]
  5137                              <1> 	mov [bp+6],ax
  5138                              <1> 	call proc_fldiv
  5139                              <1> 	mov ax,sp
  5140                              <1> 	mov bp,ax
  5141                              <1> 	mov ax,%5
  5142                              <1> 	mov ds,ax
  5143                              <1> 	mov ax,[bp+8]
  5144                              <1> 	mov [%6+2],ax
  5145                              <1> 	mov ax,[bp+0x0A]
  5146                              <1> 	mov [%6],ax
  5147                              <1> 	stkclose 0x0C
  5148                              <1> %endmacro
  5149                              <1> 
  5150                              <1> %macro flmul 6	
  5151                              <1> 	stkopen 0x0C
  5152                              <1> 	mov ax,%1
  5153                              <1> 	mov ds,ax
  5154                              <1> 	mov ax,[%2+2]
  5155                              <1> 	mov [bp+0],ax
  5156                              <1> 	mov ax,[%2]
  5157                              <1> 	mov [bp+2],ax
  5158                              <1> 	mov ax,%3
  5159                              <1> 	mov ds,ax
  5160                              <1> 	mov ax,[%4+2]
  5161                              <1> 	mov [bp+4],ax
  5162                              <1> 	mov ax,[%4]
  5163                              <1> 	mov [bp+6],ax
  5164                              <1> 	call proc_flmul
  5165                              <1> 	mov ax,sp
  5166                              <1> 	mov bp,ax
  5167                              <1> 	mov ax,%5
  5168                              <1> 	mov ds,ax
  5169                              <1> 	mov ax,[bp+8]
  5170                              <1> 	mov [%6+2],ax
  5171                              <1> 	mov ax,[bp+0x0A]
  5172                              <1> 	mov [%6],ax
  5173                              <1> 	stkclose 0x0C
  5174                              <1> %endmacro
  5175                              <1> 	
  5176                              <1> %macro fladdorsub 7
  5177                              <1> 	stkopen 0x0E
  5178                              <1> 	mov ax,%1
  5179                              <1> 	mov ds,ax
  5180                              <1> 	mov ax,[%2+2]
  5181                              <1> 	mov [bp+0],ax
  5182                              <1> 	mov ax,[%2]
  5183                              <1> 	mov [bp+2],ax
  5184                              <1> 	mov ax,%3
  5185                              <1> 	mov ds,ax
  5186                              <1> 	mov ax,[%4+2]
  5187                              <1> 	mov [bp+4],ax
  5188                              <1> 	mov ax,[%4]
  5189                              <1> 	mov [bp+6],ax
  5190                              <1> 	mov word [bp+0x0C], %7
  5191                              <1> 	call proc_fladdorsub
  5192                              <1> 	mov ax,sp
  5193                              <1> 	mov bp,ax
  5194                              <1> 	mov ax,%5
  5195                              <1> 	mov ds,ax
  5196                              <1> 	mov ax,[bp+8]
  5197                              <1> 	mov [%6+2],ax
  5198                              <1> 	mov ax,[bp+0x0A]
  5199                              <1> 	mov [%6],ax
  5200                              <1> 	stkclose 0x0E
  5201                              <1> %endmacro
  5202                              <1> 
  5203                              <1> 	
  5204                              <1> %endif
  5205                                  
  5206                                  section .data
  5207 000013AC 00000000                	n1: dd 0
  5208 000013B0 00000000                	n2: dd 0
  5209 000013B4 00000000                	n3: dd 0
  5210                                  		
  5211                                  section .text
  5212                                  	global _start
  5213                                  	
  5214                                  _start:		
  5215                                  	prtstk
  5216                              <1>  printf "stack ---> "
  5217                              <2>  %rep %0
  5218                              <2>  __printf %1
  5219                              <2>  %rotate 1
  5220                              <2>  %endrep
  5221                              <3>  __printf %1
  5222                              <4>  section .data
  5223 000013B8 737461636B202D2D2D- <4>  %%str: db %1,0
  5224 000013C1 3E2000              <4>
  5225                              <4>  section .text
  5226                              <4>  prtstr cs, %%str
  5227                              <5>  stkopen 4
  5228 00000000 83EC04              <6>  sub word sp, %1
  5229 00000003 54                  <6>  push sp
  5230 00000004 5D                  <6>  pop bp
  5231 00000005 8C4E00              <5>  mov word [bp], %1
  5232 00000008 C74602[B813]        <5>  mov word [bp+2], %2
  5233 0000000D E8(2804)            <5>  call proc_prtstr
  5234                              <5>  stkclose 4
  5235 00000010 83C404              <6>  add word sp, %1
  5236                              <3>  %rotate 1
  5237 00000013 89E0                <1>  mov ax,sp
  5238                              <1>  prthex16 ax
  5239                              <2>  stkopen 3
  5240 00000015 83EC03              <3>  sub word sp, %1
  5241 00000018 54                  <3>  push sp
  5242 00000019 5D                  <3>  pop bp
  5243 0000001A 894600              <2>  mov word [bp], %1
  5244 0000001D C6460201            <2>  mov byte [bp+2], TRUE
  5245 00000021 E8(2C03)            <2>  call proc_prthex16
  5246                              <2>  stkclose 3
  5247 00000024 83C403              <3>  add word sp, %1
  5248                                  	prtln
  5249                              <1>  __prtln
  5250 00000027 E8(5C04)            <2>  call proc_prtln
  5251                                  	prtln
  5252                              <1>  __prtln
  5253 0000002A E8(5C04)            <2>  call proc_prtln
  5254                                  	
  5255 0000002D B8FAFF                  	mov ax,0xFFFA
  5256 00000030 BB0A00                  	mov bx,0x000A
  5257 00000033 53                      	push bx
  5258 00000034 50                      	push ax
  5259                                  		
  5260 00000035 01D8                    	add ax,bx
  5261                                  				
  5262                                  	prthex16 ax			
  5263                              <1>  stkopen 3
  5264 00000037 83EC03              <2>  sub word sp, %1
  5265 0000003A 54                  <2>  push sp
  5266 0000003B 5D                  <2>  pop bp
  5267 0000003C 894600              <1>  mov word [bp], %1
  5268 0000003F C6460201            <1>  mov byte [bp+2], TRUE
  5269 00000043 E8(2C03)            <1>  call proc_prthex16
  5270                              <1>  stkclose 3
  5271 00000046 83C403              <2>  add word sp, %1
  5272                                  	prtln
  5273                              <1>  __prtln
  5274 00000049 E8(5C04)            <2>  call proc_prtln
  5275                                  			
  5276 0000004C 58                      	pop ax	
  5277                                  	__int16to32 ax, bx, cx
  5278                              <1>  stkopen 0x06
  5279 0000004D 83EC06              <2>  sub word sp, %1
  5280 00000050 54                  <2>  push sp
  5281 00000051 5D                  <2>  pop bp
  5282 00000052 894600              <1>  mov word [bp+0],%1
  5283 00000055 E8(6B04)            <1>  call proc_int16to32
  5284 00000058 54                  <1>  push sp
  5285 00000059 5D                  <1>  pop bp
  5286 0000005A 8B5E02              <1>  mov word %2, [bp+2]
  5287 0000005D 8B4E04              <1>  mov word %3, [bp+4]
  5288                              <1>  stkclose 0x06
  5289 00000060 83C406              <2>  add word sp, %1
  5290 00000063 8CC8                    	mov ax,cs
  5291 00000065 8ED8                    	mov ds,ax
  5292 00000067 891E[AE13]              	mov [n1+2],bx
  5293 0000006B 890E[AC13]              	mov [n1],cx
  5294                                  			
  5295 0000006F 58                      	pop ax	
  5296                                  	int16to32 ax, n2
  5297                              <1>  int16to32 %1, cs, %2
  5298                              <2>  stkopen 0x06
  5299 00000070 83EC06              <3>  sub word sp, %1
  5300 00000073 54                  <3>  push sp
  5301 00000074 5D                  <3>  pop bp
  5302 00000075 894600              <2>  mov word [bp+0], %1
  5303 00000078 E8(6B04)            <2>  call proc_int16to32
  5304 0000007B 89E0                <2>  mov ax,sp
  5305 0000007D 89C5                <2>  mov bp,ax
  5306 0000007F 8CC8                <2>  mov ax,%2
  5307 00000081 8ED8                <2>  mov ds,ax
  5308 00000083 8B4602              <2>  mov ax,[bp+2]
  5309 00000086 A3[B213]            <2>  mov [%3+2],ax
  5310 00000089 8B4604              <2>  mov ax,[bp+4]
  5311 0000008C A3[B013]            <2>  mov [%3],ax
  5312                              <2>  stkclose 0x06
  5313 0000008F 83C406              <3>  add word sp, %1
  5314                                  	
  5315                                  	iadd32 n1, n2, n3
  5316                              <1>  iadd32 cs, %1, cs, %2, cs, %3
  5317                              <2>  iaddorsub32 %1, %2, %3, %4, %5, %6, 0
  5318                              <3>  stkopen 0x0E
  5319 00000092 83EC0E              <4>  sub word sp, %1
  5320 00000095 54                  <4>  push sp
  5321 00000096 5D                  <4>  pop bp
  5322 00000097 8CC8                <3>  mov ax,%1
  5323 00000099 8ED8                <3>  mov ds,ax
  5324 0000009B A1[AE13]            <3>  mov ax,[%2+2]
  5325 0000009E 894600              <3>  mov word [bp+0], ax
  5326 000000A1 A1[AC13]            <3>  mov ax,[%2]
  5327 000000A4 894602              <3>  mov word [bp+2], ax
  5328 000000A7 8CC8                <3>  mov ax,%3
  5329 000000A9 8ED8                <3>  mov ds,ax
  5330 000000AB A1[B213]            <3>  mov ax,[%4+2]
  5331 000000AE 894604              <3>  mov word [bp+4], ax
  5332 000000B1 A1[B013]            <3>  mov ax,[%4]
  5333 000000B4 894606              <3>  mov word [bp+6], ax
  5334 000000B7 C7460C0000          <3>  mov word [bp+0x0C], %7
  5335 000000BC E8(AA05)            <3>  call proc_iaddorsub32
  5336 000000BF 89E0                <3>  mov ax,sp
  5337 000000C1 89C5                <3>  mov bp,ax
  5338 000000C3 8CC8                <3>  mov ax,%5
  5339 000000C5 8ED8                <3>  mov ds,ax
  5340 000000C7 8B4608              <3>  mov word ax, [bp+8]
  5341 000000CA A3[B613]            <3>  mov word [%6+2], ax
  5342 000000CD 8B460A              <3>  mov word ax, [bp+0x0A]
  5343 000000D0 A3[B413]            <3>  mov word [%6], ax
  5344                              <3>  stkclose 0x0E
  5345 000000D3 83C40E              <4>  add word sp, %1
  5346                                  	
  5347                                  	int32to16 n3, ax
  5348                              <1>  int32to16 cs, %1, %2
  5349                              <2>  stkopen 0x06
  5350 000000D6 83EC06              <3>  sub word sp, %1
  5351 000000D9 54                  <3>  push sp
  5352 000000DA 5D                  <3>  pop bp
  5353 000000DB 8CC8                <2>  mov ax,%1
  5354 000000DD 8ED8                <2>  mov ds,ax
  5355 000000DF A1[B613]            <2>  mov ax,[%2+2]
  5356 000000E2 894600              <2>  mov word [bp+0], ax
  5357 000000E5 A1[B413]            <2>  mov ax,[%2]
  5358 000000E8 894602              <2>  mov word [bp+2], ax
  5359 000000EB E8(9304)            <2>  call proc_int32to16
  5360 000000EE 89E0                <2>  mov ax,sp
  5361 000000F0 89C5                <2>  mov bp,ax
  5362 000000F2 8B4604              <2>  mov ax,[bp+4]
  5363 000000F5 89C0                <2>  mov word %3, ax
  5364                              <2>  stkclose 0x06
  5365 000000F7 83C406              <3>  add word sp, %1
  5366                                  	prthex16 ax
  5367                              <1>  stkopen 3
  5368 000000FA 83EC03              <2>  sub word sp, %1
  5369 000000FD 54                  <2>  push sp
  5370 000000FE 5D                  <2>  pop bp
  5371 000000FF 894600              <1>  mov word [bp], %1
  5372 00000102 C6460201            <1>  mov byte [bp+2], TRUE
  5373 00000106 E8(2C03)            <1>  call proc_prthex16
  5374                              <1>  stkclose 3
  5375 00000109 83C403              <2>  add word sp, %1
  5376                                  	prtln
  5377                              <1>  __prtln
  5378 0000010C E8(5C04)            <2>  call proc_prtln
  5379                                  	prtln
  5380                              <1>  __prtln
  5381 0000010F E8(5C04)            <2>  call proc_prtln
  5382                                  	prthex32 n1
  5383                              <1>  prthex32 cs, %1
  5384 00000112 8CC8                <2>  mov ax,%1
  5385 00000114 8ED8                <2>  mov ds,ax
  5386 00000116 A1[AE13]            <2>  mov word ax,[%2+2]
  5387                              <2>  prthex16 ax
  5388                              <3>  stkopen 3
  5389 00000119 83EC03              <4>  sub word sp, %1
  5390 0000011C 54                  <4>  push sp
  5391 0000011D 5D                  <4>  pop bp
  5392 0000011E 894600              <3>  mov word [bp], %1
  5393 00000121 C6460201            <3>  mov byte [bp+2], TRUE
  5394 00000125 E8(2C03)            <3>  call proc_prthex16
  5395                              <3>  stkclose 3
  5396 00000128 83C403              <4>  add word sp, %1
  5397 0000012B 8CC8                <2>  mov ax,%1
  5398 0000012D 8ED8                <2>  mov ds,ax
  5399 0000012F A1[AC13]            <2>  mov word ax,[%2]
  5400                              <2>  prthex16 ax
  5401                              <3>  stkopen 3
  5402 00000132 83EC03              <4>  sub word sp, %1
  5403 00000135 54                  <4>  push sp
  5404 00000136 5D                  <4>  pop bp
  5405 00000137 894600              <3>  mov word [bp], %1
  5406 0000013A C6460201            <3>  mov byte [bp+2], TRUE
  5407 0000013E E8(2C03)            <3>  call proc_prthex16
  5408                              <3>  stkclose 3
  5409 00000141 83C403              <4>  add word sp, %1
  5410                                  	prtln
  5411                              <1>  __prtln
  5412 00000144 E8(5C04)            <2>  call proc_prtln
  5413                                  	prthex32 n2
  5414                              <1>  prthex32 cs, %1
  5415 00000147 8CC8                <2>  mov ax,%1
  5416 00000149 8ED8                <2>  mov ds,ax
  5417 0000014B A1[B213]            <2>  mov word ax,[%2+2]
  5418                              <2>  prthex16 ax
  5419                              <3>  stkopen 3
  5420 0000014E 83EC03              <4>  sub word sp, %1
  5421 00000151 54                  <4>  push sp
  5422 00000152 5D                  <4>  pop bp
  5423 00000153 894600              <3>  mov word [bp], %1
  5424 00000156 C6460201            <3>  mov byte [bp+2], TRUE
  5425 0000015A E8(2C03)            <3>  call proc_prthex16
  5426                              <3>  stkclose 3
  5427 0000015D 83C403              <4>  add word sp, %1
  5428 00000160 8CC8                <2>  mov ax,%1
  5429 00000162 8ED8                <2>  mov ds,ax
  5430 00000164 A1[B013]            <2>  mov word ax,[%2]
  5431                              <2>  prthex16 ax
  5432                              <3>  stkopen 3
  5433 00000167 83EC03              <4>  sub word sp, %1
  5434 0000016A 54                  <4>  push sp
  5435 0000016B 5D                  <4>  pop bp
  5436 0000016C 894600              <3>  mov word [bp], %1
  5437 0000016F C6460201            <3>  mov byte [bp+2], TRUE
  5438 00000173 E8(2C03)            <3>  call proc_prthex16
  5439                              <3>  stkclose 3
  5440 00000176 83C403              <4>  add word sp, %1
  5441                                  	prtln
  5442                              <1>  __prtln
  5443 00000179 E8(5C04)            <2>  call proc_prtln
  5444                                  	prthex32 n3	  	
  5445                              <1>  prthex32 cs, %1
  5446 0000017C 8CC8                <2>  mov ax,%1
  5447 0000017E 8ED8                <2>  mov ds,ax
  5448 00000180 A1[B613]            <2>  mov word ax,[%2+2]
  5449                              <2>  prthex16 ax
  5450                              <3>  stkopen 3
  5451 00000183 83EC03              <4>  sub word sp, %1
  5452 00000186 54                  <4>  push sp
  5453 00000187 5D                  <4>  pop bp
  5454 00000188 894600              <3>  mov word [bp], %1
  5455 0000018B C6460201            <3>  mov byte [bp+2], TRUE
  5456 0000018F E8(2C03)            <3>  call proc_prthex16
  5457                              <3>  stkclose 3
  5458 00000192 83C403              <4>  add word sp, %1
  5459 00000195 8CC8                <2>  mov ax,%1
  5460 00000197 8ED8                <2>  mov ds,ax
  5461 00000199 A1[B413]            <2>  mov word ax,[%2]
  5462                              <2>  prthex16 ax
  5463                              <3>  stkopen 3
  5464 0000019C 83EC03              <4>  sub word sp, %1
  5465 0000019F 54                  <4>  push sp
  5466 000001A0 5D                  <4>  pop bp
  5467 000001A1 894600              <3>  mov word [bp], %1
  5468 000001A4 C6460201            <3>  mov byte [bp+2], TRUE
  5469 000001A8 E8(2C03)            <3>  call proc_prthex16
  5470                              <3>  stkclose 3
  5471 000001AB 83C403              <4>  add word sp, %1
  5472                                  	
  5473                                  	prtln
  5474                              <1>  __prtln
  5475 000001AE E8(5C04)            <2>  call proc_prtln
  5476                                  	prtln
  5477                              <1>  __prtln
  5478 000001B1 E8(5C04)            <2>  call proc_prtln
  5479                                  	prtstk			
  5480                              <1>  printf "stack ---> "
  5481                              <2>  %rep %0
  5482                              <2>  __printf %1
  5483                              <2>  %rotate 1
  5484                              <2>  %endrep
  5485                              <3>  __printf %1
  5486                              <4>  section .data
  5487 000013C4 737461636B202D2D2D- <4>  %%str: db %1,0
  5488 000013CD 3E2000              <4>
  5489                              <4>  section .text
  5490                              <4>  prtstr cs, %%str
  5491                              <5>  stkopen 4
  5492 000001B4 83EC04              <6>  sub word sp, %1
  5493 000001B7 54                  <6>  push sp
  5494 000001B8 5D                  <6>  pop bp
  5495 000001B9 8C4E00              <5>  mov word [bp], %1
  5496 000001BC C74602[C413]        <5>  mov word [bp+2], %2
  5497 000001C1 E8(2804)            <5>  call proc_prtstr
  5498                              <5>  stkclose 4
  5499 000001C4 83C404              <6>  add word sp, %1
  5500                              <3>  %rotate 1
  5501 000001C7 89E0                <1>  mov ax,sp
  5502                              <1>  prthex16 ax
  5503                              <2>  stkopen 3
  5504 000001C9 83EC03              <3>  sub word sp, %1
  5505 000001CC 54                  <3>  push sp
  5506 000001CD 5D                  <3>  pop bp
  5507 000001CE 894600              <2>  mov word [bp], %1
  5508 000001D1 C6460201            <2>  mov byte [bp+2], TRUE
  5509 000001D5 E8(2C03)            <2>  call proc_prthex16
  5510                              <2>  stkclose 3
  5511 000001D8 83C403              <3>  add word sp, %1
  5512                                  	
  5513 000001DB EBFE                    	jmp $		

     1                                  
     2                                  %include "lib/float.mac"
     3                              <1> 
     4                              <1> %ifndef FLOAT_MAC
     5                              <1> 	%define FLOAT_MAC
     6                              <1> 	
     7                              <1> 	%include "lib/float.asm"
     8                              <2> 
     9                              <2> %ifndef FLOAT_ASM
    10                              <2> 	%define FLOAT_ASM
    11                              <2> 	
    12                              <2> 	%include "lib/system.mac"
    13                              <3>  
    14                              <3> %ifndef SYSTEM_MAC
    15                              <3>  	%define SYSTEM_MAC
    16                              <3>  	
    17                              <3> 	%ifndef TRUE
    18                              <3> 		%define TRUE 01h
    19                              <3> 	%endif
    20                              <3> 	%ifndef FALSE
    21                              <3> 		%define FALSE 00h
    22                              <3> 	%endif
    23                              <3> 	
    24                              <3> %macro vlodsb 3
    25                              <3> 	vlodsb cs, %1, %2, %3
    26                              <3> %endmacro
    27                              <3> 
    28                              <3> %macro vstosb 3
    29                              <3> 	vstosb cs, %1, %2, %3
    30                              <3> %endmacro
    31                              <3> 	 	
    32                              <3> %macro int16toreg 2
    33                              <3> 	int16toreg cs, %1, %2
    34                              <3> %endmacro
    35                              <3> 
    36                              <3> %macro regtoint16 2
    37                              <3> 	regtoint16 %1, cs, %2
    38                              <3> %endmacro
    39                              <3> 
    40                              <3> %macro vstosb 4
    41                              <3> 	push %1
    42                              <3> 	pop ds
    43                              <3> 	mov si,%2
    44                              <3> 	add si,%3
    45                              <3> 	mov byte [si],%4	
    46                              <3> %endmacro
    47                              <3> 
    48                              <3> %macro vlodsb 4
    49                              <3> 	push %1
    50                              <3> 	pop ds
    51                              <3> 	mov si,%2
    52                              <3> 	add si,%3
    53                              <3> 	mov byte %4,[si]	
    54                              <3> %endmacro 	 
    55                              <3> 
    56                              <3> %macro int16toreg 3
    57                              <3> 	push %2
    58                              <3> 	push %1
    59                              <3> 	pop ds
    60                              <3> 	pop si
    61                              <3> 	mov word %3,[si]	
    62                              <3> %endmacro
    63                              <3> 
    64                              <3> %macro regtoint16 3
    65                              <3> 	push %3
    66                              <3> 	push %2
    67                              <3> 	pop ds
    68                              <3> 	pop si
    69                              <3> 	mov word [si],%1	
    70                              <3> %endmacro
    71                              <3> 
    72                              <3> %macro mov32 2
    73                              <3> 	mov32 cs, %1, cs, %2
    74                              <3> %endmacro
    75                              <3> 
    76                              <3> %macro mov16 2
    77                              <3> 	mov16 cs, %1, cs, %2
    78                              <3> %endmacro
    79                              <3> 
    80                              <3> %macro mov32 4
    81                              <3> 	mov ax,%3
    82                              <3> 	mov ds,ax
    83                              <3> 	mov cx,[%4+2]
    84                              <3> 	mov dx,[%4]
    85                              <3> 	mov ax,%1
    86                              <3> 	mov ds,ax
    87                              <3> 	mov [%2+2],cx
    88                              <3> 	mov [%2],dx
    89                              <3> %endmacro
    90                              <3> 
    91                              <3> %macro mov16 4
    92                              <3> 	mov ax,%3
    93                              <3> 	mov ds,ax
    94                              <3> 	mov bx,[%4]
    95                              <3> 	mov ax,%1
    96                              <3> 	mov ds,ax
    97                              <3> 	mov [%2],bx
    98                              <3> %endmacro
    99                              <3>  	 	
   100                              <3> %macro mformat 4
   101                              <3> 	stkopen 8
   102                              <3> 	mov word [ bp + 0 ], %1
   103                              <3> 	mov word [ bp + 2 ], %2
   104                              <3> 	mov word [ bp + 4 ], %3
   105                              <3> 	mov word [ bp + 6 ], %4
   106                              <3> 	call kernel_segment:mformat
   107                              <3> 	stkclose 8
   108                              <3> %endmacro
   109                              <3> 
   110                              <3> %macro malloc 6
   111                              <3> 	stkopen 0Bh
   112                              <3> 	mov word [ bp + 4 ], %3
   113                              <3> 	mov word [ bp + 6 ], %4
   114                              <3> 	mov word [ bp + 8 ], %5	
   115                              <3> 	call kernel_segment:malloc
   116                              <3> 	push sp
   117                              <3> 	pop bp
   118                              <3> 	mov word %1, [ bp ]
   119                              <3> 	mov word %2, [ bp + 2 ]
   120                              <3> 	mov byte %6, [ bp + 0x0A ]
   121                              <3> 	stkclose 0Bh
   122                              <3> %endmacro 	
   123                              <3> 
   124                              <3> %macro laddr 2
   125                              <3> 	laddr %1, %2, %1, %2
   126                              <3> %endmacro
   127                              <3> 
   128                              <3> %macro faddr 2
   129                              <3> 	faddr %1, %2, %1, %2
   130                              <3> %endmacro
   131                              <3>  	
   132                              <3> %macro laddr 4
   133                              <3> 	stkopen 8
   134                              <3> 	mov word [ bp + 4 ], %3
   135                              <3> 	mov word [ bp + 6 ], %4	
   136                              <3> 	call kernel_segment:laddr
   137                              <3> 	push sp
   138                              <3> 	pop bp
   139                              <3> 	mov word %1, [ bp + 0 ]
   140                              <3> 	mov word %2, [ bp + 2 ]	
   141                              <3> 	stkclose 8
   142                              <3> %endmacro
   143                              <3> 
   144                              <3> %macro faddr 4
   145                              <3> 	stkopen 8
   146                              <3> 	mov word [ bp + 4 ], %3
   147                              <3> 	mov word [ bp + 6 ], %4	
   148                              <3> 	call kernel_segment:faddr
   149                              <3> 	push sp
   150                              <3> 	pop bp
   151                              <3> 	mov word %1, [ bp + 0 ]
   152                              <3> 	mov word %2, [ bp + 2 ]	
   153                              <3> 	stkclose 8
   154                              <3> %endmacro	
   155                              <3>  
   156                              <3> 
   157                              <3> %macro stkopen 1		
   158                              <3> 	sub word sp, %1
   159                              <3> 	push sp
   160                              <3> 	pop bp
   161                              <3> %endmacro
   162                              <3> 
   163                              <3> %macro stkclose 1
   164                              <3> 	add word sp, %1
   165                              <3> %endmacro
   166                              <3> 
   167                              <3> %macro stkload 1-* 	
   168                              <3>  	%rep %0
   169                              <3>  	 	%rotate -1
   170                              <3>  		pop %1
   171                              <3>  	%endrep
   172                              <3>  	%rep %0
   173                              <3>  		push %1
   174                              <3>  		%rotate 1
   175                              <3>  	%endrep
   176                              <3> %endmacro
   177                              <3> 
   178                              <3> %macro stkpush 1-* 	
   179                              <3>  	%rep %0
   180                              <3>  		push %1
   181                              <3>  		%rotate 1
   182                              <3>  	%endrep 	
   183                              <3> %endmacro
   184                              <3>  
   185                              <3> %macro stkpop 1-*
   186                              <3>  	%rep %0
   187                              <3>  	 	%rotate -1
   188                              <3>  		pop %1
   189                              <3>  	%endrep 	 	
   190                              <3> %endmacro
   191                              <3> 
   192                              <3> %endif 
   193                              <2> 	%include "lib/math.mac"
   194                              <3> 
   195                              <3> %ifndef MATH_MAC
   196                              <3> 	%define MATH_MAC
   197                              <3> 	
   198                              <3> 	%include "lib/math.asm"
   199                              <4> 
   200                              <4> %ifndef MATH_ASM
   201                              <4> 	%define MATH_ASM
   202                              <4> 
   203                              <4> %macro __int16to32 3
   204                              <4> 	stkopen 0x06
   205                              <4> 	mov word [bp+0],%1
   206                              <4> 	call proc_int16to32
   207                              <4> 	push sp
   208                              <4> 	pop bp
   209                              <4> 	mov word %2, [bp+2]
   210                              <4> 	mov word %3, [bp+4]
   211                              <4> 	stkclose 0x06
   212                              <4> %endmacro
   213                              <4> 
   214                              <4> %macro __int32to16 3
   215                              <4> 	stkopen 0x06
   216                              <4> 	mov word [bp+0], %1
   217                              <4> 	mov word [bp+2], %2
   218                              <4> 	call proc_int32to16
   219                              <4> 	push sp
   220                              <4> 	pop bp
   221                              <4> 	mov word %3, [bp+4]
   222                              <4> 	stkclose 0x06
   223                              <4> %endmacro
   224                              <4> 
   225                              <4> %macro __add32 6
   226                              <4> 	stkopen 0x0C
   227                              <4> 	mov word [bp+0], %1
   228                              <4> 	mov word [bp+2], %2
   229                              <4> 	mov word [bp+4], %3
   230                              <4> 	mov word [bp+6], %4	
   231                              <4> 	call proc_add32
   232                              <4> 	push sp
   233                              <4> 	pop bp
   234                              <4> 	mov word %5, [bp+8]
   235                              <4> 	mov word %6, [bp+0x0A]
   236                              <4> 	stkclose 0x0C
   237                              <4> %endmacro
   238                              <4> 
   239                              <4> %macro __sub32 6
   240                              <4> 	stkopen 0x0C
   241                              <4> 	mov word [bp+0], %1
   242                              <4> 	mov word [bp+2], %2
   243                              <4> 	mov word [bp+4], %3
   244                              <4> 	mov word [bp+6], %4	
   245                              <4> 	call proc_sub32
   246                              <4> 	push sp
   247                              <4> 	pop bp
   248                              <4> 	mov word %5, [bp+8]
   249                              <4> 	mov word %6, [bp+0x0A]
   250                              <4> 	stkclose 0x0C
   251                              <4> %endmacro
   252                              <4> 
   253                              <4> %macro __mul32 6
   254                              <4> 	stkopen 0x0C
   255                              <4> 	mov word [bp+0], %1
   256                              <4> 	mov word [bp+2], %2
   257                              <4> 	mov word [bp+4], %3
   258                              <4> 	mov word [bp+6], %4	
   259                              <4> 	call proc_mul32
   260                              <4> 	push sp
   261                              <4> 	pop bp
   262                              <4> 	mov word %5, [bp+8]
   263                              <4> 	mov word %6, [bp+0x0A]
   264                              <4> 	stkclose 0x0C
   265                              <4> %endmacro
   266                              <4> 
   267                              <4> %macro __div32 9
   268                              <4> 	stkopen 0x11
   269                              <4> 	mov word [bp+0], %1
   270                              <4> 	mov word [bp+2], %2
   271                              <4> 	mov word [bp+4], %3
   272                              <4> 	mov word [bp+6], %4
   273                              <4> 	mov word [bp+8], %5
   274                              <4> 	mov word [bp+0x0A], %6	
   275                              <4> 	call proc_div32
   276                              <4> 	push sp
   277                              <4> 	pop bp
   278                              <4> 	mov word %7, [bp+0x0C]
   279                              <4> 	mov word %8, [bp+0x0E]
   280                              <4> 	mov byte %9, [bp+0x10]
   281                              <4> 	stkclose 0x11
   282                              <4> %endmacro
   283                              <4> 
   284                              <4> %macro __cmp32 5
   285                              <4> 	stkopen 9
   286                              <4> 	mov word [bp+0], %1
   287                              <4> 	mov word [bp+2], %2
   288                              <4> 	mov word [bp+4], %3
   289                              <4> 	mov word [bp+6], %4
   290                              <4> 	call proc_cmp32
   291                              <4> 	push sp
   292                              <4> 	pop bp
   293                              <4> 	mov byte %5, [bp+8]
   294                              <4> 	stkclose 9	
   295                              <4> %endmacro
   296                              <4> 
   297                              <4> %macro __shl32 3
   298                              <4> 	stkopen 5
   299                              <4> 	mov word [bp+0], %1
   300                              <4> 	mov word [bp+2], %2
   301                              <4> 	mov byte [bp+4], %3
   302                              <4> 	call proc_shl32
   303                              <4> 	push sp
   304                              <4> 	pop bp
   305                              <4> 	mov word %1, [bp+0]
   306                              <4> 	mov word %2, [bp+2]
   307                              <4> 	stkclose 5
   308                              <4> %endmacro
   309                              <4> 
   310                              <4> %macro __shr32 3
   311                              <4> 	stkopen 5
   312                              <4> 	mov word [bp+0], %1
   313                              <4> 	mov word [bp+2], %2
   314                              <4> 	mov byte [bp+4], %3
   315                              <4> 	call proc_shr32
   316                              <4> 	push sp
   317                              <4> 	pop bp
   318                              <4> 	mov word %1, [bp+0]
   319                              <4> 	mov word %2, [bp+2]
   320                              <4> 	stkclose 5
   321                              <4> %endmacro
   322                              <4> 
   323                              <4> %macro __lzcount32 3	
   324                              <4> 	push %2		
   325                              <4> 	__lzcount16 %1, cl	
   326                              <4> 	pop ax
   327                              <4> 	cmp cl,4
   328                              <4> 	jb .end
   329                              <4> 		push cx		
   330                              <4> 		__lzcount16 ax, al		
   331                              <4> 		pop cx
   332                              <4> 		add cl,al
   333                              <4> 	.end:	
   334                              <4> 	mov byte %3, cl 
   335                              <4> %endmacro
   336                              <4> 
   337                              <4> %macro __lzcount16 2
   338                              <4> 	stkopen 3
   339                              <4> 	mov word [bp+0], %1
   340                              <4> 	call proc__lzcount16
   341                              <4> 	push sp
   342                              <4> 	pop bp
   343                              <4> 	mov byte %2, [bp+2]	
   344                              <4> 	stkclose 3
   345                              <4> %endmacro
   346                              <4> 
   347                              <4> %macro __lzbitcount32 3	
   348                              <4> 	push %2		
   349                              <4> 	__lzbitcount16 %1, cl
   350                              <4> 	pop ax
   351                              <4> 	cmp cl,16
   352                              <4> 	jb .end
   353                              <4> 		push cx		
   354                              <4> 		__lzbitcount16 ax, al		
   355                              <4> 		pop cx
   356                              <4> 		add cl,al
   357                              <4> 	.end:	
   358                              <4> 	mov byte %3, cl 
   359                              <4> %endmacro
   360                              <4> 		
   361                              <4> %macro __lzbitcount16 2
   362                              <4> 	stkopen 3
   363                              <4> 	mov word [bp+0], %1
   364                              <4> 	call proc__lzbitcount16
   365                              <4> 	push sp
   366                              <4> 	pop bp
   367                              <4> 	mov byte %2, [bp+2]	
   368                              <4> 	stkclose 3
   369                              <4> %endmacro	
   370                              <4> 
   371                              <4> %macro __calc_dividendo1 7
   372                              <4> 	stkopen 0x0D
   373                              <4> 	mov word [bp+0], %1
   374                              <4> 	mov word [bp+2], %2
   375                              <4> 	mov word [bp+4], %3
   376                              <4> 	mov word [bp+6], %4
   377                              <4> 	call proc_calc_dividendo1
   378                              <4> 	push sp
   379                              <4> 	pop bp
   380                              <4> 	mov word %5, [bp+0x08]
   381                              <4> 	mov word %6, [bp+0x0A]
   382                              <4> 	mov byte %7, [bp+0x0C]
   383                              <4> 	stkclose 0x0D
   384                              <4> %endmacro
   385                              <4> 
   386                              <4> %macro __calc__prox_dividendo 5
   387                              <4> 	stkopen 9
   388                              <4> 	mov word [bp+0], %1
   389                              <4> 	mov word [bp+2], %2
   390                              <4> 	mov word [bp+4], %3
   391                              <4> 	mov word [bp+6], %4
   392                              <4> 	mov word [bp+8], %5
   393                              <4> 	call proc_calc_prox_dividendo
   394                              <4> 	push sp
   395                              <4> 	pop bp
   396                              <4> 	mov word %3, [bp+4]
   397                              <4> 	mov word %4, [bp+6]
   398                              <4> 	mov byte %5, [bp+8]
   399                              <4> 	stkclose 9
   400                              <4> %endmacro
   401                              <4> 				
   402                              <4> section .data
   403                              <4> 
   404                              <4> proc_int16to32:
   405 00000000 89E0                <4> 	mov ax,sp
   406 00000002 89C5                <4> 	mov bp,ax
   407                              <4> 	
   408 00000004 8B4602              <4> 	mov ax,[bp+2]			
   409 00000007 89C3                <4> 	mov bx,ax
   410 00000009 250080              <4> 	and ax,0x8000
   411 0000000C 83F800              <4> 	cmp ax,0
   412 0000000F 7402                <4> 	jz .zero
   413 00000011 EB08                <4> 	jmp .one
   414                              <4> 	.zero:
   415 00000013 81E3FF7F            <4> 		and bx,0x7FFF
   416 00000017 89DA                <4> 		mov dx,bx			
   417 00000019 EB06                <4> 		jmp .endcmp
   418                              <4> 	.one:				
   419 0000001B BAFFFF              <4> 		mov dx,0xFFFF
   420 0000001E 29DA                <4> 		sub dx,bx
   421 00000020 42                  <4> 		inc dx
   422                              <4> 	.endcmp:
   423 00000021 894604              <4> 	mov [bp+4],ax
   424 00000024 895606              <4> 	mov [bp+6],dx
   425                              <4> 	
   426 00000027 C3                  <4> 	ret
   427                              <4> 	
   428                              <4> proc_int32to16:
   429 00000028 89E0                <4> 	mov ax,sp
   430 0000002A 89C5                <4> 	mov bp,ax
   431                              <4> 	
   432 0000002C 8B4602              <4> 	mov ax,[bp+2]
   433 0000002F 8B5E04              <4> 	mov bx,[bp+4]		
   434 00000032 250080              <4> 	and ax,0x8000
   435 00000035 81E3FF7F            <4> 	and bx,0x7FFF	
   436 00000039 83F800              <4> 	cmp ax,0
   437 0000003C 7402                <4> 	jz .zero
   438 0000003E EB04                <4> 	jmp .one
   439                              <4> 	.zero:		
   440 00000040 01D8                <4> 		add ax,bx
   441 00000042 EB05                <4> 		jmp .endcmp
   442                              <4> 	.one:		
   443 00000044 B8FFFF              <4> 		mov ax,0xFFFF
   444 00000047 29D8                <4> 		sub ax,bx
   445                              <4> 	.endcmp:	
   446 00000049 894606              <4> 	mov word [bp+6], ax	
   447                              <4> 	
   448 0000004C C3                  <4> 	ret
   449                              <4> 
   450                              <4> proc_setsig:
   451 0000004D 89E0                <4> 	mov ax,sp
   452 0000004F 89C5                <4> 	mov bp,ax
   453                              <4> 	
   454 00000051 816602FF7F          <4> 	and word [bp+2],0x7FFF
   455 00000056 8146020080          <4> 	add word [bp+2],0x8000	
   456                              <4> 	
   457 0000005B C3                  <4> 	ret
   458                              <4> 	
   459                              <4> proc_clrsig:
   460 0000005C 89E0                <4> 	mov ax,sp
   461 0000005E 89C5                <4> 	mov bp,ax
   462                              <4> 	
   463 00000060 816602FF7F          <4> 	and word [bp+2],0x7FFF
   464                              <4> 
   465 00000065 C3                  <4> 	ret
   466                              <4> 
   467                              <4> proc_idiv32:
   468                              <4> 	stkopen 0x11
   469 00000066 83EC11              <5>  sub word sp, %1
   470 00000069 54                  <5>  push sp
   471 0000006A 5D                  <5>  pop bp
   472 0000006B 8B4613              <4> 	mov ax,[bp+0x13]
   473 0000006E 25FF7F              <4> 	and ax,0x7FFF
   474 00000071 894600              <4> 	mov [bp+0],ax
   475 00000074 8B4615              <4> 	mov ax,[bp+0x15]
   476 00000077 894602              <4> 	mov [bp+2],ax
   477 0000007A 8B4617              <4> 	mov ax,[bp+0x17]
   478 0000007D 25FF7F              <4> 	and ax,0x7FFF
   479 00000080 894604              <4> 	mov [bp+4],ax
   480 00000083 8B4619              <4> 	mov ax,[bp+0x19]
   481 00000086 894606              <4> 	mov [bp+6],ax 
   482 00000089 E8B300              <4> 	call proc_div32
   483 0000008C 89E0                <4> 	mov ax,sp
   484 0000008E 89C5                <4> 	mov bp,ax
   485 00000090 8B4608              <4> 	mov ax,[bp+8]
   486 00000093 89461B              <4> 	mov [bp+0x1B], ax
   487 00000096 8B460A              <4> 	mov ax,[bp+0x0A]
   488 00000099 89461D              <4> 	mov [bp+0x1D], ax
   489 0000009C 8B460C              <4> 	mov ax,[bp+0x0C]
   490 0000009F 89461F              <4> 	mov [bp+0x1F], ax
   491 000000A2 8B460E              <4> 	mov ax,[bp+0x0E]
   492 000000A5 894621              <4> 	mov [bp+0x21], ax
   493 000000A8 8A4610              <4> 	mov al,[bp+0x10]
   494 000000AB 884623              <4> 	mov byte [bp+0x23], al
   495                              <4> 	stkclose 0x11
   496 000000AE 83C411              <5>  add word sp, %1
   497                              <4> 	
   498 000000B1 54                  <4> 	push sp
   499 000000B2 5D                  <4> 	pop bp
   500                              <4> 		
   501 000000B3 8B4E02              <4> 	mov cx,[bp+2]
   502 000000B6 8B5606              <4> 	mov dx,[bp+6]
   503 000000B9 81E10080            <4> 	and cx,0x8000
   504 000000BD 81E20080            <4> 	and dx,0x8000
   505 000000C1 31D1                <4> 	xor cx,dx
   506                              <4> 	
   507 000000C3 837E0A00            <4> 	cmp word [bp+0x0A],0
   508 000000C7 7506                <4> 	jnz .signal1
   509 000000C9 837E0C00            <4> 	cmp word [bp+0x0C],0
   510 000000CD 7403                <4> 	jz .endsignal1
   511                              <4> 	.signal1:
   512 000000CF 014E0A              <4> 		add word [bp+0x0A],cx
   513                              <4> 	.endsignal1:
   514                              <4> 	
   515 000000D2 837E0E00            <4> 	cmp word [bp+0x0E],0
   516 000000D6 7506                <4> 	jnz .signal2
   517 000000D8 837E1000            <4> 	cmp word [bp+0x10],0
   518 000000DC 7403                <4> 	jz .endsignal2
   519                              <4> 	.signal2:
   520 000000DE 014E0E              <4> 		add word [bp+0x0E],cx	
   521                              <4> 	.endsignal2:
   522                              <4> 		
   523 000000E1 C3                  <4> 	ret	
   524                              <4> 
   525                              <4> proc_imul32:		
   526                              <4> 	stkopen 0x0C
   527 000000E2 83EC0C              <5>  sub word sp, %1
   528 000000E5 54                  <5>  push sp
   529 000000E6 5D                  <5>  pop bp
   530 000000E7 8B460E              <4> 	mov ax,[bp+0x0E]
   531 000000EA 25FF7F              <4> 	and ax,0x7FFF
   532 000000ED 894600              <4> 	mov [bp+0],ax
   533 000000F0 8B4610              <4> 	mov ax,[bp+0x10]
   534 000000F3 894602              <4> 	mov [bp+2],ax
   535 000000F6 8B4612              <4> 	mov ax,[bp+0x12]
   536 000000F9 25FF7F              <4> 	and ax,0x7FFF
   537 000000FC 894604              <4> 	mov [bp+4],ax
   538 000000FF 8B4614              <4> 	mov ax,[bp+0x14]
   539 00000102 894606              <4> 	mov [bp+6],ax 
   540 00000105 E8B901              <4> 	call proc_mul32
   541 00000108 89E0                <4> 	mov ax,sp
   542 0000010A 89C5                <4> 	mov bp,ax
   543 0000010C 8B4608              <4> 	mov ax,[bp+8]
   544 0000010F 8B5E0A              <4> 	mov bx,[bp+0x0A]
   545                              <4> 	stkclose 0x0C
   546 00000112 83C40C              <5>  add word sp, %1
   547                              <4> 	
   548 00000115 89E1                <4> 	mov cx,sp
   549 00000117 89CD                <4> 	mov bp,cx		
   550                              <4> 		
   551 00000119 89460A              <4> 	mov [bp+0x0A],ax
   552 0000011C 895E0C              <4> 	mov [bp+0x0C],bx
   553                              <4> 	
   554 0000011F 837E0A00            <4> 	cmp word [bp+0x0A],0
   555 00000123 7506                <4> 	jnz .signal1
   556 00000125 837E0C00            <4> 	cmp word [bp+0x0C],0
   557 00000129 7413                <4> 	jz .endsignal1
   558                              <4> 	.signal1:
   559 0000012B 8B4E02              <4> 		mov cx,[bp+2]
   560 0000012E 8B5606              <4> 		mov dx,[bp+6]
   561 00000131 81E10080            <4> 		and cx,0x8000
   562 00000135 81E20080            <4> 		and dx,0x8000
   563 00000139 31D1                <4> 		xor cx,dx
   564 0000013B 014E0A              <4> 		add word [bp+0x0A],cx
   565                              <4> 	.endsignal1:
   566                              <4> 	
   567 0000013E C3                  <4> 	ret
   568                              <4> 
   569                              <4> proc_div32:
   570 0000013F 89E0                <4> 	mov ax,sp
   571 00000141 89C5                <4> 	mov bp,ax
   572                              <4> 	
   573 00000143 8B4606              <4> 	mov ax,[bp+6]
   574 00000146 034608              <4> 	add ax,[bp+8]
   575 00000149 83F800              <4> 	cmp ax,0
   576 0000014C 0F846C01            <4> 	jz .divbyzero
   577                              <4> 	
   578 00000150 837E0200            <4> 	cmp word [bp+2], 0
   579 00000154 7521                <4> 	jnz .div2
   580 00000156 837E0600            <4> 	cmp word [bp+6], 0
   581 0000015A 751B                <4> 	jnz .div2
   582 0000015C 31D2                <4> 		xor dx,dx
   583 0000015E 8B4604              <4> 		mov ax, [bp+4]
   584 00000161 F77608              <4> 		div word [bp+8]
   585 00000164 C7460A0000          <4> 		mov word [bp+0x0A], 0
   586 00000169 89460C              <4> 		mov word [bp+0x0C], ax
   587 0000016C C7460E0000          <4> 		mov word [bp+0x0E], 0
   588 00000171 895610              <4> 		mov word [bp+0x10], dx
   589 00000174 E93F01              <4> 		jmp .enddiv
   590                              <4> 	.div2:
   591 00000177 8B4602              <4> 		mov ax,[bp+2]
   592 0000017A 3B4606              <4> 		cmp ax,[bp+6]
   593 0000017D 0F821F01            <4> 		jb .qzero
   594 00000181 770A                <4> 		ja .div
   595 00000183 8B4604              <4> 		mov ax,[bp+4]
   596 00000186 3B4608              <4> 		cmp ax,[bp+8]
   597 00000189 0F821301            <4> 		jb .qzero
   598                              <4> 		
   599                              <4> 		.div:
   600                              <4> 		
   601 0000018D C7460A0000          <4> 		mov word [bp+0x0A], 0
   602 00000192 C7460C0000          <4> 		mov word [bp+0x0C], 0		
   603 00000197 C7460E0000          <4> 		mov word [bp+0x0E], 0
   604 0000019C C746100000          <4> 		mov word [bp+0x10], 0
   605                              <4> 		
   606 000001A1 8B4602              <4> 		mov ax,[bp+2]
   607 000001A4 8B5E04              <4> 		mov bx,[bp+4]
   608 000001A7 8B4E06              <4> 		mov cx,[bp+6]
   609 000001AA 8B5608              <4> 		mov dx,[bp+8]		
   610                              <4> 		__calc_dividendo1 ax, bx, cx, dx, ax, bx, cl
   611                              <5>  stkopen 0x0D
   612 000001AD 83EC0D              <6>  sub word sp, %1
   613 000001B0 54                  <6>  push sp
   614 000001B1 5D                  <6>  pop bp
   615 000001B2 894600              <5>  mov word [bp+0], %1
   616 000001B5 895E02              <5>  mov word [bp+2], %2
   617 000001B8 894E04              <5>  mov word [bp+4], %3
   618 000001BB 895606              <5>  mov word [bp+6], %4
   619 000001BE E89A02              <5>  call proc_calc_dividendo1
   620 000001C1 54                  <5>  push sp
   621 000001C2 5D                  <5>  pop bp
   622 000001C3 8B4608              <5>  mov word %5, [bp+0x08]
   623 000001C6 8B5E0A              <5>  mov word %6, [bp+0x0A]
   624 000001C9 8A4E0C              <5>  mov byte %7, [bp+0x0C]
   625                              <5>  stkclose 0x0D
   626 000001CC 83C40D              <6>  add word sp, %1
   627                              <4> 
   628 000001CF 89E2                <4> 		mov dx,sp
   629 000001D1 89D5                <4> 		mov bp,dx
   630 000001D3 89460E              <4> 		mov word [bp+0x0E], ax
   631 000001D6 895E10              <4> 		mov word [bp+0x10], bx
   632                              <4> 		
   633 000001D9 51                  <4> 		push cx
   634                              <4> 		.l1:							
   635 000001DA 89E2                <4> 			mov dx,sp
   636 000001DC 89D5                <4> 			mov bp,dx		
   637 000001DE 83C502              <4> 			add bp,2
   638 000001E1 8B460E              <4> 			mov ax, [bp+0x0E]
   639 000001E4 8B5E10              <4> 			mov bx, [bp+0x10]
   640 000001E7 8B4E06              <4> 			mov cx, [bp+6]
   641 000001EA 8B5608              <4> 			mov dx, [bp+8]
   642                              <4> 			__cmp32 ax, bx, cx, dx, cl
   643                              <5>  stkopen 9
   644 000001ED 83EC09              <6>  sub word sp, %1
   645 000001F0 54                  <6>  push sp
   646 000001F1 5D                  <6>  pop bp
   647 000001F2 894600              <5>  mov word [bp+0], %1
   648 000001F5 895E02              <5>  mov word [bp+2], %2
   649 000001F8 894E04              <5>  mov word [bp+4], %3
   650 000001FB 895606              <5>  mov word [bp+6], %4
   651 000001FE E81F01              <5>  call proc_cmp32
   652 00000201 54                  <5>  push sp
   653 00000202 5D                  <5>  pop bp
   654 00000203 8A4E08              <5>  mov byte %5, [bp+8]
   655                              <5>  stkclose 9
   656 00000206 83C409              <6>  add word sp, %1
   657                              <4> 			
   658 00000209 51                  <4> 			push cx
   659 0000020A 89E2                <4> 			mov dx,sp
   660 0000020C 89D5                <4> 			mov bp,dx
   661 0000020E 83C504              <4> 			add bp,4
   662 00000211 8B460A              <4> 			mov ax,[bp+0x0A]
   663 00000214 8B5E0C              <4> 			mov bx,[bp+0x0C]
   664 00000217 55                  <4> 			push bp
   665                              <4> 			__shl32 ax, bx, 1
   666                              <5>  stkopen 5
   667 00000218 83EC05              <6>  sub word sp, %1
   668 0000021B 54                  <6>  push sp
   669 0000021C 5D                  <6>  pop bp
   670 0000021D 894600              <5>  mov word [bp+0], %1
   671 00000220 895E02              <5>  mov word [bp+2], %2
   672 00000223 C6460401            <5>  mov byte [bp+4], %3
   673 00000227 E82101              <5>  call proc_shl32
   674 0000022A 54                  <5>  push sp
   675 0000022B 5D                  <5>  pop bp
   676 0000022C 8B4600              <5>  mov word %1, [bp+0]
   677 0000022F 8B5E02              <5>  mov word %2, [bp+2]
   678                              <5>  stkclose 5
   679 00000232 83C405              <6>  add word sp, %1
   680 00000235 5D                  <4> 			pop bp				
   681 00000236 59                  <4> 			pop cx	
   682                              <4> 									
   683 00000237 80F900              <4> 			cmp cl,0
   684 0000023A 7C12                <4> 			jl .l11
   685 0000023C 83C301              <4> 				add bx,1
   686 0000023F 83D000              <4> 				adc ax,0	
   687                              <4> 				
   688 00000242 8B4E06              <4> 				mov cx,[bp+6]
   689 00000245 8B5608              <4> 				mov dx,[bp+8]
   690 00000248 295610              <4> 				sub [bp+0x10],dx
   691 0000024B 194E0E              <4> 				sbb [bp+0x0E],cx							
   692                              <4> 			.l11:							
   693 0000024E 89460A              <4> 			mov word [bp+0x0A], ax
   694 00000251 895E0C              <4> 			mov word [bp+0x0C], bx					
   695                              <4> 					
   696 00000254 59                  <4> 			pop cx
   697 00000255 51                  <4> 			push cx												
   698                              <4> 			
   699 00000256 80F920              <4> 			cmp cl,32
   700 00000259 7342                <4> 			jae .l2
   701                              <4> 						
   702 0000025B 59                  <4> 			pop cx
   703                              <4> 			stkopen 9
   704 0000025C 83EC09              <5>  sub word sp, %1
   705 0000025F 54                  <5>  push sp
   706 00000260 5D                  <5>  pop bp
   707 00000261 8B460B              <4> 			mov ax,[bp+0x0B]
   708 00000264 894600              <4> 			mov word [bp+0], ax
   709 00000267 8B460D              <4> 			mov ax,[bp+0x0D]
   710 0000026A 894602              <4> 			mov word [bp+2], ax
   711 0000026D 8B4617              <4> 			mov ax,[bp+0x17]
   712 00000270 894604              <4> 			mov word [bp+4], ax
   713 00000273 8B4619              <4> 			mov ax,[bp+0x19]
   714 00000276 894606              <4> 			mov word [bp+6], ax
   715 00000279 884E08              <4> 			mov byte [bp+8], cl
   716 0000027C E8AD02              <4> 			call proc_calc_prox_dividendo
   717 0000027F 89E0                <4> 			mov ax,sp
   718 00000281 89C5                <4> 			mov bp,ax
   719 00000283 8B4604              <4> 			mov word ax,[bp+4]
   720 00000286 8B5E06              <4> 			mov word bx,[bp+6]
   721 00000289 8A4E08              <4> 			mov byte cl,[bp+8] 
   722                              <4> 			stkclose 9
   723 0000028C 83C409              <5>  add word sp, %1
   724 0000028F 89E2                <4> 			mov dx,sp
   725 00000291 89D5                <4> 			mov bp,dx
   726 00000293 89460E              <4> 			mov [bp+0x0E],ax
   727 00000296 895E10              <4> 			mov [bp+0x10],bx
   728 00000299 51                  <4> 			push cx
   729 0000029A E93DFF              <4> 			jmp .l1
   730                              <4> 		.l2:	
   731 0000029D 59                  <4> 		pop cx
   732                              <4> 			
   733 0000029E EB16                <4> 		jmp .enddiv
   734                              <4> 	.qzero:
   735 000002A0 C7460A0000          <4> 		mov word [bp+0x0A], 0
   736 000002A5 C7460C0000          <4> 		mov word [bp+0x0C], 0
   737 000002AA 8B4602              <4> 		mov ax,[bp+2]
   738 000002AD 89460E              <4> 		mov word [bp+0x0E], ax
   739 000002B0 8B4604              <4> 		mov ax,[bp+4]
   740 000002B3 894610              <4> 		mov word [bp+0x10], ax	
   741                              <4> 	.enddiv:
   742 000002B6 C6461200            <4> 		mov byte [bp+0x12], 0
   743 000002BA EB04                <4> 		jmp .end
   744                              <4> 	.divbyzero:
   745 000002BC C6461201            <4> 		mov byte [bp+0x12], 1						
   746                              <4> 	.end:		
   747                              <4> 			
   748 000002C0 C3                  <4> 	ret
   749                              <4> 		
   750                              <4> proc_mul32:
   751 000002C1 89E0                <4> 	mov ax,sp
   752 000002C3 89C5                <4> 	mov bp,ax
   753                              <4> 	
   754 000002C5 31D2                <4> 	xor dx,dx
   755 000002C7 8B4604              <4> 	mov ax,[bp+4]
   756 000002CA F76608              <4> 	mul word [bp+8]
   757                              <4> 	
   758 000002CD 89560A              <4> 	mov word [bp+0x0A], dx
   759 000002D0 89460C              <4> 	mov word [bp+0x0C], ax	
   760                              <4> 	
   761 000002D3 31D2                <4> 	xor dx,dx
   762 000002D5 8B4604              <4> 	mov ax,[bp+4]
   763 000002D8 F76606              <4> 	mul word [bp+6]
   764                              <4> 		
   765 000002DB 01460A              <4> 	add word [bp+0x0A],ax
   766                              <4> 	
   767 000002DE 31D2                <4> 	xor dx,dx
   768 000002E0 8B4602              <4> 	mov ax,[bp+2]
   769 000002E3 F76608              <4> 	mul word [bp+8]
   770                              <4> 	
   771 000002E6 01460A              <4> 	add word [bp+0x0A],ax
   772                              <4> 	
   773 000002E9 C3                  <4> 	ret
   774                              <4> 
   775                              <4> proc_add32:
   776 000002EA 89E0                <4> 	mov ax,sp
   777 000002EC 89C5                <4> 	mov bp,ax
   778                              <4> 	
   779 000002EE 8B4602              <4> 	mov ax,[bp+2]
   780 000002F1 8B5E04              <4> 	mov bx,[bp+4]
   781 000002F4 8B4E06              <4> 	mov cx,[bp+6]
   782 000002F7 8B5608              <4> 	mov dx,[bp+8]
   783                              <4> 	
   784 000002FA 01D3                <4> 	add bx,dx
   785 000002FC 11C8                <4> 	adc ax,cx
   786                              <4> 	
   787 000002FE 89460A              <4> 	mov [bp+0x0A],ax
   788 00000301 895E0C              <4> 	mov [bp+0x0C],bx	
   789                              <4> 	
   790 00000304 C3                  <4> 	ret
   791                              <4> 	
   792                              <4> proc_sub32:
   793 00000305 89E0                <4> 	mov ax,sp
   794 00000307 89C5                <4> 	mov bp,ax
   795                              <4> 	
   796 00000309 8B4602              <4> 	mov ax,[bp+2]
   797 0000030C 8B5E04              <4> 	mov bx,[bp+4]
   798 0000030F 8B4E06              <4> 	mov cx,[bp+6]
   799 00000312 8B5608              <4> 	mov dx,[bp+8]
   800                              <4> 	
   801 00000315 29D3                <4> 	sub bx,dx
   802 00000317 19C8                <4> 	sbb ax,cx
   803                              <4> 	
   804 00000319 89460A              <4> 	mov [bp+0x0A],ax
   805 0000031C 895E0C              <4> 	mov [bp+0x0C],bx	
   806                              <4> 	
   807 0000031F C3                  <4> 	ret
   808                              <4> 		
   809                              <4> proc_cmp32:
   810 00000320 89E0                <4> 	mov ax,sp
   811 00000322 89C5                <4> 	mov bp,ax		
   812                              <4> 		
   813 00000324 8B4602              <4> 	mov ax,[bp+2]
   814 00000327 3B4606              <4> 	cmp word ax,[bp+6]
   815 0000032A 7F04                <4> 	jg .above
   816 0000032C 7C08                <4> 	jl .below
   817 0000032E 740C                <4> 	je .equal
   818                              <4> 	.above:
   819 00000330 C6460A01            <4> 		mov byte [bp+0x0A], 00000001b
   820 00000334 EB14                <4> 		jmp .endcmp
   821                              <4> 	.below:
   822 00000336 C6460A81            <4> 		mov byte [bp+0x0A], 10000001b
   823 0000033A EB0E                <4> 		jmp .endcmp
   824                              <4> 	.equal:
   825 0000033C 8B4604              <4> 		mov ax,[bp+4]
   826 0000033F 3B4608              <4> 		cmp word ax,[bp+8]
   827 00000342 7FEC                <4> 		jg .above
   828 00000344 7CF0                <4> 		jl .below
   829 00000346 C6460A00            <4> 		mov byte [bp+0x0A], 00000000b
   830                              <4> 	.endcmp:		
   831 0000034A C3                  <4> 	ret
   832                              <4> 
   833                              <4> proc_shl32:
   834 0000034B 89E0                <4> 	mov ax,sp
   835 0000034D 89C5                <4> 	mov bp,ax
   836                              <4> 	
   837 0000034F 31C0                <4> 	xor ax,ax
   838 00000351 8A4606              <4> 	mov byte al,[bp+6]
   839 00000354 B310                <4> 	mov bl,10h
   840 00000356 F6F3                <4> 	div bl
   841                              <4> 					
   842 00000358 3C01                <4> 	cmp al,1
   843 0000035A 7204                <4> 	jb .zero
   844 0000035C 7418                <4> 	je .one	
   845 0000035E EB27                <4> 	jmp .above
   846                              <4> 	.zero:	
   847 00000360 B110                <4> 		mov cl,10h
   848 00000362 28E1                <4> 		sub cl,ah
   849 00000364 8B5E04              <4> 		mov bx,[bp+4]		
   850 00000367 D3EB                <4> 		shr bx,cl
   851                              <4> 		
   852 00000369 88E1                <4> 		mov cl,ah		
   853 0000036B D36602              <4> 		shl word [bp+2],cl
   854 0000036E 015E02              <4> 		add word [bp+2],bx				
   855 00000371 D36604              <4> 		shl word [bp+4],cl
   856 00000374 EB1B                <4> 		jmp .endzo
   857                              <4> 	.one:
   858 00000376 88E1                <4> 		mov cl,ah
   859 00000378 8B5E04              <4> 		mov bx, [bp+4]				
   860 0000037B D3E3                <4> 		shl bx, cl 
   861 0000037D 895E02              <4> 		mov word [bp+2], bx
   862 00000380 C746040000          <4> 		mov word [bp+4], 0
   863 00000385 EB0A                <4> 		jmp .endzo
   864                              <4> 	.above:		
   865 00000387 C746020000          <4> 		mov word [bp+2], 0
   866 0000038C C746040000          <4> 		mov word [bp+4], 0
   867                              <4> 	.endzo:	
   868                              <4> 	
   869 00000391 C3                  <4> 	ret
   870                              <4> 	
   871                              <4> proc_shr32:
   872 00000392 89E0                <4> 	mov ax,sp
   873 00000394 89C5                <4> 	mov bp,ax
   874                              <4> 	
   875 00000396 31C0                <4> 	xor ax,ax
   876 00000398 8A4606              <4> 	mov byte al,[bp+6]
   877 0000039B B310                <4> 	mov bl,10h
   878 0000039D F6F3                <4> 	div bl
   879                              <4> 					
   880 0000039F 3C01                <4> 	cmp al,1
   881 000003A1 7204                <4> 	jb .zero
   882 000003A3 7418                <4> 	je .one	
   883 000003A5 EB27                <4> 	jmp .above
   884                              <4> 	.zero:	
   885 000003A7 B110                <4> 		mov cl,10h
   886 000003A9 28E1                <4> 		sub cl,ah		
   887 000003AB 8B5E02              <4> 		mov bx,[bp+2]		
   888 000003AE D3E3                <4> 		shl bx,cl
   889                              <4> 		
   890 000003B0 88E1                <4> 		mov cl,ah		
   891 000003B2 D36E02              <4> 		shr word [bp+2],cl
   892 000003B5 D36E04              <4> 		shr word [bp+4],cl
   893 000003B8 015E04              <4> 		add word [bp+4],bx	
   894 000003BB EB1B                <4> 		jmp .endzo
   895                              <4> 	.one:			
   896 000003BD 88E1                <4> 		mov cl,ah
   897 000003BF 8B5E02              <4> 		mov bx,[bp+2]
   898 000003C2 D3EB                <4> 		shr bx,cl
   899 000003C4 C746020000          <4> 		mov word [bp+2],0 
   900 000003C9 895E04              <4> 		mov word [bp+4],bx
   901 000003CC EB0A                <4> 		jmp .endzo
   902                              <4> 	.above:		
   903 000003CE C746020000          <4> 		mov word [bp+2],0
   904 000003D3 C746040000          <4> 		mov word [bp+4],0
   905                              <4> 	.endzo:		
   906                              <4> 
   907 000003D8 C3                  <4> 	ret
   908                              <4> 	
   909                              <4> proc__lzcount16:
   910 000003D9 89E0                <4> 	mov ax,sp
   911 000003DB 89C5                <4> 	mov bp,ax
   912                              <4> 	
   913 000003DD B100                <4> 	mov cl,0
   914                              <4> 		
   915 000003DF 8A6603              <4> 	mov ah, [bp+3]	
   916 000003E2 80E4F0              <4> 	and ah,0xF0
   917 000003E5 80FC00              <4> 	cmp ah,0
   918 000003E8 7529                <4> 	jnz .end
   919 000003EA FEC1                <4> 	inc cl
   920                              <4> 	
   921 000003EC 8A6603              <4> 	mov ah, [bp+3]
   922 000003EF 80E40F              <4> 	and ah,0x0F
   923 000003F2 80FC00              <4> 	cmp ah,0
   924 000003F5 751C                <4> 	jnz .end
   925 000003F7 FEC1                <4> 	inc cl
   926                              <4> 	
   927 000003F9 8A6602              <4> 	mov ah, [bp+2]
   928 000003FC 80E4F0              <4> 	and ah,0xF0
   929 000003FF 80FC00              <4> 	cmp ah,0
   930 00000402 750F                <4> 	jnz .end
   931 00000404 FEC1                <4> 	inc cl
   932                              <4> 	
   933 00000406 8A6602              <4> 	mov ah, [bp+2]
   934 00000409 80E40F              <4> 	and ah,0x0F
   935 0000040C 80FC00              <4> 	cmp ah,0
   936 0000040F 7502                <4> 	jnz .end
   937 00000411 FEC1                <4> 	inc cl
   938                              <4> 		
   939                              <4> 	.end:
   940 00000413 884E04              <4> 	mov byte [bp+4], cl
   941                              <4> 	
   942 00000416 C3                  <4> 	ret
   943                              <4> 
   944                              <4> proc__lzbitcount16:
   945 00000417 89E0                <4> 	mov ax,sp
   946 00000419 89C5                <4> 	mov bp,ax
   947                              <4> 	
   948 0000041B 8B4602              <4> 	mov word ax,[bp+2]
   949                              <4> 		
   950 0000041E B100                <4> 	mov cl,0
   951                              <4> 	.l1:
   952 00000420 80F910              <4> 		cmp cl,16
   953 00000423 7310                <4> 		jae .l2
   954                              <4> 		
   955 00000425 89C3                <4> 		mov bx,ax
   956 00000427 D3E3                <4> 		shl bx,cl
   957 00000429 C1EB0F              <4> 		shr bx,15
   958                              <4> 		
   959 0000042C 83FB00              <4> 		cmp bx,0
   960 0000042F 7504                <4> 		jnz .l2
   961                              <4> 		
   962 00000431 FEC1                <4> 		inc cl		
   963 00000433 EBEB                <4> 		jmp .l1
   964                              <4> 	.l2:
   965                              <4> 	
   966 00000435 884E04              <4> 	mov byte [bp+4], cl
   967                              <4> 	
   968 00000438 C3                  <4> 	ret
   969                              <4> 	
   970                              <4> proc__lzbitcount8:
   971 00000439 89E0                <4> 	mov ax,sp
   972 0000043B 89C5                <4> 	mov bp,ax
   973                              <4> 	
   974 0000043D 8A4602              <4> 	mov byte al,[bp+2]
   975                              <4> 	
   976 00000440 B100                <4> 	mov cl,0
   977                              <4> 	.l1:
   978 00000442 80F908              <4> 		cmp cl,8
   979 00000445 7410                <4> 		je .l2
   980                              <4> 		
   981 00000447 88C3                <4> 		mov bl,al
   982 00000449 D2E3                <4> 		shl bl,cl
   983 0000044B C0EB07              <4> 		shr bl,7
   984                              <4> 		
   985 0000044E 80FB00              <4> 		cmp bl,0
   986 00000451 7504                <4> 		jnz .l2
   987                              <4> 		
   988 00000453 FEC1                <4> 		inc cl		
   989 00000455 EBEB                <4> 		jmp .l1
   990                              <4> 	.l2:
   991                              <4> 	
   992 00000457 884E03              <4> 	mov byte [bp+3], cl
   993                              <4> 		
   994 0000045A C3                  <4> 	ret
   995                              <4> 	
   996                              <4> proc_calc_dividendo1:
   997 0000045B 89E0                <4> 	mov ax,sp
   998 0000045D 89C5                <4> 	mov bp,ax
   999                              <4> 	
  1000 0000045F 8B4606              <4> 	mov ax,[bp+6]
  1001 00000462 8B5E08              <4> 	mov bx,[bp+8]
  1002 00000465 55                  <4> 	push bp
  1003                              <4> 	__lzbitcount32 ax, bx, cl
  1004 00000466 53                  <5>  push %2
  1005                              <5>  __lzbitcount16 %1, cl
  1006                              <6>  stkopen 3
  1007 00000467 83EC03              <7>  sub word sp, %1
  1008 0000046A 54                  <7>  push sp
  1009 0000046B 5D                  <7>  pop bp
  1010 0000046C 894600              <6>  mov word [bp+0], %1
  1011 0000046F E8A5FF              <6>  call proc__lzbitcount16
  1012 00000472 54                  <6>  push sp
  1013 00000473 5D                  <6>  pop bp
  1014 00000474 8A4E02              <6>  mov byte %2, [bp+2]
  1015                              <6>  stkclose 3
  1016 00000477 83C403              <7>  add word sp, %1
  1017 0000047A 58                  <5>  pop ax
  1018 0000047B 80F910              <5>  cmp cl,16
  1019 0000047E 7217                <5>  jb .end
  1020 00000480 51                  <5>  push cx
  1021                              <5>  __lzbitcount16 ax, al
  1022                              <6>  stkopen 3
  1023 00000481 83EC03              <7>  sub word sp, %1
  1024 00000484 54                  <7>  push sp
  1025 00000485 5D                  <7>  pop bp
  1026 00000486 894600              <6>  mov word [bp+0], %1
  1027 00000489 E88BFF              <6>  call proc__lzbitcount16
  1028 0000048C 54                  <6>  push sp
  1029 0000048D 5D                  <6>  pop bp
  1030 0000048E 8A4602              <6>  mov byte %2, [bp+2]
  1031                              <6>  stkclose 3
  1032 00000491 83C403              <7>  add word sp, %1
  1033 00000494 59                  <5>  pop cx
  1034 00000495 00C1                <5>  add cl,al
  1035                              <5>  .end:
  1036 00000497 88C9                <5>  mov byte %3, cl
  1037 00000499 5D                  <4> 	pop bp
  1038 0000049A B320                <4> 	mov bl,32
  1039 0000049C 28CB                <4> 	sub bl,cl
  1040 0000049E 53                  <4> 	push bx
  1041                              <4> 		
  1042 0000049F 8B4602              <4> 	mov ax,[bp+2]
  1043 000004A2 8B5604              <4> 	mov dx,[bp+4]
  1044 000004A5 55                  <4> 	push bp
  1045                              <4> 	__shr32 ax, dx, cl
  1046                              <5>  stkopen 5
  1047 000004A6 83EC05              <6>  sub word sp, %1
  1048 000004A9 54                  <6>  push sp
  1049 000004AA 5D                  <6>  pop bp
  1050 000004AB 894600              <5>  mov word [bp+0], %1
  1051 000004AE 895602              <5>  mov word [bp+2], %2
  1052 000004B1 884E04              <5>  mov byte [bp+4], %3
  1053 000004B4 E8DBFE              <5>  call proc_shr32
  1054 000004B7 54                  <5>  push sp
  1055 000004B8 5D                  <5>  pop bp
  1056 000004B9 8B4600              <5>  mov word %1, [bp+0]
  1057 000004BC 8B5602              <5>  mov word %2, [bp+2]
  1058                              <5>  stkclose 5
  1059 000004BF 83C405              <6>  add word sp, %1
  1060 000004C2 5D                  <4> 	pop bp
  1061 000004C3 50                  <4> 	push ax
  1062 000004C4 52                  <4> 	push dx	
  1063                              <4> 	
  1064 000004C5 8B4E06              <4> 	mov cx,[bp+6]
  1065 000004C8 8B5E08              <4> 	mov bx,[bp+8]
  1066                              <4> 	
  1067 000004CB 55                  <4> 	push bp
  1068                              <4> 	__cmp32 ax, dx, cx, bx, cl
  1069                              <5>  stkopen 9
  1070 000004CC 83EC09              <6>  sub word sp, %1
  1071 000004CF 54                  <6>  push sp
  1072 000004D0 5D                  <6>  pop bp
  1073 000004D1 894600              <5>  mov word [bp+0], %1
  1074 000004D4 895602              <5>  mov word [bp+2], %2
  1075 000004D7 894E04              <5>  mov word [bp+4], %3
  1076 000004DA 895E06              <5>  mov word [bp+6], %4
  1077 000004DD E840FE              <5>  call proc_cmp32
  1078 000004E0 54                  <5>  push sp
  1079 000004E1 5D                  <5>  pop bp
  1080 000004E2 8A4E08              <5>  mov byte %5, [bp+8]
  1081                              <5>  stkclose 9
  1082 000004E5 83C409              <6>  add word sp, %1
  1083 000004E8 5D                  <4> 	pop bp
  1084 000004E9 5A                  <4> 	pop dx
  1085 000004EA 58                  <4> 	pop ax
  1086 000004EB 5B                  <4> 	pop bx
  1087                              <4> 		
  1088 000004EC 80F900              <4> 	cmp cl,0
  1089 000004EF 7D2D                <4> 	jge .l1
  1090                              <4> 		stkopen 9
  1091 000004F1 83EC09              <5>  sub word sp, %1
  1092 000004F4 54                  <5>  push sp
  1093 000004F5 5D                  <5>  pop bp
  1094 000004F6 8B4E0B              <4> 		mov cx,[bp+0x0B]
  1095 000004F9 894E00              <4> 		mov word [bp+0], cx
  1096 000004FC 8B4E0D              <4> 		mov cx,[bp+0x0D]
  1097 000004FF 894E02              <4> 		mov word [bp+2], cx
  1098 00000502 894604              <4> 		mov word [bp+4], ax
  1099 00000505 895606              <4> 		mov word [bp+6], dx
  1100 00000508 885E08              <4> 		mov byte [bp+8], bl
  1101 0000050B E81E00              <4> 		call proc_calc_prox_dividendo
  1102 0000050E 89E0                <4> 		mov ax,sp
  1103 00000510 89C5                <4> 		mov bp,ax
  1104 00000512 8B4604              <4> 		mov word ax,[bp+4]
  1105 00000515 8B5606              <4> 		mov word dx,[bp+6]
  1106 00000518 8A5E08              <4> 		mov byte bl,[bp+8] 
  1107                              <4> 		stkclose 9		 
  1108 0000051B 83C409              <5>  add word sp, %1
  1109                              <4> 	.l1:
  1110                              <4> 	
  1111 0000051E 89E1                <4> 	mov cx,sp
  1112 00000520 89CD                <4> 	mov bp,cx
  1113 00000522 89460A              <4> 	mov word [bp+0x0A], ax
  1114 00000525 89560C              <4> 	mov word [bp+0x0C], dx
  1115 00000528 885E0E              <4> 	mov byte [bp+0x0E], bl	 
  1116                              <4> 	
  1117 0000052B C3                  <4> 	ret
  1118                              <4> 
  1119                              <4> proc_calc_prox_dividendo:
  1120 0000052C 89E0                <4> 	mov ax,sp
  1121 0000052E 89C5                <4> 	mov bp,ax
  1122                              <4> 	
  1123 00000530 30E4                <4> 	xor ah,ah	
  1124 00000532 8A460A              <4> 	mov al,[bp+0x0A]
  1125 00000535 B310                <4> 	mov bl,10h
  1126 00000537 F6F3                <4> 	div bl
  1127                              <4> 	
  1128 00000539 3C00                <4> 	cmp al,0
  1129 0000053B 7402                <4> 	jz .zero
  1130 0000053D EB05                <4> 	jmp .one
  1131                              <4> 	.zero:
  1132 0000053F 8B5E02              <4> 		mov bx,[bp+2]
  1133 00000542 EB03                <4> 		jmp .endcmp
  1134                              <4> 	.one:
  1135 00000544 8B5E04              <4> 		mov bx,[bp+4]		
  1136                              <4> 	.endcmp:
  1137                              <4> 		
  1138 00000547 88E1                <4> 	mov cl,ah
  1139 00000549 D3E3                <4> 	shl bx,cl
  1140 0000054B C1EB0F              <4> 	shr bx,15
  1141                              <4> 	
  1142 0000054E 8B4606              <4> 	mov ax,[bp+6]
  1143 00000551 8B5608              <4> 	mov dx,[bp+8]
  1144 00000554 53                  <4> 	push bx
  1145                              <4> 	__shl32 ax, dx, 1
  1146                              <5>  stkopen 5
  1147 00000555 83EC05              <6>  sub word sp, %1
  1148 00000558 54                  <6>  push sp
  1149 00000559 5D                  <6>  pop bp
  1150 0000055A 894600              <5>  mov word [bp+0], %1
  1151 0000055D 895602              <5>  mov word [bp+2], %2
  1152 00000560 C6460401            <5>  mov byte [bp+4], %3
  1153 00000564 E8E4FD              <5>  call proc_shl32
  1154 00000567 54                  <5>  push sp
  1155 00000568 5D                  <5>  pop bp
  1156 00000569 8B4600              <5>  mov word %1, [bp+0]
  1157 0000056C 8B5602              <5>  mov word %2, [bp+2]
  1158                              <5>  stkclose 5
  1159 0000056F 83C405              <6>  add word sp, %1
  1160 00000572 5B                  <4> 	pop bx
  1161                              <4> 	
  1162 00000573 01DA                <4> 	add dx,bx
  1163 00000575 83D000              <4> 	adc ax,0
  1164                              <4> 
  1165 00000578 89E1                <4> 	mov cx,sp
  1166 0000057A 89CD                <4> 	mov bp,cx	
  1167 0000057C 894606              <4> 	mov [bp+6],ax
  1168 0000057F 895608              <4> 	mov [bp+8],dx
  1169                              <4> 	
  1170 00000582 FE460A              <4> 	inc byte [bp+0x0A]
  1171                              <4> 	
  1172 00000585 C3                  <4> 	ret
  1173                              <4> 	
  1174                              <4> %endif
  1175                              <3> 	%include "lib/system.mac"
  1176                              <4>  
  1177                              <4> %ifndef SYSTEM_MAC
  1178                              <4>  	%define SYSTEM_MAC
  1179                              <4>  	
  1180                              <4> 	%ifndef TRUE
  1181                              <4> 		%define TRUE 01h
  1182                              <4> 	%endif
  1183                              <4> 	%ifndef FALSE
  1184                              <4> 		%define FALSE 00h
  1185                              <4> 	%endif
  1186                              <4> 	
  1187                              <4> %macro vlodsb 3
  1188                              <4> 	vlodsb cs, %1, %2, %3
  1189                              <4> %endmacro
  1190                              <4> 
  1191                              <4> %macro vstosb 3
  1192                              <4> 	vstosb cs, %1, %2, %3
  1193                              <4> %endmacro
  1194                              <4> 	 	
  1195                              <4> %macro int16toreg 2
  1196                              <4> 	int16toreg cs, %1, %2
  1197                              <4> %endmacro
  1198                              <4> 
  1199                              <4> %macro regtoint16 2
  1200                              <4> 	regtoint16 %1, cs, %2
  1201                              <4> %endmacro
  1202                              <4> 
  1203                              <4> %macro vstosb 4
  1204                              <4> 	push %1
  1205                              <4> 	pop ds
  1206                              <4> 	mov si,%2
  1207                              <4> 	add si,%3
  1208                              <4> 	mov byte [si],%4	
  1209                              <4> %endmacro
  1210                              <4> 
  1211                              <4> %macro vlodsb 4
  1212                              <4> 	push %1
  1213                              <4> 	pop ds
  1214                              <4> 	mov si,%2
  1215                              <4> 	add si,%3
  1216                              <4> 	mov byte %4,[si]	
  1217                              <4> %endmacro 	 
  1218                              <4> 
  1219                              <4> %macro int16toreg 3
  1220                              <4> 	push %2
  1221                              <4> 	push %1
  1222                              <4> 	pop ds
  1223                              <4> 	pop si
  1224                              <4> 	mov word %3,[si]	
  1225                              <4> %endmacro
  1226                              <4> 
  1227                              <4> %macro regtoint16 3
  1228                              <4> 	push %3
  1229                              <4> 	push %2
  1230                              <4> 	pop ds
  1231                              <4> 	pop si
  1232                              <4> 	mov word [si],%1	
  1233                              <4> %endmacro
  1234                              <4> 
  1235                              <4> %macro mov32 2
  1236                              <4> 	mov32 cs, %1, cs, %2
  1237                              <4> %endmacro
  1238                              <4> 
  1239                              <4> %macro mov16 2
  1240                              <4> 	mov16 cs, %1, cs, %2
  1241                              <4> %endmacro
  1242                              <4> 
  1243                              <4> %macro mov32 4
  1244                              <4> 	mov ax,%3
  1245                              <4> 	mov ds,ax
  1246                              <4> 	mov cx,[%4+2]
  1247                              <4> 	mov dx,[%4]
  1248                              <4> 	mov ax,%1
  1249                              <4> 	mov ds,ax
  1250                              <4> 	mov [%2+2],cx
  1251                              <4> 	mov [%2],dx
  1252                              <4> %endmacro
  1253                              <4> 
  1254                              <4> %macro mov16 4
  1255                              <4> 	mov ax,%3
  1256                              <4> 	mov ds,ax
  1257                              <4> 	mov bx,[%4]
  1258                              <4> 	mov ax,%1
  1259                              <4> 	mov ds,ax
  1260                              <4> 	mov [%2],bx
  1261                              <4> %endmacro
  1262                              <4>  	 	
  1263                              <4> %macro mformat 4
  1264                              <4> 	stkopen 8
  1265                              <4> 	mov word [ bp + 0 ], %1
  1266                              <4> 	mov word [ bp + 2 ], %2
  1267                              <4> 	mov word [ bp + 4 ], %3
  1268                              <4> 	mov word [ bp + 6 ], %4
  1269                              <4> 	call kernel_segment:mformat
  1270                              <4> 	stkclose 8
  1271                              <4> %endmacro
  1272                              <4> 
  1273                              <4> %macro malloc 6
  1274                              <4> 	stkopen 0Bh
  1275                              <4> 	mov word [ bp + 4 ], %3
  1276                              <4> 	mov word [ bp + 6 ], %4
  1277                              <4> 	mov word [ bp + 8 ], %5	
  1278                              <4> 	call kernel_segment:malloc
  1279                              <4> 	push sp
  1280                              <4> 	pop bp
  1281                              <4> 	mov word %1, [ bp ]
  1282                              <4> 	mov word %2, [ bp + 2 ]
  1283                              <4> 	mov byte %6, [ bp + 0x0A ]
  1284                              <4> 	stkclose 0Bh
  1285                              <4> %endmacro 	
  1286                              <4> 
  1287                              <4> %macro laddr 2
  1288                              <4> 	laddr %1, %2, %1, %2
  1289                              <4> %endmacro
  1290                              <4> 
  1291                              <4> %macro faddr 2
  1292                              <4> 	faddr %1, %2, %1, %2
  1293                              <4> %endmacro
  1294                              <4>  	
  1295                              <4> %macro laddr 4
  1296                              <4> 	stkopen 8
  1297                              <4> 	mov word [ bp + 4 ], %3
  1298                              <4> 	mov word [ bp + 6 ], %4	
  1299                              <4> 	call kernel_segment:laddr
  1300                              <4> 	push sp
  1301                              <4> 	pop bp
  1302                              <4> 	mov word %1, [ bp + 0 ]
  1303                              <4> 	mov word %2, [ bp + 2 ]	
  1304                              <4> 	stkclose 8
  1305                              <4> %endmacro
  1306                              <4> 
  1307                              <4> %macro faddr 4
  1308                              <4> 	stkopen 8
  1309                              <4> 	mov word [ bp + 4 ], %3
  1310                              <4> 	mov word [ bp + 6 ], %4	
  1311                              <4> 	call kernel_segment:faddr
  1312                              <4> 	push sp
  1313                              <4> 	pop bp
  1314                              <4> 	mov word %1, [ bp + 0 ]
  1315                              <4> 	mov word %2, [ bp + 2 ]	
  1316                              <4> 	stkclose 8
  1317                              <4> %endmacro	
  1318                              <4>  
  1319                              <4> 
  1320                              <4> %macro stkopen 1		
  1321                              <4> 	sub word sp, %1
  1322                              <4> 	push sp
  1323                              <4> 	pop bp
  1324                              <4> %endmacro
  1325                              <4> 
  1326                              <4> %macro stkclose 1
  1327                              <4> 	add word sp, %1
  1328                              <4> %endmacro
  1329                              <4> 
  1330                              <4> %macro stkload 1-* 	
  1331                              <4>  	%rep %0
  1332                              <4>  	 	%rotate -1
  1333                              <4>  		pop %1
  1334                              <4>  	%endrep
  1335                              <4>  	%rep %0
  1336                              <4>  		push %1
  1337                              <4>  		%rotate 1
  1338                              <4>  	%endrep
  1339                              <4> %endmacro
  1340                              <4> 
  1341                              <4> %macro stkpush 1-* 	
  1342                              <4>  	%rep %0
  1343                              <4>  		push %1
  1344                              <4>  		%rotate 1
  1345                              <4>  	%endrep 	
  1346                              <4> %endmacro
  1347                              <4>  
  1348                              <4> %macro stkpop 1-*
  1349                              <4>  	%rep %0
  1350                              <4>  	 	%rotate -1
  1351                              <4>  		pop %1
  1352                              <4>  	%endrep 	 	
  1353                              <4> %endmacro
  1354                              <4> 
  1355                              <4> %endif 
  1356                              <3> 
  1357                              <3> %macro chgsig 1
  1358                              <3> 	chgsig cs, %1
  1359                              <3> %endmacro
  1360                              <3> 
  1361                              <3> %macro cmp16 3
  1362                              <3> 	cmp16 cs, %1, cs, %2, %3
  1363                              <3> %endmacro
  1364                              <3> 
  1365                              <3> %macro mul16 2
  1366                              <3> 	mul16 cs, %1, cs, %2
  1367                              <3> %endmacro
  1368                              <3> 
  1369                              <3> %macro div16 2
  1370                              <3> 	div16 cs, %1, cs, %2
  1371                              <3> %endmacro
  1372                              <3> 
  1373                              <3> %macro mod16 2
  1374                              <3> 	mod16 cs, %1, cs, %2
  1375                              <3> %endmacro
  1376                              <3> 
  1377                              <3> %macro inc16 1
  1378                              <3> 	inc16 cs, %1
  1379                              <3> %endmacro
  1380                              <3> 
  1381                              <3> %macro dec16 1
  1382                              <3> 	dec16 cs, %1
  1383                              <3> %endmacro
  1384                              <3> 
  1385                              <3> %macro add16 2
  1386                              <3> 	add16 cs, %1, cs, %2
  1387                              <3> %endmacro
  1388                              <3> 
  1389                              <3> %macro sub16 2
  1390                              <3> 	sub16 cs, %1, cs, %2
  1391                              <3> %endmacro
  1392                              <3> 
  1393                              <3> %macro int32to16 2
  1394                              <3> 	int32to16 cs, %1, %2
  1395                              <3> %endmacro
  1396                              <3> 
  1397                              <3> %macro int16to32 2
  1398                              <3> 	int16to32 %1, cs, %2
  1399                              <3> %endmacro
  1400                              <3> 
  1401                              <3> %macro setsig 1
  1402                              <3> 	setsig cs, %1
  1403                              <3> %endmacro
  1404                              <3> 
  1405                              <3> %macro clrsig 1
  1406                              <3> 	clrsig cs, %1
  1407                              <3> %endmacro
  1408                              <3> 
  1409                              <3> %macro idiv32 5
  1410                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  1411                              <3> %endmacro
  1412                              <3> 
  1413                              <3> %macro imul32 3
  1414                              <3> 	imul32 cs, %1, cs, %2, cs, %3
  1415                              <3> %endmacro
  1416                              <3> 
  1417                              <3> %macro div32 5
  1418                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  1419                              <3> %endmacro
  1420                              <3> 
  1421                              <3> %macro mul32 3
  1422                              <3> 	mul32 cs, %1, cs, %2, cs, %3
  1423                              <3> %endmacro
  1424                              <3> 	
  1425                              <3> %macro add32 3
  1426                              <3> 	add32 cs, %1, cs, %2, cs, %3
  1427                              <3> %endmacro
  1428                              <3> 
  1429                              <3> %macro sub32 3
  1430                              <3> 	sub32 cs, %1, cs, %2, cs, %3
  1431                              <3> %endmacro
  1432                              <3> 
  1433                              <3> %macro int32to16 3
  1434                              <3> 	stkopen 0x06
  1435                              <3> 	mov ax,%1
  1436                              <3> 	mov ds,ax
  1437                              <3> 	mov ax,[%2+2]
  1438                              <3> 	mov word [bp+0], ax
  1439                              <3> 	mov ax,[%2]	
  1440                              <3> 	mov word [bp+2], ax
  1441                              <3> 	call proc_int32to16
  1442                              <3> 	mov ax,sp
  1443                              <3> 	mov bp,ax
  1444                              <3> 	mov ax,[bp+4]
  1445                              <3> 	mov word %3, ax	
  1446                              <3> 	stkclose 0x06
  1447                              <3> %endmacro
  1448                              <3> 
  1449                              <3> %macro int16to32 3
  1450                              <3> 	stkopen 0x06
  1451                              <3> 	mov word [bp+0], %1	
  1452                              <3> 	call proc_int16to32
  1453                              <3> 	mov ax,sp
  1454                              <3> 	mov bp,ax
  1455                              <3> 	mov ax,%2
  1456                              <3> 	mov ds,ax
  1457                              <3> 	mov ax,[bp+2]
  1458                              <3> 	mov [%3+2],ax
  1459                              <3> 	mov ax,[bp+4]
  1460                              <3> 	mov [%3],ax	
  1461                              <3> 	stkclose 0x06
  1462                              <3> %endmacro
  1463                              <3> 
  1464                              <3> %macro setsig 2
  1465                              <3> 	stkopen 0x02
  1466                              <3> 	mov ax,%1
  1467                              <3> 	mov ds,ax
  1468                              <3> 	mov ax,[%2+2]
  1469                              <3> 	mov word [bp+0], ax
  1470                              <3> 	call proc_setsig
  1471                              <3> 	mov ax,sp
  1472                              <3> 	mov bp,ax
  1473                              <3> 	mov ax,%1
  1474                              <3> 	mov ds,ax
  1475                              <3> 	mov ax,[bp+0]
  1476                              <3> 	mov word [%2+2], ax
  1477                              <3> 	stkclose 0x02
  1478                              <3> %endmacro
  1479                              <3> 
  1480                              <3> %macro clrsig 2
  1481                              <3> 	stkopen 0x02
  1482                              <3> 	mov ax,%1
  1483                              <3> 	mov ds,ax
  1484                              <3> 	mov ax,[%2+2]
  1485                              <3> 	mov word [bp+0], ax
  1486                              <3> 	call proc_clrsig
  1487                              <3> 	mov ax,sp
  1488                              <3> 	mov bp,ax
  1489                              <3> 	mov ax,%1
  1490                              <3> 	mov ds,ax
  1491                              <3> 	mov ax,[bp+0]
  1492                              <3> 	mov word [%2+2], ax
  1493                              <3> 	stkclose 0x02
  1494                              <3> %endmacro
  1495                              <3> 
  1496                              <3> %macro div32 10
  1497                              <3> 	stkopen 0x11
  1498                              <3> 	mov ax,%1
  1499                              <3> 	mov ds,ax
  1500                              <3> 	mov ax,[%2+2]
  1501                              <3> 	mov word [bp+0], ax
  1502                              <3> 	mov ax,[%2]
  1503                              <3> 	mov word [bp+2], ax
  1504                              <3> 	mov ax,%3
  1505                              <3> 	mov ds,ax
  1506                              <3> 	mov ax,[%4+2]
  1507                              <3> 	mov word [bp+4], ax
  1508                              <3> 	mov ax,[%4]
  1509                              <3> 	mov word [bp+6], ax
  1510                              <3> 	call proc_div32
  1511                              <3> 	mov ax,sp
  1512                              <3> 	mov bp,ax
  1513                              <3> 	mov ax,%5
  1514                              <3> 	mov ds,ax
  1515                              <3> 	mov word ax, [bp+8]
  1516                              <3> 	mov word [%6+2], ax
  1517                              <3> 	mov word ax, [bp+0x0A]
  1518                              <3> 	mov word [%6], ax
  1519                              <3> 	mov ax,%7
  1520                              <3> 	mov ds,ax
  1521                              <3> 	mov word ax,[bp+0x0C]
  1522                              <3> 	mov word [%8+2],ax
  1523                              <3> 	mov word ax,[bp+0x0E]
  1524                              <3> 	mov word [%8],ax
  1525                              <3> 	mov ax,%9
  1526                              <3> 	mov ds,ax
  1527                              <3> 	mov byte al,[bp+0x10]
  1528                              <3> 	mov byte [%10],al
  1529                              <3> 	stkclose 0x11
  1530                              <3> %endmacro
  1531                              <3> 	
  1532                              <3> %macro mul32 6
  1533                              <3> 	stkopen 0x0C
  1534                              <3> 	mov ax,%1
  1535                              <3> 	mov ds,ax
  1536                              <3> 	mov ax,[%2+2]
  1537                              <3> 	mov word [bp+0], ax
  1538                              <3> 	mov ax,[%2]
  1539                              <3> 	mov word [bp+2], ax
  1540                              <3> 	mov ax,%3
  1541                              <3> 	mov ds,ax
  1542                              <3> 	mov ax,[%4+2]
  1543                              <3> 	mov word [bp+4], ax
  1544                              <3> 	mov ax,[%4]
  1545                              <3> 	mov word [bp+6], ax
  1546                              <3> 	call proc_mul32
  1547                              <3> 	mov ax,sp
  1548                              <3> 	mov bp,ax
  1549                              <3> 	mov ax,%5
  1550                              <3> 	mov ds,ax
  1551                              <3> 	mov word ax, [bp+8]
  1552                              <3> 	mov word [%6+2], ax
  1553                              <3> 	mov word ax, [bp+0x0A]
  1554                              <3> 	mov word [%6], ax
  1555                              <3> 	stkclose 0x0C
  1556                              <3> %endmacro	
  1557                              <3> 	
  1558                              <3> %macro add32 6
  1559                              <3> 	stkopen 0x0C
  1560                              <3> 	mov ax,%1
  1561                              <3> 	mov ds,ax
  1562                              <3> 	mov ax,[%2+2]
  1563                              <3> 	mov word [bp+0], ax
  1564                              <3> 	mov ax,[%2]
  1565                              <3> 	mov word [bp+2], ax
  1566                              <3> 	mov ax,%3
  1567                              <3> 	mov ds,ax
  1568                              <3> 	mov ax,[%4+2]
  1569                              <3> 	mov word [bp+4], ax
  1570                              <3> 	mov ax,[%4]
  1571                              <3> 	mov word [bp+6], ax
  1572                              <3> 	call proc_add32
  1573                              <3> 	mov ax,sp
  1574                              <3> 	mov bp,ax
  1575                              <3> 	mov ax,%5
  1576                              <3> 	mov ds,ax
  1577                              <3> 	mov word ax, [bp+8]
  1578                              <3> 	mov word [%6+2], ax
  1579                              <3> 	mov word ax, [bp+0x0A]
  1580                              <3> 	mov word [%6], ax
  1581                              <3> 	stkclose 0x0C
  1582                              <3> %endmacro
  1583                              <3> 
  1584                              <3> %macro sub32 6
  1585                              <3> 	stkopen 0x0C
  1586                              <3> 	mov ax,%1
  1587                              <3> 	mov ds,ax
  1588                              <3> 	mov ax,[%2+2]
  1589                              <3> 	mov word [bp+0], ax
  1590                              <3> 	mov ax,[%2]
  1591                              <3> 	mov word [bp+2], ax
  1592                              <3> 	mov ax,%3
  1593                              <3> 	mov ds,ax
  1594                              <3> 	mov ax,[%4+2]
  1595                              <3> 	mov word [bp+4], ax
  1596                              <3> 	mov ax,[%4]
  1597                              <3> 	mov word [bp+6], ax
  1598                              <3> 	call proc_sub32
  1599                              <3> 	mov ax,sp
  1600                              <3> 	mov bp,ax
  1601                              <3> 	mov ax,%5
  1602                              <3> 	mov ds,ax
  1603                              <3> 	mov word ax, [bp+8]
  1604                              <3> 	mov word [%6+2], ax
  1605                              <3> 	mov word ax, [bp+0x0A]
  1606                              <3> 	mov word [%6], ax
  1607                              <3> 	stkclose 0x0C
  1608                              <3> %endmacro
  1609                              <3> 
  1610                              <3> %macro idiv32 10
  1611                              <3> 	stkopen 0x11
  1612                              <3> 	mov ax,%1
  1613                              <3> 	mov ds,ax
  1614                              <3> 	mov ax,[%2+2]
  1615                              <3> 	mov word [bp+0], ax
  1616                              <3> 	mov ax,[%2]
  1617                              <3> 	mov word [bp+2], ax
  1618                              <3> 	mov ax,%3
  1619                              <3> 	mov ds,ax
  1620                              <3> 	mov ax,[%4+2]
  1621                              <3> 	mov word [bp+4], ax
  1622                              <3> 	mov ax,[%4]
  1623                              <3> 	mov word [bp+6], ax
  1624                              <3> 	call proc_idiv32
  1625                              <3> 	mov ax,sp
  1626                              <3> 	mov bp,ax
  1627                              <3> 	mov ax,%5
  1628                              <3> 	mov ds,ax
  1629                              <3> 	mov word ax, [bp+8]
  1630                              <3> 	mov word [%6+2], ax
  1631                              <3> 	mov word ax, [bp+0x0A]
  1632                              <3> 	mov word [%6], ax
  1633                              <3> 	mov ax,%7
  1634                              <3> 	mov ds,ax
  1635                              <3> 	mov word ax,[bp+0x0C]
  1636                              <3> 	mov word [%8+2],ax
  1637                              <3> 	mov word ax,[bp+0x0E]
  1638                              <3> 	mov word [%8],ax
  1639                              <3> 	mov ax,%9
  1640                              <3> 	mov ds,ax
  1641                              <3> 	mov byte al,[bp+0x10]
  1642                              <3> 	mov byte [%10],al
  1643                              <3> 	stkclose 0x11
  1644                              <3> %endmacro
  1645                              <3> 
  1646                              <3> %macro imul32 6
  1647                              <3> 	stkopen 0x0C
  1648                              <3> 	mov ax,%1
  1649                              <3> 	mov ds,ax
  1650                              <3> 	mov ax,[%2+2]
  1651                              <3> 	mov word [bp+0], ax
  1652                              <3> 	mov ax,[%2]
  1653                              <3> 	mov word [bp+2], ax
  1654                              <3> 	mov ax,%3
  1655                              <3> 	mov ds,ax
  1656                              <3> 	mov ax,[%4+2]
  1657                              <3> 	mov word [bp+4], ax
  1658                              <3> 	mov ax,[%4]
  1659                              <3> 	mov word [bp+6], ax
  1660                              <3> 	call proc_imul32
  1661                              <3> 	mov ax,sp
  1662                              <3> 	mov bp,ax
  1663                              <3> 	mov ax,%5
  1664                              <3> 	mov ds,ax
  1665                              <3> 	mov word ax, [bp+8]
  1666                              <3> 	mov word [%6+2], ax
  1667                              <3> 	mov word ax, [bp+0x0A]
  1668                              <3> 	mov word [%6], ax
  1669                              <3> 	stkclose 0x0C
  1670                              <3> %endmacro
  1671                              <3> 	
  1672                              <3> %macro cmp32 3
  1673                              <3> 	cmp32 cs, %1, cs, %2, %3
  1674                              <3> %endmacro	
  1675                              <3> 	
  1676                              <3> %macro cmp32 5
  1677                              <3> 	stkopen 9
  1678                              <3> 	mov ax,%1
  1679                              <3> 	mov ds,ax
  1680                              <3> 	mov word ax,[%2+2]
  1681                              <3> 	mov word [bp+0], ax
  1682                              <3> 	mov word ax,[%2]
  1683                              <3> 	mov word [bp+2], ax	
  1684                              <3> 	mov ax,%3
  1685                              <3> 	mov ds,ax
  1686                              <3> 	mov word ax,[%4+2]
  1687                              <3> 	mov word [bp+4], ax
  1688                              <3> 	mov word ax,[%4]
  1689                              <3> 	mov word [bp+6], ax	
  1690                              <3> 	call proc_cmp32
  1691                              <3> 	mov ax,sp
  1692                              <3> 	mov bp,ax
  1693                              <3> 	mov al,[bp+8]
  1694                              <3> 	mov byte %5,al
  1695                              <3> 	stkclose 9
  1696                              <3> %endmacro
  1697                              <3> 	
  1698                              <3> %macro shl32 2
  1699                              <3> 	shl32 cs, %1, %2
  1700                              <3> %endmacro	
  1701                              <3> 	
  1702                              <3> %macro shl32 3
  1703                              <3> 	stkopen 5
  1704                              <3> 	mov ax,%1
  1705                              <3> 	mov ds,ax
  1706                              <3> 	mov word ax,[%2+2]
  1707                              <3> 	mov word [bp+0], ax
  1708                              <3> 	mov word ax,[%2]
  1709                              <3> 	mov word [bp+2], ax
  1710                              <3> 	mov byte al, %3
  1711                              <3> 	mov byte [bp+4], al 
  1712                              <3> 	call proc_shl32
  1713                              <3> 	mov ax,sp
  1714                              <3> 	mov bp,ax
  1715                              <3> 	mov ax,%1
  1716                              <3> 	mov ds,ax
  1717                              <3> 	mov ax,[bp+0]
  1718                              <3> 	mov word [%2+2],ax
  1719                              <3> 	mov ax,[bp+2]
  1720                              <3> 	mov word [%2],ax
  1721                              <3> 	stkclose 5
  1722                              <3> %endmacro
  1723                              <3> 
  1724                              <3> 
  1725                              <3> %macro shr32 2
  1726                              <3> 	shr32 cs, %1, %2
  1727                              <3> %endmacro	
  1728                              <3> 	
  1729                              <3> %macro shr32 3
  1730                              <3> 	stkopen 5
  1731                              <3> 	mov ax,%1
  1732                              <3> 	mov ds,ax
  1733                              <3> 	mov word ax,[%2+2]
  1734                              <3> 	mov word [bp+0], ax
  1735                              <3> 	mov word ax,[%2]
  1736                              <3> 	mov word [bp+2], ax
  1737                              <3> 	mov byte al, %3
  1738                              <3> 	mov byte [bp+4], al 
  1739                              <3> 	call proc_shr32
  1740                              <3> 	mov ax,sp
  1741                              <3> 	mov bp,ax
  1742                              <3> 	mov ax,%1
  1743                              <3> 	mov ds,ax
  1744                              <3> 	mov ax,[bp+0]
  1745                              <3> 	mov word [%2+2],ax
  1746                              <3> 	mov ax,[bp+2]
  1747                              <3> 	mov word [%2],ax
  1748                              <3> 	stkclose 5
  1749                              <3> %endmacro
  1750                              <3> 
  1751                              <3> %macro inc16 2
  1752                              <3> 	mov ax,%1
  1753                              <3> 	mov ds,ax
  1754                              <3> 	inc word [%2]
  1755                              <3> %endmacro
  1756                              <3> 
  1757                              <3> %macro dec16 2
  1758                              <3> 	mov ax,%1
  1759                              <3> 	mov ds,ax
  1760                              <3> 	dec word [%2]
  1761                              <3> %endmacro
  1762                              <3> 
  1763                              <3> %macro add16 4	
  1764                              <3> 	mov ax,%3
  1765                              <3> 	mov ds,ax
  1766                              <3> 	mov bx,[%4]	
  1767                              <3> 	mov ax,%1
  1768                              <3> 	mov ds,ax	
  1769                              <3> 	add [%2],bx
  1770                              <3> %endmacro
  1771                              <3> 
  1772                              <3> %macro sub16 4
  1773                              <3> 	mov ax,%3
  1774                              <3> 	mov ds,ax
  1775                              <3> 	mov bx,[%4]
  1776                              <3> 	mov ax,%1
  1777                              <3> 	mov ds,ax
  1778                              <3> 	sub [%2],bx
  1779                              <3> %endmacro
  1780                              <3> 
  1781                              <3> %macro mul16 4
  1782                              <3> 	mov ax,%1
  1783                              <3> 	mov ds,ax
  1784                              <3> 	mov bx,[%2]
  1785                              <3> 	mov ax,%3
  1786                              <3> 	mov ds,ax
  1787                              <3> 	mov cx,[%4]
  1788                              <3> 	
  1789                              <3> 	mov ax,bx
  1790                              <3> 	imul cx
  1791                              <3> 	
  1792                              <3> 	mov dx,%1
  1793                              <3> 	mov ds,dx
  1794                              <3> 	mov [%2],ax
  1795                              <3> %endmacro
  1796                              <3> 
  1797                              <3> %macro div16 4
  1798                              <3> 	mov ax,%1
  1799                              <3> 	mov ds,ax
  1800                              <3> 	mov bx,[%2]
  1801                              <3> 	mov ax,%3
  1802                              <3> 	mov ds,ax
  1803                              <3> 	mov cx,[%4]
  1804                              <3> 	
  1805                              <3> 	xor dx,dx
  1806                              <3> 	mov ax,bx
  1807                              <3> 	idiv cx
  1808                              <3> 	
  1809                              <3> 	mov dx,%1
  1810                              <3> 	mov ds,dx
  1811                              <3> 	mov [%2],ax
  1812                              <3> %endmacro
  1813                              <3> 
  1814                              <3> 
  1815                              <3> %macro mod16 4
  1816                              <3> 	mov ax,%1
  1817                              <3> 	mov ds,ax
  1818                              <3> 	mov bx,[%2]
  1819                              <3> 	mov ax,%3
  1820                              <3> 	mov ds,ax
  1821                              <3> 	mov cx,[%4]
  1822                              <3> 	
  1823                              <3> 	xor dx,dx
  1824                              <3> 	mov ax,bx
  1825                              <3> 	idiv cx
  1826                              <3> 	
  1827                              <3> 	mov bx,%1
  1828                              <3> 	mov ds,bx
  1829                              <3> 	mov [%2],dx
  1830                              <3> %endmacro
  1831                              <3> 
  1832                              <3> %macro cmp16 5
  1833                              <3> 	mov ax,%1
  1834                              <3> 	mov ds,ax
  1835                              <3> 	mov bx,[%2]
  1836                              <3> 	mov ax,%3
  1837                              <3> 	mov ds,ax
  1838                              <3> 	mov	cx,[%4]
  1839                              <3> 	
  1840                              <3> 	cmp bx,cx
  1841                              <3> 	jg %%above
  1842                              <3> 	jl %%below
  1843                              <3> 		mov byte %5, 0
  1844                              <3> 		jmp %%endcmp
  1845                              <3> 	%%above:
  1846                              <3> 		mov byte %5, 1
  1847                              <3> 		jmp %%endcmp
  1848                              <3> 	%%below:
  1849                              <3> 		mov byte %5, -1
  1850                              <3> 	%%endcmp:
  1851                              <3> %endmacro
  1852                              <3> 
  1853                              <3> %macro chgsig 2
  1854                              <3> 	mov ax,%1
  1855                              <3> 	mov ds,ax
  1856                              <3> 	mov ax,[%2]
  1857                              <3> 	mov bx,0xFFFF
  1858                              <3> 	sub bx,ax
  1859                              <3> 	inc bx
  1860                              <3> 	mov [%2],bx
  1861                              <3> %endmacro
  1862                              <3> 	
  1863                              <3> %endif
  1864                              <2> 	
  1865                              <2> %macro __fltoint16 3
  1866                              <2> 	stkopen 0x06
  1867                              <2> 	mov word [bp+0],%1
  1868                              <2> 	mov word [bp+2],%2
  1869                              <2> 	call proc_fltoint16
  1870                              <2> 	push sp
  1871                              <2> 	pop bp
  1872                              <2> 	mov word %3,[bp+4]
  1873                              <2> 	stkclose 0x06
  1874                              <2> %endmacro
  1875                              <2> 
  1876                              <2> %macro __int16tofl 3	
  1877                              <2> 	stkopen 0x06
  1878                              <2> 	mov word [bp+0],%1
  1879                              <2> 	call proc_int16tofl
  1880                              <2> 	push sp
  1881                              <2> 	pop bp
  1882                              <2> 	mov word %2,[bp+2]
  1883                              <2> 	mov word %3,[bp+4]
  1884                              <2> 	stkclose 0x06
  1885                              <2> %endmacro
  1886                              <2> 		
  1887                              <2> %macro __fltoint32 4
  1888                              <2> 	stkopen 0x08
  1889                              <2> 	mov word [bp+0],%1
  1890                              <2> 	mov word [bp+2],%2
  1891                              <2> 	call proc_fltoint32
  1892                              <2> 	push sp
  1893                              <2> 	pop bp
  1894                              <2> 	mov word %3,[bp+4]
  1895                              <2> 	mov word %4,[bp+6]
  1896                              <2> 	stkclose 0x08
  1897                              <2> %endmacro
  1898                              <2> 
  1899                              <2> %macro __int32tofl 4
  1900                              <2> 	stkopen 0x08
  1901                              <2> 	mov word [bp+0],%1
  1902                              <2> 	mov word [bp+2],%2
  1903                              <2> 	call proc_int32tofl
  1904                              <2> 	push sp
  1905                              <2> 	pop bp
  1906                              <2> 	mov word %3,[bp+4]
  1907                              <2> 	mov word %4,[bp+6]
  1908                              <2> 	stkclose 0x08
  1909                              <2> %endmacro	
  1910                              <2> 
  1911                              <2> %macro __flcmp 5
  1912                              <2> 	stkopen 0x09
  1913                              <2> 	mov word [bp+0],%1
  1914                              <2> 	mov word [bp+2],%2
  1915                              <2> 	mov word [bp+4],%3
  1916                              <2> 	mov word [bp+6],%4
  1917                              <2> 	call proc_flcmp
  1918                              <2> 	push sp
  1919                              <2> 	pop bp
  1920                              <2> 	mov byte %5, [bp+8]
  1921                              <2> 	stkclose 0x09
  1922                              <2> %endmacro
  1923                              <2> 	
  1924                              <2> %macro __flshl 1
  1925                              <2> 	stkopen 0x02
  1926                              <2> 	mov word [bp+0],%1
  1927                              <2> 	call proc_flshl
  1928                              <2> 	push sp
  1929                              <2> 	pop bp
  1930                              <2> 	mov word %1,[bp+0]
  1931                              <2> 	stkclose 0x02
  1932                              <2> %endmacro	
  1933                              <2> 
  1934                              <2> %macro __flshr 1
  1935                              <2> 	stkopen 0x02
  1936                              <2> 	mov word [bp+0],%1
  1937                              <2> 	call proc_flshr
  1938                              <2> 	push sp
  1939                              <2> 	pop bp
  1940                              <2> 	mov word %1,[bp+0]
  1941                              <2> 	stkclose 0x02
  1942                              <2> %endmacro	
  1943                              <2> 	
  1944                              <2> %macro __flinvsig 1
  1945                              <2> 	stkopen 0x02
  1946                              <2> 	mov word [bp+0],%1
  1947                              <2> 	call proc_flinvsig
  1948                              <2> 	push sp
  1949                              <2> 	pop bp
  1950                              <2> 	mov word %1, [bp+0]
  1951                              <2> 	stkclose 0x02
  1952                              <2> %endmacro
  1953                              <2> 
  1954                              <2> %macro __flsetsig 1
  1955                              <2> 	stkopen 0x04
  1956                              <2> 	mov word [bp+0],%1
  1957                              <2> 	mov word [bp+2],0x8000
  1958                              <2> 	call proc_flsetsig
  1959                              <2> 	push sp
  1960                              <2> 	pop bp
  1961                              <2> 	mov word %1, [bp+0]
  1962                              <2> 	stkclose 0x04
  1963                              <2> %endmacro	
  1964                              <2> 
  1965                              <2> %macro __flclearsig 1
  1966                              <2> 	stkopen 0x04
  1967                              <2> 	mov word [bp+0],%1
  1968                              <2> 	mov word [bp+2],0
  1969                              <2> 	call proc_flclrsig
  1970                              <2> 	push sp
  1971                              <2> 	pop bp
  1972                              <2> 	mov word %1, [bp+0]
  1973                              <2> 	stkclose 0x04
  1974                              <2> %endmacro		
  1975                              <2> 	
  1976                              <2> %macro __fladd 6
  1977                              <2> 	stkopen 0x0E
  1978                              <2> 	mov word [bp+0],%1
  1979                              <2> 	mov word [bp+2],%2
  1980                              <2> 	mov word [bp+4],%3
  1981                              <2> 	mov word [bp+6],%4
  1982                              <2> 	mov word [bp+0x0C],0
  1983                              <2> 	call proc_fladdorsub
  1984                              <2> 	push sp
  1985                              <2> 	pop bp
  1986                              <2> 	mov word %5,[bp+8]
  1987                              <2> 	mov word %6,[bp+0x0A]
  1988                              <2> 	stkclose 0x0E
  1989                              <2> %endmacro
  1990                              <2> 
  1991                              <2> %macro __flsub 6
  1992                              <2> 	stkopen 0x0E
  1993                              <2> 	mov word [bp+0],%1
  1994                              <2> 	mov word [bp+2],%2
  1995                              <2> 	mov word [bp+4],%3
  1996                              <2> 	mov word [bp+6],%4
  1997                              <2> 	mov word [bp+0x0C],0x8000
  1998                              <2> 	call proc_fladdorsub
  1999                              <2> 	push sp
  2000                              <2> 	pop bp
  2001                              <2> 	mov word %5,[bp+8]
  2002                              <2> 	mov word %6,[bp+0x0A]
  2003                              <2> 	stkclose 0x0E
  2004                              <2> %endmacro
  2005                              <2> 
  2006                              <2> %macro __flmul 6
  2007                              <2> 	stkopen 0x0E
  2008                              <2> 	mov word [bp+0],%1
  2009                              <2> 	mov word [bp+2],%2
  2010                              <2> 	mov word [bp+4],%3
  2011                              <2> 	mov word [bp+6],%4
  2012                              <2> 	call proc_flmul
  2013                              <2> 	push sp
  2014                              <2> 	pop bp
  2015                              <2> 	mov word %5,[bp+8]
  2016                              <2> 	mov word %6,[bp+0x0A]
  2017                              <2> 	stkclose 0x0E
  2018                              <2> %endmacro
  2019                              <2> 
  2020                              <2> %macro __fldiv 6
  2021                              <2> 	stkopen 0x0E
  2022                              <2> 	mov word [bp+0],%1
  2023                              <2> 	mov word [bp+2],%2
  2024                              <2> 	mov word [bp+4],%3
  2025                              <2> 	mov word [bp+6],%4
  2026                              <2> 	call proc_fldiv
  2027                              <2> 	push sp
  2028                              <2> 	pop bp
  2029                              <2> 	mov word %5,[bp+8]
  2030                              <2> 	mov word %6,[bp+0x0A]
  2031                              <2> 	stkclose 0x0E
  2032                              <2> %endmacro
  2033                              <2> 
  2034                              <2> %macro __validate 7
  2035                              <2> 	stkopen 0x0D
  2036                              <2> 	mov word [bp+0],%1
  2037                              <2> 	mov word [bp+2],%2
  2038                              <2> 	mov word [bp+4],%3
  2039                              <2> 	mov word [bp+6],%4
  2040                              <2> 	call proc__validate
  2041                              <2> 	push sp
  2042                              <2> 	pop bp
  2043                              <2> 	mov word %5,[bp+8]
  2044                              <2> 	mov word %6,[bp+0x0A]
  2045                              <2> 	mov byte %7,[bp+0x0C]
  2046                              <2> 	stkclose 0x0D
  2047                              <2> %endmacro
  2048                              <2> 
  2049                              <2> %macro __div_validate 7
  2050                              <2> 	stkopen 0x0D
  2051                              <2> 	mov word [bp+0],%1
  2052                              <2> 	mov word [bp+2],%2
  2053                              <2> 	mov word [bp+4],%3
  2054                              <2> 	mov word [bp+6],%4
  2055                              <2> 	call proc__div_validate
  2056                              <2> 	push sp
  2057                              <2> 	pop bp
  2058                              <2> 	mov word %5,[bp+8]
  2059                              <2> 	mov word %6,[bp+0x0A]
  2060                              <2> 	mov byte %7,[bp+0x0C]
  2061                              <2> 	stkclose 0x0D
  2062                              <2> %endmacro
  2063                              <2> 
  2064                              <2> %macro __mul_validate 5
  2065                              <2> 	stkopen 0x09
  2066                              <2> 	mov word [bp+0],%1
  2067                              <2> 	mov word [bp+2],%2
  2068                              <2> 	call proc__mul_validate
  2069                              <2> 	push sp
  2070                              <2> 	pop bp
  2071                              <2> 	mov word %3,[bp+4]
  2072                              <2> 	mov word %4,[bp+6]
  2073                              <2> 	mov byte %5,[bp+8]
  2074                              <2> 	stkclose 0x09
  2075                              <2> %endmacro
  2076                              <2> 
  2077                              <2> %macro __addorsub_validate 7
  2078                              <2> 	stkopen 0x0D
  2079                              <2> 	mov word [bp+0],%1
  2080                              <2> 	mov word [bp+2],%2
  2081                              <2> 	mov word [bp+4],%3
  2082                              <2> 	mov word [bp+6],%4
  2083                              <2> 	call proc__addorsub_validate
  2084                              <2> 	push sp
  2085                              <2> 	pop bp
  2086                              <2> 	mov word %5,[bp+8]
  2087                              <2> 	mov word %6,[bp+0x0A]
  2088                              <2> 	mov byte %7,[bp+0x0C]
  2089                              <2> 	stkclose 0x0D
  2090                              <2> %endmacro
  2091                              <2> 
  2092                              <2> %macro __cmp_validate 4
  2093                              <2> 	stkopen 0x06
  2094                              <2> 	mov word [bp+0],%1
  2095                              <2> 	mov word [bp+2],%2
  2096                              <2> 	call proc__cmp_validate
  2097                              <2> 	push sp
  2098                              <2> 	pop bp
  2099                              <2> 	mov byte %3, [bp+4]
  2100                              <2> 	mov byte %4, [bp+5]
  2101                              <2> 	stkclose 0x06
  2102                              <2> %endmacro
  2103                              <2> 
  2104                              <2> %macro __iaddorsub32 7
  2105                              <2> 	stkopen 0x0D
  2106                              <2> 	mov word [bp+0],%1
  2107                              <2> 	mov word [bp+2],%2
  2108                              <2> 	mov word [bp+4],%3
  2109                              <2> 	mov word [bp+6],%4
  2110                              <2> 	mov word [bp+0x0C], %7
  2111                              <2> 	call proc__iaddorsub32
  2112                              <2> 	push sp
  2113                              <2> 	pop bp
  2114                              <2> 	mov word %5,[bp+8]
  2115                              <2> 	mov word %6,[bp+0x0A]
  2116                              <2> 	stkclose 0x0D
  2117                              <2> %endmacro
  2118                              <2> 
  2119                              <2> %macro __fldiv32 6
  2120                              <2> 	stkopen 0x11
  2121                              <2> 	mov word [bp+0],%1
  2122                              <2> 	mov word [bp+2],%2
  2123                              <2> 	mov word [bp+4],%3
  2124                              <2> 	mov word [bp+6],%4
  2125                              <2> 	call proc__fldiv32
  2126                              <2> 	push sp
  2127                              <2> 	pop bp
  2128                              <2> 	mov word %5,[bp+8]
  2129                              <2> 	mov word %6,[bp+0x0A]
  2130                              <2> 	stkclose 0x11
  2131                              <2> %endmacro
  2132                              <2> 
  2133                              <2> %macro __mul32_64 8
  2134                              <2> 	stkopen 0x10
  2135                              <2> 	mov word [bp+0],%1
  2136                              <2> 	mov word [bp+2],%2
  2137                              <2> 	mov word [bp+4],%3
  2138                              <2> 	mov word [bp+6],%4
  2139                              <2> 	call proc__mul32_64
  2140                              <2> 	push sp
  2141                              <2> 	pop bp
  2142                              <2> 	mov word %5,[bp+8]
  2143                              <2> 	mov word %6,[bp+0x0A]
  2144                              <2> 	mov word %7,[bp+0x0C]
  2145                              <2> 	mov word %8,[bp+0x0E]
  2146                              <2> 	stkclose 0x10
  2147                              <2> %endmacro
  2148                              <2> 
  2149                              <2> %macro __normalize 3
  2150                              <2> 	stkopen 0x06
  2151                              <2> 	mov word [bp+0],%1
  2152                              <2> 	mov word [bp+2],%2
  2153                              <2> 	mov word [bp+4],%3
  2154                              <2> 	call proc__normalize
  2155                              <2> 	push sp
  2156                              <2> 	pop bp
  2157                              <2> 	mov word %1,[bp+0]
  2158                              <2> 	mov word %2,[bp+2]
  2159                              <2> 	stkclose 0x06
  2160                              <2> %endmacro
  2161                              <2> 
  2162                              <2> section .data
  2163                              <2> 
  2164                              <2> proc_fltoint16:
  2165 00000586 89E0                <2> 	mov ax,sp
  2166 00000588 89C5                <2> 	mov bp,ax
  2167                              <2> 	
  2168 0000058A 8B4602              <2> 	mov ax,[bp+2]
  2169 0000058D 8B5E04              <2> 	mov bx,[bp+4]
  2170                              <2> 	__fltoint32 ax, ax, ax, bx
  2171                              <3>  stkopen 0x08
  2172 00000590 83EC08              <4>  sub word sp, %1
  2173 00000593 54                  <4>  push sp
  2174 00000594 5D                  <4>  pop bp
  2175 00000595 894600              <3>  mov word [bp+0],%1
  2176 00000598 894602              <3>  mov word [bp+2],%2
  2177 0000059B E86A00              <3>  call proc_fltoint32
  2178 0000059E 54                  <3>  push sp
  2179 0000059F 5D                  <3>  pop bp
  2180 000005A0 8B4604              <3>  mov word %3,[bp+4]
  2181 000005A3 8B5E06              <3>  mov word %4,[bp+6]
  2182                              <3>  stkclose 0x08
  2183 000005A6 83C408              <4>  add word sp, %1
  2184                              <2> 	__int32to16 ax, bx, cx
  2185                              <3>  stkopen 0x06
  2186 000005A9 83EC06              <4>  sub word sp, %1
  2187 000005AC 54                  <4>  push sp
  2188 000005AD 5D                  <4>  pop bp
  2189 000005AE 894600              <3>  mov word [bp+0], %1
  2190 000005B1 895E02              <3>  mov word [bp+2], %2
  2191 000005B4 E871FA              <3>  call proc_int32to16
  2192 000005B7 54                  <3>  push sp
  2193 000005B8 5D                  <3>  pop bp
  2194 000005B9 8B4E04              <3>  mov word %3, [bp+4]
  2195                              <3>  stkclose 0x06
  2196 000005BC 83C406              <4>  add word sp, %1
  2197                              <2> 	
  2198 000005BF 89E0                <2> 	mov ax,sp
  2199 000005C1 89C5                <2> 	mov bp,ax
  2200 000005C3 894E06              <2> 	mov [bp+6],cx
  2201                              <2> 	
  2202 000005C6 C3                  <2> 	ret
  2203                              <2> 	
  2204                              <2> proc_int16tofl:
  2205 000005C7 89E0                <2> 	mov ax,sp
  2206 000005C9 89C5                <2> 	mov bp,ax
  2207                              <2> 	
  2208 000005CB 8B4602              <2> 	mov ax,[bp+2]
  2209                              <2> 	__int16to32 ax, ax, bx
  2210                              <3>  stkopen 0x06
  2211 000005CE 83EC06              <4>  sub word sp, %1
  2212 000005D1 54                  <4>  push sp
  2213 000005D2 5D                  <4>  pop bp
  2214 000005D3 894600              <3>  mov word [bp+0],%1
  2215 000005D6 E827FA              <3>  call proc_int16to32
  2216 000005D9 54                  <3>  push sp
  2217 000005DA 5D                  <3>  pop bp
  2218 000005DB 8B4602              <3>  mov word %2, [bp+2]
  2219 000005DE 8B5E04              <3>  mov word %3, [bp+4]
  2220                              <3>  stkclose 0x06
  2221 000005E1 83C406              <4>  add word sp, %1
  2222                              <2> 	__int32tofl ax, bx, cx, dx
  2223                              <3>  stkopen 0x08
  2224 000005E4 83EC08              <4>  sub word sp, %1
  2225 000005E7 54                  <4>  push sp
  2226 000005E8 5D                  <4>  pop bp
  2227 000005E9 894600              <3>  mov word [bp+0],%1
  2228 000005EC 895E02              <3>  mov word [bp+2],%2
  2229 000005EF E88B00              <3>  call proc_int32tofl
  2230 000005F2 54                  <3>  push sp
  2231 000005F3 5D                  <3>  pop bp
  2232 000005F4 8B4E04              <3>  mov word %3,[bp+4]
  2233 000005F7 8B5606              <3>  mov word %4,[bp+6]
  2234                              <3>  stkclose 0x08
  2235 000005FA 83C408              <4>  add word sp, %1
  2236                              <2> 	
  2237 000005FD 89E0                <2> 	mov ax,sp
  2238 000005FF 89C5                <2> 	mov bp,ax
  2239 00000601 894E04              <2> 	mov [bp+4],cx
  2240 00000604 895606              <2> 	mov [bp+6],dx
  2241                              <2> 
  2242 00000607 C3                  <2> 	ret
  2243                              <2> 
  2244                              <2> proc_fltoint32:
  2245 00000608 89E0                <2> 	mov ax,sp
  2246 0000060A 89C5                <2> 	mov bp,ax
  2247                              <2> 
  2248 0000060C 8B4602              <2> 	mov ax,[bp+2]
  2249 0000060F 8B5E04              <2> 	mov bx,[bp+4]
  2250 00000612 25FF7F              <2> 	and ax,0x7FFF
  2251 00000615 09D8                <2> 	or ax,bx
  2252 00000617 83F800              <2> 	cmp ax,0
  2253 0000061A 7510                <2> 	jnz .continue
  2254                              <2> 	.zero:
  2255 0000061C 8B4602              <2> 		mov ax,[bp+2]
  2256 0000061F 250080              <2> 		and ax,0x8000
  2257 00000622 894606              <2> 		mov word [bp+6],ax
  2258 00000625 C746080000          <2> 		mov word [bp+8],0
  2259 0000062A EB50                <2> 		jmp .done
  2260                              <2> 	.continue:
  2261                              <2> 	
  2262 0000062C 8B4E02              <2> 	mov cx,[bp+2]
  2263 0000062F D1E1                <2> 	shl cx,1
  2264 00000631 80ED7F              <2> 	sub ch,0x7F
  2265 00000634 80FD00              <2> 	cmp ch,0
  2266 00000637 7CE3                <2> 	jl .zero
  2267                              <2> 	
  2268 00000639 B117                <2> 	mov cl,23	
  2269 0000063B 38CD                <2> 	cmp ch,cl
  2270 0000063D 7302                <2> 	jae .endexp
  2271 0000063F 28E9                <2> 		sub cl,ch
  2272                              <2> 	.endexp:
  2273                              <2> 	
  2274 00000641 8B4602              <2> 	mov ax,[bp+2]
  2275 00000644 83E07F              <2> 	and ax,0x007F
  2276 00000647 0D8000              <2> 	or ax,0x0080
  2277                              <2> 	
  2278 0000064A 8B5E04              <2> 	mov bx,[bp+4]
  2279                              <2> 		
  2280                              <2> 	__shr32 ax, bx, cl
  2281                              <3>  stkopen 5
  2282 0000064D 83EC05              <4>  sub word sp, %1
  2283 00000650 54                  <4>  push sp
  2284 00000651 5D                  <4>  pop bp
  2285 00000652 894600              <3>  mov word [bp+0], %1
  2286 00000655 895E02              <3>  mov word [bp+2], %2
  2287 00000658 884E04              <3>  mov byte [bp+4], %3
  2288 0000065B E834FD              <3>  call proc_shr32
  2289 0000065E 54                  <3>  push sp
  2290 0000065F 5D                  <3>  pop bp
  2291 00000660 8B4600              <3>  mov word %1, [bp+0]
  2292 00000663 8B5E02              <3>  mov word %2, [bp+2]
  2293                              <3>  stkclose 5
  2294 00000666 83C405              <4>  add word sp, %1
  2295                              <2> 		
  2296 00000669 89E2                <2> 	mov dx,sp
  2297 0000066B 89D5                <2> 	mov bp,dx
  2298                              <2> 	
  2299 0000066D 8B4E02              <2> 	mov cx,[bp+2]
  2300 00000670 81E10080            <2> 	and cx,0x8000
  2301 00000674 01C8                <2> 	add ax,cx
  2302                              <2> 	 
  2303 00000676 894606              <2> 	mov [bp+6],ax
  2304 00000679 895E08              <2> 	mov [bp+8],bx
  2305                              <2> 	
  2306                              <2> 	.done:
  2307                              <2> 	
  2308 0000067C C3                  <2> 	ret
  2309                              <2> 	
  2310                              <2> proc_int32tofl:
  2311 0000067D 89E0                <2> 	mov ax,sp
  2312 0000067F 89C5                <2> 	mov bp,ax
  2313                              <2> 	
  2314 00000681 8B4602              <2> 	mov ax,[bp+2]
  2315 00000684 8B5E04              <2> 	mov bx,[bp+4]
  2316                              <2> 	
  2317 00000687 89C1                <2> 	mov cx,ax
  2318 00000689 81E1FF7F            <2> 	and cx,0x7FFF
  2319 0000068D 09D9                <2> 	or cx,bx
  2320 0000068F 83F900              <2> 	cmp cx,0
  2321 00000692 7511                <2> 	jnz .continue
  2322 00000694 8B4602              <2> 		mov ax,[bp+2]
  2323 00000697 250080              <2> 		and ax,0x8000
  2324 0000069A 894606              <2> 		mov word [bp+6],ax
  2325 0000069D C746080000          <2> 		mov word [bp+8],0
  2326 000006A2 E99100              <2> 		jmp .done
  2327                              <2> 	.continue:
  2328                              <2> 	
  2329 000006A5 83E07F              <2> 	and ax,0x007F	
  2330                              <2> 	
  2331 000006A8 894606              <2> 	mov [bp+6],ax
  2332 000006AB 895E08              <2> 	mov [bp+8],bx	
  2333                              <2> 		
  2334                              <2> 	__lzbitcount32 ax, bx, ch		
  2335 000006AE 53                  <3>  push %2
  2336                              <3>  __lzbitcount16 %1, cl
  2337                              <4>  stkopen 3
  2338 000006AF 83EC03              <5>  sub word sp, %1
  2339 000006B2 54                  <5>  push sp
  2340 000006B3 5D                  <5>  pop bp
  2341 000006B4 894600              <4>  mov word [bp+0], %1
  2342 000006B7 E85DFD              <4>  call proc__lzbitcount16
  2343 000006BA 54                  <4>  push sp
  2344 000006BB 5D                  <4>  pop bp
  2345 000006BC 8A4E02              <4>  mov byte %2, [bp+2]
  2346                              <4>  stkclose 3
  2347 000006BF 83C403              <5>  add word sp, %1
  2348 000006C2 58                  <3>  pop ax
  2349 000006C3 80F910              <3>  cmp cl,16
  2350 000006C6 7217                <3>  jb .end
  2351 000006C8 51                  <3>  push cx
  2352                              <3>  __lzbitcount16 ax, al
  2353                              <4>  stkopen 3
  2354 000006C9 83EC03              <5>  sub word sp, %1
  2355 000006CC 54                  <5>  push sp
  2356 000006CD 5D                  <5>  pop bp
  2357 000006CE 894600              <4>  mov word [bp+0], %1
  2358 000006D1 E843FD              <4>  call proc__lzbitcount16
  2359 000006D4 54                  <4>  push sp
  2360 000006D5 5D                  <4>  pop bp
  2361 000006D6 8A4602              <4>  mov byte %2, [bp+2]
  2362                              <4>  stkclose 3
  2363 000006D9 83C403              <5>  add word sp, %1
  2364 000006DC 59                  <3>  pop cx
  2365 000006DD 00C1                <3>  add cl,al
  2366                              <3>  .end:
  2367 000006DF 88CD                <3>  mov byte %3, cl
  2368 000006E1 B120                <2> 	mov cl,32
  2369 000006E3 28E9                <2> 	sub cl,ch
  2370                              <2> 	
  2371 000006E5 80F918              <2> 	cmp cl,24
  2372 000006E8 732C                <2> 	jae .endmantissa
  2373                              <2> 	
  2374 000006EA B218                <2> 	mov dl,24
  2375 000006EC 28CA                <2> 	sub dl,cl				
  2376                              <2> 	
  2377 000006EE 89E0                <2> 	mov ax,sp
  2378 000006F0 89C5                <2> 	mov bp,ax
  2379 000006F2 8B4606              <2> 	mov ax,[bp+6]
  2380 000006F5 8B5E08              <2> 	mov bx,[bp+8]
  2381                              <2> 	
  2382 000006F8 51                  <2> 	push cx	
  2383                              <2> 	__shl32 ax, bx, dl	
  2384                              <3>  stkopen 5
  2385 000006F9 83EC05              <4>  sub word sp, %1
  2386 000006FC 54                  <4>  push sp
  2387 000006FD 5D                  <4>  pop bp
  2388 000006FE 894600              <3>  mov word [bp+0], %1
  2389 00000701 895E02              <3>  mov word [bp+2], %2
  2390 00000704 885604              <3>  mov byte [bp+4], %3
  2391 00000707 E841FC              <3>  call proc_shl32
  2392 0000070A 54                  <3>  push sp
  2393 0000070B 5D                  <3>  pop bp
  2394 0000070C 8B4600              <3>  mov word %1, [bp+0]
  2395 0000070F 8B5E02              <3>  mov word %2, [bp+2]
  2396                              <3>  stkclose 5
  2397 00000712 83C405              <4>  add word sp, %1
  2398 00000715 59                  <2> 	pop cx
  2399                              <2> 	
  2400                              <2> 	.endmantissa:
  2401                              <2> 	
  2402 00000716 83E07F              <2> 	and ax,0x007F
  2403                              <2> 		
  2404 00000719 80C17E              <2> 	add cl,0x7E
  2405 0000071C C1E108              <2> 	shl cx,8
  2406 0000071F D1E9                <2> 	shr cx,1
  2407 00000721 01C8                <2> 	add ax,cx
  2408                              <2> 	
  2409 00000723 89E1                <2> 	mov cx,sp
  2410 00000725 89CD                <2> 	mov bp,cx
  2411                              <2> 	
  2412 00000727 8B4E02              <2> 	mov cx,[bp+2]
  2413 0000072A 81E10080            <2> 	and cx,0x8000	
  2414 0000072E 01C8                <2> 	add ax,cx
  2415                              <2> 		
  2416 00000730 894606              <2> 	mov [bp+6],ax
  2417 00000733 895E08              <2> 	mov [bp+8],bx
  2418                              <2> 	
  2419                              <2> 	.done:		
  2420                              <2> 	
  2421 00000736 C3                  <2> 	ret
  2422                              <2> 	
  2423                              <2> proc_flcmp:
  2424 00000737 89E0                <2> 	mov ax,sp
  2425 00000739 89C5                <2> 	mov bp,ax		
  2426                              <2> 	
  2427 0000073B 8B4602              <2> 	mov ax,[bp+2]
  2428 0000073E 8B5E06              <2> 	mov bx,[bp+6]
  2429 00000741 55                  <2> 	push bp
  2430                              <2> 	__cmp_validate ax, bx, cl, dl
  2431                              <3>  stkopen 0x06
  2432 00000742 83EC06              <4>  sub word sp, %1
  2433 00000745 54                  <4>  push sp
  2434 00000746 5D                  <4>  pop bp
  2435 00000747 894600              <3>  mov word [bp+0],%1
  2436 0000074A 895E02              <3>  mov word [bp+2],%2
  2437 0000074D E84E09              <3>  call proc__cmp_validate
  2438 00000750 54                  <3>  push sp
  2439 00000751 5D                  <3>  pop bp
  2440 00000752 8A4E04              <3>  mov byte %3, [bp+4]
  2441 00000755 8A5605              <3>  mov byte %4, [bp+5]
  2442                              <3>  stkclose 0x06
  2443 00000758 83C406              <4>  add word sp, %1
  2444 0000075B 5D                  <2> 	pop bp
  2445 0000075C 80FA00              <2> 	cmp dl,0
  2446 0000075F 7505                <2> 	jnz .continue
  2447 00000761 884E0A              <2> 		mov byte [bp+0x0A], cl
  2448 00000764 EB5E                <2> 		jmp .done		
  2449                              <2> 	.continue:
  2450                              <2> 			
  2451 00000766 8B4602              <2> 	mov ax,[bp+2]
  2452 00000769 8B5E06              <2> 	mov bx,[bp+6]
  2453 0000076C 250080              <2> 	and ax,0x8000
  2454 0000076F 81E30080            <2> 	and bx,0x8000	
  2455 00000773 39D8                <2> 	cmp ax,bx
  2456 00000775 723C                <2> 	jb .above
  2457 00000777 773E                <2> 	ja .below
  2458                              <2> 	
  2459 00000779 8B4602              <2> 	mov ax,[bp+2]
  2460 0000077C 8B5E06              <2> 	mov bx,[bp+6]
  2461 0000077F D1E0                <2> 	shl ax,1
  2462 00000781 D1E3                <2> 	shl bx,1
  2463 00000783 38FC                <2> 	cmp ah,bh
  2464 00000785 772C                <2> 	ja .above
  2465 00000787 722E                <2> 	jb .below
  2466                              <2> 	
  2467 00000789 8B4602              <2> 	mov ax,[bp+2]
  2468 0000078C 8B5E04              <2> 	mov bx,[bp+4]
  2469 0000078F 8B4E06              <2> 	mov cx,[bp+6]
  2470 00000792 8B5608              <2> 	mov dx,[bp+8]
  2471                              <2> 	
  2472                              <2> 	__cmp32 ax, bx, cx, dx, cl
  2473                              <3>  stkopen 9
  2474 00000795 83EC09              <4>  sub word sp, %1
  2475 00000798 54                  <4>  push sp
  2476 00000799 5D                  <4>  pop bp
  2477 0000079A 894600              <3>  mov word [bp+0], %1
  2478 0000079D 895E02              <3>  mov word [bp+2], %2
  2479 000007A0 894E04              <3>  mov word [bp+4], %3
  2480 000007A3 895606              <3>  mov word [bp+6], %4
  2481 000007A6 E877FB              <3>  call proc_cmp32
  2482 000007A9 54                  <3>  push sp
  2483 000007AA 5D                  <3>  pop bp
  2484 000007AB 8A4E08              <3>  mov byte %5, [bp+8]
  2485                              <3>  stkclose 9
  2486 000007AE 83C409              <4>  add word sp, %1
  2487 000007B1 EB0A                <2> 	jmp .endcmp
  2488                              <2> 		
  2489                              <2> 	.above:
  2490 000007B3 B101                <2> 		mov cl, 1
  2491 000007B5 EB06                <2> 		jmp .endcmp
  2492                              <2> 	.below:
  2493 000007B7 B1FF                <2> 		mov cl, -1
  2494 000007B9 EB02                <2> 		jmp .endcmp
  2495                              <2> 	.equal:	
  2496 000007BB B100                <2> 		mov cl, 0	
  2497                              <2> 	.endcmp:
  2498                              <2> 	
  2499 000007BD 89E0                <2> 	mov ax,sp
  2500 000007BF 89C5                <2> 	mov bp,ax
  2501 000007C1 884E0A              <2> 	mov byte [bp+0x0A], cl
  2502                              <2> 	
  2503                              <2> 	.done:
  2504                              <2> 					
  2505 000007C4 C3                  <2> 	ret
  2506                              <2> 
  2507                              <2> proc_flshl:
  2508 000007C5 89E0                <2> 	mov ax,sp
  2509 000007C7 89C5                <2> 	mov bp,ax
  2510                              <2> 	
  2511 000007C9 8B4602              <2> 	mov ax,[bp+2]
  2512 000007CC 25807F              <2> 	and ax,0x7F80
  2513 000007CF D1E0                <2> 	shl ax,1
  2514 000007D1 FEC4                <2> 	inc ah	
  2515 000007D3 D1E8                <2> 	shr ax,1
  2516                              <2> 	
  2517 000007D5 8B5E02              <2> 	mov bx,[bp+2]
  2518 000007D8 81E37F80            <2> 	and bx,0x807F
  2519 000007DC 01C3                <2> 	add bx,ax
  2520                              <2> 	
  2521 000007DE 895E02              <2> 	mov [bp+2],bx		
  2522                              <2> 	
  2523 000007E1 C3                  <2> 	ret
  2524                              <2> 
  2525                              <2> proc_flshr:
  2526 000007E2 89E0                <2> 	mov ax,sp
  2527 000007E4 89C5                <2> 	mov bp,ax
  2528                              <2> 	
  2529 000007E6 8B4602              <2> 	mov ax,[bp+2]
  2530 000007E9 25807F              <2> 	and ax,0x7F80
  2531 000007EC D1E0                <2> 	shl ax,1
  2532 000007EE FECC                <2> 	dec ah	
  2533 000007F0 D1E8                <2> 	shr ax,1
  2534                              <2> 	
  2535 000007F2 8B5E02              <2> 	mov bx,[bp+2]
  2536 000007F5 81E37F80            <2> 	and bx,0x807F
  2537 000007F9 01C3                <2> 	add bx,ax
  2538                              <2> 	
  2539 000007FB 895E02              <2> 	mov [bp+2],bx	
  2540                              <2> 	
  2541 000007FE C3                  <2> 	ret
  2542                              <2> 
  2543                              <2> proc_fldiv:
  2544 000007FF 89E0                <2> 	mov ax,sp
  2545 00000801 89C5                <2> 	mov bp,ax
  2546                              <2> 				
  2547                              <2> 	; sinal
  2548                              <2> 	
  2549 00000803 8B4602              <2> 	mov ax,[bp+2]
  2550 00000806 8B5E06              <2> 	mov bx,[bp+6]
  2551 00000809 250080              <2> 	and ax,0x8000
  2552 0000080C 81E30080            <2> 	and bx,0x8000
  2553 00000810 31D8                <2> 	xor ax,bx
  2554 00000812 89460A              <2> 	mov word [bp+0x0A],ax
  2555                              <2> 		
  2556                              <2> 	; sinal calculado e setado
  2557                              <2> 
  2558                              <2> 	; valores especiais
  2559                              <2> 	
  2560 00000815 8B4602              <2> 	mov ax,[bp+2]
  2561 00000818 8B5E04              <2> 	mov bx,[bp+4]
  2562 0000081B 8B4E06              <2> 	mov cx,[bp+6]
  2563 0000081E 8B5608              <2> 	mov dx,[bp+8]
  2564                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  2565                              <3>  stkopen 0x0D
  2566 00000821 83EC0D              <4>  sub word sp, %1
  2567 00000824 54                  <4>  push sp
  2568 00000825 5D                  <4>  pop bp
  2569 00000826 894600              <3>  mov word [bp+0],%1
  2570 00000829 895E02              <3>  mov word [bp+2],%2
  2571 0000082C 894E04              <3>  mov word [bp+4],%3
  2572 0000082F 895606              <3>  mov word [bp+6],%4
  2573 00000832 E81907              <3>  call proc__validate
  2574 00000835 54                  <3>  push sp
  2575 00000836 5D                  <3>  pop bp
  2576 00000837 8B4608              <3>  mov word %5,[bp+8]
  2577 0000083A 8B5E0A              <3>  mov word %6,[bp+0x0A]
  2578 0000083D 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  2579                              <3>  stkclose 0x0D
  2580 00000840 83C40D              <4>  add word sp, %1
  2581 00000843 80F900              <2> 	cmp cl,0
  2582 00000846 750D                <2> 	jnz .continue
  2583 00000848 89E2                <2> 		mov dx,sp
  2584 0000084A 89D5                <2> 		mov bp,dx
  2585 0000084C 01460A              <2> 		add word [bp+0x0A],ax
  2586 0000084F 895E0C              <2> 		mov word [bp+0x0C],bx						
  2587 00000852 E9C800              <2> 		jmp .done	
  2588                              <2> 	.continue:
  2589                              <2> 	
  2590 00000855 89E0                <2> 	mov ax,sp
  2591 00000857 89C5                <2> 	mov bp,ax
  2592 00000859 8B4602              <2> 	mov ax,[bp+2]
  2593 0000085C 8B5E04              <2> 	mov bx,[bp+4]
  2594 0000085F 8B4E06              <2> 	mov cx,[bp+6]
  2595 00000862 8B5608              <2> 	mov dx,[bp+8]
  2596                              <2> 	__div_validate ax, bx, cx, dx, ax, bx, cl
  2597                              <3>  stkopen 0x0D
  2598 00000865 83EC0D              <4>  sub word sp, %1
  2599 00000868 54                  <4>  push sp
  2600 00000869 5D                  <4>  pop bp
  2601 0000086A 894600              <3>  mov word [bp+0],%1
  2602 0000086D 895E02              <3>  mov word [bp+2],%2
  2603 00000870 894E04              <3>  mov word [bp+4],%3
  2604 00000873 895606              <3>  mov word [bp+6],%4
  2605 00000876 E83C07              <3>  call proc__div_validate
  2606 00000879 54                  <3>  push sp
  2607 0000087A 5D                  <3>  pop bp
  2608 0000087B 8B4608              <3>  mov word %5,[bp+8]
  2609 0000087E 8B5E0A              <3>  mov word %6,[bp+0x0A]
  2610 00000881 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  2611                              <3>  stkclose 0x0D
  2612 00000884 83C40D              <4>  add word sp, %1
  2613 00000887 80F900              <2> 	cmp cl,0
  2614 0000088A 750D                <2> 	jnz .continue2
  2615 0000088C 89E2                <2> 		mov dx,sp
  2616 0000088E 89D5                <2> 		mov bp,dx
  2617 00000890 01460A              <2> 		add word [bp+0x0A],ax
  2618 00000893 895E0C              <2> 		mov word [bp+0x0C],bx				
  2619 00000896 E98400              <2> 		jmp .done	
  2620                              <2> 	.continue2:
  2621                              <2> 	; valores especiais tratados
  2622                              <2> 			
  2623                              <2> 	; expoente parcial
  2624                              <2> 
  2625 00000899 89E0                <2> 	mov ax,sp
  2626 0000089B 89C5                <2> 	mov bp,ax
  2627 0000089D 8B4602              <2> 	mov ax,[bp+2]
  2628 000008A0 8B5E06              <2> 	mov bx,[bp+6]
  2629 000008A3 25807F              <2> 	and ax,0x7F80
  2630 000008A6 81E3807F            <2> 	and bx,0x7F80
  2631 000008AA D1E0                <2> 	shl ax,1
  2632 000008AC D1E3                <2> 	shl bx,1		
  2633                              <2> 			
  2634 000008AE 28FC                <2> 	sub ah,bh		
  2635 000008B0 80C47F              <2> 	add ah,0x7F
  2636                              <2> 	
  2637 000008B3 50                  <2> 	push ax
  2638                              <2> 		
  2639                              <2> 	; expoente parcial calculado
  2640                              <2> 	
  2641                              <2> 	; mantissa
  2642                              <2> 
  2643 000008B4 8B4602              <2> 	mov ax,[bp+2]
  2644 000008B7 8B5E04              <2> 	mov bx,[bp+4]
  2645 000008BA 8B4E06              <2> 	mov cx,[bp+6]
  2646 000008BD 8B5608              <2> 	mov dx,[bp+8]
  2647 000008C0 83E07F              <2> 	and ax,0x007F
  2648 000008C3 83E17F              <2> 	and cx,0x007F
  2649 000008C6 0D8000              <2> 	or ax,0x0080
  2650 000008C9 81C98000            <2> 	or cx,0x0080
  2651                              <2> 	
  2652                              <2> 	__fldiv32 ax, bx, cx, dx, cx, dx
  2653                              <3>  stkopen 0x11
  2654 000008CD 83EC11              <4>  sub word sp, %1
  2655 000008D0 54                  <4>  push sp
  2656 000008D1 5D                  <4>  pop bp
  2657 000008D2 894600              <3>  mov word [bp+0],%1
  2658 000008D5 895E02              <3>  mov word [bp+2],%2
  2659 000008D8 894E04              <3>  mov word [bp+4],%3
  2660 000008DB 895606              <3>  mov word [bp+6],%4
  2661 000008DE E87505              <3>  call proc__fldiv32
  2662 000008E1 54                  <3>  push sp
  2663 000008E2 5D                  <3>  pop bp
  2664 000008E3 8B4E08              <3>  mov word %5,[bp+8]
  2665 000008E6 8B560A              <3>  mov word %6,[bp+0x0A]
  2666                              <3>  stkclose 0x11
  2667 000008E9 83C411              <4>  add word sp, %1
  2668                              <2> 		
  2669 000008EC 89E0                <2> 	mov ax,sp
  2670 000008EE 89C5                <2> 	mov bp,ax
  2671 000008F0 83C502              <2> 	add bp,2
  2672                              <2> 	
  2673 000008F3 034E0A              <2> 	add cx,[bp+0x0A]
  2674                              <2> 			
  2675 000008F6 58                  <2> 	pop ax	
  2676                              <2> 	__normalize cx, dx, ax
  2677                              <3>  stkopen 0x06
  2678 000008F7 83EC06              <4>  sub word sp, %1
  2679 000008FA 54                  <4>  push sp
  2680 000008FB 5D                  <4>  pop bp
  2681 000008FC 894E00              <3>  mov word [bp+0],%1
  2682 000008FF 895602              <3>  mov word [bp+2],%2
  2683 00000902 894604              <3>  mov word [bp+4],%3
  2684 00000905 E8B303              <3>  call proc__normalize
  2685 00000908 54                  <3>  push sp
  2686 00000909 5D                  <3>  pop bp
  2687 0000090A 8B4E00              <3>  mov word %1,[bp+0]
  2688 0000090D 8B5602              <3>  mov word %2,[bp+2]
  2689                              <3>  stkclose 0x06
  2690 00000910 83C406              <4>  add word sp, %1
  2691                              <2> 	
  2692 00000913 89E0                <2> 	mov ax,sp
  2693 00000915 89C5                <2> 	mov bp,ax
  2694 00000917 894E0A              <2> 	mov [bp+0x0A],cx
  2695 0000091A 89560C              <2> 	mov [bp+0x0C],dx
  2696                              <2> 	
  2697                              <2> 	.done:
  2698                              <2> 			
  2699 0000091D C3                  <2> 	ret
  2700                              <2> 
  2701                              <2> proc_flmul:
  2702 0000091E 89E0                <2> 	mov ax,sp
  2703 00000920 89C5                <2> 	mov bp,ax
  2704                              <2> 	
  2705                              <2> 	; sinal
  2706                              <2> 	
  2707 00000922 8B4602              <2> 	mov ax,[bp+2]
  2708 00000925 8B5E06              <2> 	mov bx,[bp+6]
  2709 00000928 250080              <2> 	and ax,0x8000
  2710 0000092B 81E30080            <2> 	and bx,0x8000
  2711 0000092F 31D8                <2> 	xor ax,bx
  2712 00000931 89460A              <2> 	mov word [bp+0x0A],ax
  2713                              <2> 	
  2714                              <2> 	; sinal calculado e setado
  2715                              <2> 
  2716                              <2> 	; valores especiais
  2717                              <2> 
  2718 00000934 8B4602              <2> 	mov ax,[bp+2]
  2719 00000937 8B5E04              <2> 	mov bx,[bp+4]
  2720 0000093A 8B4E06              <2> 	mov cx,[bp+6]
  2721 0000093D 8B5608              <2> 	mov dx,[bp+8]
  2722                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  2723                              <3>  stkopen 0x0D
  2724 00000940 83EC0D              <4>  sub word sp, %1
  2725 00000943 54                  <4>  push sp
  2726 00000944 5D                  <4>  pop bp
  2727 00000945 894600              <3>  mov word [bp+0],%1
  2728 00000948 895E02              <3>  mov word [bp+2],%2
  2729 0000094B 894E04              <3>  mov word [bp+4],%3
  2730 0000094E 895606              <3>  mov word [bp+6],%4
  2731 00000951 E8FA05              <3>  call proc__validate
  2732 00000954 54                  <3>  push sp
  2733 00000955 5D                  <3>  pop bp
  2734 00000956 8B4608              <3>  mov word %5,[bp+8]
  2735 00000959 8B5E0A              <3>  mov word %6,[bp+0x0A]
  2736 0000095C 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  2737                              <3>  stkclose 0x0D
  2738 0000095F 83C40D              <4>  add word sp, %1
  2739 00000962 80F900              <2> 	cmp cl,0
  2740 00000965 750D                <2> 	jnz .continue
  2741 00000967 89E2                <2> 		mov dx,sp
  2742 00000969 89D5                <2> 		mov bp,dx
  2743 0000096B 01460A              <2> 		add word [bp+0x0A],ax
  2744 0000096E 895E0C              <2> 		mov word [bp+0x0C],bx						
  2745 00000971 E95501              <2> 		jmp .done	
  2746                              <2> 	.continue:
  2747                              <2> 
  2748 00000974 89E0                <2> 	mov ax,sp
  2749 00000976 89C5                <2> 	mov bp,ax
  2750 00000978 8B4602              <2> 	mov ax,[bp+2]
  2751 0000097B 8B4E06              <2> 	mov cx,[bp+6]
  2752                              <2> 	__mul_validate ax, cx, ax, bx, cl
  2753                              <3>  stkopen 0x09
  2754 0000097E 83EC09              <4>  sub word sp, %1
  2755 00000981 54                  <4>  push sp
  2756 00000982 5D                  <4>  pop bp
  2757 00000983 894600              <3>  mov word [bp+0],%1
  2758 00000986 894E02              <3>  mov word [bp+2],%2
  2759 00000989 E88306              <3>  call proc__mul_validate
  2760 0000098C 54                  <3>  push sp
  2761 0000098D 5D                  <3>  pop bp
  2762 0000098E 8B4604              <3>  mov word %3,[bp+4]
  2763 00000991 8B5E06              <3>  mov word %4,[bp+6]
  2764 00000994 8A4E08              <3>  mov byte %5,[bp+8]
  2765                              <3>  stkclose 0x09
  2766 00000997 83C409              <4>  add word sp, %1
  2767 0000099A 80F900              <2> 	cmp cl,0
  2768 0000099D 750D                <2> 	jnz .continue2
  2769 0000099F 89E2                <2> 		mov dx,sp
  2770 000009A1 89D5                <2> 		mov bp,dx
  2771 000009A3 01460A              <2> 		add word [bp+0x0A],ax
  2772 000009A6 895E0C              <2> 		mov word [bp+0x0C],bx				
  2773 000009A9 E91D01              <2> 		jmp .done	
  2774                              <2> 	.continue2:
  2775                              <2> 	; valores especiais tratados
  2776                              <2> 		
  2777                              <2> 	; expoente parcial
  2778                              <2> 
  2779 000009AC 89E0                <2> 	mov ax,sp
  2780 000009AE 89C5                <2> 	mov bp,ax
  2781 000009B0 8B4602              <2> 	mov ax,[bp+2]
  2782 000009B3 8B5E06              <2> 	mov bx,[bp+6]
  2783 000009B6 25807F              <2> 	and ax,0x7F80
  2784 000009B9 81E3807F            <2> 	and bx,0x7F80
  2785 000009BD D1E0                <2> 	shl ax,1
  2786 000009BF D1E3                <2> 	shl bx,1		
  2787                              <2> 			
  2788 000009C1 80EC7F              <2> 	sub ah,0x7F
  2789 000009C4 80EF7F              <2> 	sub bh,0x7F
  2790                              <2> 				
  2791 000009C7 00FC                <2> 	add ah,bh
  2792 000009C9 80C47F              <2> 	add ah,0x7F
  2793                              <2> 	
  2794 000009CC 50                  <2> 	push ax
  2795                              <2> 	
  2796                              <2> 	; expoente parcial calculado	
  2797                              <2> 	
  2798                              <2> 	; mantissa
  2799                              <2> 	
  2800 000009CD 8B4602              <2> 	mov ax,[bp+2]
  2801 000009D0 8B5E04              <2> 	mov bx,[bp+4]
  2802 000009D3 8B4E06              <2> 	mov cx,[bp+6]
  2803 000009D6 8B5608              <2> 	mov dx,[bp+8]	
  2804                              <2> 	
  2805 000009D9 83E07F              <2> 	and ax, 0x007F
  2806 000009DC 83E17F              <2> 	and cx, 0x007F
  2807 000009DF 0D8000              <2> 	or ax, 0x0080
  2808 000009E2 81C98000            <2> 	or cx, 0x0080
  2809                              <2> 		
  2810                              <2> 	__mul32_64 ax, bx, cx, dx, ax, bx, cx, dx
  2811                              <3>  stkopen 0x10
  2812 000009E6 83EC10              <4>  sub word sp, %1
  2813 000009E9 54                  <4>  push sp
  2814 000009EA 5D                  <4>  pop bp
  2815 000009EB 894600              <3>  mov word [bp+0],%1
  2816 000009EE 895E02              <3>  mov word [bp+2],%2
  2817 000009F1 894E04              <3>  mov word [bp+4],%3
  2818 000009F4 895606              <3>  mov word [bp+6],%4
  2819 000009F7 E81104              <3>  call proc__mul32_64
  2820 000009FA 54                  <3>  push sp
  2821 000009FB 5D                  <3>  pop bp
  2822 000009FC 8B4608              <3>  mov word %5,[bp+8]
  2823 000009FF 8B5E0A              <3>  mov word %6,[bp+0x0A]
  2824 00000A02 8B4E0C              <3>  mov word %7,[bp+0x0C]
  2825 00000A05 8B560E              <3>  mov word %8,[bp+0x0E]
  2826                              <3>  stkclose 0x10
  2827 00000A08 83C410              <4>  add word sp, %1
  2828                              <2> 	
  2829 00000A0B 51                  <2> 	push cx
  2830                              <2> 	__shl32 ax, bx, 8
  2831                              <3>  stkopen 5
  2832 00000A0C 83EC05              <4>  sub word sp, %1
  2833 00000A0F 54                  <4>  push sp
  2834 00000A10 5D                  <4>  pop bp
  2835 00000A11 894600              <3>  mov word [bp+0], %1
  2836 00000A14 895E02              <3>  mov word [bp+2], %2
  2837 00000A17 C6460408            <3>  mov byte [bp+4], %3
  2838 00000A1B E82DF9              <3>  call proc_shl32
  2839 00000A1E 54                  <3>  push sp
  2840 00000A1F 5D                  <3>  pop bp
  2841 00000A20 8B4600              <3>  mov word %1, [bp+0]
  2842 00000A23 8B5E02              <3>  mov word %2, [bp+2]
  2843                              <3>  stkclose 5
  2844 00000A26 83C405              <4>  add word sp, %1
  2845 00000A29 59                  <2> 	pop cx
  2846 00000A2A 88EB                <2> 	mov bl,ch
  2847                              <2> 								
  2848 00000A2C 50                  <2> 	push ax
  2849 00000A2D 53                  <2> 	push bx
  2850                              <2> 	__lzbitcount32 ax, bx, cl
  2851 00000A2E 53                  <3>  push %2
  2852                              <3>  __lzbitcount16 %1, cl
  2853                              <4>  stkopen 3
  2854 00000A2F 83EC03              <5>  sub word sp, %1
  2855 00000A32 54                  <5>  push sp
  2856 00000A33 5D                  <5>  pop bp
  2857 00000A34 894600              <4>  mov word [bp+0], %1
  2858 00000A37 E8DDF9              <4>  call proc__lzbitcount16
  2859 00000A3A 54                  <4>  push sp
  2860 00000A3B 5D                  <4>  pop bp
  2861 00000A3C 8A4E02              <4>  mov byte %2, [bp+2]
  2862                              <4>  stkclose 3
  2863 00000A3F 83C403              <5>  add word sp, %1
  2864 00000A42 58                  <3>  pop ax
  2865 00000A43 80F910              <3>  cmp cl,16
  2866 00000A46 7217                <3>  jb .end
  2867 00000A48 51                  <3>  push cx
  2868                              <3>  __lzbitcount16 ax, al
  2869                              <4>  stkopen 3
  2870 00000A49 83EC03              <5>  sub word sp, %1
  2871 00000A4C 54                  <5>  push sp
  2872 00000A4D 5D                  <5>  pop bp
  2873 00000A4E 894600              <4>  mov word [bp+0], %1
  2874 00000A51 E8C3F9              <4>  call proc__lzbitcount16
  2875 00000A54 54                  <4>  push sp
  2876 00000A55 5D                  <4>  pop bp
  2877 00000A56 8A4602              <4>  mov byte %2, [bp+2]
  2878                              <4>  stkclose 3
  2879 00000A59 83C403              <5>  add word sp, %1
  2880 00000A5C 59                  <3>  pop cx
  2881 00000A5D 00C1                <3>  add cl,al
  2882                              <3>  .end:
  2883 00000A5F 88C9                <3>  mov byte %3, cl
  2884 00000A61 5B                  <2> 	pop bx
  2885 00000A62 58                  <2> 	pop ax
  2886                              <2> 		
  2887 00000A63 80E908              <2> 	sub cl,8	
  2888 00000A66 80F908              <2> 	cmp cl,8
  2889 00000A69 7402                <2> 	je .equal
  2890 00000A6B 7F06                <2> 	jg .great
  2891                              <2> 	.equal:	
  2892 00000A6D 5A                  <2> 		pop dx
  2893 00000A6E FEC6                <2> 		inc dh
  2894 00000A70 52                  <2> 		push dx
  2895 00000A71 EB1C                <2> 		jmp .endcmp
  2896                              <2> 	.great:
  2897                              <2> 		__shl32 ax, bx, cl
  2898                              <3>  stkopen 5
  2899 00000A73 83EC05              <4>  sub word sp, %1
  2900 00000A76 54                  <4>  push sp
  2901 00000A77 5D                  <4>  pop bp
  2902 00000A78 894600              <3>  mov word [bp+0], %1
  2903 00000A7B 895E02              <3>  mov word [bp+2], %2
  2904 00000A7E 884E04              <3>  mov byte [bp+4], %3
  2905 00000A81 E8C7F8              <3>  call proc_shl32
  2906 00000A84 54                  <3>  push sp
  2907 00000A85 5D                  <3>  pop bp
  2908 00000A86 8B4600              <3>  mov word %1, [bp+0]
  2909 00000A89 8B5E02              <3>  mov word %2, [bp+2]
  2910                              <3>  stkclose 5
  2911 00000A8C 83C405              <4>  add word sp, %1
  2912                              <2> 	.endcmp:
  2913                              <2> 	
  2914 00000A8F 89E1                <2> 	mov cx,sp
  2915 00000A91 89CD                <2> 	mov bp,cx
  2916 00000A93 83C502              <2> 	add bp,2
  2917                              <2> 	
  2918 00000A96 01460A              <2> 	add word [bp+0x0A],ax
  2919 00000A99 895E0C              <2> 	mov word [bp+0x0C],bx
  2920                              <2> 	
  2921                              <2> 	; mantissa setada e expoente calculado
  2922                              <2> 				
  2923 00000A9C 8B4E0A              <2> 	mov cx,[bp+0x0A]
  2924 00000A9F 8B560C              <2> 	mov dx,[bp+0x0C]
  2925                              <2> 	
  2926 00000AA2 58                  <2> 	pop ax						
  2927                              <2> 	__normalize cx, dx, ax	; normaliza, preserva sinal e seta expoente	
  2928                              <3>  stkopen 0x06
  2929 00000AA3 83EC06              <4>  sub word sp, %1
  2930 00000AA6 54                  <4>  push sp
  2931 00000AA7 5D                  <4>  pop bp
  2932 00000AA8 894E00              <3>  mov word [bp+0],%1
  2933 00000AAB 895602              <3>  mov word [bp+2],%2
  2934 00000AAE 894604              <3>  mov word [bp+4],%3
  2935 00000AB1 E80702              <3>  call proc__normalize
  2936 00000AB4 54                  <3>  push sp
  2937 00000AB5 5D                  <3>  pop bp
  2938 00000AB6 8B4E00              <3>  mov word %1,[bp+0]
  2939 00000AB9 8B5602              <3>  mov word %2,[bp+2]
  2940                              <3>  stkclose 0x06
  2941 00000ABC 83C406              <4>  add word sp, %1
  2942                              <2> 		
  2943 00000ABF 89E0                <2> 	mov ax,sp
  2944 00000AC1 89C5                <2> 	mov bp,ax
  2945 00000AC3 894E0A              <2> 	mov [bp+0x0A],cx
  2946 00000AC6 89560C              <2> 	mov [bp+0x0C],dx		
  2947                              <2> 
  2948                              <2> 	.done:
  2949                              <2> 																	
  2950 00000AC9 C3                  <2> 	ret
  2951                              <2> 	
  2952                              <2> proc_fladdorsub:	
  2953                              <2> 	; valores especiais
  2954 00000ACA 89E0                <2> 	mov ax,sp
  2955 00000ACC 89C5                <2> 	mov bp,ax
  2956 00000ACE 8B4602              <2> 	mov ax,[bp+2]
  2957 00000AD1 8B5E04              <2> 	mov bx,[bp+4]
  2958 00000AD4 8B4E06              <2> 	mov cx,[bp+6]
  2959 00000AD7 81E10080            <2> 	and cx,0x8000
  2960 00000ADB 334E0E              <2> 	xor word cx,[bp+0x0E]	
  2961 00000ADE 8B5606              <2> 	mov dx,[bp+6]
  2962 00000AE1 81E2FF7F            <2> 	and dx,0x7FFF
  2963 00000AE5 01D1                <2> 	add cx,dx	
  2964 00000AE7 8B5608              <2> 	mov dx,[bp+8]
  2965                              <2> 	__validate ax, bx, cx, dx, ax, bx, cl
  2966                              <3>  stkopen 0x0D
  2967 00000AEA 83EC0D              <4>  sub word sp, %1
  2968 00000AED 54                  <4>  push sp
  2969 00000AEE 5D                  <4>  pop bp
  2970 00000AEF 894600              <3>  mov word [bp+0],%1
  2971 00000AF2 895E02              <3>  mov word [bp+2],%2
  2972 00000AF5 894E04              <3>  mov word [bp+4],%3
  2973 00000AF8 895606              <3>  mov word [bp+6],%4
  2974 00000AFB E85004              <3>  call proc__validate
  2975 00000AFE 54                  <3>  push sp
  2976 00000AFF 5D                  <3>  pop bp
  2977 00000B00 8B4608              <3>  mov word %5,[bp+8]
  2978 00000B03 8B5E0A              <3>  mov word %6,[bp+0x0A]
  2979 00000B06 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  2980                              <3>  stkclose 0x0D
  2981 00000B09 83C40D              <4>  add word sp, %1
  2982 00000B0C 80F900              <2> 	cmp cl,0
  2983 00000B0F 750D                <2> 	jnz .continue
  2984 00000B11 89E2                <2> 		mov dx,sp
  2985 00000B13 89D5                <2> 		mov bp,dx		
  2986 00000B15 89460A              <2> 		mov word [bp+0x0A],ax
  2987 00000B18 895E0C              <2> 		mov word [bp+0x0C],bx										
  2988 00000B1B E99C01              <2> 		jmp .done	
  2989                              <2> 	.continue:
  2990                              <2> 	
  2991 00000B1E 89E0                <2> 	mov ax,sp
  2992 00000B20 89C5                <2> 	mov bp,ax
  2993 00000B22 8B4602              <2> 	mov ax,[bp+2]
  2994 00000B25 8B5E04              <2> 	mov bx,[bp+4]
  2995 00000B28 8B4E06              <2> 	mov cx,[bp+6]
  2996 00000B2B 81E10080            <2> 	and cx,0x8000
  2997 00000B2F 334E0E              <2> 	xor word cx,[bp+0x0E]	
  2998 00000B32 8B5606              <2> 	mov dx,[bp+6]
  2999 00000B35 81E2FF7F            <2> 	and dx,0x7FFF
  3000 00000B39 01D1                <2> 	add cx,dx
  3001 00000B3B 8B5608              <2> 	mov dx,[bp+8]
  3002                              <2> 	__addorsub_validate ax, bx, cx, dx, ax, bx, cl
  3003                              <3>  stkopen 0x0D
  3004 00000B3E 83EC0D              <4>  sub word sp, %1
  3005 00000B41 54                  <4>  push sp
  3006 00000B42 5D                  <4>  pop bp
  3007 00000B43 894600              <3>  mov word [bp+0],%1
  3008 00000B46 895E02              <3>  mov word [bp+2],%2
  3009 00000B49 894E04              <3>  mov word [bp+4],%3
  3010 00000B4C 895606              <3>  mov word [bp+6],%4
  3011 00000B4F E8EE04              <3>  call proc__addorsub_validate
  3012 00000B52 54                  <3>  push sp
  3013 00000B53 5D                  <3>  pop bp
  3014 00000B54 8B4608              <3>  mov word %5,[bp+8]
  3015 00000B57 8B5E0A              <3>  mov word %6,[bp+0x0A]
  3016 00000B5A 8A4E0C              <3>  mov byte %7,[bp+0x0C]
  3017                              <3>  stkclose 0x0D
  3018 00000B5D 83C40D              <4>  add word sp, %1
  3019 00000B60 80F900              <2> 	cmp cl,0
  3020 00000B63 750D                <2> 	jnz .continue2
  3021 00000B65 89E2                <2> 		mov dx,sp
  3022 00000B67 89D5                <2> 		mov bp,dx					
  3023 00000B69 89460A              <2> 		mov word [bp+0x0A],ax
  3024 00000B6C 895E0C              <2> 		mov word [bp+0x0C],bx
  3025 00000B6F E94801              <2> 		jmp .done	
  3026                              <2> 	.continue2:
  3027                              <2> 	
  3028                              <2> 	; valores especiais tratados	
  3029                              <2> 
  3030 00000B72 89E0                <2> 	mov ax,sp
  3031 00000B74 89C5                <2> 	mov bp,ax	
  3032 00000B76 8B4602              <2> 	mov ax,[bp+2]
  3033 00000B79 8B5E06              <2> 	mov bx,[bp+6]
  3034                              <2> 	
  3035 00000B7C D1E0                <2> 	shl ax,1
  3036 00000B7E D1E3                <2> 	shl bx,1
  3037 00000B80 88E5                <2> 	mov ch,ah	
  3038 00000B82 28FD                <2> 	sub ch,bh	
  3039                              <2> 		
  3040 00000B84 80FD00              <2> 	cmp ch,0
  3041 00000B87 7402                <2> 	jz .expzero
  3042 00000B89 EB1E                <2> 	jmp .expnzero
  3043                              <2> 	.expzero:
  3044 00000B8B 50                  <2> 		push ax
  3045 00000B8C 8B4602              <2> 		mov ax,[bp+2]
  3046 00000B8F 8B5E04              <2> 		mov bx,[bp+4]
  3047 00000B92 8B4E06              <2> 		mov cx,[bp+6]
  3048 00000B95 8B5608              <2> 		mov dx,[bp+8]
  3049 00000B98 257F80              <2> 		and ax,0x807F
  3050 00000B9B 81E17F80            <2> 		and cx,0x807F
  3051 00000B9F 0D8000              <2> 		or ax,0x0080
  3052 00000BA2 81C98000            <2> 		or cx,0x0080
  3053                              <2> 												
  3054 00000BA6 E99A00              <2> 		jmp .endexpcmp
  3055                              <2> 	.expnzero:
  3056                              <2> 				
  3057 00000BA9 80FD00              <2> 		cmp ch,0
  3058 00000BAC 7F05                <2> 		jg .exp1great
  3059 00000BAE 7C49                <2> 		jl .exp1less
  3060 00000BB0 E99000              <2> 		jmp .endexpcmp
  3061                              <2> 		.exp1great:					
  3062 00000BB3 50                  <2> 			push ax
  3063                              <2> 		
  3064 00000BB4 8B4606              <2> 			mov ax,[bp+6]
  3065 00000BB7 8B5E08              <2> 			mov bx,[bp+8]
  3066 00000BBA 83E07F              <2> 			and ax,0x007F
  3067 00000BBD 0D8000              <2> 			or ax,0x0080
  3068                              <2> 						
  3069 00000BC0 55                  <2> 			push bp
  3070                              <2> 			__shr32 ax, bx, ch
  3071                              <3>  stkopen 5
  3072 00000BC1 83EC05              <4>  sub word sp, %1
  3073 00000BC4 54                  <4>  push sp
  3074 00000BC5 5D                  <4>  pop bp
  3075 00000BC6 894600              <3>  mov word [bp+0], %1
  3076 00000BC9 895E02              <3>  mov word [bp+2], %2
  3077 00000BCC 886E04              <3>  mov byte [bp+4], %3
  3078 00000BCF E8C0F7              <3>  call proc_shr32
  3079 00000BD2 54                  <3>  push sp
  3080 00000BD3 5D                  <3>  pop bp
  3081 00000BD4 8B4600              <3>  mov word %1, [bp+0]
  3082 00000BD7 8B5E02              <3>  mov word %2, [bp+2]
  3083                              <3>  stkclose 5
  3084 00000BDA 83C405              <4>  add word sp, %1
  3085 00000BDD 5D                  <2> 			pop bp		
  3086                              <2> 				
  3087 00000BDE 8B5606              <2> 			mov dx,[bp+6]
  3088 00000BE1 81E20080            <2> 			and dx,0x8000
  3089 00000BE5 01D0                <2> 			add ax,dx			
  3090                              <2> 			
  3091 00000BE7 89C1                <2> 			mov cx,ax
  3092 00000BE9 89DA                <2> 			mov dx,bx
  3093 00000BEB 8B4602              <2> 			mov ax,[bp+2]
  3094 00000BEE 8B5E04              <2> 			mov bx,[bp+4]										
  3095                              <2> 									
  3096 00000BF1 257F80              <2> 			and ax,0x807F
  3097 00000BF4 0D8000              <2> 			or ax,0x0080
  3098                              <2> 						
  3099 00000BF7 EB4A                <2> 			jmp .endexp1cmp	
  3100                              <2> 		.exp1less:
  3101 00000BF9 88E9                <2> 			mov cl,ch
  3102 00000BFB B5FF                <2> 			mov ch,0xFF
  3103 00000BFD 28CD                <2> 			sub ch,cl
  3104 00000BFF FEC5                <2> 			inc ch
  3105 00000C01 53                  <2> 			push bx		
  3106                              <2> 		
  3107 00000C02 8B4602              <2> 			mov ax,[bp+2]
  3108 00000C05 8B5E04              <2> 			mov bx,[bp+4]
  3109 00000C08 83E07F              <2> 			and ax,0x007F
  3110 00000C0B 0D8000              <2> 			or ax,0x0080
  3111                              <2> 						
  3112 00000C0E 55                  <2> 			push bp
  3113                              <2> 			__shr32 ax, bx, ch
  3114                              <3>  stkopen 5
  3115 00000C0F 83EC05              <4>  sub word sp, %1
  3116 00000C12 54                  <4>  push sp
  3117 00000C13 5D                  <4>  pop bp
  3118 00000C14 894600              <3>  mov word [bp+0], %1
  3119 00000C17 895E02              <3>  mov word [bp+2], %2
  3120 00000C1A 886E04              <3>  mov byte [bp+4], %3
  3121 00000C1D E872F7              <3>  call proc_shr32
  3122 00000C20 54                  <3>  push sp
  3123 00000C21 5D                  <3>  pop bp
  3124 00000C22 8B4600              <3>  mov word %1, [bp+0]
  3125 00000C25 8B5E02              <3>  mov word %2, [bp+2]
  3126                              <3>  stkclose 5
  3127 00000C28 83C405              <4>  add word sp, %1
  3128 00000C2B 5D                  <2> 			pop bp
  3129                              <2> 								
  3130 00000C2C 8B5602              <2> 			mov dx,[bp+2]
  3131 00000C2F 81E20080            <2> 			and dx,0x8000
  3132 00000C33 01D0                <2> 			add ax,dx			
  3133                              <2> 			
  3134 00000C35 8B4E06              <2> 			mov cx,[bp+6]
  3135 00000C38 8B5608              <2> 			mov dx,[bp+8]										
  3136                              <2> 									
  3137 00000C3B 81E17F80            <2> 			and cx,0x807F
  3138 00000C3F 81C98000            <2> 			or cx,0x0080
  3139                              <2> 									
  3140                              <2> 		.endexp1cmp:
  3141                              <2> 		
  3142                              <2> 	.endexpcmp:			
  3143                              <2> 	
  3144 00000C43 837E0E00            <2> 	cmp word [bp+0x0E],0
  3145 00000C47 7526                <2> 	jnz .sub
  3146                              <2> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0
  3147                              <3>  stkopen 0x0D
  3148 00000C49 83EC0D              <4>  sub word sp, %1
  3149 00000C4C 54                  <4>  push sp
  3150 00000C4D 5D                  <4>  pop bp
  3151 00000C4E 894600              <3>  mov word [bp+0],%1
  3152 00000C51 895E02              <3>  mov word [bp+2],%2
  3153 00000C54 894E04              <3>  mov word [bp+4],%3
  3154 00000C57 895606              <3>  mov word [bp+6],%4
  3155 00000C5A C7460C0000          <3>  mov word [bp+0x0C], %7
  3156 00000C5F E81201              <3>  call proc__iaddorsub32
  3157 00000C62 54                  <3>  push sp
  3158 00000C63 5D                  <3>  pop bp
  3159 00000C64 8B4608              <3>  mov word %5,[bp+8]
  3160 00000C67 8B5E0A              <3>  mov word %6,[bp+0x0A]
  3161                              <3>  stkclose 0x0D
  3162 00000C6A 83C40D              <4>  add word sp, %1
  3163 00000C6D EB24                <2> 		jmp .endop
  3164                              <2> 	.sub:
  3165                              <2> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0x8000
  3166                              <3>  stkopen 0x0D
  3167 00000C6F 83EC0D              <4>  sub word sp, %1
  3168 00000C72 54                  <4>  push sp
  3169 00000C73 5D                  <4>  pop bp
  3170 00000C74 894600              <3>  mov word [bp+0],%1
  3171 00000C77 895E02              <3>  mov word [bp+2],%2
  3172 00000C7A 894E04              <3>  mov word [bp+4],%3
  3173 00000C7D 895606              <3>  mov word [bp+6],%4
  3174 00000C80 C7460C0080          <3>  mov word [bp+0x0C], %7
  3175 00000C85 E8EC00              <3>  call proc__iaddorsub32
  3176 00000C88 54                  <3>  push sp
  3177 00000C89 5D                  <3>  pop bp
  3178 00000C8A 8B4608              <3>  mov word %5,[bp+8]
  3179 00000C8D 8B5E0A              <3>  mov word %6,[bp+0x0A]
  3180                              <3>  stkclose 0x0D
  3181 00000C90 83C40D              <4>  add word sp, %1
  3182                              <2> 	.endop:
  3183                              <2> 						
  3184 00000C93 59                  <2> 	pop cx
  3185                              <2> 	
  3186                              <2> 	__normalize ax, bx, cx
  3187                              <3>  stkopen 0x06
  3188 00000C94 83EC06              <4>  sub word sp, %1
  3189 00000C97 54                  <4>  push sp
  3190 00000C98 5D                  <4>  pop bp
  3191 00000C99 894600              <3>  mov word [bp+0],%1
  3192 00000C9C 895E02              <3>  mov word [bp+2],%2
  3193 00000C9F 894E04              <3>  mov word [bp+4],%3
  3194 00000CA2 E81600              <3>  call proc__normalize
  3195 00000CA5 54                  <3>  push sp
  3196 00000CA6 5D                  <3>  pop bp
  3197 00000CA7 8B4600              <3>  mov word %1,[bp+0]
  3198 00000CAA 8B5E02              <3>  mov word %2,[bp+2]
  3199                              <3>  stkclose 0x06
  3200 00000CAD 83C406              <4>  add word sp, %1
  3201                              <2> 	
  3202 00000CB0 89E1                <2> 	mov cx,sp
  3203 00000CB2 89CD                <2> 	mov bp,cx
  3204 00000CB4 89460A              <2> 	mov word [bp+0x0A],ax
  3205 00000CB7 895E0C              <2> 	mov word [bp+0x0C],bx
  3206                              <2> 									
  3207                              <2> 	.done:		
  3208                              <2> 							
  3209 00000CBA C3                  <2> 	ret
  3210                              <2> 	
  3211                              <2> proc__normalize:
  3212 00000CBB 89E0                <2> 	mov ax,sp
  3213 00000CBD 89C5                <2> 	mov bp,ax	
  3214                              <2> 
  3215 00000CBF 8B4E02              <2> 	mov cx,[bp+2]	
  3216 00000CC2 8B5604              <2> 	mov dx,[bp+4]
  3217 00000CC5 8B5E06              <2> 	mov bx,[bp+6]
  3218                              <2> 					
  3219 00000CC8 89C8                <2> 	mov ax,cx
  3220 00000CCA 250080              <2> 	and ax,0x8000			
  3221 00000CCD 894602              <2> 	mov [bp+2],ax	
  3222                              <2> 					
  3223 00000CD0 81E1FF7F            <2> 	and cx,0x7FFF
  3224                              <2> 			
  3225 00000CD4 51                  <2> 	push cx
  3226 00000CD5 52                  <2> 	push dx
  3227 00000CD6 53                  <2> 	push bx
  3228                              <2> 	__lzbitcount32 cx, dx, al	
  3229 00000CD7 52                  <3>  push %2
  3230                              <3>  __lzbitcount16 %1, cl
  3231                              <4>  stkopen 3
  3232 00000CD8 83EC03              <5>  sub word sp, %1
  3233 00000CDB 54                  <5>  push sp
  3234 00000CDC 5D                  <5>  pop bp
  3235 00000CDD 894E00              <4>  mov word [bp+0], %1
  3236 00000CE0 E834F7              <4>  call proc__lzbitcount16
  3237 00000CE3 54                  <4>  push sp
  3238 00000CE4 5D                  <4>  pop bp
  3239 00000CE5 8A4E02              <4>  mov byte %2, [bp+2]
  3240                              <4>  stkclose 3
  3241 00000CE8 83C403              <5>  add word sp, %1
  3242 00000CEB 58                  <3>  pop ax
  3243 00000CEC 80F910              <3>  cmp cl,16
  3244 00000CEF 7217                <3>  jb .end
  3245 00000CF1 51                  <3>  push cx
  3246                              <3>  __lzbitcount16 ax, al
  3247                              <4>  stkopen 3
  3248 00000CF2 83EC03              <5>  sub word sp, %1
  3249 00000CF5 54                  <5>  push sp
  3250 00000CF6 5D                  <5>  pop bp
  3251 00000CF7 894600              <4>  mov word [bp+0], %1
  3252 00000CFA E81AF7              <4>  call proc__lzbitcount16
  3253 00000CFD 54                  <4>  push sp
  3254 00000CFE 5D                  <4>  pop bp
  3255 00000CFF 8A4602              <4>  mov byte %2, [bp+2]
  3256                              <4>  stkclose 3
  3257 00000D02 83C403              <5>  add word sp, %1
  3258 00000D05 59                  <3>  pop cx
  3259 00000D06 00C1                <3>  add cl,al
  3260                              <3>  .end:
  3261 00000D08 88C8                <3>  mov byte %3, cl
  3262 00000D0A 5B                  <2> 	pop bx
  3263 00000D0B 5A                  <2> 	pop dx
  3264 00000D0C 59                  <2> 	pop cx								
  3265                              <2> 		
  3266 00000D0D 3C08                <2> 	cmp al,8					
  3267 00000D0F 7204                <2> 	jb .shr
  3268 00000D11 7728                <2> 	ja .shl
  3269 00000D13 EB4A                <2> 	jmp .endshrl
  3270                              <2> 	.shr:			
  3271 00000D15 B408                <2> 		mov ah,0x08
  3272 00000D17 28C4                <2> 		sub ah,al
  3273 00000D19 00E7                <2> 		add bh,ah
  3274 00000D1B 53                  <2> 		push bx
  3275                              <2> 		__shr32 cx, dx, ah
  3276                              <3>  stkopen 5
  3277 00000D1C 83EC05              <4>  sub word sp, %1
  3278 00000D1F 54                  <4>  push sp
  3279 00000D20 5D                  <4>  pop bp
  3280 00000D21 894E00              <3>  mov word [bp+0], %1
  3281 00000D24 895602              <3>  mov word [bp+2], %2
  3282 00000D27 886604              <3>  mov byte [bp+4], %3
  3283 00000D2A E865F6              <3>  call proc_shr32
  3284 00000D2D 54                  <3>  push sp
  3285 00000D2E 5D                  <3>  pop bp
  3286 00000D2F 8B4E00              <3>  mov word %1, [bp+0]
  3287 00000D32 8B5602              <3>  mov word %2, [bp+2]
  3288                              <3>  stkclose 5
  3289 00000D35 83C405              <4>  add word sp, %1
  3290 00000D38 5B                  <2> 		pop bx
  3291 00000D39 EB24                <2> 		jmp .endshrl
  3292                              <2> 	.shl:		
  3293 00000D3B B408                <2> 		mov ah,0x08
  3294 00000D3D 28E0                <2> 		sub al,ah
  3295 00000D3F 28C7                <2> 		sub bh,al			
  3296 00000D41 53                  <2> 		push bx
  3297                              <2> 		__shl32 cx, dx, al
  3298                              <3>  stkopen 5
  3299 00000D42 83EC05              <4>  sub word sp, %1
  3300 00000D45 54                  <4>  push sp
  3301 00000D46 5D                  <4>  pop bp
  3302 00000D47 894E00              <3>  mov word [bp+0], %1
  3303 00000D4A 895602              <3>  mov word [bp+2], %2
  3304 00000D4D 884604              <3>  mov byte [bp+4], %3
  3305 00000D50 E8F8F5              <3>  call proc_shl32
  3306 00000D53 54                  <3>  push sp
  3307 00000D54 5D                  <3>  pop bp
  3308 00000D55 8B4E00              <3>  mov word %1, [bp+0]
  3309 00000D58 8B5602              <3>  mov word %2, [bp+2]
  3310                              <3>  stkclose 5
  3311 00000D5B 83C405              <4>  add word sp, %1
  3312 00000D5E 5B                  <2> 		pop bx			
  3313                              <2> 	.endshrl:											
  3314                              <2> 								
  3315 00000D5F 30DB                <2> 	xor bl,bl
  3316 00000D61 D1EB                <2> 	shr bx,1	
  3317 00000D63 83E17F              <2> 	and cx,0x007F	
  3318                              <2> 		
  3319 00000D66 89E0                <2> 	mov ax,sp
  3320 00000D68 89C5                <2> 	mov bp,ax
  3321 00000D6A 015E02              <2> 	add word [bp+2],bx
  3322 00000D6D 014E02              <2> 	add word [bp+2],cx	
  3323 00000D70 895604              <2> 	mov word [bp+4],dx
  3324                              <2> 	
  3325 00000D73 C3                  <2> 	ret
  3326                              <2> 
  3327                              <2> proc__iaddorsub32:
  3328 00000D74 89E0                <2> 	mov ax,sp
  3329 00000D76 89C5                <2> 	mov bp,ax
  3330                              <2> 	
  3331 00000D78 8B4602              <2> 	mov ax,[bp+2]
  3332 00000D7B 8B5E04              <2> 	mov bx,[bp+4]
  3333 00000D7E 8B4E06              <2> 	mov cx,[bp+6]
  3334 00000D81 8B5608              <2> 	mov dx,[bp+8]	
  3335                              <2> 	
  3336 00000D84 50                  <2> 	push ax	
  3337 00000D85 250080              <2> 	and ax, 0x8000
  3338 00000D88 83F800              <2> 	cmp ax,0
  3339 00000D8B 741B                <2> 	jz .endv1neg
  3340 00000D8D 58                  <2> 		pop ax
  3341 00000D8E 51                  <2> 		push cx
  3342 00000D8F 52                  <2> 		push dx
  3343                              <2> 		
  3344 00000D90 B9FFFF              <2> 		mov cx,0xFFFF
  3345 00000D93 BAFFFF              <2> 		mov dx,0xFFFF
  3346 00000D96 25FF7F              <2> 		and ax,0x7FFF
  3347 00000D99 29DA                <2> 		sub dx,bx
  3348 00000D9B 19C1                <2> 		sbb cx,ax
  3349 00000D9D 42                  <2> 		inc dx
  3350 00000D9E 83D100              <2> 		adc cx,0
  3351 00000DA1 89C8                <2> 		mov ax,cx
  3352 00000DA3 89D3                <2> 		mov bx,dx
  3353                              <2> 		
  3354 00000DA5 5A                  <2> 		pop dx
  3355 00000DA6 59                  <2> 		pop cx
  3356 00000DA7 50                  <2> 		push ax	
  3357                              <2> 	.endv1neg:		
  3358 00000DA8 58                  <2> 	pop ax	
  3359                              <2> 		
  3360 00000DA9 51                  <2> 	push cx
  3361 00000DAA 81E10080            <2> 	and cx,0x8000
  3362 00000DAE 83F900              <2> 	cmp cx,0
  3363 00000DB1 741C                <2> 	jz .endv2neg
  3364 00000DB3 59                  <2> 		pop cx
  3365 00000DB4 50                  <2> 		push ax
  3366 00000DB5 53                  <2> 		push bx
  3367                              <2> 		
  3368 00000DB6 B8FFFF              <2> 		mov ax,0xFFFF
  3369 00000DB9 BBFFFF              <2> 		mov bx,0xFFFF
  3370 00000DBC 81E1FF7F            <2> 		and cx,0x7FFF
  3371 00000DC0 29D3                <2> 		sub bx,dx
  3372 00000DC2 19C8                <2> 		sbb ax,cx
  3373 00000DC4 43                  <2> 		inc bx
  3374 00000DC5 83D000              <2> 		adc ax,0
  3375 00000DC8 89C1                <2> 		mov cx,ax
  3376 00000DCA 89DA                <2> 		mov dx,bx
  3377                              <2> 		
  3378 00000DCC 5B                  <2> 		pop bx
  3379 00000DCD 58                  <2> 		pop ax
  3380 00000DCE 51                  <2> 		push cx
  3381                              <2> 	.endv2neg:	
  3382 00000DCF 59                  <2> 	pop cx
  3383                              <2> 					
  3384 00000DD0 837E0E00            <2> 	cmp word [bp+0x0E],0
  3385 00000DD4 7506                <2> 	jnz .sub
  3386 00000DD6 01D3                <2> 		add bx, dx
  3387 00000DD8 11C8                <2> 		adc ax, cx				
  3388 00000DDA EB04                <2> 		jmp .endop
  3389                              <2> 	.sub:
  3390 00000DDC 29D3                <2> 		sub bx, dx
  3391 00000DDE 19C8                <2> 		sbb ax, cx
  3392                              <2> 	.endop:
  3393                              <2> 	
  3394 00000DE0 89C1                <2> 	mov cx,ax
  3395 00000DE2 81E10080            <2> 	and cx,0x8000
  3396 00000DE6 83F900              <2> 	cmp cx,0
  3397 00000DE9 7415                <2> 	jz .endresneg
  3398 00000DEB B9FFFF              <2> 		mov cx,0xFFFF
  3399 00000DEE BAFFFF              <2> 		mov dx,0xFFFF
  3400 00000DF1 29DA                <2> 		sub dx,bx
  3401 00000DF3 19C1                <2> 		sbb cx,ax
  3402 00000DF5 42                  <2> 		inc dx
  3403 00000DF6 83D100              <2> 		adc cx,0
  3404 00000DF9 89C8                <2> 		mov ax,cx
  3405 00000DFB 89D3                <2> 		mov bx,dx
  3406                              <2> 		
  3407 00000DFD 050080              <2> 		add ax,0x8000
  3408                              <2> 	.endresneg:
  3409                              <2> 	
  3410 00000E00 89E1                <2> 	mov cx,sp
  3411 00000E02 89CD                <2> 	mov bp,cx
  3412 00000E04 89460A              <2> 	mov [bp+0x0A], ax
  3413 00000E07 895E0C              <2> 	mov [bp+0x0C], bx
  3414                              <2> 	
  3415 00000E0A C3                  <2> 	ret	
  3416                              <2> 	
  3417                              <2> proc__mul32_64:
  3418 00000E0B 89E0                <2> 	mov ax,sp
  3419 00000E0D 89C5                <2> 	mov bp,ax
  3420                              <2> 		
  3421 00000E0F 31D2                <2> 	xor dx,dx
  3422 00000E11 8B4604              <2> 	mov ax,[bp+4]
  3423 00000E14 F76608              <2> 	mul word [bp+8]
  3424                              <2> 	
  3425 00000E17 C7460A0000          <2> 	mov word [bp+0x0A], 0
  3426 00000E1C C7460C0000          <2> 	mov word [bp+0x0C], 0
  3427 00000E21 89560E              <2> 	mov word [bp+0x0E], dx
  3428 00000E24 894610              <2> 	mov word [bp+0x10], ax
  3429                              <2> 		
  3430 00000E27 31D2                <2> 	xor dx,dx
  3431 00000E29 8B4604              <2> 	mov ax,[bp+4]
  3432 00000E2C F76606              <2> 	mul word [bp+6]
  3433                              <2> 	
  3434 00000E2F 01460E              <2> 	add [bp+0x0E],ax
  3435 00000E32 11560C              <2> 	adc [bp+0x0C],dx
  3436 00000E35 83560A00            <2> 	adc word [bp+0x0A],0
  3437                              <2> 	
  3438 00000E39 31D2                <2> 	xor dx,dx
  3439 00000E3B 8B4602              <2> 	mov ax,[bp+2]
  3440 00000E3E F76608              <2> 	mul word [bp+8]
  3441                              <2> 	
  3442 00000E41 01460E              <2> 	add [bp+0x0E],ax
  3443 00000E44 11560C              <2> 	adc [bp+0x0C],dx
  3444                              <2> 	
  3445 00000E47 31D2                <2> 	xor dx,dx
  3446 00000E49 8B4602              <2> 	mov ax,[bp+2]
  3447 00000E4C F76606              <2> 	mul word [bp+6]
  3448                              <2> 	
  3449 00000E4F 01460C              <2> 	add [bp+0x0C],ax
  3450 00000E52 11560A              <2> 	adc [bp+0x0A],dx
  3451                              <2> 	
  3452 00000E55 C3                  <2> 	ret
  3453                              <2> 	
  3454                              <2> proc__fldiv32:
  3455 00000E56 89E0                <2> 	mov ax,sp
  3456 00000E58 89C5                <2> 	mov bp,ax
  3457                              <2> 	
  3458 00000E5A 8B4602              <2> 	mov ax,[bp+2]
  3459 00000E5D 8B5E04              <2> 	mov bx,[bp+4]
  3460 00000E60 C7460A0000          <2> 	mov word [bp+0x0A],0
  3461 00000E65 C7460C0000          <2> 	mov word [bp+0x0C],0
  3462                              <2> 	
  3463 00000E6A B118                <2> 	mov cl,24
  3464                              <2> 	.l1:
  3465 00000E6C 80F900              <2> 		cmp cl,0
  3466 00000E6F 0F84AC00            <2> 		jz .l2
  3467 00000E73 51                  <2> 		push cx
  3468                              <2> 		
  3469 00000E74 8B4E0A              <2> 		mov cx,[bp+0x0A]
  3470 00000E77 8B560C              <2> 		mov dx,[bp+0x0C]
  3471 00000E7A 55                  <2> 		push bp
  3472 00000E7B 50                  <2> 		push ax
  3473 00000E7C 53                  <2> 		push bx
  3474                              <2> 		__shl32 cx, dx, 1
  3475                              <3>  stkopen 5
  3476 00000E7D 83EC05              <4>  sub word sp, %1
  3477 00000E80 54                  <4>  push sp
  3478 00000E81 5D                  <4>  pop bp
  3479 00000E82 894E00              <3>  mov word [bp+0], %1
  3480 00000E85 895602              <3>  mov word [bp+2], %2
  3481 00000E88 C6460401            <3>  mov byte [bp+4], %3
  3482 00000E8C E8BCF4              <3>  call proc_shl32
  3483 00000E8F 54                  <3>  push sp
  3484 00000E90 5D                  <3>  pop bp
  3485 00000E91 8B4E00              <3>  mov word %1, [bp+0]
  3486 00000E94 8B5602              <3>  mov word %2, [bp+2]
  3487                              <3>  stkclose 5
  3488 00000E97 83C405              <4>  add word sp, %1
  3489 00000E9A 5B                  <2> 		pop bx
  3490 00000E9B 58                  <2> 		pop ax
  3491 00000E9C 5D                  <2> 		pop bp
  3492 00000E9D 894E0A              <2> 		mov [bp+0x0A],cx
  3493 00000EA0 89560C              <2> 		mov [bp+0x0C],dx
  3494                              <2> 				
  3495 00000EA3 8B4E06              <2> 		mov cx,[bp+6]
  3496 00000EA6 8B5608              <2> 		mov dx,[bp+8]
  3497 00000EA9 50                  <2> 		push ax
  3498 00000EAA 53                  <2> 		push bx
  3499 00000EAB 55                  <2> 		push bp
  3500                              <2> 		__cmp32 ax, bx, cx, dx, dl
  3501                              <3>  stkopen 9
  3502 00000EAC 83EC09              <4>  sub word sp, %1
  3503 00000EAF 54                  <4>  push sp
  3504 00000EB0 5D                  <4>  pop bp
  3505 00000EB1 894600              <3>  mov word [bp+0], %1
  3506 00000EB4 895E02              <3>  mov word [bp+2], %2
  3507 00000EB7 894E04              <3>  mov word [bp+4], %3
  3508 00000EBA 895606              <3>  mov word [bp+6], %4
  3509 00000EBD E860F4              <3>  call proc_cmp32
  3510 00000EC0 54                  <3>  push sp
  3511 00000EC1 5D                  <3>  pop bp
  3512 00000EC2 8A5608              <3>  mov byte %5, [bp+8]
  3513                              <3>  stkclose 9
  3514 00000EC5 83C409              <4>  add word sp, %1
  3515 00000EC8 5D                  <2> 		pop bp
  3516 00000EC9 5B                  <2> 		pop bx
  3517 00000ECA 58                  <2> 		pop ax				
  3518                              <2> 		
  3519 00000ECB 80FA00              <2> 		cmp dl,0
  3520 00000ECE 7C2A                <2> 		jl .endsub
  3521 00000ED0 8B4E06              <2> 			mov cx,[bp+6]
  3522 00000ED3 8B5608              <2> 			mov dx,[bp+8]
  3523 00000ED6 55                  <2> 			push bp									
  3524                              <2> 			__sub32 ax, bx, cx, dx, ax, bx						
  3525                              <3>  stkopen 0x0C
  3526 00000ED7 83EC0C              <4>  sub word sp, %1
  3527 00000EDA 54                  <4>  push sp
  3528 00000EDB 5D                  <4>  pop bp
  3529 00000EDC 894600              <3>  mov word [bp+0], %1
  3530 00000EDF 895E02              <3>  mov word [bp+2], %2
  3531 00000EE2 894E04              <3>  mov word [bp+4], %3
  3532 00000EE5 895606              <3>  mov word [bp+6], %4
  3533 00000EE8 E81AF4              <3>  call proc_sub32
  3534 00000EEB 54                  <3>  push sp
  3535 00000EEC 5D                  <3>  pop bp
  3536 00000EED 8B4608              <3>  mov word %5, [bp+8]
  3537 00000EF0 8B5E0A              <3>  mov word %6, [bp+0x0A]
  3538                              <3>  stkclose 0x0C
  3539 00000EF3 83C40C              <4>  add word sp, %1
  3540 00000EF6 5D                  <2> 			pop bp			
  3541 00000EF7 FF460C              <2> 			inc word [bp+0x0C]			
  3542                              <2> 		.endsub:
  3543                              <2> 				
  3544 00000EFA 55                  <2> 		push bp
  3545                              <2> 		__shl32 ax, bx, 1
  3546                              <3>  stkopen 5
  3547 00000EFB 83EC05              <4>  sub word sp, %1
  3548 00000EFE 54                  <4>  push sp
  3549 00000EFF 5D                  <4>  pop bp
  3550 00000F00 894600              <3>  mov word [bp+0], %1
  3551 00000F03 895E02              <3>  mov word [bp+2], %2
  3552 00000F06 C6460401            <3>  mov byte [bp+4], %3
  3553 00000F0A E83EF4              <3>  call proc_shl32
  3554 00000F0D 54                  <3>  push sp
  3555 00000F0E 5D                  <3>  pop bp
  3556 00000F0F 8B4600              <3>  mov word %1, [bp+0]
  3557 00000F12 8B5E02              <3>  mov word %2, [bp+2]
  3558                              <3>  stkclose 5
  3559 00000F15 83C405              <4>  add word sp, %1
  3560 00000F18 5D                  <2> 		pop bp
  3561                              <2> 		
  3562 00000F19 59                  <2> 		pop cx
  3563 00000F1A FEC9                <2> 		dec cl
  3564 00000F1C E94DFF              <2> 		jmp .l1
  3565                              <2> 	.l2:
  3566                              <2> 	
  3567 00000F1F C3                  <2> 	ret
  3568                              <2> 
  3569                              <2> 
  3570                              <2> proc_flinvsig:
  3571 00000F20 89E0                <2> 	mov ax,sp
  3572 00000F22 89C5                <2> 	mov bp,ax
  3573                              <2> 	
  3574 00000F24 8B4602              <2> 	mov ax,[bp+2]
  3575 00000F27 88E7                <2> 	mov bh,ah
  3576 00000F29 80E780              <2> 	and bh,0x80
  3577 00000F2C 80FF00              <2> 	cmp bh,0
  3578 00000F2F 7505                <2> 	jnz .one
  3579 00000F31 0D0080              <2> 		or ax, 0x8000 
  3580 00000F34 EB03                <2> 		jmp .endcmp
  3581                              <2> 	.one:
  3582 00000F36 25FF7F              <2> 		and ax, 0x7FFF
  3583                              <2> 	.endcmp:
  3584                              <2> 	
  3585 00000F39 894602              <2> 	mov word [bp+2],ax
  3586                              <2> 	
  3587 00000F3C C3                  <2> 	ret
  3588                              <2> 
  3589                              <2> proc_flsetsig:
  3590 00000F3D 89E0                <2> 	mov ax,sp
  3591 00000F3F 89C5                <2> 	mov bp,ax
  3592                              <2> 
  3593 00000F41 8B4602              <2> 	mov ax,[bp+2]
  3594 00000F44 25FF7F              <2> 	and ax,0x7FFF
  3595 00000F47 034604              <2> 	add ax,[bp+4]
  3596 00000F4A 894602              <2> 	mov [bp+2],ax
  3597                              <2> 				
  3598 00000F4D C3                  <2> 	ret
  3599                              <2> 
  3600                              <2> proc__validate:
  3601 00000F4E 89E0                <2> 	mov ax,sp
  3602 00000F50 89C5                <2> 	mov bp,ax
  3603                              <2> 	
  3604 00000F52 8B4602              <2> 	mov ax,[bp+2]
  3605 00000F55 25FF7F              <2> 	and ax,0x7FFF
  3606 00000F58 3DFF7F              <2> 	cmp ax,0x7FFF
  3607 00000F5B 750A                <2> 	jne .isnumber1
  3608                              <2> 
  3609 00000F5D 8B4604              <2> 	mov ax,[bp+4]
  3610 00000F60 83F8FF              <2> 	cmp ax,0xFFFF
  3611 00000F63 7502                <2> 	jnz .isnumber1
  3612                              <2> 	
  3613 00000F65 EB37                <2> 	jmp .NaN
  3614                              <2> 	
  3615                              <2> 	.isnumber1:
  3616                              <2> 	
  3617 00000F67 8B4606              <2> 	mov ax,[bp+6]
  3618 00000F6A 25FF7F              <2> 	and ax,0x7FFF
  3619 00000F6D 3DFF7F              <2> 	cmp ax,0x7FFF
  3620 00000F70 750A                <2> 	jne .isnumber2
  3621                              <2> 
  3622 00000F72 8B4608              <2> 	mov ax,[bp+8]
  3623 00000F75 83F8FF              <2> 	cmp ax,0xFFFF
  3624 00000F78 7502                <2> 	jnz .isnumber2
  3625                              <2> 	
  3626 00000F7A EB22                <2> 	jmp .NaN
  3627                              <2> 	
  3628                              <2> 	.isnumber2:
  3629                              <2> 	
  3630 00000F7C 8B4602              <2> 	mov ax,[bp+2]
  3631 00000F7F D1E0                <2> 	shl ax,1
  3632 00000F81 80FCFF              <2> 	cmp ah,0xFF
  3633 00000F84 740C                <2> 	je .infinity
  3634                              <2> 
  3635 00000F86 8B5E06              <2> 	mov bx,[bp+6]
  3636 00000F89 D1E3                <2> 	shl bx,1
  3637 00000F8B 80FFFF              <2> 	cmp bh,0xFF
  3638 00000F8E 7402                <2> 	je .infinity			
  3639                              <2> 	
  3640 00000F90 EB18                <2> 	jmp .ok	
  3641                              <2> 	
  3642                              <2> 	.infinity:		
  3643 00000F92 C7460A807F          <2> 		mov word [bp+0x0A],0x7F80
  3644 00000F97 C7460C0000          <2> 		mov word [bp+0x0C],0
  3645 00000F9C EB12                <2> 		jmp .done
  3646                              <2> 	.NaN:
  3647 00000F9E C7460AFF7F          <2> 		mov word [bp+0x0A],0x7FFF
  3648 00000FA3 C7460CFFFF          <2> 		mov word [bp+0x0C],0xFFFF
  3649 00000FA8 EB06                <2> 		jmp .done
  3650                              <2> 			
  3651                              <2> 	.ok:
  3652 00000FAA C6460E01            <2> 		mov byte [bp+0x0E],1
  3653 00000FAE EB04                <2> 		jmp .end
  3654                              <2> 	.done:
  3655 00000FB0 C6460E00            <2> 		mov byte [bp+0x0E],0		
  3656                              <2> 	.end:
  3657                              <2> 	
  3658 00000FB4 C3                  <2> 	ret
  3659                              <2> 
  3660                              <2> proc__div_validate:
  3661 00000FB5 89E0                <2> 	mov ax,sp
  3662 00000FB7 89C5                <2> 	mov bp,ax
  3663                              <2> 	
  3664 00000FB9 8B4602              <2> 	mov ax,[bp+2]
  3665 00000FBC 8B5E06              <2> 	mov bx,[bp+6]
  3666 00000FBF D1E0                <2> 	shl ax,1
  3667 00000FC1 D1E3                <2> 	shl bx,1
  3668 00000FC3 08FC                <2> 	or ah,bh
  3669 00000FC5 80FC00              <2> 	cmp ah,0
  3670 00000FC8 7422                <2> 	jz .NaN
  3671                              <2> 	
  3672 00000FCA 8B4602              <2> 	mov ax,[bp+2]
  3673 00000FCD D1E0                <2> 	shl ax,1
  3674 00000FCF 80FC00              <2> 	cmp ah,0
  3675 00000FD2 7424                <2> 	jz .zero
  3676 00000FD4 8B5E06              <2> 	mov bx,[bp+6]
  3677 00000FD7 D1E3                <2> 	shl bx,1
  3678 00000FD9 80FF00              <2> 	cmp bh,0	
  3679 00000FDC 7402                <2> 	jz .infinity		
  3680                              <2> 		
  3681 00000FDE EB24                <2> 	jmp .ok
  3682                              <2> 	
  3683                              <2> 	.infinity:		
  3684 00000FE0 C7460A807F          <2> 		mov word [bp+0x0A],0x7F80
  3685 00000FE5 C7460C0000          <2> 		mov word [bp+0x0C],0
  3686 00000FEA EB1E                <2> 		jmp .done
  3687                              <2> 	.NaN:
  3688 00000FEC C7460AFF7F          <2> 		mov word [bp+0x0A],0x7FFF
  3689 00000FF1 C7460CFFFF          <2> 		mov word [bp+0x0C],0xFFFF
  3690 00000FF6 EB12                <2> 		jmp .done
  3691                              <2> 	.zero:
  3692 00000FF8 C7460A0000          <2> 		mov word [bp+0x0A],0
  3693 00000FFD C7460C0000          <2> 		mov word [bp+0x0C],0
  3694 00001002 EB06                <2> 		jmp .done	
  3695                              <2> 			
  3696                              <2> 	.ok:
  3697 00001004 C6460E01            <2> 		mov byte [bp+0x0E],1
  3698 00001008 EB04                <2> 		jmp .end
  3699                              <2> 	.done:	
  3700 0000100A C6460E00            <2> 		mov byte [bp+0x0E],0
  3701                              <2> 	.end:	
  3702                              <2> 		
  3703 0000100E C3                  <2> 	ret
  3704                              <2> 	
  3705                              <2> proc__mul_validate:
  3706 0000100F 89E0                <2> 	mov ax,sp
  3707 00001011 89C5                <2> 	mov bp,ax
  3708                              <2> 	
  3709 00001013 8B4602              <2> 	mov ax,[bp+2]
  3710 00001016 D1E0                <2> 	shl ax,1	
  3711 00001018 80FC00              <2> 	cmp ah,0	
  3712 0000101B 740C                <2> 	jz .zero		
  3713                              <2> 
  3714 0000101D 8B5E04              <2> 	mov bx,[bp+4]
  3715 00001020 D1E3                <2> 	shl bx,1
  3716 00001022 80FF00              <2> 	cmp bh,0
  3717 00001025 7402                <2> 	jz .zero
  3718                              <2> 			
  3719 00001027 EB0C                <2> 	jmp .ok
  3720                              <2> 	
  3721                              <2> 	.zero:		
  3722 00001029 C746060000          <2> 		mov word [bp+6],0
  3723 0000102E C746080000          <2> 		mov word [bp+8],0
  3724 00001033 EB06                <2> 		jmp .done
  3725                              <2> 			
  3726                              <2> 	.ok:
  3727 00001035 C6460A01            <2> 		mov byte [bp+0x0A],1
  3728 00001039 EB04                <2> 		jmp .end
  3729                              <2> 	.done:	
  3730 0000103B C6460A00            <2> 		mov byte [bp+0x0A],0
  3731                              <2> 	.end:	
  3732                              <2> 		
  3733 0000103F C3                  <2> 	ret
  3734                              <2> 	
  3735                              <2> proc__addorsub_validate:
  3736 00001040 89E0                <2> 	mov ax,sp
  3737 00001042 89C5                <2> 	mov bp,ax
  3738                              <2> 	
  3739 00001044 8B4602              <2> 	mov ax,[bp+2]
  3740 00001047 8B5E06              <2> 	mov bx,[bp+6]	
  3741 0000104A D1E0                <2> 	shl ax,1
  3742 0000104C D1E3                <2> 	shl bx,1
  3743 0000104E 08FC                <2> 	or ah,bh
  3744 00001050 80FC00              <2> 	cmp ah,0
  3745 00001053 7416                <2> 	jz .zero
  3746                              <2> 	
  3747 00001055 8B4602              <2> 	mov ax,[bp+2]
  3748 00001058 D1E0                <2> 	shl ax,1
  3749 0000105A 80FC00              <2> 	cmp ah,0		
  3750 0000105D 7426                <2> 	jz .value2
  3751                              <2> 	
  3752 0000105F 8B4606              <2> 	mov ax,[bp+6]
  3753 00001062 D1E0                <2> 	shl ax,1
  3754 00001064 80FC00              <2> 	cmp ah,0
  3755 00001067 740E                <2> 	jz .value1	
  3756                              <2> 		
  3757 00001069 EB28                <2> 	jmp .ok
  3758                              <2> 	
  3759                              <2> 	.zero:		
  3760 0000106B C7460A0000          <2> 		mov word [bp+0x0A],0
  3761 00001070 C7460C0000          <2> 		mov word [bp+0x0C],0
  3762 00001075 EB22                <2> 		jmp .done
  3763                              <2> 	.value1:
  3764 00001077 8B4602              <2> 		mov ax,[bp+2]
  3765 0000107A 8B5E04              <2> 		mov bx,[bp+4]
  3766 0000107D 89460A              <2> 		mov word [bp+0x0A],ax
  3767 00001080 895E0C              <2> 		mov word [bp+0x0C],bx		
  3768 00001083 EB14                <2> 		jmp .done
  3769                              <2> 	.value2:		
  3770 00001085 8B4606              <2> 		mov ax,[bp+6]
  3771 00001088 8B5E08              <2> 		mov bx,[bp+8]
  3772 0000108B 89460A              <2> 		mov word [bp+0x0A],ax
  3773 0000108E 895E0C              <2> 		mov word [bp+0x0C],bx
  3774 00001091 EB06                <2> 		jmp .done
  3775                              <2> 			
  3776                              <2> 	.ok:
  3777 00001093 C6460E01            <2> 		mov byte [bp+0x0E],1
  3778 00001097 EB04                <2> 		jmp .end
  3779                              <2> 	.done:	
  3780 00001099 C6460E00            <2> 		mov byte [bp+0x0E],0
  3781                              <2> 	.end:	
  3782                              <2> 		
  3783 0000109D C3                  <2> 	ret
  3784                              <2> 	
  3785                              <2> 
  3786                              <2> proc__cmp_validate:
  3787 0000109E 89E0                <2> 	mov ax,sp
  3788 000010A0 89C5                <2> 	mov bp,ax
  3789                              <2> 	
  3790 000010A2 8B4602              <2> 	mov ax,[bp+2]
  3791 000010A5 8B5E04              <2> 	mov bx,[bp+4]
  3792 000010A8 D1E0                <2> 	shl ax,1
  3793 000010AA D1E3                <2> 	shl bx,1
  3794                              <2> 	
  3795 000010AC 88E5                <2> 	mov ch,ah
  3796 000010AE 30FD                <2> 	xor ch,bh
  3797 000010B0 80FD00              <2> 	cmp ch,0
  3798 000010B3 743A                <2> 	jz .ok
  3799                              <2> 		
  3800 000010B5 80FC00              <2> 	cmp ah,0
  3801 000010B8 7407                <2> 	jz .zerov1
  3802                              <2> 	
  3803 000010BA 80FF00              <2> 	cmp bh,0
  3804 000010BD 7419                <2> 	jz .zerov2	
  3805                              <2> 			
  3806 000010BF EB2E                <2> 	jmp .ok
  3807                              <2> 	
  3808                              <2> 	.zerov1:
  3809 000010C1 8B4604              <2> 		mov ax,[bp+4]
  3810 000010C4 250080              <2> 		and ax,0x8000
  3811 000010C7 83F800              <2> 		cmp ax,0
  3812 000010CA 7506                <2> 		jnz .neg1
  3813 000010CC C64606FF            <2> 			mov byte [bp+6],-1
  3814 000010D0 EB04                <2> 			jmp .endcmp1
  3815                              <2> 		.neg1:
  3816 000010D2 C6460601            <2> 			mov byte [bp+6], 1
  3817                              <2> 		.endcmp1:
  3818 000010D6 EB1D                <2> 		jmp .done
  3819                              <2> 	.zerov2:		
  3820 000010D8 8B4602              <2> 		mov ax,[bp+2]
  3821 000010DB 250080              <2> 		and ax,0x8000
  3822 000010DE 83F800              <2> 		cmp ax,0
  3823 000010E1 7506                <2> 		jnz .neg2
  3824 000010E3 C6460601            <2> 			mov byte [bp+6], 1
  3825 000010E7 EB04                <2> 			jmp .endcmp2
  3826                              <2> 		.neg2:
  3827 000010E9 C64606FF            <2> 			mov byte [bp+6],-1
  3828                              <2> 		.endcmp2:
  3829 000010ED EB06                <2> 		jmp .done	
  3830                              <2> 			
  3831                              <2> 	.ok:
  3832 000010EF C6460701            <2> 		mov byte [bp+7],1
  3833 000010F3 EB04                <2> 		jmp .end
  3834                              <2> 	.done:	
  3835 000010F5 C6460700            <2> 		mov byte [bp+7],0
  3836                              <2> 	.end:	
  3837                              <2> 		
  3838 000010F9 C3                  <2> 	ret
  3839                              <2> 	
  3840                              <2> %endif
  3841                              <1> 
  3842                              <1> %macro flinvsig 1
  3843                              <1> 	flinvsig cs, %1
  3844                              <1> %endmacro
  3845                              <1> 
  3846                              <1> %macro flsetsig 1
  3847                              <1> 	flsetsig cs, %1
  3848                              <1> %endmacro
  3849                              <1> 
  3850                              <1> %macro flclrsig 1
  3851                              <1> 	flclrsig cs, %1
  3852                              <1> %endmacro
  3853                              <1> 
  3854                              <1> %macro int16tofl 2
  3855                              <1> 	int16tofl cs, %1, cs, %2
  3856                              <1> %endmacro
  3857                              <1> 
  3858                              <1> %macro fltoint16 2
  3859                              <1> 	fltoint16 cs, %1, cs, %2
  3860                              <1> %endmacro
  3861                              <1> 
  3862                              <1> %macro fltoint32 1
  3863                              <1> 	fltoint32 %1, %1
  3864                              <1> %endmacro
  3865                              <1> 
  3866                              <1> %macro fltoint32 2
  3867                              <1> 	fltoint32 cs, %1, cs, %2
  3868                              <1> %endmacro
  3869                              <1> 
  3870                              <1> %macro int32tofl 1
  3871                              <1> 	int32tofl %1, %1
  3872                              <1> %endmacro
  3873                              <1> 
  3874                              <1> %macro int32tofl 2
  3875                              <1> 	int32tofl cs, %1, cs, %2
  3876                              <1> %endmacro
  3877                              <1> 
  3878                              <1> %macro flcmp 3
  3879                              <1> 	flcmp cs, %1, cs, %2, %3
  3880                              <1> %endmacro
  3881                              <1> 
  3882                              <1> %macro flshl 1
  3883                              <1> 	flshl cs, %1
  3884                              <1> %endmacro
  3885                              <1> 
  3886                              <1> %macro flshr 1
  3887                              <1> 	flshr cs, %1
  3888                              <1> %endmacro
  3889                              <1> 
  3890                              <1> %macro fladd 3
  3891                              <1> 	fladd cs, %1, cs, %2, cs, %3
  3892                              <1> %endmacro
  3893                              <1> 
  3894                              <1> %macro flsub 3
  3895                              <1> 	flsub cs, %1, cs, %2, cs, %3
  3896                              <1> %endmacro	
  3897                              <1> 
  3898                              <1> %macro flmul 3
  3899                              <1> 	flmul cs, %1, cs, %2, cs, %3
  3900                              <1> %endmacro
  3901                              <1> 
  3902                              <1> %macro fldiv 3
  3903                              <1> 	fldiv cs, %1, cs, %2, cs, %3
  3904                              <1> %endmacro	
  3905                              <1> 
  3906                              <1> %macro fladd 6
  3907                              <1> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  3908                              <1> %endmacro
  3909                              <1> 
  3910                              <1> %macro flsub 6
  3911                              <1> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  3912                              <1> %endmacro
  3913                              <1> 
  3914                              <1> %macro fltoint16 4
  3915                              <1> 	stkopen 0x06
  3916                              <1> 	mov ax,%1
  3917                              <1> 	mov ds,ax
  3918                              <1> 	mov ax,[%2+2]
  3919                              <1> 	mov [bp+0],ax
  3920                              <1> 	mov ax,[%2]
  3921                              <1> 	mov [bp+2],ax	
  3922                              <1> 	call proc_fltoint16
  3923                              <1> 	mov ax,sp
  3924                              <1> 	mov bp,ax
  3925                              <1> 	mov ax,%3
  3926                              <1> 	mov ds,ax
  3927                              <1> 	mov ax,[bp+4]
  3928                              <1> 	mov [%4],ax
  3929                              <1> 	stkclose 0x06
  3930                              <1> %endmacro
  3931                              <1> 
  3932                              <1> %macro int16tofl 4	
  3933                              <1> 	stkopen 0x06
  3934                              <1> 	mov ax,%1
  3935                              <1> 	mov ds,ax
  3936                              <1> 	mov ax,[%2]
  3937                              <1> 	mov [bp+0],ax	
  3938                              <1> 	call proc_int16tofl
  3939                              <1> 	mov ax,sp
  3940                              <1> 	mov bp,ax
  3941                              <1> 	mov ax,%3
  3942                              <1> 	mov ds,ax
  3943                              <1> 	mov ax,[bp+2]
  3944                              <1> 	mov [%4+2],ax
  3945                              <1> 	mov ax,[bp+4]
  3946                              <1> 	mov [%4],ax
  3947                              <1> 	stkclose 0x06
  3948                              <1> %endmacro
  3949                              <1> 
  3950                              <1> %macro fltoint32 4
  3951                              <1> 	stkopen 0x08
  3952                              <1> 	mov ax,%1
  3953                              <1> 	mov ds,ax
  3954                              <1> 	mov ax,[%2+2]
  3955                              <1> 	mov [bp+0],ax
  3956                              <1> 	mov ax,[%2]
  3957                              <1> 	mov [bp+2],ax	
  3958                              <1> 	call proc_fltoint32
  3959                              <1> 	mov ax,sp
  3960                              <1> 	mov bp,ax
  3961                              <1> 	mov ax,%3
  3962                              <1> 	mov ds,ax
  3963                              <1> 	mov ax,[bp+4]
  3964                              <1> 	mov [%4+2],ax
  3965                              <1> 	mov ax,[bp+6]
  3966                              <1> 	mov [%4],ax
  3967                              <1> 	stkclose 0x08
  3968                              <1> %endmacro
  3969                              <1> 
  3970                              <1> %macro int32tofl 4
  3971                              <1> 	stkopen 0x08
  3972                              <1> 	mov ax,%1
  3973                              <1> 	mov ds,ax
  3974                              <1> 	mov ax,[%2+2]
  3975                              <1> 	mov [bp+0],ax
  3976                              <1> 	mov ax,[%2]
  3977                              <1> 	mov [bp+2],ax	
  3978                              <1> 	call proc_int32tofl
  3979                              <1> 	mov ax,sp
  3980                              <1> 	mov bp,ax
  3981                              <1> 	mov ax,%3
  3982                              <1> 	mov ds,ax
  3983                              <1> 	mov ax,[bp+4]
  3984                              <1> 	mov [%4+2],ax
  3985                              <1> 	mov ax,[bp+6]
  3986                              <1> 	mov [%4],ax
  3987                              <1> 	stkclose 0x08
  3988                              <1> %endmacro
  3989                              <1> 
  3990                              <1> %macro flinvsig 2
  3991                              <1> 	stkopen 0x02
  3992                              <1> 	mov ax,%1
  3993                              <1> 	mov ds,ax
  3994                              <1> 	mov ax,[%2+2]
  3995                              <1> 	mov word [bp+0], ax
  3996                              <1> 	call proc_flinvsig
  3997                              <1> 	push sp
  3998                              <1> 	pop bp
  3999                              <1> 	mov ax,[bp+0]
  4000                              <1> 	mov word [%2+2],ax
  4001                              <1> 	stkclose 0x02
  4002                              <1> %endmacro
  4003                              <1> 
  4004                              <1> %macro flsetsig 2
  4005                              <1> 	stkopen 0x04
  4006                              <1> 	mov ax,%1
  4007                              <1> 	mov ds,ax
  4008                              <1> 	mov ax,[%2+2]
  4009                              <1> 	mov word [bp+0], ax
  4010                              <1> 	mov word [bp+2], 0x8000
  4011                              <1> 	call proc_flsetsig
  4012                              <1> 	push sp
  4013                              <1> 	pop bp
  4014                              <1> 	mov ax,[bp+0]
  4015                              <1> 	mov word [%2+2],ax
  4016                              <1> 	stkclose 0x04	
  4017                              <1> %endmacro
  4018                              <1> 
  4019                              <1> %macro flclrsig 2
  4020                              <1> 	stkopen 0x04
  4021                              <1> 	mov ax,%1
  4022                              <1> 	mov ds,ax
  4023                              <1> 	mov ax,[%2+2]
  4024                              <1> 	mov word [bp+0], ax
  4025                              <1> 	mov word [bp+2], 0x0000
  4026                              <1> 	call proc_flsetsig
  4027                              <1> 	push sp
  4028                              <1> 	pop bp
  4029                              <1> 	mov ax,[bp+0]
  4030                              <1> 	mov word [%2+2],ax
  4031                              <1> 	stkclose 0x04	
  4032                              <1> %endmacro
  4033                              <1> 
  4034                              <1> %macro flcmp 5	
  4035                              <1> 	stkopen 0x09
  4036                              <1> 	mov ax,%1
  4037                              <1> 	mov ds,ax
  4038                              <1> 	mov ax,[%2+2]
  4039                              <1> 	mov [bp+0],ax
  4040                              <1> 	mov ax,[%2]
  4041                              <1> 	mov [bp+2],ax
  4042                              <1> 	mov ax,%3
  4043                              <1> 	mov ds,ax
  4044                              <1> 	mov ax,[%4+2]
  4045                              <1> 	mov [bp+4],ax
  4046                              <1> 	mov ax,[%4]
  4047                              <1> 	mov [bp+6],ax
  4048                              <1> 	call proc_flcmp
  4049                              <1> 	mov ax,sp
  4050                              <1> 	mov bp,ax
  4051                              <1> 	mov byte %5,[bp+8]
  4052                              <1> 	stkclose 0x09
  4053                              <1> %endmacro
  4054                              <1> 
  4055                              <1> %macro flshl 2	
  4056                              <1> 	stkopen 0x02
  4057                              <1> 	mov ax,%1
  4058                              <1> 	mov ds,ax
  4059                              <1> 	mov ax,[%2+2]
  4060                              <1> 	mov [bp+0],ax
  4061                              <1> 	call proc_flshl
  4062                              <1> 	mov ax,sp
  4063                              <1> 	mov bp,ax
  4064                              <1> 	mov ax,%1
  4065                              <1> 	mov ds,ax
  4066                              <1> 	mov ax,[bp+0]
  4067                              <1> 	mov [%2+2],ax
  4068                              <1> 	stkclose 0x02
  4069                              <1> %endmacro
  4070                              <1> 
  4071                              <1> %macro flshr 2	
  4072                              <1> 	stkopen 0x02
  4073                              <1> 	mov ax,%1
  4074                              <1> 	mov ds,ax
  4075                              <1> 	mov ax,[%2+2]
  4076                              <1> 	mov [bp+0],ax
  4077                              <1> 	call proc_flshr
  4078                              <1> 	mov ax,sp
  4079                              <1> 	mov bp,ax
  4080                              <1> 	mov ax,%1
  4081                              <1> 	mov ds,ax
  4082                              <1> 	mov ax,[bp+0]
  4083                              <1> 	mov [%2+2],ax
  4084                              <1> 	stkclose 0x02
  4085                              <1> %endmacro
  4086                              <1> 
  4087                              <1> %macro fldiv 6	
  4088                              <1> 	stkopen 0x0C
  4089                              <1> 	mov ax,%1
  4090                              <1> 	mov ds,ax
  4091                              <1> 	mov ax,[%2+2]
  4092                              <1> 	mov [bp+0],ax
  4093                              <1> 	mov ax,[%2]
  4094                              <1> 	mov [bp+2],ax
  4095                              <1> 	mov ax,%3
  4096                              <1> 	mov ds,ax
  4097                              <1> 	mov ax,[%4+2]
  4098                              <1> 	mov [bp+4],ax
  4099                              <1> 	mov ax,[%4]
  4100                              <1> 	mov [bp+6],ax
  4101                              <1> 	call proc_fldiv
  4102                              <1> 	mov ax,sp
  4103                              <1> 	mov bp,ax
  4104                              <1> 	mov ax,%5
  4105                              <1> 	mov ds,ax
  4106                              <1> 	mov ax,[bp+8]
  4107                              <1> 	mov [%6+2],ax
  4108                              <1> 	mov ax,[bp+0x0A]
  4109                              <1> 	mov [%6],ax
  4110                              <1> 	stkclose 0x0C
  4111                              <1> %endmacro
  4112                              <1> 
  4113                              <1> %macro flmul 6	
  4114                              <1> 	stkopen 0x0C
  4115                              <1> 	mov ax,%1
  4116                              <1> 	mov ds,ax
  4117                              <1> 	mov ax,[%2+2]
  4118                              <1> 	mov [bp+0],ax
  4119                              <1> 	mov ax,[%2]
  4120                              <1> 	mov [bp+2],ax
  4121                              <1> 	mov ax,%3
  4122                              <1> 	mov ds,ax
  4123                              <1> 	mov ax,[%4+2]
  4124                              <1> 	mov [bp+4],ax
  4125                              <1> 	mov ax,[%4]
  4126                              <1> 	mov [bp+6],ax
  4127                              <1> 	call proc_flmul
  4128                              <1> 	mov ax,sp
  4129                              <1> 	mov bp,ax
  4130                              <1> 	mov ax,%5
  4131                              <1> 	mov ds,ax
  4132                              <1> 	mov ax,[bp+8]
  4133                              <1> 	mov [%6+2],ax
  4134                              <1> 	mov ax,[bp+0x0A]
  4135                              <1> 	mov [%6],ax
  4136                              <1> 	stkclose 0x0C
  4137                              <1> %endmacro
  4138                              <1> 	
  4139                              <1> %macro fladdorsub 7
  4140                              <1> 	stkopen 0x0E
  4141                              <1> 	mov ax,%1
  4142                              <1> 	mov ds,ax
  4143                              <1> 	mov ax,[%2+2]
  4144                              <1> 	mov [bp+0],ax
  4145                              <1> 	mov ax,[%2]
  4146                              <1> 	mov [bp+2],ax
  4147                              <1> 	mov ax,%3
  4148                              <1> 	mov ds,ax
  4149                              <1> 	mov ax,[%4+2]
  4150                              <1> 	mov [bp+4],ax
  4151                              <1> 	mov ax,[%4]
  4152                              <1> 	mov [bp+6],ax
  4153                              <1> 	mov word [bp+0x0C], %7
  4154                              <1> 	call proc_fladdorsub
  4155                              <1> 	mov ax,sp
  4156                              <1> 	mov bp,ax
  4157                              <1> 	mov ax,%5
  4158                              <1> 	mov ds,ax
  4159                              <1> 	mov ax,[bp+8]
  4160                              <1> 	mov [%6+2],ax
  4161                              <1> 	mov ax,[bp+0x0A]
  4162                              <1> 	mov [%6],ax
  4163                              <1> 	stkclose 0x0E
  4164                              <1> %endmacro
  4165                              <1> 	
  4166                              <1> %endif
  4167                                  %include "lib/stdio.mac"
  4168                              <1> 
  4169                              <1> %ifndef STDIO_MAC
  4170                              <1> 	%define STDIO_MAC
  4171                              <1> 	
  4172                              <1> 	%include "lib/stdio.asm"
  4173                              <2> 
  4174                              <2> %ifndef STDIO_ASM
  4175                              <2> 	%define STDIO_ASM
  4176                              <2> 	
  4177                              <2> 	%include "lib/system.mac"
  4178                              <3>  
  4179                              <3> %ifndef SYSTEM_MAC
  4180                              <3>  	%define SYSTEM_MAC
  4181                              <3>  	
  4182                              <3> 	%ifndef TRUE
  4183                              <3> 		%define TRUE 01h
  4184                              <3> 	%endif
  4185                              <3> 	%ifndef FALSE
  4186                              <3> 		%define FALSE 00h
  4187                              <3> 	%endif
  4188                              <3> 	
  4189                              <3> %macro vlodsb 3
  4190                              <3> 	vlodsb cs, %1, %2, %3
  4191                              <3> %endmacro
  4192                              <3> 
  4193                              <3> %macro vstosb 3
  4194                              <3> 	vstosb cs, %1, %2, %3
  4195                              <3> %endmacro
  4196                              <3> 	 	
  4197                              <3> %macro int16toreg 2
  4198                              <3> 	int16toreg cs, %1, %2
  4199                              <3> %endmacro
  4200                              <3> 
  4201                              <3> %macro regtoint16 2
  4202                              <3> 	regtoint16 %1, cs, %2
  4203                              <3> %endmacro
  4204                              <3> 
  4205                              <3> %macro vstosb 4
  4206                              <3> 	push %1
  4207                              <3> 	pop ds
  4208                              <3> 	mov si,%2
  4209                              <3> 	add si,%3
  4210                              <3> 	mov byte [si],%4	
  4211                              <3> %endmacro
  4212                              <3> 
  4213                              <3> %macro vlodsb 4
  4214                              <3> 	push %1
  4215                              <3> 	pop ds
  4216                              <3> 	mov si,%2
  4217                              <3> 	add si,%3
  4218                              <3> 	mov byte %4,[si]	
  4219                              <3> %endmacro 	 
  4220                              <3> 
  4221                              <3> %macro int16toreg 3
  4222                              <3> 	push %2
  4223                              <3> 	push %1
  4224                              <3> 	pop ds
  4225                              <3> 	pop si
  4226                              <3> 	mov word %3,[si]	
  4227                              <3> %endmacro
  4228                              <3> 
  4229                              <3> %macro regtoint16 3
  4230                              <3> 	push %3
  4231                              <3> 	push %2
  4232                              <3> 	pop ds
  4233                              <3> 	pop si
  4234                              <3> 	mov word [si],%1	
  4235                              <3> %endmacro
  4236                              <3> 
  4237                              <3> %macro mov32 2
  4238                              <3> 	mov32 cs, %1, cs, %2
  4239                              <3> %endmacro
  4240                              <3> 
  4241                              <3> %macro mov16 2
  4242                              <3> 	mov16 cs, %1, cs, %2
  4243                              <3> %endmacro
  4244                              <3> 
  4245                              <3> %macro mov32 4
  4246                              <3> 	mov ax,%3
  4247                              <3> 	mov ds,ax
  4248                              <3> 	mov cx,[%4+2]
  4249                              <3> 	mov dx,[%4]
  4250                              <3> 	mov ax,%1
  4251                              <3> 	mov ds,ax
  4252                              <3> 	mov [%2+2],cx
  4253                              <3> 	mov [%2],dx
  4254                              <3> %endmacro
  4255                              <3> 
  4256                              <3> %macro mov16 4
  4257                              <3> 	mov ax,%3
  4258                              <3> 	mov ds,ax
  4259                              <3> 	mov bx,[%4]
  4260                              <3> 	mov ax,%1
  4261                              <3> 	mov ds,ax
  4262                              <3> 	mov [%2],bx
  4263                              <3> %endmacro
  4264                              <3>  	 	
  4265                              <3> %macro mformat 4
  4266                              <3> 	stkopen 8
  4267                              <3> 	mov word [ bp + 0 ], %1
  4268                              <3> 	mov word [ bp + 2 ], %2
  4269                              <3> 	mov word [ bp + 4 ], %3
  4270                              <3> 	mov word [ bp + 6 ], %4
  4271                              <3> 	call kernel_segment:mformat
  4272                              <3> 	stkclose 8
  4273                              <3> %endmacro
  4274                              <3> 
  4275                              <3> %macro malloc 6
  4276                              <3> 	stkopen 0Bh
  4277                              <3> 	mov word [ bp + 4 ], %3
  4278                              <3> 	mov word [ bp + 6 ], %4
  4279                              <3> 	mov word [ bp + 8 ], %5	
  4280                              <3> 	call kernel_segment:malloc
  4281                              <3> 	push sp
  4282                              <3> 	pop bp
  4283                              <3> 	mov word %1, [ bp ]
  4284                              <3> 	mov word %2, [ bp + 2 ]
  4285                              <3> 	mov byte %6, [ bp + 0x0A ]
  4286                              <3> 	stkclose 0Bh
  4287                              <3> %endmacro 	
  4288                              <3> 
  4289                              <3> %macro laddr 2
  4290                              <3> 	laddr %1, %2, %1, %2
  4291                              <3> %endmacro
  4292                              <3> 
  4293                              <3> %macro faddr 2
  4294                              <3> 	faddr %1, %2, %1, %2
  4295                              <3> %endmacro
  4296                              <3>  	
  4297                              <3> %macro laddr 4
  4298                              <3> 	stkopen 8
  4299                              <3> 	mov word [ bp + 4 ], %3
  4300                              <3> 	mov word [ bp + 6 ], %4	
  4301                              <3> 	call kernel_segment:laddr
  4302                              <3> 	push sp
  4303                              <3> 	pop bp
  4304                              <3> 	mov word %1, [ bp + 0 ]
  4305                              <3> 	mov word %2, [ bp + 2 ]	
  4306                              <3> 	stkclose 8
  4307                              <3> %endmacro
  4308                              <3> 
  4309                              <3> %macro faddr 4
  4310                              <3> 	stkopen 8
  4311                              <3> 	mov word [ bp + 4 ], %3
  4312                              <3> 	mov word [ bp + 6 ], %4	
  4313                              <3> 	call kernel_segment:faddr
  4314                              <3> 	push sp
  4315                              <3> 	pop bp
  4316                              <3> 	mov word %1, [ bp + 0 ]
  4317                              <3> 	mov word %2, [ bp + 2 ]	
  4318                              <3> 	stkclose 8
  4319                              <3> %endmacro	
  4320                              <3>  
  4321                              <3> 
  4322                              <3> %macro stkopen 1		
  4323                              <3> 	sub word sp, %1
  4324                              <3> 	push sp
  4325                              <3> 	pop bp
  4326                              <3> %endmacro
  4327                              <3> 
  4328                              <3> %macro stkclose 1
  4329                              <3> 	add word sp, %1
  4330                              <3> %endmacro
  4331                              <3> 
  4332                              <3> %macro stkload 1-* 	
  4333                              <3>  	%rep %0
  4334                              <3>  	 	%rotate -1
  4335                              <3>  		pop %1
  4336                              <3>  	%endrep
  4337                              <3>  	%rep %0
  4338                              <3>  		push %1
  4339                              <3>  		%rotate 1
  4340                              <3>  	%endrep
  4341                              <3> %endmacro
  4342                              <3> 
  4343                              <3> %macro stkpush 1-* 	
  4344                              <3>  	%rep %0
  4345                              <3>  		push %1
  4346                              <3>  		%rotate 1
  4347                              <3>  	%endrep 	
  4348                              <3> %endmacro
  4349                              <3>  
  4350                              <3> %macro stkpop 1-*
  4351                              <3>  	%rep %0
  4352                              <3>  	 	%rotate -1
  4353                              <3>  		pop %1
  4354                              <3>  	%endrep 	 	
  4355                              <3> %endmacro
  4356                              <3> 
  4357                              <3> %endif 
  4358                              <2> 	
  4359                              <2> %macro __prtch 1	
  4360                              <2> 	stkopen 1	
  4361                              <2> 	mov byte [ bp ], %1
  4362                              <2> 	call proc_prtch
  4363                              <2> 	stkclose 1
  4364                              <2> %endmacro
  4365                              <2> 
  4366                              <2> %macro __prtln 0
  4367                              <2> 	call proc_prtln
  4368                              <2> %endmacro	
  4369                              <2> 
  4370                              <2> %macro __prtsubbin8 3
  4371                              <2> 	stkopen 3
  4372                              <2> 	mov byte [bp+0],%1
  4373                              <2> 	mov byte [bp+1],%2
  4374                              <2> 	mov byte [bp+2],%3
  4375                              <2> 	call proc_prtsubbin8
  4376                              <2> 	stkclose 3
  4377                              <2> %endmacro
  4378                              <2> 	
  4379                              <2> section .data
  4380                              <2> 	
  4381                              <2> proc_prtIEEE754:
  4382 000010FA 89E0                <2> 	mov ax,sp
  4383 000010FC 89C5                <2> 	mov bp,ax			
  4384 000010FE 8B4602              <2> 	mov ax,[bp+2]	
  4385 00001101 50                  <2> 	push ax
  4386 00001102 50                  <2> 	push ax
  4387 00001103 50                  <2> 	push ax
  4388 00001104 50                  <2> 	push ax	
  4389 00001105 50                  <2> 	push ax
  4390                              <2> 	
  4391                              <2> 	__prtsubbin8 ah,0,1
  4392                              <3>  stkopen 3
  4393 00001106 83EC03              <4>  sub word sp, %1
  4394 00001109 54                  <4>  push sp
  4395 0000110A 5D                  <4>  pop bp
  4396 0000110B 886600              <3>  mov byte [bp+0],%1
  4397 0000110E C6460100            <3>  mov byte [bp+1],%2
  4398 00001112 C6460201            <3>  mov byte [bp+2],%3
  4399 00001116 E87201              <3>  call proc_prtsubbin8
  4400                              <3>  stkclose 3
  4401 00001119 83C403              <4>  add word sp, %1
  4402                              <2> 	__prtch 20h
  4403                              <3>  stkopen 1
  4404 0000111C 83EC01              <4>  sub word sp, %1
  4405 0000111F 54                  <4>  push sp
  4406 00001120 5D                  <4>  pop bp
  4407 00001121 C6460020            <3>  mov byte [ bp ], %1
  4408 00001125 E82004              <3>  call proc_prtch
  4409                              <3>  stkclose 1
  4410 00001128 83C401              <4>  add word sp, %1
  4411                              <2> 	__prtch 20h
  4412                              <3>  stkopen 1
  4413 0000112B 83EC01              <4>  sub word sp, %1
  4414 0000112E 54                  <4>  push sp
  4415 0000112F 5D                  <4>  pop bp
  4416 00001130 C6460020            <3>  mov byte [ bp ], %1
  4417 00001134 E81104              <3>  call proc_prtch
  4418                              <3>  stkclose 1
  4419 00001137 83C401              <4>  add word sp, %1
  4420 0000113A 58                  <2> 	pop ax
  4421                              <2> 	__prtsubbin8 ah,1,5
  4422                              <3>  stkopen 3
  4423 0000113B 83EC03              <4>  sub word sp, %1
  4424 0000113E 54                  <4>  push sp
  4425 0000113F 5D                  <4>  pop bp
  4426 00001140 886600              <3>  mov byte [bp+0],%1
  4427 00001143 C6460101            <3>  mov byte [bp+1],%2
  4428 00001147 C6460205            <3>  mov byte [bp+2],%3
  4429 0000114B E83D01              <3>  call proc_prtsubbin8
  4430                              <3>  stkclose 3
  4431 0000114E 83C403              <4>  add word sp, %1
  4432 00001151 58                  <2> 	pop ax
  4433                              <2> 	__prtsubbin8 ah,5,8
  4434                              <3>  stkopen 3
  4435 00001152 83EC03              <4>  sub word sp, %1
  4436 00001155 54                  <4>  push sp
  4437 00001156 5D                  <4>  pop bp
  4438 00001157 886600              <3>  mov byte [bp+0],%1
  4439 0000115A C6460105            <3>  mov byte [bp+1],%2
  4440 0000115E C6460208            <3>  mov byte [bp+2],%3
  4441 00001162 E82601              <3>  call proc_prtsubbin8
  4442                              <3>  stkclose 3
  4443 00001165 83C403              <4>  add word sp, %1
  4444                              <2> 	
  4445 00001168 58                  <2> 	pop ax
  4446                              <2> 	__prtsubbin8 al,0,1
  4447                              <3>  stkopen 3
  4448 00001169 83EC03              <4>  sub word sp, %1
  4449 0000116C 54                  <4>  push sp
  4450 0000116D 5D                  <4>  pop bp
  4451 0000116E 884600              <3>  mov byte [bp+0],%1
  4452 00001171 C6460100            <3>  mov byte [bp+1],%2
  4453 00001175 C6460201            <3>  mov byte [bp+2],%3
  4454 00001179 E80F01              <3>  call proc_prtsubbin8
  4455                              <3>  stkclose 3
  4456 0000117C 83C403              <4>  add word sp, %1
  4457                              <2> 	__prtch 20h
  4458                              <3>  stkopen 1
  4459 0000117F 83EC01              <4>  sub word sp, %1
  4460 00001182 54                  <4>  push sp
  4461 00001183 5D                  <4>  pop bp
  4462 00001184 C6460020            <3>  mov byte [ bp ], %1
  4463 00001188 E8BD03              <3>  call proc_prtch
  4464                              <3>  stkclose 1
  4465 0000118B 83C401              <4>  add word sp, %1
  4466                              <2> 	__prtch 20h
  4467                              <3>  stkopen 1
  4468 0000118E 83EC01              <4>  sub word sp, %1
  4469 00001191 54                  <4>  push sp
  4470 00001192 5D                  <4>  pop bp
  4471 00001193 C6460020            <3>  mov byte [ bp ], %1
  4472 00001197 E8AE03              <3>  call proc_prtch
  4473                              <3>  stkclose 1
  4474 0000119A 83C401              <4>  add word sp, %1
  4475 0000119D 58                  <2> 	pop ax
  4476                              <2> 	__prtsubbin8 al,1,4
  4477                              <3>  stkopen 3
  4478 0000119E 83EC03              <4>  sub word sp, %1
  4479 000011A1 54                  <4>  push sp
  4480 000011A2 5D                  <4>  pop bp
  4481 000011A3 884600              <3>  mov byte [bp+0],%1
  4482 000011A6 C6460101            <3>  mov byte [bp+1],%2
  4483 000011AA C6460204            <3>  mov byte [bp+2],%3
  4484 000011AE E8DA00              <3>  call proc_prtsubbin8
  4485                              <3>  stkclose 3
  4486 000011B1 83C403              <4>  add word sp, %1
  4487                              <2> 	__prtch 20h
  4488                              <3>  stkopen 1
  4489 000011B4 83EC01              <4>  sub word sp, %1
  4490 000011B7 54                  <4>  push sp
  4491 000011B8 5D                  <4>  pop bp
  4492 000011B9 C6460020            <3>  mov byte [ bp ], %1
  4493 000011BD E88803              <3>  call proc_prtch
  4494                              <3>  stkclose 1
  4495 000011C0 83C401              <4>  add word sp, %1
  4496 000011C3 58                  <2> 	pop ax
  4497                              <2> 	__prtsubbin8 al,4,8
  4498                              <3>  stkopen 3
  4499 000011C4 83EC03              <4>  sub word sp, %1
  4500 000011C7 54                  <4>  push sp
  4501 000011C8 5D                  <4>  pop bp
  4502 000011C9 884600              <3>  mov byte [bp+0],%1
  4503 000011CC C6460104            <3>  mov byte [bp+1],%2
  4504 000011D0 C6460208            <3>  mov byte [bp+2],%3
  4505 000011D4 E8B400              <3>  call proc_prtsubbin8
  4506                              <3>  stkclose 3
  4507 000011D7 83C403              <4>  add word sp, %1
  4508                              <2> 	__prtch 20h
  4509                              <3>  stkopen 1
  4510 000011DA 83EC01              <4>  sub word sp, %1
  4511 000011DD 54                  <4>  push sp
  4512 000011DE 5D                  <4>  pop bp
  4513 000011DF C6460020            <3>  mov byte [ bp ], %1
  4514 000011E3 E86203              <3>  call proc_prtch
  4515                              <3>  stkclose 1
  4516 000011E6 83C401              <4>  add word sp, %1
  4517                              <2> 	
  4518 000011E9 89E0                <2> 	mov ax,sp
  4519 000011EB 89C5                <2> 	mov bp,ax			
  4520 000011ED 8B4604              <2> 	mov ax,[bp+4]
  4521 000011F0 50                  <2> 	push ax
  4522 000011F1 50                  <2> 	push ax
  4523 000011F2 50                  <2> 	push ax
  4524                              <2> 	
  4525                              <2> 	__prtsubbin8 ah,0,4
  4526                              <3>  stkopen 3
  4527 000011F3 83EC03              <4>  sub word sp, %1
  4528 000011F6 54                  <4>  push sp
  4529 000011F7 5D                  <4>  pop bp
  4530 000011F8 886600              <3>  mov byte [bp+0],%1
  4531 000011FB C6460100            <3>  mov byte [bp+1],%2
  4532 000011FF C6460204            <3>  mov byte [bp+2],%3
  4533 00001203 E88500              <3>  call proc_prtsubbin8
  4534                              <3>  stkclose 3
  4535 00001206 83C403              <4>  add word sp, %1
  4536                              <2> 	__prtch 20h
  4537                              <3>  stkopen 1
  4538 00001209 83EC01              <4>  sub word sp, %1
  4539 0000120C 54                  <4>  push sp
  4540 0000120D 5D                  <4>  pop bp
  4541 0000120E C6460020            <3>  mov byte [ bp ], %1
  4542 00001212 E83303              <3>  call proc_prtch
  4543                              <3>  stkclose 1
  4544 00001215 83C401              <4>  add word sp, %1
  4545 00001218 58                  <2> 	pop ax
  4546                              <2> 	__prtsubbin8 ah,4,8
  4547                              <3>  stkopen 3
  4548 00001219 83EC03              <4>  sub word sp, %1
  4549 0000121C 54                  <4>  push sp
  4550 0000121D 5D                  <4>  pop bp
  4551 0000121E 886600              <3>  mov byte [bp+0],%1
  4552 00001221 C6460104            <3>  mov byte [bp+1],%2
  4553 00001225 C6460208            <3>  mov byte [bp+2],%3
  4554 00001229 E85F00              <3>  call proc_prtsubbin8
  4555                              <3>  stkclose 3
  4556 0000122C 83C403              <4>  add word sp, %1
  4557                              <2> 	__prtch 20h
  4558                              <3>  stkopen 1
  4559 0000122F 83EC01              <4>  sub word sp, %1
  4560 00001232 54                  <4>  push sp
  4561 00001233 5D                  <4>  pop bp
  4562 00001234 C6460020            <3>  mov byte [ bp ], %1
  4563 00001238 E80D03              <3>  call proc_prtch
  4564                              <3>  stkclose 1
  4565 0000123B 83C401              <4>  add word sp, %1
  4566                              <2> 	
  4567 0000123E 58                  <2> 	pop ax
  4568                              <2> 	__prtsubbin8 al,0,4
  4569                              <3>  stkopen 3
  4570 0000123F 83EC03              <4>  sub word sp, %1
  4571 00001242 54                  <4>  push sp
  4572 00001243 5D                  <4>  pop bp
  4573 00001244 884600              <3>  mov byte [bp+0],%1
  4574 00001247 C6460100            <3>  mov byte [bp+1],%2
  4575 0000124B C6460204            <3>  mov byte [bp+2],%3
  4576 0000124F E83900              <3>  call proc_prtsubbin8
  4577                              <3>  stkclose 3
  4578 00001252 83C403              <4>  add word sp, %1
  4579                              <2> 	__prtch 20h
  4580                              <3>  stkopen 1
  4581 00001255 83EC01              <4>  sub word sp, %1
  4582 00001258 54                  <4>  push sp
  4583 00001259 5D                  <4>  pop bp
  4584 0000125A C6460020            <3>  mov byte [ bp ], %1
  4585 0000125E E8E702              <3>  call proc_prtch
  4586                              <3>  stkclose 1
  4587 00001261 83C401              <4>  add word sp, %1
  4588 00001264 58                  <2> 	pop ax
  4589                              <2> 	__prtsubbin8 al,4,8
  4590                              <3>  stkopen 3
  4591 00001265 83EC03              <4>  sub word sp, %1
  4592 00001268 54                  <4>  push sp
  4593 00001269 5D                  <4>  pop bp
  4594 0000126A 884600              <3>  mov byte [bp+0],%1
  4595 0000126D C6460104            <3>  mov byte [bp+1],%2
  4596 00001271 C6460208            <3>  mov byte [bp+2],%3
  4597 00001275 E81300              <3>  call proc_prtsubbin8
  4598                              <3>  stkclose 3
  4599 00001278 83C403              <4>  add word sp, %1
  4600                              <2> 	__prtch 20h
  4601                              <3>  stkopen 1
  4602 0000127B 83EC01              <4>  sub word sp, %1
  4603 0000127E 54                  <4>  push sp
  4604 0000127F 5D                  <4>  pop bp
  4605 00001280 C6460020            <3>  mov byte [ bp ], %1
  4606 00001284 E8C102              <3>  call proc_prtch
  4607                              <3>  stkclose 1
  4608 00001287 83C401              <4>  add word sp, %1
  4609                              <2> 	
  4610 0000128A C3                  <2> 	ret
  4611                              <2> 	
  4612                              <2> proc_prtsubbin8:
  4613 0000128B 89E0                <2> 	mov ax,sp
  4614 0000128D 89C5                <2> 	mov bp,ax
  4615                              <2> 	
  4616 0000128F 8A4602              <2> 	mov al,[bp+2]
  4617 00001292 50                  <2> 	push ax
  4618                              <2> 	
  4619 00001293 8A4E03              <2> 	mov cl,[bp+3]
  4620 00001296 8A6E04              <2> 	mov ch,[bp+4]
  4621 00001299 80FD08              <2> 	cmp ch,8
  4622 0000129C 7602                <2> 	jbe .l1	
  4623 0000129E B508                <2> 		mov ch,8
  4624                              <2> 	.l1:		
  4625 000012A0 38E9                <2> 		cmp cl,ch		
  4626 000012A2 731D                <2> 		jae .l2
  4627                              <2> 		
  4628 000012A4 58                  <2> 		pop ax
  4629 000012A5 50                  <2> 		push ax
  4630 000012A6 D2E0                <2> 		shl al,cl
  4631 000012A8 C0E807              <2> 		shr al,7		
  4632 000012AB 0430                <2> 		add al,30h
  4633                              <2> 		
  4634 000012AD 51                  <2> 		push cx
  4635                              <2> 		__prtch al
  4636                              <3>  stkopen 1
  4637 000012AE 83EC01              <4>  sub word sp, %1
  4638 000012B1 54                  <4>  push sp
  4639 000012B2 5D                  <4>  pop bp
  4640 000012B3 884600              <3>  mov byte [ bp ], %1
  4641 000012B6 E88F02              <3>  call proc_prtch
  4642                              <3>  stkclose 1
  4643 000012B9 83C401              <4>  add word sp, %1
  4644 000012BC 59                  <2> 		pop cx
  4645                              <2> 		
  4646 000012BD FEC1                <2> 		inc cl
  4647 000012BF EBDF                <2> 		jmp .l1
  4648                              <2> 	.l2:	
  4649 000012C1 58                  <2> 	pop ax
  4650                              <2> 	
  4651 000012C2 C3                  <2> 	ret
  4652                              <2> 	
  4653                              <2> proc_prtbin16:
  4654 000012C3 89E0                <2> 	mov ax,sp
  4655 000012C5 89C5                <2> 	mov bp,ax
  4656                              <2> 		
  4657 000012C7 8A7E04              <2> 	mov bh, [bp+4]
  4658 000012CA B300                <2> 	mov bl,0
  4659 000012CC B201                <2> 	mov dl,TRUE
  4660 000012CE 30ED                <2> 	xor ch,ch
  4661 000012D0 B102                <2> 	mov cl,2
  4662                              <2> 	.l1:
  4663 000012D2 80F900              <2> 		cmp cl,0
  4664 000012D5 744B                <2> 		jz .l2		
  4665                              <2> 		
  4666 000012D7 55                  <2> 		push bp
  4667 000012D8 01CD                <2> 		add bp,cx
  4668 000012DA 45                  <2> 		inc bp
  4669                              <2> 		
  4670 000012DB 0A5E00              <2> 		or byte bl, [bp]
  4671 000012DE 08FB                <2> 		or byte bl, bh
  4672 000012E0 743B                <2> 		jz .prted											
  4673 000012E2 53                  <2> 			push bx
  4674 000012E3 51                  <2> 			push cx	
  4675 000012E4 80FA01              <2> 			cmp dl, TRUE
  4676 000012E7 7402                <2> 			je .first
  4677 000012E9 EB10                <2> 			jmp .nfirst
  4678                              <2> 			.first:
  4679 000012EB B200                <2> 				mov dl, FALSE
  4680 000012ED 52                  <2> 				push dx
  4681                              <2> 				
  4682 000012EE 88FC                <2> 				mov ah, bh
  4683 000012F0 8A4600              <2> 				mov byte al, [bp]
  4684 000012F3 50                  <2> 				push ax
  4685 000012F4 E84000              <2> 				call proc_prtbin8
  4686 000012F7 58                  <2> 				pop ax
  4687                              <2> 							
  4688 000012F8 5A                  <2> 				pop dx
  4689 000012F9 EB0C                <2> 				jmp .endfirst
  4690                              <2> 			.nfirst:
  4691 000012FB 52                  <2> 				push dx
  4692                              <2> 				
  4693 000012FC B401                <2> 				mov ah, TRUE
  4694 000012FE 8A4600              <2> 				mov byte al, [bp]
  4695 00001301 50                  <2> 				push ax
  4696 00001302 E83200              <2> 				call proc_prtbin8
  4697 00001305 58                  <2> 				pop ax
  4698                              <2> 								
  4699 00001306 5A                  <2> 				pop dx
  4700                              <2> 			.endfirst:	
  4701 00001307 59                  <2> 			pop cx
  4702 00001308 5B                  <2> 			pop bx		
  4703                              <2> 			
  4704 00001309 80F901              <2> 			cmp cl,1
  4705 0000130C 760F                <2> 			jbe .spaceprted
  4706                              <2> 				__prtch 20h
  4707                              <3>  stkopen 1
  4708 0000130E 83EC01              <4>  sub word sp, %1
  4709 00001311 54                  <4>  push sp
  4710 00001312 5D                  <4>  pop bp
  4711 00001313 C6460020            <3>  mov byte [ bp ], %1
  4712 00001317 E82E02              <3>  call proc_prtch
  4713                              <3>  stkclose 1
  4714 0000131A 83C401              <4>  add word sp, %1
  4715                              <2> 			.spaceprted:
  4716                              <2> 		.prted:
  4717                              <2> 		
  4718 0000131D 5D                  <2> 		pop bp
  4719                              <2> 		
  4720 0000131E FEC9                <2> 		dec cl
  4721 00001320 EBB0                <2> 		jmp .l1
  4722                              <2> 	.l2:
  4723                              <2> 	
  4724 00001322 80FB00              <2> 	cmp bl,0
  4725 00001325 750F                <2> 	jnz .end
  4726                              <2> 		__prtch 30h
  4727                              <3>  stkopen 1
  4728 00001327 83EC01              <4>  sub word sp, %1
  4729 0000132A 54                  <4>  push sp
  4730 0000132B 5D                  <4>  pop bp
  4731 0000132C C6460030            <3>  mov byte [ bp ], %1
  4732 00001330 E81502              <3>  call proc_prtch
  4733                              <3>  stkclose 1
  4734 00001333 83C401              <4>  add word sp, %1
  4735                              <2> 	.end:
  4736                              <2> 	
  4737 00001336 C3                  <2> 	ret	
  4738                              <2> 	
  4739                              <2> proc_prtbin8:
  4740 00001337 89E0                <2> 	mov ax,sp
  4741 00001339 89C5                <2> 	mov bp,ax
  4742 0000133B 8A4602              <2> 	mov byte al, [bp+2]
  4743 0000133E 3C00                <2> 	cmp al, 0
  4744 00001340 0F858700            <2> 	jnz .nzero
  4745                              <2> 		__prtch 30h
  4746                              <3>  stkopen 1
  4747 00001344 83EC01              <4>  sub word sp, %1
  4748 00001347 54                  <4>  push sp
  4749 00001348 5D                  <4>  pop bp
  4750 00001349 C6460030            <3>  mov byte [ bp ], %1
  4751 0000134D E8F801              <3>  call proc_prtch
  4752                              <3>  stkclose 1
  4753 00001350 83C401              <4>  add word sp, %1
  4754                              <2> 		
  4755 00001353 89E0                <2> 		mov ax,sp
  4756 00001355 89C5                <2> 		mov bp,ax
  4757 00001357 8A4603              <2> 		mov byte al, [bp+3]		
  4758 0000135A 3C00                <2> 		cmp al, FALSE
  4759 0000135C 0F84C500            <2> 		je .end
  4760                              <2> 			__prtch 30h
  4761                              <3>  stkopen 1
  4762 00001360 83EC01              <4>  sub word sp, %1
  4763 00001363 54                  <4>  push sp
  4764 00001364 5D                  <4>  pop bp
  4765 00001365 C6460030            <3>  mov byte [ bp ], %1
  4766 00001369 E8DC01              <3>  call proc_prtch
  4767                              <3>  stkclose 1
  4768 0000136C 83C401              <4>  add word sp, %1
  4769                              <2> 			__prtch 30h
  4770                              <3>  stkopen 1
  4771 0000136F 83EC01              <4>  sub word sp, %1
  4772 00001372 54                  <4>  push sp
  4773 00001373 5D                  <4>  pop bp
  4774 00001374 C6460030            <3>  mov byte [ bp ], %1
  4775 00001378 E8CD01              <3>  call proc_prtch
  4776                              <3>  stkclose 1
  4777 0000137B 83C401              <4>  add word sp, %1
  4778                              <2> 			__prtch 30h
  4779                              <3>  stkopen 1
  4780 0000137E 83EC01              <4>  sub word sp, %1
  4781 00001381 54                  <4>  push sp
  4782 00001382 5D                  <4>  pop bp
  4783 00001383 C6460030            <3>  mov byte [ bp ], %1
  4784 00001387 E8BE01              <3>  call proc_prtch
  4785                              <3>  stkclose 1
  4786 0000138A 83C401              <4>  add word sp, %1
  4787                              <2> 			__prtch 30h
  4788                              <3>  stkopen 1
  4789 0000138D 83EC01              <4>  sub word sp, %1
  4790 00001390 54                  <4>  push sp
  4791 00001391 5D                  <4>  pop bp
  4792 00001392 C6460030            <3>  mov byte [ bp ], %1
  4793 00001396 E8AF01              <3>  call proc_prtch
  4794                              <3>  stkclose 1
  4795 00001399 83C401              <4>  add word sp, %1
  4796                              <2> 			__prtch 30h
  4797                              <3>  stkopen 1
  4798 0000139C 83EC01              <4>  sub word sp, %1
  4799 0000139F 54                  <4>  push sp
  4800 000013A0 5D                  <4>  pop bp
  4801 000013A1 C6460030            <3>  mov byte [ bp ], %1
  4802 000013A5 E8A001              <3>  call proc_prtch
  4803                              <3>  stkclose 1
  4804 000013A8 83C401              <4>  add word sp, %1
  4805                              <2> 			__prtch 30h
  4806                              <3>  stkopen 1
  4807 000013AB 83EC01              <4>  sub word sp, %1
  4808 000013AE 54                  <4>  push sp
  4809 000013AF 5D                  <4>  pop bp
  4810 000013B0 C6460030            <3>  mov byte [ bp ], %1
  4811 000013B4 E89101              <3>  call proc_prtch
  4812                              <3>  stkclose 1
  4813 000013B7 83C401              <4>  add word sp, %1
  4814                              <2> 			__prtch 30h
  4815                              <3>  stkopen 1
  4816 000013BA 83EC01              <4>  sub word sp, %1
  4817 000013BD 54                  <4>  push sp
  4818 000013BE 5D                  <4>  pop bp
  4819 000013BF C6460030            <3>  mov byte [ bp ], %1
  4820 000013C3 E88201              <3>  call proc_prtch
  4821                              <3>  stkclose 1
  4822 000013C6 83C401              <4>  add word sp, %1
  4823 000013C9 EB5A                <2> 			jmp .end		
  4824                              <2> 	.nzero:
  4825                              <2> 
  4826 000013CB B000                <2> 	mov byte al, FALSE
  4827 000013CD 50                  <2> 	push ax
  4828                              <2> 
  4829 000013CE 89E0                <2> 	mov ax,sp
  4830 000013D0 89C5                <2> 	mov bp,ax
  4831 000013D2 8A5E04              <2> 	mov byte bl, [bp+4]
  4832 000013D5 B100                <2> 	mov cl,0
  4833                              <2> 	.l1:
  4834 000013D7 80F908              <2> 		cmp cl,8
  4835 000013DA 7348                <2> 		jae .l2
  4836                              <2> 		
  4837 000013DC 88C8                <2> 		mov al,cl
  4838                              <2> 		
  4839 000013DE 88DA                <2> 		mov dl, bl		
  4840                              <2> 		
  4841                              <2> 		.l1.1:
  4842 000013E0 3C00                <2> 			cmp al,0
  4843 000013E2 7406                <2> 			jz .l1.2
  4844                              <2> 							
  4845 000013E4 D0E2                <2> 			shl dl,1
  4846                              <2> 			
  4847 000013E6 FEC8                <2> 			dec al
  4848 000013E8 EBF6                <2> 			jmp .l1.1
  4849                              <2> 		.l1.2:
  4850                              <2> 						
  4851 000013EA C0EA07              <2> 		shr dl,7
  4852                              <2> 		
  4853 000013ED 89E0                <2> 		mov ax,sp
  4854 000013EF 89C5                <2> 		mov bp,ax			
  4855 000013F1 8A4605              <2> 		mov byte al, [bp+5]
  4856 000013F4 3C01                <2> 		cmp al, TRUE
  4857 000013F6 7413                <2> 		je .endzero		
  4858 000013F8 80FA00              <2> 			cmp dl,0
  4859 000013FB 7402                <2> 			jz .zero
  4860 000013FD EB08                <2> 			jmp .notzero
  4861                              <2> 			.zero:
  4862 000013FF 58                  <2> 				pop ax
  4863 00001400 50                  <2> 				push ax
  4864 00001401 3C01                <2> 				cmp al, TRUE				
  4865 00001403 7406                <2> 				je .endzero
  4866 00001405 EB19                <2> 				jmp .inc
  4867                              <2> 			.notzero:
  4868 00001407 58                  <2> 				pop ax
  4869 00001408 B001                <2> 				mov al, TRUE	
  4870 0000140A 50                  <2> 				push ax				
  4871                              <2> 		.endzero:
  4872                              <2> 									
  4873 0000140B 80C230              <2> 		add dl,30h
  4874                              <2> 
  4875 0000140E 51                  <2> 		push cx
  4876 0000140F 52                  <2> 		push dx
  4877                              <2> 		__prtch dl
  4878                              <3>  stkopen 1
  4879 00001410 83EC01              <4>  sub word sp, %1
  4880 00001413 54                  <4>  push sp
  4881 00001414 5D                  <4>  pop bp
  4882 00001415 885600              <3>  mov byte [ bp ], %1
  4883 00001418 E82D01              <3>  call proc_prtch
  4884                              <3>  stkclose 1
  4885 0000141B 83C401              <4>  add word sp, %1
  4886 0000141E 5A                  <2> 		pop dx
  4887 0000141F 59                  <2> 		pop cx	
  4888                              <2> 
  4889                              <2> 		.inc:
  4890                              <2> 	
  4891 00001420 FEC1                <2> 		inc cl
  4892 00001422 EBB3                <2> 		jmp .l1	
  4893                              <2> 	.l2:
  4894                              <2> 	
  4895 00001424 58                  <2> 	pop ax
  4896                              <2> 	
  4897                              <2> 	.end:
  4898                              <2> 	
  4899 00001425 C3                  <2> 	ret	
  4900                              <2> 
  4901                              <2> proc_prthex16:
  4902 00001426 89E0                <2> 	mov ax,sp
  4903 00001428 89C5                <2> 	mov bp,ax
  4904                              <2> 
  4905 0000142A 8A7E04              <2> 	mov byte bh, [bp+4]		
  4906 0000142D B300                <2> 	mov bl,0	
  4907 0000142F B201                <2> 	mov dl,TRUE
  4908 00001431 30ED                <2> 	xor ch,ch
  4909 00001433 B102                <2> 	mov cl, 2	
  4910                              <2> 	.l1:			
  4911 00001435 80F900              <2> 		cmp cl,0
  4912 00001438 7437                <2> 		jz .l2
  4913                              <2> 							
  4914 0000143A 55                  <2> 		push bp		
  4915 0000143B 01CD                <2> 		add bp,cx
  4916 0000143D 45                  <2> 		inc bp		
  4917                              <2> 		
  4918 0000143E 0A5E00              <2> 		or byte bl, [bp]
  4919 00001441 08FB                <2> 		or byte bl, bh
  4920 00001443 7427                <2> 		jz .prted							
  4921 00001445 53                  <2> 			push bx
  4922 00001446 51                  <2> 			push cx	
  4923 00001447 80FA01              <2> 			cmp dl, TRUE
  4924 0000144A 7402                <2> 			je .first
  4925 0000144C EB10                <2> 			jmp .nfirst
  4926                              <2> 			.first:
  4927 0000144E B200                <2> 				mov dl, FALSE
  4928 00001450 52                  <2> 				push dx
  4929                              <2> 				
  4930 00001451 88FC                <2> 				mov ah, bh
  4931 00001453 8A4600              <2> 				mov byte al, [bp]
  4932 00001456 50                  <2> 				push ax
  4933 00001457 E82C00              <2> 				call proc_prthex8
  4934 0000145A 58                  <2> 				pop ax
  4935                              <2> 							
  4936 0000145B 5A                  <2> 				pop dx
  4937 0000145C EB0C                <2> 				jmp .endfirst
  4938                              <2> 			.nfirst:
  4939 0000145E 52                  <2> 				push dx
  4940                              <2> 				
  4941 0000145F B401                <2> 				mov ah, TRUE
  4942 00001461 8A4600              <2> 				mov byte al, [bp]
  4943 00001464 50                  <2> 				push ax
  4944 00001465 E81E00              <2> 				call proc_prthex8
  4945 00001468 58                  <2> 				pop ax
  4946                              <2> 								
  4947 00001469 5A                  <2> 				pop dx
  4948                              <2> 			.endfirst:	
  4949 0000146A 59                  <2> 			pop cx
  4950 0000146B 5B                  <2> 			pop bx		
  4951                              <2> 		.prted:
  4952                              <2> 		
  4953 0000146C 5D                  <2> 		pop bp
  4954                              <2> 	
  4955 0000146D FEC9                <2> 		dec cl
  4956 0000146F EBC4                <2> 		jmp .l1		
  4957                              <2> 	.l2:
  4958                              <2> 	
  4959 00001471 80FB00              <2> 	cmp bl,0
  4960 00001474 750F                <2> 	jnz .end
  4961                              <2> 		__prtch 30h
  4962                              <3>  stkopen 1
  4963 00001476 83EC01              <4>  sub word sp, %1
  4964 00001479 54                  <4>  push sp
  4965 0000147A 5D                  <4>  pop bp
  4966 0000147B C6460030            <3>  mov byte [ bp ], %1
  4967 0000147F E8C600              <3>  call proc_prtch
  4968                              <3>  stkclose 1
  4969 00001482 83C401              <4>  add word sp, %1
  4970                              <2> 	.end:
  4971                              <2> 	
  4972 00001485 C3                  <2> 	ret
  4973                              <2> 	
  4974                              <2> proc_prthex8:
  4975 00001486 89E0                <2> 	mov ax,sp
  4976 00001488 89C5                <2> 	mov bp,ax
  4977 0000148A 8A4602              <2> 	mov byte al, [bp+2]
  4978 0000148D 3C00                <2> 	cmp al, 0
  4979 0000148F 752B                <2> 	jnz .nzero
  4980                              <2> 		__prtch 30h
  4981                              <3>  stkopen 1
  4982 00001491 83EC01              <4>  sub word sp, %1
  4983 00001494 54                  <4>  push sp
  4984 00001495 5D                  <4>  pop bp
  4985 00001496 C6460030            <3>  mov byte [ bp ], %1
  4986 0000149A E8AB00              <3>  call proc_prtch
  4987                              <3>  stkclose 1
  4988 0000149D 83C401              <4>  add word sp, %1
  4989                              <2> 		
  4990 000014A0 89E0                <2> 		mov ax,sp
  4991 000014A2 89C5                <2> 		mov bp,ax
  4992 000014A4 8A4603              <2> 		mov byte al, [bp+3]		
  4993 000014A7 3C00                <2> 		cmp al, FALSE
  4994 000014A9 7476                <2> 		je .end
  4995                              <2> 			__prtch 30h
  4996                              <3>  stkopen 1
  4997 000014AB 83EC01              <4>  sub word sp, %1
  4998 000014AE 54                  <4>  push sp
  4999 000014AF 5D                  <4>  pop bp
  5000 000014B0 C6460030            <3>  mov byte [ bp ], %1
  5001 000014B4 E89100              <3>  call proc_prtch
  5002                              <3>  stkclose 1
  5003 000014B7 83C401              <4>  add word sp, %1
  5004 000014BA EB65                <2> 			jmp .end		
  5005                              <2> 	.nzero:
  5006                              <2> 
  5007 000014BC B000                <2> 	mov byte al, FALSE
  5008 000014BE 50                  <2> 	push ax
  5009                              <2> 
  5010 000014BF 89E0                <2> 	mov ax,sp
  5011 000014C1 89C5                <2> 	mov bp,ax
  5012 000014C3 8A5E04              <2> 	mov byte bl, [bp+4]
  5013 000014C6 B102                <2> 	mov cl,2
  5014                              <2> 	.l1:
  5015 000014C8 80F900              <2> 		cmp cl,0
  5016 000014CB 7453                <2> 		jz .l2
  5017                              <2> 		
  5018 000014CD B002                <2> 		mov al,2
  5019 000014CF 28C8                <2> 		sub al,cl
  5020                              <2> 		
  5021 000014D1 88DA                <2> 		mov dl, bl	
  5022                              <2> 		
  5023                              <2> 		.l1.1:
  5024 000014D3 3C00                <2> 			cmp al,0
  5025 000014D5 7407                <2> 			jz .l1.2
  5026                              <2> 							
  5027 000014D7 C0E204              <2> 			shl dl,4
  5028                              <2> 			
  5029 000014DA FEC8                <2> 			dec al
  5030 000014DC EBF5                <2> 			jmp .l1.1
  5031                              <2> 		.l1.2:
  5032                              <2> 						
  5033 000014DE C0EA04              <2> 		shr dl,4
  5034                              <2> 
  5035 000014E1 89E0                <2> 		mov ax,sp
  5036 000014E3 89C5                <2> 		mov bp,ax			
  5037 000014E5 8A4605              <2> 		mov byte al, [bp+5]
  5038 000014E8 3C01                <2> 		cmp al, TRUE
  5039 000014EA 7413                <2> 		je .endzero		
  5040 000014EC 80FA00              <2> 			cmp dl,0
  5041 000014EF 7402                <2> 			jz .zero
  5042 000014F1 EB08                <2> 			jmp .notzero
  5043                              <2> 			.zero:
  5044 000014F3 58                  <2> 				pop ax
  5045 000014F4 50                  <2> 				push ax
  5046 000014F5 3C01                <2> 				cmp al, TRUE				
  5047 000014F7 7406                <2> 				je .endzero
  5048 000014F9 EB21                <2> 				jmp .dec
  5049                              <2> 			.notzero:
  5050 000014FB 58                  <2> 				pop ax
  5051 000014FC B001                <2> 				mov al, TRUE	
  5052 000014FE 50                  <2> 				push ax				
  5053                              <2> 		.endzero:
  5054                              <2> 						
  5055 000014FF 80FA09              <2> 		cmp dl,9
  5056 00001502 7603                <2> 		jbe .endsumseven  		
  5057 00001504 80C207              <2> 		add dl,7
  5058                              <2> 		.endsumseven:
  5059                              <2> 						
  5060 00001507 80C230              <2> 		add dl,30h
  5061                              <2> 
  5062 0000150A 51                  <2> 		push cx
  5063 0000150B 52                  <2> 		push dx
  5064                              <2> 		__prtch dl
  5065                              <3>  stkopen 1
  5066 0000150C 83EC01              <4>  sub word sp, %1
  5067 0000150F 54                  <4>  push sp
  5068 00001510 5D                  <4>  pop bp
  5069 00001511 885600              <3>  mov byte [ bp ], %1
  5070 00001514 E83100              <3>  call proc_prtch
  5071                              <3>  stkclose 1
  5072 00001517 83C401              <4>  add word sp, %1
  5073 0000151A 5A                  <2> 		pop dx
  5074 0000151B 59                  <2> 		pop cx	
  5075                              <2> 
  5076                              <2> 		.dec:
  5077                              <2> 	
  5078 0000151C FEC9                <2> 		dec cl
  5079 0000151E EBA8                <2> 		jmp .l1	
  5080                              <2> 	.l2:
  5081                              <2> 	
  5082 00001520 58                  <2> 	pop ax
  5083                              <2> 	
  5084                              <2> 	.end:
  5085                              <2> 	
  5086 00001521 C3                  <2> 	ret
  5087                              <2> 
  5088                              <2> proc_prtstr:
  5089 00001522 89E0                <2> 	mov ax,sp
  5090 00001524 89C5                <2> 	mov bp,ax
  5091                              <2> 	
  5092 00001526 8B4602              <2> 	mov ax, [bp+2]
  5093 00001529 8ED8                <2> 	mov ds, ax
  5094 0000152B 8B7604              <2> 	mov si, [bp+4]						
  5095                              <2> 	.loop:
  5096 0000152E AC                  <2> 		lodsb
  5097 0000152F 3C00                <2> 		cmp al,0h
  5098 00001531 7414                <2> 		jz .done
  5099                              <2> 		
  5100 00001533 1E                  <2> 		push ds
  5101 00001534 56                  <2> 		push si
  5102                              <2> 					
  5103                              <2> 		__prtch al										
  5104                              <3>  stkopen 1
  5105 00001535 83EC01              <4>  sub word sp, %1
  5106 00001538 54                  <4>  push sp
  5107 00001539 5D                  <4>  pop bp
  5108 0000153A 884600              <3>  mov byte [ bp ], %1
  5109 0000153D E80800              <3>  call proc_prtch
  5110                              <3>  stkclose 1
  5111 00001540 83C401              <4>  add word sp, %1
  5112                              <2> 									
  5113 00001543 5E                  <2> 		pop si
  5114 00001544 1F                  <2> 		pop ds
  5115                              <2> 											
  5116 00001545 EBE7                <2> 		jmp .loop 
  5117                              <2> 	.done:
  5118                              <2> 	
  5119 00001547 C3                  <2> 	ret	
  5120                              <2> 	
  5121                              <2> proc_prtch:
  5122 00001548 89E0                <2> 	mov ax,sp
  5123 0000154A 89C5                <2> 	mov bp,ax
  5124                              <2> 
  5125 0000154C 8A4602              <2> 	mov al,[bp+2]
  5126 0000154F B40E                <2> 	mov ah,0Eh
  5127 00001551 B700                <2> 	mov bh,00h
  5128 00001553 CD10                <2> 	int 10h	
  5129                              <2> 	
  5130 00001555 C3                  <2> 	ret
  5131                              <2> 
  5132                              <2> proc_prtln:
  5133 00001556 B403                <2> 	mov ah,03h
  5134 00001558 B700                <2> 	mov bh,00h
  5135 0000155A CD10                <2> 	int 10h
  5136                              <2> 	
  5137 0000155C B402                <2> 	mov ah,02h
  5138 0000155E FEC6                <2> 	inc dh
  5139 00001560 B200                <2> 	mov dl,00h
  5140 00001562 CD10                <2> 	int 10h	
  5141                              <2> 	
  5142 00001564 C3                  <2> 	ret
  5143                              <2> 	
  5144                              <2> %endif
  5145                              <1>  	%include "lib/system.mac"
  5146                              <2>  
  5147                              <2> %ifndef SYSTEM_MAC
  5148                              <2>  	%define SYSTEM_MAC
  5149                              <2>  	
  5150                              <2> 	%ifndef TRUE
  5151                              <2> 		%define TRUE 01h
  5152                              <2> 	%endif
  5153                              <2> 	%ifndef FALSE
  5154                              <2> 		%define FALSE 00h
  5155                              <2> 	%endif
  5156                              <2> 	
  5157                              <2> %macro vlodsb 3
  5158                              <2> 	vlodsb cs, %1, %2, %3
  5159                              <2> %endmacro
  5160                              <2> 
  5161                              <2> %macro vstosb 3
  5162                              <2> 	vstosb cs, %1, %2, %3
  5163                              <2> %endmacro
  5164                              <2> 	 	
  5165                              <2> %macro int16toreg 2
  5166                              <2> 	int16toreg cs, %1, %2
  5167                              <2> %endmacro
  5168                              <2> 
  5169                              <2> %macro regtoint16 2
  5170                              <2> 	regtoint16 %1, cs, %2
  5171                              <2> %endmacro
  5172                              <2> 
  5173                              <2> %macro vstosb 4
  5174                              <2> 	push %1
  5175                              <2> 	pop ds
  5176                              <2> 	mov si,%2
  5177                              <2> 	add si,%3
  5178                              <2> 	mov byte [si],%4	
  5179                              <2> %endmacro
  5180                              <2> 
  5181                              <2> %macro vlodsb 4
  5182                              <2> 	push %1
  5183                              <2> 	pop ds
  5184                              <2> 	mov si,%2
  5185                              <2> 	add si,%3
  5186                              <2> 	mov byte %4,[si]	
  5187                              <2> %endmacro 	 
  5188                              <2> 
  5189                              <2> %macro int16toreg 3
  5190                              <2> 	push %2
  5191                              <2> 	push %1
  5192                              <2> 	pop ds
  5193                              <2> 	pop si
  5194                              <2> 	mov word %3,[si]	
  5195                              <2> %endmacro
  5196                              <2> 
  5197                              <2> %macro regtoint16 3
  5198                              <2> 	push %3
  5199                              <2> 	push %2
  5200                              <2> 	pop ds
  5201                              <2> 	pop si
  5202                              <2> 	mov word [si],%1	
  5203                              <2> %endmacro
  5204                              <2> 
  5205                              <2> %macro mov32 2
  5206                              <2> 	mov32 cs, %1, cs, %2
  5207                              <2> %endmacro
  5208                              <2> 
  5209                              <2> %macro mov16 2
  5210                              <2> 	mov16 cs, %1, cs, %2
  5211                              <2> %endmacro
  5212                              <2> 
  5213                              <2> %macro mov32 4
  5214                              <2> 	mov ax,%3
  5215                              <2> 	mov ds,ax
  5216                              <2> 	mov cx,[%4+2]
  5217                              <2> 	mov dx,[%4]
  5218                              <2> 	mov ax,%1
  5219                              <2> 	mov ds,ax
  5220                              <2> 	mov [%2+2],cx
  5221                              <2> 	mov [%2],dx
  5222                              <2> %endmacro
  5223                              <2> 
  5224                              <2> %macro mov16 4
  5225                              <2> 	mov ax,%3
  5226                              <2> 	mov ds,ax
  5227                              <2> 	mov bx,[%4]
  5228                              <2> 	mov ax,%1
  5229                              <2> 	mov ds,ax
  5230                              <2> 	mov [%2],bx
  5231                              <2> %endmacro
  5232                              <2>  	 	
  5233                              <2> %macro mformat 4
  5234                              <2> 	stkopen 8
  5235                              <2> 	mov word [ bp + 0 ], %1
  5236                              <2> 	mov word [ bp + 2 ], %2
  5237                              <2> 	mov word [ bp + 4 ], %3
  5238                              <2> 	mov word [ bp + 6 ], %4
  5239                              <2> 	call kernel_segment:mformat
  5240                              <2> 	stkclose 8
  5241                              <2> %endmacro
  5242                              <2> 
  5243                              <2> %macro malloc 6
  5244                              <2> 	stkopen 0Bh
  5245                              <2> 	mov word [ bp + 4 ], %3
  5246                              <2> 	mov word [ bp + 6 ], %4
  5247                              <2> 	mov word [ bp + 8 ], %5	
  5248                              <2> 	call kernel_segment:malloc
  5249                              <2> 	push sp
  5250                              <2> 	pop bp
  5251                              <2> 	mov word %1, [ bp ]
  5252                              <2> 	mov word %2, [ bp + 2 ]
  5253                              <2> 	mov byte %6, [ bp + 0x0A ]
  5254                              <2> 	stkclose 0Bh
  5255                              <2> %endmacro 	
  5256                              <2> 
  5257                              <2> %macro laddr 2
  5258                              <2> 	laddr %1, %2, %1, %2
  5259                              <2> %endmacro
  5260                              <2> 
  5261                              <2> %macro faddr 2
  5262                              <2> 	faddr %1, %2, %1, %2
  5263                              <2> %endmacro
  5264                              <2>  	
  5265                              <2> %macro laddr 4
  5266                              <2> 	stkopen 8
  5267                              <2> 	mov word [ bp + 4 ], %3
  5268                              <2> 	mov word [ bp + 6 ], %4	
  5269                              <2> 	call kernel_segment:laddr
  5270                              <2> 	push sp
  5271                              <2> 	pop bp
  5272                              <2> 	mov word %1, [ bp + 0 ]
  5273                              <2> 	mov word %2, [ bp + 2 ]	
  5274                              <2> 	stkclose 8
  5275                              <2> %endmacro
  5276                              <2> 
  5277                              <2> %macro faddr 4
  5278                              <2> 	stkopen 8
  5279                              <2> 	mov word [ bp + 4 ], %3
  5280                              <2> 	mov word [ bp + 6 ], %4	
  5281                              <2> 	call kernel_segment:faddr
  5282                              <2> 	push sp
  5283                              <2> 	pop bp
  5284                              <2> 	mov word %1, [ bp + 0 ]
  5285                              <2> 	mov word %2, [ bp + 2 ]	
  5286                              <2> 	stkclose 8
  5287                              <2> %endmacro	
  5288                              <2>  
  5289                              <2> 
  5290                              <2> %macro stkopen 1		
  5291                              <2> 	sub word sp, %1
  5292                              <2> 	push sp
  5293                              <2> 	pop bp
  5294                              <2> %endmacro
  5295                              <2> 
  5296                              <2> %macro stkclose 1
  5297                              <2> 	add word sp, %1
  5298                              <2> %endmacro
  5299                              <2> 
  5300                              <2> %macro stkload 1-* 	
  5301                              <2>  	%rep %0
  5302                              <2>  	 	%rotate -1
  5303                              <2>  		pop %1
  5304                              <2>  	%endrep
  5305                              <2>  	%rep %0
  5306                              <2>  		push %1
  5307                              <2>  		%rotate 1
  5308                              <2>  	%endrep
  5309                              <2> %endmacro
  5310                              <2> 
  5311                              <2> %macro stkpush 1-* 	
  5312                              <2>  	%rep %0
  5313                              <2>  		push %1
  5314                              <2>  		%rotate 1
  5315                              <2>  	%endrep 	
  5316                              <2> %endmacro
  5317                              <2>  
  5318                              <2> %macro stkpop 1-*
  5319                              <2>  	%rep %0
  5320                              <2>  	 	%rotate -1
  5321                              <2>  		pop %1
  5322                              <2>  	%endrep 	 	
  5323                              <2> %endmacro
  5324                              <2> 
  5325                              <2> %endif 
  5326                              <1> 
  5327                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  5328                              <1> %macro printf 1-*	
  5329                              <1> 	%rep %0					
  5330                              <1> 		__printf %1
  5331                              <1> 		%rotate 1		
  5332                              <1> 	%endrep
  5333                              <1> %endmacro	
  5334                              <1> 
  5335                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  5336                              <1> %macro __printf 1
  5337                              <1> 	section .data
  5338                              <1> 		%%str: db %1,0
  5339                              <1> 	section .text
  5340                              <1> 		prtstr cs, %%str				
  5341                              <1> %endmacro
  5342                              <1> 
  5343                              <1> %macro prtstr 2
  5344                              <1> 	stkopen 4
  5345                              <1> 	mov word [bp], %1
  5346                              <1> 	mov word [bp+2], %2
  5347                              <1> 	call proc_prtstr
  5348                              <1> 	stkclose 4
  5349                              <1> %endmacro
  5350                              <1> 
  5351                              <1> 
  5352                              <1> %macro prtIEEE754 1
  5353                              <1> 	prtIEEE754 cs, %1
  5354                              <1> %endmacro
  5355                              <1> 
  5356                              <1> %macro prtIEEE754 2
  5357                              <1> 	stkopen 4
  5358                              <1> 	mov ax,%1
  5359                              <1> 	mov ds,ax
  5360                              <1> 	mov ax, [%2+2]
  5361                              <1> 	mov word [bp+0], ax
  5362                              <1> 	mov ax, [%2]
  5363                              <1> 	mov word [bp+2], ax
  5364                              <1> 	call proc_prtIEEE754
  5365                              <1> 	stkclose 4
  5366                              <1> %endmacro
  5367                              <1> 
  5368                              <1> %macro prtbool 1	
  5369                              <1> 	cmp byte %1, TRUE
  5370                              <1> 	je .true
  5371                              <1> 	jmp .false
  5372                              <1> 	.true:
  5373                              <1> 		prtf "true"
  5374                              <1> 		jmp .endcmp
  5375                              <1> 	.false:
  5376                              <1> 		prtf "false"
  5377                              <1> 	.endcmp:	
  5378                              <1> %endmacro
  5379                              <1> 
  5380                              <1> %macro prtptr 2-3 TRUE
  5381                              <1> 	stkopen 3
  5382                              <1> 	mov word [ bp + 0 ], %2
  5383                              <1> 	mov byte [ bp + 2 ], %3
  5384                              <1> 	prthex16 %1, %3
  5385                              <1> 	writechar ':'
  5386                              <1> 	push sp
  5387                              <1> 	pop bp
  5388                              <1> 	mov word ax, [ bp + 0 ]
  5389                              <1> 	mov byte bl, [ bp + 2 ]
  5390                              <1> 	prthex16 ax, bl
  5391                              <1> 	stkclose 3
  5392                              <1> %endmacro
  5393                              <1> 
  5394                              <1> %macro prtfptr 2-3 TRUE
  5395                              <1> 	stkopen 3
  5396                              <1> 	mov word [ bp + 0 ], %1
  5397                              <1> 	mov byte [ bp + 2 ], %3
  5398                              <1> 	prthex16 %2, %3
  5399                              <1> 	push sp
  5400                              <1> 	pop bp
  5401                              <1> 	mov word ax, [ bp + 0 ]
  5402                              <1> 	mov byte bl, [ bp + 2 ]
  5403                              <1> 	prthex16 ax, bl
  5404                              <1> 	stkclose 3
  5405                              <1> %endmacro
  5406                              <1> 
  5407                              <1> %macro prtbin32 1
  5408                              <1> 	prtbin32 cs, %1
  5409                              <1> %endmacro
  5410                              <1> 
  5411                              <1> %macro prtbin32 2
  5412                              <1> 	mov ax,%1
  5413                              <1> 	mov ds,ax
  5414                              <1> 	mov word ax,[%2+2]
  5415                              <1> 	prtbin16 ax
  5416                              <1> 	prtch 20h
  5417                              <1> 	mov ax,%1
  5418                              <1> 	mov ds,ax
  5419                              <1> 	mov word ax,[%2]
  5420                              <1> 	prtbin16 ax
  5421                              <1> %endmacro
  5422                              <1> 
  5423                              <1> %macro prthex32 1
  5424                              <1> 	prthex32 cs, %1
  5425                              <1> %endmacro
  5426                              <1> 
  5427                              <1> %macro iprthex32 1
  5428                              <1> 	iprthex32 cs, %1
  5429                              <1> %endmacro
  5430                              <1> 
  5431                              <1> %macro prthex32 2
  5432                              <1> 	mov ax,%1
  5433                              <1> 	mov ds,ax
  5434                              <1> 	mov word ax,[%2+2]
  5435                              <1> 	prthex16 ax	
  5436                              <1> 	mov ax,%1
  5437                              <1> 	mov ds,ax
  5438                              <1> 	mov word ax,[%2]
  5439                              <1> 	prthex16 ax
  5440                              <1> %endmacro
  5441                              <1> 
  5442                              <1> %macro iprthex32 2
  5443                              <1> 	mov ax,%1
  5444                              <1> 	mov ds,ax
  5445                              <1> 	mov word ax,[%2+2]
  5446                              <1> 	mov word bx,ax
  5447                              <1> 	and ax,0x7FFF
  5448                              <1> 	push ax
  5449                              <1> 	and bx,0x8000
  5450                              <1> 	cmp bx,0
  5451                              <1> 	jz %%prt
  5452                              <1> 		prtch '-'		
  5453                              <1> 	%%prt:	
  5454                              <1> 	pop ax
  5455                              <1> 	prthex16 ax
  5456                              <1> 	mov ax,%1
  5457                              <1> 	mov ds,ax
  5458                              <1> 	mov word ax,[%2]
  5459                              <1> 	prthex16 ax	
  5460                              <1> %endmacro
  5461                              <1> 
  5462                              <1> %macro prtsubbin8 3
  5463                              <1> 	__prtsubbin8 %1,%2,%3
  5464                              <1> %endmacro
  5465                              <1> 
  5466                              <1> %macro prtbin16 1
  5467                              <1> 	stkopen 3
  5468                              <1> 	mov word [bp], %1
  5469                              <1> 	mov byte [bp+2], TRUE
  5470                              <1> 	call proc_prtbin16
  5471                              <1> 	stkclose 3
  5472                              <1> %endmacro
  5473                              <1> 
  5474                              <1> %macro prtbin8 1
  5475                              <1> 	stkopen 2
  5476                              <1> 	mov byte [bp], %1
  5477                              <1> 	mov byte [bp+1], TRUE
  5478                              <1> 	call proc_prtbin8
  5479                              <1> 	stkclose 2
  5480                              <1> %endmacro
  5481                              <1> 
  5482                              <1> %macro prthex16 1
  5483                              <1> 	stkopen 3
  5484                              <1> 	mov word [bp], %1
  5485                              <1> 	mov byte [bp+2], TRUE
  5486                              <1> 	call proc_prthex16
  5487                              <1> 	stkclose 3
  5488                              <1> %endmacro
  5489                              <1> 
  5490                              <1> %macro prthex8 1
  5491                              <1> 	stkopen 2
  5492                              <1> 	mov byte [bp], %1
  5493                              <1> 	mov byte [bp+1], TRUE
  5494                              <1> 	call proc_prthex8
  5495                              <1> 	stkclose 2
  5496                              <1> %endmacro
  5497                              <1> 
  5498                              <1> %macro prtch 1
  5499                              <1> 	__prtch %1
  5500                              <1> %endmacro
  5501                              <1> 
  5502                              <1> %macro prtln 0
  5503                              <1> 	__prtln
  5504                              <1> %endmacro	
  5505                              <1> 
  5506                              <1> 
  5507                              <1> %macro prtstk 0
  5508                              <1> 	printf "stack ---> "
  5509                              <1> 	mov ax,sp
  5510                              <1> 	prthex16 ax
  5511                              <1> %endmacro  
  5512                              <1> 
  5513                              <1> %endif
  5514                                  
  5515                                  section .data
  5516 00001565 00000000                	x: dd 0.0
  5517 00001569 CDCC4C3E                	y: dd 0.2
  5518 0000156D 000080BF                	z: dd -1.0
  5519                                  	
  5520 00001571 00000040                	n1: dd 2.0
  5521 00001575 00008040                	n2: dd 4.0
  5522                                  	
  5523 00001579 000080C0                	n3: dd -4.0
  5524 0000157D 000000C0                	n4: dd -2.0
  5525                                  
  5526                                  section .text
  5527                                  	global _start
  5528                                  	
  5529                                  _start:		
  5530                                  	printf "0 cmp 0 --> "
  5531                              <1>  %rep %0
  5532                              <1>  __printf %1
  5533                              <1>  %rotate 1
  5534                              <1>  %endrep
  5535                              <2>  __printf %1
  5536                              <3>  section .data
  5537 00001581 3020636D702030202D- <3>  %%str: db %1,0
  5538 0000158A 2D3E2000            <3>
  5539                              <3>  section .text
  5540                              <3>  prtstr cs, %%str
  5541                              <4>  stkopen 4
  5542 00000000 83EC04              <5>  sub word sp, %1
  5543 00000003 54                  <5>  push sp
  5544 00000004 5D                  <5>  pop bp
  5545 00000005 8C4E00              <4>  mov word [bp], %1
  5546 00000008 C74602[8115]        <4>  mov word [bp+2], %2
  5547 0000000D E8(2215)            <4>  call proc_prtstr
  5548                              <4>  stkclose 4
  5549 00000010 83C404              <5>  add word sp, %1
  5550                              <2>  %rotate 1
  5551                                  	flcmp x, x, cl
  5552                              <1>  flcmp cs, %1, cs, %2, %3
  5553                              <2>  stkopen 0x09
  5554 00000013 83EC09              <3>  sub word sp, %1
  5555 00000016 54                  <3>  push sp
  5556 00000017 5D                  <3>  pop bp
  5557 00000018 8CC8                <2>  mov ax,%1
  5558 0000001A 8ED8                <2>  mov ds,ax
  5559 0000001C A1[6715]            <2>  mov ax,[%2+2]
  5560 0000001F 894600              <2>  mov [bp+0],ax
  5561 00000022 A1[6515]            <2>  mov ax,[%2]
  5562 00000025 894602              <2>  mov [bp+2],ax
  5563 00000028 8CC8                <2>  mov ax,%3
  5564 0000002A 8ED8                <2>  mov ds,ax
  5565 0000002C A1[6715]            <2>  mov ax,[%4+2]
  5566 0000002F 894604              <2>  mov [bp+4],ax
  5567 00000032 A1[6515]            <2>  mov ax,[%4]
  5568 00000035 894606              <2>  mov [bp+6],ax
  5569 00000038 E8(3707)            <2>  call proc_flcmp
  5570 0000003B 89E0                <2>  mov ax,sp
  5571 0000003D 89C5                <2>  mov bp,ax
  5572 0000003F 8A4E08              <2>  mov byte %5,[bp+8]
  5573                              <2>  stkclose 0x09
  5574 00000042 83C409              <3>  add word sp, %1
  5575                                  	prthex8 cl
  5576                              <1>  stkopen 2
  5577 00000045 83EC02              <2>  sub word sp, %1
  5578 00000048 54                  <2>  push sp
  5579 00000049 5D                  <2>  pop bp
  5580 0000004A 884E00              <1>  mov byte [bp], %1
  5581 0000004D C6460101            <1>  mov byte [bp+1], TRUE
  5582 00000051 E8(8614)            <1>  call proc_prthex8
  5583                              <1>  stkclose 2
  5584 00000054 83C402              <2>  add word sp, %1
  5585                                  	prtln
  5586                              <1>  __prtln
  5587 00000057 E8(5615)            <2>  call proc_prtln
  5588                                  		
  5589                                  	printf "0 cmp p --> "
  5590                              <1>  %rep %0
  5591                              <1>  __printf %1
  5592                              <1>  %rotate 1
  5593                              <1>  %endrep
  5594                              <2>  __printf %1
  5595                              <3>  section .data
  5596 0000158E 3020636D702070202D- <3>  %%str: db %1,0
  5597 00001597 2D3E2000            <3>
  5598                              <3>  section .text
  5599                              <3>  prtstr cs, %%str
  5600                              <4>  stkopen 4
  5601 0000005A 83EC04              <5>  sub word sp, %1
  5602 0000005D 54                  <5>  push sp
  5603 0000005E 5D                  <5>  pop bp
  5604 0000005F 8C4E00              <4>  mov word [bp], %1
  5605 00000062 C74602[8E15]        <4>  mov word [bp+2], %2
  5606 00000067 E8(2215)            <4>  call proc_prtstr
  5607                              <4>  stkclose 4
  5608 0000006A 83C404              <5>  add word sp, %1
  5609                              <2>  %rotate 1
  5610                                  	flcmp x, y, cl
  5611                              <1>  flcmp cs, %1, cs, %2, %3
  5612                              <2>  stkopen 0x09
  5613 0000006D 83EC09              <3>  sub word sp, %1
  5614 00000070 54                  <3>  push sp
  5615 00000071 5D                  <3>  pop bp
  5616 00000072 8CC8                <2>  mov ax,%1
  5617 00000074 8ED8                <2>  mov ds,ax
  5618 00000076 A1[6715]            <2>  mov ax,[%2+2]
  5619 00000079 894600              <2>  mov [bp+0],ax
  5620 0000007C A1[6515]            <2>  mov ax,[%2]
  5621 0000007F 894602              <2>  mov [bp+2],ax
  5622 00000082 8CC8                <2>  mov ax,%3
  5623 00000084 8ED8                <2>  mov ds,ax
  5624 00000086 A1[6B15]            <2>  mov ax,[%4+2]
  5625 00000089 894604              <2>  mov [bp+4],ax
  5626 0000008C A1[6915]            <2>  mov ax,[%4]
  5627 0000008F 894606              <2>  mov [bp+6],ax
  5628 00000092 E8(3707)            <2>  call proc_flcmp
  5629 00000095 89E0                <2>  mov ax,sp
  5630 00000097 89C5                <2>  mov bp,ax
  5631 00000099 8A4E08              <2>  mov byte %5,[bp+8]
  5632                              <2>  stkclose 0x09
  5633 0000009C 83C409              <3>  add word sp, %1
  5634                                  	prthex8 cl
  5635                              <1>  stkopen 2
  5636 0000009F 83EC02              <2>  sub word sp, %1
  5637 000000A2 54                  <2>  push sp
  5638 000000A3 5D                  <2>  pop bp
  5639 000000A4 884E00              <1>  mov byte [bp], %1
  5640 000000A7 C6460101            <1>  mov byte [bp+1], TRUE
  5641 000000AB E8(8614)            <1>  call proc_prthex8
  5642                              <1>  stkclose 2
  5643 000000AE 83C402              <2>  add word sp, %1
  5644                                  	prtln
  5645                              <1>  __prtln
  5646 000000B1 E8(5615)            <2>  call proc_prtln
  5647                                  	
  5648                                  	printf "p cmp 0 --> "
  5649                              <1>  %rep %0
  5650                              <1>  __printf %1
  5651                              <1>  %rotate 1
  5652                              <1>  %endrep
  5653                              <2>  __printf %1
  5654                              <3>  section .data
  5655 0000159B 7020636D702030202D- <3>  %%str: db %1,0
  5656 000015A4 2D3E2000            <3>
  5657                              <3>  section .text
  5658                              <3>  prtstr cs, %%str
  5659                              <4>  stkopen 4
  5660 000000B4 83EC04              <5>  sub word sp, %1
  5661 000000B7 54                  <5>  push sp
  5662 000000B8 5D                  <5>  pop bp
  5663 000000B9 8C4E00              <4>  mov word [bp], %1
  5664 000000BC C74602[9B15]        <4>  mov word [bp+2], %2
  5665 000000C1 E8(2215)            <4>  call proc_prtstr
  5666                              <4>  stkclose 4
  5667 000000C4 83C404              <5>  add word sp, %1
  5668                              <2>  %rotate 1
  5669                                  	flcmp y, x, cl
  5670                              <1>  flcmp cs, %1, cs, %2, %3
  5671                              <2>  stkopen 0x09
  5672 000000C7 83EC09              <3>  sub word sp, %1
  5673 000000CA 54                  <3>  push sp
  5674 000000CB 5D                  <3>  pop bp
  5675 000000CC 8CC8                <2>  mov ax,%1
  5676 000000CE 8ED8                <2>  mov ds,ax
  5677 000000D0 A1[6B15]            <2>  mov ax,[%2+2]
  5678 000000D3 894600              <2>  mov [bp+0],ax
  5679 000000D6 A1[6915]            <2>  mov ax,[%2]
  5680 000000D9 894602              <2>  mov [bp+2],ax
  5681 000000DC 8CC8                <2>  mov ax,%3
  5682 000000DE 8ED8                <2>  mov ds,ax
  5683 000000E0 A1[6715]            <2>  mov ax,[%4+2]
  5684 000000E3 894604              <2>  mov [bp+4],ax
  5685 000000E6 A1[6515]            <2>  mov ax,[%4]
  5686 000000E9 894606              <2>  mov [bp+6],ax
  5687 000000EC E8(3707)            <2>  call proc_flcmp
  5688 000000EF 89E0                <2>  mov ax,sp
  5689 000000F1 89C5                <2>  mov bp,ax
  5690 000000F3 8A4E08              <2>  mov byte %5,[bp+8]
  5691                              <2>  stkclose 0x09
  5692 000000F6 83C409              <3>  add word sp, %1
  5693                                  	prthex8 cl
  5694                              <1>  stkopen 2
  5695 000000F9 83EC02              <2>  sub word sp, %1
  5696 000000FC 54                  <2>  push sp
  5697 000000FD 5D                  <2>  pop bp
  5698 000000FE 884E00              <1>  mov byte [bp], %1
  5699 00000101 C6460101            <1>  mov byte [bp+1], TRUE
  5700 00000105 E8(8614)            <1>  call proc_prthex8
  5701                              <1>  stkclose 2
  5702 00000108 83C402              <2>  add word sp, %1
  5703                                  	prtln
  5704                              <1>  __prtln
  5705 0000010B E8(5615)            <2>  call proc_prtln
  5706                                  	
  5707                                  	printf "0 cmp n --> "
  5708                              <1>  %rep %0
  5709                              <1>  __printf %1
  5710                              <1>  %rotate 1
  5711                              <1>  %endrep
  5712                              <2>  __printf %1
  5713                              <3>  section .data
  5714 000015A8 3020636D70206E202D- <3>  %%str: db %1,0
  5715 000015B1 2D3E2000            <3>
  5716                              <3>  section .text
  5717                              <3>  prtstr cs, %%str
  5718                              <4>  stkopen 4
  5719 0000010E 83EC04              <5>  sub word sp, %1
  5720 00000111 54                  <5>  push sp
  5721 00000112 5D                  <5>  pop bp
  5722 00000113 8C4E00              <4>  mov word [bp], %1
  5723 00000116 C74602[A815]        <4>  mov word [bp+2], %2
  5724 0000011B E8(2215)            <4>  call proc_prtstr
  5725                              <4>  stkclose 4
  5726 0000011E 83C404              <5>  add word sp, %1
  5727                              <2>  %rotate 1
  5728                                  	flcmp x, z, cl
  5729                              <1>  flcmp cs, %1, cs, %2, %3
  5730                              <2>  stkopen 0x09
  5731 00000121 83EC09              <3>  sub word sp, %1
  5732 00000124 54                  <3>  push sp
  5733 00000125 5D                  <3>  pop bp
  5734 00000126 8CC8                <2>  mov ax,%1
  5735 00000128 8ED8                <2>  mov ds,ax
  5736 0000012A A1[6715]            <2>  mov ax,[%2+2]
  5737 0000012D 894600              <2>  mov [bp+0],ax
  5738 00000130 A1[6515]            <2>  mov ax,[%2]
  5739 00000133 894602              <2>  mov [bp+2],ax
  5740 00000136 8CC8                <2>  mov ax,%3
  5741 00000138 8ED8                <2>  mov ds,ax
  5742 0000013A A1[6F15]            <2>  mov ax,[%4+2]
  5743 0000013D 894604              <2>  mov [bp+4],ax
  5744 00000140 A1[6D15]            <2>  mov ax,[%4]
  5745 00000143 894606              <2>  mov [bp+6],ax
  5746 00000146 E8(3707)            <2>  call proc_flcmp
  5747 00000149 89E0                <2>  mov ax,sp
  5748 0000014B 89C5                <2>  mov bp,ax
  5749 0000014D 8A4E08              <2>  mov byte %5,[bp+8]
  5750                              <2>  stkclose 0x09
  5751 00000150 83C409              <3>  add word sp, %1
  5752                                  	prthex8 cl
  5753                              <1>  stkopen 2
  5754 00000153 83EC02              <2>  sub word sp, %1
  5755 00000156 54                  <2>  push sp
  5756 00000157 5D                  <2>  pop bp
  5757 00000158 884E00              <1>  mov byte [bp], %1
  5758 0000015B C6460101            <1>  mov byte [bp+1], TRUE
  5759 0000015F E8(8614)            <1>  call proc_prthex8
  5760                              <1>  stkclose 2
  5761 00000162 83C402              <2>  add word sp, %1
  5762                                  	prtln
  5763                              <1>  __prtln
  5764 00000165 E8(5615)            <2>  call proc_prtln
  5765                                  	
  5766                                  	printf "n cmp 0 --> "
  5767                              <1>  %rep %0
  5768                              <1>  __printf %1
  5769                              <1>  %rotate 1
  5770                              <1>  %endrep
  5771                              <2>  __printf %1
  5772                              <3>  section .data
  5773 000015B5 6E20636D702030202D- <3>  %%str: db %1,0
  5774 000015BE 2D3E2000            <3>
  5775                              <3>  section .text
  5776                              <3>  prtstr cs, %%str
  5777                              <4>  stkopen 4
  5778 00000168 83EC04              <5>  sub word sp, %1
  5779 0000016B 54                  <5>  push sp
  5780 0000016C 5D                  <5>  pop bp
  5781 0000016D 8C4E00              <4>  mov word [bp], %1
  5782 00000170 C74602[B515]        <4>  mov word [bp+2], %2
  5783 00000175 E8(2215)            <4>  call proc_prtstr
  5784                              <4>  stkclose 4
  5785 00000178 83C404              <5>  add word sp, %1
  5786                              <2>  %rotate 1
  5787                                  	flcmp z, x, cl
  5788                              <1>  flcmp cs, %1, cs, %2, %3
  5789                              <2>  stkopen 0x09
  5790 0000017B 83EC09              <3>  sub word sp, %1
  5791 0000017E 54                  <3>  push sp
  5792 0000017F 5D                  <3>  pop bp
  5793 00000180 8CC8                <2>  mov ax,%1
  5794 00000182 8ED8                <2>  mov ds,ax
  5795 00000184 A1[6F15]            <2>  mov ax,[%2+2]
  5796 00000187 894600              <2>  mov [bp+0],ax
  5797 0000018A A1[6D15]            <2>  mov ax,[%2]
  5798 0000018D 894602              <2>  mov [bp+2],ax
  5799 00000190 8CC8                <2>  mov ax,%3
  5800 00000192 8ED8                <2>  mov ds,ax
  5801 00000194 A1[6715]            <2>  mov ax,[%4+2]
  5802 00000197 894604              <2>  mov [bp+4],ax
  5803 0000019A A1[6515]            <2>  mov ax,[%4]
  5804 0000019D 894606              <2>  mov [bp+6],ax
  5805 000001A0 E8(3707)            <2>  call proc_flcmp
  5806 000001A3 89E0                <2>  mov ax,sp
  5807 000001A5 89C5                <2>  mov bp,ax
  5808 000001A7 8A4E08              <2>  mov byte %5,[bp+8]
  5809                              <2>  stkclose 0x09
  5810 000001AA 83C409              <3>  add word sp, %1
  5811                                  	prthex8 cl
  5812                              <1>  stkopen 2
  5813 000001AD 83EC02              <2>  sub word sp, %1
  5814 000001B0 54                  <2>  push sp
  5815 000001B1 5D                  <2>  pop bp
  5816 000001B2 884E00              <1>  mov byte [bp], %1
  5817 000001B5 C6460101            <1>  mov byte [bp+1], TRUE
  5818 000001B9 E8(8614)            <1>  call proc_prthex8
  5819                              <1>  stkclose 2
  5820 000001BC 83C402              <2>  add word sp, %1
  5821                                  	prtln
  5822                              <1>  __prtln
  5823 000001BF E8(5615)            <2>  call proc_prtln
  5824                                  	
  5825                                  	printf "p cmp n --> "
  5826                              <1>  %rep %0
  5827                              <1>  __printf %1
  5828                              <1>  %rotate 1
  5829                              <1>  %endrep
  5830                              <2>  __printf %1
  5831                              <3>  section .data
  5832 000015C2 7020636D70206E202D- <3>  %%str: db %1,0
  5833 000015CB 2D3E2000            <3>
  5834                              <3>  section .text
  5835                              <3>  prtstr cs, %%str
  5836                              <4>  stkopen 4
  5837 000001C2 83EC04              <5>  sub word sp, %1
  5838 000001C5 54                  <5>  push sp
  5839 000001C6 5D                  <5>  pop bp
  5840 000001C7 8C4E00              <4>  mov word [bp], %1
  5841 000001CA C74602[C215]        <4>  mov word [bp+2], %2
  5842 000001CF E8(2215)            <4>  call proc_prtstr
  5843                              <4>  stkclose 4
  5844 000001D2 83C404              <5>  add word sp, %1
  5845                              <2>  %rotate 1
  5846                                  	flcmp y, z, cl
  5847                              <1>  flcmp cs, %1, cs, %2, %3
  5848                              <2>  stkopen 0x09
  5849 000001D5 83EC09              <3>  sub word sp, %1
  5850 000001D8 54                  <3>  push sp
  5851 000001D9 5D                  <3>  pop bp
  5852 000001DA 8CC8                <2>  mov ax,%1
  5853 000001DC 8ED8                <2>  mov ds,ax
  5854 000001DE A1[6B15]            <2>  mov ax,[%2+2]
  5855 000001E1 894600              <2>  mov [bp+0],ax
  5856 000001E4 A1[6915]            <2>  mov ax,[%2]
  5857 000001E7 894602              <2>  mov [bp+2],ax
  5858 000001EA 8CC8                <2>  mov ax,%3
  5859 000001EC 8ED8                <2>  mov ds,ax
  5860 000001EE A1[6F15]            <2>  mov ax,[%4+2]
  5861 000001F1 894604              <2>  mov [bp+4],ax
  5862 000001F4 A1[6D15]            <2>  mov ax,[%4]
  5863 000001F7 894606              <2>  mov [bp+6],ax
  5864 000001FA E8(3707)            <2>  call proc_flcmp
  5865 000001FD 89E0                <2>  mov ax,sp
  5866 000001FF 89C5                <2>  mov bp,ax
  5867 00000201 8A4E08              <2>  mov byte %5,[bp+8]
  5868                              <2>  stkclose 0x09
  5869 00000204 83C409              <3>  add word sp, %1
  5870                                  	prthex8 cl
  5871                              <1>  stkopen 2
  5872 00000207 83EC02              <2>  sub word sp, %1
  5873 0000020A 54                  <2>  push sp
  5874 0000020B 5D                  <2>  pop bp
  5875 0000020C 884E00              <1>  mov byte [bp], %1
  5876 0000020F C6460101            <1>  mov byte [bp+1], TRUE
  5877 00000213 E8(8614)            <1>  call proc_prthex8
  5878                              <1>  stkclose 2
  5879 00000216 83C402              <2>  add word sp, %1
  5880                                  	prtln
  5881                              <1>  __prtln
  5882 00000219 E8(5615)            <2>  call proc_prtln
  5883                                  	
  5884                                  	printf "n cmp p --> "
  5885                              <1>  %rep %0
  5886                              <1>  __printf %1
  5887                              <1>  %rotate 1
  5888                              <1>  %endrep
  5889                              <2>  __printf %1
  5890                              <3>  section .data
  5891 000015CF 6E20636D702070202D- <3>  %%str: db %1,0
  5892 000015D8 2D3E2000            <3>
  5893                              <3>  section .text
  5894                              <3>  prtstr cs, %%str
  5895                              <4>  stkopen 4
  5896 0000021C 83EC04              <5>  sub word sp, %1
  5897 0000021F 54                  <5>  push sp
  5898 00000220 5D                  <5>  pop bp
  5899 00000221 8C4E00              <4>  mov word [bp], %1
  5900 00000224 C74602[CF15]        <4>  mov word [bp+2], %2
  5901 00000229 E8(2215)            <4>  call proc_prtstr
  5902                              <4>  stkclose 4
  5903 0000022C 83C404              <5>  add word sp, %1
  5904                              <2>  %rotate 1
  5905                                  	flcmp z, y, cl
  5906                              <1>  flcmp cs, %1, cs, %2, %3
  5907                              <2>  stkopen 0x09
  5908 0000022F 83EC09              <3>  sub word sp, %1
  5909 00000232 54                  <3>  push sp
  5910 00000233 5D                  <3>  pop bp
  5911 00000234 8CC8                <2>  mov ax,%1
  5912 00000236 8ED8                <2>  mov ds,ax
  5913 00000238 A1[6F15]            <2>  mov ax,[%2+2]
  5914 0000023B 894600              <2>  mov [bp+0],ax
  5915 0000023E A1[6D15]            <2>  mov ax,[%2]
  5916 00000241 894602              <2>  mov [bp+2],ax
  5917 00000244 8CC8                <2>  mov ax,%3
  5918 00000246 8ED8                <2>  mov ds,ax
  5919 00000248 A1[6B15]            <2>  mov ax,[%4+2]
  5920 0000024B 894604              <2>  mov [bp+4],ax
  5921 0000024E A1[6915]            <2>  mov ax,[%4]
  5922 00000251 894606              <2>  mov [bp+6],ax
  5923 00000254 E8(3707)            <2>  call proc_flcmp
  5924 00000257 89E0                <2>  mov ax,sp
  5925 00000259 89C5                <2>  mov bp,ax
  5926 0000025B 8A4E08              <2>  mov byte %5,[bp+8]
  5927                              <2>  stkclose 0x09
  5928 0000025E 83C409              <3>  add word sp, %1
  5929                                  	prthex8 cl
  5930                              <1>  stkopen 2
  5931 00000261 83EC02              <2>  sub word sp, %1
  5932 00000264 54                  <2>  push sp
  5933 00000265 5D                  <2>  pop bp
  5934 00000266 884E00              <1>  mov byte [bp], %1
  5935 00000269 C6460101            <1>  mov byte [bp+1], TRUE
  5936 0000026D E8(8614)            <1>  call proc_prthex8
  5937                              <1>  stkclose 2
  5938 00000270 83C402              <2>  add word sp, %1
  5939                                  	prtln
  5940                              <1>  __prtln
  5941 00000273 E8(5615)            <2>  call proc_prtln
  5942                                  	
  5943                                  	printf "2 cmp 4 --> "
  5944                              <1>  %rep %0
  5945                              <1>  __printf %1
  5946                              <1>  %rotate 1
  5947                              <1>  %endrep
  5948                              <2>  __printf %1
  5949                              <3>  section .data
  5950 000015DC 3220636D702034202D- <3>  %%str: db %1,0
  5951 000015E5 2D3E2000            <3>
  5952                              <3>  section .text
  5953                              <3>  prtstr cs, %%str
  5954                              <4>  stkopen 4
  5955 00000276 83EC04              <5>  sub word sp, %1
  5956 00000279 54                  <5>  push sp
  5957 0000027A 5D                  <5>  pop bp
  5958 0000027B 8C4E00              <4>  mov word [bp], %1
  5959 0000027E C74602[DC15]        <4>  mov word [bp+2], %2
  5960 00000283 E8(2215)            <4>  call proc_prtstr
  5961                              <4>  stkclose 4
  5962 00000286 83C404              <5>  add word sp, %1
  5963                              <2>  %rotate 1
  5964                                  	flcmp n1, n2, cl
  5965                              <1>  flcmp cs, %1, cs, %2, %3
  5966                              <2>  stkopen 0x09
  5967 00000289 83EC09              <3>  sub word sp, %1
  5968 0000028C 54                  <3>  push sp
  5969 0000028D 5D                  <3>  pop bp
  5970 0000028E 8CC8                <2>  mov ax,%1
  5971 00000290 8ED8                <2>  mov ds,ax
  5972 00000292 A1[7315]            <2>  mov ax,[%2+2]
  5973 00000295 894600              <2>  mov [bp+0],ax
  5974 00000298 A1[7115]            <2>  mov ax,[%2]
  5975 0000029B 894602              <2>  mov [bp+2],ax
  5976 0000029E 8CC8                <2>  mov ax,%3
  5977 000002A0 8ED8                <2>  mov ds,ax
  5978 000002A2 A1[7715]            <2>  mov ax,[%4+2]
  5979 000002A5 894604              <2>  mov [bp+4],ax
  5980 000002A8 A1[7515]            <2>  mov ax,[%4]
  5981 000002AB 894606              <2>  mov [bp+6],ax
  5982 000002AE E8(3707)            <2>  call proc_flcmp
  5983 000002B1 89E0                <2>  mov ax,sp
  5984 000002B3 89C5                <2>  mov bp,ax
  5985 000002B5 8A4E08              <2>  mov byte %5,[bp+8]
  5986                              <2>  stkclose 0x09
  5987 000002B8 83C409              <3>  add word sp, %1
  5988                                  	prthex8 cl
  5989                              <1>  stkopen 2
  5990 000002BB 83EC02              <2>  sub word sp, %1
  5991 000002BE 54                  <2>  push sp
  5992 000002BF 5D                  <2>  pop bp
  5993 000002C0 884E00              <1>  mov byte [bp], %1
  5994 000002C3 C6460101            <1>  mov byte [bp+1], TRUE
  5995 000002C7 E8(8614)            <1>  call proc_prthex8
  5996                              <1>  stkclose 2
  5997 000002CA 83C402              <2>  add word sp, %1
  5998                                  	prtln
  5999                              <1>  __prtln
  6000 000002CD E8(5615)            <2>  call proc_prtln
  6001                                  	
  6002                                  	printf "4 cmp 2 --> "
  6003                              <1>  %rep %0
  6004                              <1>  __printf %1
  6005                              <1>  %rotate 1
  6006                              <1>  %endrep
  6007                              <2>  __printf %1
  6008                              <3>  section .data
  6009 000015E9 3420636D702032202D- <3>  %%str: db %1,0
  6010 000015F2 2D3E2000            <3>
  6011                              <3>  section .text
  6012                              <3>  prtstr cs, %%str
  6013                              <4>  stkopen 4
  6014 000002D0 83EC04              <5>  sub word sp, %1
  6015 000002D3 54                  <5>  push sp
  6016 000002D4 5D                  <5>  pop bp
  6017 000002D5 8C4E00              <4>  mov word [bp], %1
  6018 000002D8 C74602[E915]        <4>  mov word [bp+2], %2
  6019 000002DD E8(2215)            <4>  call proc_prtstr
  6020                              <4>  stkclose 4
  6021 000002E0 83C404              <5>  add word sp, %1
  6022                              <2>  %rotate 1
  6023                                  	flcmp n2, n1, cl
  6024                              <1>  flcmp cs, %1, cs, %2, %3
  6025                              <2>  stkopen 0x09
  6026 000002E3 83EC09              <3>  sub word sp, %1
  6027 000002E6 54                  <3>  push sp
  6028 000002E7 5D                  <3>  pop bp
  6029 000002E8 8CC8                <2>  mov ax,%1
  6030 000002EA 8ED8                <2>  mov ds,ax
  6031 000002EC A1[7715]            <2>  mov ax,[%2+2]
  6032 000002EF 894600              <2>  mov [bp+0],ax
  6033 000002F2 A1[7515]            <2>  mov ax,[%2]
  6034 000002F5 894602              <2>  mov [bp+2],ax
  6035 000002F8 8CC8                <2>  mov ax,%3
  6036 000002FA 8ED8                <2>  mov ds,ax
  6037 000002FC A1[7315]            <2>  mov ax,[%4+2]
  6038 000002FF 894604              <2>  mov [bp+4],ax
  6039 00000302 A1[7115]            <2>  mov ax,[%4]
  6040 00000305 894606              <2>  mov [bp+6],ax
  6041 00000308 E8(3707)            <2>  call proc_flcmp
  6042 0000030B 89E0                <2>  mov ax,sp
  6043 0000030D 89C5                <2>  mov bp,ax
  6044 0000030F 8A4E08              <2>  mov byte %5,[bp+8]
  6045                              <2>  stkclose 0x09
  6046 00000312 83C409              <3>  add word sp, %1
  6047                                  	prthex8 cl
  6048                              <1>  stkopen 2
  6049 00000315 83EC02              <2>  sub word sp, %1
  6050 00000318 54                  <2>  push sp
  6051 00000319 5D                  <2>  pop bp
  6052 0000031A 884E00              <1>  mov byte [bp], %1
  6053 0000031D C6460101            <1>  mov byte [bp+1], TRUE
  6054 00000321 E8(8614)            <1>  call proc_prthex8
  6055                              <1>  stkclose 2
  6056 00000324 83C402              <2>  add word sp, %1
  6057                                  	prtln
  6058                              <1>  __prtln
  6059 00000327 E8(5615)            <2>  call proc_prtln
  6060                                  	
  6061                                  	printf "-2 cmp -4 --> "
  6062                              <1>  %rep %0
  6063                              <1>  __printf %1
  6064                              <1>  %rotate 1
  6065                              <1>  %endrep
  6066                              <2>  __printf %1
  6067                              <3>  section .data
  6068 000015F6 2D3220636D70202D34- <3>  %%str: db %1,0
  6069 000015FF 202D2D3E2000        <3>
  6070                              <3>  section .text
  6071                              <3>  prtstr cs, %%str
  6072                              <4>  stkopen 4
  6073 0000032A 83EC04              <5>  sub word sp, %1
  6074 0000032D 54                  <5>  push sp
  6075 0000032E 5D                  <5>  pop bp
  6076 0000032F 8C4E00              <4>  mov word [bp], %1
  6077 00000332 C74602[F615]        <4>  mov word [bp+2], %2
  6078 00000337 E8(2215)            <4>  call proc_prtstr
  6079                              <4>  stkclose 4
  6080 0000033A 83C404              <5>  add word sp, %1
  6081                              <2>  %rotate 1
  6082                                  	flcmp n3, n4, cl
  6083                              <1>  flcmp cs, %1, cs, %2, %3
  6084                              <2>  stkopen 0x09
  6085 0000033D 83EC09              <3>  sub word sp, %1
  6086 00000340 54                  <3>  push sp
  6087 00000341 5D                  <3>  pop bp
  6088 00000342 8CC8                <2>  mov ax,%1
  6089 00000344 8ED8                <2>  mov ds,ax
  6090 00000346 A1[7B15]            <2>  mov ax,[%2+2]
  6091 00000349 894600              <2>  mov [bp+0],ax
  6092 0000034C A1[7915]            <2>  mov ax,[%2]
  6093 0000034F 894602              <2>  mov [bp+2],ax
  6094 00000352 8CC8                <2>  mov ax,%3
  6095 00000354 8ED8                <2>  mov ds,ax
  6096 00000356 A1[7F15]            <2>  mov ax,[%4+2]
  6097 00000359 894604              <2>  mov [bp+4],ax
  6098 0000035C A1[7D15]            <2>  mov ax,[%4]
  6099 0000035F 894606              <2>  mov [bp+6],ax
  6100 00000362 E8(3707)            <2>  call proc_flcmp
  6101 00000365 89E0                <2>  mov ax,sp
  6102 00000367 89C5                <2>  mov bp,ax
  6103 00000369 8A4E08              <2>  mov byte %5,[bp+8]
  6104                              <2>  stkclose 0x09
  6105 0000036C 83C409              <3>  add word sp, %1
  6106                                  	prthex8 cl
  6107                              <1>  stkopen 2
  6108 0000036F 83EC02              <2>  sub word sp, %1
  6109 00000372 54                  <2>  push sp
  6110 00000373 5D                  <2>  pop bp
  6111 00000374 884E00              <1>  mov byte [bp], %1
  6112 00000377 C6460101            <1>  mov byte [bp+1], TRUE
  6113 0000037B E8(8614)            <1>  call proc_prthex8
  6114                              <1>  stkclose 2
  6115 0000037E 83C402              <2>  add word sp, %1
  6116                                  	prtln
  6117                              <1>  __prtln
  6118 00000381 E8(5615)            <2>  call proc_prtln
  6119                                  	
  6120                                  	printf "-4 cmp -2 --> "
  6121                              <1>  %rep %0
  6122                              <1>  __printf %1
  6123                              <1>  %rotate 1
  6124                              <1>  %endrep
  6125                              <2>  __printf %1
  6126                              <3>  section .data
  6127 00001605 2D3420636D70202D32- <3>  %%str: db %1,0
  6128 0000160E 202D2D3E2000        <3>
  6129                              <3>  section .text
  6130                              <3>  prtstr cs, %%str
  6131                              <4>  stkopen 4
  6132 00000384 83EC04              <5>  sub word sp, %1
  6133 00000387 54                  <5>  push sp
  6134 00000388 5D                  <5>  pop bp
  6135 00000389 8C4E00              <4>  mov word [bp], %1
  6136 0000038C C74602[0516]        <4>  mov word [bp+2], %2
  6137 00000391 E8(2215)            <4>  call proc_prtstr
  6138                              <4>  stkclose 4
  6139 00000394 83C404              <5>  add word sp, %1
  6140                              <2>  %rotate 1
  6141                                  	flcmp n4, n3, cl
  6142                              <1>  flcmp cs, %1, cs, %2, %3
  6143                              <2>  stkopen 0x09
  6144 00000397 83EC09              <3>  sub word sp, %1
  6145 0000039A 54                  <3>  push sp
  6146 0000039B 5D                  <3>  pop bp
  6147 0000039C 8CC8                <2>  mov ax,%1
  6148 0000039E 8ED8                <2>  mov ds,ax
  6149 000003A0 A1[7F15]            <2>  mov ax,[%2+2]
  6150 000003A3 894600              <2>  mov [bp+0],ax
  6151 000003A6 A1[7D15]            <2>  mov ax,[%2]
  6152 000003A9 894602              <2>  mov [bp+2],ax
  6153 000003AC 8CC8                <2>  mov ax,%3
  6154 000003AE 8ED8                <2>  mov ds,ax
  6155 000003B0 A1[7B15]            <2>  mov ax,[%4+2]
  6156 000003B3 894604              <2>  mov [bp+4],ax
  6157 000003B6 A1[7915]            <2>  mov ax,[%4]
  6158 000003B9 894606              <2>  mov [bp+6],ax
  6159 000003BC E8(3707)            <2>  call proc_flcmp
  6160 000003BF 89E0                <2>  mov ax,sp
  6161 000003C1 89C5                <2>  mov bp,ax
  6162 000003C3 8A4E08              <2>  mov byte %5,[bp+8]
  6163                              <2>  stkclose 0x09
  6164 000003C6 83C409              <3>  add word sp, %1
  6165                                  	prthex8 cl
  6166                              <1>  stkopen 2
  6167 000003C9 83EC02              <2>  sub word sp, %1
  6168 000003CC 54                  <2>  push sp
  6169 000003CD 5D                  <2>  pop bp
  6170 000003CE 884E00              <1>  mov byte [bp], %1
  6171 000003D1 C6460101            <1>  mov byte [bp+1], TRUE
  6172 000003D5 E8(8614)            <1>  call proc_prthex8
  6173                              <1>  stkclose 2
  6174 000003D8 83C402              <2>  add word sp, %1
  6175                                  	prtln
  6176                              <1>  __prtln
  6177 000003DB E8(5615)            <2>  call proc_prtln
  6178                                  	
  6179 000003DE EBFE                    	jmp $			

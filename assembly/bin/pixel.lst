     1                                  %include "lib/stdio.mac"
     2                              <1> 
     3                              <1> %ifndef STDIO_MAC
     4                              <1> 	%define STDIO_MAC
     5                              <1> 	
     6                              <1> 	%include "lib/stdio.asm"
     7                              <2> 
     8                              <2> %ifndef STDIO_ASM
     9                              <2> 	%define STDIO_ASM
    10                              <2> 	
    11                              <2> 	%include "lib/system.mac"
    12                              <3>  
    13                              <3> %ifndef SYSTEM_MAC
    14                              <3>  	%define SYSTEM_MAC
    15                              <3>  	
    16                              <3> 	%ifndef TRUE
    17                              <3> 		%define TRUE 01h
    18                              <3> 	%endif
    19                              <3> 	%ifndef FALSE
    20                              <3> 		%define FALSE 00h
    21                              <3> 	%endif
    22                              <3> 	
    23                              <3> %macro vlodsb 3
    24                              <3> 	vlodsb cs, %1, %2, %3
    25                              <3> %endmacro
    26                              <3> 
    27                              <3> %macro vstosb 3
    28                              <3> 	vstosb cs, %1, %2, %3
    29                              <3> %endmacro
    30                              <3> 	 	
    31                              <3> %macro int16toreg 2
    32                              <3> 	int16toreg cs, %1, %2
    33                              <3> %endmacro
    34                              <3> 
    35                              <3> %macro regtoint16 2
    36                              <3> 	regtoint16 %1, cs, %2
    37                              <3> %endmacro
    38                              <3> 
    39                              <3> %macro vstosb 4
    40                              <3> 	push %1
    41                              <3> 	pop ds
    42                              <3> 	mov si,%2
    43                              <3> 	add si,%3
    44                              <3> 	mov byte [si],%4	
    45                              <3> %endmacro
    46                              <3> 
    47                              <3> %macro vlodsb 4
    48                              <3> 	push %1
    49                              <3> 	pop ds
    50                              <3> 	mov si,%2
    51                              <3> 	add si,%3
    52                              <3> 	mov byte %4,[si]	
    53                              <3> %endmacro 	 
    54                              <3> 
    55                              <3> %macro int16toreg 3
    56                              <3> 	push %2
    57                              <3> 	push %1
    58                              <3> 	pop ds
    59                              <3> 	pop si
    60                              <3> 	mov word %3,[si]	
    61                              <3> %endmacro
    62                              <3> 
    63                              <3> %macro regtoint16 3
    64                              <3> 	push %3
    65                              <3> 	push %2
    66                              <3> 	pop ds
    67                              <3> 	pop si
    68                              <3> 	mov word [si],%1	
    69                              <3> %endmacro
    70                              <3> 
    71                              <3> %macro mov32 2
    72                              <3> 	mov32 cs, %1, cs, %2
    73                              <3> %endmacro
    74                              <3> 
    75                              <3> %macro mov16 2
    76                              <3> 	mov16 cs, %1, cs, %2
    77                              <3> %endmacro
    78                              <3> 
    79                              <3> %macro mov32 4
    80                              <3> 	mov ax,%3
    81                              <3> 	mov ds,ax
    82                              <3> 	mov cx,[%4+2]
    83                              <3> 	mov dx,[%4]
    84                              <3> 	mov ax,%1
    85                              <3> 	mov ds,ax
    86                              <3> 	mov [%2+2],cx
    87                              <3> 	mov [%2],dx
    88                              <3> %endmacro
    89                              <3> 
    90                              <3> %macro mov16 4
    91                              <3> 	mov ax,%3
    92                              <3> 	mov ds,ax
    93                              <3> 	mov bx,[%4]
    94                              <3> 	mov ax,%1
    95                              <3> 	mov ds,ax
    96                              <3> 	mov [%2],bx
    97                              <3> %endmacro
    98                              <3>  	 	
    99                              <3> %macro mformat 4
   100                              <3> 	stkopen 8
   101                              <3> 	mov word [ bp + 0 ], %1
   102                              <3> 	mov word [ bp + 2 ], %2
   103                              <3> 	mov word [ bp + 4 ], %3
   104                              <3> 	mov word [ bp + 6 ], %4
   105                              <3> 	call kernel_segment:mformat
   106                              <3> 	stkclose 8
   107                              <3> %endmacro
   108                              <3> 
   109                              <3> %macro malloc 6
   110                              <3> 	stkopen 0Bh
   111                              <3> 	mov word [ bp + 4 ], %3
   112                              <3> 	mov word [ bp + 6 ], %4
   113                              <3> 	mov word [ bp + 8 ], %5	
   114                              <3> 	call kernel_segment:malloc
   115                              <3> 	push sp
   116                              <3> 	pop bp
   117                              <3> 	mov word %1, [ bp ]
   118                              <3> 	mov word %2, [ bp + 2 ]
   119                              <3> 	mov byte %6, [ bp + 0x0A ]
   120                              <3> 	stkclose 0Bh
   121                              <3> %endmacro 	
   122                              <3> 
   123                              <3> %macro laddr 2
   124                              <3> 	laddr %1, %2, %1, %2
   125                              <3> %endmacro
   126                              <3> 
   127                              <3> %macro faddr 2
   128                              <3> 	faddr %1, %2, %1, %2
   129                              <3> %endmacro
   130                              <3>  	
   131                              <3> %macro laddr 4
   132                              <3> 	stkopen 8
   133                              <3> 	mov word [ bp + 4 ], %3
   134                              <3> 	mov word [ bp + 6 ], %4	
   135                              <3> 	call kernel_segment:laddr
   136                              <3> 	push sp
   137                              <3> 	pop bp
   138                              <3> 	mov word %1, [ bp + 0 ]
   139                              <3> 	mov word %2, [ bp + 2 ]	
   140                              <3> 	stkclose 8
   141                              <3> %endmacro
   142                              <3> 
   143                              <3> %macro faddr 4
   144                              <3> 	stkopen 8
   145                              <3> 	mov word [ bp + 4 ], %3
   146                              <3> 	mov word [ bp + 6 ], %4	
   147                              <3> 	call kernel_segment:faddr
   148                              <3> 	push sp
   149                              <3> 	pop bp
   150                              <3> 	mov word %1, [ bp + 0 ]
   151                              <3> 	mov word %2, [ bp + 2 ]	
   152                              <3> 	stkclose 8
   153                              <3> %endmacro	
   154                              <3>  
   155                              <3> 
   156                              <3> %macro stkopen 1		
   157                              <3> 	sub word sp, %1
   158                              <3> 	push sp
   159                              <3> 	pop bp
   160                              <3> %endmacro
   161                              <3> 
   162                              <3> %macro stkclose 1
   163                              <3> 	add word sp, %1
   164                              <3> %endmacro
   165                              <3> 
   166                              <3> %macro stkload 1-* 	
   167                              <3>  	%rep %0
   168                              <3>  	 	%rotate -1
   169                              <3>  		pop %1
   170                              <3>  	%endrep
   171                              <3>  	%rep %0
   172                              <3>  		push %1
   173                              <3>  		%rotate 1
   174                              <3>  	%endrep
   175                              <3> %endmacro
   176                              <3> 
   177                              <3> %macro stkpush 1-* 	
   178                              <3>  	%rep %0
   179                              <3>  		push %1
   180                              <3>  		%rotate 1
   181                              <3>  	%endrep 	
   182                              <3> %endmacro
   183                              <3>  
   184                              <3> %macro stkpop 1-*
   185                              <3>  	%rep %0
   186                              <3>  	 	%rotate -1
   187                              <3>  		pop %1
   188                              <3>  	%endrep 	 	
   189                              <3> %endmacro
   190                              <3> 
   191                              <3> %endif 
   192                              <2> 	
   193                              <2> %macro __prtch 1	
   194                              <2> 	stkopen 1	
   195                              <2> 	mov byte [ bp ], %1
   196                              <2> 	call proc_prtch
   197                              <2> 	stkclose 1
   198                              <2> %endmacro
   199                              <2> 
   200                              <2> %macro __prtln 0
   201                              <2> 	call proc_prtln
   202                              <2> %endmacro	
   203                              <2> 
   204                              <2> %macro __prtsubbin8 3
   205                              <2> 	stkopen 3
   206                              <2> 	mov byte [bp+0],%1
   207                              <2> 	mov byte [bp+1],%2
   208                              <2> 	mov byte [bp+2],%3
   209                              <2> 	call proc_prtsubbin8
   210                              <2> 	stkclose 3
   211                              <2> %endmacro
   212                              <2> 	
   213                              <2> section .data
   214                              <2> 	
   215                              <2> proc_prtIEEE754:
   216 00000000 89E0                <2> 	mov ax,sp
   217 00000002 89C5                <2> 	mov bp,ax			
   218 00000004 8B4602              <2> 	mov ax,[bp+2]	
   219 00000007 50                  <2> 	push ax
   220 00000008 50                  <2> 	push ax
   221 00000009 50                  <2> 	push ax
   222 0000000A 50                  <2> 	push ax	
   223 0000000B 50                  <2> 	push ax
   224                              <2> 	
   225                              <2> 	__prtsubbin8 ah,0,1
   226                              <3>  stkopen 3
   227 0000000C 83EC03              <4>  sub word sp, %1
   228 0000000F 54                  <4>  push sp
   229 00000010 5D                  <4>  pop bp
   230 00000011 886600              <3>  mov byte [bp+0],%1
   231 00000014 C6460100            <3>  mov byte [bp+1],%2
   232 00000018 C6460201            <3>  mov byte [bp+2],%3
   233 0000001C E87201              <3>  call proc_prtsubbin8
   234                              <3>  stkclose 3
   235 0000001F 83C403              <4>  add word sp, %1
   236                              <2> 	__prtch 20h
   237                              <3>  stkopen 1
   238 00000022 83EC01              <4>  sub word sp, %1
   239 00000025 54                  <4>  push sp
   240 00000026 5D                  <4>  pop bp
   241 00000027 C6460020            <3>  mov byte [ bp ], %1
   242 0000002B E82004              <3>  call proc_prtch
   243                              <3>  stkclose 1
   244 0000002E 83C401              <4>  add word sp, %1
   245                              <2> 	__prtch 20h
   246                              <3>  stkopen 1
   247 00000031 83EC01              <4>  sub word sp, %1
   248 00000034 54                  <4>  push sp
   249 00000035 5D                  <4>  pop bp
   250 00000036 C6460020            <3>  mov byte [ bp ], %1
   251 0000003A E81104              <3>  call proc_prtch
   252                              <3>  stkclose 1
   253 0000003D 83C401              <4>  add word sp, %1
   254 00000040 58                  <2> 	pop ax
   255                              <2> 	__prtsubbin8 ah,1,5
   256                              <3>  stkopen 3
   257 00000041 83EC03              <4>  sub word sp, %1
   258 00000044 54                  <4>  push sp
   259 00000045 5D                  <4>  pop bp
   260 00000046 886600              <3>  mov byte [bp+0],%1
   261 00000049 C6460101            <3>  mov byte [bp+1],%2
   262 0000004D C6460205            <3>  mov byte [bp+2],%3
   263 00000051 E83D01              <3>  call proc_prtsubbin8
   264                              <3>  stkclose 3
   265 00000054 83C403              <4>  add word sp, %1
   266 00000057 58                  <2> 	pop ax
   267                              <2> 	__prtsubbin8 ah,5,8
   268                              <3>  stkopen 3
   269 00000058 83EC03              <4>  sub word sp, %1
   270 0000005B 54                  <4>  push sp
   271 0000005C 5D                  <4>  pop bp
   272 0000005D 886600              <3>  mov byte [bp+0],%1
   273 00000060 C6460105            <3>  mov byte [bp+1],%2
   274 00000064 C6460208            <3>  mov byte [bp+2],%3
   275 00000068 E82601              <3>  call proc_prtsubbin8
   276                              <3>  stkclose 3
   277 0000006B 83C403              <4>  add word sp, %1
   278                              <2> 	
   279 0000006E 58                  <2> 	pop ax
   280                              <2> 	__prtsubbin8 al,0,1
   281                              <3>  stkopen 3
   282 0000006F 83EC03              <4>  sub word sp, %1
   283 00000072 54                  <4>  push sp
   284 00000073 5D                  <4>  pop bp
   285 00000074 884600              <3>  mov byte [bp+0],%1
   286 00000077 C6460100            <3>  mov byte [bp+1],%2
   287 0000007B C6460201            <3>  mov byte [bp+2],%3
   288 0000007F E80F01              <3>  call proc_prtsubbin8
   289                              <3>  stkclose 3
   290 00000082 83C403              <4>  add word sp, %1
   291                              <2> 	__prtch 20h
   292                              <3>  stkopen 1
   293 00000085 83EC01              <4>  sub word sp, %1
   294 00000088 54                  <4>  push sp
   295 00000089 5D                  <4>  pop bp
   296 0000008A C6460020            <3>  mov byte [ bp ], %1
   297 0000008E E8BD03              <3>  call proc_prtch
   298                              <3>  stkclose 1
   299 00000091 83C401              <4>  add word sp, %1
   300                              <2> 	__prtch 20h
   301                              <3>  stkopen 1
   302 00000094 83EC01              <4>  sub word sp, %1
   303 00000097 54                  <4>  push sp
   304 00000098 5D                  <4>  pop bp
   305 00000099 C6460020            <3>  mov byte [ bp ], %1
   306 0000009D E8AE03              <3>  call proc_prtch
   307                              <3>  stkclose 1
   308 000000A0 83C401              <4>  add word sp, %1
   309 000000A3 58                  <2> 	pop ax
   310                              <2> 	__prtsubbin8 al,1,4
   311                              <3>  stkopen 3
   312 000000A4 83EC03              <4>  sub word sp, %1
   313 000000A7 54                  <4>  push sp
   314 000000A8 5D                  <4>  pop bp
   315 000000A9 884600              <3>  mov byte [bp+0],%1
   316 000000AC C6460101            <3>  mov byte [bp+1],%2
   317 000000B0 C6460204            <3>  mov byte [bp+2],%3
   318 000000B4 E8DA00              <3>  call proc_prtsubbin8
   319                              <3>  stkclose 3
   320 000000B7 83C403              <4>  add word sp, %1
   321                              <2> 	__prtch 20h
   322                              <3>  stkopen 1
   323 000000BA 83EC01              <4>  sub word sp, %1
   324 000000BD 54                  <4>  push sp
   325 000000BE 5D                  <4>  pop bp
   326 000000BF C6460020            <3>  mov byte [ bp ], %1
   327 000000C3 E88803              <3>  call proc_prtch
   328                              <3>  stkclose 1
   329 000000C6 83C401              <4>  add word sp, %1
   330 000000C9 58                  <2> 	pop ax
   331                              <2> 	__prtsubbin8 al,4,8
   332                              <3>  stkopen 3
   333 000000CA 83EC03              <4>  sub word sp, %1
   334 000000CD 54                  <4>  push sp
   335 000000CE 5D                  <4>  pop bp
   336 000000CF 884600              <3>  mov byte [bp+0],%1
   337 000000D2 C6460104            <3>  mov byte [bp+1],%2
   338 000000D6 C6460208            <3>  mov byte [bp+2],%3
   339 000000DA E8B400              <3>  call proc_prtsubbin8
   340                              <3>  stkclose 3
   341 000000DD 83C403              <4>  add word sp, %1
   342                              <2> 	__prtch 20h
   343                              <3>  stkopen 1
   344 000000E0 83EC01              <4>  sub word sp, %1
   345 000000E3 54                  <4>  push sp
   346 000000E4 5D                  <4>  pop bp
   347 000000E5 C6460020            <3>  mov byte [ bp ], %1
   348 000000E9 E86203              <3>  call proc_prtch
   349                              <3>  stkclose 1
   350 000000EC 83C401              <4>  add word sp, %1
   351                              <2> 	
   352 000000EF 89E0                <2> 	mov ax,sp
   353 000000F1 89C5                <2> 	mov bp,ax			
   354 000000F3 8B4604              <2> 	mov ax,[bp+4]
   355 000000F6 50                  <2> 	push ax
   356 000000F7 50                  <2> 	push ax
   357 000000F8 50                  <2> 	push ax
   358                              <2> 	
   359                              <2> 	__prtsubbin8 ah,0,4
   360                              <3>  stkopen 3
   361 000000F9 83EC03              <4>  sub word sp, %1
   362 000000FC 54                  <4>  push sp
   363 000000FD 5D                  <4>  pop bp
   364 000000FE 886600              <3>  mov byte [bp+0],%1
   365 00000101 C6460100            <3>  mov byte [bp+1],%2
   366 00000105 C6460204            <3>  mov byte [bp+2],%3
   367 00000109 E88500              <3>  call proc_prtsubbin8
   368                              <3>  stkclose 3
   369 0000010C 83C403              <4>  add word sp, %1
   370                              <2> 	__prtch 20h
   371                              <3>  stkopen 1
   372 0000010F 83EC01              <4>  sub word sp, %1
   373 00000112 54                  <4>  push sp
   374 00000113 5D                  <4>  pop bp
   375 00000114 C6460020            <3>  mov byte [ bp ], %1
   376 00000118 E83303              <3>  call proc_prtch
   377                              <3>  stkclose 1
   378 0000011B 83C401              <4>  add word sp, %1
   379 0000011E 58                  <2> 	pop ax
   380                              <2> 	__prtsubbin8 ah,4,8
   381                              <3>  stkopen 3
   382 0000011F 83EC03              <4>  sub word sp, %1
   383 00000122 54                  <4>  push sp
   384 00000123 5D                  <4>  pop bp
   385 00000124 886600              <3>  mov byte [bp+0],%1
   386 00000127 C6460104            <3>  mov byte [bp+1],%2
   387 0000012B C6460208            <3>  mov byte [bp+2],%3
   388 0000012F E85F00              <3>  call proc_prtsubbin8
   389                              <3>  stkclose 3
   390 00000132 83C403              <4>  add word sp, %1
   391                              <2> 	__prtch 20h
   392                              <3>  stkopen 1
   393 00000135 83EC01              <4>  sub word sp, %1
   394 00000138 54                  <4>  push sp
   395 00000139 5D                  <4>  pop bp
   396 0000013A C6460020            <3>  mov byte [ bp ], %1
   397 0000013E E80D03              <3>  call proc_prtch
   398                              <3>  stkclose 1
   399 00000141 83C401              <4>  add word sp, %1
   400                              <2> 	
   401 00000144 58                  <2> 	pop ax
   402                              <2> 	__prtsubbin8 al,0,4
   403                              <3>  stkopen 3
   404 00000145 83EC03              <4>  sub word sp, %1
   405 00000148 54                  <4>  push sp
   406 00000149 5D                  <4>  pop bp
   407 0000014A 884600              <3>  mov byte [bp+0],%1
   408 0000014D C6460100            <3>  mov byte [bp+1],%2
   409 00000151 C6460204            <3>  mov byte [bp+2],%3
   410 00000155 E83900              <3>  call proc_prtsubbin8
   411                              <3>  stkclose 3
   412 00000158 83C403              <4>  add word sp, %1
   413                              <2> 	__prtch 20h
   414                              <3>  stkopen 1
   415 0000015B 83EC01              <4>  sub word sp, %1
   416 0000015E 54                  <4>  push sp
   417 0000015F 5D                  <4>  pop bp
   418 00000160 C6460020            <3>  mov byte [ bp ], %1
   419 00000164 E8E702              <3>  call proc_prtch
   420                              <3>  stkclose 1
   421 00000167 83C401              <4>  add word sp, %1
   422 0000016A 58                  <2> 	pop ax
   423                              <2> 	__prtsubbin8 al,4,8
   424                              <3>  stkopen 3
   425 0000016B 83EC03              <4>  sub word sp, %1
   426 0000016E 54                  <4>  push sp
   427 0000016F 5D                  <4>  pop bp
   428 00000170 884600              <3>  mov byte [bp+0],%1
   429 00000173 C6460104            <3>  mov byte [bp+1],%2
   430 00000177 C6460208            <3>  mov byte [bp+2],%3
   431 0000017B E81300              <3>  call proc_prtsubbin8
   432                              <3>  stkclose 3
   433 0000017E 83C403              <4>  add word sp, %1
   434                              <2> 	__prtch 20h
   435                              <3>  stkopen 1
   436 00000181 83EC01              <4>  sub word sp, %1
   437 00000184 54                  <4>  push sp
   438 00000185 5D                  <4>  pop bp
   439 00000186 C6460020            <3>  mov byte [ bp ], %1
   440 0000018A E8C102              <3>  call proc_prtch
   441                              <3>  stkclose 1
   442 0000018D 83C401              <4>  add word sp, %1
   443                              <2> 	
   444 00000190 C3                  <2> 	ret
   445                              <2> 	
   446                              <2> proc_prtsubbin8:
   447 00000191 89E0                <2> 	mov ax,sp
   448 00000193 89C5                <2> 	mov bp,ax
   449                              <2> 	
   450 00000195 8A4602              <2> 	mov al,[bp+2]
   451 00000198 50                  <2> 	push ax
   452                              <2> 	
   453 00000199 8A4E03              <2> 	mov cl,[bp+3]
   454 0000019C 8A6E04              <2> 	mov ch,[bp+4]
   455 0000019F 80FD08              <2> 	cmp ch,8
   456 000001A2 7602                <2> 	jbe .l1	
   457 000001A4 B508                <2> 		mov ch,8
   458                              <2> 	.l1:		
   459 000001A6 38E9                <2> 		cmp cl,ch		
   460 000001A8 731D                <2> 		jae .l2
   461                              <2> 		
   462 000001AA 58                  <2> 		pop ax
   463 000001AB 50                  <2> 		push ax
   464 000001AC D2E0                <2> 		shl al,cl
   465 000001AE C0E807              <2> 		shr al,7		
   466 000001B1 0430                <2> 		add al,30h
   467                              <2> 		
   468 000001B3 51                  <2> 		push cx
   469                              <2> 		__prtch al
   470                              <3>  stkopen 1
   471 000001B4 83EC01              <4>  sub word sp, %1
   472 000001B7 54                  <4>  push sp
   473 000001B8 5D                  <4>  pop bp
   474 000001B9 884600              <3>  mov byte [ bp ], %1
   475 000001BC E88F02              <3>  call proc_prtch
   476                              <3>  stkclose 1
   477 000001BF 83C401              <4>  add word sp, %1
   478 000001C2 59                  <2> 		pop cx
   479                              <2> 		
   480 000001C3 FEC1                <2> 		inc cl
   481 000001C5 EBDF                <2> 		jmp .l1
   482                              <2> 	.l2:	
   483 000001C7 58                  <2> 	pop ax
   484                              <2> 	
   485 000001C8 C3                  <2> 	ret
   486                              <2> 	
   487                              <2> proc_prtbin16:
   488 000001C9 89E0                <2> 	mov ax,sp
   489 000001CB 89C5                <2> 	mov bp,ax
   490                              <2> 		
   491 000001CD 8A7E04              <2> 	mov bh, [bp+4]
   492 000001D0 B300                <2> 	mov bl,0
   493 000001D2 B201                <2> 	mov dl,TRUE
   494 000001D4 30ED                <2> 	xor ch,ch
   495 000001D6 B102                <2> 	mov cl,2
   496                              <2> 	.l1:
   497 000001D8 80F900              <2> 		cmp cl,0
   498 000001DB 744B                <2> 		jz .l2		
   499                              <2> 		
   500 000001DD 55                  <2> 		push bp
   501 000001DE 01CD                <2> 		add bp,cx
   502 000001E0 45                  <2> 		inc bp
   503                              <2> 		
   504 000001E1 0A5E00              <2> 		or byte bl, [bp]
   505 000001E4 08FB                <2> 		or byte bl, bh
   506 000001E6 743B                <2> 		jz .prted											
   507 000001E8 53                  <2> 			push bx
   508 000001E9 51                  <2> 			push cx	
   509 000001EA 80FA01              <2> 			cmp dl, TRUE
   510 000001ED 7402                <2> 			je .first
   511 000001EF EB10                <2> 			jmp .nfirst
   512                              <2> 			.first:
   513 000001F1 B200                <2> 				mov dl, FALSE
   514 000001F3 52                  <2> 				push dx
   515                              <2> 				
   516 000001F4 88FC                <2> 				mov ah, bh
   517 000001F6 8A4600              <2> 				mov byte al, [bp]
   518 000001F9 50                  <2> 				push ax
   519 000001FA E84000              <2> 				call proc_prtbin8
   520 000001FD 58                  <2> 				pop ax
   521                              <2> 							
   522 000001FE 5A                  <2> 				pop dx
   523 000001FF EB0C                <2> 				jmp .endfirst
   524                              <2> 			.nfirst:
   525 00000201 52                  <2> 				push dx
   526                              <2> 				
   527 00000202 B401                <2> 				mov ah, TRUE
   528 00000204 8A4600              <2> 				mov byte al, [bp]
   529 00000207 50                  <2> 				push ax
   530 00000208 E83200              <2> 				call proc_prtbin8
   531 0000020B 58                  <2> 				pop ax
   532                              <2> 								
   533 0000020C 5A                  <2> 				pop dx
   534                              <2> 			.endfirst:	
   535 0000020D 59                  <2> 			pop cx
   536 0000020E 5B                  <2> 			pop bx		
   537                              <2> 			
   538 0000020F 80F901              <2> 			cmp cl,1
   539 00000212 760F                <2> 			jbe .spaceprted
   540                              <2> 				__prtch 20h
   541                              <3>  stkopen 1
   542 00000214 83EC01              <4>  sub word sp, %1
   543 00000217 54                  <4>  push sp
   544 00000218 5D                  <4>  pop bp
   545 00000219 C6460020            <3>  mov byte [ bp ], %1
   546 0000021D E82E02              <3>  call proc_prtch
   547                              <3>  stkclose 1
   548 00000220 83C401              <4>  add word sp, %1
   549                              <2> 			.spaceprted:
   550                              <2> 		.prted:
   551                              <2> 		
   552 00000223 5D                  <2> 		pop bp
   553                              <2> 		
   554 00000224 FEC9                <2> 		dec cl
   555 00000226 EBB0                <2> 		jmp .l1
   556                              <2> 	.l2:
   557                              <2> 	
   558 00000228 80FB00              <2> 	cmp bl,0
   559 0000022B 750F                <2> 	jnz .end
   560                              <2> 		__prtch 30h
   561                              <3>  stkopen 1
   562 0000022D 83EC01              <4>  sub word sp, %1
   563 00000230 54                  <4>  push sp
   564 00000231 5D                  <4>  pop bp
   565 00000232 C6460030            <3>  mov byte [ bp ], %1
   566 00000236 E81502              <3>  call proc_prtch
   567                              <3>  stkclose 1
   568 00000239 83C401              <4>  add word sp, %1
   569                              <2> 	.end:
   570                              <2> 	
   571 0000023C C3                  <2> 	ret	
   572                              <2> 	
   573                              <2> proc_prtbin8:
   574 0000023D 89E0                <2> 	mov ax,sp
   575 0000023F 89C5                <2> 	mov bp,ax
   576 00000241 8A4602              <2> 	mov byte al, [bp+2]
   577 00000244 3C00                <2> 	cmp al, 0
   578 00000246 0F858700            <2> 	jnz .nzero
   579                              <2> 		__prtch 30h
   580                              <3>  stkopen 1
   581 0000024A 83EC01              <4>  sub word sp, %1
   582 0000024D 54                  <4>  push sp
   583 0000024E 5D                  <4>  pop bp
   584 0000024F C6460030            <3>  mov byte [ bp ], %1
   585 00000253 E8F801              <3>  call proc_prtch
   586                              <3>  stkclose 1
   587 00000256 83C401              <4>  add word sp, %1
   588                              <2> 		
   589 00000259 89E0                <2> 		mov ax,sp
   590 0000025B 89C5                <2> 		mov bp,ax
   591 0000025D 8A4603              <2> 		mov byte al, [bp+3]		
   592 00000260 3C00                <2> 		cmp al, FALSE
   593 00000262 0F84C500            <2> 		je .end
   594                              <2> 			__prtch 30h
   595                              <3>  stkopen 1
   596 00000266 83EC01              <4>  sub word sp, %1
   597 00000269 54                  <4>  push sp
   598 0000026A 5D                  <4>  pop bp
   599 0000026B C6460030            <3>  mov byte [ bp ], %1
   600 0000026F E8DC01              <3>  call proc_prtch
   601                              <3>  stkclose 1
   602 00000272 83C401              <4>  add word sp, %1
   603                              <2> 			__prtch 30h
   604                              <3>  stkopen 1
   605 00000275 83EC01              <4>  sub word sp, %1
   606 00000278 54                  <4>  push sp
   607 00000279 5D                  <4>  pop bp
   608 0000027A C6460030            <3>  mov byte [ bp ], %1
   609 0000027E E8CD01              <3>  call proc_prtch
   610                              <3>  stkclose 1
   611 00000281 83C401              <4>  add word sp, %1
   612                              <2> 			__prtch 30h
   613                              <3>  stkopen 1
   614 00000284 83EC01              <4>  sub word sp, %1
   615 00000287 54                  <4>  push sp
   616 00000288 5D                  <4>  pop bp
   617 00000289 C6460030            <3>  mov byte [ bp ], %1
   618 0000028D E8BE01              <3>  call proc_prtch
   619                              <3>  stkclose 1
   620 00000290 83C401              <4>  add word sp, %1
   621                              <2> 			__prtch 30h
   622                              <3>  stkopen 1
   623 00000293 83EC01              <4>  sub word sp, %1
   624 00000296 54                  <4>  push sp
   625 00000297 5D                  <4>  pop bp
   626 00000298 C6460030            <3>  mov byte [ bp ], %1
   627 0000029C E8AF01              <3>  call proc_prtch
   628                              <3>  stkclose 1
   629 0000029F 83C401              <4>  add word sp, %1
   630                              <2> 			__prtch 30h
   631                              <3>  stkopen 1
   632 000002A2 83EC01              <4>  sub word sp, %1
   633 000002A5 54                  <4>  push sp
   634 000002A6 5D                  <4>  pop bp
   635 000002A7 C6460030            <3>  mov byte [ bp ], %1
   636 000002AB E8A001              <3>  call proc_prtch
   637                              <3>  stkclose 1
   638 000002AE 83C401              <4>  add word sp, %1
   639                              <2> 			__prtch 30h
   640                              <3>  stkopen 1
   641 000002B1 83EC01              <4>  sub word sp, %1
   642 000002B4 54                  <4>  push sp
   643 000002B5 5D                  <4>  pop bp
   644 000002B6 C6460030            <3>  mov byte [ bp ], %1
   645 000002BA E89101              <3>  call proc_prtch
   646                              <3>  stkclose 1
   647 000002BD 83C401              <4>  add word sp, %1
   648                              <2> 			__prtch 30h
   649                              <3>  stkopen 1
   650 000002C0 83EC01              <4>  sub word sp, %1
   651 000002C3 54                  <4>  push sp
   652 000002C4 5D                  <4>  pop bp
   653 000002C5 C6460030            <3>  mov byte [ bp ], %1
   654 000002C9 E88201              <3>  call proc_prtch
   655                              <3>  stkclose 1
   656 000002CC 83C401              <4>  add word sp, %1
   657 000002CF EB5A                <2> 			jmp .end		
   658                              <2> 	.nzero:
   659                              <2> 
   660 000002D1 B000                <2> 	mov byte al, FALSE
   661 000002D3 50                  <2> 	push ax
   662                              <2> 
   663 000002D4 89E0                <2> 	mov ax,sp
   664 000002D6 89C5                <2> 	mov bp,ax
   665 000002D8 8A5E04              <2> 	mov byte bl, [bp+4]
   666 000002DB B100                <2> 	mov cl,0
   667                              <2> 	.l1:
   668 000002DD 80F908              <2> 		cmp cl,8
   669 000002E0 7348                <2> 		jae .l2
   670                              <2> 		
   671 000002E2 88C8                <2> 		mov al,cl
   672                              <2> 		
   673 000002E4 88DA                <2> 		mov dl, bl		
   674                              <2> 		
   675                              <2> 		.l1.1:
   676 000002E6 3C00                <2> 			cmp al,0
   677 000002E8 7406                <2> 			jz .l1.2
   678                              <2> 							
   679 000002EA D0E2                <2> 			shl dl,1
   680                              <2> 			
   681 000002EC FEC8                <2> 			dec al
   682 000002EE EBF6                <2> 			jmp .l1.1
   683                              <2> 		.l1.2:
   684                              <2> 						
   685 000002F0 C0EA07              <2> 		shr dl,7
   686                              <2> 		
   687 000002F3 89E0                <2> 		mov ax,sp
   688 000002F5 89C5                <2> 		mov bp,ax			
   689 000002F7 8A4605              <2> 		mov byte al, [bp+5]
   690 000002FA 3C01                <2> 		cmp al, TRUE
   691 000002FC 7413                <2> 		je .endzero		
   692 000002FE 80FA00              <2> 			cmp dl,0
   693 00000301 7402                <2> 			jz .zero
   694 00000303 EB08                <2> 			jmp .notzero
   695                              <2> 			.zero:
   696 00000305 58                  <2> 				pop ax
   697 00000306 50                  <2> 				push ax
   698 00000307 3C01                <2> 				cmp al, TRUE				
   699 00000309 7406                <2> 				je .endzero
   700 0000030B EB19                <2> 				jmp .inc
   701                              <2> 			.notzero:
   702 0000030D 58                  <2> 				pop ax
   703 0000030E B001                <2> 				mov al, TRUE	
   704 00000310 50                  <2> 				push ax				
   705                              <2> 		.endzero:
   706                              <2> 									
   707 00000311 80C230              <2> 		add dl,30h
   708                              <2> 
   709 00000314 51                  <2> 		push cx
   710 00000315 52                  <2> 		push dx
   711                              <2> 		__prtch dl
   712                              <3>  stkopen 1
   713 00000316 83EC01              <4>  sub word sp, %1
   714 00000319 54                  <4>  push sp
   715 0000031A 5D                  <4>  pop bp
   716 0000031B 885600              <3>  mov byte [ bp ], %1
   717 0000031E E82D01              <3>  call proc_prtch
   718                              <3>  stkclose 1
   719 00000321 83C401              <4>  add word sp, %1
   720 00000324 5A                  <2> 		pop dx
   721 00000325 59                  <2> 		pop cx	
   722                              <2> 
   723                              <2> 		.inc:
   724                              <2> 	
   725 00000326 FEC1                <2> 		inc cl
   726 00000328 EBB3                <2> 		jmp .l1	
   727                              <2> 	.l2:
   728                              <2> 	
   729 0000032A 58                  <2> 	pop ax
   730                              <2> 	
   731                              <2> 	.end:
   732                              <2> 	
   733 0000032B C3                  <2> 	ret	
   734                              <2> 
   735                              <2> proc_prthex16:
   736 0000032C 89E0                <2> 	mov ax,sp
   737 0000032E 89C5                <2> 	mov bp,ax
   738                              <2> 
   739 00000330 8A7E04              <2> 	mov byte bh, [bp+4]		
   740 00000333 B300                <2> 	mov bl,0	
   741 00000335 B201                <2> 	mov dl,TRUE
   742 00000337 30ED                <2> 	xor ch,ch
   743 00000339 B102                <2> 	mov cl, 2	
   744                              <2> 	.l1:			
   745 0000033B 80F900              <2> 		cmp cl,0
   746 0000033E 7437                <2> 		jz .l2
   747                              <2> 							
   748 00000340 55                  <2> 		push bp		
   749 00000341 01CD                <2> 		add bp,cx
   750 00000343 45                  <2> 		inc bp		
   751                              <2> 		
   752 00000344 0A5E00              <2> 		or byte bl, [bp]
   753 00000347 08FB                <2> 		or byte bl, bh
   754 00000349 7427                <2> 		jz .prted							
   755 0000034B 53                  <2> 			push bx
   756 0000034C 51                  <2> 			push cx	
   757 0000034D 80FA01              <2> 			cmp dl, TRUE
   758 00000350 7402                <2> 			je .first
   759 00000352 EB10                <2> 			jmp .nfirst
   760                              <2> 			.first:
   761 00000354 B200                <2> 				mov dl, FALSE
   762 00000356 52                  <2> 				push dx
   763                              <2> 				
   764 00000357 88FC                <2> 				mov ah, bh
   765 00000359 8A4600              <2> 				mov byte al, [bp]
   766 0000035C 50                  <2> 				push ax
   767 0000035D E82C00              <2> 				call proc_prthex8
   768 00000360 58                  <2> 				pop ax
   769                              <2> 							
   770 00000361 5A                  <2> 				pop dx
   771 00000362 EB0C                <2> 				jmp .endfirst
   772                              <2> 			.nfirst:
   773 00000364 52                  <2> 				push dx
   774                              <2> 				
   775 00000365 B401                <2> 				mov ah, TRUE
   776 00000367 8A4600              <2> 				mov byte al, [bp]
   777 0000036A 50                  <2> 				push ax
   778 0000036B E81E00              <2> 				call proc_prthex8
   779 0000036E 58                  <2> 				pop ax
   780                              <2> 								
   781 0000036F 5A                  <2> 				pop dx
   782                              <2> 			.endfirst:	
   783 00000370 59                  <2> 			pop cx
   784 00000371 5B                  <2> 			pop bx		
   785                              <2> 		.prted:
   786                              <2> 		
   787 00000372 5D                  <2> 		pop bp
   788                              <2> 	
   789 00000373 FEC9                <2> 		dec cl
   790 00000375 EBC4                <2> 		jmp .l1		
   791                              <2> 	.l2:
   792                              <2> 	
   793 00000377 80FB00              <2> 	cmp bl,0
   794 0000037A 750F                <2> 	jnz .end
   795                              <2> 		__prtch 30h
   796                              <3>  stkopen 1
   797 0000037C 83EC01              <4>  sub word sp, %1
   798 0000037F 54                  <4>  push sp
   799 00000380 5D                  <4>  pop bp
   800 00000381 C6460030            <3>  mov byte [ bp ], %1
   801 00000385 E8C600              <3>  call proc_prtch
   802                              <3>  stkclose 1
   803 00000388 83C401              <4>  add word sp, %1
   804                              <2> 	.end:
   805                              <2> 	
   806 0000038B C3                  <2> 	ret
   807                              <2> 	
   808                              <2> proc_prthex8:
   809 0000038C 89E0                <2> 	mov ax,sp
   810 0000038E 89C5                <2> 	mov bp,ax
   811 00000390 8A4602              <2> 	mov byte al, [bp+2]
   812 00000393 3C00                <2> 	cmp al, 0
   813 00000395 752B                <2> 	jnz .nzero
   814                              <2> 		__prtch 30h
   815                              <3>  stkopen 1
   816 00000397 83EC01              <4>  sub word sp, %1
   817 0000039A 54                  <4>  push sp
   818 0000039B 5D                  <4>  pop bp
   819 0000039C C6460030            <3>  mov byte [ bp ], %1
   820 000003A0 E8AB00              <3>  call proc_prtch
   821                              <3>  stkclose 1
   822 000003A3 83C401              <4>  add word sp, %1
   823                              <2> 		
   824 000003A6 89E0                <2> 		mov ax,sp
   825 000003A8 89C5                <2> 		mov bp,ax
   826 000003AA 8A4603              <2> 		mov byte al, [bp+3]		
   827 000003AD 3C00                <2> 		cmp al, FALSE
   828 000003AF 7476                <2> 		je .end
   829                              <2> 			__prtch 30h
   830                              <3>  stkopen 1
   831 000003B1 83EC01              <4>  sub word sp, %1
   832 000003B4 54                  <4>  push sp
   833 000003B5 5D                  <4>  pop bp
   834 000003B6 C6460030            <3>  mov byte [ bp ], %1
   835 000003BA E89100              <3>  call proc_prtch
   836                              <3>  stkclose 1
   837 000003BD 83C401              <4>  add word sp, %1
   838 000003C0 EB65                <2> 			jmp .end		
   839                              <2> 	.nzero:
   840                              <2> 
   841 000003C2 B000                <2> 	mov byte al, FALSE
   842 000003C4 50                  <2> 	push ax
   843                              <2> 
   844 000003C5 89E0                <2> 	mov ax,sp
   845 000003C7 89C5                <2> 	mov bp,ax
   846 000003C9 8A5E04              <2> 	mov byte bl, [bp+4]
   847 000003CC B102                <2> 	mov cl,2
   848                              <2> 	.l1:
   849 000003CE 80F900              <2> 		cmp cl,0
   850 000003D1 7453                <2> 		jz .l2
   851                              <2> 		
   852 000003D3 B002                <2> 		mov al,2
   853 000003D5 28C8                <2> 		sub al,cl
   854                              <2> 		
   855 000003D7 88DA                <2> 		mov dl, bl	
   856                              <2> 		
   857                              <2> 		.l1.1:
   858 000003D9 3C00                <2> 			cmp al,0
   859 000003DB 7407                <2> 			jz .l1.2
   860                              <2> 							
   861 000003DD C0E204              <2> 			shl dl,4
   862                              <2> 			
   863 000003E0 FEC8                <2> 			dec al
   864 000003E2 EBF5                <2> 			jmp .l1.1
   865                              <2> 		.l1.2:
   866                              <2> 						
   867 000003E4 C0EA04              <2> 		shr dl,4
   868                              <2> 
   869 000003E7 89E0                <2> 		mov ax,sp
   870 000003E9 89C5                <2> 		mov bp,ax			
   871 000003EB 8A4605              <2> 		mov byte al, [bp+5]
   872 000003EE 3C01                <2> 		cmp al, TRUE
   873 000003F0 7413                <2> 		je .endzero		
   874 000003F2 80FA00              <2> 			cmp dl,0
   875 000003F5 7402                <2> 			jz .zero
   876 000003F7 EB08                <2> 			jmp .notzero
   877                              <2> 			.zero:
   878 000003F9 58                  <2> 				pop ax
   879 000003FA 50                  <2> 				push ax
   880 000003FB 3C01                <2> 				cmp al, TRUE				
   881 000003FD 7406                <2> 				je .endzero
   882 000003FF EB21                <2> 				jmp .dec
   883                              <2> 			.notzero:
   884 00000401 58                  <2> 				pop ax
   885 00000402 B001                <2> 				mov al, TRUE	
   886 00000404 50                  <2> 				push ax				
   887                              <2> 		.endzero:
   888                              <2> 						
   889 00000405 80FA09              <2> 		cmp dl,9
   890 00000408 7603                <2> 		jbe .endsumseven  		
   891 0000040A 80C207              <2> 		add dl,7
   892                              <2> 		.endsumseven:
   893                              <2> 						
   894 0000040D 80C230              <2> 		add dl,30h
   895                              <2> 
   896 00000410 51                  <2> 		push cx
   897 00000411 52                  <2> 		push dx
   898                              <2> 		__prtch dl
   899                              <3>  stkopen 1
   900 00000412 83EC01              <4>  sub word sp, %1
   901 00000415 54                  <4>  push sp
   902 00000416 5D                  <4>  pop bp
   903 00000417 885600              <3>  mov byte [ bp ], %1
   904 0000041A E83100              <3>  call proc_prtch
   905                              <3>  stkclose 1
   906 0000041D 83C401              <4>  add word sp, %1
   907 00000420 5A                  <2> 		pop dx
   908 00000421 59                  <2> 		pop cx	
   909                              <2> 
   910                              <2> 		.dec:
   911                              <2> 	
   912 00000422 FEC9                <2> 		dec cl
   913 00000424 EBA8                <2> 		jmp .l1	
   914                              <2> 	.l2:
   915                              <2> 	
   916 00000426 58                  <2> 	pop ax
   917                              <2> 	
   918                              <2> 	.end:
   919                              <2> 	
   920 00000427 C3                  <2> 	ret
   921                              <2> 
   922                              <2> proc_prtstr:
   923 00000428 89E0                <2> 	mov ax,sp
   924 0000042A 89C5                <2> 	mov bp,ax
   925                              <2> 	
   926 0000042C 8B4602              <2> 	mov ax, [bp+2]
   927 0000042F 8ED8                <2> 	mov ds, ax
   928 00000431 8B7604              <2> 	mov si, [bp+4]						
   929                              <2> 	.loop:
   930 00000434 AC                  <2> 		lodsb
   931 00000435 3C00                <2> 		cmp al,0h
   932 00000437 7414                <2> 		jz .done
   933                              <2> 		
   934 00000439 1E                  <2> 		push ds
   935 0000043A 56                  <2> 		push si
   936                              <2> 					
   937                              <2> 		__prtch al										
   938                              <3>  stkopen 1
   939 0000043B 83EC01              <4>  sub word sp, %1
   940 0000043E 54                  <4>  push sp
   941 0000043F 5D                  <4>  pop bp
   942 00000440 884600              <3>  mov byte [ bp ], %1
   943 00000443 E80800              <3>  call proc_prtch
   944                              <3>  stkclose 1
   945 00000446 83C401              <4>  add word sp, %1
   946                              <2> 									
   947 00000449 5E                  <2> 		pop si
   948 0000044A 1F                  <2> 		pop ds
   949                              <2> 											
   950 0000044B EBE7                <2> 		jmp .loop 
   951                              <2> 	.done:
   952                              <2> 	
   953 0000044D C3                  <2> 	ret	
   954                              <2> 	
   955                              <2> proc_prtch:
   956 0000044E 89E0                <2> 	mov ax,sp
   957 00000450 89C5                <2> 	mov bp,ax
   958                              <2> 
   959 00000452 8A4602              <2> 	mov al,[bp+2]
   960 00000455 B40E                <2> 	mov ah,0Eh
   961 00000457 B700                <2> 	mov bh,00h
   962 00000459 CD10                <2> 	int 10h	
   963                              <2> 	
   964 0000045B C3                  <2> 	ret
   965                              <2> 
   966                              <2> proc_prtln:
   967 0000045C B403                <2> 	mov ah,03h
   968 0000045E B700                <2> 	mov bh,00h
   969 00000460 CD10                <2> 	int 10h
   970                              <2> 	
   971 00000462 B402                <2> 	mov ah,02h
   972 00000464 FEC6                <2> 	inc dh
   973 00000466 B200                <2> 	mov dl,00h
   974 00000468 CD10                <2> 	int 10h	
   975                              <2> 	
   976 0000046A C3                  <2> 	ret
   977                              <2> 	
   978                              <2> %endif
   979                              <1>  	%include "lib/system.mac"
   980                              <2>  
   981                              <2> %ifndef SYSTEM_MAC
   982                              <2>  	%define SYSTEM_MAC
   983                              <2>  	
   984                              <2> 	%ifndef TRUE
   985                              <2> 		%define TRUE 01h
   986                              <2> 	%endif
   987                              <2> 	%ifndef FALSE
   988                              <2> 		%define FALSE 00h
   989                              <2> 	%endif
   990                              <2> 	
   991                              <2> %macro vlodsb 3
   992                              <2> 	vlodsb cs, %1, %2, %3
   993                              <2> %endmacro
   994                              <2> 
   995                              <2> %macro vstosb 3
   996                              <2> 	vstosb cs, %1, %2, %3
   997                              <2> %endmacro
   998                              <2> 	 	
   999                              <2> %macro int16toreg 2
  1000                              <2> 	int16toreg cs, %1, %2
  1001                              <2> %endmacro
  1002                              <2> 
  1003                              <2> %macro regtoint16 2
  1004                              <2> 	regtoint16 %1, cs, %2
  1005                              <2> %endmacro
  1006                              <2> 
  1007                              <2> %macro vstosb 4
  1008                              <2> 	push %1
  1009                              <2> 	pop ds
  1010                              <2> 	mov si,%2
  1011                              <2> 	add si,%3
  1012                              <2> 	mov byte [si],%4	
  1013                              <2> %endmacro
  1014                              <2> 
  1015                              <2> %macro vlodsb 4
  1016                              <2> 	push %1
  1017                              <2> 	pop ds
  1018                              <2> 	mov si,%2
  1019                              <2> 	add si,%3
  1020                              <2> 	mov byte %4,[si]	
  1021                              <2> %endmacro 	 
  1022                              <2> 
  1023                              <2> %macro int16toreg 3
  1024                              <2> 	push %2
  1025                              <2> 	push %1
  1026                              <2> 	pop ds
  1027                              <2> 	pop si
  1028                              <2> 	mov word %3,[si]	
  1029                              <2> %endmacro
  1030                              <2> 
  1031                              <2> %macro regtoint16 3
  1032                              <2> 	push %3
  1033                              <2> 	push %2
  1034                              <2> 	pop ds
  1035                              <2> 	pop si
  1036                              <2> 	mov word [si],%1	
  1037                              <2> %endmacro
  1038                              <2> 
  1039                              <2> %macro mov32 2
  1040                              <2> 	mov32 cs, %1, cs, %2
  1041                              <2> %endmacro
  1042                              <2> 
  1043                              <2> %macro mov16 2
  1044                              <2> 	mov16 cs, %1, cs, %2
  1045                              <2> %endmacro
  1046                              <2> 
  1047                              <2> %macro mov32 4
  1048                              <2> 	mov ax,%3
  1049                              <2> 	mov ds,ax
  1050                              <2> 	mov cx,[%4+2]
  1051                              <2> 	mov dx,[%4]
  1052                              <2> 	mov ax,%1
  1053                              <2> 	mov ds,ax
  1054                              <2> 	mov [%2+2],cx
  1055                              <2> 	mov [%2],dx
  1056                              <2> %endmacro
  1057                              <2> 
  1058                              <2> %macro mov16 4
  1059                              <2> 	mov ax,%3
  1060                              <2> 	mov ds,ax
  1061                              <2> 	mov bx,[%4]
  1062                              <2> 	mov ax,%1
  1063                              <2> 	mov ds,ax
  1064                              <2> 	mov [%2],bx
  1065                              <2> %endmacro
  1066                              <2>  	 	
  1067                              <2> %macro mformat 4
  1068                              <2> 	stkopen 8
  1069                              <2> 	mov word [ bp + 0 ], %1
  1070                              <2> 	mov word [ bp + 2 ], %2
  1071                              <2> 	mov word [ bp + 4 ], %3
  1072                              <2> 	mov word [ bp + 6 ], %4
  1073                              <2> 	call kernel_segment:mformat
  1074                              <2> 	stkclose 8
  1075                              <2> %endmacro
  1076                              <2> 
  1077                              <2> %macro malloc 6
  1078                              <2> 	stkopen 0Bh
  1079                              <2> 	mov word [ bp + 4 ], %3
  1080                              <2> 	mov word [ bp + 6 ], %4
  1081                              <2> 	mov word [ bp + 8 ], %5	
  1082                              <2> 	call kernel_segment:malloc
  1083                              <2> 	push sp
  1084                              <2> 	pop bp
  1085                              <2> 	mov word %1, [ bp ]
  1086                              <2> 	mov word %2, [ bp + 2 ]
  1087                              <2> 	mov byte %6, [ bp + 0x0A ]
  1088                              <2> 	stkclose 0Bh
  1089                              <2> %endmacro 	
  1090                              <2> 
  1091                              <2> %macro laddr 2
  1092                              <2> 	laddr %1, %2, %1, %2
  1093                              <2> %endmacro
  1094                              <2> 
  1095                              <2> %macro faddr 2
  1096                              <2> 	faddr %1, %2, %1, %2
  1097                              <2> %endmacro
  1098                              <2>  	
  1099                              <2> %macro laddr 4
  1100                              <2> 	stkopen 8
  1101                              <2> 	mov word [ bp + 4 ], %3
  1102                              <2> 	mov word [ bp + 6 ], %4	
  1103                              <2> 	call kernel_segment:laddr
  1104                              <2> 	push sp
  1105                              <2> 	pop bp
  1106                              <2> 	mov word %1, [ bp + 0 ]
  1107                              <2> 	mov word %2, [ bp + 2 ]	
  1108                              <2> 	stkclose 8
  1109                              <2> %endmacro
  1110                              <2> 
  1111                              <2> %macro faddr 4
  1112                              <2> 	stkopen 8
  1113                              <2> 	mov word [ bp + 4 ], %3
  1114                              <2> 	mov word [ bp + 6 ], %4	
  1115                              <2> 	call kernel_segment:faddr
  1116                              <2> 	push sp
  1117                              <2> 	pop bp
  1118                              <2> 	mov word %1, [ bp + 0 ]
  1119                              <2> 	mov word %2, [ bp + 2 ]	
  1120                              <2> 	stkclose 8
  1121                              <2> %endmacro	
  1122                              <2>  
  1123                              <2> 
  1124                              <2> %macro stkopen 1		
  1125                              <2> 	sub word sp, %1
  1126                              <2> 	push sp
  1127                              <2> 	pop bp
  1128                              <2> %endmacro
  1129                              <2> 
  1130                              <2> %macro stkclose 1
  1131                              <2> 	add word sp, %1
  1132                              <2> %endmacro
  1133                              <2> 
  1134                              <2> %macro stkload 1-* 	
  1135                              <2>  	%rep %0
  1136                              <2>  	 	%rotate -1
  1137                              <2>  		pop %1
  1138                              <2>  	%endrep
  1139                              <2>  	%rep %0
  1140                              <2>  		push %1
  1141                              <2>  		%rotate 1
  1142                              <2>  	%endrep
  1143                              <2> %endmacro
  1144                              <2> 
  1145                              <2> %macro stkpush 1-* 	
  1146                              <2>  	%rep %0
  1147                              <2>  		push %1
  1148                              <2>  		%rotate 1
  1149                              <2>  	%endrep 	
  1150                              <2> %endmacro
  1151                              <2>  
  1152                              <2> %macro stkpop 1-*
  1153                              <2>  	%rep %0
  1154                              <2>  	 	%rotate -1
  1155                              <2>  		pop %1
  1156                              <2>  	%endrep 	 	
  1157                              <2> %endmacro
  1158                              <2> 
  1159                              <2> %endif 
  1160                              <1> 
  1161                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1162                              <1> %macro printf 1-*	
  1163                              <1> 	%rep %0					
  1164                              <1> 		__printf %1
  1165                              <1> 		%rotate 1		
  1166                              <1> 	%endrep
  1167                              <1> %endmacro	
  1168                              <1> 
  1169                              <1> ; OBS: Esta macro não deve ser utilizada em procedimentos dinâmicos		
  1170                              <1> %macro __printf 1
  1171                              <1> 	section .data
  1172                              <1> 		%%str: db %1,0
  1173                              <1> 	section .text
  1174                              <1> 		prtstr cs, %%str				
  1175                              <1> %endmacro
  1176                              <1> 
  1177                              <1> %macro prtstr 2
  1178                              <1> 	stkopen 4
  1179                              <1> 	mov word [bp], %1
  1180                              <1> 	mov word [bp+2], %2
  1181                              <1> 	call proc_prtstr
  1182                              <1> 	stkclose 4
  1183                              <1> %endmacro
  1184                              <1> 
  1185                              <1> 
  1186                              <1> %macro prtIEEE754 1
  1187                              <1> 	prtIEEE754 cs, %1
  1188                              <1> %endmacro
  1189                              <1> 
  1190                              <1> %macro prtIEEE754 2
  1191                              <1> 	stkopen 4
  1192                              <1> 	mov ax,%1
  1193                              <1> 	mov ds,ax
  1194                              <1> 	mov ax, [%2+2]
  1195                              <1> 	mov word [bp+0], ax
  1196                              <1> 	mov ax, [%2]
  1197                              <1> 	mov word [bp+2], ax
  1198                              <1> 	call proc_prtIEEE754
  1199                              <1> 	stkclose 4
  1200                              <1> %endmacro
  1201                              <1> 
  1202                              <1> %macro prtbool 1	
  1203                              <1> 	cmp byte %1, TRUE
  1204                              <1> 	je .true
  1205                              <1> 	jmp .false
  1206                              <1> 	.true:
  1207                              <1> 		prtf "true"
  1208                              <1> 		jmp .endcmp
  1209                              <1> 	.false:
  1210                              <1> 		prtf "false"
  1211                              <1> 	.endcmp:	
  1212                              <1> %endmacro
  1213                              <1> 
  1214                              <1> %macro prtptr 2-3 TRUE
  1215                              <1> 	stkopen 3
  1216                              <1> 	mov word [ bp + 0 ], %2
  1217                              <1> 	mov byte [ bp + 2 ], %3
  1218                              <1> 	prthex16 %1, %3
  1219                              <1> 	writechar ':'
  1220                              <1> 	push sp
  1221                              <1> 	pop bp
  1222                              <1> 	mov word ax, [ bp + 0 ]
  1223                              <1> 	mov byte bl, [ bp + 2 ]
  1224                              <1> 	prthex16 ax, bl
  1225                              <1> 	stkclose 3
  1226                              <1> %endmacro
  1227                              <1> 
  1228                              <1> %macro prtfptr 2-3 TRUE
  1229                              <1> 	stkopen 3
  1230                              <1> 	mov word [ bp + 0 ], %1
  1231                              <1> 	mov byte [ bp + 2 ], %3
  1232                              <1> 	prthex16 %2, %3
  1233                              <1> 	push sp
  1234                              <1> 	pop bp
  1235                              <1> 	mov word ax, [ bp + 0 ]
  1236                              <1> 	mov byte bl, [ bp + 2 ]
  1237                              <1> 	prthex16 ax, bl
  1238                              <1> 	stkclose 3
  1239                              <1> %endmacro
  1240                              <1> 
  1241                              <1> %macro prtbin32 1
  1242                              <1> 	prtbin32 cs, %1
  1243                              <1> %endmacro
  1244                              <1> 
  1245                              <1> %macro prtbin32 2
  1246                              <1> 	mov ax,%1
  1247                              <1> 	mov ds,ax
  1248                              <1> 	mov word ax,[%2+2]
  1249                              <1> 	prtbin16 ax
  1250                              <1> 	prtch 20h
  1251                              <1> 	mov ax,%1
  1252                              <1> 	mov ds,ax
  1253                              <1> 	mov word ax,[%2]
  1254                              <1> 	prtbin16 ax
  1255                              <1> %endmacro
  1256                              <1> 
  1257                              <1> %macro prthex32 1
  1258                              <1> 	prthex32 cs, %1
  1259                              <1> %endmacro
  1260                              <1> 
  1261                              <1> %macro iprthex32 1
  1262                              <1> 	iprthex32 cs, %1
  1263                              <1> %endmacro
  1264                              <1> 
  1265                              <1> %macro prthex32 2
  1266                              <1> 	mov ax,%1
  1267                              <1> 	mov ds,ax
  1268                              <1> 	mov word ax,[%2+2]
  1269                              <1> 	prthex16 ax	
  1270                              <1> 	mov ax,%1
  1271                              <1> 	mov ds,ax
  1272                              <1> 	mov word ax,[%2]
  1273                              <1> 	prthex16 ax
  1274                              <1> %endmacro
  1275                              <1> 
  1276                              <1> %macro iprthex32 2
  1277                              <1> 	mov ax,%1
  1278                              <1> 	mov ds,ax
  1279                              <1> 	mov word ax,[%2+2]
  1280                              <1> 	mov word bx,ax
  1281                              <1> 	and ax,0x7FFF
  1282                              <1> 	push ax
  1283                              <1> 	and bx,0x8000
  1284                              <1> 	cmp bx,0
  1285                              <1> 	jz %%prt
  1286                              <1> 		prtch '-'		
  1287                              <1> 	%%prt:	
  1288                              <1> 	pop ax
  1289                              <1> 	prthex16 ax
  1290                              <1> 	mov ax,%1
  1291                              <1> 	mov ds,ax
  1292                              <1> 	mov word ax,[%2]
  1293                              <1> 	prthex16 ax	
  1294                              <1> %endmacro
  1295                              <1> 
  1296                              <1> %macro prtsubbin8 3
  1297                              <1> 	__prtsubbin8 %1,%2,%3
  1298                              <1> %endmacro
  1299                              <1> 
  1300                              <1> %macro prtbin16 1
  1301                              <1> 	stkopen 3
  1302                              <1> 	mov word [bp], %1
  1303                              <1> 	mov byte [bp+2], TRUE
  1304                              <1> 	call proc_prtbin16
  1305                              <1> 	stkclose 3
  1306                              <1> %endmacro
  1307                              <1> 
  1308                              <1> %macro prtbin8 1
  1309                              <1> 	stkopen 2
  1310                              <1> 	mov byte [bp], %1
  1311                              <1> 	mov byte [bp+1], TRUE
  1312                              <1> 	call proc_prtbin8
  1313                              <1> 	stkclose 2
  1314                              <1> %endmacro
  1315                              <1> 
  1316                              <1> %macro prthex16 1
  1317                              <1> 	stkopen 3
  1318                              <1> 	mov word [bp], %1
  1319                              <1> 	mov byte [bp+2], TRUE
  1320                              <1> 	call proc_prthex16
  1321                              <1> 	stkclose 3
  1322                              <1> %endmacro
  1323                              <1> 
  1324                              <1> %macro prthex8 1
  1325                              <1> 	stkopen 2
  1326                              <1> 	mov byte [bp], %1
  1327                              <1> 	mov byte [bp+1], TRUE
  1328                              <1> 	call proc_prthex8
  1329                              <1> 	stkclose 2
  1330                              <1> %endmacro
  1331                              <1> 
  1332                              <1> %macro prtch 1
  1333                              <1> 	__prtch %1
  1334                              <1> %endmacro
  1335                              <1> 
  1336                              <1> %macro prtln 0
  1337                              <1> 	__prtln
  1338                              <1> %endmacro	
  1339                              <1> 
  1340                              <1> 
  1341                              <1> %macro prtstk 0
  1342                              <1> 	printf "stack ---> "
  1343                              <1> 	mov ax,sp
  1344                              <1> 	prthex16 ax
  1345                              <1> %endmacro  
  1346                              <1> 
  1347                              <1> %endif
  1348                                  
  1349                                  %include "lib/gmode/g0x0D.mac"
  1350                              <1> 
  1351                              <1> %ifndef G0x0D_MAC
  1352                              <1> 	%define G0x0D_MAC		
  1353                              <1> 		
  1354                              <1> 	%include "lib/gmode/g0x0D.asm"	
  1355                              <2> 
  1356                              <2> %ifndef G0x0D_ASM
  1357                              <2> 	%define G0x0D_ASM
  1358                              <2> 
  1359                              <2> 	%include "lib/system.mac"
  1360                              <3>  
  1361                              <3> %ifndef SYSTEM_MAC
  1362                              <3>  	%define SYSTEM_MAC
  1363                              <3>  	
  1364                              <3> 	%ifndef TRUE
  1365                              <3> 		%define TRUE 01h
  1366                              <3> 	%endif
  1367                              <3> 	%ifndef FALSE
  1368                              <3> 		%define FALSE 00h
  1369                              <3> 	%endif
  1370                              <3> 	
  1371                              <3> %macro vlodsb 3
  1372                              <3> 	vlodsb cs, %1, %2, %3
  1373                              <3> %endmacro
  1374                              <3> 
  1375                              <3> %macro vstosb 3
  1376                              <3> 	vstosb cs, %1, %2, %3
  1377                              <3> %endmacro
  1378                              <3> 	 	
  1379                              <3> %macro int16toreg 2
  1380                              <3> 	int16toreg cs, %1, %2
  1381                              <3> %endmacro
  1382                              <3> 
  1383                              <3> %macro regtoint16 2
  1384                              <3> 	regtoint16 %1, cs, %2
  1385                              <3> %endmacro
  1386                              <3> 
  1387                              <3> %macro vstosb 4
  1388                              <3> 	push %1
  1389                              <3> 	pop ds
  1390                              <3> 	mov si,%2
  1391                              <3> 	add si,%3
  1392                              <3> 	mov byte [si],%4	
  1393                              <3> %endmacro
  1394                              <3> 
  1395                              <3> %macro vlodsb 4
  1396                              <3> 	push %1
  1397                              <3> 	pop ds
  1398                              <3> 	mov si,%2
  1399                              <3> 	add si,%3
  1400                              <3> 	mov byte %4,[si]	
  1401                              <3> %endmacro 	 
  1402                              <3> 
  1403                              <3> %macro int16toreg 3
  1404                              <3> 	push %2
  1405                              <3> 	push %1
  1406                              <3> 	pop ds
  1407                              <3> 	pop si
  1408                              <3> 	mov word %3,[si]	
  1409                              <3> %endmacro
  1410                              <3> 
  1411                              <3> %macro regtoint16 3
  1412                              <3> 	push %3
  1413                              <3> 	push %2
  1414                              <3> 	pop ds
  1415                              <3> 	pop si
  1416                              <3> 	mov word [si],%1	
  1417                              <3> %endmacro
  1418                              <3> 
  1419                              <3> %macro mov32 2
  1420                              <3> 	mov32 cs, %1, cs, %2
  1421                              <3> %endmacro
  1422                              <3> 
  1423                              <3> %macro mov16 2
  1424                              <3> 	mov16 cs, %1, cs, %2
  1425                              <3> %endmacro
  1426                              <3> 
  1427                              <3> %macro mov32 4
  1428                              <3> 	mov ax,%3
  1429                              <3> 	mov ds,ax
  1430                              <3> 	mov cx,[%4+2]
  1431                              <3> 	mov dx,[%4]
  1432                              <3> 	mov ax,%1
  1433                              <3> 	mov ds,ax
  1434                              <3> 	mov [%2+2],cx
  1435                              <3> 	mov [%2],dx
  1436                              <3> %endmacro
  1437                              <3> 
  1438                              <3> %macro mov16 4
  1439                              <3> 	mov ax,%3
  1440                              <3> 	mov ds,ax
  1441                              <3> 	mov bx,[%4]
  1442                              <3> 	mov ax,%1
  1443                              <3> 	mov ds,ax
  1444                              <3> 	mov [%2],bx
  1445                              <3> %endmacro
  1446                              <3>  	 	
  1447                              <3> %macro mformat 4
  1448                              <3> 	stkopen 8
  1449                              <3> 	mov word [ bp + 0 ], %1
  1450                              <3> 	mov word [ bp + 2 ], %2
  1451                              <3> 	mov word [ bp + 4 ], %3
  1452                              <3> 	mov word [ bp + 6 ], %4
  1453                              <3> 	call kernel_segment:mformat
  1454                              <3> 	stkclose 8
  1455                              <3> %endmacro
  1456                              <3> 
  1457                              <3> %macro malloc 6
  1458                              <3> 	stkopen 0Bh
  1459                              <3> 	mov word [ bp + 4 ], %3
  1460                              <3> 	mov word [ bp + 6 ], %4
  1461                              <3> 	mov word [ bp + 8 ], %5	
  1462                              <3> 	call kernel_segment:malloc
  1463                              <3> 	push sp
  1464                              <3> 	pop bp
  1465                              <3> 	mov word %1, [ bp ]
  1466                              <3> 	mov word %2, [ bp + 2 ]
  1467                              <3> 	mov byte %6, [ bp + 0x0A ]
  1468                              <3> 	stkclose 0Bh
  1469                              <3> %endmacro 	
  1470                              <3> 
  1471                              <3> %macro laddr 2
  1472                              <3> 	laddr %1, %2, %1, %2
  1473                              <3> %endmacro
  1474                              <3> 
  1475                              <3> %macro faddr 2
  1476                              <3> 	faddr %1, %2, %1, %2
  1477                              <3> %endmacro
  1478                              <3>  	
  1479                              <3> %macro laddr 4
  1480                              <3> 	stkopen 8
  1481                              <3> 	mov word [ bp + 4 ], %3
  1482                              <3> 	mov word [ bp + 6 ], %4	
  1483                              <3> 	call kernel_segment:laddr
  1484                              <3> 	push sp
  1485                              <3> 	pop bp
  1486                              <3> 	mov word %1, [ bp + 0 ]
  1487                              <3> 	mov word %2, [ bp + 2 ]	
  1488                              <3> 	stkclose 8
  1489                              <3> %endmacro
  1490                              <3> 
  1491                              <3> %macro faddr 4
  1492                              <3> 	stkopen 8
  1493                              <3> 	mov word [ bp + 4 ], %3
  1494                              <3> 	mov word [ bp + 6 ], %4	
  1495                              <3> 	call kernel_segment:faddr
  1496                              <3> 	push sp
  1497                              <3> 	pop bp
  1498                              <3> 	mov word %1, [ bp + 0 ]
  1499                              <3> 	mov word %2, [ bp + 2 ]	
  1500                              <3> 	stkclose 8
  1501                              <3> %endmacro	
  1502                              <3>  
  1503                              <3> 
  1504                              <3> %macro stkopen 1		
  1505                              <3> 	sub word sp, %1
  1506                              <3> 	push sp
  1507                              <3> 	pop bp
  1508                              <3> %endmacro
  1509                              <3> 
  1510                              <3> %macro stkclose 1
  1511                              <3> 	add word sp, %1
  1512                              <3> %endmacro
  1513                              <3> 
  1514                              <3> %macro stkload 1-* 	
  1515                              <3>  	%rep %0
  1516                              <3>  	 	%rotate -1
  1517                              <3>  		pop %1
  1518                              <3>  	%endrep
  1519                              <3>  	%rep %0
  1520                              <3>  		push %1
  1521                              <3>  		%rotate 1
  1522                              <3>  	%endrep
  1523                              <3> %endmacro
  1524                              <3> 
  1525                              <3> %macro stkpush 1-* 	
  1526                              <3>  	%rep %0
  1527                              <3>  		push %1
  1528                              <3>  		%rotate 1
  1529                              <3>  	%endrep 	
  1530                              <3> %endmacro
  1531                              <3>  
  1532                              <3> %macro stkpop 1-*
  1533                              <3>  	%rep %0
  1534                              <3>  	 	%rotate -1
  1535                              <3>  		pop %1
  1536                              <3>  	%endrep 	 	
  1537                              <3> %endmacro
  1538                              <3> 
  1539                              <3> %endif 
  1540                              <2> 	
  1541                              <2> %macro __width 1
  1542                              <2> 	stkopen 0x02
  1543                              <2> 	call proc_width
  1544                              <2> 	push sp
  1545                              <2> 	pop bp
  1546                              <2> 	mov word %1, [bp+2]
  1547                              <2> 	stkclose 0x02	
  1548                              <2> %endmacro
  1549                              <2> 
  1550                              <2> %macro __height 1
  1551                              <2> 	stkopen 0x02
  1552                              <2> 	call proc_height
  1553                              <2> 	push sp
  1554                              <2> 	pop bp
  1555                              <2> 	mov word %1, [bp+2]
  1556                              <2> 	stkclose 0x02	
  1557                              <2> %endmacro
  1558                              <2> 
  1559                              <2> %macro __setpx 3
  1560                              <2> 	stkopen 0x05
  1561                              <2> 	mov word [bp+0],%1
  1562                              <2> 	mov word [bp+2],%2
  1563                              <2> 	mov byte [bp+4],%3
  1564                              <2> 	call proc_setpx	
  1565                              <2> 	stkclose 0x05
  1566                              <2> %endmacro				
  1567                              <2> 				
  1568                              <2> section .data
  1569                              <2> 
  1570                              <2> proc_initgraph:	
  1571 0000046B B400                <2> 	mov ah,00h
  1572 0000046D B00D                <2> 	mov al,0Dh
  1573 0000046F CD10                <2> 	int 10h
  1574                              <2> 					
  1575 00000471 C3                  <2> 	ret
  1576                              <2> 		
  1577                              <2> proc_closegraph:
  1578 00000472 B400                <2> 	mov ah,00h
  1579 00000474 B003                <2> 	mov al,03h
  1580 00000476 CD10                <2> 	int 10h
  1581                              <2> 	
  1582 00000478 C3                  <2> 	ret
  1583                              <2> 	
  1584                              <2> proc_width:
  1585 00000479 89E0                <2> 	mov ax,sp
  1586 0000047B 89C5                <2> 	mov bp,ax
  1587 0000047D C746024001          <2> 	mov word [bp+2],320
  1588                              <2> 	
  1589 00000482 C3                  <2> 	ret	
  1590                              <2> 
  1591                              <2> proc_height:
  1592 00000483 89E0                <2> 	mov ax,sp
  1593 00000485 89C5                <2> 	mov bp,ax
  1594 00000487 C74602C800          <2> 	mov word [bp+2],200
  1595                              <2> 			
  1596 0000048C C3                  <2> 	ret
  1597                              <2> 	
  1598                              <2> proc_repaint:
  1599 0000048D B80090              <2> 	mov ax,0x9000
  1600 00000490 8ED8                <2> 	mov ds,ax
  1601 00000492 BE0000              <2> 	mov si,0
  1602                              <2> 		
  1603 00000495 BACE03              <2> 	mov dx,0x03CE
  1604 00000498 B80500              <2> 	mov ax,0x0005
  1605 0000049B EF                  <2> 	out dx,ax
  1606                              <2> 		
  1607 0000049C BF0000              <2> 	mov di,0
  1608                              <2> 	.l1:	
  1609 0000049F 81FF401F            <2> 		cmp di,8000
  1610 000004A3 733C                <2> 		jae .l2
  1611                              <2> 
  1612 000004A5 8A1C                <2> 		mov bl,[si+0]
  1613 000004A7 8A7C01              <2> 		mov bh,[si+1]
  1614 000004AA 8A4C02              <2> 		mov cl,[si+2]
  1615 000004AD 8A6C03              <2> 		mov ch,[si+3]
  1616 000004B0 83C604              <2> 		add si,4
  1617                              <2> 
  1618 000004B3 1E                  <2> 		push ds
  1619                              <2> 	
  1620 000004B4 B800A0              <2> 		mov ax,0xA000
  1621 000004B7 8ED8                <2> 		mov ds,ax
  1622                              <2> 		
  1623 000004B9 BAC403              <2> 		mov dx,0x03C4
  1624 000004BC B80201              <2> 		mov ax,0x0102		
  1625 000004BF EF                  <2> 		out dx,ax
  1626 000004C0 881D                <2> 		mov [di],bl
  1627                              <2> 		
  1628 000004C2 BAC403              <2> 		mov dx,0x03C4
  1629 000004C5 B80202              <2> 		mov ax,0x0202		
  1630 000004C8 EF                  <2> 		out dx,ax
  1631 000004C9 883D                <2> 		mov [di],bh
  1632                              <2> 		
  1633 000004CB BAC403              <2> 		mov dx,0x03C4
  1634 000004CE B80204              <2> 		mov ax,0x0402		
  1635 000004D1 EF                  <2> 		out dx,ax
  1636 000004D2 880D                <2> 		mov [di],cl
  1637                              <2> 		
  1638 000004D4 BAC403              <2> 		mov dx,0x03C4
  1639 000004D7 B80208              <2> 		mov ax,0x0802		
  1640 000004DA EF                  <2> 		out dx,ax
  1641 000004DB 882D                <2> 		mov [di],ch
  1642                              <2> 		
  1643 000004DD 1F                  <2> 		pop ds
  1644                              <2> 		
  1645 000004DE 47                  <2> 		inc di
  1646 000004DF EBBE                <2> 		jmp .l1
  1647                              <2> 	.l2:		
  1648                              <2> 		
  1649 000004E1 BAC403              <2> 	mov dx,0x03C4
  1650 000004E4 B8020F              <2> 	mov ax,0x0F02
  1651 000004E7 EF                  <2> 	out dx,ax					
  1652                              <2> 								
  1653 000004E8 C3                  <2> 	ret
  1654                              <2> 
  1655                              <2> proc_setpx:	
  1656 000004E9 89E0                <2> 	mov ax,sp
  1657 000004EB 89C5                <2> 	mov bp,ax
  1658                              <2> 	
  1659 000004ED B80090              <2> 	mov ax,0x9000
  1660 000004F0 8ED8                <2> 	mov ds,ax	
  1661 000004F2 BE0000              <2> 	mov si,0
  1662                              <2> 	
  1663 000004F5 8B4604              <2> 	mov ax,[bp+4]
  1664 000004F8 89C3                <2> 	mov bx,ax
  1665                              <2> 	
  1666 000004FA D1E0                <2> 	shl ax,1
  1667 000004FC C1E303              <2> 	shl bx,3
  1668 000004FF 01D8                <2> 	add ax,bx
  1669 00000501 C1E004              <2> 	shl ax,4
  1670                              <2> 		
  1671 00000504 01C6                <2> 	add si,ax
  1672                              <2> 	
  1673 00000506 8B4602              <2> 	mov ax,[bp+2]	
  1674 00000509 89C1                <2> 	mov cx,ax
  1675 0000050B C1E803              <2> 	shr ax,3
  1676 0000050E C1E002              <2> 	shl ax,2
  1677 00000511 83E107              <2> 	and cx,0x07
  1678                              <2> 		
  1679 00000514 01C6                <2> 	add si,ax
  1680                              <2> 		
  1681 00000516 8A5606              <2> 	mov dl,[bp+6]
  1682 00000519 C0E204              <2> 	shl dl,4
  1683 0000051C 88D4                <2> 	mov ah,dl
  1684 0000051E 88D0                <2> 	mov al,dl
  1685 00000520 88D7                <2> 	mov bh,dl
  1686 00000522 88D3                <2> 	mov bl,dl
  1687                              <2> 	
  1688 00000524 80E410              <2> 	and ah,0x10
  1689 00000527 2420                <2> 	and al,0x20
  1690 00000529 80E740              <2> 	and bh,0x40
  1691 0000052C 80E380              <2> 	and bl,0x80
  1692 0000052F B680                <2> 	mov dh,0x80
  1693 00000531 C0E403              <2> 	shl ah,3
  1694 00000534 C0E002              <2> 	shl al,2
  1695 00000537 D0E7                <2> 	shl bh,1
  1696 00000539 D2EC                <2> 	shr ah,cl
  1697 0000053B D2E8                <2> 	shr al,cl
  1698 0000053D D2EF                <2> 	shr bh,cl
  1699 0000053F D2EB                <2> 	shr bl,cl
  1700 00000541 D2EE                <2> 	shr dh,cl
  1701 00000543 F6D6                <2> 	not dh
  1702                              <2> 	
  1703 00000545 8A0C                <2> 	mov cl,[si]
  1704 00000547 20F1                <2> 	and cl,dh
  1705 00000549 00E1                <2> 	add cl,ah
  1706 0000054B 880C                <2> 	mov [si],cl
  1707 0000054D 46                  <2> 	inc si
  1708                              <2> 	
  1709 0000054E 8A0C                <2> 	mov cl,[si]
  1710 00000550 20F1                <2> 	and cl,dh
  1711 00000552 00C1                <2> 	add cl,al
  1712 00000554 880C                <2> 	mov [si],cl
  1713 00000556 46                  <2> 	inc si
  1714                              <2> 	
  1715 00000557 8A0C                <2> 	mov cl,[si]
  1716 00000559 20F1                <2> 	and cl,dh
  1717 0000055B 00F9                <2> 	add cl,bh
  1718 0000055D 880C                <2> 	mov [si],cl
  1719 0000055F 46                  <2> 	inc si
  1720                              <2> 	
  1721 00000560 8A0C                <2> 	mov cl,[si]
  1722 00000562 20F1                <2> 	and cl,dh
  1723 00000564 00D9                <2> 	add cl,bl
  1724 00000566 880C                <2> 	mov [si],cl
  1725                              <2> 				
  1726 00000568 C3                  <2> 	ret
  1727                              <2> 	
  1728                              <2> %endif
  1729                              <1> 
  1730                              <1> %macro setbgcolor 1
  1731                              <1> 	mov ah,0Bh
  1732                              <1> 	mov bh,00h
  1733                              <1> 	mov bl,%1
  1734                              <1> 	int 10h
  1735                              <1> %endmacro
  1736                              <1> 
  1737                              <1> %macro setpallete 1
  1738                              <1> 	mov ah,0Bh
  1739                              <1> 	mov bh,01h
  1740                              <1> 	mov bl,%1
  1741                              <1> 	int 10h
  1742                              <1> %endmacro
  1743                              <1> 		
  1744                              <1> %macro initgraph 0		
  1745                              <1> 	call proc_initgraph
  1746                              <1> 	setbgcolor 0
  1747                              <1> 	setpallete 1
  1748                              <1> %endmacro
  1749                              <1> 
  1750                              <1> %macro closegraph 0
  1751                              <1> 	call proc_closegraph
  1752                              <1> %endmacro
  1753                              <1> 
  1754                              <1> %macro repaint 0
  1755                              <1> 	call proc_repaint
  1756                              <1> %endmacro
  1757                              <1> 
  1758                              <1> %macro width 2
  1759                              <1> 	stkopen 0x02
  1760                              <1> 	call proc_width
  1761                              <1> 	mov ax,sp
  1762                              <1> 	mov bp,ax
  1763                              <1> 	mov ax,%1
  1764                              <1> 	mov ds,ax
  1765                              <1> 	mov ax,[bp+2]
  1766                              <1> 	mov word [%2],ax	
  1767                              <1> 	stkclose 0x02
  1768                              <1> %endmacro
  1769                              <1> 
  1770                              <1> %macro height 2
  1771                              <1> 	stkopen 0x02
  1772                              <1> 	call proc_height
  1773                              <1> 	mov ax,sp
  1774                              <1> 	mov bp,ax
  1775                              <1> 	mov ax,%1
  1776                              <1> 	mov ds,ax
  1777                              <1> 	mov ax,[bp+2]
  1778                              <1> 	mov word [%2],ax	
  1779                              <1> 	stkclose 0x02
  1780                              <1> %endmacro		
  1781                              <1> 		
  1782                              <1> %endif
  1783                                  
  1784                                  %include "lib/graph.mac"
  1785                              <1> 
  1786                              <1> %ifndef GRAPH_MAC
  1787                              <1> 	%define GRAPH_MAC
  1788                              <1> 
  1789                              <1> 	%include "lib/graph.asm"
  1790                              <2> 
  1791                              <2> %ifndef GRAPH_ASM
  1792                              <2> 	%define GRAPH_ASM
  1793                              <2> 
  1794                              <2> 	%include "lib/system.mac"
  1795                              <3>  
  1796                              <3> %ifndef SYSTEM_MAC
  1797                              <3>  	%define SYSTEM_MAC
  1798                              <3>  	
  1799                              <3> 	%ifndef TRUE
  1800                              <3> 		%define TRUE 01h
  1801                              <3> 	%endif
  1802                              <3> 	%ifndef FALSE
  1803                              <3> 		%define FALSE 00h
  1804                              <3> 	%endif
  1805                              <3> 	
  1806                              <3> %macro vlodsb 3
  1807                              <3> 	vlodsb cs, %1, %2, %3
  1808                              <3> %endmacro
  1809                              <3> 
  1810                              <3> %macro vstosb 3
  1811                              <3> 	vstosb cs, %1, %2, %3
  1812                              <3> %endmacro
  1813                              <3> 	 	
  1814                              <3> %macro int16toreg 2
  1815                              <3> 	int16toreg cs, %1, %2
  1816                              <3> %endmacro
  1817                              <3> 
  1818                              <3> %macro regtoint16 2
  1819                              <3> 	regtoint16 %1, cs, %2
  1820                              <3> %endmacro
  1821                              <3> 
  1822                              <3> %macro vstosb 4
  1823                              <3> 	push %1
  1824                              <3> 	pop ds
  1825                              <3> 	mov si,%2
  1826                              <3> 	add si,%3
  1827                              <3> 	mov byte [si],%4	
  1828                              <3> %endmacro
  1829                              <3> 
  1830                              <3> %macro vlodsb 4
  1831                              <3> 	push %1
  1832                              <3> 	pop ds
  1833                              <3> 	mov si,%2
  1834                              <3> 	add si,%3
  1835                              <3> 	mov byte %4,[si]	
  1836                              <3> %endmacro 	 
  1837                              <3> 
  1838                              <3> %macro int16toreg 3
  1839                              <3> 	push %2
  1840                              <3> 	push %1
  1841                              <3> 	pop ds
  1842                              <3> 	pop si
  1843                              <3> 	mov word %3,[si]	
  1844                              <3> %endmacro
  1845                              <3> 
  1846                              <3> %macro regtoint16 3
  1847                              <3> 	push %3
  1848                              <3> 	push %2
  1849                              <3> 	pop ds
  1850                              <3> 	pop si
  1851                              <3> 	mov word [si],%1	
  1852                              <3> %endmacro
  1853                              <3> 
  1854                              <3> %macro mov32 2
  1855                              <3> 	mov32 cs, %1, cs, %2
  1856                              <3> %endmacro
  1857                              <3> 
  1858                              <3> %macro mov16 2
  1859                              <3> 	mov16 cs, %1, cs, %2
  1860                              <3> %endmacro
  1861                              <3> 
  1862                              <3> %macro mov32 4
  1863                              <3> 	mov ax,%3
  1864                              <3> 	mov ds,ax
  1865                              <3> 	mov cx,[%4+2]
  1866                              <3> 	mov dx,[%4]
  1867                              <3> 	mov ax,%1
  1868                              <3> 	mov ds,ax
  1869                              <3> 	mov [%2+2],cx
  1870                              <3> 	mov [%2],dx
  1871                              <3> %endmacro
  1872                              <3> 
  1873                              <3> %macro mov16 4
  1874                              <3> 	mov ax,%3
  1875                              <3> 	mov ds,ax
  1876                              <3> 	mov bx,[%4]
  1877                              <3> 	mov ax,%1
  1878                              <3> 	mov ds,ax
  1879                              <3> 	mov [%2],bx
  1880                              <3> %endmacro
  1881                              <3>  	 	
  1882                              <3> %macro mformat 4
  1883                              <3> 	stkopen 8
  1884                              <3> 	mov word [ bp + 0 ], %1
  1885                              <3> 	mov word [ bp + 2 ], %2
  1886                              <3> 	mov word [ bp + 4 ], %3
  1887                              <3> 	mov word [ bp + 6 ], %4
  1888                              <3> 	call kernel_segment:mformat
  1889                              <3> 	stkclose 8
  1890                              <3> %endmacro
  1891                              <3> 
  1892                              <3> %macro malloc 6
  1893                              <3> 	stkopen 0Bh
  1894                              <3> 	mov word [ bp + 4 ], %3
  1895                              <3> 	mov word [ bp + 6 ], %4
  1896                              <3> 	mov word [ bp + 8 ], %5	
  1897                              <3> 	call kernel_segment:malloc
  1898                              <3> 	push sp
  1899                              <3> 	pop bp
  1900                              <3> 	mov word %1, [ bp ]
  1901                              <3> 	mov word %2, [ bp + 2 ]
  1902                              <3> 	mov byte %6, [ bp + 0x0A ]
  1903                              <3> 	stkclose 0Bh
  1904                              <3> %endmacro 	
  1905                              <3> 
  1906                              <3> %macro laddr 2
  1907                              <3> 	laddr %1, %2, %1, %2
  1908                              <3> %endmacro
  1909                              <3> 
  1910                              <3> %macro faddr 2
  1911                              <3> 	faddr %1, %2, %1, %2
  1912                              <3> %endmacro
  1913                              <3>  	
  1914                              <3> %macro laddr 4
  1915                              <3> 	stkopen 8
  1916                              <3> 	mov word [ bp + 4 ], %3
  1917                              <3> 	mov word [ bp + 6 ], %4	
  1918                              <3> 	call kernel_segment:laddr
  1919                              <3> 	push sp
  1920                              <3> 	pop bp
  1921                              <3> 	mov word %1, [ bp + 0 ]
  1922                              <3> 	mov word %2, [ bp + 2 ]	
  1923                              <3> 	stkclose 8
  1924                              <3> %endmacro
  1925                              <3> 
  1926                              <3> %macro faddr 4
  1927                              <3> 	stkopen 8
  1928                              <3> 	mov word [ bp + 4 ], %3
  1929                              <3> 	mov word [ bp + 6 ], %4	
  1930                              <3> 	call kernel_segment:faddr
  1931                              <3> 	push sp
  1932                              <3> 	pop bp
  1933                              <3> 	mov word %1, [ bp + 0 ]
  1934                              <3> 	mov word %2, [ bp + 2 ]	
  1935                              <3> 	stkclose 8
  1936                              <3> %endmacro	
  1937                              <3>  
  1938                              <3> 
  1939                              <3> %macro stkopen 1		
  1940                              <3> 	sub word sp, %1
  1941                              <3> 	push sp
  1942                              <3> 	pop bp
  1943                              <3> %endmacro
  1944                              <3> 
  1945                              <3> %macro stkclose 1
  1946                              <3> 	add word sp, %1
  1947                              <3> %endmacro
  1948                              <3> 
  1949                              <3> %macro stkload 1-* 	
  1950                              <3>  	%rep %0
  1951                              <3>  	 	%rotate -1
  1952                              <3>  		pop %1
  1953                              <3>  	%endrep
  1954                              <3>  	%rep %0
  1955                              <3>  		push %1
  1956                              <3>  		%rotate 1
  1957                              <3>  	%endrep
  1958                              <3> %endmacro
  1959                              <3> 
  1960                              <3> %macro stkpush 1-* 	
  1961                              <3>  	%rep %0
  1962                              <3>  		push %1
  1963                              <3>  		%rotate 1
  1964                              <3>  	%endrep 	
  1965                              <3> %endmacro
  1966                              <3>  
  1967                              <3> %macro stkpop 1-*
  1968                              <3>  	%rep %0
  1969                              <3>  	 	%rotate -1
  1970                              <3>  		pop %1
  1971                              <3>  	%endrep 	 	
  1972                              <3> %endmacro
  1973                              <3> 
  1974                              <3> %endif 
  1975                              <2> 	%include "lib/math.mac"
  1976                              <3> 
  1977                              <3> %ifndef MATH_MAC
  1978                              <3> 	%define MATH_MAC
  1979                              <3> 	
  1980                              <3> 	%include "lib/math.asm"
  1981                              <4> 
  1982                              <4> %ifndef MATH_ASM
  1983                              <4> 	%define MATH_ASM
  1984                              <4> 
  1985                              <4> 	%include "lib/system.mac"
  1986                              <5>  
  1987                              <5> %ifndef SYSTEM_MAC
  1988                              <5>  	%define SYSTEM_MAC
  1989                              <5>  	
  1990                              <5> 	%ifndef TRUE
  1991                              <5> 		%define TRUE 01h
  1992                              <5> 	%endif
  1993                              <5> 	%ifndef FALSE
  1994                              <5> 		%define FALSE 00h
  1995                              <5> 	%endif
  1996                              <5> 	
  1997                              <5> %macro vlodsb 3
  1998                              <5> 	vlodsb cs, %1, %2, %3
  1999                              <5> %endmacro
  2000                              <5> 
  2001                              <5> %macro vstosb 3
  2002                              <5> 	vstosb cs, %1, %2, %3
  2003                              <5> %endmacro
  2004                              <5> 	 	
  2005                              <5> %macro int16toreg 2
  2006                              <5> 	int16toreg cs, %1, %2
  2007                              <5> %endmacro
  2008                              <5> 
  2009                              <5> %macro regtoint16 2
  2010                              <5> 	regtoint16 %1, cs, %2
  2011                              <5> %endmacro
  2012                              <5> 
  2013                              <5> %macro vstosb 4
  2014                              <5> 	push %1
  2015                              <5> 	pop ds
  2016                              <5> 	mov si,%2
  2017                              <5> 	add si,%3
  2018                              <5> 	mov byte [si],%4	
  2019                              <5> %endmacro
  2020                              <5> 
  2021                              <5> %macro vlodsb 4
  2022                              <5> 	push %1
  2023                              <5> 	pop ds
  2024                              <5> 	mov si,%2
  2025                              <5> 	add si,%3
  2026                              <5> 	mov byte %4,[si]	
  2027                              <5> %endmacro 	 
  2028                              <5> 
  2029                              <5> %macro int16toreg 3
  2030                              <5> 	push %2
  2031                              <5> 	push %1
  2032                              <5> 	pop ds
  2033                              <5> 	pop si
  2034                              <5> 	mov word %3,[si]	
  2035                              <5> %endmacro
  2036                              <5> 
  2037                              <5> %macro regtoint16 3
  2038                              <5> 	push %3
  2039                              <5> 	push %2
  2040                              <5> 	pop ds
  2041                              <5> 	pop si
  2042                              <5> 	mov word [si],%1	
  2043                              <5> %endmacro
  2044                              <5> 
  2045                              <5> %macro mov32 2
  2046                              <5> 	mov32 cs, %1, cs, %2
  2047                              <5> %endmacro
  2048                              <5> 
  2049                              <5> %macro mov16 2
  2050                              <5> 	mov16 cs, %1, cs, %2
  2051                              <5> %endmacro
  2052                              <5> 
  2053                              <5> %macro mov32 4
  2054                              <5> 	mov ax,%3
  2055                              <5> 	mov ds,ax
  2056                              <5> 	mov cx,[%4+2]
  2057                              <5> 	mov dx,[%4]
  2058                              <5> 	mov ax,%1
  2059                              <5> 	mov ds,ax
  2060                              <5> 	mov [%2+2],cx
  2061                              <5> 	mov [%2],dx
  2062                              <5> %endmacro
  2063                              <5> 
  2064                              <5> %macro mov16 4
  2065                              <5> 	mov ax,%3
  2066                              <5> 	mov ds,ax
  2067                              <5> 	mov bx,[%4]
  2068                              <5> 	mov ax,%1
  2069                              <5> 	mov ds,ax
  2070                              <5> 	mov [%2],bx
  2071                              <5> %endmacro
  2072                              <5>  	 	
  2073                              <5> %macro mformat 4
  2074                              <5> 	stkopen 8
  2075                              <5> 	mov word [ bp + 0 ], %1
  2076                              <5> 	mov word [ bp + 2 ], %2
  2077                              <5> 	mov word [ bp + 4 ], %3
  2078                              <5> 	mov word [ bp + 6 ], %4
  2079                              <5> 	call kernel_segment:mformat
  2080                              <5> 	stkclose 8
  2081                              <5> %endmacro
  2082                              <5> 
  2083                              <5> %macro malloc 6
  2084                              <5> 	stkopen 0Bh
  2085                              <5> 	mov word [ bp + 4 ], %3
  2086                              <5> 	mov word [ bp + 6 ], %4
  2087                              <5> 	mov word [ bp + 8 ], %5	
  2088                              <5> 	call kernel_segment:malloc
  2089                              <5> 	push sp
  2090                              <5> 	pop bp
  2091                              <5> 	mov word %1, [ bp ]
  2092                              <5> 	mov word %2, [ bp + 2 ]
  2093                              <5> 	mov byte %6, [ bp + 0x0A ]
  2094                              <5> 	stkclose 0Bh
  2095                              <5> %endmacro 	
  2096                              <5> 
  2097                              <5> %macro laddr 2
  2098                              <5> 	laddr %1, %2, %1, %2
  2099                              <5> %endmacro
  2100                              <5> 
  2101                              <5> %macro faddr 2
  2102                              <5> 	faddr %1, %2, %1, %2
  2103                              <5> %endmacro
  2104                              <5>  	
  2105                              <5> %macro laddr 4
  2106                              <5> 	stkopen 8
  2107                              <5> 	mov word [ bp + 4 ], %3
  2108                              <5> 	mov word [ bp + 6 ], %4	
  2109                              <5> 	call kernel_segment:laddr
  2110                              <5> 	push sp
  2111                              <5> 	pop bp
  2112                              <5> 	mov word %1, [ bp + 0 ]
  2113                              <5> 	mov word %2, [ bp + 2 ]	
  2114                              <5> 	stkclose 8
  2115                              <5> %endmacro
  2116                              <5> 
  2117                              <5> %macro faddr 4
  2118                              <5> 	stkopen 8
  2119                              <5> 	mov word [ bp + 4 ], %3
  2120                              <5> 	mov word [ bp + 6 ], %4	
  2121                              <5> 	call kernel_segment:faddr
  2122                              <5> 	push sp
  2123                              <5> 	pop bp
  2124                              <5> 	mov word %1, [ bp + 0 ]
  2125                              <5> 	mov word %2, [ bp + 2 ]	
  2126                              <5> 	stkclose 8
  2127                              <5> %endmacro	
  2128                              <5>  
  2129                              <5> 
  2130                              <5> %macro stkopen 1		
  2131                              <5> 	sub word sp, %1
  2132                              <5> 	push sp
  2133                              <5> 	pop bp
  2134                              <5> %endmacro
  2135                              <5> 
  2136                              <5> %macro stkclose 1
  2137                              <5> 	add word sp, %1
  2138                              <5> %endmacro
  2139                              <5> 
  2140                              <5> %macro stkload 1-* 	
  2141                              <5>  	%rep %0
  2142                              <5>  	 	%rotate -1
  2143                              <5>  		pop %1
  2144                              <5>  	%endrep
  2145                              <5>  	%rep %0
  2146                              <5>  		push %1
  2147                              <5>  		%rotate 1
  2148                              <5>  	%endrep
  2149                              <5> %endmacro
  2150                              <5> 
  2151                              <5> %macro stkpush 1-* 	
  2152                              <5>  	%rep %0
  2153                              <5>  		push %1
  2154                              <5>  		%rotate 1
  2155                              <5>  	%endrep 	
  2156                              <5> %endmacro
  2157                              <5>  
  2158                              <5> %macro stkpop 1-*
  2159                              <5>  	%rep %0
  2160                              <5>  	 	%rotate -1
  2161                              <5>  		pop %1
  2162                              <5>  	%endrep 	 	
  2163                              <5> %endmacro
  2164                              <5> 
  2165                              <5> %endif 
  2166                              <4> 
  2167                              <4> %macro __int16to32 3
  2168                              <4> 	stkopen 0x06
  2169                              <4> 	mov word [bp+0],%1
  2170                              <4> 	call proc_int16to32
  2171                              <4> 	push sp
  2172                              <4> 	pop bp
  2173                              <4> 	mov word %2, [bp+2]
  2174                              <4> 	mov word %3, [bp+4]
  2175                              <4> 	stkclose 0x06
  2176                              <4> %endmacro
  2177                              <4> 
  2178                              <4> %macro __int32to16 3
  2179                              <4> 	stkopen 0x06
  2180                              <4> 	mov word [bp+0], %1
  2181                              <4> 	mov word [bp+2], %2
  2182                              <4> 	call proc_int32to16
  2183                              <4> 	push sp
  2184                              <4> 	pop bp
  2185                              <4> 	mov word %3, [bp+4]
  2186                              <4> 	stkclose 0x06
  2187                              <4> %endmacro
  2188                              <4> 
  2189                              <4> %macro __add32 6
  2190                              <4> 	stkopen 0x0C
  2191                              <4> 	mov word [bp+0], %1
  2192                              <4> 	mov word [bp+2], %2
  2193                              <4> 	mov word [bp+4], %3
  2194                              <4> 	mov word [bp+6], %4	
  2195                              <4> 	call proc_add32
  2196                              <4> 	push sp
  2197                              <4> 	pop bp
  2198                              <4> 	mov word %5, [bp+8]
  2199                              <4> 	mov word %6, [bp+0x0A]
  2200                              <4> 	stkclose 0x0C
  2201                              <4> %endmacro
  2202                              <4> 
  2203                              <4> %macro __sub32 6
  2204                              <4> 	stkopen 0x0C
  2205                              <4> 	mov word [bp+0], %1
  2206                              <4> 	mov word [bp+2], %2
  2207                              <4> 	mov word [bp+4], %3
  2208                              <4> 	mov word [bp+6], %4	
  2209                              <4> 	call proc_sub32
  2210                              <4> 	push sp
  2211                              <4> 	pop bp
  2212                              <4> 	mov word %5, [bp+8]
  2213                              <4> 	mov word %6, [bp+0x0A]
  2214                              <4> 	stkclose 0x0C
  2215                              <4> %endmacro
  2216                              <4> 
  2217                              <4> %macro __mul32 6
  2218                              <4> 	stkopen 0x0C
  2219                              <4> 	mov word [bp+0], %1
  2220                              <4> 	mov word [bp+2], %2
  2221                              <4> 	mov word [bp+4], %3
  2222                              <4> 	mov word [bp+6], %4	
  2223                              <4> 	call proc_mul32
  2224                              <4> 	push sp
  2225                              <4> 	pop bp
  2226                              <4> 	mov word %5, [bp+8]
  2227                              <4> 	mov word %6, [bp+0x0A]
  2228                              <4> 	stkclose 0x0C
  2229                              <4> %endmacro
  2230                              <4> 
  2231                              <4> %macro __div32 9
  2232                              <4> 	stkopen 0x11
  2233                              <4> 	mov word [bp+0], %1
  2234                              <4> 	mov word [bp+2], %2
  2235                              <4> 	mov word [bp+4], %3
  2236                              <4> 	mov word [bp+6], %4
  2237                              <4> 	mov word [bp+8], %5
  2238                              <4> 	mov word [bp+0x0A], %6	
  2239                              <4> 	call proc_div32
  2240                              <4> 	push sp
  2241                              <4> 	pop bp
  2242                              <4> 	mov word %7, [bp+0x0C]
  2243                              <4> 	mov word %8, [bp+0x0E]
  2244                              <4> 	mov byte %9, [bp+0x10]
  2245                              <4> 	stkclose 0x11
  2246                              <4> %endmacro
  2247                              <4> 
  2248                              <4> %macro __cmp32 5
  2249                              <4> 	stkopen 9
  2250                              <4> 	mov word [bp+0], %1
  2251                              <4> 	mov word [bp+2], %2
  2252                              <4> 	mov word [bp+4], %3
  2253                              <4> 	mov word [bp+6], %4
  2254                              <4> 	call proc_cmp32
  2255                              <4> 	push sp
  2256                              <4> 	pop bp
  2257                              <4> 	mov byte %5, [bp+8]
  2258                              <4> 	stkclose 9	
  2259                              <4> %endmacro
  2260                              <4> 
  2261                              <4> %macro __shl32 3
  2262                              <4> 	stkopen 5
  2263                              <4> 	mov word [bp+0], %1
  2264                              <4> 	mov word [bp+2], %2
  2265                              <4> 	mov byte [bp+4], %3
  2266                              <4> 	call proc_shl32
  2267                              <4> 	push sp
  2268                              <4> 	pop bp
  2269                              <4> 	mov word %1, [bp+0]
  2270                              <4> 	mov word %2, [bp+2]
  2271                              <4> 	stkclose 5
  2272                              <4> %endmacro
  2273                              <4> 
  2274                              <4> %macro __shr32 3
  2275                              <4> 	stkopen 5
  2276                              <4> 	mov word [bp+0], %1
  2277                              <4> 	mov word [bp+2], %2
  2278                              <4> 	mov byte [bp+4], %3
  2279                              <4> 	call proc_shr32
  2280                              <4> 	push sp
  2281                              <4> 	pop bp
  2282                              <4> 	mov word %1, [bp+0]
  2283                              <4> 	mov word %2, [bp+2]
  2284                              <4> 	stkclose 5
  2285                              <4> %endmacro
  2286                              <4> 
  2287                              <4> %macro __lzcount32 3	
  2288                              <4> 	push %2		
  2289                              <4> 	__lzcount16 %1, cl	
  2290                              <4> 	pop ax
  2291                              <4> 	cmp cl,4
  2292                              <4> 	jb .end
  2293                              <4> 		push cx		
  2294                              <4> 		__lzcount16 ax, al		
  2295                              <4> 		pop cx
  2296                              <4> 		add cl,al
  2297                              <4> 	.end:	
  2298                              <4> 	mov byte %3, cl 
  2299                              <4> %endmacro
  2300                              <4> 
  2301                              <4> %macro __lzcount16 2
  2302                              <4> 	stkopen 3
  2303                              <4> 	mov word [bp+0], %1
  2304                              <4> 	call proc__lzcount16
  2305                              <4> 	push sp
  2306                              <4> 	pop bp
  2307                              <4> 	mov byte %2, [bp+2]	
  2308                              <4> 	stkclose 3
  2309                              <4> %endmacro
  2310                              <4> 
  2311                              <4> %macro __lzbitcount32 3	
  2312                              <4> 	push %2		
  2313                              <4> 	__lzbitcount16 %1, cl
  2314                              <4> 	pop ax
  2315                              <4> 	cmp cl,16
  2316                              <4> 	jb .end
  2317                              <4> 		push cx		
  2318                              <4> 		__lzbitcount16 ax, al		
  2319                              <4> 		pop cx
  2320                              <4> 		add cl,al
  2321                              <4> 	.end:	
  2322                              <4> 	mov byte %3, cl 
  2323                              <4> %endmacro
  2324                              <4> 		
  2325                              <4> %macro __lzbitcount16 2
  2326                              <4> 	stkopen 3
  2327                              <4> 	mov word [bp+0], %1
  2328                              <4> 	call proc__lzbitcount16
  2329                              <4> 	push sp
  2330                              <4> 	pop bp
  2331                              <4> 	mov byte %2, [bp+2]	
  2332                              <4> 	stkclose 3
  2333                              <4> %endmacro	
  2334                              <4> 
  2335                              <4> %macro __calc_dividendo1 7
  2336                              <4> 	stkopen 0x0D
  2337                              <4> 	mov word [bp+0], %1
  2338                              <4> 	mov word [bp+2], %2
  2339                              <4> 	mov word [bp+4], %3
  2340                              <4> 	mov word [bp+6], %4
  2341                              <4> 	call proc_calc_dividendo1
  2342                              <4> 	push sp
  2343                              <4> 	pop bp
  2344                              <4> 	mov word %5, [bp+0x08]
  2345                              <4> 	mov word %6, [bp+0x0A]
  2346                              <4> 	mov byte %7, [bp+0x0C]
  2347                              <4> 	stkclose 0x0D
  2348                              <4> %endmacro
  2349                              <4> 
  2350                              <4> %macro __calc__prox_dividendo 5
  2351                              <4> 	stkopen 9
  2352                              <4> 	mov word [bp+0], %1
  2353                              <4> 	mov word [bp+2], %2
  2354                              <4> 	mov word [bp+4], %3
  2355                              <4> 	mov word [bp+6], %4
  2356                              <4> 	mov word [bp+8], %5
  2357                              <4> 	call proc_calc_prox_dividendo
  2358                              <4> 	push sp
  2359                              <4> 	pop bp
  2360                              <4> 	mov word %3, [bp+4]
  2361                              <4> 	mov word %4, [bp+6]
  2362                              <4> 	mov byte %5, [bp+8]
  2363                              <4> 	stkclose 9
  2364                              <4> %endmacro
  2365                              <4> 				
  2366                              <4> section .data
  2367                              <4> 
  2368                              <4> proc_int16to32:
  2369 00000569 89E0                <4> 	mov ax,sp
  2370 0000056B 89C5                <4> 	mov bp,ax
  2371                              <4> 	
  2372 0000056D 8B4602              <4> 	mov ax,[bp+2]
  2373 00000570 894606              <4> 	mov [bp+6],ax
  2374                              <4> 				
  2375 00000573 250080              <4> 	and ax,0x8000
  2376 00000576 83F800              <4> 	cmp ax,0
  2377 00000579 7507                <4> 	jnz .one
  2378 0000057B C746040000          <4> 		mov word [bp+4],0			
  2379 00000580 EB05                <4> 		jmp .endcmp
  2380                              <4> 	.one:				
  2381 00000582 C74604FFFF          <4> 		mov word [bp+4],0xFFFF
  2382                              <4> 	.endcmp:
  2383                              <4> 	
  2384 00000587 C3                  <4> 	ret
  2385                              <4> 	
  2386                              <4> proc_int32to16:
  2387 00000588 89E0                <4> 	mov ax,sp
  2388 0000058A 89C5                <4> 	mov bp,ax
  2389                              <4> 		
  2390 0000058C 8B4604              <4> 	mov ax,[bp+4]
  2391 0000058F 25FF7F              <4> 	and ax,0x7FFF
  2392 00000592 894606              <4> 	mov [bp+6],ax
  2393                              <4> 	
  2394 00000595 8B4602              <4> 	mov ax,[bp+2]
  2395 00000598 250080              <4> 	and ax,0x8000
  2396 0000059B 014606              <4> 	add [bp+6],ax
  2397                              <4> 		
  2398 0000059E C3                  <4> 	ret
  2399                              <4> 
  2400                              <4> proc_idiv32:
  2401                              <4> 	stkopen 0x11
  2402 0000059F 83EC11              <5>  sub word sp, %1
  2403 000005A2 54                  <5>  push sp
  2404 000005A3 5D                  <5>  pop bp
  2405 000005A4 8B4613              <4> 	mov ax,[bp+0x13]
  2406 000005A7 25FF7F              <4> 	and ax,0x7FFF
  2407 000005AA 894600              <4> 	mov [bp+0],ax
  2408 000005AD 8B4615              <4> 	mov ax,[bp+0x15]
  2409 000005B0 894602              <4> 	mov [bp+2],ax
  2410 000005B3 8B4617              <4> 	mov ax,[bp+0x17]
  2411 000005B6 25FF7F              <4> 	and ax,0x7FFF
  2412 000005B9 894604              <4> 	mov [bp+4],ax
  2413 000005BC 8B4619              <4> 	mov ax,[bp+0x19]
  2414 000005BF 894606              <4> 	mov [bp+6],ax 
  2415 000005C2 E8B300              <4> 	call proc_div32
  2416 000005C5 89E0                <4> 	mov ax,sp
  2417 000005C7 89C5                <4> 	mov bp,ax
  2418 000005C9 8B4608              <4> 	mov ax,[bp+8]
  2419 000005CC 89461B              <4> 	mov [bp+0x1B], ax
  2420 000005CF 8B460A              <4> 	mov ax,[bp+0x0A]
  2421 000005D2 89461D              <4> 	mov [bp+0x1D], ax
  2422 000005D5 8B460C              <4> 	mov ax,[bp+0x0C]
  2423 000005D8 89461F              <4> 	mov [bp+0x1F], ax
  2424 000005DB 8B460E              <4> 	mov ax,[bp+0x0E]
  2425 000005DE 894621              <4> 	mov [bp+0x21], ax
  2426 000005E1 8A4610              <4> 	mov al,[bp+0x10]
  2427 000005E4 884623              <4> 	mov byte [bp+0x23], al
  2428                              <4> 	stkclose 0x11
  2429 000005E7 83C411              <5>  add word sp, %1
  2430                              <4> 	
  2431 000005EA 54                  <4> 	push sp
  2432 000005EB 5D                  <4> 	pop bp
  2433                              <4> 		
  2434 000005EC 8B4E02              <4> 	mov cx,[bp+2]
  2435 000005EF 8B5606              <4> 	mov dx,[bp+6]
  2436 000005F2 81E10080            <4> 	and cx,0x8000
  2437 000005F6 81E20080            <4> 	and dx,0x8000
  2438 000005FA 31D1                <4> 	xor cx,dx
  2439                              <4> 	
  2440 000005FC 837E0A00            <4> 	cmp word [bp+0x0A],0
  2441 00000600 7506                <4> 	jnz .signal1
  2442 00000602 837E0C00            <4> 	cmp word [bp+0x0C],0
  2443 00000606 7403                <4> 	jz .endsignal1
  2444                              <4> 	.signal1:
  2445 00000608 014E0A              <4> 		add word [bp+0x0A],cx
  2446                              <4> 	.endsignal1:
  2447                              <4> 	
  2448 0000060B 837E0E00            <4> 	cmp word [bp+0x0E],0
  2449 0000060F 7506                <4> 	jnz .signal2
  2450 00000611 837E1000            <4> 	cmp word [bp+0x10],0
  2451 00000615 7403                <4> 	jz .endsignal2
  2452                              <4> 	.signal2:
  2453 00000617 014E0E              <4> 		add word [bp+0x0E],cx	
  2454                              <4> 	.endsignal2:
  2455                              <4> 		
  2456 0000061A C3                  <4> 	ret	
  2457                              <4> 
  2458                              <4> proc_imul32:		
  2459                              <4> 	stkopen 0x0C
  2460 0000061B 83EC0C              <5>  sub word sp, %1
  2461 0000061E 54                  <5>  push sp
  2462 0000061F 5D                  <5>  pop bp
  2463 00000620 8B460E              <4> 	mov ax,[bp+0x0E]
  2464 00000623 25FF7F              <4> 	and ax,0x7FFF
  2465 00000626 894600              <4> 	mov [bp+0],ax
  2466 00000629 8B4610              <4> 	mov ax,[bp+0x10]
  2467 0000062C 894602              <4> 	mov [bp+2],ax
  2468 0000062F 8B4612              <4> 	mov ax,[bp+0x12]
  2469 00000632 25FF7F              <4> 	and ax,0x7FFF
  2470 00000635 894604              <4> 	mov [bp+4],ax
  2471 00000638 8B4614              <4> 	mov ax,[bp+0x14]
  2472 0000063B 894606              <4> 	mov [bp+6],ax 
  2473 0000063E E8B901              <4> 	call proc_mul32
  2474 00000641 89E0                <4> 	mov ax,sp
  2475 00000643 89C5                <4> 	mov bp,ax
  2476 00000645 8B4608              <4> 	mov ax,[bp+8]
  2477 00000648 8B5E0A              <4> 	mov bx,[bp+0x0A]
  2478                              <4> 	stkclose 0x0C
  2479 0000064B 83C40C              <5>  add word sp, %1
  2480                              <4> 	
  2481 0000064E 89E1                <4> 	mov cx,sp
  2482 00000650 89CD                <4> 	mov bp,cx		
  2483                              <4> 		
  2484 00000652 89460A              <4> 	mov [bp+0x0A],ax
  2485 00000655 895E0C              <4> 	mov [bp+0x0C],bx
  2486                              <4> 	
  2487 00000658 837E0A00            <4> 	cmp word [bp+0x0A],0
  2488 0000065C 7506                <4> 	jnz .signal1
  2489 0000065E 837E0C00            <4> 	cmp word [bp+0x0C],0
  2490 00000662 7413                <4> 	jz .endsignal1
  2491                              <4> 	.signal1:
  2492 00000664 8B4E02              <4> 		mov cx,[bp+2]
  2493 00000667 8B5606              <4> 		mov dx,[bp+6]
  2494 0000066A 81E10080            <4> 		and cx,0x8000
  2495 0000066E 81E20080            <4> 		and dx,0x8000
  2496 00000672 31D1                <4> 		xor cx,dx
  2497 00000674 014E0A              <4> 		add word [bp+0x0A],cx
  2498                              <4> 	.endsignal1:
  2499                              <4> 	
  2500 00000677 C3                  <4> 	ret
  2501                              <4> 
  2502                              <4> proc_div32:
  2503 00000678 89E0                <4> 	mov ax,sp
  2504 0000067A 89C5                <4> 	mov bp,ax
  2505                              <4> 	
  2506 0000067C 8B4606              <4> 	mov ax,[bp+6]
  2507 0000067F 034608              <4> 	add ax,[bp+8]
  2508 00000682 83F800              <4> 	cmp ax,0
  2509 00000685 0F846C01            <4> 	jz .divbyzero
  2510                              <4> 	
  2511 00000689 837E0200            <4> 	cmp word [bp+2], 0
  2512 0000068D 7521                <4> 	jnz .div2
  2513 0000068F 837E0600            <4> 	cmp word [bp+6], 0
  2514 00000693 751B                <4> 	jnz .div2
  2515 00000695 31D2                <4> 		xor dx,dx
  2516 00000697 8B4604              <4> 		mov ax, [bp+4]
  2517 0000069A F77608              <4> 		div word [bp+8]
  2518 0000069D C7460A0000          <4> 		mov word [bp+0x0A], 0
  2519 000006A2 89460C              <4> 		mov word [bp+0x0C], ax
  2520 000006A5 C7460E0000          <4> 		mov word [bp+0x0E], 0
  2521 000006AA 895610              <4> 		mov word [bp+0x10], dx
  2522 000006AD E93F01              <4> 		jmp .enddiv
  2523                              <4> 	.div2:
  2524 000006B0 8B4602              <4> 		mov ax,[bp+2]
  2525 000006B3 3B4606              <4> 		cmp ax,[bp+6]
  2526 000006B6 0F821F01            <4> 		jb .qzero
  2527 000006BA 770A                <4> 		ja .div
  2528 000006BC 8B4604              <4> 		mov ax,[bp+4]
  2529 000006BF 3B4608              <4> 		cmp ax,[bp+8]
  2530 000006C2 0F821301            <4> 		jb .qzero
  2531                              <4> 		
  2532                              <4> 		.div:
  2533                              <4> 		
  2534 000006C6 C7460A0000          <4> 		mov word [bp+0x0A], 0
  2535 000006CB C7460C0000          <4> 		mov word [bp+0x0C], 0		
  2536 000006D0 C7460E0000          <4> 		mov word [bp+0x0E], 0
  2537 000006D5 C746100000          <4> 		mov word [bp+0x10], 0
  2538                              <4> 		
  2539 000006DA 8B4602              <4> 		mov ax,[bp+2]
  2540 000006DD 8B5E04              <4> 		mov bx,[bp+4]
  2541 000006E0 8B4E06              <4> 		mov cx,[bp+6]
  2542 000006E3 8B5608              <4> 		mov dx,[bp+8]		
  2543                              <4> 		__calc_dividendo1 ax, bx, cx, dx, ax, bx, cl
  2544                              <5>  stkopen 0x0D
  2545 000006E6 83EC0D              <6>  sub word sp, %1
  2546 000006E9 54                  <6>  push sp
  2547 000006EA 5D                  <6>  pop bp
  2548 000006EB 894600              <5>  mov word [bp+0], %1
  2549 000006EE 895E02              <5>  mov word [bp+2], %2
  2550 000006F1 894E04              <5>  mov word [bp+4], %3
  2551 000006F4 895606              <5>  mov word [bp+6], %4
  2552 000006F7 E89A02              <5>  call proc_calc_dividendo1
  2553 000006FA 54                  <5>  push sp
  2554 000006FB 5D                  <5>  pop bp
  2555 000006FC 8B4608              <5>  mov word %5, [bp+0x08]
  2556 000006FF 8B5E0A              <5>  mov word %6, [bp+0x0A]
  2557 00000702 8A4E0C              <5>  mov byte %7, [bp+0x0C]
  2558                              <5>  stkclose 0x0D
  2559 00000705 83C40D              <6>  add word sp, %1
  2560                              <4> 
  2561 00000708 89E2                <4> 		mov dx,sp
  2562 0000070A 89D5                <4> 		mov bp,dx
  2563 0000070C 89460E              <4> 		mov word [bp+0x0E], ax
  2564 0000070F 895E10              <4> 		mov word [bp+0x10], bx
  2565                              <4> 		
  2566 00000712 51                  <4> 		push cx
  2567                              <4> 		.l1:							
  2568 00000713 89E2                <4> 			mov dx,sp
  2569 00000715 89D5                <4> 			mov bp,dx		
  2570 00000717 83C502              <4> 			add bp,2
  2571 0000071A 8B460E              <4> 			mov ax, [bp+0x0E]
  2572 0000071D 8B5E10              <4> 			mov bx, [bp+0x10]
  2573 00000720 8B4E06              <4> 			mov cx, [bp+6]
  2574 00000723 8B5608              <4> 			mov dx, [bp+8]
  2575                              <4> 			__cmp32 ax, bx, cx, dx, cl
  2576                              <5>  stkopen 9
  2577 00000726 83EC09              <6>  sub word sp, %1
  2578 00000729 54                  <6>  push sp
  2579 0000072A 5D                  <6>  pop bp
  2580 0000072B 894600              <5>  mov word [bp+0], %1
  2581 0000072E 895E02              <5>  mov word [bp+2], %2
  2582 00000731 894E04              <5>  mov word [bp+4], %3
  2583 00000734 895606              <5>  mov word [bp+6], %4
  2584 00000737 E81F01              <5>  call proc_cmp32
  2585 0000073A 54                  <5>  push sp
  2586 0000073B 5D                  <5>  pop bp
  2587 0000073C 8A4E08              <5>  mov byte %5, [bp+8]
  2588                              <5>  stkclose 9
  2589 0000073F 83C409              <6>  add word sp, %1
  2590                              <4> 			
  2591 00000742 51                  <4> 			push cx
  2592 00000743 89E2                <4> 			mov dx,sp
  2593 00000745 89D5                <4> 			mov bp,dx
  2594 00000747 83C504              <4> 			add bp,4
  2595 0000074A 8B460A              <4> 			mov ax,[bp+0x0A]
  2596 0000074D 8B5E0C              <4> 			mov bx,[bp+0x0C]
  2597 00000750 55                  <4> 			push bp
  2598                              <4> 			__shl32 ax, bx, 1
  2599                              <5>  stkopen 5
  2600 00000751 83EC05              <6>  sub word sp, %1
  2601 00000754 54                  <6>  push sp
  2602 00000755 5D                  <6>  pop bp
  2603 00000756 894600              <5>  mov word [bp+0], %1
  2604 00000759 895E02              <5>  mov word [bp+2], %2
  2605 0000075C C6460401            <5>  mov byte [bp+4], %3
  2606 00000760 E82101              <5>  call proc_shl32
  2607 00000763 54                  <5>  push sp
  2608 00000764 5D                  <5>  pop bp
  2609 00000765 8B4600              <5>  mov word %1, [bp+0]
  2610 00000768 8B5E02              <5>  mov word %2, [bp+2]
  2611                              <5>  stkclose 5
  2612 0000076B 83C405              <6>  add word sp, %1
  2613 0000076E 5D                  <4> 			pop bp				
  2614 0000076F 59                  <4> 			pop cx	
  2615                              <4> 									
  2616 00000770 80F900              <4> 			cmp cl,0
  2617 00000773 7C12                <4> 			jl .l11
  2618 00000775 83C301              <4> 				add bx,1
  2619 00000778 83D000              <4> 				adc ax,0	
  2620                              <4> 				
  2621 0000077B 8B4E06              <4> 				mov cx,[bp+6]
  2622 0000077E 8B5608              <4> 				mov dx,[bp+8]
  2623 00000781 295610              <4> 				sub [bp+0x10],dx
  2624 00000784 194E0E              <4> 				sbb [bp+0x0E],cx							
  2625                              <4> 			.l11:							
  2626 00000787 89460A              <4> 			mov word [bp+0x0A], ax
  2627 0000078A 895E0C              <4> 			mov word [bp+0x0C], bx					
  2628                              <4> 					
  2629 0000078D 59                  <4> 			pop cx
  2630 0000078E 51                  <4> 			push cx												
  2631                              <4> 			
  2632 0000078F 80F920              <4> 			cmp cl,32
  2633 00000792 7342                <4> 			jae .l2
  2634                              <4> 						
  2635 00000794 59                  <4> 			pop cx
  2636                              <4> 			stkopen 9
  2637 00000795 83EC09              <5>  sub word sp, %1
  2638 00000798 54                  <5>  push sp
  2639 00000799 5D                  <5>  pop bp
  2640 0000079A 8B460B              <4> 			mov ax,[bp+0x0B]
  2641 0000079D 894600              <4> 			mov word [bp+0], ax
  2642 000007A0 8B460D              <4> 			mov ax,[bp+0x0D]
  2643 000007A3 894602              <4> 			mov word [bp+2], ax
  2644 000007A6 8B4617              <4> 			mov ax,[bp+0x17]
  2645 000007A9 894604              <4> 			mov word [bp+4], ax
  2646 000007AC 8B4619              <4> 			mov ax,[bp+0x19]
  2647 000007AF 894606              <4> 			mov word [bp+6], ax
  2648 000007B2 884E08              <4> 			mov byte [bp+8], cl
  2649 000007B5 E8AD02              <4> 			call proc_calc_prox_dividendo
  2650 000007B8 89E0                <4> 			mov ax,sp
  2651 000007BA 89C5                <4> 			mov bp,ax
  2652 000007BC 8B4604              <4> 			mov word ax,[bp+4]
  2653 000007BF 8B5E06              <4> 			mov word bx,[bp+6]
  2654 000007C2 8A4E08              <4> 			mov byte cl,[bp+8] 
  2655                              <4> 			stkclose 9
  2656 000007C5 83C409              <5>  add word sp, %1
  2657 000007C8 89E2                <4> 			mov dx,sp
  2658 000007CA 89D5                <4> 			mov bp,dx
  2659 000007CC 89460E              <4> 			mov [bp+0x0E],ax
  2660 000007CF 895E10              <4> 			mov [bp+0x10],bx
  2661 000007D2 51                  <4> 			push cx
  2662 000007D3 E93DFF              <4> 			jmp .l1
  2663                              <4> 		.l2:	
  2664 000007D6 59                  <4> 		pop cx
  2665                              <4> 			
  2666 000007D7 EB16                <4> 		jmp .enddiv
  2667                              <4> 	.qzero:
  2668 000007D9 C7460A0000          <4> 		mov word [bp+0x0A], 0
  2669 000007DE C7460C0000          <4> 		mov word [bp+0x0C], 0
  2670 000007E3 8B4602              <4> 		mov ax,[bp+2]
  2671 000007E6 89460E              <4> 		mov word [bp+0x0E], ax
  2672 000007E9 8B4604              <4> 		mov ax,[bp+4]
  2673 000007EC 894610              <4> 		mov word [bp+0x10], ax	
  2674                              <4> 	.enddiv:
  2675 000007EF C6461200            <4> 		mov byte [bp+0x12], 0
  2676 000007F3 EB04                <4> 		jmp .end
  2677                              <4> 	.divbyzero:
  2678 000007F5 C6461201            <4> 		mov byte [bp+0x12], 1						
  2679                              <4> 	.end:		
  2680                              <4> 			
  2681 000007F9 C3                  <4> 	ret
  2682                              <4> 		
  2683                              <4> proc_mul32:
  2684 000007FA 89E0                <4> 	mov ax,sp
  2685 000007FC 89C5                <4> 	mov bp,ax
  2686                              <4> 	
  2687 000007FE 31D2                <4> 	xor dx,dx
  2688 00000800 8B4604              <4> 	mov ax,[bp+4]
  2689 00000803 F76608              <4> 	mul word [bp+8]
  2690                              <4> 	
  2691 00000806 89560A              <4> 	mov word [bp+0x0A], dx
  2692 00000809 89460C              <4> 	mov word [bp+0x0C], ax	
  2693                              <4> 	
  2694 0000080C 31D2                <4> 	xor dx,dx
  2695 0000080E 8B4604              <4> 	mov ax,[bp+4]
  2696 00000811 F76606              <4> 	mul word [bp+6]
  2697                              <4> 		
  2698 00000814 01460A              <4> 	add word [bp+0x0A],ax
  2699                              <4> 	
  2700 00000817 31D2                <4> 	xor dx,dx
  2701 00000819 8B4602              <4> 	mov ax,[bp+2]
  2702 0000081C F76608              <4> 	mul word [bp+8]
  2703                              <4> 	
  2704 0000081F 01460A              <4> 	add word [bp+0x0A],ax
  2705                              <4> 	
  2706 00000822 C3                  <4> 	ret
  2707                              <4> 
  2708                              <4> proc_add32:
  2709 00000823 89E0                <4> 	mov ax,sp
  2710 00000825 89C5                <4> 	mov bp,ax
  2711                              <4> 	
  2712 00000827 8B4602              <4> 	mov ax,[bp+2]
  2713 0000082A 8B5E04              <4> 	mov bx,[bp+4]
  2714 0000082D 8B4E06              <4> 	mov cx,[bp+6]
  2715 00000830 8B5608              <4> 	mov dx,[bp+8]
  2716                              <4> 	
  2717 00000833 01D3                <4> 	add bx,dx
  2718 00000835 11C8                <4> 	adc ax,cx
  2719                              <4> 	
  2720 00000837 89460A              <4> 	mov [bp+0x0A],ax
  2721 0000083A 895E0C              <4> 	mov [bp+0x0C],bx	
  2722                              <4> 	
  2723 0000083D C3                  <4> 	ret
  2724                              <4> 	
  2725                              <4> proc_sub32:
  2726 0000083E 89E0                <4> 	mov ax,sp
  2727 00000840 89C5                <4> 	mov bp,ax
  2728                              <4> 	
  2729 00000842 8B4602              <4> 	mov ax,[bp+2]
  2730 00000845 8B5E04              <4> 	mov bx,[bp+4]
  2731 00000848 8B4E06              <4> 	mov cx,[bp+6]
  2732 0000084B 8B5608              <4> 	mov dx,[bp+8]
  2733                              <4> 	
  2734 0000084E 29D3                <4> 	sub bx,dx
  2735 00000850 19C8                <4> 	sbb ax,cx
  2736                              <4> 	
  2737 00000852 89460A              <4> 	mov [bp+0x0A],ax
  2738 00000855 895E0C              <4> 	mov [bp+0x0C],bx	
  2739                              <4> 	
  2740 00000858 C3                  <4> 	ret
  2741                              <4> 		
  2742                              <4> proc_cmp32:
  2743 00000859 89E0                <4> 	mov ax,sp
  2744 0000085B 89C5                <4> 	mov bp,ax		
  2745                              <4> 		
  2746 0000085D 8B4602              <4> 	mov ax,[bp+2]
  2747 00000860 3B4606              <4> 	cmp word ax,[bp+6]
  2748 00000863 7F04                <4> 	jg .above
  2749 00000865 7C08                <4> 	jl .below
  2750 00000867 740C                <4> 	je .equal
  2751                              <4> 	.above:
  2752 00000869 C6460A01            <4> 		mov byte [bp+0x0A], 00000001b
  2753 0000086D EB14                <4> 		jmp .endcmp
  2754                              <4> 	.below:
  2755 0000086F C6460A81            <4> 		mov byte [bp+0x0A], 10000001b
  2756 00000873 EB0E                <4> 		jmp .endcmp
  2757                              <4> 	.equal:
  2758 00000875 8B4604              <4> 		mov ax,[bp+4]
  2759 00000878 3B4608              <4> 		cmp word ax,[bp+8]
  2760 0000087B 7FEC                <4> 		jg .above
  2761 0000087D 7CF0                <4> 		jl .below
  2762 0000087F C6460A00            <4> 		mov byte [bp+0x0A], 00000000b
  2763                              <4> 	.endcmp:		
  2764 00000883 C3                  <4> 	ret
  2765                              <4> 
  2766                              <4> proc_shl32:
  2767 00000884 89E0                <4> 	mov ax,sp
  2768 00000886 89C5                <4> 	mov bp,ax
  2769                              <4> 	
  2770 00000888 31C0                <4> 	xor ax,ax
  2771 0000088A 8A4606              <4> 	mov byte al,[bp+6]
  2772 0000088D B310                <4> 	mov bl,10h
  2773 0000088F F6F3                <4> 	div bl
  2774                              <4> 					
  2775 00000891 3C01                <4> 	cmp al,1
  2776 00000893 7204                <4> 	jb .zero
  2777 00000895 7418                <4> 	je .one	
  2778 00000897 EB27                <4> 	jmp .above
  2779                              <4> 	.zero:	
  2780 00000899 B110                <4> 		mov cl,10h
  2781 0000089B 28E1                <4> 		sub cl,ah
  2782 0000089D 8B5E04              <4> 		mov bx,[bp+4]		
  2783 000008A0 D3EB                <4> 		shr bx,cl
  2784                              <4> 		
  2785 000008A2 88E1                <4> 		mov cl,ah		
  2786 000008A4 D36602              <4> 		shl word [bp+2],cl
  2787 000008A7 015E02              <4> 		add word [bp+2],bx				
  2788 000008AA D36604              <4> 		shl word [bp+4],cl
  2789 000008AD EB1B                <4> 		jmp .endzo
  2790                              <4> 	.one:
  2791 000008AF 88E1                <4> 		mov cl,ah
  2792 000008B1 8B5E04              <4> 		mov bx, [bp+4]				
  2793 000008B4 D3E3                <4> 		shl bx, cl 
  2794 000008B6 895E02              <4> 		mov word [bp+2], bx
  2795 000008B9 C746040000          <4> 		mov word [bp+4], 0
  2796 000008BE EB0A                <4> 		jmp .endzo
  2797                              <4> 	.above:		
  2798 000008C0 C746020000          <4> 		mov word [bp+2], 0
  2799 000008C5 C746040000          <4> 		mov word [bp+4], 0
  2800                              <4> 	.endzo:	
  2801                              <4> 	
  2802 000008CA C3                  <4> 	ret
  2803                              <4> 	
  2804                              <4> proc_shr32:
  2805 000008CB 89E0                <4> 	mov ax,sp
  2806 000008CD 89C5                <4> 	mov bp,ax
  2807                              <4> 	
  2808 000008CF 31C0                <4> 	xor ax,ax
  2809 000008D1 8A4606              <4> 	mov byte al,[bp+6]
  2810 000008D4 B310                <4> 	mov bl,10h
  2811 000008D6 F6F3                <4> 	div bl
  2812                              <4> 					
  2813 000008D8 3C01                <4> 	cmp al,1
  2814 000008DA 7204                <4> 	jb .zero
  2815 000008DC 7418                <4> 	je .one	
  2816 000008DE EB27                <4> 	jmp .above
  2817                              <4> 	.zero:	
  2818 000008E0 B110                <4> 		mov cl,10h
  2819 000008E2 28E1                <4> 		sub cl,ah		
  2820 000008E4 8B5E02              <4> 		mov bx,[bp+2]		
  2821 000008E7 D3E3                <4> 		shl bx,cl
  2822                              <4> 		
  2823 000008E9 88E1                <4> 		mov cl,ah		
  2824 000008EB D36E02              <4> 		shr word [bp+2],cl
  2825 000008EE D36E04              <4> 		shr word [bp+4],cl
  2826 000008F1 015E04              <4> 		add word [bp+4],bx	
  2827 000008F4 EB1B                <4> 		jmp .endzo
  2828                              <4> 	.one:			
  2829 000008F6 88E1                <4> 		mov cl,ah
  2830 000008F8 8B5E02              <4> 		mov bx,[bp+2]
  2831 000008FB D3EB                <4> 		shr bx,cl
  2832 000008FD C746020000          <4> 		mov word [bp+2],0 
  2833 00000902 895E04              <4> 		mov word [bp+4],bx
  2834 00000905 EB0A                <4> 		jmp .endzo
  2835                              <4> 	.above:		
  2836 00000907 C746020000          <4> 		mov word [bp+2],0
  2837 0000090C C746040000          <4> 		mov word [bp+4],0
  2838                              <4> 	.endzo:		
  2839                              <4> 
  2840 00000911 C3                  <4> 	ret
  2841                              <4> 	
  2842                              <4> proc__lzcount16:
  2843 00000912 89E0                <4> 	mov ax,sp
  2844 00000914 89C5                <4> 	mov bp,ax
  2845                              <4> 	
  2846 00000916 B100                <4> 	mov cl,0
  2847                              <4> 		
  2848 00000918 8A6603              <4> 	mov ah, [bp+3]	
  2849 0000091B 80E4F0              <4> 	and ah,0xF0
  2850 0000091E 80FC00              <4> 	cmp ah,0
  2851 00000921 7529                <4> 	jnz .end
  2852 00000923 FEC1                <4> 	inc cl
  2853                              <4> 	
  2854 00000925 8A6603              <4> 	mov ah, [bp+3]
  2855 00000928 80E40F              <4> 	and ah,0x0F
  2856 0000092B 80FC00              <4> 	cmp ah,0
  2857 0000092E 751C                <4> 	jnz .end
  2858 00000930 FEC1                <4> 	inc cl
  2859                              <4> 	
  2860 00000932 8A6602              <4> 	mov ah, [bp+2]
  2861 00000935 80E4F0              <4> 	and ah,0xF0
  2862 00000938 80FC00              <4> 	cmp ah,0
  2863 0000093B 750F                <4> 	jnz .end
  2864 0000093D FEC1                <4> 	inc cl
  2865                              <4> 	
  2866 0000093F 8A6602              <4> 	mov ah, [bp+2]
  2867 00000942 80E40F              <4> 	and ah,0x0F
  2868 00000945 80FC00              <4> 	cmp ah,0
  2869 00000948 7502                <4> 	jnz .end
  2870 0000094A FEC1                <4> 	inc cl
  2871                              <4> 		
  2872                              <4> 	.end:
  2873 0000094C 884E04              <4> 	mov byte [bp+4], cl
  2874                              <4> 	
  2875 0000094F C3                  <4> 	ret
  2876                              <4> 
  2877                              <4> proc__lzbitcount16:
  2878 00000950 89E0                <4> 	mov ax,sp
  2879 00000952 89C5                <4> 	mov bp,ax
  2880                              <4> 	
  2881 00000954 8B4602              <4> 	mov word ax,[bp+2]
  2882                              <4> 		
  2883 00000957 B100                <4> 	mov cl,0
  2884                              <4> 	.l1:
  2885 00000959 80F910              <4> 		cmp cl,16
  2886 0000095C 7310                <4> 		jae .l2
  2887                              <4> 		
  2888 0000095E 89C3                <4> 		mov bx,ax
  2889 00000960 D3E3                <4> 		shl bx,cl
  2890 00000962 C1EB0F              <4> 		shr bx,15
  2891                              <4> 		
  2892 00000965 83FB00              <4> 		cmp bx,0
  2893 00000968 7504                <4> 		jnz .l2
  2894                              <4> 		
  2895 0000096A FEC1                <4> 		inc cl		
  2896 0000096C EBEB                <4> 		jmp .l1
  2897                              <4> 	.l2:
  2898                              <4> 	
  2899 0000096E 884E04              <4> 	mov byte [bp+4], cl
  2900                              <4> 	
  2901 00000971 C3                  <4> 	ret
  2902                              <4> 	
  2903                              <4> proc__lzbitcount8:
  2904 00000972 89E0                <4> 	mov ax,sp
  2905 00000974 89C5                <4> 	mov bp,ax
  2906                              <4> 	
  2907 00000976 8A4602              <4> 	mov byte al,[bp+2]
  2908                              <4> 	
  2909 00000979 B100                <4> 	mov cl,0
  2910                              <4> 	.l1:
  2911 0000097B 80F908              <4> 		cmp cl,8
  2912 0000097E 7410                <4> 		je .l2
  2913                              <4> 		
  2914 00000980 88C3                <4> 		mov bl,al
  2915 00000982 D2E3                <4> 		shl bl,cl
  2916 00000984 C0EB07              <4> 		shr bl,7
  2917                              <4> 		
  2918 00000987 80FB00              <4> 		cmp bl,0
  2919 0000098A 7504                <4> 		jnz .l2
  2920                              <4> 		
  2921 0000098C FEC1                <4> 		inc cl		
  2922 0000098E EBEB                <4> 		jmp .l1
  2923                              <4> 	.l2:
  2924                              <4> 	
  2925 00000990 884E03              <4> 	mov byte [bp+3], cl
  2926                              <4> 		
  2927 00000993 C3                  <4> 	ret
  2928                              <4> 	
  2929                              <4> proc_calc_dividendo1:
  2930 00000994 89E0                <4> 	mov ax,sp
  2931 00000996 89C5                <4> 	mov bp,ax
  2932                              <4> 	
  2933 00000998 8B4606              <4> 	mov ax,[bp+6]
  2934 0000099B 8B5E08              <4> 	mov bx,[bp+8]
  2935 0000099E 55                  <4> 	push bp
  2936                              <4> 	__lzbitcount32 ax, bx, cl
  2937 0000099F 53                  <5>  push %2
  2938                              <5>  __lzbitcount16 %1, cl
  2939                              <6>  stkopen 3
  2940 000009A0 83EC03              <7>  sub word sp, %1
  2941 000009A3 54                  <7>  push sp
  2942 000009A4 5D                  <7>  pop bp
  2943 000009A5 894600              <6>  mov word [bp+0], %1
  2944 000009A8 E8A5FF              <6>  call proc__lzbitcount16
  2945 000009AB 54                  <6>  push sp
  2946 000009AC 5D                  <6>  pop bp
  2947 000009AD 8A4E02              <6>  mov byte %2, [bp+2]
  2948                              <6>  stkclose 3
  2949 000009B0 83C403              <7>  add word sp, %1
  2950 000009B3 58                  <5>  pop ax
  2951 000009B4 80F910              <5>  cmp cl,16
  2952 000009B7 7217                <5>  jb .end
  2953 000009B9 51                  <5>  push cx
  2954                              <5>  __lzbitcount16 ax, al
  2955                              <6>  stkopen 3
  2956 000009BA 83EC03              <7>  sub word sp, %1
  2957 000009BD 54                  <7>  push sp
  2958 000009BE 5D                  <7>  pop bp
  2959 000009BF 894600              <6>  mov word [bp+0], %1
  2960 000009C2 E88BFF              <6>  call proc__lzbitcount16
  2961 000009C5 54                  <6>  push sp
  2962 000009C6 5D                  <6>  pop bp
  2963 000009C7 8A4602              <6>  mov byte %2, [bp+2]
  2964                              <6>  stkclose 3
  2965 000009CA 83C403              <7>  add word sp, %1
  2966 000009CD 59                  <5>  pop cx
  2967 000009CE 00C1                <5>  add cl,al
  2968                              <5>  .end:
  2969 000009D0 88C9                <5>  mov byte %3, cl
  2970 000009D2 5D                  <4> 	pop bp
  2971 000009D3 B320                <4> 	mov bl,32
  2972 000009D5 28CB                <4> 	sub bl,cl
  2973 000009D7 53                  <4> 	push bx
  2974                              <4> 		
  2975 000009D8 8B4602              <4> 	mov ax,[bp+2]
  2976 000009DB 8B5604              <4> 	mov dx,[bp+4]
  2977 000009DE 55                  <4> 	push bp
  2978                              <4> 	__shr32 ax, dx, cl
  2979                              <5>  stkopen 5
  2980 000009DF 83EC05              <6>  sub word sp, %1
  2981 000009E2 54                  <6>  push sp
  2982 000009E3 5D                  <6>  pop bp
  2983 000009E4 894600              <5>  mov word [bp+0], %1
  2984 000009E7 895602              <5>  mov word [bp+2], %2
  2985 000009EA 884E04              <5>  mov byte [bp+4], %3
  2986 000009ED E8DBFE              <5>  call proc_shr32
  2987 000009F0 54                  <5>  push sp
  2988 000009F1 5D                  <5>  pop bp
  2989 000009F2 8B4600              <5>  mov word %1, [bp+0]
  2990 000009F5 8B5602              <5>  mov word %2, [bp+2]
  2991                              <5>  stkclose 5
  2992 000009F8 83C405              <6>  add word sp, %1
  2993 000009FB 5D                  <4> 	pop bp
  2994 000009FC 50                  <4> 	push ax
  2995 000009FD 52                  <4> 	push dx	
  2996                              <4> 	
  2997 000009FE 8B4E06              <4> 	mov cx,[bp+6]
  2998 00000A01 8B5E08              <4> 	mov bx,[bp+8]
  2999                              <4> 	
  3000 00000A04 55                  <4> 	push bp
  3001                              <4> 	__cmp32 ax, dx, cx, bx, cl
  3002                              <5>  stkopen 9
  3003 00000A05 83EC09              <6>  sub word sp, %1
  3004 00000A08 54                  <6>  push sp
  3005 00000A09 5D                  <6>  pop bp
  3006 00000A0A 894600              <5>  mov word [bp+0], %1
  3007 00000A0D 895602              <5>  mov word [bp+2], %2
  3008 00000A10 894E04              <5>  mov word [bp+4], %3
  3009 00000A13 895E06              <5>  mov word [bp+6], %4
  3010 00000A16 E840FE              <5>  call proc_cmp32
  3011 00000A19 54                  <5>  push sp
  3012 00000A1A 5D                  <5>  pop bp
  3013 00000A1B 8A4E08              <5>  mov byte %5, [bp+8]
  3014                              <5>  stkclose 9
  3015 00000A1E 83C409              <6>  add word sp, %1
  3016 00000A21 5D                  <4> 	pop bp
  3017 00000A22 5A                  <4> 	pop dx
  3018 00000A23 58                  <4> 	pop ax
  3019 00000A24 5B                  <4> 	pop bx
  3020                              <4> 		
  3021 00000A25 80F900              <4> 	cmp cl,0
  3022 00000A28 7D2D                <4> 	jge .l1
  3023                              <4> 		stkopen 9
  3024 00000A2A 83EC09              <5>  sub word sp, %1
  3025 00000A2D 54                  <5>  push sp
  3026 00000A2E 5D                  <5>  pop bp
  3027 00000A2F 8B4E0B              <4> 		mov cx,[bp+0x0B]
  3028 00000A32 894E00              <4> 		mov word [bp+0], cx
  3029 00000A35 8B4E0D              <4> 		mov cx,[bp+0x0D]
  3030 00000A38 894E02              <4> 		mov word [bp+2], cx
  3031 00000A3B 894604              <4> 		mov word [bp+4], ax
  3032 00000A3E 895606              <4> 		mov word [bp+6], dx
  3033 00000A41 885E08              <4> 		mov byte [bp+8], bl
  3034 00000A44 E81E00              <4> 		call proc_calc_prox_dividendo
  3035 00000A47 89E0                <4> 		mov ax,sp
  3036 00000A49 89C5                <4> 		mov bp,ax
  3037 00000A4B 8B4604              <4> 		mov word ax,[bp+4]
  3038 00000A4E 8B5606              <4> 		mov word dx,[bp+6]
  3039 00000A51 8A5E08              <4> 		mov byte bl,[bp+8] 
  3040                              <4> 		stkclose 9		 
  3041 00000A54 83C409              <5>  add word sp, %1
  3042                              <4> 	.l1:
  3043                              <4> 	
  3044 00000A57 89E1                <4> 	mov cx,sp
  3045 00000A59 89CD                <4> 	mov bp,cx
  3046 00000A5B 89460A              <4> 	mov word [bp+0x0A], ax
  3047 00000A5E 89560C              <4> 	mov word [bp+0x0C], dx
  3048 00000A61 885E0E              <4> 	mov byte [bp+0x0E], bl	 
  3049                              <4> 	
  3050 00000A64 C3                  <4> 	ret
  3051                              <4> 
  3052                              <4> proc_calc_prox_dividendo:
  3053 00000A65 89E0                <4> 	mov ax,sp
  3054 00000A67 89C5                <4> 	mov bp,ax
  3055                              <4> 	
  3056 00000A69 30E4                <4> 	xor ah,ah	
  3057 00000A6B 8A460A              <4> 	mov al,[bp+0x0A]
  3058 00000A6E B310                <4> 	mov bl,10h
  3059 00000A70 F6F3                <4> 	div bl
  3060                              <4> 	
  3061 00000A72 3C00                <4> 	cmp al,0
  3062 00000A74 7402                <4> 	jz .zero
  3063 00000A76 EB05                <4> 	jmp .one
  3064                              <4> 	.zero:
  3065 00000A78 8B5E02              <4> 		mov bx,[bp+2]
  3066 00000A7B EB03                <4> 		jmp .endcmp
  3067                              <4> 	.one:
  3068 00000A7D 8B5E04              <4> 		mov bx,[bp+4]		
  3069                              <4> 	.endcmp:
  3070                              <4> 		
  3071 00000A80 88E1                <4> 	mov cl,ah
  3072 00000A82 D3E3                <4> 	shl bx,cl
  3073 00000A84 C1EB0F              <4> 	shr bx,15
  3074                              <4> 	
  3075 00000A87 8B4606              <4> 	mov ax,[bp+6]
  3076 00000A8A 8B5608              <4> 	mov dx,[bp+8]
  3077 00000A8D 53                  <4> 	push bx
  3078                              <4> 	__shl32 ax, dx, 1
  3079                              <5>  stkopen 5
  3080 00000A8E 83EC05              <6>  sub word sp, %1
  3081 00000A91 54                  <6>  push sp
  3082 00000A92 5D                  <6>  pop bp
  3083 00000A93 894600              <5>  mov word [bp+0], %1
  3084 00000A96 895602              <5>  mov word [bp+2], %2
  3085 00000A99 C6460401            <5>  mov byte [bp+4], %3
  3086 00000A9D E8E4FD              <5>  call proc_shl32
  3087 00000AA0 54                  <5>  push sp
  3088 00000AA1 5D                  <5>  pop bp
  3089 00000AA2 8B4600              <5>  mov word %1, [bp+0]
  3090 00000AA5 8B5602              <5>  mov word %2, [bp+2]
  3091                              <5>  stkclose 5
  3092 00000AA8 83C405              <6>  add word sp, %1
  3093 00000AAB 5B                  <4> 	pop bx
  3094                              <4> 	
  3095 00000AAC 01DA                <4> 	add dx,bx
  3096 00000AAE 83D000              <4> 	adc ax,0
  3097                              <4> 
  3098 00000AB1 89E1                <4> 	mov cx,sp
  3099 00000AB3 89CD                <4> 	mov bp,cx	
  3100 00000AB5 894606              <4> 	mov [bp+6],ax
  3101 00000AB8 895608              <4> 	mov [bp+8],dx
  3102                              <4> 	
  3103 00000ABB FE460A              <4> 	inc byte [bp+0x0A]
  3104                              <4> 	
  3105 00000ABE C3                  <4> 	ret
  3106                              <4> 	
  3107                              <4> %endif
  3108                              <3> 	%include "lib/system.mac"
  3109                              <4>  
  3110                              <4> %ifndef SYSTEM_MAC
  3111                              <4>  	%define SYSTEM_MAC
  3112                              <4>  	
  3113                              <4> 	%ifndef TRUE
  3114                              <4> 		%define TRUE 01h
  3115                              <4> 	%endif
  3116                              <4> 	%ifndef FALSE
  3117                              <4> 		%define FALSE 00h
  3118                              <4> 	%endif
  3119                              <4> 	
  3120                              <4> %macro vlodsb 3
  3121                              <4> 	vlodsb cs, %1, %2, %3
  3122                              <4> %endmacro
  3123                              <4> 
  3124                              <4> %macro vstosb 3
  3125                              <4> 	vstosb cs, %1, %2, %3
  3126                              <4> %endmacro
  3127                              <4> 	 	
  3128                              <4> %macro int16toreg 2
  3129                              <4> 	int16toreg cs, %1, %2
  3130                              <4> %endmacro
  3131                              <4> 
  3132                              <4> %macro regtoint16 2
  3133                              <4> 	regtoint16 %1, cs, %2
  3134                              <4> %endmacro
  3135                              <4> 
  3136                              <4> %macro vstosb 4
  3137                              <4> 	push %1
  3138                              <4> 	pop ds
  3139                              <4> 	mov si,%2
  3140                              <4> 	add si,%3
  3141                              <4> 	mov byte [si],%4	
  3142                              <4> %endmacro
  3143                              <4> 
  3144                              <4> %macro vlodsb 4
  3145                              <4> 	push %1
  3146                              <4> 	pop ds
  3147                              <4> 	mov si,%2
  3148                              <4> 	add si,%3
  3149                              <4> 	mov byte %4,[si]	
  3150                              <4> %endmacro 	 
  3151                              <4> 
  3152                              <4> %macro int16toreg 3
  3153                              <4> 	push %2
  3154                              <4> 	push %1
  3155                              <4> 	pop ds
  3156                              <4> 	pop si
  3157                              <4> 	mov word %3,[si]	
  3158                              <4> %endmacro
  3159                              <4> 
  3160                              <4> %macro regtoint16 3
  3161                              <4> 	push %3
  3162                              <4> 	push %2
  3163                              <4> 	pop ds
  3164                              <4> 	pop si
  3165                              <4> 	mov word [si],%1	
  3166                              <4> %endmacro
  3167                              <4> 
  3168                              <4> %macro mov32 2
  3169                              <4> 	mov32 cs, %1, cs, %2
  3170                              <4> %endmacro
  3171                              <4> 
  3172                              <4> %macro mov16 2
  3173                              <4> 	mov16 cs, %1, cs, %2
  3174                              <4> %endmacro
  3175                              <4> 
  3176                              <4> %macro mov32 4
  3177                              <4> 	mov ax,%3
  3178                              <4> 	mov ds,ax
  3179                              <4> 	mov cx,[%4+2]
  3180                              <4> 	mov dx,[%4]
  3181                              <4> 	mov ax,%1
  3182                              <4> 	mov ds,ax
  3183                              <4> 	mov [%2+2],cx
  3184                              <4> 	mov [%2],dx
  3185                              <4> %endmacro
  3186                              <4> 
  3187                              <4> %macro mov16 4
  3188                              <4> 	mov ax,%3
  3189                              <4> 	mov ds,ax
  3190                              <4> 	mov bx,[%4]
  3191                              <4> 	mov ax,%1
  3192                              <4> 	mov ds,ax
  3193                              <4> 	mov [%2],bx
  3194                              <4> %endmacro
  3195                              <4>  	 	
  3196                              <4> %macro mformat 4
  3197                              <4> 	stkopen 8
  3198                              <4> 	mov word [ bp + 0 ], %1
  3199                              <4> 	mov word [ bp + 2 ], %2
  3200                              <4> 	mov word [ bp + 4 ], %3
  3201                              <4> 	mov word [ bp + 6 ], %4
  3202                              <4> 	call kernel_segment:mformat
  3203                              <4> 	stkclose 8
  3204                              <4> %endmacro
  3205                              <4> 
  3206                              <4> %macro malloc 6
  3207                              <4> 	stkopen 0Bh
  3208                              <4> 	mov word [ bp + 4 ], %3
  3209                              <4> 	mov word [ bp + 6 ], %4
  3210                              <4> 	mov word [ bp + 8 ], %5	
  3211                              <4> 	call kernel_segment:malloc
  3212                              <4> 	push sp
  3213                              <4> 	pop bp
  3214                              <4> 	mov word %1, [ bp ]
  3215                              <4> 	mov word %2, [ bp + 2 ]
  3216                              <4> 	mov byte %6, [ bp + 0x0A ]
  3217                              <4> 	stkclose 0Bh
  3218                              <4> %endmacro 	
  3219                              <4> 
  3220                              <4> %macro laddr 2
  3221                              <4> 	laddr %1, %2, %1, %2
  3222                              <4> %endmacro
  3223                              <4> 
  3224                              <4> %macro faddr 2
  3225                              <4> 	faddr %1, %2, %1, %2
  3226                              <4> %endmacro
  3227                              <4>  	
  3228                              <4> %macro laddr 4
  3229                              <4> 	stkopen 8
  3230                              <4> 	mov word [ bp + 4 ], %3
  3231                              <4> 	mov word [ bp + 6 ], %4	
  3232                              <4> 	call kernel_segment:laddr
  3233                              <4> 	push sp
  3234                              <4> 	pop bp
  3235                              <4> 	mov word %1, [ bp + 0 ]
  3236                              <4> 	mov word %2, [ bp + 2 ]	
  3237                              <4> 	stkclose 8
  3238                              <4> %endmacro
  3239                              <4> 
  3240                              <4> %macro faddr 4
  3241                              <4> 	stkopen 8
  3242                              <4> 	mov word [ bp + 4 ], %3
  3243                              <4> 	mov word [ bp + 6 ], %4	
  3244                              <4> 	call kernel_segment:faddr
  3245                              <4> 	push sp
  3246                              <4> 	pop bp
  3247                              <4> 	mov word %1, [ bp + 0 ]
  3248                              <4> 	mov word %2, [ bp + 2 ]	
  3249                              <4> 	stkclose 8
  3250                              <4> %endmacro	
  3251                              <4>  
  3252                              <4> 
  3253                              <4> %macro stkopen 1		
  3254                              <4> 	sub word sp, %1
  3255                              <4> 	push sp
  3256                              <4> 	pop bp
  3257                              <4> %endmacro
  3258                              <4> 
  3259                              <4> %macro stkclose 1
  3260                              <4> 	add word sp, %1
  3261                              <4> %endmacro
  3262                              <4> 
  3263                              <4> %macro stkload 1-* 	
  3264                              <4>  	%rep %0
  3265                              <4>  	 	%rotate -1
  3266                              <4>  		pop %1
  3267                              <4>  	%endrep
  3268                              <4>  	%rep %0
  3269                              <4>  		push %1
  3270                              <4>  		%rotate 1
  3271                              <4>  	%endrep
  3272                              <4> %endmacro
  3273                              <4> 
  3274                              <4> %macro stkpush 1-* 	
  3275                              <4>  	%rep %0
  3276                              <4>  		push %1
  3277                              <4>  		%rotate 1
  3278                              <4>  	%endrep 	
  3279                              <4> %endmacro
  3280                              <4>  
  3281                              <4> %macro stkpop 1-*
  3282                              <4>  	%rep %0
  3283                              <4>  	 	%rotate -1
  3284                              <4>  		pop %1
  3285                              <4>  	%endrep 	 	
  3286                              <4> %endmacro
  3287                              <4> 
  3288                              <4> %endif 
  3289                              <3> 
  3290                              <3> %macro chgsig 1
  3291                              <3> 	chgsig cs, %1
  3292                              <3> %endmacro
  3293                              <3> 
  3294                              <3> %macro cmp16 3
  3295                              <3> 	cmp16 cs, %1, cs, %2, %3
  3296                              <3> %endmacro
  3297                              <3> 
  3298                              <3> %macro mul16 2
  3299                              <3> 	mul16 cs, %1, cs, %2
  3300                              <3> %endmacro
  3301                              <3> 
  3302                              <3> %macro div16 2
  3303                              <3> 	div16 cs, %1, cs, %2
  3304                              <3> %endmacro
  3305                              <3> 
  3306                              <3> %macro mod16 2
  3307                              <3> 	mod16 cs, %1, cs, %2
  3308                              <3> %endmacro
  3309                              <3> 
  3310                              <3> %macro inc16 1
  3311                              <3> 	inc16 cs, %1
  3312                              <3> %endmacro
  3313                              <3> 
  3314                              <3> %macro dec16 1
  3315                              <3> 	dec16 cs, %1
  3316                              <3> %endmacro
  3317                              <3> 
  3318                              <3> %macro add16 2
  3319                              <3> 	add16 cs, %1, cs, %2
  3320                              <3> %endmacro
  3321                              <3> 
  3322                              <3> %macro sub16 2
  3323                              <3> 	sub16 cs, %1, cs, %2
  3324                              <3> %endmacro
  3325                              <3> 
  3326                              <3> %macro int32to16 2
  3327                              <3> 	int32to16 cs, %1, %2
  3328                              <3> %endmacro
  3329                              <3> 
  3330                              <3> %macro int16to32 2
  3331                              <3> 	int16to32 %1, cs, %2
  3332                              <3> %endmacro
  3333                              <3> 
  3334                              <3> %macro idiv32 5
  3335                              <3> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  3336                              <3> %endmacro
  3337                              <3> 
  3338                              <3> %macro imul32 3
  3339                              <3> 	imul32 cs, %1, cs, %2, cs, %3
  3340                              <3> %endmacro
  3341                              <3> 
  3342                              <3> %macro div32 5
  3343                              <3> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  3344                              <3> %endmacro
  3345                              <3> 
  3346                              <3> %macro mul32 3
  3347                              <3> 	mul32 cs, %1, cs, %2, cs, %3
  3348                              <3> %endmacro
  3349                              <3> 	
  3350                              <3> %macro add32 3
  3351                              <3> 	add32 cs, %1, cs, %2, cs, %3
  3352                              <3> %endmacro
  3353                              <3> 
  3354                              <3> %macro sub32 3
  3355                              <3> 	sub32 cs, %1, cs, %2, cs, %3
  3356                              <3> %endmacro
  3357                              <3> 
  3358                              <3> %macro int32to16 3
  3359                              <3> 	stkopen 0x06
  3360                              <3> 	mov ax,%1
  3361                              <3> 	mov ds,ax
  3362                              <3> 	mov ax,[%2+2]
  3363                              <3> 	mov word [bp+0], ax
  3364                              <3> 	mov ax,[%2]	
  3365                              <3> 	mov word [bp+2], ax
  3366                              <3> 	call proc_int32to16
  3367                              <3> 	mov ax,sp
  3368                              <3> 	mov bp,ax
  3369                              <3> 	mov ax,[bp+4]
  3370                              <3> 	mov word %3, ax	
  3371                              <3> 	stkclose 0x06
  3372                              <3> %endmacro
  3373                              <3> 
  3374                              <3> %macro int16to32 3
  3375                              <3> 	stkopen 0x06
  3376                              <3> 	mov word [bp+0], %1	
  3377                              <3> 	call proc_int16to32
  3378                              <3> 	mov ax,sp
  3379                              <3> 	mov bp,ax
  3380                              <3> 	mov ax,%2
  3381                              <3> 	mov ds,ax
  3382                              <3> 	mov ax,[bp+2]
  3383                              <3> 	mov [%3+2],ax
  3384                              <3> 	mov ax,[bp+4]
  3385                              <3> 	mov [%3],ax	
  3386                              <3> 	stkclose 0x06
  3387                              <3> %endmacro
  3388                              <3> 
  3389                              <3> %macro div32 10
  3390                              <3> 	stkopen 0x11
  3391                              <3> 	mov ax,%1
  3392                              <3> 	mov ds,ax
  3393                              <3> 	mov ax,[%2+2]
  3394                              <3> 	mov word [bp+0], ax
  3395                              <3> 	mov ax,[%2]
  3396                              <3> 	mov word [bp+2], ax
  3397                              <3> 	mov ax,%3
  3398                              <3> 	mov ds,ax
  3399                              <3> 	mov ax,[%4+2]
  3400                              <3> 	mov word [bp+4], ax
  3401                              <3> 	mov ax,[%4]
  3402                              <3> 	mov word [bp+6], ax
  3403                              <3> 	call proc_div32
  3404                              <3> 	mov ax,sp
  3405                              <3> 	mov bp,ax
  3406                              <3> 	mov ax,%5
  3407                              <3> 	mov ds,ax
  3408                              <3> 	mov word ax, [bp+8]
  3409                              <3> 	mov word [%6+2], ax
  3410                              <3> 	mov word ax, [bp+0x0A]
  3411                              <3> 	mov word [%6], ax
  3412                              <3> 	mov ax,%7
  3413                              <3> 	mov ds,ax
  3414                              <3> 	mov word ax,[bp+0x0C]
  3415                              <3> 	mov word [%8+2],ax
  3416                              <3> 	mov word ax,[bp+0x0E]
  3417                              <3> 	mov word [%8],ax
  3418                              <3> 	mov ax,%9
  3419                              <3> 	mov ds,ax
  3420                              <3> 	mov byte al,[bp+0x10]
  3421                              <3> 	mov byte [%10],al
  3422                              <3> 	stkclose 0x11
  3423                              <3> %endmacro
  3424                              <3> 	
  3425                              <3> %macro mul32 6
  3426                              <3> 	stkopen 0x0C
  3427                              <3> 	mov ax,%1
  3428                              <3> 	mov ds,ax
  3429                              <3> 	mov ax,[%2+2]
  3430                              <3> 	mov word [bp+0], ax
  3431                              <3> 	mov ax,[%2]
  3432                              <3> 	mov word [bp+2], ax
  3433                              <3> 	mov ax,%3
  3434                              <3> 	mov ds,ax
  3435                              <3> 	mov ax,[%4+2]
  3436                              <3> 	mov word [bp+4], ax
  3437                              <3> 	mov ax,[%4]
  3438                              <3> 	mov word [bp+6], ax
  3439                              <3> 	call proc_mul32
  3440                              <3> 	mov ax,sp
  3441                              <3> 	mov bp,ax
  3442                              <3> 	mov ax,%5
  3443                              <3> 	mov ds,ax
  3444                              <3> 	mov word ax, [bp+8]
  3445                              <3> 	mov word [%6+2], ax
  3446                              <3> 	mov word ax, [bp+0x0A]
  3447                              <3> 	mov word [%6], ax
  3448                              <3> 	stkclose 0x0C
  3449                              <3> %endmacro	
  3450                              <3> 	
  3451                              <3> %macro add32 6
  3452                              <3> 	stkopen 0x0C
  3453                              <3> 	mov ax,%1
  3454                              <3> 	mov ds,ax
  3455                              <3> 	mov ax,[%2+2]
  3456                              <3> 	mov word [bp+0], ax
  3457                              <3> 	mov ax,[%2]
  3458                              <3> 	mov word [bp+2], ax
  3459                              <3> 	mov ax,%3
  3460                              <3> 	mov ds,ax
  3461                              <3> 	mov ax,[%4+2]
  3462                              <3> 	mov word [bp+4], ax
  3463                              <3> 	mov ax,[%4]
  3464                              <3> 	mov word [bp+6], ax
  3465                              <3> 	call proc_add32
  3466                              <3> 	mov ax,sp
  3467                              <3> 	mov bp,ax
  3468                              <3> 	mov ax,%5
  3469                              <3> 	mov ds,ax
  3470                              <3> 	mov word ax, [bp+8]
  3471                              <3> 	mov word [%6+2], ax
  3472                              <3> 	mov word ax, [bp+0x0A]
  3473                              <3> 	mov word [%6], ax
  3474                              <3> 	stkclose 0x0C
  3475                              <3> %endmacro
  3476                              <3> 
  3477                              <3> %macro sub32 6
  3478                              <3> 	stkopen 0x0C
  3479                              <3> 	mov ax,%1
  3480                              <3> 	mov ds,ax
  3481                              <3> 	mov ax,[%2+2]
  3482                              <3> 	mov word [bp+0], ax
  3483                              <3> 	mov ax,[%2]
  3484                              <3> 	mov word [bp+2], ax
  3485                              <3> 	mov ax,%3
  3486                              <3> 	mov ds,ax
  3487                              <3> 	mov ax,[%4+2]
  3488                              <3> 	mov word [bp+4], ax
  3489                              <3> 	mov ax,[%4]
  3490                              <3> 	mov word [bp+6], ax
  3491                              <3> 	call proc_sub32
  3492                              <3> 	mov ax,sp
  3493                              <3> 	mov bp,ax
  3494                              <3> 	mov ax,%5
  3495                              <3> 	mov ds,ax
  3496                              <3> 	mov word ax, [bp+8]
  3497                              <3> 	mov word [%6+2], ax
  3498                              <3> 	mov word ax, [bp+0x0A]
  3499                              <3> 	mov word [%6], ax
  3500                              <3> 	stkclose 0x0C
  3501                              <3> %endmacro
  3502                              <3> 
  3503                              <3> %macro idiv32 10
  3504                              <3> 	stkopen 0x11
  3505                              <3> 	mov ax,%1
  3506                              <3> 	mov ds,ax
  3507                              <3> 	mov ax,[%2+2]
  3508                              <3> 	mov word [bp+0], ax
  3509                              <3> 	mov ax,[%2]
  3510                              <3> 	mov word [bp+2], ax
  3511                              <3> 	mov ax,%3
  3512                              <3> 	mov ds,ax
  3513                              <3> 	mov ax,[%4+2]
  3514                              <3> 	mov word [bp+4], ax
  3515                              <3> 	mov ax,[%4]
  3516                              <3> 	mov word [bp+6], ax
  3517                              <3> 	call proc_idiv32
  3518                              <3> 	mov ax,sp
  3519                              <3> 	mov bp,ax
  3520                              <3> 	mov ax,%5
  3521                              <3> 	mov ds,ax
  3522                              <3> 	mov word ax, [bp+8]
  3523                              <3> 	mov word [%6+2], ax
  3524                              <3> 	mov word ax, [bp+0x0A]
  3525                              <3> 	mov word [%6], ax
  3526                              <3> 	mov ax,%7
  3527                              <3> 	mov ds,ax
  3528                              <3> 	mov word ax,[bp+0x0C]
  3529                              <3> 	mov word [%8+2],ax
  3530                              <3> 	mov word ax,[bp+0x0E]
  3531                              <3> 	mov word [%8],ax
  3532                              <3> 	mov ax,%9
  3533                              <3> 	mov ds,ax
  3534                              <3> 	mov byte al,[bp+0x10]
  3535                              <3> 	mov byte [%10],al
  3536                              <3> 	stkclose 0x11
  3537                              <3> %endmacro
  3538                              <3> 
  3539                              <3> %macro imul32 6
  3540                              <3> 	stkopen 0x0C
  3541                              <3> 	mov ax,%1
  3542                              <3> 	mov ds,ax
  3543                              <3> 	mov ax,[%2+2]
  3544                              <3> 	mov word [bp+0], ax
  3545                              <3> 	mov ax,[%2]
  3546                              <3> 	mov word [bp+2], ax
  3547                              <3> 	mov ax,%3
  3548                              <3> 	mov ds,ax
  3549                              <3> 	mov ax,[%4+2]
  3550                              <3> 	mov word [bp+4], ax
  3551                              <3> 	mov ax,[%4]
  3552                              <3> 	mov word [bp+6], ax
  3553                              <3> 	call proc_imul32
  3554                              <3> 	mov ax,sp
  3555                              <3> 	mov bp,ax
  3556                              <3> 	mov ax,%5
  3557                              <3> 	mov ds,ax
  3558                              <3> 	mov word ax, [bp+8]
  3559                              <3> 	mov word [%6+2], ax
  3560                              <3> 	mov word ax, [bp+0x0A]
  3561                              <3> 	mov word [%6], ax
  3562                              <3> 	stkclose 0x0C
  3563                              <3> %endmacro
  3564                              <3> 	
  3565                              <3> %macro cmp32 3
  3566                              <3> 	cmp32 cs, %1, cs, %2, %3
  3567                              <3> %endmacro	
  3568                              <3> 	
  3569                              <3> %macro cmp32 5
  3570                              <3> 	stkopen 9
  3571                              <3> 	mov ax,%1
  3572                              <3> 	mov ds,ax
  3573                              <3> 	mov word ax,[%2+2]
  3574                              <3> 	mov word [bp+0], ax
  3575                              <3> 	mov word ax,[%2]
  3576                              <3> 	mov word [bp+2], ax	
  3577                              <3> 	mov ax,%3
  3578                              <3> 	mov ds,ax
  3579                              <3> 	mov word ax,[%4+2]
  3580                              <3> 	mov word [bp+4], ax
  3581                              <3> 	mov word ax,[%4]
  3582                              <3> 	mov word [bp+6], ax	
  3583                              <3> 	call proc_cmp32
  3584                              <3> 	mov ax,sp
  3585                              <3> 	mov bp,ax
  3586                              <3> 	mov al,[bp+8]
  3587                              <3> 	mov byte %5,al
  3588                              <3> 	stkclose 9
  3589                              <3> %endmacro
  3590                              <3> 	
  3591                              <3> %macro shl32 2
  3592                              <3> 	shl32 cs, %1, %2
  3593                              <3> %endmacro	
  3594                              <3> 	
  3595                              <3> %macro shl32 3
  3596                              <3> 	stkopen 5
  3597                              <3> 	mov ax,%1
  3598                              <3> 	mov ds,ax
  3599                              <3> 	mov word ax,[%2+2]
  3600                              <3> 	mov word [bp+0], ax
  3601                              <3> 	mov word ax,[%2]
  3602                              <3> 	mov word [bp+2], ax
  3603                              <3> 	mov byte al, %3
  3604                              <3> 	mov byte [bp+4], al 
  3605                              <3> 	call proc_shl32
  3606                              <3> 	mov ax,sp
  3607                              <3> 	mov bp,ax
  3608                              <3> 	mov ax,%1
  3609                              <3> 	mov ds,ax
  3610                              <3> 	mov ax,[bp+0]
  3611                              <3> 	mov word [%2+2],ax
  3612                              <3> 	mov ax,[bp+2]
  3613                              <3> 	mov word [%2],ax
  3614                              <3> 	stkclose 5
  3615                              <3> %endmacro
  3616                              <3> 
  3617                              <3> 
  3618                              <3> %macro shr32 2
  3619                              <3> 	shr32 cs, %1, %2
  3620                              <3> %endmacro	
  3621                              <3> 	
  3622                              <3> %macro shr32 3
  3623                              <3> 	stkopen 5
  3624                              <3> 	mov ax,%1
  3625                              <3> 	mov ds,ax
  3626                              <3> 	mov word ax,[%2+2]
  3627                              <3> 	mov word [bp+0], ax
  3628                              <3> 	mov word ax,[%2]
  3629                              <3> 	mov word [bp+2], ax
  3630                              <3> 	mov byte al, %3
  3631                              <3> 	mov byte [bp+4], al 
  3632                              <3> 	call proc_shr32
  3633                              <3> 	mov ax,sp
  3634                              <3> 	mov bp,ax
  3635                              <3> 	mov ax,%1
  3636                              <3> 	mov ds,ax
  3637                              <3> 	mov ax,[bp+0]
  3638                              <3> 	mov word [%2+2],ax
  3639                              <3> 	mov ax,[bp+2]
  3640                              <3> 	mov word [%2],ax
  3641                              <3> 	stkclose 5
  3642                              <3> %endmacro
  3643                              <3> 
  3644                              <3> %macro inc16 2
  3645                              <3> 	mov ax,%1
  3646                              <3> 	mov ds,ax
  3647                              <3> 	inc word [%2]
  3648                              <3> %endmacro
  3649                              <3> 
  3650                              <3> %macro dec16 2
  3651                              <3> 	mov ax,%1
  3652                              <3> 	mov ds,ax
  3653                              <3> 	dec word [%2]
  3654                              <3> %endmacro
  3655                              <3> 
  3656                              <3> %macro add16 4	
  3657                              <3> 	mov ax,%3
  3658                              <3> 	mov ds,ax
  3659                              <3> 	mov bx,[%4]	
  3660                              <3> 	mov ax,%1
  3661                              <3> 	mov ds,ax	
  3662                              <3> 	add [%2],bx
  3663                              <3> %endmacro
  3664                              <3> 
  3665                              <3> %macro sub16 4
  3666                              <3> 	mov ax,%3
  3667                              <3> 	mov ds,ax
  3668                              <3> 	mov bx,[%4]
  3669                              <3> 	mov ax,%1
  3670                              <3> 	mov ds,ax
  3671                              <3> 	sub [%2],bx
  3672                              <3> %endmacro
  3673                              <3> 
  3674                              <3> %macro mul16 4
  3675                              <3> 	mov ax,%1
  3676                              <3> 	mov ds,ax
  3677                              <3> 	mov bx,[%2]
  3678                              <3> 	mov ax,%3
  3679                              <3> 	mov ds,ax
  3680                              <3> 	mov cx,[%4]
  3681                              <3> 	
  3682                              <3> 	mov ax,bx
  3683                              <3> 	imul cx
  3684                              <3> 	
  3685                              <3> 	mov dx,%1
  3686                              <3> 	mov ds,dx
  3687                              <3> 	mov [%2],ax
  3688                              <3> %endmacro
  3689                              <3> 
  3690                              <3> %macro div16 4
  3691                              <3> 	mov ax,%1
  3692                              <3> 	mov ds,ax
  3693                              <3> 	mov bx,[%2]
  3694                              <3> 	mov ax,%3
  3695                              <3> 	mov ds,ax
  3696                              <3> 	mov cx,[%4]
  3697                              <3> 	
  3698                              <3> 	xor dx,dx
  3699                              <3> 	mov ax,bx
  3700                              <3> 	idiv cx
  3701                              <3> 	
  3702                              <3> 	mov dx,%1
  3703                              <3> 	mov ds,dx
  3704                              <3> 	mov [%2],ax
  3705                              <3> %endmacro
  3706                              <3> 
  3707                              <3> 
  3708                              <3> %macro mod16 4
  3709                              <3> 	mov ax,%1
  3710                              <3> 	mov ds,ax
  3711                              <3> 	mov bx,[%2]
  3712                              <3> 	mov ax,%3
  3713                              <3> 	mov ds,ax
  3714                              <3> 	mov cx,[%4]
  3715                              <3> 	
  3716                              <3> 	xor dx,dx
  3717                              <3> 	mov ax,bx
  3718                              <3> 	idiv cx
  3719                              <3> 	
  3720                              <3> 	mov bx,%1
  3721                              <3> 	mov ds,bx
  3722                              <3> 	mov [%2],dx
  3723                              <3> %endmacro
  3724                              <3> 
  3725                              <3> %macro cmp16 5
  3726                              <3> 	mov ax,%1
  3727                              <3> 	mov ds,ax
  3728                              <3> 	mov bx,[%2]
  3729                              <3> 	mov ax,%3
  3730                              <3> 	mov ds,ax
  3731                              <3> 	mov	cx,[%4]
  3732                              <3> 	
  3733                              <3> 	cmp bx,cx
  3734                              <3> 	jg %%above
  3735                              <3> 	jl %%below
  3736                              <3> 		mov byte %5, 0
  3737                              <3> 		jmp %%endcmp
  3738                              <3> 	%%above:
  3739                              <3> 		mov byte %5, 1
  3740                              <3> 		jmp %%endcmp
  3741                              <3> 	%%below:
  3742                              <3> 		mov byte %5, -1
  3743                              <3> 	%%endcmp:
  3744                              <3> %endmacro
  3745                              <3> 
  3746                              <3> %macro chgsig 2
  3747                              <3> 	mov ax,%1
  3748                              <3> 	mov ds,ax
  3749                              <3> 	mov ax,[%2]
  3750                              <3> 	mov bx,0xFFFF
  3751                              <3> 	sub bx,ax
  3752                              <3> 	inc bx
  3753                              <3> 	mov [%2],bx
  3754                              <3> %endmacro
  3755                              <3> 	
  3756                              <3> %endif
  3757                              <2> 	%include "lib/float.mac"
  3758                              <3> 
  3759                              <3> %ifndef FLOAT_MAC
  3760                              <3> 	%define FLOAT_MAC
  3761                              <3> 	
  3762                              <3> 	%include "lib/float.asm"	
  3763                              <4> 
  3764                              <4> %ifndef FLOAT_ASM
  3765                              <4> 	%define FLOAT_ASM
  3766                              <4> 	
  3767                              <4> 	%include "lib/system.mac"
  3768                              <5>  
  3769                              <5> %ifndef SYSTEM_MAC
  3770                              <5>  	%define SYSTEM_MAC
  3771                              <5>  	
  3772                              <5> 	%ifndef TRUE
  3773                              <5> 		%define TRUE 01h
  3774                              <5> 	%endif
  3775                              <5> 	%ifndef FALSE
  3776                              <5> 		%define FALSE 00h
  3777                              <5> 	%endif
  3778                              <5> 	
  3779                              <5> %macro vlodsb 3
  3780                              <5> 	vlodsb cs, %1, %2, %3
  3781                              <5> %endmacro
  3782                              <5> 
  3783                              <5> %macro vstosb 3
  3784                              <5> 	vstosb cs, %1, %2, %3
  3785                              <5> %endmacro
  3786                              <5> 	 	
  3787                              <5> %macro int16toreg 2
  3788                              <5> 	int16toreg cs, %1, %2
  3789                              <5> %endmacro
  3790                              <5> 
  3791                              <5> %macro regtoint16 2
  3792                              <5> 	regtoint16 %1, cs, %2
  3793                              <5> %endmacro
  3794                              <5> 
  3795                              <5> %macro vstosb 4
  3796                              <5> 	push %1
  3797                              <5> 	pop ds
  3798                              <5> 	mov si,%2
  3799                              <5> 	add si,%3
  3800                              <5> 	mov byte [si],%4	
  3801                              <5> %endmacro
  3802                              <5> 
  3803                              <5> %macro vlodsb 4
  3804                              <5> 	push %1
  3805                              <5> 	pop ds
  3806                              <5> 	mov si,%2
  3807                              <5> 	add si,%3
  3808                              <5> 	mov byte %4,[si]	
  3809                              <5> %endmacro 	 
  3810                              <5> 
  3811                              <5> %macro int16toreg 3
  3812                              <5> 	push %2
  3813                              <5> 	push %1
  3814                              <5> 	pop ds
  3815                              <5> 	pop si
  3816                              <5> 	mov word %3,[si]	
  3817                              <5> %endmacro
  3818                              <5> 
  3819                              <5> %macro regtoint16 3
  3820                              <5> 	push %3
  3821                              <5> 	push %2
  3822                              <5> 	pop ds
  3823                              <5> 	pop si
  3824                              <5> 	mov word [si],%1	
  3825                              <5> %endmacro
  3826                              <5> 
  3827                              <5> %macro mov32 2
  3828                              <5> 	mov32 cs, %1, cs, %2
  3829                              <5> %endmacro
  3830                              <5> 
  3831                              <5> %macro mov16 2
  3832                              <5> 	mov16 cs, %1, cs, %2
  3833                              <5> %endmacro
  3834                              <5> 
  3835                              <5> %macro mov32 4
  3836                              <5> 	mov ax,%3
  3837                              <5> 	mov ds,ax
  3838                              <5> 	mov cx,[%4+2]
  3839                              <5> 	mov dx,[%4]
  3840                              <5> 	mov ax,%1
  3841                              <5> 	mov ds,ax
  3842                              <5> 	mov [%2+2],cx
  3843                              <5> 	mov [%2],dx
  3844                              <5> %endmacro
  3845                              <5> 
  3846                              <5> %macro mov16 4
  3847                              <5> 	mov ax,%3
  3848                              <5> 	mov ds,ax
  3849                              <5> 	mov bx,[%4]
  3850                              <5> 	mov ax,%1
  3851                              <5> 	mov ds,ax
  3852                              <5> 	mov [%2],bx
  3853                              <5> %endmacro
  3854                              <5>  	 	
  3855                              <5> %macro mformat 4
  3856                              <5> 	stkopen 8
  3857                              <5> 	mov word [ bp + 0 ], %1
  3858                              <5> 	mov word [ bp + 2 ], %2
  3859                              <5> 	mov word [ bp + 4 ], %3
  3860                              <5> 	mov word [ bp + 6 ], %4
  3861                              <5> 	call kernel_segment:mformat
  3862                              <5> 	stkclose 8
  3863                              <5> %endmacro
  3864                              <5> 
  3865                              <5> %macro malloc 6
  3866                              <5> 	stkopen 0Bh
  3867                              <5> 	mov word [ bp + 4 ], %3
  3868                              <5> 	mov word [ bp + 6 ], %4
  3869                              <5> 	mov word [ bp + 8 ], %5	
  3870                              <5> 	call kernel_segment:malloc
  3871                              <5> 	push sp
  3872                              <5> 	pop bp
  3873                              <5> 	mov word %1, [ bp ]
  3874                              <5> 	mov word %2, [ bp + 2 ]
  3875                              <5> 	mov byte %6, [ bp + 0x0A ]
  3876                              <5> 	stkclose 0Bh
  3877                              <5> %endmacro 	
  3878                              <5> 
  3879                              <5> %macro laddr 2
  3880                              <5> 	laddr %1, %2, %1, %2
  3881                              <5> %endmacro
  3882                              <5> 
  3883                              <5> %macro faddr 2
  3884                              <5> 	faddr %1, %2, %1, %2
  3885                              <5> %endmacro
  3886                              <5>  	
  3887                              <5> %macro laddr 4
  3888                              <5> 	stkopen 8
  3889                              <5> 	mov word [ bp + 4 ], %3
  3890                              <5> 	mov word [ bp + 6 ], %4	
  3891                              <5> 	call kernel_segment:laddr
  3892                              <5> 	push sp
  3893                              <5> 	pop bp
  3894                              <5> 	mov word %1, [ bp + 0 ]
  3895                              <5> 	mov word %2, [ bp + 2 ]	
  3896                              <5> 	stkclose 8
  3897                              <5> %endmacro
  3898                              <5> 
  3899                              <5> %macro faddr 4
  3900                              <5> 	stkopen 8
  3901                              <5> 	mov word [ bp + 4 ], %3
  3902                              <5> 	mov word [ bp + 6 ], %4	
  3903                              <5> 	call kernel_segment:faddr
  3904                              <5> 	push sp
  3905                              <5> 	pop bp
  3906                              <5> 	mov word %1, [ bp + 0 ]
  3907                              <5> 	mov word %2, [ bp + 2 ]	
  3908                              <5> 	stkclose 8
  3909                              <5> %endmacro	
  3910                              <5>  
  3911                              <5> 
  3912                              <5> %macro stkopen 1		
  3913                              <5> 	sub word sp, %1
  3914                              <5> 	push sp
  3915                              <5> 	pop bp
  3916                              <5> %endmacro
  3917                              <5> 
  3918                              <5> %macro stkclose 1
  3919                              <5> 	add word sp, %1
  3920                              <5> %endmacro
  3921                              <5> 
  3922                              <5> %macro stkload 1-* 	
  3923                              <5>  	%rep %0
  3924                              <5>  	 	%rotate -1
  3925                              <5>  		pop %1
  3926                              <5>  	%endrep
  3927                              <5>  	%rep %0
  3928                              <5>  		push %1
  3929                              <5>  		%rotate 1
  3930                              <5>  	%endrep
  3931                              <5> %endmacro
  3932                              <5> 
  3933                              <5> %macro stkpush 1-* 	
  3934                              <5>  	%rep %0
  3935                              <5>  		push %1
  3936                              <5>  		%rotate 1
  3937                              <5>  	%endrep 	
  3938                              <5> %endmacro
  3939                              <5>  
  3940                              <5> %macro stkpop 1-*
  3941                              <5>  	%rep %0
  3942                              <5>  	 	%rotate -1
  3943                              <5>  		pop %1
  3944                              <5>  	%endrep 	 	
  3945                              <5> %endmacro
  3946                              <5> 
  3947                              <5> %endif 
  3948                              <4> 	%include "lib/math.mac"
  3949                              <5> 
  3950                              <5> %ifndef MATH_MAC
  3951                              <5> 	%define MATH_MAC
  3952                              <5> 	
  3953                              <5> 	%include "lib/math.asm"
  3954                              <5> 	%include "lib/system.mac"
  3955                              <5> 
  3956                              <5> %macro chgsig 1
  3957                              <5> 	chgsig cs, %1
  3958                              <5> %endmacro
  3959                              <5> 
  3960                              <5> %macro cmp16 3
  3961                              <5> 	cmp16 cs, %1, cs, %2, %3
  3962                              <5> %endmacro
  3963                              <5> 
  3964                              <5> %macro mul16 2
  3965                              <5> 	mul16 cs, %1, cs, %2
  3966                              <5> %endmacro
  3967                              <5> 
  3968                              <5> %macro div16 2
  3969                              <5> 	div16 cs, %1, cs, %2
  3970                              <5> %endmacro
  3971                              <5> 
  3972                              <5> %macro mod16 2
  3973                              <5> 	mod16 cs, %1, cs, %2
  3974                              <5> %endmacro
  3975                              <5> 
  3976                              <5> %macro inc16 1
  3977                              <5> 	inc16 cs, %1
  3978                              <5> %endmacro
  3979                              <5> 
  3980                              <5> %macro dec16 1
  3981                              <5> 	dec16 cs, %1
  3982                              <5> %endmacro
  3983                              <5> 
  3984                              <5> %macro add16 2
  3985                              <5> 	add16 cs, %1, cs, %2
  3986                              <5> %endmacro
  3987                              <5> 
  3988                              <5> %macro sub16 2
  3989                              <5> 	sub16 cs, %1, cs, %2
  3990                              <5> %endmacro
  3991                              <5> 
  3992                              <5> %macro int32to16 2
  3993                              <5> 	int32to16 cs, %1, %2
  3994                              <5> %endmacro
  3995                              <5> 
  3996                              <5> %macro int16to32 2
  3997                              <5> 	int16to32 %1, cs, %2
  3998                              <5> %endmacro
  3999                              <5> 
  4000                              <5> %macro idiv32 5
  4001                              <5> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  4002                              <5> %endmacro
  4003                              <5> 
  4004                              <5> %macro imul32 3
  4005                              <5> 	imul32 cs, %1, cs, %2, cs, %3
  4006                              <5> %endmacro
  4007                              <5> 
  4008                              <5> %macro div32 5
  4009                              <5> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  4010                              <5> %endmacro
  4011                              <5> 
  4012                              <5> %macro mul32 3
  4013                              <5> 	mul32 cs, %1, cs, %2, cs, %3
  4014                              <5> %endmacro
  4015                              <5> 	
  4016                              <5> %macro add32 3
  4017                              <5> 	add32 cs, %1, cs, %2, cs, %3
  4018                              <5> %endmacro
  4019                              <5> 
  4020                              <5> %macro sub32 3
  4021                              <5> 	sub32 cs, %1, cs, %2, cs, %3
  4022                              <5> %endmacro
  4023                              <5> 
  4024                              <5> %macro int32to16 3
  4025                              <5> 	stkopen 0x06
  4026                              <5> 	mov ax,%1
  4027                              <5> 	mov ds,ax
  4028                              <5> 	mov ax,[%2+2]
  4029                              <5> 	mov word [bp+0], ax
  4030                              <5> 	mov ax,[%2]	
  4031                              <5> 	mov word [bp+2], ax
  4032                              <5> 	call proc_int32to16
  4033                              <5> 	mov ax,sp
  4034                              <5> 	mov bp,ax
  4035                              <5> 	mov ax,[bp+4]
  4036                              <5> 	mov word %3, ax	
  4037                              <5> 	stkclose 0x06
  4038                              <5> %endmacro
  4039                              <5> 
  4040                              <5> %macro int16to32 3
  4041                              <5> 	stkopen 0x06
  4042                              <5> 	mov word [bp+0], %1	
  4043                              <5> 	call proc_int16to32
  4044                              <5> 	mov ax,sp
  4045                              <5> 	mov bp,ax
  4046                              <5> 	mov ax,%2
  4047                              <5> 	mov ds,ax
  4048                              <5> 	mov ax,[bp+2]
  4049                              <5> 	mov [%3+2],ax
  4050                              <5> 	mov ax,[bp+4]
  4051                              <5> 	mov [%3],ax	
  4052                              <5> 	stkclose 0x06
  4053                              <5> %endmacro
  4054                              <5> 
  4055                              <5> %macro div32 10
  4056                              <5> 	stkopen 0x11
  4057                              <5> 	mov ax,%1
  4058                              <5> 	mov ds,ax
  4059                              <5> 	mov ax,[%2+2]
  4060                              <5> 	mov word [bp+0], ax
  4061                              <5> 	mov ax,[%2]
  4062                              <5> 	mov word [bp+2], ax
  4063                              <5> 	mov ax,%3
  4064                              <5> 	mov ds,ax
  4065                              <5> 	mov ax,[%4+2]
  4066                              <5> 	mov word [bp+4], ax
  4067                              <5> 	mov ax,[%4]
  4068                              <5> 	mov word [bp+6], ax
  4069                              <5> 	call proc_div32
  4070                              <5> 	mov ax,sp
  4071                              <5> 	mov bp,ax
  4072                              <5> 	mov ax,%5
  4073                              <5> 	mov ds,ax
  4074                              <5> 	mov word ax, [bp+8]
  4075                              <5> 	mov word [%6+2], ax
  4076                              <5> 	mov word ax, [bp+0x0A]
  4077                              <5> 	mov word [%6], ax
  4078                              <5> 	mov ax,%7
  4079                              <5> 	mov ds,ax
  4080                              <5> 	mov word ax,[bp+0x0C]
  4081                              <5> 	mov word [%8+2],ax
  4082                              <5> 	mov word ax,[bp+0x0E]
  4083                              <5> 	mov word [%8],ax
  4084                              <5> 	mov ax,%9
  4085                              <5> 	mov ds,ax
  4086                              <5> 	mov byte al,[bp+0x10]
  4087                              <5> 	mov byte [%10],al
  4088                              <5> 	stkclose 0x11
  4089                              <5> %endmacro
  4090                              <5> 	
  4091                              <5> %macro mul32 6
  4092                              <5> 	stkopen 0x0C
  4093                              <5> 	mov ax,%1
  4094                              <5> 	mov ds,ax
  4095                              <5> 	mov ax,[%2+2]
  4096                              <5> 	mov word [bp+0], ax
  4097                              <5> 	mov ax,[%2]
  4098                              <5> 	mov word [bp+2], ax
  4099                              <5> 	mov ax,%3
  4100                              <5> 	mov ds,ax
  4101                              <5> 	mov ax,[%4+2]
  4102                              <5> 	mov word [bp+4], ax
  4103                              <5> 	mov ax,[%4]
  4104                              <5> 	mov word [bp+6], ax
  4105                              <5> 	call proc_mul32
  4106                              <5> 	mov ax,sp
  4107                              <5> 	mov bp,ax
  4108                              <5> 	mov ax,%5
  4109                              <5> 	mov ds,ax
  4110                              <5> 	mov word ax, [bp+8]
  4111                              <5> 	mov word [%6+2], ax
  4112                              <5> 	mov word ax, [bp+0x0A]
  4113                              <5> 	mov word [%6], ax
  4114                              <5> 	stkclose 0x0C
  4115                              <5> %endmacro	
  4116                              <5> 	
  4117                              <5> %macro add32 6
  4118                              <5> 	stkopen 0x0C
  4119                              <5> 	mov ax,%1
  4120                              <5> 	mov ds,ax
  4121                              <5> 	mov ax,[%2+2]
  4122                              <5> 	mov word [bp+0], ax
  4123                              <5> 	mov ax,[%2]
  4124                              <5> 	mov word [bp+2], ax
  4125                              <5> 	mov ax,%3
  4126                              <5> 	mov ds,ax
  4127                              <5> 	mov ax,[%4+2]
  4128                              <5> 	mov word [bp+4], ax
  4129                              <5> 	mov ax,[%4]
  4130                              <5> 	mov word [bp+6], ax
  4131                              <5> 	call proc_add32
  4132                              <5> 	mov ax,sp
  4133                              <5> 	mov bp,ax
  4134                              <5> 	mov ax,%5
  4135                              <5> 	mov ds,ax
  4136                              <5> 	mov word ax, [bp+8]
  4137                              <5> 	mov word [%6+2], ax
  4138                              <5> 	mov word ax, [bp+0x0A]
  4139                              <5> 	mov word [%6], ax
  4140                              <5> 	stkclose 0x0C
  4141                              <5> %endmacro
  4142                              <5> 
  4143                              <5> %macro sub32 6
  4144                              <5> 	stkopen 0x0C
  4145                              <5> 	mov ax,%1
  4146                              <5> 	mov ds,ax
  4147                              <5> 	mov ax,[%2+2]
  4148                              <5> 	mov word [bp+0], ax
  4149                              <5> 	mov ax,[%2]
  4150                              <5> 	mov word [bp+2], ax
  4151                              <5> 	mov ax,%3
  4152                              <5> 	mov ds,ax
  4153                              <5> 	mov ax,[%4+2]
  4154                              <5> 	mov word [bp+4], ax
  4155                              <5> 	mov ax,[%4]
  4156                              <5> 	mov word [bp+6], ax
  4157                              <5> 	call proc_sub32
  4158                              <5> 	mov ax,sp
  4159                              <5> 	mov bp,ax
  4160                              <5> 	mov ax,%5
  4161                              <5> 	mov ds,ax
  4162                              <5> 	mov word ax, [bp+8]
  4163                              <5> 	mov word [%6+2], ax
  4164                              <5> 	mov word ax, [bp+0x0A]
  4165                              <5> 	mov word [%6], ax
  4166                              <5> 	stkclose 0x0C
  4167                              <5> %endmacro
  4168                              <5> 
  4169                              <5> %macro idiv32 10
  4170                              <5> 	stkopen 0x11
  4171                              <5> 	mov ax,%1
  4172                              <5> 	mov ds,ax
  4173                              <5> 	mov ax,[%2+2]
  4174                              <5> 	mov word [bp+0], ax
  4175                              <5> 	mov ax,[%2]
  4176                              <5> 	mov word [bp+2], ax
  4177                              <5> 	mov ax,%3
  4178                              <5> 	mov ds,ax
  4179                              <5> 	mov ax,[%4+2]
  4180                              <5> 	mov word [bp+4], ax
  4181                              <5> 	mov ax,[%4]
  4182                              <5> 	mov word [bp+6], ax
  4183                              <5> 	call proc_idiv32
  4184                              <5> 	mov ax,sp
  4185                              <5> 	mov bp,ax
  4186                              <5> 	mov ax,%5
  4187                              <5> 	mov ds,ax
  4188                              <5> 	mov word ax, [bp+8]
  4189                              <5> 	mov word [%6+2], ax
  4190                              <5> 	mov word ax, [bp+0x0A]
  4191                              <5> 	mov word [%6], ax
  4192                              <5> 	mov ax,%7
  4193                              <5> 	mov ds,ax
  4194                              <5> 	mov word ax,[bp+0x0C]
  4195                              <5> 	mov word [%8+2],ax
  4196                              <5> 	mov word ax,[bp+0x0E]
  4197                              <5> 	mov word [%8],ax
  4198                              <5> 	mov ax,%9
  4199                              <5> 	mov ds,ax
  4200                              <5> 	mov byte al,[bp+0x10]
  4201                              <5> 	mov byte [%10],al
  4202                              <5> 	stkclose 0x11
  4203                              <5> %endmacro
  4204                              <5> 
  4205                              <5> %macro imul32 6
  4206                              <5> 	stkopen 0x0C
  4207                              <5> 	mov ax,%1
  4208                              <5> 	mov ds,ax
  4209                              <5> 	mov ax,[%2+2]
  4210                              <5> 	mov word [bp+0], ax
  4211                              <5> 	mov ax,[%2]
  4212                              <5> 	mov word [bp+2], ax
  4213                              <5> 	mov ax,%3
  4214                              <5> 	mov ds,ax
  4215                              <5> 	mov ax,[%4+2]
  4216                              <5> 	mov word [bp+4], ax
  4217                              <5> 	mov ax,[%4]
  4218                              <5> 	mov word [bp+6], ax
  4219                              <5> 	call proc_imul32
  4220                              <5> 	mov ax,sp
  4221                              <5> 	mov bp,ax
  4222                              <5> 	mov ax,%5
  4223                              <5> 	mov ds,ax
  4224                              <5> 	mov word ax, [bp+8]
  4225                              <5> 	mov word [%6+2], ax
  4226                              <5> 	mov word ax, [bp+0x0A]
  4227                              <5> 	mov word [%6], ax
  4228                              <5> 	stkclose 0x0C
  4229                              <5> %endmacro
  4230                              <5> 	
  4231                              <5> %macro cmp32 3
  4232                              <5> 	cmp32 cs, %1, cs, %2, %3
  4233                              <5> %endmacro	
  4234                              <5> 	
  4235                              <5> %macro cmp32 5
  4236                              <5> 	stkopen 9
  4237                              <5> 	mov ax,%1
  4238                              <5> 	mov ds,ax
  4239                              <5> 	mov word ax,[%2+2]
  4240                              <5> 	mov word [bp+0], ax
  4241                              <5> 	mov word ax,[%2]
  4242                              <5> 	mov word [bp+2], ax	
  4243                              <5> 	mov ax,%3
  4244                              <5> 	mov ds,ax
  4245                              <5> 	mov word ax,[%4+2]
  4246                              <5> 	mov word [bp+4], ax
  4247                              <5> 	mov word ax,[%4]
  4248                              <5> 	mov word [bp+6], ax	
  4249                              <5> 	call proc_cmp32
  4250                              <5> 	mov ax,sp
  4251                              <5> 	mov bp,ax
  4252                              <5> 	mov al,[bp+8]
  4253                              <5> 	mov byte %5,al
  4254                              <5> 	stkclose 9
  4255                              <5> %endmacro
  4256                              <5> 	
  4257                              <5> %macro shl32 2
  4258                              <5> 	shl32 cs, %1, %2
  4259                              <5> %endmacro	
  4260                              <5> 	
  4261                              <5> %macro shl32 3
  4262                              <5> 	stkopen 5
  4263                              <5> 	mov ax,%1
  4264                              <5> 	mov ds,ax
  4265                              <5> 	mov word ax,[%2+2]
  4266                              <5> 	mov word [bp+0], ax
  4267                              <5> 	mov word ax,[%2]
  4268                              <5> 	mov word [bp+2], ax
  4269                              <5> 	mov byte al, %3
  4270                              <5> 	mov byte [bp+4], al 
  4271                              <5> 	call proc_shl32
  4272                              <5> 	mov ax,sp
  4273                              <5> 	mov bp,ax
  4274                              <5> 	mov ax,%1
  4275                              <5> 	mov ds,ax
  4276                              <5> 	mov ax,[bp+0]
  4277                              <5> 	mov word [%2+2],ax
  4278                              <5> 	mov ax,[bp+2]
  4279                              <5> 	mov word [%2],ax
  4280                              <5> 	stkclose 5
  4281                              <5> %endmacro
  4282                              <5> 
  4283                              <5> 
  4284                              <5> %macro shr32 2
  4285                              <5> 	shr32 cs, %1, %2
  4286                              <5> %endmacro	
  4287                              <5> 	
  4288                              <5> %macro shr32 3
  4289                              <5> 	stkopen 5
  4290                              <5> 	mov ax,%1
  4291                              <5> 	mov ds,ax
  4292                              <5> 	mov word ax,[%2+2]
  4293                              <5> 	mov word [bp+0], ax
  4294                              <5> 	mov word ax,[%2]
  4295                              <5> 	mov word [bp+2], ax
  4296                              <5> 	mov byte al, %3
  4297                              <5> 	mov byte [bp+4], al 
  4298                              <5> 	call proc_shr32
  4299                              <5> 	mov ax,sp
  4300                              <5> 	mov bp,ax
  4301                              <5> 	mov ax,%1
  4302                              <5> 	mov ds,ax
  4303                              <5> 	mov ax,[bp+0]
  4304                              <5> 	mov word [%2+2],ax
  4305                              <5> 	mov ax,[bp+2]
  4306                              <5> 	mov word [%2],ax
  4307                              <5> 	stkclose 5
  4308                              <5> %endmacro
  4309                              <5> 
  4310                              <5> %macro inc16 2
  4311                              <5> 	mov ax,%1
  4312                              <5> 	mov ds,ax
  4313                              <5> 	inc word [%2]
  4314                              <5> %endmacro
  4315                              <5> 
  4316                              <5> %macro dec16 2
  4317                              <5> 	mov ax,%1
  4318                              <5> 	mov ds,ax
  4319                              <5> 	dec word [%2]
  4320                              <5> %endmacro
  4321                              <5> 
  4322                              <5> %macro add16 4	
  4323                              <5> 	mov ax,%3
  4324                              <5> 	mov ds,ax
  4325                              <5> 	mov bx,[%4]	
  4326                              <5> 	mov ax,%1
  4327                              <5> 	mov ds,ax	
  4328                              <5> 	add [%2],bx
  4329                              <5> %endmacro
  4330                              <5> 
  4331                              <5> %macro sub16 4
  4332                              <5> 	mov ax,%3
  4333                              <5> 	mov ds,ax
  4334                              <5> 	mov bx,[%4]
  4335                              <5> 	mov ax,%1
  4336                              <5> 	mov ds,ax
  4337                              <5> 	sub [%2],bx
  4338                              <5> %endmacro
  4339                              <5> 
  4340                              <5> %macro mul16 4
  4341                              <5> 	mov ax,%1
  4342                              <5> 	mov ds,ax
  4343                              <5> 	mov bx,[%2]
  4344                              <5> 	mov ax,%3
  4345                              <5> 	mov ds,ax
  4346                              <5> 	mov cx,[%4]
  4347                              <5> 	
  4348                              <5> 	mov ax,bx
  4349                              <5> 	imul cx
  4350                              <5> 	
  4351                              <5> 	mov dx,%1
  4352                              <5> 	mov ds,dx
  4353                              <5> 	mov [%2],ax
  4354                              <5> %endmacro
  4355                              <5> 
  4356                              <5> %macro div16 4
  4357                              <5> 	mov ax,%1
  4358                              <5> 	mov ds,ax
  4359                              <5> 	mov bx,[%2]
  4360                              <5> 	mov ax,%3
  4361                              <5> 	mov ds,ax
  4362                              <5> 	mov cx,[%4]
  4363                              <5> 	
  4364                              <5> 	xor dx,dx
  4365                              <5> 	mov ax,bx
  4366                              <5> 	idiv cx
  4367                              <5> 	
  4368                              <5> 	mov dx,%1
  4369                              <5> 	mov ds,dx
  4370                              <5> 	mov [%2],ax
  4371                              <5> %endmacro
  4372                              <5> 
  4373                              <5> 
  4374                              <5> %macro mod16 4
  4375                              <5> 	mov ax,%1
  4376                              <5> 	mov ds,ax
  4377                              <5> 	mov bx,[%2]
  4378                              <5> 	mov ax,%3
  4379                              <5> 	mov ds,ax
  4380                              <5> 	mov cx,[%4]
  4381                              <5> 	
  4382                              <5> 	xor dx,dx
  4383                              <5> 	mov ax,bx
  4384                              <5> 	idiv cx
  4385                              <5> 	
  4386                              <5> 	mov bx,%1
  4387                              <5> 	mov ds,bx
  4388                              <5> 	mov [%2],dx
  4389                              <5> %endmacro
  4390                              <5> 
  4391                              <5> %macro cmp16 5
  4392                              <5> 	mov ax,%1
  4393                              <5> 	mov ds,ax
  4394                              <5> 	mov bx,[%2]
  4395                              <5> 	mov ax,%3
  4396                              <5> 	mov ds,ax
  4397                              <5> 	mov	cx,[%4]
  4398                              <5> 	
  4399                              <5> 	cmp bx,cx
  4400                              <5> 	jg %%above
  4401                              <5> 	jl %%below
  4402                              <5> 		mov byte %5, 0
  4403                              <5> 		jmp %%endcmp
  4404                              <5> 	%%above:
  4405                              <5> 		mov byte %5, 1
  4406                              <5> 		jmp %%endcmp
  4407                              <5> 	%%below:
  4408                              <5> 		mov byte %5, -1
  4409                              <5> 	%%endcmp:
  4410                              <5> %endmacro
  4411                              <5> 
  4412                              <5> %macro chgsig 2
  4413                              <5> 	mov ax,%1
  4414                              <5> 	mov ds,ax
  4415                              <5> 	mov ax,[%2]
  4416                              <5> 	mov bx,0xFFFF
  4417                              <5> 	sub bx,ax
  4418                              <5> 	inc bx
  4419                              <5> 	mov [%2],bx
  4420                              <5> %endmacro
  4421                              <5> 	
  4422                              <5> %endif
  4423                              <4> 	
  4424                              <4> %macro __fltoint16 3
  4425                              <4> 	stkopen 0x06
  4426                              <4> 	mov word [bp+0],%1
  4427                              <4> 	mov word [bp+2],%2
  4428                              <4> 	call proc_fltoint16
  4429                              <4> 	push sp
  4430                              <4> 	pop bp
  4431                              <4> 	mov word %3,[bp+4]
  4432                              <4> 	stkclose 0x06
  4433                              <4> %endmacro
  4434                              <4> 
  4435                              <4> %macro __flroundtoint16 3
  4436                              <4> 	stkopen 0x06
  4437                              <4> 	mov word [bp+0],%1
  4438                              <4> 	mov word [bp+2],%2
  4439                              <4> 	call proc_flroundtoint16
  4440                              <4> 	push sp
  4441                              <4> 	pop bp
  4442                              <4> 	mov word %3,[bp+4]
  4443                              <4> 	stkclose 0x06
  4444                              <4> %endmacro
  4445                              <4> 
  4446                              <4> %macro __int16tofl 3	
  4447                              <4> 	stkopen 0x06
  4448                              <4> 	mov word [bp+0],%1
  4449                              <4> 	call proc_int16tofl
  4450                              <4> 	push sp
  4451                              <4> 	pop bp
  4452                              <4> 	mov word %2,[bp+2]
  4453                              <4> 	mov word %3,[bp+4]
  4454                              <4> 	stkclose 0x06
  4455                              <4> %endmacro
  4456                              <4> 		
  4457                              <4> %macro __flroundtoint32 4
  4458                              <4> 	stkopen 0x08
  4459                              <4> 	mov word [bp+0],%1
  4460                              <4> 	mov word [bp+2],%2
  4461                              <4> 	call proc_flroundtoint32
  4462                              <4> 	push sp
  4463                              <4> 	pop bp
  4464                              <4> 	mov word %3,[bp+4]
  4465                              <4> 	mov word %4,[bp+6]
  4466                              <4> 	stkclose 0x08
  4467                              <4> %endmacro		
  4468                              <4> 		
  4469                              <4> %macro __fltoint32 4
  4470                              <4> 	stkopen 0x08
  4471                              <4> 	mov word [bp+0],%1
  4472                              <4> 	mov word [bp+2],%2
  4473                              <4> 	call proc_fltoint32
  4474                              <4> 	push sp
  4475                              <4> 	pop bp
  4476                              <4> 	mov word %3,[bp+4]
  4477                              <4> 	mov word %4,[bp+6]
  4478                              <4> 	stkclose 0x08
  4479                              <4> %endmacro
  4480                              <4> 
  4481                              <4> %macro __int32tofl 4
  4482                              <4> 	stkopen 0x08
  4483                              <4> 	mov word [bp+0],%1
  4484                              <4> 	mov word [bp+2],%2
  4485                              <4> 	call proc_int32tofl
  4486                              <4> 	push sp
  4487                              <4> 	pop bp
  4488                              <4> 	mov word %3,[bp+4]
  4489                              <4> 	mov word %4,[bp+6]
  4490                              <4> 	stkclose 0x08
  4491                              <4> %endmacro
  4492                              <4> 
  4493                              <4> %macro __flcmp 5
  4494                              <4> 	stkopen 0x09
  4495                              <4> 	mov word [bp+0],%1
  4496                              <4> 	mov word [bp+2],%2
  4497                              <4> 	mov word [bp+4],%3
  4498                              <4> 	mov word [bp+6],%4
  4499                              <4> 	call proc_flcmp
  4500                              <4> 	push sp
  4501                              <4> 	pop bp
  4502                              <4> 	mov byte %5, [bp+8]
  4503                              <4> 	stkclose 0x09
  4504                              <4> %endmacro
  4505                              <4> 	
  4506                              <4> %macro __flshl 2
  4507                              <4> 	stkopen 0x03
  4508                              <4> 	mov word [bp+0],%1
  4509                              <4> 	mov byte [bp+2],%2
  4510                              <4> 	call proc_flshl
  4511                              <4> 	push sp
  4512                              <4> 	pop bp
  4513                              <4> 	mov word %1,[bp+0]
  4514                              <4> 	stkclose 0x03
  4515                              <4> %endmacro	
  4516                              <4> 
  4517                              <4> %macro __flshr 2
  4518                              <4> 	stkopen 0x03
  4519                              <4> 	mov word [bp+0],%1
  4520                              <4> 	mov byte [bp+2],%2
  4521                              <4> 	call proc_flshr
  4522                              <4> 	push sp
  4523                              <4> 	pop bp
  4524                              <4> 	mov word %1,[bp+0]
  4525                              <4> 	stkclose 0x03
  4526                              <4> %endmacro	
  4527                              <4> 	
  4528                              <4> %macro __flinvsig 1
  4529                              <4> 	stkopen 0x02
  4530                              <4> 	mov word [bp+0],%1
  4531                              <4> 	call proc_flinvsig
  4532                              <4> 	push sp
  4533                              <4> 	pop bp
  4534                              <4> 	mov word %1, [bp+0]
  4535                              <4> 	stkclose 0x02
  4536                              <4> %endmacro
  4537                              <4> 
  4538                              <4> %macro __flsetsig 1
  4539                              <4> 	stkopen 0x04
  4540                              <4> 	mov word [bp+0],%1
  4541                              <4> 	mov word [bp+2],0x8000
  4542                              <4> 	call proc_flsetsig
  4543                              <4> 	push sp
  4544                              <4> 	pop bp
  4545                              <4> 	mov word %1, [bp+0]
  4546                              <4> 	stkclose 0x04
  4547                              <4> %endmacro	
  4548                              <4> 
  4549                              <4> %macro __flclearsig 1
  4550                              <4> 	stkopen 0x04
  4551                              <4> 	mov word [bp+0],%1
  4552                              <4> 	mov word [bp+2],0
  4553                              <4> 	call proc_flclrsig
  4554                              <4> 	push sp
  4555                              <4> 	pop bp
  4556                              <4> 	mov word %1, [bp+0]
  4557                              <4> 	stkclose 0x04
  4558                              <4> %endmacro		
  4559                              <4> 	
  4560                              <4> %macro __fladd 6
  4561                              <4> 	stkopen 0x0E
  4562                              <4> 	mov word [bp+0],%1
  4563                              <4> 	mov word [bp+2],%2
  4564                              <4> 	mov word [bp+4],%3
  4565                              <4> 	mov word [bp+6],%4
  4566                              <4> 	mov word [bp+0x0C],0
  4567                              <4> 	call proc_fladdorsub
  4568                              <4> 	push sp
  4569                              <4> 	pop bp
  4570                              <4> 	mov word %5,[bp+8]
  4571                              <4> 	mov word %6,[bp+0x0A]
  4572                              <4> 	stkclose 0x0E
  4573                              <4> %endmacro
  4574                              <4> 
  4575                              <4> %macro __flsub 6
  4576                              <4> 	stkopen 0x0E
  4577                              <4> 	mov word [bp+0],%1
  4578                              <4> 	mov word [bp+2],%2
  4579                              <4> 	mov word [bp+4],%3
  4580                              <4> 	mov word [bp+6],%4
  4581                              <4> 	mov word [bp+0x0C],0x8000
  4582                              <4> 	call proc_fladdorsub
  4583                              <4> 	push sp
  4584                              <4> 	pop bp
  4585                              <4> 	mov word %5,[bp+8]
  4586                              <4> 	mov word %6,[bp+0x0A]
  4587                              <4> 	stkclose 0x0E
  4588                              <4> %endmacro
  4589                              <4> 
  4590                              <4> %macro __flmul 6
  4591                              <4> 	stkopen 0x0E
  4592                              <4> 	mov word [bp+0],%1
  4593                              <4> 	mov word [bp+2],%2
  4594                              <4> 	mov word [bp+4],%3
  4595                              <4> 	mov word [bp+6],%4
  4596                              <4> 	call proc_flmul
  4597                              <4> 	push sp
  4598                              <4> 	pop bp
  4599                              <4> 	mov word %5,[bp+8]
  4600                              <4> 	mov word %6,[bp+0x0A]
  4601                              <4> 	stkclose 0x0E
  4602                              <4> %endmacro
  4603                              <4> 
  4604                              <4> %macro __fldiv 6
  4605                              <4> 	stkopen 0x0E
  4606                              <4> 	mov word [bp+0],%1
  4607                              <4> 	mov word [bp+2],%2
  4608                              <4> 	mov word [bp+4],%3
  4609                              <4> 	mov word [bp+6],%4
  4610                              <4> 	call proc_fldiv
  4611                              <4> 	push sp
  4612                              <4> 	pop bp
  4613                              <4> 	mov word %5,[bp+8]
  4614                              <4> 	mov word %6,[bp+0x0A]
  4615                              <4> 	stkclose 0x0E
  4616                              <4> %endmacro
  4617                              <4> 
  4618                              <4> %macro __validate 7
  4619                              <4> 	stkopen 0x0D
  4620                              <4> 	mov word [bp+0],%1
  4621                              <4> 	mov word [bp+2],%2
  4622                              <4> 	mov word [bp+4],%3
  4623                              <4> 	mov word [bp+6],%4
  4624                              <4> 	call proc__validate
  4625                              <4> 	push sp
  4626                              <4> 	pop bp
  4627                              <4> 	mov word %5,[bp+8]
  4628                              <4> 	mov word %6,[bp+0x0A]
  4629                              <4> 	mov byte %7,[bp+0x0C]
  4630                              <4> 	stkclose 0x0D
  4631                              <4> %endmacro
  4632                              <4> 
  4633                              <4> %macro __div_validate 7
  4634                              <4> 	stkopen 0x0D
  4635                              <4> 	mov word [bp+0],%1
  4636                              <4> 	mov word [bp+2],%2
  4637                              <4> 	mov word [bp+4],%3
  4638                              <4> 	mov word [bp+6],%4
  4639                              <4> 	call proc__div_validate
  4640                              <4> 	push sp
  4641                              <4> 	pop bp
  4642                              <4> 	mov word %5,[bp+8]
  4643                              <4> 	mov word %6,[bp+0x0A]
  4644                              <4> 	mov byte %7,[bp+0x0C]
  4645                              <4> 	stkclose 0x0D
  4646                              <4> %endmacro
  4647                              <4> 
  4648                              <4> %macro __mul_validate 5
  4649                              <4> 	stkopen 0x09
  4650                              <4> 	mov word [bp+0],%1
  4651                              <4> 	mov word [bp+2],%2
  4652                              <4> 	call proc__mul_validate
  4653                              <4> 	push sp
  4654                              <4> 	pop bp
  4655                              <4> 	mov word %3,[bp+4]
  4656                              <4> 	mov word %4,[bp+6]
  4657                              <4> 	mov byte %5,[bp+8]
  4658                              <4> 	stkclose 0x09
  4659                              <4> %endmacro
  4660                              <4> 
  4661                              <4> %macro __addorsub_validate 7
  4662                              <4> 	stkopen 0x0D
  4663                              <4> 	mov word [bp+0],%1
  4664                              <4> 	mov word [bp+2],%2
  4665                              <4> 	mov word [bp+4],%3
  4666                              <4> 	mov word [bp+6],%4
  4667                              <4> 	call proc__addorsub_validate
  4668                              <4> 	push sp
  4669                              <4> 	pop bp
  4670                              <4> 	mov word %5,[bp+8]
  4671                              <4> 	mov word %6,[bp+0x0A]
  4672                              <4> 	mov byte %7,[bp+0x0C]
  4673                              <4> 	stkclose 0x0D
  4674                              <4> %endmacro
  4675                              <4> 
  4676                              <4> %macro __cmp_validate 4
  4677                              <4> 	stkopen 0x06
  4678                              <4> 	mov word [bp+0],%1
  4679                              <4> 	mov word [bp+2],%2
  4680                              <4> 	call proc__cmp_validate
  4681                              <4> 	push sp
  4682                              <4> 	pop bp
  4683                              <4> 	mov byte %3, [bp+4]
  4684                              <4> 	mov byte %4, [bp+5]
  4685                              <4> 	stkclose 0x06
  4686                              <4> %endmacro
  4687                              <4> 
  4688                              <4> %macro __iaddorsub32 7
  4689                              <4> 	stkopen 0x0D
  4690                              <4> 	mov word [bp+0],%1
  4691                              <4> 	mov word [bp+2],%2
  4692                              <4> 	mov word [bp+4],%3
  4693                              <4> 	mov word [bp+6],%4
  4694                              <4> 	mov word [bp+0x0C], %7
  4695                              <4> 	call proc__iaddorsub32
  4696                              <4> 	push sp
  4697                              <4> 	pop bp
  4698                              <4> 	mov word %5,[bp+8]
  4699                              <4> 	mov word %6,[bp+0x0A]
  4700                              <4> 	stkclose 0x0D
  4701                              <4> %endmacro
  4702                              <4> 
  4703                              <4> %macro __fldiv32 6
  4704                              <4> 	stkopen 0x11
  4705                              <4> 	mov word [bp+0],%1
  4706                              <4> 	mov word [bp+2],%2
  4707                              <4> 	mov word [bp+4],%3
  4708                              <4> 	mov word [bp+6],%4
  4709                              <4> 	call proc__fldiv32
  4710                              <4> 	push sp
  4711                              <4> 	pop bp
  4712                              <4> 	mov word %5,[bp+8]
  4713                              <4> 	mov word %6,[bp+0x0A]
  4714                              <4> 	stkclose 0x11
  4715                              <4> %endmacro
  4716                              <4> 
  4717                              <4> %macro __mul32_64 8
  4718                              <4> 	stkopen 0x10
  4719                              <4> 	mov word [bp+0],%1
  4720                              <4> 	mov word [bp+2],%2
  4721                              <4> 	mov word [bp+4],%3
  4722                              <4> 	mov word [bp+6],%4
  4723                              <4> 	call proc__mul32_64
  4724                              <4> 	push sp
  4725                              <4> 	pop bp
  4726                              <4> 	mov word %5,[bp+8]
  4727                              <4> 	mov word %6,[bp+0x0A]
  4728                              <4> 	mov word %7,[bp+0x0C]
  4729                              <4> 	mov word %8,[bp+0x0E]
  4730                              <4> 	stkclose 0x10
  4731                              <4> %endmacro
  4732                              <4> 
  4733                              <4> %macro __normalize 3
  4734                              <4> 	stkopen 0x06
  4735                              <4> 	mov word [bp+0],%1
  4736                              <4> 	mov word [bp+2],%2
  4737                              <4> 	mov word [bp+4],%3
  4738                              <4> 	call proc__normalize
  4739                              <4> 	push sp
  4740                              <4> 	pop bp
  4741                              <4> 	mov word %1,[bp+0]
  4742                              <4> 	mov word %2,[bp+2]
  4743                              <4> 	stkclose 0x06
  4744                              <4> %endmacro
  4745                              <4> 
  4746                              <4> section .data
  4747                              <4> 
  4748                              <4> proc_fltoint16:
  4749 00000ABF 89E0                <4> 	mov ax,sp
  4750 00000AC1 89C5                <4> 	mov bp,ax
  4751                              <4> 	
  4752 00000AC3 8B4602              <4> 	mov ax,[bp+2]
  4753 00000AC6 8B5E04              <4> 	mov bx,[bp+4]
  4754                              <4> 	__fltoint32 ax, bx, ax, bx
  4755                              <5>  stkopen 0x08
  4756 00000AC9 83EC08              <6>  sub word sp, %1
  4757 00000ACC 54                  <6>  push sp
  4758 00000ACD 5D                  <6>  pop bp
  4759 00000ACE 894600              <5>  mov word [bp+0],%1
  4760 00000AD1 895E02              <5>  mov word [bp+2],%2
  4761 00000AD4 E88601              <5>  call proc_fltoint32
  4762 00000AD7 54                  <5>  push sp
  4763 00000AD8 5D                  <5>  pop bp
  4764 00000AD9 8B4604              <5>  mov word %3,[bp+4]
  4765 00000ADC 8B5E06              <5>  mov word %4,[bp+6]
  4766                              <5>  stkclose 0x08
  4767 00000ADF 83C408              <6>  add word sp, %1
  4768                              <4> 	__int32to16 ax, bx, cx
  4769                              <5>  stkopen 0x06
  4770 00000AE2 83EC06              <6>  sub word sp, %1
  4771 00000AE5 54                  <6>  push sp
  4772 00000AE6 5D                  <6>  pop bp
  4773 00000AE7 894600              <5>  mov word [bp+0], %1
  4774 00000AEA 895E02              <5>  mov word [bp+2], %2
  4775 00000AED E898FA              <5>  call proc_int32to16
  4776 00000AF0 54                  <5>  push sp
  4777 00000AF1 5D                  <5>  pop bp
  4778 00000AF2 8B4E04              <5>  mov word %3, [bp+4]
  4779                              <5>  stkclose 0x06
  4780 00000AF5 83C406              <6>  add word sp, %1
  4781                              <4> 	
  4782 00000AF8 89E0                <4> 	mov ax,sp
  4783 00000AFA 89C5                <4> 	mov bp,ax
  4784 00000AFC 894E06              <4> 	mov [bp+6],cx
  4785                              <4> 	
  4786 00000AFF C3                  <4> 	ret
  4787                              <4> 	
  4788                              <4> proc_flroundtoint16:
  4789 00000B00 89E0                <4> 	mov ax,sp
  4790 00000B02 89C5                <4> 	mov bp,ax
  4791                              <4> 	
  4792 00000B04 8B4602              <4> 	mov ax,[bp+2]
  4793 00000B07 8B5E04              <4> 	mov bx,[bp+4]
  4794                              <4> 	__flroundtoint32 ax, bx, ax, bx
  4795                              <5>  stkopen 0x08
  4796 00000B0A 83EC08              <6>  sub word sp, %1
  4797 00000B0D 54                  <6>  push sp
  4798 00000B0E 5D                  <6>  pop bp
  4799 00000B0F 894600              <5>  mov word [bp+0],%1
  4800 00000B12 895E02              <5>  mov word [bp+2],%2
  4801 00000B15 E86A00              <5>  call proc_flroundtoint32
  4802 00000B18 54                  <5>  push sp
  4803 00000B19 5D                  <5>  pop bp
  4804 00000B1A 8B4604              <5>  mov word %3,[bp+4]
  4805 00000B1D 8B5E06              <5>  mov word %4,[bp+6]
  4806                              <5>  stkclose 0x08
  4807 00000B20 83C408              <6>  add word sp, %1
  4808                              <4> 	__int32to16 ax, bx, cx
  4809                              <5>  stkopen 0x06
  4810 00000B23 83EC06              <6>  sub word sp, %1
  4811 00000B26 54                  <6>  push sp
  4812 00000B27 5D                  <6>  pop bp
  4813 00000B28 894600              <5>  mov word [bp+0], %1
  4814 00000B2B 895E02              <5>  mov word [bp+2], %2
  4815 00000B2E E857FA              <5>  call proc_int32to16
  4816 00000B31 54                  <5>  push sp
  4817 00000B32 5D                  <5>  pop bp
  4818 00000B33 8B4E04              <5>  mov word %3, [bp+4]
  4819                              <5>  stkclose 0x06
  4820 00000B36 83C406              <6>  add word sp, %1
  4821                              <4> 	
  4822 00000B39 89E0                <4> 	mov ax,sp
  4823 00000B3B 89C5                <4> 	mov bp,ax
  4824 00000B3D 894E06              <4> 	mov [bp+6],cx
  4825                              <4> 	
  4826 00000B40 C3                  <4> 	ret
  4827                              <4> 	
  4828                              <4> proc_int16tofl:
  4829 00000B41 89E0                <4> 	mov ax,sp
  4830 00000B43 89C5                <4> 	mov bp,ax
  4831                              <4> 	
  4832 00000B45 8B4602              <4> 	mov ax,[bp+2]
  4833                              <4> 	__int16to32 ax, ax, bx
  4834                              <5>  stkopen 0x06
  4835 00000B48 83EC06              <6>  sub word sp, %1
  4836 00000B4B 54                  <6>  push sp
  4837 00000B4C 5D                  <6>  pop bp
  4838 00000B4D 894600              <5>  mov word [bp+0],%1
  4839 00000B50 E816FA              <5>  call proc_int16to32
  4840 00000B53 54                  <5>  push sp
  4841 00000B54 5D                  <5>  pop bp
  4842 00000B55 8B4602              <5>  mov word %2, [bp+2]
  4843 00000B58 8B5E04              <5>  mov word %3, [bp+4]
  4844                              <5>  stkclose 0x06
  4845 00000B5B 83C406              <6>  add word sp, %1
  4846                              <4> 	__int32tofl ax, bx, cx, dx
  4847                              <5>  stkopen 0x08
  4848 00000B5E 83EC08              <6>  sub word sp, %1
  4849 00000B61 54                  <6>  push sp
  4850 00000B62 5D                  <6>  pop bp
  4851 00000B63 894600              <5>  mov word [bp+0],%1
  4852 00000B66 895E02              <5>  mov word [bp+2],%2
  4853 00000B69 E87501              <5>  call proc_int32tofl
  4854 00000B6C 54                  <5>  push sp
  4855 00000B6D 5D                  <5>  pop bp
  4856 00000B6E 8B4E04              <5>  mov word %3,[bp+4]
  4857 00000B71 8B5606              <5>  mov word %4,[bp+6]
  4858                              <5>  stkclose 0x08
  4859 00000B74 83C408              <6>  add word sp, %1
  4860                              <4> 	
  4861 00000B77 89E0                <4> 	mov ax,sp
  4862 00000B79 89C5                <4> 	mov bp,ax
  4863 00000B7B 894E04              <4> 	mov [bp+4],cx
  4864 00000B7E 895606              <4> 	mov [bp+6],dx
  4865                              <4> 
  4866 00000B81 C3                  <4> 	ret
  4867                              <4> 
  4868                              <4> proc_flroundtoint32:
  4869 00000B82 89E0                <4> 	mov ax,sp
  4870 00000B84 89C5                <4> 	mov bp,ax
  4871                              <4> 
  4872 00000B86 8B4602              <4> 	mov ax,[bp+2]
  4873 00000B89 8B5E04              <4> 	mov bx,[bp+4]
  4874                              <4> 		
  4875 00000B8C 25FF7F              <4> 	and ax,0x7FFF	
  4876 00000B8F 09D8                <4> 	or ax,bx
  4877 00000B91 83F800              <4> 	cmp ax,0
  4878 00000B94 7532                <4> 	jnz .continue
  4879                              <4> 	.zero:
  4880 00000B96 C746060000          <4> 		mov word [bp+6],0
  4881 00000B9B C746080000          <4> 		mov word [bp+8],0
  4882 00000BA0 E9B900              <4> 		jmp .done
  4883                              <4> 	.one:
  4884 00000BA3 8B4602              <4> 		mov ax,[bp+2]
  4885 00000BA6 250080              <4> 		and ax,0x8000
  4886 00000BA9 83F800              <4> 		cmp ax,0
  4887 00000BAC 750D                <4> 		jnz .oneneg
  4888 00000BAE C746060000          <4> 			mov word [bp+6], 0
  4889 00000BB3 C746080100          <4> 			mov word [bp+8], 1
  4890 00000BB8 E9A100              <4> 			jmp .done
  4891                              <4> 		.oneneg:
  4892 00000BBB C74606FFFF          <4> 			mov word [bp+6], 0xFFFF
  4893 00000BC0 C74608FFFF          <4> 			mov word [bp+8], 0xFFFF					
  4894 00000BC5 E99400              <4> 			jmp .done
  4895                              <4> 	.continue:
  4896                              <4> 	
  4897 00000BC8 8B4E02              <4> 	mov cx,[bp+2]
  4898 00000BCB D1E1                <4> 	shl cx,1
  4899 00000BCD 80ED7F              <4> 	sub ch,0x7F
  4900 00000BD0 80FDFF              <4> 	cmp ch,0xFF
  4901 00000BD3 7CC1                <4> 	jl .zero
  4902 00000BD5 74CC                <4> 	je .one	
  4903                              <4> 		
  4904 00000BD7 B117                <4> 	mov cl,23	
  4905 00000BD9 38CD                <4> 	cmp ch,cl
  4906 00000BDB 7302                <4> 	jae .endexp
  4907 00000BDD 28E9                <4> 		sub cl,ch
  4908                              <4> 	.endexp:
  4909                              <4> 	
  4910 00000BDF 8B4602              <4> 	mov ax,[bp+2]
  4911 00000BE2 83E07F              <4> 	and ax,0x007F
  4912 00000BE5 0D8000              <4> 	or ax,0x0080
  4913                              <4> 	
  4914 00000BE8 8B5E04              <4> 	mov bx,[bp+4]		
  4915                              <4> 	
  4916 00000BEB FEC9                <4> 	dec cl
  4917 00000BED 55                  <4> 	push bp	
  4918                              <4> 	__shr32 ax, bx, cl
  4919                              <5>  stkopen 5
  4920 00000BEE 83EC05              <6>  sub word sp, %1
  4921 00000BF1 54                  <6>  push sp
  4922 00000BF2 5D                  <6>  pop bp
  4923 00000BF3 894600              <5>  mov word [bp+0], %1
  4924 00000BF6 895E02              <5>  mov word [bp+2], %2
  4925 00000BF9 884E04              <5>  mov byte [bp+4], %3
  4926 00000BFC E8CCFC              <5>  call proc_shr32
  4927 00000BFF 54                  <5>  push sp
  4928 00000C00 5D                  <5>  pop bp
  4929 00000C01 8B4600              <5>  mov word %1, [bp+0]
  4930 00000C04 8B5E02              <5>  mov word %2, [bp+2]
  4931                              <5>  stkclose 5
  4932 00000C07 83C405              <6>  add word sp, %1
  4933 00000C0A 5D                  <4> 	pop bp
  4934 00000C0B 53                  <4> 	push bx
  4935 00000C0C 55                  <4> 	push bp
  4936                              <4> 	__shr32 ax, bx, 1
  4937                              <5>  stkopen 5
  4938 00000C0D 83EC05              <6>  sub word sp, %1
  4939 00000C10 54                  <6>  push sp
  4940 00000C11 5D                  <6>  pop bp
  4941 00000C12 894600              <5>  mov word [bp+0], %1
  4942 00000C15 895E02              <5>  mov word [bp+2], %2
  4943 00000C18 C6460401            <5>  mov byte [bp+4], %3
  4944 00000C1C E8ACFC              <5>  call proc_shr32
  4945 00000C1F 54                  <5>  push sp
  4946 00000C20 5D                  <5>  pop bp
  4947 00000C21 8B4600              <5>  mov word %1, [bp+0]
  4948 00000C24 8B5E02              <5>  mov word %2, [bp+2]
  4949                              <5>  stkclose 5
  4950 00000C27 83C405              <6>  add word sp, %1
  4951 00000C2A 5D                  <4> 	pop bp			
  4952                              <4> 	
  4953 00000C2B 5A                  <4> 	pop dx
  4954 00000C2C 83E201              <4> 	and dx,0x0001
  4955 00000C2F 83FA00              <4> 	cmp dx,0
  4956 00000C32 7404                <4> 	jz .rounded
  4957 00000C34 43                  <4> 		inc bx
  4958 00000C35 83D000              <4> 		adc ax,0
  4959                              <4> 	.rounded:
  4960                              <4> 				
  4961 00000C38 8B4E02              <4> 	mov cx,[bp+2]
  4962 00000C3B 81E10080            <4> 	and cx,0x8000
  4963 00000C3F 83F900              <4> 	cmp cx,0
  4964 00000C42 7412                <4> 	jz .endneg			
  4965 00000C44 B9FFFF              <4> 		mov cx,0xFFFF
  4966 00000C47 BAFFFF              <4> 		mov dx,0xFFFF
  4967 00000C4A 29DA                <4> 		sub dx,bx
  4968 00000C4C 19C1                <4> 		sbb cx,ax						
  4969 00000C4E 42                  <4> 		inc dx
  4970 00000C4F 83D100              <4> 		adc cx,0
  4971 00000C52 89C8                <4> 		mov ax,cx
  4972 00000C54 89D3                <4> 		mov bx,dx		
  4973                              <4> 	.endneg:			
  4974                              <4> 		 
  4975 00000C56 894606              <4> 	mov [bp+6],ax
  4976 00000C59 895E08              <4> 	mov [bp+8],bx
  4977                              <4> 	
  4978                              <4> 	.done:
  4979                              <4> 	
  4980 00000C5C C3                  <4> 	ret
  4981                              <4> 	
  4982                              <4> proc_fltoint32:
  4983 00000C5D 89E0                <4> 	mov ax,sp
  4984 00000C5F 89C5                <4> 	mov bp,ax
  4985                              <4> 
  4986 00000C61 8B4602              <4> 	mov ax,[bp+2]
  4987 00000C64 8B5E04              <4> 	mov bx,[bp+4]
  4988                              <4> 		
  4989 00000C67 25FF7F              <4> 	and ax,0x7FFF	
  4990 00000C6A 09D8                <4> 	or ax,bx
  4991 00000C6C 83F800              <4> 	cmp ax,0
  4992 00000C6F 750C                <4> 	jnz .continue
  4993                              <4> 	.zero:
  4994 00000C71 C746060000          <4> 		mov word [bp+6],0
  4995 00000C76 C746080000          <4> 		mov word [bp+8],0
  4996 00000C7B EB63                <4> 		jmp .done
  4997                              <4> 	.continue:
  4998                              <4> 	
  4999 00000C7D 8B4E02              <4> 	mov cx,[bp+2]
  5000 00000C80 D1E1                <4> 	shl cx,1
  5001 00000C82 80ED7F              <4> 	sub ch,0x7F
  5002 00000C85 80FD00              <4> 	cmp ch,0
  5003 00000C88 7CE7                <4> 	jl .zero
  5004                              <4> 		
  5005 00000C8A B117                <4> 	mov cl,23	
  5006 00000C8C 38CD                <4> 	cmp ch,cl
  5007 00000C8E 7302                <4> 	jae .endexp
  5008 00000C90 28E9                <4> 		sub cl,ch
  5009                              <4> 	.endexp:
  5010                              <4> 	
  5011 00000C92 8B4602              <4> 	mov ax,[bp+2]
  5012 00000C95 83E07F              <4> 	and ax,0x007F
  5013 00000C98 0D8000              <4> 	or ax,0x0080
  5014                              <4> 	
  5015 00000C9B 8B5E04              <4> 	mov bx,[bp+4]		
  5016                              <4> 	
  5017 00000C9E 55                  <4> 	push bp	
  5018                              <4> 	__shr32 ax, bx, cl
  5019                              <5>  stkopen 5
  5020 00000C9F 83EC05              <6>  sub word sp, %1
  5021 00000CA2 54                  <6>  push sp
  5022 00000CA3 5D                  <6>  pop bp
  5023 00000CA4 894600              <5>  mov word [bp+0], %1
  5024 00000CA7 895E02              <5>  mov word [bp+2], %2
  5025 00000CAA 884E04              <5>  mov byte [bp+4], %3
  5026 00000CAD E81BFC              <5>  call proc_shr32
  5027 00000CB0 54                  <5>  push sp
  5028 00000CB1 5D                  <5>  pop bp
  5029 00000CB2 8B4600              <5>  mov word %1, [bp+0]
  5030 00000CB5 8B5E02              <5>  mov word %2, [bp+2]
  5031                              <5>  stkclose 5
  5032 00000CB8 83C405              <6>  add word sp, %1
  5033 00000CBB 5D                  <4> 	pop bp		
  5034                              <4> 					
  5035 00000CBC 8B4E02              <4> 	mov cx,[bp+2]
  5036 00000CBF 81E10080            <4> 	and cx,0x8000
  5037 00000CC3 83F900              <4> 	cmp cx,0
  5038 00000CC6 7412                <4> 	jz .endneg			
  5039 00000CC8 B9FFFF              <4> 		mov cx,0xFFFF
  5040 00000CCB BAFFFF              <4> 		mov dx,0xFFFF
  5041 00000CCE 29DA                <4> 		sub dx,bx
  5042 00000CD0 19C1                <4> 		sbb cx,ax						
  5043 00000CD2 42                  <4> 		inc dx
  5044 00000CD3 83D100              <4> 		adc cx,0
  5045 00000CD6 89C8                <4> 		mov ax,cx
  5046 00000CD8 89D3                <4> 		mov bx,dx		
  5047                              <4> 	.endneg:			
  5048                              <4> 		 
  5049 00000CDA 894606              <4> 	mov [bp+6],ax
  5050 00000CDD 895E08              <4> 	mov [bp+8],bx
  5051                              <4> 	
  5052                              <4> 	.done:
  5053                              <4> 	
  5054 00000CE0 C3                  <4> 	ret
  5055                              <4> 			
  5056                              <4> proc_int32tofl:
  5057 00000CE1 89E0                <4> 	mov ax,sp
  5058 00000CE3 89C5                <4> 	mov bp,ax
  5059                              <4> 	
  5060 00000CE5 8B4602              <4> 	mov ax,[bp+2]
  5061 00000CE8 8B5E04              <4> 	mov bx,[bp+4]
  5062                              <4> 	
  5063 00000CEB 89C1                <4> 	mov cx,ax
  5064 00000CED 81E1FF7F            <4> 	and cx,0x7FFF
  5065 00000CF1 09D9                <4> 	or cx,bx
  5066 00000CF3 83F900              <4> 	cmp cx,0
  5067 00000CF6 7511                <4> 	jnz .continue
  5068 00000CF8 8B4602              <4> 		mov ax,[bp+2]
  5069 00000CFB 250080              <4> 		and ax,0x8000
  5070 00000CFE 894606              <4> 		mov word [bp+6],ax
  5071 00000D01 C746080000          <4> 		mov word [bp+8],0
  5072 00000D06 E9AE00              <4> 		jmp .done
  5073                              <4> 	.continue:
  5074                              <4> 		
  5075 00000D09 89C1                <4> 	mov cx,ax
  5076 00000D0B 81E10080            <4> 	and cx,0x8000
  5077 00000D0F 83F900              <4> 	cmp cx,0
  5078 00000D12 7412                <4> 	jz .endneg
  5079 00000D14 B9FFFF              <4> 		mov cx,0xFFFF
  5080 00000D17 BAFFFF              <4> 		mov dx,0xFFFF
  5081 00000D1A 29DA                <4> 		sub dx,bx
  5082 00000D1C 19C1                <4> 		sbb cx,ax
  5083 00000D1E 42                  <4> 		inc dx
  5084 00000D1F 83D100              <4> 		adc cx,0
  5085 00000D22 89C8                <4> 		mov ax,cx
  5086 00000D24 89D3                <4> 		mov bx,dx
  5087                              <4> 	.endneg:
  5088                              <4> 	
  5089 00000D26 83E07F              <4> 	and ax,0x007F	
  5090                              <4> 	
  5091 00000D29 894606              <4> 	mov [bp+6],ax
  5092 00000D2C 895E08              <4> 	mov [bp+8],bx	
  5093                              <4> 		
  5094                              <4> 	__lzbitcount32 ax, bx, ch		
  5095 00000D2F 53                  <5>  push %2
  5096                              <5>  __lzbitcount16 %1, cl
  5097                              <6>  stkopen 3
  5098 00000D30 83EC03              <7>  sub word sp, %1
  5099 00000D33 54                  <7>  push sp
  5100 00000D34 5D                  <7>  pop bp
  5101 00000D35 894600              <6>  mov word [bp+0], %1
  5102 00000D38 E815FC              <6>  call proc__lzbitcount16
  5103 00000D3B 54                  <6>  push sp
  5104 00000D3C 5D                  <6>  pop bp
  5105 00000D3D 8A4E02              <6>  mov byte %2, [bp+2]
  5106                              <6>  stkclose 3
  5107 00000D40 83C403              <7>  add word sp, %1
  5108 00000D43 58                  <5>  pop ax
  5109 00000D44 80F910              <5>  cmp cl,16
  5110 00000D47 7217                <5>  jb .end
  5111 00000D49 51                  <5>  push cx
  5112                              <5>  __lzbitcount16 ax, al
  5113                              <6>  stkopen 3
  5114 00000D4A 83EC03              <7>  sub word sp, %1
  5115 00000D4D 54                  <7>  push sp
  5116 00000D4E 5D                  <7>  pop bp
  5117 00000D4F 894600              <6>  mov word [bp+0], %1
  5118 00000D52 E8FBFB              <6>  call proc__lzbitcount16
  5119 00000D55 54                  <6>  push sp
  5120 00000D56 5D                  <6>  pop bp
  5121 00000D57 8A4602              <6>  mov byte %2, [bp+2]
  5122                              <6>  stkclose 3
  5123 00000D5A 83C403              <7>  add word sp, %1
  5124 00000D5D 59                  <5>  pop cx
  5125 00000D5E 00C1                <5>  add cl,al
  5126                              <5>  .end:
  5127 00000D60 88CD                <5>  mov byte %3, cl
  5128 00000D62 B120                <4> 	mov cl,32
  5129 00000D64 28E9                <4> 	sub cl,ch
  5130                              <4> 	
  5131 00000D66 80F918              <4> 	cmp cl,24
  5132 00000D69 732C                <4> 	jae .endmantissa
  5133                              <4> 	
  5134 00000D6B B218                <4> 	mov dl,24
  5135 00000D6D 28CA                <4> 	sub dl,cl				
  5136                              <4> 	
  5137 00000D6F 89E0                <4> 	mov ax,sp
  5138 00000D71 89C5                <4> 	mov bp,ax
  5139 00000D73 8B4606              <4> 	mov ax,[bp+6]
  5140 00000D76 8B5E08              <4> 	mov bx,[bp+8]
  5141                              <4> 	
  5142 00000D79 51                  <4> 	push cx	
  5143                              <4> 	__shl32 ax, bx, dl	
  5144                              <5>  stkopen 5
  5145 00000D7A 83EC05              <6>  sub word sp, %1
  5146 00000D7D 54                  <6>  push sp
  5147 00000D7E 5D                  <6>  pop bp
  5148 00000D7F 894600              <5>  mov word [bp+0], %1
  5149 00000D82 895E02              <5>  mov word [bp+2], %2
  5150 00000D85 885604              <5>  mov byte [bp+4], %3
  5151 00000D88 E8F9FA              <5>  call proc_shl32
  5152 00000D8B 54                  <5>  push sp
  5153 00000D8C 5D                  <5>  pop bp
  5154 00000D8D 8B4600              <5>  mov word %1, [bp+0]
  5155 00000D90 8B5E02              <5>  mov word %2, [bp+2]
  5156                              <5>  stkclose 5
  5157 00000D93 83C405              <6>  add word sp, %1
  5158 00000D96 59                  <4> 	pop cx
  5159                              <4> 	
  5160                              <4> 	.endmantissa:
  5161                              <4> 	
  5162 00000D97 83E07F              <4> 	and ax,0x007F
  5163                              <4> 		
  5164 00000D9A 80C17E              <4> 	add cl,0x7E
  5165 00000D9D C1E108              <4> 	shl cx,8
  5166 00000DA0 D1E9                <4> 	shr cx,1
  5167 00000DA2 01C8                <4> 	add ax,cx
  5168                              <4> 	
  5169 00000DA4 89E1                <4> 	mov cx,sp
  5170 00000DA6 89CD                <4> 	mov bp,cx
  5171                              <4> 	
  5172 00000DA8 8B4E02              <4> 	mov cx,[bp+2]
  5173 00000DAB 81E10080            <4> 	and cx,0x8000	
  5174 00000DAF 01C8                <4> 	add ax,cx
  5175                              <4> 		
  5176 00000DB1 894606              <4> 	mov [bp+6],ax
  5177 00000DB4 895E08              <4> 	mov [bp+8],bx
  5178                              <4> 	
  5179                              <4> 	.done:		
  5180                              <4> 	
  5181 00000DB7 C3                  <4> 	ret
  5182                              <4> 	
  5183                              <4> proc_flcmp:
  5184 00000DB8 89E0                <4> 	mov ax,sp
  5185 00000DBA 89C5                <4> 	mov bp,ax		
  5186                              <4> 	
  5187 00000DBC 8B4602              <4> 	mov ax,[bp+2]
  5188 00000DBF 8B5E06              <4> 	mov bx,[bp+6]
  5189 00000DC2 55                  <4> 	push bp
  5190                              <4> 	__cmp_validate ax, bx, cl, dl
  5191                              <5>  stkopen 0x06
  5192 00000DC3 83EC06              <6>  sub word sp, %1
  5193 00000DC6 54                  <6>  push sp
  5194 00000DC7 5D                  <6>  pop bp
  5195 00000DC8 894600              <5>  mov word [bp+0],%1
  5196 00000DCB 895E02              <5>  mov word [bp+2],%2
  5197 00000DCE E85C09              <5>  call proc__cmp_validate
  5198 00000DD1 54                  <5>  push sp
  5199 00000DD2 5D                  <5>  pop bp
  5200 00000DD3 8A4E04              <5>  mov byte %3, [bp+4]
  5201 00000DD6 8A5605              <5>  mov byte %4, [bp+5]
  5202                              <5>  stkclose 0x06
  5203 00000DD9 83C406              <6>  add word sp, %1
  5204 00000DDC 5D                  <4> 	pop bp
  5205 00000DDD 80FA00              <4> 	cmp dl,0
  5206 00000DE0 7505                <4> 	jnz .continue
  5207 00000DE2 884E0A              <4> 		mov byte [bp+0x0A], cl
  5208 00000DE5 EB5E                <4> 		jmp .done		
  5209                              <4> 	.continue:
  5210                              <4> 			
  5211 00000DE7 8B4602              <4> 	mov ax,[bp+2]
  5212 00000DEA 8B5E06              <4> 	mov bx,[bp+6]
  5213 00000DED 250080              <4> 	and ax,0x8000
  5214 00000DF0 81E30080            <4> 	and bx,0x8000	
  5215 00000DF4 39D8                <4> 	cmp ax,bx
  5216 00000DF6 723C                <4> 	jb .above
  5217 00000DF8 773E                <4> 	ja .below
  5218                              <4> 	
  5219 00000DFA 8B4602              <4> 	mov ax,[bp+2]
  5220 00000DFD 8B5E06              <4> 	mov bx,[bp+6]
  5221 00000E00 D1E0                <4> 	shl ax,1
  5222 00000E02 D1E3                <4> 	shl bx,1
  5223 00000E04 38FC                <4> 	cmp ah,bh
  5224 00000E06 772C                <4> 	ja .above
  5225 00000E08 722E                <4> 	jb .below
  5226                              <4> 	
  5227 00000E0A 8B4602              <4> 	mov ax,[bp+2]
  5228 00000E0D 8B5E04              <4> 	mov bx,[bp+4]
  5229 00000E10 8B4E06              <4> 	mov cx,[bp+6]
  5230 00000E13 8B5608              <4> 	mov dx,[bp+8]
  5231                              <4> 	
  5232                              <4> 	__cmp32 ax, bx, cx, dx, cl
  5233                              <5>  stkopen 9
  5234 00000E16 83EC09              <6>  sub word sp, %1
  5235 00000E19 54                  <6>  push sp
  5236 00000E1A 5D                  <6>  pop bp
  5237 00000E1B 894600              <5>  mov word [bp+0], %1
  5238 00000E1E 895E02              <5>  mov word [bp+2], %2
  5239 00000E21 894E04              <5>  mov word [bp+4], %3
  5240 00000E24 895606              <5>  mov word [bp+6], %4
  5241 00000E27 E82FFA              <5>  call proc_cmp32
  5242 00000E2A 54                  <5>  push sp
  5243 00000E2B 5D                  <5>  pop bp
  5244 00000E2C 8A4E08              <5>  mov byte %5, [bp+8]
  5245                              <5>  stkclose 9
  5246 00000E2F 83C409              <6>  add word sp, %1
  5247 00000E32 EB0A                <4> 	jmp .endcmp
  5248                              <4> 		
  5249                              <4> 	.above:
  5250 00000E34 B101                <4> 		mov cl, 1
  5251 00000E36 EB06                <4> 		jmp .endcmp
  5252                              <4> 	.below:
  5253 00000E38 B1FF                <4> 		mov cl, -1
  5254 00000E3A EB02                <4> 		jmp .endcmp
  5255                              <4> 	.equal:	
  5256 00000E3C B100                <4> 		mov cl, 0	
  5257                              <4> 	.endcmp:
  5258                              <4> 	
  5259 00000E3E 89E0                <4> 	mov ax,sp
  5260 00000E40 89C5                <4> 	mov bp,ax
  5261 00000E42 884E0A              <4> 	mov byte [bp+0x0A], cl
  5262                              <4> 	
  5263                              <4> 	.done:
  5264                              <4> 					
  5265 00000E45 C3                  <4> 	ret
  5266                              <4> 
  5267                              <4> proc_flshl:
  5268 00000E46 89E0                <4> 	mov ax,sp
  5269 00000E48 89C5                <4> 	mov bp,ax
  5270                              <4> 	
  5271 00000E4A 8B4602              <4> 	mov ax,[bp+2]
  5272 00000E4D 25807F              <4> 	and ax,0x7F80
  5273 00000E50 D1E0                <4> 	shl ax,1
  5274 00000E52 026604              <4> 	add ah, [bp+4]	
  5275 00000E55 D1E8                <4> 	shr ax,1
  5276                              <4> 	
  5277 00000E57 8B5E02              <4> 	mov bx,[bp+2]
  5278 00000E5A 81E37F80            <4> 	and bx,0x807F
  5279 00000E5E 01C3                <4> 	add bx,ax
  5280                              <4> 	
  5281 00000E60 895E02              <4> 	mov [bp+2],bx		
  5282                              <4> 	
  5283 00000E63 C3                  <4> 	ret
  5284                              <4> 
  5285                              <4> proc_flshr:
  5286 00000E64 89E0                <4> 	mov ax,sp
  5287 00000E66 89C5                <4> 	mov bp,ax
  5288                              <4> 	
  5289 00000E68 8B4602              <4> 	mov ax,[bp+2]
  5290 00000E6B 25807F              <4> 	and ax,0x7F80
  5291 00000E6E D1E0                <4> 	shl ax,1
  5292 00000E70 2A6604              <4> 	sub ah, [bp+4]	
  5293 00000E73 D1E8                <4> 	shr ax,1
  5294                              <4> 	
  5295 00000E75 8B5E02              <4> 	mov bx,[bp+2]
  5296 00000E78 81E37F80            <4> 	and bx,0x807F
  5297 00000E7C 01C3                <4> 	add bx,ax
  5298                              <4> 	
  5299 00000E7E 895E02              <4> 	mov [bp+2],bx	
  5300                              <4> 	
  5301 00000E81 C3                  <4> 	ret
  5302                              <4> 
  5303                              <4> proc_fldiv:
  5304 00000E82 89E0                <4> 	mov ax,sp
  5305 00000E84 89C5                <4> 	mov bp,ax
  5306                              <4> 				
  5307                              <4> 	; sinal
  5308                              <4> 	
  5309 00000E86 8B4602              <4> 	mov ax,[bp+2]
  5310 00000E89 8B5E06              <4> 	mov bx,[bp+6]
  5311 00000E8C 250080              <4> 	and ax,0x8000
  5312 00000E8F 81E30080            <4> 	and bx,0x8000
  5313 00000E93 31D8                <4> 	xor ax,bx
  5314 00000E95 89460A              <4> 	mov word [bp+0x0A],ax
  5315                              <4> 		
  5316                              <4> 	; sinal calculado e setado
  5317                              <4> 
  5318                              <4> 	; valores especiais
  5319                              <4> 	
  5320 00000E98 8B4602              <4> 	mov ax,[bp+2]
  5321 00000E9B 8B5E04              <4> 	mov bx,[bp+4]
  5322 00000E9E 8B4E06              <4> 	mov cx,[bp+6]
  5323 00000EA1 8B5608              <4> 	mov dx,[bp+8]
  5324                              <4> 	__validate ax, bx, cx, dx, ax, bx, cl
  5325                              <5>  stkopen 0x0D
  5326 00000EA4 83EC0D              <6>  sub word sp, %1
  5327 00000EA7 54                  <6>  push sp
  5328 00000EA8 5D                  <6>  pop bp
  5329 00000EA9 894600              <5>  mov word [bp+0],%1
  5330 00000EAC 895E02              <5>  mov word [bp+2],%2
  5331 00000EAF 894E04              <5>  mov word [bp+4],%3
  5332 00000EB2 895606              <5>  mov word [bp+6],%4
  5333 00000EB5 E82507              <5>  call proc__validate
  5334 00000EB8 54                  <5>  push sp
  5335 00000EB9 5D                  <5>  pop bp
  5336 00000EBA 8B4608              <5>  mov word %5,[bp+8]
  5337 00000EBD 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5338 00000EC0 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  5339                              <5>  stkclose 0x0D
  5340 00000EC3 83C40D              <6>  add word sp, %1
  5341 00000EC6 80F900              <4> 	cmp cl,0
  5342 00000EC9 750D                <4> 	jnz .continue
  5343 00000ECB 89E2                <4> 		mov dx,sp
  5344 00000ECD 89D5                <4> 		mov bp,dx
  5345 00000ECF 01460A              <4> 		add word [bp+0x0A],ax
  5346 00000ED2 895E0C              <4> 		mov word [bp+0x0C],bx						
  5347 00000ED5 E9C800              <4> 		jmp .done	
  5348                              <4> 	.continue:
  5349                              <4> 	
  5350 00000ED8 89E0                <4> 	mov ax,sp
  5351 00000EDA 89C5                <4> 	mov bp,ax
  5352 00000EDC 8B4602              <4> 	mov ax,[bp+2]
  5353 00000EDF 8B5E04              <4> 	mov bx,[bp+4]
  5354 00000EE2 8B4E06              <4> 	mov cx,[bp+6]
  5355 00000EE5 8B5608              <4> 	mov dx,[bp+8]
  5356                              <4> 	__div_validate ax, bx, cx, dx, ax, bx, cl
  5357                              <5>  stkopen 0x0D
  5358 00000EE8 83EC0D              <6>  sub word sp, %1
  5359 00000EEB 54                  <6>  push sp
  5360 00000EEC 5D                  <6>  pop bp
  5361 00000EED 894600              <5>  mov word [bp+0],%1
  5362 00000EF0 895E02              <5>  mov word [bp+2],%2
  5363 00000EF3 894E04              <5>  mov word [bp+4],%3
  5364 00000EF6 895606              <5>  mov word [bp+6],%4
  5365 00000EF9 E84807              <5>  call proc__div_validate
  5366 00000EFC 54                  <5>  push sp
  5367 00000EFD 5D                  <5>  pop bp
  5368 00000EFE 8B4608              <5>  mov word %5,[bp+8]
  5369 00000F01 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5370 00000F04 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  5371                              <5>  stkclose 0x0D
  5372 00000F07 83C40D              <6>  add word sp, %1
  5373 00000F0A 80F900              <4> 	cmp cl,0
  5374 00000F0D 750D                <4> 	jnz .continue2
  5375 00000F0F 89E2                <4> 		mov dx,sp
  5376 00000F11 89D5                <4> 		mov bp,dx
  5377 00000F13 01460A              <4> 		add word [bp+0x0A],ax
  5378 00000F16 895E0C              <4> 		mov word [bp+0x0C],bx				
  5379 00000F19 E98400              <4> 		jmp .done	
  5380                              <4> 	.continue2:
  5381                              <4> 	; valores especiais tratados
  5382                              <4> 			
  5383                              <4> 	; expoente parcial
  5384                              <4> 
  5385 00000F1C 89E0                <4> 	mov ax,sp
  5386 00000F1E 89C5                <4> 	mov bp,ax
  5387 00000F20 8B4602              <4> 	mov ax,[bp+2]
  5388 00000F23 8B5E06              <4> 	mov bx,[bp+6]
  5389 00000F26 25807F              <4> 	and ax,0x7F80
  5390 00000F29 81E3807F            <4> 	and bx,0x7F80
  5391 00000F2D D1E0                <4> 	shl ax,1
  5392 00000F2F D1E3                <4> 	shl bx,1		
  5393                              <4> 			
  5394 00000F31 28FC                <4> 	sub ah,bh		
  5395 00000F33 80C47F              <4> 	add ah,0x7F
  5396                              <4> 	
  5397 00000F36 50                  <4> 	push ax
  5398                              <4> 		
  5399                              <4> 	; expoente parcial calculado
  5400                              <4> 	
  5401                              <4> 	; mantissa
  5402                              <4> 
  5403 00000F37 8B4602              <4> 	mov ax,[bp+2]
  5404 00000F3A 8B5E04              <4> 	mov bx,[bp+4]
  5405 00000F3D 8B4E06              <4> 	mov cx,[bp+6]
  5406 00000F40 8B5608              <4> 	mov dx,[bp+8]
  5407 00000F43 83E07F              <4> 	and ax,0x007F
  5408 00000F46 83E17F              <4> 	and cx,0x007F
  5409 00000F49 0D8000              <4> 	or ax,0x0080
  5410 00000F4C 81C98000            <4> 	or cx,0x0080
  5411                              <4> 	
  5412                              <4> 	__fldiv32 ax, bx, cx, dx, cx, dx
  5413                              <5>  stkopen 0x11
  5414 00000F50 83EC11              <6>  sub word sp, %1
  5415 00000F53 54                  <6>  push sp
  5416 00000F54 5D                  <6>  pop bp
  5417 00000F55 894600              <5>  mov word [bp+0],%1
  5418 00000F58 895E02              <5>  mov word [bp+2],%2
  5419 00000F5B 894E04              <5>  mov word [bp+4],%3
  5420 00000F5E 895606              <5>  mov word [bp+6],%4
  5421 00000F61 E87505              <5>  call proc__fldiv32
  5422 00000F64 54                  <5>  push sp
  5423 00000F65 5D                  <5>  pop bp
  5424 00000F66 8B4E08              <5>  mov word %5,[bp+8]
  5425 00000F69 8B560A              <5>  mov word %6,[bp+0x0A]
  5426                              <5>  stkclose 0x11
  5427 00000F6C 83C411              <6>  add word sp, %1
  5428                              <4> 		
  5429 00000F6F 89E0                <4> 	mov ax,sp
  5430 00000F71 89C5                <4> 	mov bp,ax
  5431 00000F73 83C502              <4> 	add bp,2
  5432                              <4> 	
  5433 00000F76 034E0A              <4> 	add cx,[bp+0x0A]
  5434                              <4> 			
  5435 00000F79 58                  <4> 	pop ax	
  5436                              <4> 	__normalize cx, dx, ax
  5437                              <5>  stkopen 0x06
  5438 00000F7A 83EC06              <6>  sub word sp, %1
  5439 00000F7D 54                  <6>  push sp
  5440 00000F7E 5D                  <6>  pop bp
  5441 00000F7F 894E00              <5>  mov word [bp+0],%1
  5442 00000F82 895602              <5>  mov word [bp+2],%2
  5443 00000F85 894604              <5>  mov word [bp+4],%3
  5444 00000F88 E8B303              <5>  call proc__normalize
  5445 00000F8B 54                  <5>  push sp
  5446 00000F8C 5D                  <5>  pop bp
  5447 00000F8D 8B4E00              <5>  mov word %1,[bp+0]
  5448 00000F90 8B5602              <5>  mov word %2,[bp+2]
  5449                              <5>  stkclose 0x06
  5450 00000F93 83C406              <6>  add word sp, %1
  5451                              <4> 	
  5452 00000F96 89E0                <4> 	mov ax,sp
  5453 00000F98 89C5                <4> 	mov bp,ax
  5454 00000F9A 894E0A              <4> 	mov [bp+0x0A],cx
  5455 00000F9D 89560C              <4> 	mov [bp+0x0C],dx
  5456                              <4> 	
  5457                              <4> 	.done:
  5458                              <4> 			
  5459 00000FA0 C3                  <4> 	ret
  5460                              <4> 
  5461                              <4> proc_flmul:
  5462 00000FA1 89E0                <4> 	mov ax,sp
  5463 00000FA3 89C5                <4> 	mov bp,ax
  5464                              <4> 	
  5465                              <4> 	; sinal
  5466                              <4> 	
  5467 00000FA5 8B4602              <4> 	mov ax,[bp+2]
  5468 00000FA8 8B5E06              <4> 	mov bx,[bp+6]
  5469 00000FAB 250080              <4> 	and ax,0x8000
  5470 00000FAE 81E30080            <4> 	and bx,0x8000
  5471 00000FB2 31D8                <4> 	xor ax,bx
  5472 00000FB4 89460A              <4> 	mov word [bp+0x0A],ax
  5473                              <4> 	
  5474                              <4> 	; sinal calculado e setado
  5475                              <4> 
  5476                              <4> 	; valores especiais
  5477                              <4> 
  5478 00000FB7 8B4602              <4> 	mov ax,[bp+2]
  5479 00000FBA 8B5E04              <4> 	mov bx,[bp+4]
  5480 00000FBD 8B4E06              <4> 	mov cx,[bp+6]
  5481 00000FC0 8B5608              <4> 	mov dx,[bp+8]
  5482                              <4> 	__validate ax, bx, cx, dx, ax, bx, cl
  5483                              <5>  stkopen 0x0D
  5484 00000FC3 83EC0D              <6>  sub word sp, %1
  5485 00000FC6 54                  <6>  push sp
  5486 00000FC7 5D                  <6>  pop bp
  5487 00000FC8 894600              <5>  mov word [bp+0],%1
  5488 00000FCB 895E02              <5>  mov word [bp+2],%2
  5489 00000FCE 894E04              <5>  mov word [bp+4],%3
  5490 00000FD1 895606              <5>  mov word [bp+6],%4
  5491 00000FD4 E80606              <5>  call proc__validate
  5492 00000FD7 54                  <5>  push sp
  5493 00000FD8 5D                  <5>  pop bp
  5494 00000FD9 8B4608              <5>  mov word %5,[bp+8]
  5495 00000FDC 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5496 00000FDF 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  5497                              <5>  stkclose 0x0D
  5498 00000FE2 83C40D              <6>  add word sp, %1
  5499 00000FE5 80F900              <4> 	cmp cl,0
  5500 00000FE8 750D                <4> 	jnz .continue
  5501 00000FEA 89E2                <4> 		mov dx,sp
  5502 00000FEC 89D5                <4> 		mov bp,dx
  5503 00000FEE 01460A              <4> 		add word [bp+0x0A],ax
  5504 00000FF1 895E0C              <4> 		mov word [bp+0x0C],bx						
  5505 00000FF4 E95501              <4> 		jmp .done	
  5506                              <4> 	.continue:
  5507                              <4> 
  5508 00000FF7 89E0                <4> 	mov ax,sp
  5509 00000FF9 89C5                <4> 	mov bp,ax
  5510 00000FFB 8B4602              <4> 	mov ax,[bp+2]
  5511 00000FFE 8B4E06              <4> 	mov cx,[bp+6]
  5512                              <4> 	__mul_validate ax, cx, ax, bx, cl
  5513                              <5>  stkopen 0x09
  5514 00001001 83EC09              <6>  sub word sp, %1
  5515 00001004 54                  <6>  push sp
  5516 00001005 5D                  <6>  pop bp
  5517 00001006 894600              <5>  mov word [bp+0],%1
  5518 00001009 894E02              <5>  mov word [bp+2],%2
  5519 0000100C E88F06              <5>  call proc__mul_validate
  5520 0000100F 54                  <5>  push sp
  5521 00001010 5D                  <5>  pop bp
  5522 00001011 8B4604              <5>  mov word %3,[bp+4]
  5523 00001014 8B5E06              <5>  mov word %4,[bp+6]
  5524 00001017 8A4E08              <5>  mov byte %5,[bp+8]
  5525                              <5>  stkclose 0x09
  5526 0000101A 83C409              <6>  add word sp, %1
  5527 0000101D 80F900              <4> 	cmp cl,0
  5528 00001020 750D                <4> 	jnz .continue2
  5529 00001022 89E2                <4> 		mov dx,sp
  5530 00001024 89D5                <4> 		mov bp,dx
  5531 00001026 01460A              <4> 		add word [bp+0x0A],ax
  5532 00001029 895E0C              <4> 		mov word [bp+0x0C],bx				
  5533 0000102C E91D01              <4> 		jmp .done	
  5534                              <4> 	.continue2:
  5535                              <4> 	; valores especiais tratados
  5536                              <4> 		
  5537                              <4> 	; expoente parcial
  5538                              <4> 
  5539 0000102F 89E0                <4> 	mov ax,sp
  5540 00001031 89C5                <4> 	mov bp,ax
  5541 00001033 8B4602              <4> 	mov ax,[bp+2]
  5542 00001036 8B5E06              <4> 	mov bx,[bp+6]
  5543 00001039 25807F              <4> 	and ax,0x7F80
  5544 0000103C 81E3807F            <4> 	and bx,0x7F80
  5545 00001040 D1E0                <4> 	shl ax,1
  5546 00001042 D1E3                <4> 	shl bx,1		
  5547                              <4> 			
  5548 00001044 80EC7F              <4> 	sub ah,0x7F
  5549 00001047 80EF7F              <4> 	sub bh,0x7F
  5550                              <4> 				
  5551 0000104A 00FC                <4> 	add ah,bh
  5552 0000104C 80C47F              <4> 	add ah,0x7F
  5553                              <4> 	
  5554 0000104F 50                  <4> 	push ax
  5555                              <4> 	
  5556                              <4> 	; expoente parcial calculado	
  5557                              <4> 	
  5558                              <4> 	; mantissa
  5559                              <4> 	
  5560 00001050 8B4602              <4> 	mov ax,[bp+2]
  5561 00001053 8B5E04              <4> 	mov bx,[bp+4]
  5562 00001056 8B4E06              <4> 	mov cx,[bp+6]
  5563 00001059 8B5608              <4> 	mov dx,[bp+8]	
  5564                              <4> 	
  5565 0000105C 83E07F              <4> 	and ax, 0x007F
  5566 0000105F 83E17F              <4> 	and cx, 0x007F
  5567 00001062 0D8000              <4> 	or ax, 0x0080
  5568 00001065 81C98000            <4> 	or cx, 0x0080
  5569                              <4> 		
  5570                              <4> 	__mul32_64 ax, bx, cx, dx, ax, bx, cx, dx
  5571                              <5>  stkopen 0x10
  5572 00001069 83EC10              <6>  sub word sp, %1
  5573 0000106C 54                  <6>  push sp
  5574 0000106D 5D                  <6>  pop bp
  5575 0000106E 894600              <5>  mov word [bp+0],%1
  5576 00001071 895E02              <5>  mov word [bp+2],%2
  5577 00001074 894E04              <5>  mov word [bp+4],%3
  5578 00001077 895606              <5>  mov word [bp+6],%4
  5579 0000107A E81104              <5>  call proc__mul32_64
  5580 0000107D 54                  <5>  push sp
  5581 0000107E 5D                  <5>  pop bp
  5582 0000107F 8B4608              <5>  mov word %5,[bp+8]
  5583 00001082 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5584 00001085 8B4E0C              <5>  mov word %7,[bp+0x0C]
  5585 00001088 8B560E              <5>  mov word %8,[bp+0x0E]
  5586                              <5>  stkclose 0x10
  5587 0000108B 83C410              <6>  add word sp, %1
  5588                              <4> 	
  5589 0000108E 51                  <4> 	push cx
  5590                              <4> 	__shl32 ax, bx, 8
  5591                              <5>  stkopen 5
  5592 0000108F 83EC05              <6>  sub word sp, %1
  5593 00001092 54                  <6>  push sp
  5594 00001093 5D                  <6>  pop bp
  5595 00001094 894600              <5>  mov word [bp+0], %1
  5596 00001097 895E02              <5>  mov word [bp+2], %2
  5597 0000109A C6460408            <5>  mov byte [bp+4], %3
  5598 0000109E E8E3F7              <5>  call proc_shl32
  5599 000010A1 54                  <5>  push sp
  5600 000010A2 5D                  <5>  pop bp
  5601 000010A3 8B4600              <5>  mov word %1, [bp+0]
  5602 000010A6 8B5E02              <5>  mov word %2, [bp+2]
  5603                              <5>  stkclose 5
  5604 000010A9 83C405              <6>  add word sp, %1
  5605 000010AC 59                  <4> 	pop cx
  5606 000010AD 88EB                <4> 	mov bl,ch
  5607                              <4> 								
  5608 000010AF 50                  <4> 	push ax
  5609 000010B0 53                  <4> 	push bx
  5610                              <4> 	__lzbitcount32 ax, bx, cl
  5611 000010B1 53                  <5>  push %2
  5612                              <5>  __lzbitcount16 %1, cl
  5613                              <6>  stkopen 3
  5614 000010B2 83EC03              <7>  sub word sp, %1
  5615 000010B5 54                  <7>  push sp
  5616 000010B6 5D                  <7>  pop bp
  5617 000010B7 894600              <6>  mov word [bp+0], %1
  5618 000010BA E893F8              <6>  call proc__lzbitcount16
  5619 000010BD 54                  <6>  push sp
  5620 000010BE 5D                  <6>  pop bp
  5621 000010BF 8A4E02              <6>  mov byte %2, [bp+2]
  5622                              <6>  stkclose 3
  5623 000010C2 83C403              <7>  add word sp, %1
  5624 000010C5 58                  <5>  pop ax
  5625 000010C6 80F910              <5>  cmp cl,16
  5626 000010C9 7217                <5>  jb .end
  5627 000010CB 51                  <5>  push cx
  5628                              <5>  __lzbitcount16 ax, al
  5629                              <6>  stkopen 3
  5630 000010CC 83EC03              <7>  sub word sp, %1
  5631 000010CF 54                  <7>  push sp
  5632 000010D0 5D                  <7>  pop bp
  5633 000010D1 894600              <6>  mov word [bp+0], %1
  5634 000010D4 E879F8              <6>  call proc__lzbitcount16
  5635 000010D7 54                  <6>  push sp
  5636 000010D8 5D                  <6>  pop bp
  5637 000010D9 8A4602              <6>  mov byte %2, [bp+2]
  5638                              <6>  stkclose 3
  5639 000010DC 83C403              <7>  add word sp, %1
  5640 000010DF 59                  <5>  pop cx
  5641 000010E0 00C1                <5>  add cl,al
  5642                              <5>  .end:
  5643 000010E2 88C9                <5>  mov byte %3, cl
  5644 000010E4 5B                  <4> 	pop bx
  5645 000010E5 58                  <4> 	pop ax
  5646                              <4> 		
  5647 000010E6 80E908              <4> 	sub cl,8	
  5648 000010E9 80F908              <4> 	cmp cl,8
  5649 000010EC 7402                <4> 	je .equal
  5650 000010EE 7F06                <4> 	jg .great
  5651                              <4> 	.equal:	
  5652 000010F0 5A                  <4> 		pop dx
  5653 000010F1 FEC6                <4> 		inc dh
  5654 000010F3 52                  <4> 		push dx
  5655 000010F4 EB1C                <4> 		jmp .endcmp
  5656                              <4> 	.great:
  5657                              <4> 		__shl32 ax, bx, cl
  5658                              <5>  stkopen 5
  5659 000010F6 83EC05              <6>  sub word sp, %1
  5660 000010F9 54                  <6>  push sp
  5661 000010FA 5D                  <6>  pop bp
  5662 000010FB 894600              <5>  mov word [bp+0], %1
  5663 000010FE 895E02              <5>  mov word [bp+2], %2
  5664 00001101 884E04              <5>  mov byte [bp+4], %3
  5665 00001104 E87DF7              <5>  call proc_shl32
  5666 00001107 54                  <5>  push sp
  5667 00001108 5D                  <5>  pop bp
  5668 00001109 8B4600              <5>  mov word %1, [bp+0]
  5669 0000110C 8B5E02              <5>  mov word %2, [bp+2]
  5670                              <5>  stkclose 5
  5671 0000110F 83C405              <6>  add word sp, %1
  5672                              <4> 	.endcmp:
  5673                              <4> 	
  5674 00001112 89E1                <4> 	mov cx,sp
  5675 00001114 89CD                <4> 	mov bp,cx
  5676 00001116 83C502              <4> 	add bp,2
  5677                              <4> 	
  5678 00001119 01460A              <4> 	add word [bp+0x0A],ax
  5679 0000111C 895E0C              <4> 	mov word [bp+0x0C],bx
  5680                              <4> 	
  5681                              <4> 	; mantissa setada e expoente calculado
  5682                              <4> 				
  5683 0000111F 8B4E0A              <4> 	mov cx,[bp+0x0A]
  5684 00001122 8B560C              <4> 	mov dx,[bp+0x0C]
  5685                              <4> 	
  5686 00001125 58                  <4> 	pop ax						
  5687                              <4> 	__normalize cx, dx, ax	; normaliza, preserva sinal e seta expoente	
  5688                              <5>  stkopen 0x06
  5689 00001126 83EC06              <6>  sub word sp, %1
  5690 00001129 54                  <6>  push sp
  5691 0000112A 5D                  <6>  pop bp
  5692 0000112B 894E00              <5>  mov word [bp+0],%1
  5693 0000112E 895602              <5>  mov word [bp+2],%2
  5694 00001131 894604              <5>  mov word [bp+4],%3
  5695 00001134 E80702              <5>  call proc__normalize
  5696 00001137 54                  <5>  push sp
  5697 00001138 5D                  <5>  pop bp
  5698 00001139 8B4E00              <5>  mov word %1,[bp+0]
  5699 0000113C 8B5602              <5>  mov word %2,[bp+2]
  5700                              <5>  stkclose 0x06
  5701 0000113F 83C406              <6>  add word sp, %1
  5702                              <4> 		
  5703 00001142 89E0                <4> 	mov ax,sp
  5704 00001144 89C5                <4> 	mov bp,ax
  5705 00001146 894E0A              <4> 	mov [bp+0x0A],cx
  5706 00001149 89560C              <4> 	mov [bp+0x0C],dx		
  5707                              <4> 
  5708                              <4> 	.done:
  5709                              <4> 																	
  5710 0000114C C3                  <4> 	ret
  5711                              <4> 	
  5712                              <4> proc_fladdorsub:	
  5713                              <4> 	; valores especiais
  5714 0000114D 89E0                <4> 	mov ax,sp
  5715 0000114F 89C5                <4> 	mov bp,ax
  5716 00001151 8B4602              <4> 	mov ax,[bp+2]
  5717 00001154 8B5E04              <4> 	mov bx,[bp+4]
  5718 00001157 8B4E06              <4> 	mov cx,[bp+6]
  5719 0000115A 81E10080            <4> 	and cx,0x8000
  5720 0000115E 334E0E              <4> 	xor word cx,[bp+0x0E]	
  5721 00001161 8B5606              <4> 	mov dx,[bp+6]
  5722 00001164 81E2FF7F            <4> 	and dx,0x7FFF
  5723 00001168 01D1                <4> 	add cx,dx	
  5724 0000116A 8B5608              <4> 	mov dx,[bp+8]
  5725                              <4> 	__validate ax, bx, cx, dx, ax, bx, cl
  5726                              <5>  stkopen 0x0D
  5727 0000116D 83EC0D              <6>  sub word sp, %1
  5728 00001170 54                  <6>  push sp
  5729 00001171 5D                  <6>  pop bp
  5730 00001172 894600              <5>  mov word [bp+0],%1
  5731 00001175 895E02              <5>  mov word [bp+2],%2
  5732 00001178 894E04              <5>  mov word [bp+4],%3
  5733 0000117B 895606              <5>  mov word [bp+6],%4
  5734 0000117E E85C04              <5>  call proc__validate
  5735 00001181 54                  <5>  push sp
  5736 00001182 5D                  <5>  pop bp
  5737 00001183 8B4608              <5>  mov word %5,[bp+8]
  5738 00001186 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5739 00001189 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  5740                              <5>  stkclose 0x0D
  5741 0000118C 83C40D              <6>  add word sp, %1
  5742 0000118F 80F900              <4> 	cmp cl,0
  5743 00001192 750D                <4> 	jnz .continue
  5744 00001194 89E2                <4> 		mov dx,sp
  5745 00001196 89D5                <4> 		mov bp,dx		
  5746 00001198 89460A              <4> 		mov word [bp+0x0A],ax
  5747 0000119B 895E0C              <4> 		mov word [bp+0x0C],bx										
  5748 0000119E E99C01              <4> 		jmp .done	
  5749                              <4> 	.continue:
  5750                              <4> 	
  5751 000011A1 89E0                <4> 	mov ax,sp
  5752 000011A3 89C5                <4> 	mov bp,ax
  5753 000011A5 8B4602              <4> 	mov ax,[bp+2]
  5754 000011A8 8B5E04              <4> 	mov bx,[bp+4]
  5755 000011AB 8B4E06              <4> 	mov cx,[bp+6]
  5756 000011AE 81E10080            <4> 	and cx,0x8000
  5757 000011B2 334E0E              <4> 	xor word cx,[bp+0x0E]	
  5758 000011B5 8B5606              <4> 	mov dx,[bp+6]
  5759 000011B8 81E2FF7F            <4> 	and dx,0x7FFF
  5760 000011BC 01D1                <4> 	add cx,dx
  5761 000011BE 8B5608              <4> 	mov dx,[bp+8]
  5762                              <4> 	__addorsub_validate ax, bx, cx, dx, ax, bx, cl
  5763                              <5>  stkopen 0x0D
  5764 000011C1 83EC0D              <6>  sub word sp, %1
  5765 000011C4 54                  <6>  push sp
  5766 000011C5 5D                  <6>  pop bp
  5767 000011C6 894600              <5>  mov word [bp+0],%1
  5768 000011C9 895E02              <5>  mov word [bp+2],%2
  5769 000011CC 894E04              <5>  mov word [bp+4],%3
  5770 000011CF 895606              <5>  mov word [bp+6],%4
  5771 000011D2 E8FA04              <5>  call proc__addorsub_validate
  5772 000011D5 54                  <5>  push sp
  5773 000011D6 5D                  <5>  pop bp
  5774 000011D7 8B4608              <5>  mov word %5,[bp+8]
  5775 000011DA 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5776 000011DD 8A4E0C              <5>  mov byte %7,[bp+0x0C]
  5777                              <5>  stkclose 0x0D
  5778 000011E0 83C40D              <6>  add word sp, %1
  5779 000011E3 80F900              <4> 	cmp cl,0
  5780 000011E6 750D                <4> 	jnz .continue2
  5781 000011E8 89E2                <4> 		mov dx,sp
  5782 000011EA 89D5                <4> 		mov bp,dx					
  5783 000011EC 89460A              <4> 		mov word [bp+0x0A],ax
  5784 000011EF 895E0C              <4> 		mov word [bp+0x0C],bx
  5785 000011F2 E94801              <4> 		jmp .done	
  5786                              <4> 	.continue2:
  5787                              <4> 	
  5788                              <4> 	; valores especiais tratados	
  5789                              <4> 
  5790 000011F5 89E0                <4> 	mov ax,sp
  5791 000011F7 89C5                <4> 	mov bp,ax	
  5792 000011F9 8B4602              <4> 	mov ax,[bp+2]
  5793 000011FC 8B5E06              <4> 	mov bx,[bp+6]
  5794                              <4> 	
  5795 000011FF D1E0                <4> 	shl ax,1
  5796 00001201 D1E3                <4> 	shl bx,1
  5797 00001203 88E5                <4> 	mov ch,ah	
  5798 00001205 28FD                <4> 	sub ch,bh	
  5799                              <4> 		
  5800 00001207 80FD00              <4> 	cmp ch,0
  5801 0000120A 7402                <4> 	jz .expzero
  5802 0000120C EB1E                <4> 	jmp .expnzero
  5803                              <4> 	.expzero:
  5804 0000120E 50                  <4> 		push ax
  5805 0000120F 8B4602              <4> 		mov ax,[bp+2]
  5806 00001212 8B5E04              <4> 		mov bx,[bp+4]
  5807 00001215 8B4E06              <4> 		mov cx,[bp+6]
  5808 00001218 8B5608              <4> 		mov dx,[bp+8]
  5809 0000121B 257F80              <4> 		and ax,0x807F
  5810 0000121E 81E17F80            <4> 		and cx,0x807F
  5811 00001222 0D8000              <4> 		or ax,0x0080
  5812 00001225 81C98000            <4> 		or cx,0x0080
  5813                              <4> 												
  5814 00001229 E99A00              <4> 		jmp .endexpcmp
  5815                              <4> 	.expnzero:
  5816                              <4> 				
  5817 0000122C 80FD00              <4> 		cmp ch,0
  5818 0000122F 7F05                <4> 		jg .exp1great
  5819 00001231 7C49                <4> 		jl .exp1less
  5820 00001233 E99000              <4> 		jmp .endexpcmp
  5821                              <4> 		.exp1great:					
  5822 00001236 50                  <4> 			push ax
  5823                              <4> 		
  5824 00001237 8B4606              <4> 			mov ax,[bp+6]
  5825 0000123A 8B5E08              <4> 			mov bx,[bp+8]
  5826 0000123D 83E07F              <4> 			and ax,0x007F
  5827 00001240 0D8000              <4> 			or ax,0x0080
  5828                              <4> 						
  5829 00001243 55                  <4> 			push bp
  5830                              <4> 			__shr32 ax, bx, ch
  5831                              <5>  stkopen 5
  5832 00001244 83EC05              <6>  sub word sp, %1
  5833 00001247 54                  <6>  push sp
  5834 00001248 5D                  <6>  pop bp
  5835 00001249 894600              <5>  mov word [bp+0], %1
  5836 0000124C 895E02              <5>  mov word [bp+2], %2
  5837 0000124F 886E04              <5>  mov byte [bp+4], %3
  5838 00001252 E876F6              <5>  call proc_shr32
  5839 00001255 54                  <5>  push sp
  5840 00001256 5D                  <5>  pop bp
  5841 00001257 8B4600              <5>  mov word %1, [bp+0]
  5842 0000125A 8B5E02              <5>  mov word %2, [bp+2]
  5843                              <5>  stkclose 5
  5844 0000125D 83C405              <6>  add word sp, %1
  5845 00001260 5D                  <4> 			pop bp		
  5846                              <4> 				
  5847 00001261 8B5606              <4> 			mov dx,[bp+6]
  5848 00001264 81E20080            <4> 			and dx,0x8000
  5849 00001268 01D0                <4> 			add ax,dx			
  5850                              <4> 			
  5851 0000126A 89C1                <4> 			mov cx,ax
  5852 0000126C 89DA                <4> 			mov dx,bx
  5853 0000126E 8B4602              <4> 			mov ax,[bp+2]
  5854 00001271 8B5E04              <4> 			mov bx,[bp+4]										
  5855                              <4> 									
  5856 00001274 257F80              <4> 			and ax,0x807F
  5857 00001277 0D8000              <4> 			or ax,0x0080
  5858                              <4> 						
  5859 0000127A EB4A                <4> 			jmp .endexp1cmp	
  5860                              <4> 		.exp1less:
  5861 0000127C 88E9                <4> 			mov cl,ch
  5862 0000127E B5FF                <4> 			mov ch,0xFF
  5863 00001280 28CD                <4> 			sub ch,cl
  5864 00001282 FEC5                <4> 			inc ch
  5865 00001284 53                  <4> 			push bx		
  5866                              <4> 		
  5867 00001285 8B4602              <4> 			mov ax,[bp+2]
  5868 00001288 8B5E04              <4> 			mov bx,[bp+4]
  5869 0000128B 83E07F              <4> 			and ax,0x007F
  5870 0000128E 0D8000              <4> 			or ax,0x0080
  5871                              <4> 						
  5872 00001291 55                  <4> 			push bp
  5873                              <4> 			__shr32 ax, bx, ch
  5874                              <5>  stkopen 5
  5875 00001292 83EC05              <6>  sub word sp, %1
  5876 00001295 54                  <6>  push sp
  5877 00001296 5D                  <6>  pop bp
  5878 00001297 894600              <5>  mov word [bp+0], %1
  5879 0000129A 895E02              <5>  mov word [bp+2], %2
  5880 0000129D 886E04              <5>  mov byte [bp+4], %3
  5881 000012A0 E828F6              <5>  call proc_shr32
  5882 000012A3 54                  <5>  push sp
  5883 000012A4 5D                  <5>  pop bp
  5884 000012A5 8B4600              <5>  mov word %1, [bp+0]
  5885 000012A8 8B5E02              <5>  mov word %2, [bp+2]
  5886                              <5>  stkclose 5
  5887 000012AB 83C405              <6>  add word sp, %1
  5888 000012AE 5D                  <4> 			pop bp
  5889                              <4> 								
  5890 000012AF 8B5602              <4> 			mov dx,[bp+2]
  5891 000012B2 81E20080            <4> 			and dx,0x8000
  5892 000012B6 01D0                <4> 			add ax,dx			
  5893                              <4> 			
  5894 000012B8 8B4E06              <4> 			mov cx,[bp+6]
  5895 000012BB 8B5608              <4> 			mov dx,[bp+8]										
  5896                              <4> 									
  5897 000012BE 81E17F80            <4> 			and cx,0x807F
  5898 000012C2 81C98000            <4> 			or cx,0x0080
  5899                              <4> 									
  5900                              <4> 		.endexp1cmp:
  5901                              <4> 		
  5902                              <4> 	.endexpcmp:			
  5903                              <4> 	
  5904 000012C6 837E0E00            <4> 	cmp word [bp+0x0E],0
  5905 000012CA 7526                <4> 	jnz .sub
  5906                              <4> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0
  5907                              <5>  stkopen 0x0D
  5908 000012CC 83EC0D              <6>  sub word sp, %1
  5909 000012CF 54                  <6>  push sp
  5910 000012D0 5D                  <6>  pop bp
  5911 000012D1 894600              <5>  mov word [bp+0],%1
  5912 000012D4 895E02              <5>  mov word [bp+2],%2
  5913 000012D7 894E04              <5>  mov word [bp+4],%3
  5914 000012DA 895606              <5>  mov word [bp+6],%4
  5915 000012DD C7460C0000          <5>  mov word [bp+0x0C], %7
  5916 000012E2 E81201              <5>  call proc__iaddorsub32
  5917 000012E5 54                  <5>  push sp
  5918 000012E6 5D                  <5>  pop bp
  5919 000012E7 8B4608              <5>  mov word %5,[bp+8]
  5920 000012EA 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5921                              <5>  stkclose 0x0D
  5922 000012ED 83C40D              <6>  add word sp, %1
  5923 000012F0 EB24                <4> 		jmp .endop
  5924                              <4> 	.sub:
  5925                              <4> 		__iaddorsub32 ax, bx, cx, dx, ax, bx, 0x8000
  5926                              <5>  stkopen 0x0D
  5927 000012F2 83EC0D              <6>  sub word sp, %1
  5928 000012F5 54                  <6>  push sp
  5929 000012F6 5D                  <6>  pop bp
  5930 000012F7 894600              <5>  mov word [bp+0],%1
  5931 000012FA 895E02              <5>  mov word [bp+2],%2
  5932 000012FD 894E04              <5>  mov word [bp+4],%3
  5933 00001300 895606              <5>  mov word [bp+6],%4
  5934 00001303 C7460C0080          <5>  mov word [bp+0x0C], %7
  5935 00001308 E8EC00              <5>  call proc__iaddorsub32
  5936 0000130B 54                  <5>  push sp
  5937 0000130C 5D                  <5>  pop bp
  5938 0000130D 8B4608              <5>  mov word %5,[bp+8]
  5939 00001310 8B5E0A              <5>  mov word %6,[bp+0x0A]
  5940                              <5>  stkclose 0x0D
  5941 00001313 83C40D              <6>  add word sp, %1
  5942                              <4> 	.endop:
  5943                              <4> 						
  5944 00001316 59                  <4> 	pop cx
  5945                              <4> 	
  5946                              <4> 	__normalize ax, bx, cx
  5947                              <5>  stkopen 0x06
  5948 00001317 83EC06              <6>  sub word sp, %1
  5949 0000131A 54                  <6>  push sp
  5950 0000131B 5D                  <6>  pop bp
  5951 0000131C 894600              <5>  mov word [bp+0],%1
  5952 0000131F 895E02              <5>  mov word [bp+2],%2
  5953 00001322 894E04              <5>  mov word [bp+4],%3
  5954 00001325 E81600              <5>  call proc__normalize
  5955 00001328 54                  <5>  push sp
  5956 00001329 5D                  <5>  pop bp
  5957 0000132A 8B4600              <5>  mov word %1,[bp+0]
  5958 0000132D 8B5E02              <5>  mov word %2,[bp+2]
  5959                              <5>  stkclose 0x06
  5960 00001330 83C406              <6>  add word sp, %1
  5961                              <4> 	
  5962 00001333 89E1                <4> 	mov cx,sp
  5963 00001335 89CD                <4> 	mov bp,cx
  5964 00001337 89460A              <4> 	mov word [bp+0x0A],ax
  5965 0000133A 895E0C              <4> 	mov word [bp+0x0C],bx
  5966                              <4> 									
  5967                              <4> 	.done:		
  5968                              <4> 							
  5969 0000133D C3                  <4> 	ret
  5970                              <4> 	
  5971                              <4> proc__normalize:
  5972 0000133E 89E0                <4> 	mov ax,sp
  5973 00001340 89C5                <4> 	mov bp,ax	
  5974                              <4> 
  5975 00001342 8B4E02              <4> 	mov cx,[bp+2]	
  5976 00001345 8B5604              <4> 	mov dx,[bp+4]
  5977 00001348 8B5E06              <4> 	mov bx,[bp+6]
  5978                              <4> 					
  5979 0000134B 89C8                <4> 	mov ax,cx
  5980 0000134D 250080              <4> 	and ax,0x8000			
  5981 00001350 894602              <4> 	mov [bp+2],ax	
  5982                              <4> 					
  5983 00001353 81E1FF7F            <4> 	and cx,0x7FFF
  5984                              <4> 			
  5985 00001357 51                  <4> 	push cx
  5986 00001358 52                  <4> 	push dx
  5987 00001359 53                  <4> 	push bx
  5988                              <4> 	__lzbitcount32 cx, dx, al	
  5989 0000135A 52                  <5>  push %2
  5990                              <5>  __lzbitcount16 %1, cl
  5991                              <6>  stkopen 3
  5992 0000135B 83EC03              <7>  sub word sp, %1
  5993 0000135E 54                  <7>  push sp
  5994 0000135F 5D                  <7>  pop bp
  5995 00001360 894E00              <6>  mov word [bp+0], %1
  5996 00001363 E8EAF5              <6>  call proc__lzbitcount16
  5997 00001366 54                  <6>  push sp
  5998 00001367 5D                  <6>  pop bp
  5999 00001368 8A4E02              <6>  mov byte %2, [bp+2]
  6000                              <6>  stkclose 3
  6001 0000136B 83C403              <7>  add word sp, %1
  6002 0000136E 58                  <5>  pop ax
  6003 0000136F 80F910              <5>  cmp cl,16
  6004 00001372 7217                <5>  jb .end
  6005 00001374 51                  <5>  push cx
  6006                              <5>  __lzbitcount16 ax, al
  6007                              <6>  stkopen 3
  6008 00001375 83EC03              <7>  sub word sp, %1
  6009 00001378 54                  <7>  push sp
  6010 00001379 5D                  <7>  pop bp
  6011 0000137A 894600              <6>  mov word [bp+0], %1
  6012 0000137D E8D0F5              <6>  call proc__lzbitcount16
  6013 00001380 54                  <6>  push sp
  6014 00001381 5D                  <6>  pop bp
  6015 00001382 8A4602              <6>  mov byte %2, [bp+2]
  6016                              <6>  stkclose 3
  6017 00001385 83C403              <7>  add word sp, %1
  6018 00001388 59                  <5>  pop cx
  6019 00001389 00C1                <5>  add cl,al
  6020                              <5>  .end:
  6021 0000138B 88C8                <5>  mov byte %3, cl
  6022 0000138D 5B                  <4> 	pop bx
  6023 0000138E 5A                  <4> 	pop dx
  6024 0000138F 59                  <4> 	pop cx								
  6025                              <4> 		
  6026 00001390 3C08                <4> 	cmp al,8					
  6027 00001392 7204                <4> 	jb .shr
  6028 00001394 7728                <4> 	ja .shl
  6029 00001396 EB4A                <4> 	jmp .endshrl
  6030                              <4> 	.shr:			
  6031 00001398 B408                <4> 		mov ah,0x08
  6032 0000139A 28C4                <4> 		sub ah,al
  6033 0000139C 00E7                <4> 		add bh,ah
  6034 0000139E 53                  <4> 		push bx
  6035                              <4> 		__shr32 cx, dx, ah
  6036                              <5>  stkopen 5
  6037 0000139F 83EC05              <6>  sub word sp, %1
  6038 000013A2 54                  <6>  push sp
  6039 000013A3 5D                  <6>  pop bp
  6040 000013A4 894E00              <5>  mov word [bp+0], %1
  6041 000013A7 895602              <5>  mov word [bp+2], %2
  6042 000013AA 886604              <5>  mov byte [bp+4], %3
  6043 000013AD E81BF5              <5>  call proc_shr32
  6044 000013B0 54                  <5>  push sp
  6045 000013B1 5D                  <5>  pop bp
  6046 000013B2 8B4E00              <5>  mov word %1, [bp+0]
  6047 000013B5 8B5602              <5>  mov word %2, [bp+2]
  6048                              <5>  stkclose 5
  6049 000013B8 83C405              <6>  add word sp, %1
  6050 000013BB 5B                  <4> 		pop bx
  6051 000013BC EB24                <4> 		jmp .endshrl
  6052                              <4> 	.shl:		
  6053 000013BE B408                <4> 		mov ah,0x08
  6054 000013C0 28E0                <4> 		sub al,ah
  6055 000013C2 28C7                <4> 		sub bh,al			
  6056 000013C4 53                  <4> 		push bx
  6057                              <4> 		__shl32 cx, dx, al
  6058                              <5>  stkopen 5
  6059 000013C5 83EC05              <6>  sub word sp, %1
  6060 000013C8 54                  <6>  push sp
  6061 000013C9 5D                  <6>  pop bp
  6062 000013CA 894E00              <5>  mov word [bp+0], %1
  6063 000013CD 895602              <5>  mov word [bp+2], %2
  6064 000013D0 884604              <5>  mov byte [bp+4], %3
  6065 000013D3 E8AEF4              <5>  call proc_shl32
  6066 000013D6 54                  <5>  push sp
  6067 000013D7 5D                  <5>  pop bp
  6068 000013D8 8B4E00              <5>  mov word %1, [bp+0]
  6069 000013DB 8B5602              <5>  mov word %2, [bp+2]
  6070                              <5>  stkclose 5
  6071 000013DE 83C405              <6>  add word sp, %1
  6072 000013E1 5B                  <4> 		pop bx			
  6073                              <4> 	.endshrl:											
  6074                              <4> 								
  6075 000013E2 30DB                <4> 	xor bl,bl
  6076 000013E4 D1EB                <4> 	shr bx,1	
  6077 000013E6 83E17F              <4> 	and cx,0x007F	
  6078                              <4> 		
  6079 000013E9 89E0                <4> 	mov ax,sp
  6080 000013EB 89C5                <4> 	mov bp,ax
  6081 000013ED 015E02              <4> 	add word [bp+2],bx
  6082 000013F0 014E02              <4> 	add word [bp+2],cx	
  6083 000013F3 895604              <4> 	mov word [bp+4],dx
  6084                              <4> 	
  6085 000013F6 C3                  <4> 	ret
  6086                              <4> 
  6087                              <4> proc__iaddorsub32:
  6088 000013F7 89E0                <4> 	mov ax,sp
  6089 000013F9 89C5                <4> 	mov bp,ax
  6090                              <4> 	
  6091 000013FB 8B4602              <4> 	mov ax,[bp+2]
  6092 000013FE 8B5E04              <4> 	mov bx,[bp+4]
  6093 00001401 8B4E06              <4> 	mov cx,[bp+6]
  6094 00001404 8B5608              <4> 	mov dx,[bp+8]	
  6095                              <4> 	
  6096 00001407 50                  <4> 	push ax	
  6097 00001408 250080              <4> 	and ax, 0x8000
  6098 0000140B 83F800              <4> 	cmp ax,0
  6099 0000140E 741B                <4> 	jz .endv1neg
  6100 00001410 58                  <4> 		pop ax
  6101 00001411 51                  <4> 		push cx
  6102 00001412 52                  <4> 		push dx
  6103                              <4> 		
  6104 00001413 B9FFFF              <4> 		mov cx,0xFFFF
  6105 00001416 BAFFFF              <4> 		mov dx,0xFFFF
  6106 00001419 25FF7F              <4> 		and ax,0x7FFF
  6107 0000141C 29DA                <4> 		sub dx,bx
  6108 0000141E 19C1                <4> 		sbb cx,ax
  6109 00001420 42                  <4> 		inc dx
  6110 00001421 83D100              <4> 		adc cx,0
  6111 00001424 89C8                <4> 		mov ax,cx
  6112 00001426 89D3                <4> 		mov bx,dx
  6113                              <4> 		
  6114 00001428 5A                  <4> 		pop dx
  6115 00001429 59                  <4> 		pop cx
  6116 0000142A 50                  <4> 		push ax	
  6117                              <4> 	.endv1neg:		
  6118 0000142B 58                  <4> 	pop ax	
  6119                              <4> 		
  6120 0000142C 51                  <4> 	push cx
  6121 0000142D 81E10080            <4> 	and cx,0x8000
  6122 00001431 83F900              <4> 	cmp cx,0
  6123 00001434 741C                <4> 	jz .endv2neg
  6124 00001436 59                  <4> 		pop cx
  6125 00001437 50                  <4> 		push ax
  6126 00001438 53                  <4> 		push bx
  6127                              <4> 		
  6128 00001439 B8FFFF              <4> 		mov ax,0xFFFF
  6129 0000143C BBFFFF              <4> 		mov bx,0xFFFF
  6130 0000143F 81E1FF7F            <4> 		and cx,0x7FFF
  6131 00001443 29D3                <4> 		sub bx,dx
  6132 00001445 19C8                <4> 		sbb ax,cx
  6133 00001447 43                  <4> 		inc bx
  6134 00001448 83D000              <4> 		adc ax,0
  6135 0000144B 89C1                <4> 		mov cx,ax
  6136 0000144D 89DA                <4> 		mov dx,bx
  6137                              <4> 		
  6138 0000144F 5B                  <4> 		pop bx
  6139 00001450 58                  <4> 		pop ax
  6140 00001451 51                  <4> 		push cx
  6141                              <4> 	.endv2neg:	
  6142 00001452 59                  <4> 	pop cx
  6143                              <4> 					
  6144 00001453 837E0E00            <4> 	cmp word [bp+0x0E],0
  6145 00001457 7506                <4> 	jnz .sub
  6146 00001459 01D3                <4> 		add bx, dx
  6147 0000145B 11C8                <4> 		adc ax, cx				
  6148 0000145D EB04                <4> 		jmp .endop
  6149                              <4> 	.sub:
  6150 0000145F 29D3                <4> 		sub bx, dx
  6151 00001461 19C8                <4> 		sbb ax, cx
  6152                              <4> 	.endop:
  6153                              <4> 	
  6154 00001463 89C1                <4> 	mov cx,ax
  6155 00001465 81E10080            <4> 	and cx,0x8000
  6156 00001469 83F900              <4> 	cmp cx,0
  6157 0000146C 7415                <4> 	jz .endresneg
  6158 0000146E B9FFFF              <4> 		mov cx,0xFFFF
  6159 00001471 BAFFFF              <4> 		mov dx,0xFFFF
  6160 00001474 29DA                <4> 		sub dx,bx
  6161 00001476 19C1                <4> 		sbb cx,ax
  6162 00001478 42                  <4> 		inc dx
  6163 00001479 83D100              <4> 		adc cx,0
  6164 0000147C 89C8                <4> 		mov ax,cx
  6165 0000147E 89D3                <4> 		mov bx,dx
  6166                              <4> 		
  6167 00001480 050080              <4> 		add ax,0x8000
  6168                              <4> 	.endresneg:
  6169                              <4> 	
  6170 00001483 89E1                <4> 	mov cx,sp
  6171 00001485 89CD                <4> 	mov bp,cx
  6172 00001487 89460A              <4> 	mov [bp+0x0A], ax
  6173 0000148A 895E0C              <4> 	mov [bp+0x0C], bx
  6174                              <4> 	
  6175 0000148D C3                  <4> 	ret	
  6176                              <4> 	
  6177                              <4> proc__mul32_64:
  6178 0000148E 89E0                <4> 	mov ax,sp
  6179 00001490 89C5                <4> 	mov bp,ax
  6180                              <4> 		
  6181 00001492 31D2                <4> 	xor dx,dx
  6182 00001494 8B4604              <4> 	mov ax,[bp+4]
  6183 00001497 F76608              <4> 	mul word [bp+8]
  6184                              <4> 	
  6185 0000149A C7460A0000          <4> 	mov word [bp+0x0A], 0
  6186 0000149F C7460C0000          <4> 	mov word [bp+0x0C], 0
  6187 000014A4 89560E              <4> 	mov word [bp+0x0E], dx
  6188 000014A7 894610              <4> 	mov word [bp+0x10], ax
  6189                              <4> 		
  6190 000014AA 31D2                <4> 	xor dx,dx
  6191 000014AC 8B4604              <4> 	mov ax,[bp+4]
  6192 000014AF F76606              <4> 	mul word [bp+6]
  6193                              <4> 	
  6194 000014B2 01460E              <4> 	add [bp+0x0E],ax
  6195 000014B5 11560C              <4> 	adc [bp+0x0C],dx
  6196 000014B8 83560A00            <4> 	adc word [bp+0x0A],0
  6197                              <4> 	
  6198 000014BC 31D2                <4> 	xor dx,dx
  6199 000014BE 8B4602              <4> 	mov ax,[bp+2]
  6200 000014C1 F76608              <4> 	mul word [bp+8]
  6201                              <4> 	
  6202 000014C4 01460E              <4> 	add [bp+0x0E],ax
  6203 000014C7 11560C              <4> 	adc [bp+0x0C],dx
  6204                              <4> 	
  6205 000014CA 31D2                <4> 	xor dx,dx
  6206 000014CC 8B4602              <4> 	mov ax,[bp+2]
  6207 000014CF F76606              <4> 	mul word [bp+6]
  6208                              <4> 	
  6209 000014D2 01460C              <4> 	add [bp+0x0C],ax
  6210 000014D5 11560A              <4> 	adc [bp+0x0A],dx
  6211                              <4> 	
  6212 000014D8 C3                  <4> 	ret
  6213                              <4> 	
  6214                              <4> proc__fldiv32:
  6215 000014D9 89E0                <4> 	mov ax,sp
  6216 000014DB 89C5                <4> 	mov bp,ax
  6217                              <4> 	
  6218 000014DD 8B4602              <4> 	mov ax,[bp+2]
  6219 000014E0 8B5E04              <4> 	mov bx,[bp+4]
  6220 000014E3 C7460A0000          <4> 	mov word [bp+0x0A],0
  6221 000014E8 C7460C0000          <4> 	mov word [bp+0x0C],0
  6222                              <4> 	
  6223 000014ED B118                <4> 	mov cl,24
  6224                              <4> 	.l1:
  6225 000014EF 80F900              <4> 		cmp cl,0
  6226 000014F2 0F84AC00            <4> 		jz .l2
  6227 000014F6 51                  <4> 		push cx
  6228                              <4> 		
  6229 000014F7 8B4E0A              <4> 		mov cx,[bp+0x0A]
  6230 000014FA 8B560C              <4> 		mov dx,[bp+0x0C]
  6231 000014FD 55                  <4> 		push bp
  6232 000014FE 50                  <4> 		push ax
  6233 000014FF 53                  <4> 		push bx
  6234                              <4> 		__shl32 cx, dx, 1
  6235                              <5>  stkopen 5
  6236 00001500 83EC05              <6>  sub word sp, %1
  6237 00001503 54                  <6>  push sp
  6238 00001504 5D                  <6>  pop bp
  6239 00001505 894E00              <5>  mov word [bp+0], %1
  6240 00001508 895602              <5>  mov word [bp+2], %2
  6241 0000150B C6460401            <5>  mov byte [bp+4], %3
  6242 0000150F E872F3              <5>  call proc_shl32
  6243 00001512 54                  <5>  push sp
  6244 00001513 5D                  <5>  pop bp
  6245 00001514 8B4E00              <5>  mov word %1, [bp+0]
  6246 00001517 8B5602              <5>  mov word %2, [bp+2]
  6247                              <5>  stkclose 5
  6248 0000151A 83C405              <6>  add word sp, %1
  6249 0000151D 5B                  <4> 		pop bx
  6250 0000151E 58                  <4> 		pop ax
  6251 0000151F 5D                  <4> 		pop bp
  6252 00001520 894E0A              <4> 		mov [bp+0x0A],cx
  6253 00001523 89560C              <4> 		mov [bp+0x0C],dx
  6254                              <4> 				
  6255 00001526 8B4E06              <4> 		mov cx,[bp+6]
  6256 00001529 8B5608              <4> 		mov dx,[bp+8]
  6257 0000152C 50                  <4> 		push ax
  6258 0000152D 53                  <4> 		push bx
  6259 0000152E 55                  <4> 		push bp
  6260                              <4> 		__cmp32 ax, bx, cx, dx, dl
  6261                              <5>  stkopen 9
  6262 0000152F 83EC09              <6>  sub word sp, %1
  6263 00001532 54                  <6>  push sp
  6264 00001533 5D                  <6>  pop bp
  6265 00001534 894600              <5>  mov word [bp+0], %1
  6266 00001537 895E02              <5>  mov word [bp+2], %2
  6267 0000153A 894E04              <5>  mov word [bp+4], %3
  6268 0000153D 895606              <5>  mov word [bp+6], %4
  6269 00001540 E816F3              <5>  call proc_cmp32
  6270 00001543 54                  <5>  push sp
  6271 00001544 5D                  <5>  pop bp
  6272 00001545 8A5608              <5>  mov byte %5, [bp+8]
  6273                              <5>  stkclose 9
  6274 00001548 83C409              <6>  add word sp, %1
  6275 0000154B 5D                  <4> 		pop bp
  6276 0000154C 5B                  <4> 		pop bx
  6277 0000154D 58                  <4> 		pop ax				
  6278                              <4> 		
  6279 0000154E 80FA00              <4> 		cmp dl,0
  6280 00001551 7C2A                <4> 		jl .endsub
  6281 00001553 8B4E06              <4> 			mov cx,[bp+6]
  6282 00001556 8B5608              <4> 			mov dx,[bp+8]
  6283 00001559 55                  <4> 			push bp									
  6284                              <4> 			__sub32 ax, bx, cx, dx, ax, bx						
  6285                              <5>  stkopen 0x0C
  6286 0000155A 83EC0C              <6>  sub word sp, %1
  6287 0000155D 54                  <6>  push sp
  6288 0000155E 5D                  <6>  pop bp
  6289 0000155F 894600              <5>  mov word [bp+0], %1
  6290 00001562 895E02              <5>  mov word [bp+2], %2
  6291 00001565 894E04              <5>  mov word [bp+4], %3
  6292 00001568 895606              <5>  mov word [bp+6], %4
  6293 0000156B E8D0F2              <5>  call proc_sub32
  6294 0000156E 54                  <5>  push sp
  6295 0000156F 5D                  <5>  pop bp
  6296 00001570 8B4608              <5>  mov word %5, [bp+8]
  6297 00001573 8B5E0A              <5>  mov word %6, [bp+0x0A]
  6298                              <5>  stkclose 0x0C
  6299 00001576 83C40C              <6>  add word sp, %1
  6300 00001579 5D                  <4> 			pop bp			
  6301 0000157A FF460C              <4> 			inc word [bp+0x0C]			
  6302                              <4> 		.endsub:
  6303                              <4> 				
  6304 0000157D 55                  <4> 		push bp
  6305                              <4> 		__shl32 ax, bx, 1
  6306                              <5>  stkopen 5
  6307 0000157E 83EC05              <6>  sub word sp, %1
  6308 00001581 54                  <6>  push sp
  6309 00001582 5D                  <6>  pop bp
  6310 00001583 894600              <5>  mov word [bp+0], %1
  6311 00001586 895E02              <5>  mov word [bp+2], %2
  6312 00001589 C6460401            <5>  mov byte [bp+4], %3
  6313 0000158D E8F4F2              <5>  call proc_shl32
  6314 00001590 54                  <5>  push sp
  6315 00001591 5D                  <5>  pop bp
  6316 00001592 8B4600              <5>  mov word %1, [bp+0]
  6317 00001595 8B5E02              <5>  mov word %2, [bp+2]
  6318                              <5>  stkclose 5
  6319 00001598 83C405              <6>  add word sp, %1
  6320 0000159B 5D                  <4> 		pop bp
  6321                              <4> 		
  6322 0000159C 59                  <4> 		pop cx
  6323 0000159D FEC9                <4> 		dec cl
  6324 0000159F E94DFF              <4> 		jmp .l1
  6325                              <4> 	.l2:
  6326                              <4> 	
  6327 000015A2 C3                  <4> 	ret
  6328                              <4> 
  6329                              <4> proc_flgetsig:
  6330 000015A3 89E0                <4> 	mov ax,sp
  6331 000015A5 89C5                <4> 	mov bp,ax
  6332                              <4> 	
  6333 000015A7 8B4602              <4> 	mov ax,[bp+2]
  6334 000015AA 250080              <4> 	and ax,0x8000
  6335 000015AD 894604              <4> 	mov [bp+4],ax	
  6336                              <4> 	
  6337 000015B0 C3                  <4> 	ret
  6338                              <4> 
  6339                              <4> proc_flinvsig:
  6340 000015B1 89E0                <4> 	mov ax,sp
  6341 000015B3 89C5                <4> 	mov bp,ax
  6342                              <4> 	
  6343 000015B5 8B4602              <4> 	mov ax,[bp+2]	
  6344 000015B8 89C1                <4> 	mov cx,ax	
  6345 000015BA 83C900              <4> 	or cx, 0x0000
  6346 000015BD F7D1                <4> 	not cx
  6347 000015BF 81E10080            <4> 	and cx,0x8000								
  6348 000015C3 25FF7F              <4> 	and ax,0x7FFF			
  6349 000015C6 01C8                <4> 	add ax,cx	
  6350 000015C8 894602              <4> 	mov word [bp+2],ax
  6351                              <4> 	
  6352 000015CB C3                  <4> 	ret
  6353                              <4> 
  6354                              <4> proc_flsetsig:
  6355 000015CC 89E0                <4> 	mov ax,sp
  6356 000015CE 89C5                <4> 	mov bp,ax
  6357                              <4> 
  6358 000015D0 8B4602              <4> 	mov ax,[bp+2]
  6359 000015D3 25FF7F              <4> 	and ax,0x7FFF
  6360 000015D6 034604              <4> 	add ax,[bp+4]
  6361 000015D9 894602              <4> 	mov [bp+2],ax
  6362                              <4> 				
  6363 000015DC C3                  <4> 	ret
  6364                              <4> 
  6365                              <4> proc__validate:
  6366 000015DD 89E0                <4> 	mov ax,sp
  6367 000015DF 89C5                <4> 	mov bp,ax
  6368                              <4> 	
  6369 000015E1 8B4602              <4> 	mov ax,[bp+2]
  6370 000015E4 25FF7F              <4> 	and ax,0x7FFF
  6371 000015E7 3DFF7F              <4> 	cmp ax,0x7FFF
  6372 000015EA 750A                <4> 	jne .isnumber1
  6373                              <4> 
  6374 000015EC 8B4604              <4> 	mov ax,[bp+4]
  6375 000015EF 83F8FF              <4> 	cmp ax,0xFFFF
  6376 000015F2 7502                <4> 	jnz .isnumber1
  6377                              <4> 	
  6378 000015F4 EB37                <4> 	jmp .NaN
  6379                              <4> 	
  6380                              <4> 	.isnumber1:
  6381                              <4> 	
  6382 000015F6 8B4606              <4> 	mov ax,[bp+6]
  6383 000015F9 25FF7F              <4> 	and ax,0x7FFF
  6384 000015FC 3DFF7F              <4> 	cmp ax,0x7FFF
  6385 000015FF 750A                <4> 	jne .isnumber2
  6386                              <4> 
  6387 00001601 8B4608              <4> 	mov ax,[bp+8]
  6388 00001604 83F8FF              <4> 	cmp ax,0xFFFF
  6389 00001607 7502                <4> 	jnz .isnumber2
  6390                              <4> 	
  6391 00001609 EB22                <4> 	jmp .NaN
  6392                              <4> 	
  6393                              <4> 	.isnumber2:
  6394                              <4> 	
  6395 0000160B 8B4602              <4> 	mov ax,[bp+2]
  6396 0000160E D1E0                <4> 	shl ax,1
  6397 00001610 80FCFF              <4> 	cmp ah,0xFF
  6398 00001613 740C                <4> 	je .infinity
  6399                              <4> 
  6400 00001615 8B5E06              <4> 	mov bx,[bp+6]
  6401 00001618 D1E3                <4> 	shl bx,1
  6402 0000161A 80FFFF              <4> 	cmp bh,0xFF
  6403 0000161D 7402                <4> 	je .infinity			
  6404                              <4> 	
  6405 0000161F EB18                <4> 	jmp .ok	
  6406                              <4> 	
  6407                              <4> 	.infinity:		
  6408 00001621 C7460A807F          <4> 		mov word [bp+0x0A],0x7F80
  6409 00001626 C7460C0000          <4> 		mov word [bp+0x0C],0
  6410 0000162B EB12                <4> 		jmp .done
  6411                              <4> 	.NaN:
  6412 0000162D C7460AFF7F          <4> 		mov word [bp+0x0A],0x7FFF
  6413 00001632 C7460CFFFF          <4> 		mov word [bp+0x0C],0xFFFF
  6414 00001637 EB06                <4> 		jmp .done
  6415                              <4> 			
  6416                              <4> 	.ok:
  6417 00001639 C6460E01            <4> 		mov byte [bp+0x0E],1
  6418 0000163D EB04                <4> 		jmp .end
  6419                              <4> 	.done:
  6420 0000163F C6460E00            <4> 		mov byte [bp+0x0E],0		
  6421                              <4> 	.end:
  6422                              <4> 	
  6423 00001643 C3                  <4> 	ret
  6424                              <4> 
  6425                              <4> proc__div_validate:
  6426 00001644 89E0                <4> 	mov ax,sp
  6427 00001646 89C5                <4> 	mov bp,ax
  6428                              <4> 	
  6429 00001648 8B4602              <4> 	mov ax,[bp+2]
  6430 0000164B 8B5E06              <4> 	mov bx,[bp+6]
  6431 0000164E D1E0                <4> 	shl ax,1
  6432 00001650 D1E3                <4> 	shl bx,1
  6433 00001652 08FC                <4> 	or ah,bh
  6434 00001654 80FC00              <4> 	cmp ah,0
  6435 00001657 7422                <4> 	jz .NaN
  6436                              <4> 	
  6437 00001659 8B4602              <4> 	mov ax,[bp+2]
  6438 0000165C D1E0                <4> 	shl ax,1
  6439 0000165E 80FC00              <4> 	cmp ah,0
  6440 00001661 7424                <4> 	jz .zero
  6441 00001663 8B5E06              <4> 	mov bx,[bp+6]
  6442 00001666 D1E3                <4> 	shl bx,1
  6443 00001668 80FF00              <4> 	cmp bh,0	
  6444 0000166B 7402                <4> 	jz .infinity		
  6445                              <4> 		
  6446 0000166D EB24                <4> 	jmp .ok
  6447                              <4> 	
  6448                              <4> 	.infinity:		
  6449 0000166F C7460A807F          <4> 		mov word [bp+0x0A],0x7F80
  6450 00001674 C7460C0000          <4> 		mov word [bp+0x0C],0
  6451 00001679 EB1E                <4> 		jmp .done
  6452                              <4> 	.NaN:
  6453 0000167B C7460AFF7F          <4> 		mov word [bp+0x0A],0x7FFF
  6454 00001680 C7460CFFFF          <4> 		mov word [bp+0x0C],0xFFFF
  6455 00001685 EB12                <4> 		jmp .done
  6456                              <4> 	.zero:
  6457 00001687 C7460A0000          <4> 		mov word [bp+0x0A],0
  6458 0000168C C7460C0000          <4> 		mov word [bp+0x0C],0
  6459 00001691 EB06                <4> 		jmp .done	
  6460                              <4> 			
  6461                              <4> 	.ok:
  6462 00001693 C6460E01            <4> 		mov byte [bp+0x0E],1
  6463 00001697 EB04                <4> 		jmp .end
  6464                              <4> 	.done:	
  6465 00001699 C6460E00            <4> 		mov byte [bp+0x0E],0
  6466                              <4> 	.end:	
  6467                              <4> 		
  6468 0000169D C3                  <4> 	ret
  6469                              <4> 	
  6470                              <4> proc__mul_validate:
  6471 0000169E 89E0                <4> 	mov ax,sp
  6472 000016A0 89C5                <4> 	mov bp,ax
  6473                              <4> 	
  6474 000016A2 8B4602              <4> 	mov ax,[bp+2]
  6475 000016A5 D1E0                <4> 	shl ax,1	
  6476 000016A7 80FC00              <4> 	cmp ah,0	
  6477 000016AA 740C                <4> 	jz .zero		
  6478                              <4> 
  6479 000016AC 8B5E04              <4> 	mov bx,[bp+4]
  6480 000016AF D1E3                <4> 	shl bx,1
  6481 000016B1 80FF00              <4> 	cmp bh,0
  6482 000016B4 7402                <4> 	jz .zero
  6483                              <4> 			
  6484 000016B6 EB0C                <4> 	jmp .ok
  6485                              <4> 	
  6486                              <4> 	.zero:		
  6487 000016B8 C746060000          <4> 		mov word [bp+6],0
  6488 000016BD C746080000          <4> 		mov word [bp+8],0
  6489 000016C2 EB06                <4> 		jmp .done
  6490                              <4> 			
  6491                              <4> 	.ok:
  6492 000016C4 C6460A01            <4> 		mov byte [bp+0x0A],1
  6493 000016C8 EB04                <4> 		jmp .end
  6494                              <4> 	.done:	
  6495 000016CA C6460A00            <4> 		mov byte [bp+0x0A],0
  6496                              <4> 	.end:	
  6497                              <4> 		
  6498 000016CE C3                  <4> 	ret
  6499                              <4> 	
  6500                              <4> proc__addorsub_validate:
  6501 000016CF 89E0                <4> 	mov ax,sp
  6502 000016D1 89C5                <4> 	mov bp,ax
  6503                              <4> 	
  6504 000016D3 8B4602              <4> 	mov ax,[bp+2]
  6505 000016D6 8B5E06              <4> 	mov bx,[bp+6]	
  6506 000016D9 D1E0                <4> 	shl ax,1
  6507 000016DB D1E3                <4> 	shl bx,1
  6508 000016DD 08FC                <4> 	or ah,bh
  6509 000016DF 80FC00              <4> 	cmp ah,0
  6510 000016E2 7416                <4> 	jz .zero
  6511                              <4> 	
  6512 000016E4 8B4602              <4> 	mov ax,[bp+2]
  6513 000016E7 D1E0                <4> 	shl ax,1
  6514 000016E9 80FC00              <4> 	cmp ah,0		
  6515 000016EC 7426                <4> 	jz .value2
  6516                              <4> 	
  6517 000016EE 8B4606              <4> 	mov ax,[bp+6]
  6518 000016F1 D1E0                <4> 	shl ax,1
  6519 000016F3 80FC00              <4> 	cmp ah,0
  6520 000016F6 740E                <4> 	jz .value1	
  6521                              <4> 		
  6522 000016F8 EB28                <4> 	jmp .ok
  6523                              <4> 	
  6524                              <4> 	.zero:		
  6525 000016FA C7460A0000          <4> 		mov word [bp+0x0A],0
  6526 000016FF C7460C0000          <4> 		mov word [bp+0x0C],0
  6527 00001704 EB22                <4> 		jmp .done
  6528                              <4> 	.value1:
  6529 00001706 8B4602              <4> 		mov ax,[bp+2]
  6530 00001709 8B5E04              <4> 		mov bx,[bp+4]
  6531 0000170C 89460A              <4> 		mov word [bp+0x0A],ax
  6532 0000170F 895E0C              <4> 		mov word [bp+0x0C],bx		
  6533 00001712 EB14                <4> 		jmp .done
  6534                              <4> 	.value2:		
  6535 00001714 8B4606              <4> 		mov ax,[bp+6]
  6536 00001717 8B5E08              <4> 		mov bx,[bp+8]
  6537 0000171A 89460A              <4> 		mov word [bp+0x0A],ax
  6538 0000171D 895E0C              <4> 		mov word [bp+0x0C],bx
  6539 00001720 EB06                <4> 		jmp .done
  6540                              <4> 			
  6541                              <4> 	.ok:
  6542 00001722 C6460E01            <4> 		mov byte [bp+0x0E],1
  6543 00001726 EB04                <4> 		jmp .end
  6544                              <4> 	.done:	
  6545 00001728 C6460E00            <4> 		mov byte [bp+0x0E],0
  6546                              <4> 	.end:	
  6547                              <4> 		
  6548 0000172C C3                  <4> 	ret
  6549                              <4> 	
  6550                              <4> 
  6551                              <4> proc__cmp_validate:
  6552 0000172D 89E0                <4> 	mov ax,sp
  6553 0000172F 89C5                <4> 	mov bp,ax
  6554                              <4> 	
  6555 00001731 8B4602              <4> 	mov ax,[bp+2]
  6556 00001734 8B5E04              <4> 	mov bx,[bp+4]
  6557 00001737 D1E0                <4> 	shl ax,1
  6558 00001739 D1E3                <4> 	shl bx,1
  6559                              <4> 	
  6560 0000173B 88E5                <4> 	mov ch,ah
  6561 0000173D 30FD                <4> 	xor ch,bh
  6562 0000173F 80FD00              <4> 	cmp ch,0
  6563 00001742 743A                <4> 	jz .ok
  6564                              <4> 		
  6565 00001744 80FC00              <4> 	cmp ah,0
  6566 00001747 7407                <4> 	jz .zerov1
  6567                              <4> 	
  6568 00001749 80FF00              <4> 	cmp bh,0
  6569 0000174C 7419                <4> 	jz .zerov2	
  6570                              <4> 			
  6571 0000174E EB2E                <4> 	jmp .ok
  6572                              <4> 	
  6573                              <4> 	.zerov1:
  6574 00001750 8B4604              <4> 		mov ax,[bp+4]
  6575 00001753 250080              <4> 		and ax,0x8000
  6576 00001756 83F800              <4> 		cmp ax,0
  6577 00001759 7506                <4> 		jnz .neg1
  6578 0000175B C64606FF            <4> 			mov byte [bp+6],-1
  6579 0000175F EB04                <4> 			jmp .endcmp1
  6580                              <4> 		.neg1:
  6581 00001761 C6460601            <4> 			mov byte [bp+6], 1
  6582                              <4> 		.endcmp1:
  6583 00001765 EB1D                <4> 		jmp .done
  6584                              <4> 	.zerov2:		
  6585 00001767 8B4602              <4> 		mov ax,[bp+2]
  6586 0000176A 250080              <4> 		and ax,0x8000
  6587 0000176D 83F800              <4> 		cmp ax,0
  6588 00001770 7506                <4> 		jnz .neg2
  6589 00001772 C6460601            <4> 			mov byte [bp+6], 1
  6590 00001776 EB04                <4> 			jmp .endcmp2
  6591                              <4> 		.neg2:
  6592 00001778 C64606FF            <4> 			mov byte [bp+6],-1
  6593                              <4> 		.endcmp2:
  6594 0000177C EB06                <4> 		jmp .done	
  6595                              <4> 			
  6596                              <4> 	.ok:
  6597 0000177E C6460701            <4> 		mov byte [bp+7],1
  6598 00001782 EB04                <4> 		jmp .end
  6599                              <4> 	.done:	
  6600 00001784 C6460700            <4> 		mov byte [bp+7],0
  6601                              <4> 	.end:	
  6602                              <4> 		
  6603 00001788 C3                  <4> 	ret
  6604                              <4> 	
  6605                              <4> %endif
  6606                              <3> 
  6607                              <3> %macro flgetsig 2
  6608                              <3> 	flgetsig cs, %1, %2
  6609                              <3> %endmacro
  6610                              <3> 
  6611                              <3> %macro flinvsig 1
  6612                              <3> 	flinvsig cs, %1
  6613                              <3> %endmacro
  6614                              <3> 
  6615                              <3> %macro flsetsig 1
  6616                              <3> 	flsetsig cs, %1
  6617                              <3> %endmacro
  6618                              <3> 
  6619                              <3> %macro flclrsig 1
  6620                              <3> 	flclrsig cs, %1
  6621                              <3> %endmacro
  6622                              <3> 
  6623                              <3> %macro flroundtoint16 2
  6624                              <3> 	flroundtoint16 cs, %1, cs, %2
  6625                              <3> %endmacro
  6626                              <3> 
  6627                              <3> %macro flroundtoint32 1
  6628                              <3> 	flroundtoint32 %1, %1
  6629                              <3> %endmacro
  6630                              <3> 
  6631                              <3> %macro flroundtoint32 2
  6632                              <3> 	flroundtoint32 cs, %1, cs, %2
  6633                              <3> %endmacro
  6634                              <3> 
  6635                              <3> %macro int16tofl 2
  6636                              <3> 	int16tofl cs, %1, cs, %2
  6637                              <3> %endmacro
  6638                              <3> 
  6639                              <3> %macro fltoint16 2
  6640                              <3> 	fltoint16 cs, %1, cs, %2
  6641                              <3> %endmacro
  6642                              <3> 
  6643                              <3> %macro fltoint32 1
  6644                              <3> 	fltoint32 %1, %1
  6645                              <3> %endmacro
  6646                              <3> 
  6647                              <3> %macro fltoint32 2
  6648                              <3> 	fltoint32 cs, %1, cs, %2
  6649                              <3> %endmacro
  6650                              <3> 
  6651                              <3> %macro int32tofl 1
  6652                              <3> 	int32tofl %1, %1
  6653                              <3> %endmacro
  6654                              <3> 
  6655                              <3> %macro int32tofl 2
  6656                              <3> 	int32tofl cs, %1, cs, %2
  6657                              <3> %endmacro
  6658                              <3> 
  6659                              <3> %macro flcmp 3
  6660                              <3> 	flcmp cs, %1, cs, %2, %3
  6661                              <3> %endmacro
  6662                              <3> 
  6663                              <3> %macro flshl 2
  6664                              <3> 	flshl cs, %1, cs, %2
  6665                              <3> %endmacro
  6666                              <3> 
  6667                              <3> %macro flshr 2
  6668                              <3> 	flshr cs, %1, cs, %2
  6669                              <3> %endmacro
  6670                              <3> 
  6671                              <3> %macro fladd 3
  6672                              <3> 	fladd cs, %1, cs, %2, cs, %3
  6673                              <3> %endmacro
  6674                              <3> 
  6675                              <3> %macro flsub 3
  6676                              <3> 	flsub cs, %1, cs, %2, cs, %3
  6677                              <3> %endmacro	
  6678                              <3> 
  6679                              <3> %macro flmul 3
  6680                              <3> 	flmul cs, %1, cs, %2, cs, %3
  6681                              <3> %endmacro
  6682                              <3> 
  6683                              <3> %macro fldiv 3
  6684                              <3> 	fldiv cs, %1, cs, %2, cs, %3
  6685                              <3> %endmacro	
  6686                              <3> 
  6687                              <3> %macro fladd 6
  6688                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  6689                              <3> %endmacro
  6690                              <3> 
  6691                              <3> %macro flsub 6
  6692                              <3> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  6693                              <3> %endmacro
  6694                              <3> 
  6695                              <3> %macro flroundtoint16 4
  6696                              <3> 	stkopen 0x06
  6697                              <3> 	mov ax,%1
  6698                              <3> 	mov ds,ax
  6699                              <3> 	mov ax,[%2+2]
  6700                              <3> 	mov [bp+0],ax
  6701                              <3> 	mov ax,[%2]
  6702                              <3> 	mov [bp+2],ax	
  6703                              <3> 	call proc_flroundtoint16
  6704                              <3> 	mov ax,sp
  6705                              <3> 	mov bp,ax
  6706                              <3> 	mov ax,%3
  6707                              <3> 	mov ds,ax
  6708                              <3> 	mov ax,[bp+4]
  6709                              <3> 	mov [%4],ax
  6710                              <3> 	stkclose 0x06
  6711                              <3> %endmacro
  6712                              <3> 
  6713                              <3> %macro flroundtoint32 4
  6714                              <3> 	stkopen 0x08
  6715                              <3> 	mov ax,%1
  6716                              <3> 	mov ds,ax
  6717                              <3> 	mov ax,[%2+2]
  6718                              <3> 	mov [bp+0],ax
  6719                              <3> 	mov ax,[%2]
  6720                              <3> 	mov [bp+2],ax	
  6721                              <3> 	call proc_flroundtoint32
  6722                              <3> 	mov ax,sp
  6723                              <3> 	mov bp,ax
  6724                              <3> 	mov ax,%3
  6725                              <3> 	mov ds,ax
  6726                              <3> 	mov ax,[bp+4]
  6727                              <3> 	mov [%4+2],ax
  6728                              <3> 	mov ax,[bp+6]
  6729                              <3> 	mov [%4],ax
  6730                              <3> 	stkclose 0x08
  6731                              <3> %endmacro
  6732                              <3> 
  6733                              <3> %macro fltoint16 4
  6734                              <3> 	stkopen 0x06
  6735                              <3> 	mov ax,%1
  6736                              <3> 	mov ds,ax
  6737                              <3> 	mov ax,[%2+2]
  6738                              <3> 	mov [bp+0],ax
  6739                              <3> 	mov ax,[%2]
  6740                              <3> 	mov [bp+2],ax	
  6741                              <3> 	call proc_fltoint16
  6742                              <3> 	mov ax,sp
  6743                              <3> 	mov bp,ax
  6744                              <3> 	mov ax,%3
  6745                              <3> 	mov ds,ax
  6746                              <3> 	mov ax,[bp+4]
  6747                              <3> 	mov [%4],ax
  6748                              <3> 	stkclose 0x06
  6749                              <3> %endmacro
  6750                              <3> 
  6751                              <3> %macro int16tofl 4	
  6752                              <3> 	stkopen 0x06
  6753                              <3> 	mov ax,%1
  6754                              <3> 	mov ds,ax
  6755                              <3> 	mov ax,[%2]
  6756                              <3> 	mov [bp+0],ax	
  6757                              <3> 	call proc_int16tofl
  6758                              <3> 	mov ax,sp
  6759                              <3> 	mov bp,ax
  6760                              <3> 	mov ax,%3
  6761                              <3> 	mov ds,ax
  6762                              <3> 	mov ax,[bp+2]
  6763                              <3> 	mov [%4+2],ax
  6764                              <3> 	mov ax,[bp+4]
  6765                              <3> 	mov [%4],ax
  6766                              <3> 	stkclose 0x06
  6767                              <3> %endmacro
  6768                              <3> 
  6769                              <3> %macro fltoint32 4
  6770                              <3> 	stkopen 0x08
  6771                              <3> 	mov ax,%1
  6772                              <3> 	mov ds,ax
  6773                              <3> 	mov ax,[%2+2]
  6774                              <3> 	mov [bp+0],ax
  6775                              <3> 	mov ax,[%2]
  6776                              <3> 	mov [bp+2],ax	
  6777                              <3> 	call proc_fltoint32
  6778                              <3> 	mov ax,sp
  6779                              <3> 	mov bp,ax
  6780                              <3> 	mov ax,%3
  6781                              <3> 	mov ds,ax
  6782                              <3> 	mov ax,[bp+4]
  6783                              <3> 	mov [%4+2],ax
  6784                              <3> 	mov ax,[bp+6]
  6785                              <3> 	mov [%4],ax
  6786                              <3> 	stkclose 0x08
  6787                              <3> %endmacro
  6788                              <3> 
  6789                              <3> %macro int32tofl 4
  6790                              <3> 	stkopen 0x08
  6791                              <3> 	mov ax,%1
  6792                              <3> 	mov ds,ax
  6793                              <3> 	mov ax,[%2+2]
  6794                              <3> 	mov [bp+0],ax
  6795                              <3> 	mov ax,[%2]
  6796                              <3> 	mov [bp+2],ax	
  6797                              <3> 	call proc_int32tofl
  6798                              <3> 	mov ax,sp
  6799                              <3> 	mov bp,ax
  6800                              <3> 	mov ax,%3
  6801                              <3> 	mov ds,ax
  6802                              <3> 	mov ax,[bp+4]
  6803                              <3> 	mov [%4+2],ax
  6804                              <3> 	mov ax,[bp+6]
  6805                              <3> 	mov [%4],ax
  6806                              <3> 	stkclose 0x08
  6807                              <3> %endmacro
  6808                              <3> 
  6809                              <3> %macro flgetsig 3
  6810                              <3> 	stkopen 0x04
  6811                              <3> 	mov ax,%1
  6812                              <3> 	mov ds,ax
  6813                              <3> 	mov ax,[%2+2]
  6814                              <3> 	mov word [bp+0], ax
  6815                              <3> 	call proc_flgetsig
  6816                              <3> 	push sp
  6817                              <3> 	pop bp
  6818                              <3> 	mov ax,[bp+2]
  6819                              <3> 	mov word %3, ax
  6820                              <3> 	stkclose 0x04
  6821                              <3> %endmacro
  6822                              <3> 
  6823                              <3> %macro flinvsig 2
  6824                              <3> 	stkopen 0x02
  6825                              <3> 	mov ax,%1
  6826                              <3> 	mov ds,ax
  6827                              <3> 	mov ax,[%2+2]
  6828                              <3> 	mov word [bp+0], ax
  6829                              <3> 	call proc_flinvsig
  6830                              <3> 	push sp
  6831                              <3> 	pop bp
  6832                              <3> 	mov ax,[bp+0]
  6833                              <3> 	mov word [%2+2],ax
  6834                              <3> 	stkclose 0x02
  6835                              <3> %endmacro
  6836                              <3> 
  6837                              <3> %macro flsetsig 2
  6838                              <3> 	stkopen 0x04
  6839                              <3> 	mov ax,%1
  6840                              <3> 	mov ds,ax
  6841                              <3> 	mov ax,[%2+2]
  6842                              <3> 	mov word [bp+0], ax
  6843                              <3> 	mov word [bp+2], 0x8000
  6844                              <3> 	call proc_flsetsig
  6845                              <3> 	push sp
  6846                              <3> 	pop bp
  6847                              <3> 	mov ax,[bp+0]
  6848                              <3> 	mov word [%2+2],ax
  6849                              <3> 	stkclose 0x04	
  6850                              <3> %endmacro
  6851                              <3> 
  6852                              <3> %macro flclrsig 2
  6853                              <3> 	stkopen 0x04
  6854                              <3> 	mov ax,%1
  6855                              <3> 	mov ds,ax
  6856                              <3> 	mov ax,[%2+2]
  6857                              <3> 	mov word [bp+0], ax
  6858                              <3> 	mov word [bp+2], 0x0000
  6859                              <3> 	call proc_flsetsig
  6860                              <3> 	push sp
  6861                              <3> 	pop bp
  6862                              <3> 	mov ax,[bp+0]
  6863                              <3> 	mov word [%2+2],ax
  6864                              <3> 	stkclose 0x04	
  6865                              <3> %endmacro
  6866                              <3> 
  6867                              <3> %macro flcmp 5	
  6868                              <3> 	stkopen 0x09
  6869                              <3> 	mov ax,%1
  6870                              <3> 	mov ds,ax
  6871                              <3> 	mov ax,[%2+2]
  6872                              <3> 	mov [bp+0],ax
  6873                              <3> 	mov ax,[%2]
  6874                              <3> 	mov [bp+2],ax
  6875                              <3> 	mov ax,%3
  6876                              <3> 	mov ds,ax
  6877                              <3> 	mov ax,[%4+2]
  6878                              <3> 	mov [bp+4],ax
  6879                              <3> 	mov ax,[%4]
  6880                              <3> 	mov [bp+6],ax
  6881                              <3> 	call proc_flcmp
  6882                              <3> 	mov ax,sp
  6883                              <3> 	mov bp,ax
  6884                              <3> 	mov byte %5,[bp+8]
  6885                              <3> 	stkclose 0x09
  6886                              <3> %endmacro
  6887                              <3> 
  6888                              <3> %macro flshl 4	
  6889                              <3> 	stkopen 0x03
  6890                              <3> 	mov ax,%1
  6891                              <3> 	mov ds,ax
  6892                              <3> 	mov ax,[%2+2]
  6893                              <3> 	mov [bp+0],ax
  6894                              <3> 	mov ax,%3
  6895                              <3> 	mov ds,ax
  6896                              <3> 	mov al,[%4]
  6897                              <3> 	mov [bp+2],al
  6898                              <3> 	call proc_flshl
  6899                              <3> 	mov ax,sp
  6900                              <3> 	mov bp,ax
  6901                              <3> 	mov ax,%1
  6902                              <3> 	mov ds,ax
  6903                              <3> 	mov ax,[bp+0]
  6904                              <3> 	mov [%2+2],ax
  6905                              <3> 	stkclose 0x03
  6906                              <3> %endmacro
  6907                              <3> 
  6908                              <3> %macro flshr 4	
  6909                              <3> 	stkopen 0x03
  6910                              <3> 	mov ax,%1
  6911                              <3> 	mov ds,ax
  6912                              <3> 	mov ax,[%2+2]
  6913                              <3> 	mov [bp+0],ax	
  6914                              <3> 	mov ax,%3
  6915                              <3> 	mov ds,ax
  6916                              <3> 	mov al,[%4]
  6917                              <3> 	mov [bp+2],al
  6918                              <3> 	call proc_flshr
  6919                              <3> 	mov ax,sp
  6920                              <3> 	mov bp,ax
  6921                              <3> 	mov ax,%1
  6922                              <3> 	mov ds,ax
  6923                              <3> 	mov ax,[bp+0]
  6924                              <3> 	mov [%2+2],ax
  6925                              <3> 	stkclose 0x03
  6926                              <3> %endmacro
  6927                              <3> 
  6928                              <3> %macro fldiv 6	
  6929                              <3> 	stkopen 0x0C
  6930                              <3> 	mov ax,%1
  6931                              <3> 	mov ds,ax
  6932                              <3> 	mov ax,[%2+2]
  6933                              <3> 	mov [bp+0],ax
  6934                              <3> 	mov ax,[%2]
  6935                              <3> 	mov [bp+2],ax
  6936                              <3> 	mov ax,%3
  6937                              <3> 	mov ds,ax
  6938                              <3> 	mov ax,[%4+2]
  6939                              <3> 	mov [bp+4],ax
  6940                              <3> 	mov ax,[%4]
  6941                              <3> 	mov [bp+6],ax
  6942                              <3> 	call proc_fldiv
  6943                              <3> 	mov ax,sp
  6944                              <3> 	mov bp,ax
  6945                              <3> 	mov ax,%5
  6946                              <3> 	mov ds,ax
  6947                              <3> 	mov ax,[bp+8]
  6948                              <3> 	mov [%6+2],ax
  6949                              <3> 	mov ax,[bp+0x0A]
  6950                              <3> 	mov [%6],ax
  6951                              <3> 	stkclose 0x0C
  6952                              <3> %endmacro
  6953                              <3> 
  6954                              <3> %macro flmul 6	
  6955                              <3> 	stkopen 0x0C
  6956                              <3> 	mov ax,%1
  6957                              <3> 	mov ds,ax
  6958                              <3> 	mov ax,[%2+2]
  6959                              <3> 	mov [bp+0],ax
  6960                              <3> 	mov ax,[%2]
  6961                              <3> 	mov [bp+2],ax
  6962                              <3> 	mov ax,%3
  6963                              <3> 	mov ds,ax
  6964                              <3> 	mov ax,[%4+2]
  6965                              <3> 	mov [bp+4],ax
  6966                              <3> 	mov ax,[%4]
  6967                              <3> 	mov [bp+6],ax
  6968                              <3> 	call proc_flmul
  6969                              <3> 	mov ax,sp
  6970                              <3> 	mov bp,ax
  6971                              <3> 	mov ax,%5
  6972                              <3> 	mov ds,ax
  6973                              <3> 	mov ax,[bp+8]
  6974                              <3> 	mov [%6+2],ax
  6975                              <3> 	mov ax,[bp+0x0A]
  6976                              <3> 	mov [%6],ax
  6977                              <3> 	stkclose 0x0C
  6978                              <3> %endmacro
  6979                              <3> 	
  6980                              <3> %macro fladdorsub 7
  6981                              <3> 	stkopen 0x0E
  6982                              <3> 	mov ax,%1
  6983                              <3> 	mov ds,ax
  6984                              <3> 	mov ax,[%2+2]
  6985                              <3> 	mov [bp+0],ax
  6986                              <3> 	mov ax,[%2]
  6987                              <3> 	mov [bp+2],ax
  6988                              <3> 	mov ax,%3
  6989                              <3> 	mov ds,ax
  6990                              <3> 	mov ax,[%4+2]
  6991                              <3> 	mov [bp+4],ax
  6992                              <3> 	mov ax,[%4]
  6993                              <3> 	mov [bp+6],ax
  6994                              <3> 	mov word [bp+0x0C], %7
  6995                              <3> 	call proc_fladdorsub
  6996                              <3> 	mov ax,sp
  6997                              <3> 	mov bp,ax
  6998                              <3> 	mov ax,%5
  6999                              <3> 	mov ds,ax
  7000                              <3> 	mov ax,[bp+8]
  7001                              <3> 	mov [%6+2],ax
  7002                              <3> 	mov ax,[bp+0x0A]
  7003                              <3> 	mov [%6],ax
  7004                              <3> 	stkclose 0x0E
  7005                              <3> %endmacro
  7006                              <3> 	
  7007                              <3> %endif
  7008                              <2> 	%include "lib/trigon.mac"
  7009                              <3> 
  7010                              <3> %ifndef TRIGON_MAC
  7011                              <3> 	%define TRIGON_MAC
  7012                              <3> 
  7013                              <3> 	%include "lib/trigon.asm"
  7014                              <4> 
  7015                              <4> %ifndef TRIGON_ASM
  7016                              <4> 	%define TRIGON_ASM
  7017                              <4> 
  7018                              <4> 	%include "lib/system.mac"
  7019                              <5>  
  7020                              <5> %ifndef SYSTEM_MAC
  7021                              <5>  	%define SYSTEM_MAC
  7022                              <5>  	
  7023                              <5> 	%ifndef TRUE
  7024                              <5> 		%define TRUE 01h
  7025                              <5> 	%endif
  7026                              <5> 	%ifndef FALSE
  7027                              <5> 		%define FALSE 00h
  7028                              <5> 	%endif
  7029                              <5> 	
  7030                              <5> %macro vlodsb 3
  7031                              <5> 	vlodsb cs, %1, %2, %3
  7032                              <5> %endmacro
  7033                              <5> 
  7034                              <5> %macro vstosb 3
  7035                              <5> 	vstosb cs, %1, %2, %3
  7036                              <5> %endmacro
  7037                              <5> 	 	
  7038                              <5> %macro int16toreg 2
  7039                              <5> 	int16toreg cs, %1, %2
  7040                              <5> %endmacro
  7041                              <5> 
  7042                              <5> %macro regtoint16 2
  7043                              <5> 	regtoint16 %1, cs, %2
  7044                              <5> %endmacro
  7045                              <5> 
  7046                              <5> %macro vstosb 4
  7047                              <5> 	push %1
  7048                              <5> 	pop ds
  7049                              <5> 	mov si,%2
  7050                              <5> 	add si,%3
  7051                              <5> 	mov byte [si],%4	
  7052                              <5> %endmacro
  7053                              <5> 
  7054                              <5> %macro vlodsb 4
  7055                              <5> 	push %1
  7056                              <5> 	pop ds
  7057                              <5> 	mov si,%2
  7058                              <5> 	add si,%3
  7059                              <5> 	mov byte %4,[si]	
  7060                              <5> %endmacro 	 
  7061                              <5> 
  7062                              <5> %macro int16toreg 3
  7063                              <5> 	push %2
  7064                              <5> 	push %1
  7065                              <5> 	pop ds
  7066                              <5> 	pop si
  7067                              <5> 	mov word %3,[si]	
  7068                              <5> %endmacro
  7069                              <5> 
  7070                              <5> %macro regtoint16 3
  7071                              <5> 	push %3
  7072                              <5> 	push %2
  7073                              <5> 	pop ds
  7074                              <5> 	pop si
  7075                              <5> 	mov word [si],%1	
  7076                              <5> %endmacro
  7077                              <5> 
  7078                              <5> %macro mov32 2
  7079                              <5> 	mov32 cs, %1, cs, %2
  7080                              <5> %endmacro
  7081                              <5> 
  7082                              <5> %macro mov16 2
  7083                              <5> 	mov16 cs, %1, cs, %2
  7084                              <5> %endmacro
  7085                              <5> 
  7086                              <5> %macro mov32 4
  7087                              <5> 	mov ax,%3
  7088                              <5> 	mov ds,ax
  7089                              <5> 	mov cx,[%4+2]
  7090                              <5> 	mov dx,[%4]
  7091                              <5> 	mov ax,%1
  7092                              <5> 	mov ds,ax
  7093                              <5> 	mov [%2+2],cx
  7094                              <5> 	mov [%2],dx
  7095                              <5> %endmacro
  7096                              <5> 
  7097                              <5> %macro mov16 4
  7098                              <5> 	mov ax,%3
  7099                              <5> 	mov ds,ax
  7100                              <5> 	mov bx,[%4]
  7101                              <5> 	mov ax,%1
  7102                              <5> 	mov ds,ax
  7103                              <5> 	mov [%2],bx
  7104                              <5> %endmacro
  7105                              <5>  	 	
  7106                              <5> %macro mformat 4
  7107                              <5> 	stkopen 8
  7108                              <5> 	mov word [ bp + 0 ], %1
  7109                              <5> 	mov word [ bp + 2 ], %2
  7110                              <5> 	mov word [ bp + 4 ], %3
  7111                              <5> 	mov word [ bp + 6 ], %4
  7112                              <5> 	call kernel_segment:mformat
  7113                              <5> 	stkclose 8
  7114                              <5> %endmacro
  7115                              <5> 
  7116                              <5> %macro malloc 6
  7117                              <5> 	stkopen 0Bh
  7118                              <5> 	mov word [ bp + 4 ], %3
  7119                              <5> 	mov word [ bp + 6 ], %4
  7120                              <5> 	mov word [ bp + 8 ], %5	
  7121                              <5> 	call kernel_segment:malloc
  7122                              <5> 	push sp
  7123                              <5> 	pop bp
  7124                              <5> 	mov word %1, [ bp ]
  7125                              <5> 	mov word %2, [ bp + 2 ]
  7126                              <5> 	mov byte %6, [ bp + 0x0A ]
  7127                              <5> 	stkclose 0Bh
  7128                              <5> %endmacro 	
  7129                              <5> 
  7130                              <5> %macro laddr 2
  7131                              <5> 	laddr %1, %2, %1, %2
  7132                              <5> %endmacro
  7133                              <5> 
  7134                              <5> %macro faddr 2
  7135                              <5> 	faddr %1, %2, %1, %2
  7136                              <5> %endmacro
  7137                              <5>  	
  7138                              <5> %macro laddr 4
  7139                              <5> 	stkopen 8
  7140                              <5> 	mov word [ bp + 4 ], %3
  7141                              <5> 	mov word [ bp + 6 ], %4	
  7142                              <5> 	call kernel_segment:laddr
  7143                              <5> 	push sp
  7144                              <5> 	pop bp
  7145                              <5> 	mov word %1, [ bp + 0 ]
  7146                              <5> 	mov word %2, [ bp + 2 ]	
  7147                              <5> 	stkclose 8
  7148                              <5> %endmacro
  7149                              <5> 
  7150                              <5> %macro faddr 4
  7151                              <5> 	stkopen 8
  7152                              <5> 	mov word [ bp + 4 ], %3
  7153                              <5> 	mov word [ bp + 6 ], %4	
  7154                              <5> 	call kernel_segment:faddr
  7155                              <5> 	push sp
  7156                              <5> 	pop bp
  7157                              <5> 	mov word %1, [ bp + 0 ]
  7158                              <5> 	mov word %2, [ bp + 2 ]	
  7159                              <5> 	stkclose 8
  7160                              <5> %endmacro	
  7161                              <5>  
  7162                              <5> 
  7163                              <5> %macro stkopen 1		
  7164                              <5> 	sub word sp, %1
  7165                              <5> 	push sp
  7166                              <5> 	pop bp
  7167                              <5> %endmacro
  7168                              <5> 
  7169                              <5> %macro stkclose 1
  7170                              <5> 	add word sp, %1
  7171                              <5> %endmacro
  7172                              <5> 
  7173                              <5> %macro stkload 1-* 	
  7174                              <5>  	%rep %0
  7175                              <5>  	 	%rotate -1
  7176                              <5>  		pop %1
  7177                              <5>  	%endrep
  7178                              <5>  	%rep %0
  7179                              <5>  		push %1
  7180                              <5>  		%rotate 1
  7181                              <5>  	%endrep
  7182                              <5> %endmacro
  7183                              <5> 
  7184                              <5> %macro stkpush 1-* 	
  7185                              <5>  	%rep %0
  7186                              <5>  		push %1
  7187                              <5>  		%rotate 1
  7188                              <5>  	%endrep 	
  7189                              <5> %endmacro
  7190                              <5>  
  7191                              <5> %macro stkpop 1-*
  7192                              <5>  	%rep %0
  7193                              <5>  	 	%rotate -1
  7194                              <5>  		pop %1
  7195                              <5>  	%endrep 	 	
  7196                              <5> %endmacro
  7197                              <5> 
  7198                              <5> %endif 
  7199                              <4> 	%include "lib/math.mac"
  7200                              <5> 
  7201                              <5> %ifndef MATH_MAC
  7202                              <5> 	%define MATH_MAC
  7203                              <5> 	
  7204                              <5> 	%include "lib/math.asm"
  7205                              <5> 	%include "lib/system.mac"
  7206                              <5> 
  7207                              <5> %macro chgsig 1
  7208                              <5> 	chgsig cs, %1
  7209                              <5> %endmacro
  7210                              <5> 
  7211                              <5> %macro cmp16 3
  7212                              <5> 	cmp16 cs, %1, cs, %2, %3
  7213                              <5> %endmacro
  7214                              <5> 
  7215                              <5> %macro mul16 2
  7216                              <5> 	mul16 cs, %1, cs, %2
  7217                              <5> %endmacro
  7218                              <5> 
  7219                              <5> %macro div16 2
  7220                              <5> 	div16 cs, %1, cs, %2
  7221                              <5> %endmacro
  7222                              <5> 
  7223                              <5> %macro mod16 2
  7224                              <5> 	mod16 cs, %1, cs, %2
  7225                              <5> %endmacro
  7226                              <5> 
  7227                              <5> %macro inc16 1
  7228                              <5> 	inc16 cs, %1
  7229                              <5> %endmacro
  7230                              <5> 
  7231                              <5> %macro dec16 1
  7232                              <5> 	dec16 cs, %1
  7233                              <5> %endmacro
  7234                              <5> 
  7235                              <5> %macro add16 2
  7236                              <5> 	add16 cs, %1, cs, %2
  7237                              <5> %endmacro
  7238                              <5> 
  7239                              <5> %macro sub16 2
  7240                              <5> 	sub16 cs, %1, cs, %2
  7241                              <5> %endmacro
  7242                              <5> 
  7243                              <5> %macro int32to16 2
  7244                              <5> 	int32to16 cs, %1, %2
  7245                              <5> %endmacro
  7246                              <5> 
  7247                              <5> %macro int16to32 2
  7248                              <5> 	int16to32 %1, cs, %2
  7249                              <5> %endmacro
  7250                              <5> 
  7251                              <5> %macro idiv32 5
  7252                              <5> 	idiv32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  7253                              <5> %endmacro
  7254                              <5> 
  7255                              <5> %macro imul32 3
  7256                              <5> 	imul32 cs, %1, cs, %2, cs, %3
  7257                              <5> %endmacro
  7258                              <5> 
  7259                              <5> %macro div32 5
  7260                              <5> 	div32 cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
  7261                              <5> %endmacro
  7262                              <5> 
  7263                              <5> %macro mul32 3
  7264                              <5> 	mul32 cs, %1, cs, %2, cs, %3
  7265                              <5> %endmacro
  7266                              <5> 	
  7267                              <5> %macro add32 3
  7268                              <5> 	add32 cs, %1, cs, %2, cs, %3
  7269                              <5> %endmacro
  7270                              <5> 
  7271                              <5> %macro sub32 3
  7272                              <5> 	sub32 cs, %1, cs, %2, cs, %3
  7273                              <5> %endmacro
  7274                              <5> 
  7275                              <5> %macro int32to16 3
  7276                              <5> 	stkopen 0x06
  7277                              <5> 	mov ax,%1
  7278                              <5> 	mov ds,ax
  7279                              <5> 	mov ax,[%2+2]
  7280                              <5> 	mov word [bp+0], ax
  7281                              <5> 	mov ax,[%2]	
  7282                              <5> 	mov word [bp+2], ax
  7283                              <5> 	call proc_int32to16
  7284                              <5> 	mov ax,sp
  7285                              <5> 	mov bp,ax
  7286                              <5> 	mov ax,[bp+4]
  7287                              <5> 	mov word %3, ax	
  7288                              <5> 	stkclose 0x06
  7289                              <5> %endmacro
  7290                              <5> 
  7291                              <5> %macro int16to32 3
  7292                              <5> 	stkopen 0x06
  7293                              <5> 	mov word [bp+0], %1	
  7294                              <5> 	call proc_int16to32
  7295                              <5> 	mov ax,sp
  7296                              <5> 	mov bp,ax
  7297                              <5> 	mov ax,%2
  7298                              <5> 	mov ds,ax
  7299                              <5> 	mov ax,[bp+2]
  7300                              <5> 	mov [%3+2],ax
  7301                              <5> 	mov ax,[bp+4]
  7302                              <5> 	mov [%3],ax	
  7303                              <5> 	stkclose 0x06
  7304                              <5> %endmacro
  7305                              <5> 
  7306                              <5> %macro div32 10
  7307                              <5> 	stkopen 0x11
  7308                              <5> 	mov ax,%1
  7309                              <5> 	mov ds,ax
  7310                              <5> 	mov ax,[%2+2]
  7311                              <5> 	mov word [bp+0], ax
  7312                              <5> 	mov ax,[%2]
  7313                              <5> 	mov word [bp+2], ax
  7314                              <5> 	mov ax,%3
  7315                              <5> 	mov ds,ax
  7316                              <5> 	mov ax,[%4+2]
  7317                              <5> 	mov word [bp+4], ax
  7318                              <5> 	mov ax,[%4]
  7319                              <5> 	mov word [bp+6], ax
  7320                              <5> 	call proc_div32
  7321                              <5> 	mov ax,sp
  7322                              <5> 	mov bp,ax
  7323                              <5> 	mov ax,%5
  7324                              <5> 	mov ds,ax
  7325                              <5> 	mov word ax, [bp+8]
  7326                              <5> 	mov word [%6+2], ax
  7327                              <5> 	mov word ax, [bp+0x0A]
  7328                              <5> 	mov word [%6], ax
  7329                              <5> 	mov ax,%7
  7330                              <5> 	mov ds,ax
  7331                              <5> 	mov word ax,[bp+0x0C]
  7332                              <5> 	mov word [%8+2],ax
  7333                              <5> 	mov word ax,[bp+0x0E]
  7334                              <5> 	mov word [%8],ax
  7335                              <5> 	mov ax,%9
  7336                              <5> 	mov ds,ax
  7337                              <5> 	mov byte al,[bp+0x10]
  7338                              <5> 	mov byte [%10],al
  7339                              <5> 	stkclose 0x11
  7340                              <5> %endmacro
  7341                              <5> 	
  7342                              <5> %macro mul32 6
  7343                              <5> 	stkopen 0x0C
  7344                              <5> 	mov ax,%1
  7345                              <5> 	mov ds,ax
  7346                              <5> 	mov ax,[%2+2]
  7347                              <5> 	mov word [bp+0], ax
  7348                              <5> 	mov ax,[%2]
  7349                              <5> 	mov word [bp+2], ax
  7350                              <5> 	mov ax,%3
  7351                              <5> 	mov ds,ax
  7352                              <5> 	mov ax,[%4+2]
  7353                              <5> 	mov word [bp+4], ax
  7354                              <5> 	mov ax,[%4]
  7355                              <5> 	mov word [bp+6], ax
  7356                              <5> 	call proc_mul32
  7357                              <5> 	mov ax,sp
  7358                              <5> 	mov bp,ax
  7359                              <5> 	mov ax,%5
  7360                              <5> 	mov ds,ax
  7361                              <5> 	mov word ax, [bp+8]
  7362                              <5> 	mov word [%6+2], ax
  7363                              <5> 	mov word ax, [bp+0x0A]
  7364                              <5> 	mov word [%6], ax
  7365                              <5> 	stkclose 0x0C
  7366                              <5> %endmacro	
  7367                              <5> 	
  7368                              <5> %macro add32 6
  7369                              <5> 	stkopen 0x0C
  7370                              <5> 	mov ax,%1
  7371                              <5> 	mov ds,ax
  7372                              <5> 	mov ax,[%2+2]
  7373                              <5> 	mov word [bp+0], ax
  7374                              <5> 	mov ax,[%2]
  7375                              <5> 	mov word [bp+2], ax
  7376                              <5> 	mov ax,%3
  7377                              <5> 	mov ds,ax
  7378                              <5> 	mov ax,[%4+2]
  7379                              <5> 	mov word [bp+4], ax
  7380                              <5> 	mov ax,[%4]
  7381                              <5> 	mov word [bp+6], ax
  7382                              <5> 	call proc_add32
  7383                              <5> 	mov ax,sp
  7384                              <5> 	mov bp,ax
  7385                              <5> 	mov ax,%5
  7386                              <5> 	mov ds,ax
  7387                              <5> 	mov word ax, [bp+8]
  7388                              <5> 	mov word [%6+2], ax
  7389                              <5> 	mov word ax, [bp+0x0A]
  7390                              <5> 	mov word [%6], ax
  7391                              <5> 	stkclose 0x0C
  7392                              <5> %endmacro
  7393                              <5> 
  7394                              <5> %macro sub32 6
  7395                              <5> 	stkopen 0x0C
  7396                              <5> 	mov ax,%1
  7397                              <5> 	mov ds,ax
  7398                              <5> 	mov ax,[%2+2]
  7399                              <5> 	mov word [bp+0], ax
  7400                              <5> 	mov ax,[%2]
  7401                              <5> 	mov word [bp+2], ax
  7402                              <5> 	mov ax,%3
  7403                              <5> 	mov ds,ax
  7404                              <5> 	mov ax,[%4+2]
  7405                              <5> 	mov word [bp+4], ax
  7406                              <5> 	mov ax,[%4]
  7407                              <5> 	mov word [bp+6], ax
  7408                              <5> 	call proc_sub32
  7409                              <5> 	mov ax,sp
  7410                              <5> 	mov bp,ax
  7411                              <5> 	mov ax,%5
  7412                              <5> 	mov ds,ax
  7413                              <5> 	mov word ax, [bp+8]
  7414                              <5> 	mov word [%6+2], ax
  7415                              <5> 	mov word ax, [bp+0x0A]
  7416                              <5> 	mov word [%6], ax
  7417                              <5> 	stkclose 0x0C
  7418                              <5> %endmacro
  7419                              <5> 
  7420                              <5> %macro idiv32 10
  7421                              <5> 	stkopen 0x11
  7422                              <5> 	mov ax,%1
  7423                              <5> 	mov ds,ax
  7424                              <5> 	mov ax,[%2+2]
  7425                              <5> 	mov word [bp+0], ax
  7426                              <5> 	mov ax,[%2]
  7427                              <5> 	mov word [bp+2], ax
  7428                              <5> 	mov ax,%3
  7429                              <5> 	mov ds,ax
  7430                              <5> 	mov ax,[%4+2]
  7431                              <5> 	mov word [bp+4], ax
  7432                              <5> 	mov ax,[%4]
  7433                              <5> 	mov word [bp+6], ax
  7434                              <5> 	call proc_idiv32
  7435                              <5> 	mov ax,sp
  7436                              <5> 	mov bp,ax
  7437                              <5> 	mov ax,%5
  7438                              <5> 	mov ds,ax
  7439                              <5> 	mov word ax, [bp+8]
  7440                              <5> 	mov word [%6+2], ax
  7441                              <5> 	mov word ax, [bp+0x0A]
  7442                              <5> 	mov word [%6], ax
  7443                              <5> 	mov ax,%7
  7444                              <5> 	mov ds,ax
  7445                              <5> 	mov word ax,[bp+0x0C]
  7446                              <5> 	mov word [%8+2],ax
  7447                              <5> 	mov word ax,[bp+0x0E]
  7448                              <5> 	mov word [%8],ax
  7449                              <5> 	mov ax,%9
  7450                              <5> 	mov ds,ax
  7451                              <5> 	mov byte al,[bp+0x10]
  7452                              <5> 	mov byte [%10],al
  7453                              <5> 	stkclose 0x11
  7454                              <5> %endmacro
  7455                              <5> 
  7456                              <5> %macro imul32 6
  7457                              <5> 	stkopen 0x0C
  7458                              <5> 	mov ax,%1
  7459                              <5> 	mov ds,ax
  7460                              <5> 	mov ax,[%2+2]
  7461                              <5> 	mov word [bp+0], ax
  7462                              <5> 	mov ax,[%2]
  7463                              <5> 	mov word [bp+2], ax
  7464                              <5> 	mov ax,%3
  7465                              <5> 	mov ds,ax
  7466                              <5> 	mov ax,[%4+2]
  7467                              <5> 	mov word [bp+4], ax
  7468                              <5> 	mov ax,[%4]
  7469                              <5> 	mov word [bp+6], ax
  7470                              <5> 	call proc_imul32
  7471                              <5> 	mov ax,sp
  7472                              <5> 	mov bp,ax
  7473                              <5> 	mov ax,%5
  7474                              <5> 	mov ds,ax
  7475                              <5> 	mov word ax, [bp+8]
  7476                              <5> 	mov word [%6+2], ax
  7477                              <5> 	mov word ax, [bp+0x0A]
  7478                              <5> 	mov word [%6], ax
  7479                              <5> 	stkclose 0x0C
  7480                              <5> %endmacro
  7481                              <5> 	
  7482                              <5> %macro cmp32 3
  7483                              <5> 	cmp32 cs, %1, cs, %2, %3
  7484                              <5> %endmacro	
  7485                              <5> 	
  7486                              <5> %macro cmp32 5
  7487                              <5> 	stkopen 9
  7488                              <5> 	mov ax,%1
  7489                              <5> 	mov ds,ax
  7490                              <5> 	mov word ax,[%2+2]
  7491                              <5> 	mov word [bp+0], ax
  7492                              <5> 	mov word ax,[%2]
  7493                              <5> 	mov word [bp+2], ax	
  7494                              <5> 	mov ax,%3
  7495                              <5> 	mov ds,ax
  7496                              <5> 	mov word ax,[%4+2]
  7497                              <5> 	mov word [bp+4], ax
  7498                              <5> 	mov word ax,[%4]
  7499                              <5> 	mov word [bp+6], ax	
  7500                              <5> 	call proc_cmp32
  7501                              <5> 	mov ax,sp
  7502                              <5> 	mov bp,ax
  7503                              <5> 	mov al,[bp+8]
  7504                              <5> 	mov byte %5,al
  7505                              <5> 	stkclose 9
  7506                              <5> %endmacro
  7507                              <5> 	
  7508                              <5> %macro shl32 2
  7509                              <5> 	shl32 cs, %1, %2
  7510                              <5> %endmacro	
  7511                              <5> 	
  7512                              <5> %macro shl32 3
  7513                              <5> 	stkopen 5
  7514                              <5> 	mov ax,%1
  7515                              <5> 	mov ds,ax
  7516                              <5> 	mov word ax,[%2+2]
  7517                              <5> 	mov word [bp+0], ax
  7518                              <5> 	mov word ax,[%2]
  7519                              <5> 	mov word [bp+2], ax
  7520                              <5> 	mov byte al, %3
  7521                              <5> 	mov byte [bp+4], al 
  7522                              <5> 	call proc_shl32
  7523                              <5> 	mov ax,sp
  7524                              <5> 	mov bp,ax
  7525                              <5> 	mov ax,%1
  7526                              <5> 	mov ds,ax
  7527                              <5> 	mov ax,[bp+0]
  7528                              <5> 	mov word [%2+2],ax
  7529                              <5> 	mov ax,[bp+2]
  7530                              <5> 	mov word [%2],ax
  7531                              <5> 	stkclose 5
  7532                              <5> %endmacro
  7533                              <5> 
  7534                              <5> 
  7535                              <5> %macro shr32 2
  7536                              <5> 	shr32 cs, %1, %2
  7537                              <5> %endmacro	
  7538                              <5> 	
  7539                              <5> %macro shr32 3
  7540                              <5> 	stkopen 5
  7541                              <5> 	mov ax,%1
  7542                              <5> 	mov ds,ax
  7543                              <5> 	mov word ax,[%2+2]
  7544                              <5> 	mov word [bp+0], ax
  7545                              <5> 	mov word ax,[%2]
  7546                              <5> 	mov word [bp+2], ax
  7547                              <5> 	mov byte al, %3
  7548                              <5> 	mov byte [bp+4], al 
  7549                              <5> 	call proc_shr32
  7550                              <5> 	mov ax,sp
  7551                              <5> 	mov bp,ax
  7552                              <5> 	mov ax,%1
  7553                              <5> 	mov ds,ax
  7554                              <5> 	mov ax,[bp+0]
  7555                              <5> 	mov word [%2+2],ax
  7556                              <5> 	mov ax,[bp+2]
  7557                              <5> 	mov word [%2],ax
  7558                              <5> 	stkclose 5
  7559                              <5> %endmacro
  7560                              <5> 
  7561                              <5> %macro inc16 2
  7562                              <5> 	mov ax,%1
  7563                              <5> 	mov ds,ax
  7564                              <5> 	inc word [%2]
  7565                              <5> %endmacro
  7566                              <5> 
  7567                              <5> %macro dec16 2
  7568                              <5> 	mov ax,%1
  7569                              <5> 	mov ds,ax
  7570                              <5> 	dec word [%2]
  7571                              <5> %endmacro
  7572                              <5> 
  7573                              <5> %macro add16 4	
  7574                              <5> 	mov ax,%3
  7575                              <5> 	mov ds,ax
  7576                              <5> 	mov bx,[%4]	
  7577                              <5> 	mov ax,%1
  7578                              <5> 	mov ds,ax	
  7579                              <5> 	add [%2],bx
  7580                              <5> %endmacro
  7581                              <5> 
  7582                              <5> %macro sub16 4
  7583                              <5> 	mov ax,%3
  7584                              <5> 	mov ds,ax
  7585                              <5> 	mov bx,[%4]
  7586                              <5> 	mov ax,%1
  7587                              <5> 	mov ds,ax
  7588                              <5> 	sub [%2],bx
  7589                              <5> %endmacro
  7590                              <5> 
  7591                              <5> %macro mul16 4
  7592                              <5> 	mov ax,%1
  7593                              <5> 	mov ds,ax
  7594                              <5> 	mov bx,[%2]
  7595                              <5> 	mov ax,%3
  7596                              <5> 	mov ds,ax
  7597                              <5> 	mov cx,[%4]
  7598                              <5> 	
  7599                              <5> 	mov ax,bx
  7600                              <5> 	imul cx
  7601                              <5> 	
  7602                              <5> 	mov dx,%1
  7603                              <5> 	mov ds,dx
  7604                              <5> 	mov [%2],ax
  7605                              <5> %endmacro
  7606                              <5> 
  7607                              <5> %macro div16 4
  7608                              <5> 	mov ax,%1
  7609                              <5> 	mov ds,ax
  7610                              <5> 	mov bx,[%2]
  7611                              <5> 	mov ax,%3
  7612                              <5> 	mov ds,ax
  7613                              <5> 	mov cx,[%4]
  7614                              <5> 	
  7615                              <5> 	xor dx,dx
  7616                              <5> 	mov ax,bx
  7617                              <5> 	idiv cx
  7618                              <5> 	
  7619                              <5> 	mov dx,%1
  7620                              <5> 	mov ds,dx
  7621                              <5> 	mov [%2],ax
  7622                              <5> %endmacro
  7623                              <5> 
  7624                              <5> 
  7625                              <5> %macro mod16 4
  7626                              <5> 	mov ax,%1
  7627                              <5> 	mov ds,ax
  7628                              <5> 	mov bx,[%2]
  7629                              <5> 	mov ax,%3
  7630                              <5> 	mov ds,ax
  7631                              <5> 	mov cx,[%4]
  7632                              <5> 	
  7633                              <5> 	xor dx,dx
  7634                              <5> 	mov ax,bx
  7635                              <5> 	idiv cx
  7636                              <5> 	
  7637                              <5> 	mov bx,%1
  7638                              <5> 	mov ds,bx
  7639                              <5> 	mov [%2],dx
  7640                              <5> %endmacro
  7641                              <5> 
  7642                              <5> %macro cmp16 5
  7643                              <5> 	mov ax,%1
  7644                              <5> 	mov ds,ax
  7645                              <5> 	mov bx,[%2]
  7646                              <5> 	mov ax,%3
  7647                              <5> 	mov ds,ax
  7648                              <5> 	mov	cx,[%4]
  7649                              <5> 	
  7650                              <5> 	cmp bx,cx
  7651                              <5> 	jg %%above
  7652                              <5> 	jl %%below
  7653                              <5> 		mov byte %5, 0
  7654                              <5> 		jmp %%endcmp
  7655                              <5> 	%%above:
  7656                              <5> 		mov byte %5, 1
  7657                              <5> 		jmp %%endcmp
  7658                              <5> 	%%below:
  7659                              <5> 		mov byte %5, -1
  7660                              <5> 	%%endcmp:
  7661                              <5> %endmacro
  7662                              <5> 
  7663                              <5> %macro chgsig 2
  7664                              <5> 	mov ax,%1
  7665                              <5> 	mov ds,ax
  7666                              <5> 	mov ax,[%2]
  7667                              <5> 	mov bx,0xFFFF
  7668                              <5> 	sub bx,ax
  7669                              <5> 	inc bx
  7670                              <5> 	mov [%2],bx
  7671                              <5> %endmacro
  7672                              <5> 	
  7673                              <5> %endif
  7674                              <4> 	%include "lib/float.mac"
  7675                              <5> 
  7676                              <5> %ifndef FLOAT_MAC
  7677                              <5> 	%define FLOAT_MAC
  7678                              <5> 	
  7679                              <5> 	%include "lib/float.asm"	
  7680                              <5> 
  7681                              <5> %macro flgetsig 2
  7682                              <5> 	flgetsig cs, %1, %2
  7683                              <5> %endmacro
  7684                              <5> 
  7685                              <5> %macro flinvsig 1
  7686                              <5> 	flinvsig cs, %1
  7687                              <5> %endmacro
  7688                              <5> 
  7689                              <5> %macro flsetsig 1
  7690                              <5> 	flsetsig cs, %1
  7691                              <5> %endmacro
  7692                              <5> 
  7693                              <5> %macro flclrsig 1
  7694                              <5> 	flclrsig cs, %1
  7695                              <5> %endmacro
  7696                              <5> 
  7697                              <5> %macro flroundtoint16 2
  7698                              <5> 	flroundtoint16 cs, %1, cs, %2
  7699                              <5> %endmacro
  7700                              <5> 
  7701                              <5> %macro flroundtoint32 1
  7702                              <5> 	flroundtoint32 %1, %1
  7703                              <5> %endmacro
  7704                              <5> 
  7705                              <5> %macro flroundtoint32 2
  7706                              <5> 	flroundtoint32 cs, %1, cs, %2
  7707                              <5> %endmacro
  7708                              <5> 
  7709                              <5> %macro int16tofl 2
  7710                              <5> 	int16tofl cs, %1, cs, %2
  7711                              <5> %endmacro
  7712                              <5> 
  7713                              <5> %macro fltoint16 2
  7714                              <5> 	fltoint16 cs, %1, cs, %2
  7715                              <5> %endmacro
  7716                              <5> 
  7717                              <5> %macro fltoint32 1
  7718                              <5> 	fltoint32 %1, %1
  7719                              <5> %endmacro
  7720                              <5> 
  7721                              <5> %macro fltoint32 2
  7722                              <5> 	fltoint32 cs, %1, cs, %2
  7723                              <5> %endmacro
  7724                              <5> 
  7725                              <5> %macro int32tofl 1
  7726                              <5> 	int32tofl %1, %1
  7727                              <5> %endmacro
  7728                              <5> 
  7729                              <5> %macro int32tofl 2
  7730                              <5> 	int32tofl cs, %1, cs, %2
  7731                              <5> %endmacro
  7732                              <5> 
  7733                              <5> %macro flcmp 3
  7734                              <5> 	flcmp cs, %1, cs, %2, %3
  7735                              <5> %endmacro
  7736                              <5> 
  7737                              <5> %macro flshl 2
  7738                              <5> 	flshl cs, %1, cs, %2
  7739                              <5> %endmacro
  7740                              <5> 
  7741                              <5> %macro flshr 2
  7742                              <5> 	flshr cs, %1, cs, %2
  7743                              <5> %endmacro
  7744                              <5> 
  7745                              <5> %macro fladd 3
  7746                              <5> 	fladd cs, %1, cs, %2, cs, %3
  7747                              <5> %endmacro
  7748                              <5> 
  7749                              <5> %macro flsub 3
  7750                              <5> 	flsub cs, %1, cs, %2, cs, %3
  7751                              <5> %endmacro	
  7752                              <5> 
  7753                              <5> %macro flmul 3
  7754                              <5> 	flmul cs, %1, cs, %2, cs, %3
  7755                              <5> %endmacro
  7756                              <5> 
  7757                              <5> %macro fldiv 3
  7758                              <5> 	fldiv cs, %1, cs, %2, cs, %3
  7759                              <5> %endmacro	
  7760                              <5> 
  7761                              <5> %macro fladd 6
  7762                              <5> 	fladdorsub %1, %2, %3, %4, %5, %6, 0
  7763                              <5> %endmacro
  7764                              <5> 
  7765                              <5> %macro flsub 6
  7766                              <5> 	fladdorsub %1, %2, %3, %4, %5, %6, 0x8000
  7767                              <5> %endmacro
  7768                              <5> 
  7769                              <5> %macro flroundtoint16 4
  7770                              <5> 	stkopen 0x06
  7771                              <5> 	mov ax,%1
  7772                              <5> 	mov ds,ax
  7773                              <5> 	mov ax,[%2+2]
  7774                              <5> 	mov [bp+0],ax
  7775                              <5> 	mov ax,[%2]
  7776                              <5> 	mov [bp+2],ax	
  7777                              <5> 	call proc_flroundtoint16
  7778                              <5> 	mov ax,sp
  7779                              <5> 	mov bp,ax
  7780                              <5> 	mov ax,%3
  7781                              <5> 	mov ds,ax
  7782                              <5> 	mov ax,[bp+4]
  7783                              <5> 	mov [%4],ax
  7784                              <5> 	stkclose 0x06
  7785                              <5> %endmacro
  7786                              <5> 
  7787                              <5> %macro flroundtoint32 4
  7788                              <5> 	stkopen 0x08
  7789                              <5> 	mov ax,%1
  7790                              <5> 	mov ds,ax
  7791                              <5> 	mov ax,[%2+2]
  7792                              <5> 	mov [bp+0],ax
  7793                              <5> 	mov ax,[%2]
  7794                              <5> 	mov [bp+2],ax	
  7795                              <5> 	call proc_flroundtoint32
  7796                              <5> 	mov ax,sp
  7797                              <5> 	mov bp,ax
  7798                              <5> 	mov ax,%3
  7799                              <5> 	mov ds,ax
  7800                              <5> 	mov ax,[bp+4]
  7801                              <5> 	mov [%4+2],ax
  7802                              <5> 	mov ax,[bp+6]
  7803                              <5> 	mov [%4],ax
  7804                              <5> 	stkclose 0x08
  7805                              <5> %endmacro
  7806                              <5> 
  7807                              <5> %macro fltoint16 4
  7808                              <5> 	stkopen 0x06
  7809                              <5> 	mov ax,%1
  7810                              <5> 	mov ds,ax
  7811                              <5> 	mov ax,[%2+2]
  7812                              <5> 	mov [bp+0],ax
  7813                              <5> 	mov ax,[%2]
  7814                              <5> 	mov [bp+2],ax	
  7815                              <5> 	call proc_fltoint16
  7816                              <5> 	mov ax,sp
  7817                              <5> 	mov bp,ax
  7818                              <5> 	mov ax,%3
  7819                              <5> 	mov ds,ax
  7820                              <5> 	mov ax,[bp+4]
  7821                              <5> 	mov [%4],ax
  7822                              <5> 	stkclose 0x06
  7823                              <5> %endmacro
  7824                              <5> 
  7825                              <5> %macro int16tofl 4	
  7826                              <5> 	stkopen 0x06
  7827                              <5> 	mov ax,%1
  7828                              <5> 	mov ds,ax
  7829                              <5> 	mov ax,[%2]
  7830                              <5> 	mov [bp+0],ax	
  7831                              <5> 	call proc_int16tofl
  7832                              <5> 	mov ax,sp
  7833                              <5> 	mov bp,ax
  7834                              <5> 	mov ax,%3
  7835                              <5> 	mov ds,ax
  7836                              <5> 	mov ax,[bp+2]
  7837                              <5> 	mov [%4+2],ax
  7838                              <5> 	mov ax,[bp+4]
  7839                              <5> 	mov [%4],ax
  7840                              <5> 	stkclose 0x06
  7841                              <5> %endmacro
  7842                              <5> 
  7843                              <5> %macro fltoint32 4
  7844                              <5> 	stkopen 0x08
  7845                              <5> 	mov ax,%1
  7846                              <5> 	mov ds,ax
  7847                              <5> 	mov ax,[%2+2]
  7848                              <5> 	mov [bp+0],ax
  7849                              <5> 	mov ax,[%2]
  7850                              <5> 	mov [bp+2],ax	
  7851                              <5> 	call proc_fltoint32
  7852                              <5> 	mov ax,sp
  7853                              <5> 	mov bp,ax
  7854                              <5> 	mov ax,%3
  7855                              <5> 	mov ds,ax
  7856                              <5> 	mov ax,[bp+4]
  7857                              <5> 	mov [%4+2],ax
  7858                              <5> 	mov ax,[bp+6]
  7859                              <5> 	mov [%4],ax
  7860                              <5> 	stkclose 0x08
  7861                              <5> %endmacro
  7862                              <5> 
  7863                              <5> %macro int32tofl 4
  7864                              <5> 	stkopen 0x08
  7865                              <5> 	mov ax,%1
  7866                              <5> 	mov ds,ax
  7867                              <5> 	mov ax,[%2+2]
  7868                              <5> 	mov [bp+0],ax
  7869                              <5> 	mov ax,[%2]
  7870                              <5> 	mov [bp+2],ax	
  7871                              <5> 	call proc_int32tofl
  7872                              <5> 	mov ax,sp
  7873                              <5> 	mov bp,ax
  7874                              <5> 	mov ax,%3
  7875                              <5> 	mov ds,ax
  7876                              <5> 	mov ax,[bp+4]
  7877                              <5> 	mov [%4+2],ax
  7878                              <5> 	mov ax,[bp+6]
  7879                              <5> 	mov [%4],ax
  7880                              <5> 	stkclose 0x08
  7881                              <5> %endmacro
  7882                              <5> 
  7883                              <5> %macro flgetsig 3
  7884                              <5> 	stkopen 0x04
  7885                              <5> 	mov ax,%1
  7886                              <5> 	mov ds,ax
  7887                              <5> 	mov ax,[%2+2]
  7888                              <5> 	mov word [bp+0], ax
  7889                              <5> 	call proc_flgetsig
  7890                              <5> 	push sp
  7891                              <5> 	pop bp
  7892                              <5> 	mov ax,[bp+2]
  7893                              <5> 	mov word %3, ax
  7894                              <5> 	stkclose 0x04
  7895                              <5> %endmacro
  7896                              <5> 
  7897                              <5> %macro flinvsig 2
  7898                              <5> 	stkopen 0x02
  7899                              <5> 	mov ax,%1
  7900                              <5> 	mov ds,ax
  7901                              <5> 	mov ax,[%2+2]
  7902                              <5> 	mov word [bp+0], ax
  7903                              <5> 	call proc_flinvsig
  7904                              <5> 	push sp
  7905                              <5> 	pop bp
  7906                              <5> 	mov ax,[bp+0]
  7907                              <5> 	mov word [%2+2],ax
  7908                              <5> 	stkclose 0x02
  7909                              <5> %endmacro
  7910                              <5> 
  7911                              <5> %macro flsetsig 2
  7912                              <5> 	stkopen 0x04
  7913                              <5> 	mov ax,%1
  7914                              <5> 	mov ds,ax
  7915                              <5> 	mov ax,[%2+2]
  7916                              <5> 	mov word [bp+0], ax
  7917                              <5> 	mov word [bp+2], 0x8000
  7918                              <5> 	call proc_flsetsig
  7919                              <5> 	push sp
  7920                              <5> 	pop bp
  7921                              <5> 	mov ax,[bp+0]
  7922                              <5> 	mov word [%2+2],ax
  7923                              <5> 	stkclose 0x04	
  7924                              <5> %endmacro
  7925                              <5> 
  7926                              <5> %macro flclrsig 2
  7927                              <5> 	stkopen 0x04
  7928                              <5> 	mov ax,%1
  7929                              <5> 	mov ds,ax
  7930                              <5> 	mov ax,[%2+2]
  7931                              <5> 	mov word [bp+0], ax
  7932                              <5> 	mov word [bp+2], 0x0000
  7933                              <5> 	call proc_flsetsig
  7934                              <5> 	push sp
  7935                              <5> 	pop bp
  7936                              <5> 	mov ax,[bp+0]
  7937                              <5> 	mov word [%2+2],ax
  7938                              <5> 	stkclose 0x04	
  7939                              <5> %endmacro
  7940                              <5> 
  7941                              <5> %macro flcmp 5	
  7942                              <5> 	stkopen 0x09
  7943                              <5> 	mov ax,%1
  7944                              <5> 	mov ds,ax
  7945                              <5> 	mov ax,[%2+2]
  7946                              <5> 	mov [bp+0],ax
  7947                              <5> 	mov ax,[%2]
  7948                              <5> 	mov [bp+2],ax
  7949                              <5> 	mov ax,%3
  7950                              <5> 	mov ds,ax
  7951                              <5> 	mov ax,[%4+2]
  7952                              <5> 	mov [bp+4],ax
  7953                              <5> 	mov ax,[%4]
  7954                              <5> 	mov [bp+6],ax
  7955                              <5> 	call proc_flcmp
  7956                              <5> 	mov ax,sp
  7957                              <5> 	mov bp,ax
  7958                              <5> 	mov byte %5,[bp+8]
  7959                              <5> 	stkclose 0x09
  7960                              <5> %endmacro
  7961                              <5> 
  7962                              <5> %macro flshl 4	
  7963                              <5> 	stkopen 0x03
  7964                              <5> 	mov ax,%1
  7965                              <5> 	mov ds,ax
  7966                              <5> 	mov ax,[%2+2]
  7967                              <5> 	mov [bp+0],ax
  7968                              <5> 	mov ax,%3
  7969                              <5> 	mov ds,ax
  7970                              <5> 	mov al,[%4]
  7971                              <5> 	mov [bp+2],al
  7972                              <5> 	call proc_flshl
  7973                              <5> 	mov ax,sp
  7974                              <5> 	mov bp,ax
  7975                              <5> 	mov ax,%1
  7976                              <5> 	mov ds,ax
  7977                              <5> 	mov ax,[bp+0]
  7978                              <5> 	mov [%2+2],ax
  7979                              <5> 	stkclose 0x03
  7980                              <5> %endmacro
  7981                              <5> 
  7982                              <5> %macro flshr 4	
  7983                              <5> 	stkopen 0x03
  7984                              <5> 	mov ax,%1
  7985                              <5> 	mov ds,ax
  7986                              <5> 	mov ax,[%2+2]
  7987                              <5> 	mov [bp+0],ax	
  7988                              <5> 	mov ax,%3
  7989                              <5> 	mov ds,ax
  7990                              <5> 	mov al,[%4]
  7991                              <5> 	mov [bp+2],al
  7992                              <5> 	call proc_flshr
  7993                              <5> 	mov ax,sp
  7994                              <5> 	mov bp,ax
  7995                              <5> 	mov ax,%1
  7996                              <5> 	mov ds,ax
  7997                              <5> 	mov ax,[bp+0]
  7998                              <5> 	mov [%2+2],ax
  7999                              <5> 	stkclose 0x03
  8000                              <5> %endmacro
  8001                              <5> 
  8002                              <5> %macro fldiv 6	
  8003                              <5> 	stkopen 0x0C
  8004                              <5> 	mov ax,%1
  8005                              <5> 	mov ds,ax
  8006                              <5> 	mov ax,[%2+2]
  8007                              <5> 	mov [bp+0],ax
  8008                              <5> 	mov ax,[%2]
  8009                              <5> 	mov [bp+2],ax
  8010                              <5> 	mov ax,%3
  8011                              <5> 	mov ds,ax
  8012                              <5> 	mov ax,[%4+2]
  8013                              <5> 	mov [bp+4],ax
  8014                              <5> 	mov ax,[%4]
  8015                              <5> 	mov [bp+6],ax
  8016                              <5> 	call proc_fldiv
  8017                              <5> 	mov ax,sp
  8018                              <5> 	mov bp,ax
  8019                              <5> 	mov ax,%5
  8020                              <5> 	mov ds,ax
  8021                              <5> 	mov ax,[bp+8]
  8022                              <5> 	mov [%6+2],ax
  8023                              <5> 	mov ax,[bp+0x0A]
  8024                              <5> 	mov [%6],ax
  8025                              <5> 	stkclose 0x0C
  8026                              <5> %endmacro
  8027                              <5> 
  8028                              <5> %macro flmul 6	
  8029                              <5> 	stkopen 0x0C
  8030                              <5> 	mov ax,%1
  8031                              <5> 	mov ds,ax
  8032                              <5> 	mov ax,[%2+2]
  8033                              <5> 	mov [bp+0],ax
  8034                              <5> 	mov ax,[%2]
  8035                              <5> 	mov [bp+2],ax
  8036                              <5> 	mov ax,%3
  8037                              <5> 	mov ds,ax
  8038                              <5> 	mov ax,[%4+2]
  8039                              <5> 	mov [bp+4],ax
  8040                              <5> 	mov ax,[%4]
  8041                              <5> 	mov [bp+6],ax
  8042                              <5> 	call proc_flmul
  8043                              <5> 	mov ax,sp
  8044                              <5> 	mov bp,ax
  8045                              <5> 	mov ax,%5
  8046                              <5> 	mov ds,ax
  8047                              <5> 	mov ax,[bp+8]
  8048                              <5> 	mov [%6+2],ax
  8049                              <5> 	mov ax,[bp+0x0A]
  8050                              <5> 	mov [%6],ax
  8051                              <5> 	stkclose 0x0C
  8052                              <5> %endmacro
  8053                              <5> 	
  8054                              <5> %macro fladdorsub 7
  8055                              <5> 	stkopen 0x0E
  8056                              <5> 	mov ax,%1
  8057                              <5> 	mov ds,ax
  8058                              <5> 	mov ax,[%2+2]
  8059                              <5> 	mov [bp+0],ax
  8060                              <5> 	mov ax,[%2]
  8061                              <5> 	mov [bp+2],ax
  8062                              <5> 	mov ax,%3
  8063                              <5> 	mov ds,ax
  8064                              <5> 	mov ax,[%4+2]
  8065                              <5> 	mov [bp+4],ax
  8066                              <5> 	mov ax,[%4]
  8067                              <5> 	mov [bp+6],ax
  8068                              <5> 	mov word [bp+0x0C], %7
  8069                              <5> 	call proc_fladdorsub
  8070                              <5> 	mov ax,sp
  8071                              <5> 	mov bp,ax
  8072                              <5> 	mov ax,%5
  8073                              <5> 	mov ds,ax
  8074                              <5> 	mov ax,[bp+8]
  8075                              <5> 	mov [%6+2],ax
  8076                              <5> 	mov ax,[bp+0x0A]
  8077                              <5> 	mov [%6],ax
  8078                              <5> 	stkclose 0x0E
  8079                              <5> %endmacro
  8080                              <5> 	
  8081                              <5> %endif
  8082                              <4> 
  8083                              <4> %macro __sin 4
  8084                              <4> 	__sinorcos %1, %2, %3, %4, 1
  8085                              <4> %endmacro
  8086                              <4> 
  8087                              <4> %macro __cos 4
  8088                              <4> 	__sinorcos %1, %2, %3, %4, 0
  8089                              <4> %endmacro
  8090                              <4> 
  8091                              <4> %macro __sin0x90 4
  8092                              <4> 	__sinorcos0x90 %1, %2, %3, %4, 1
  8093                              <4> %endmacro
  8094                              <4> 
  8095                              <4> %macro __cos0x90 4
  8096                              <4> 	__sinorcos0x90 %1, %2, %3, %4, 0
  8097                              <4> %endmacro
  8098                              <4> 
  8099                              <4> %macro __to0x360 4
  8100                              <4> 	stkopen 0x04
  8101                              <4> 	mov word [bp+0],%1
  8102                              <4> 	mov word [bp+2],%2	
  8103                              <4> 	call proc_to0x360
  8104                              <4> 	push sp
  8105                              <4> 	pop bp
  8106                              <4> 	mov word %3,[bp+4]
  8107                              <4> 	mov word %4,[bp+6]
  8108                              <4> 	stkclose 0x04
  8109                              <4> %endmacro
  8110                              <4> 
  8111                              <4> %macro __toradians 4
  8112                              <4> 	stkopen 0x08
  8113                              <4> 	mov word [bp+0],%1
  8114                              <4> 	mov word [bp+2],%2
  8115                              <4> 	call proc_toradians
  8116                              <4> 	push sp
  8117                              <4> 	pop bp
  8118                              <4> 	mov word %3, [bp+4]
  8119                              <4> 	mov word %4, [bp+6]
  8120                              <4> 	stkclose 0x08
  8121                              <4> %endmacro
  8122                              <4> 
  8123                              <4> %macro __todegrees 4
  8124                              <4> 	stkopen 0x08
  8125                              <4> 	mov word [bp+0],%1
  8126                              <4> 	mov word [bp+2],%2
  8127                              <4> 	call proc_todegrees
  8128                              <4> 	push sp
  8129                              <4> 	pop bp
  8130                              <4> 	mov word %3, [bp+4]
  8131                              <4> 	mov word %4, [bp+6]
  8132                              <4> 	stkclose 0x08
  8133                              <4> %endmacro
  8134                              <4> 
  8135                              <4> %macro __atan 4
  8136                              <4> 	stkopen 0x08
  8137                              <4> 	mov word [bp+0],%1
  8138                              <4> 	mov word [bp+2],%2	
  8139                              <4> 	call proc_atan
  8140                              <4> 	push sp
  8141                              <4> 	pop bp
  8142                              <4> 	mov word %3,[bp+4]
  8143                              <4> 	mov word %4,[bp+6]
  8144                              <4> 	stkclose 0x08
  8145                              <4> %endmacro
  8146                              <4> 
  8147                              <4> %macro __sinorcos 5
  8148                              <4> 	stkopen 0x09
  8149                              <4> 	mov word [bp+0],%1
  8150                              <4> 	mov word [bp+2],%2	
  8151                              <4> 	mov byte [bp+8],%5
  8152                              <4> 	call proc_sinorcos
  8153                              <4> 	push sp
  8154                              <4> 	pop bp
  8155                              <4> 	mov word %3,[bp+4]
  8156                              <4> 	mov word %4,[bp+6]
  8157                              <4> 	stkclose 0x09
  8158                              <4> %endmacro
  8159                              <4> 
  8160                              <4> %macro __sinorcos0x90 5
  8161                              <4> 	stkopen 0x09
  8162                              <4> 	mov word [bp+0],%1
  8163                              <4> 	mov word [bp+2],%2
  8164                              <4> 	mov byte [bp+8],%5
  8165                              <4> 	call proc_sinorcos0x90
  8166                              <4> 	push sp
  8167                              <4> 	pop bp
  8168                              <4> 	mov word %3,[bp+4]
  8169                              <4> 	mov word %4,[bp+6]
  8170                              <4> 	stkclose 0x09
  8171                              <4> %endmacro
  8172                              <4> 
  8173                              <4> %macro __sinnorm 3
  8174                              <4> 	stkopen 0x06
  8175                              <4> 	mov word [bp+0],%1
  8176                              <4> 	mov word [bp+2],%2
  8177                              <4> 	call proc__sinnorm
  8178                              <4> 	push sp
  8179                              <4> 	pop bp
  8180                              <4> 	mov word %1,[bp+0]
  8181                              <4> 	mov word %2,[bp+2]
  8182                              <4> 	mov word %3,[bp+4]
  8183                              <4> 	stkclose 0x06
  8184                              <4> %endmacro
  8185                              <4> 
  8186                              <4> %macro __cosnorm 3
  8187                              <4> 	stkopen 0x06
  8188                              <4> 	mov word [bp+0],%1
  8189                              <4> 	mov word [bp+2],%2
  8190                              <4> 	call proc__cosnorm
  8191                              <4> 	push sp
  8192                              <4> 	pop bp
  8193                              <4> 	mov word %1,[bp+0]
  8194                              <4> 	mov word %2,[bp+2]
  8195                              <4> 	mov word %3,[bp+4]
  8196                              <4> 	stkclose 0x06
  8197                              <4> %endmacro
  8198                              <4> 
  8199                              <4> %macro __norm_factors 5
  8200                              <4> 	stkopen 0x0A
  8201                              <4> 	mov word [bp+0],%1
  8202                              <4> 	mov word [bp+2],%2
  8203                              <4> 	call proc__norm_factors
  8204                              <4> 	push sp
  8205                              <4> 	pop bp
  8206                              <4> 	mov word %3,[bp+4]
  8207                              <4> 	mov word %4,[bp+6]
  8208                              <4> 	mov word %5,[bp+8]
  8209                              <4> 	stkclose 0x0A
  8210                              <4> %endmacro
  8211                              <4> 
  8212                              <4> %macro __fat16 2
  8213                              <4> 	stkopen 0x04
  8214                              <4> 	mov word [bp+0],%1
  8215                              <4> 	call proc__fat16
  8216                              <4> 	push sp
  8217                              <4> 	pop bp
  8218                              <4> 	mov word %2, [bp+2]
  8219                              <4> 	stkclose 0x04
  8220                              <4> %endmacro
  8221                              <4> 
  8222                              <4> %macro __pow16 3
  8223                              <4> 	stkopen 0x06
  8224                              <4> 	mov word [bp+0],%1
  8225                              <4> 	mov word [bp+2],%2
  8226                              <4> 	call proc__pow16
  8227                              <4> 	push sp
  8228                              <4> 	pop bp
  8229                              <4> 	mov word %3, [bp+4]
  8230                              <4> 	stkclose 0x06
  8231                              <4> %endmacro
  8232                              <4> 	
  8233                              <4> section .data
  8234 00001789 DB0F4940            <4> 	PI: dd 0x40490FDB
  8235 0000178D 00003443            <4> 	__180dg: dd 0x43340000
  8236                              <4> 
  8237                              <4> proc_to0x360:
  8238 00001791 89E0                <4> 	mov ax,sp
  8239 00001793 89C5                <4> 	mov bp,ax
  8240                              <4> 	
  8241 00001795 8B4602              <4> 	mov ax,[bp+2]
  8242 00001798 8B5E04              <4> 	mov bx,[bp+4]
  8243 0000179B 25FF7F              <4> 	and ax,0x7FFF
  8244                              <4> 	
  8245 0000179E B9C940              <4> 	mov cx,0x40C9	; 2*PI (alta)
  8246 000017A1 BADB0F              <4> 	mov dx,0x0FDB	; 2*PI (baixa)		
  8247                              <4> 		
  8248 000017A4 55                  <4> 	push bp
  8249                              <4> 	__fldiv ax, bx, cx, dx, cx, dx
  8250                              <5>  stkopen 0x0E
  8251 000017A5 83EC0E              <6>  sub word sp, %1
  8252 000017A8 54                  <6>  push sp
  8253 000017A9 5D                  <6>  pop bp
  8254 000017AA 894600              <5>  mov word [bp+0],%1
  8255 000017AD 895E02              <5>  mov word [bp+2],%2
  8256 000017B0 894E04              <5>  mov word [bp+4],%3
  8257 000017B3 895606              <5>  mov word [bp+6],%4
  8258 000017B6 E8C9F6              <5>  call proc_fldiv
  8259 000017B9 54                  <5>  push sp
  8260 000017BA 5D                  <5>  pop bp
  8261 000017BB 8B4E08              <5>  mov word %5,[bp+8]
  8262 000017BE 8B560A              <5>  mov word %6,[bp+0x0A]
  8263                              <5>  stkclose 0x0E
  8264 000017C1 83C40E              <6>  add word sp, %1
  8265                              <4> 	__fltoint32 cx, dx, cx, dx
  8266                              <5>  stkopen 0x08
  8267 000017C4 83EC08              <6>  sub word sp, %1
  8268 000017C7 54                  <6>  push sp
  8269 000017C8 5D                  <6>  pop bp
  8270 000017C9 894E00              <5>  mov word [bp+0],%1
  8271 000017CC 895602              <5>  mov word [bp+2],%2
  8272 000017CF E88BF4              <5>  call proc_fltoint32
  8273 000017D2 54                  <5>  push sp
  8274 000017D3 5D                  <5>  pop bp
  8275 000017D4 8B4E04              <5>  mov word %3,[bp+4]
  8276 000017D7 8B5606              <5>  mov word %4,[bp+6]
  8277                              <5>  stkclose 0x08
  8278 000017DA 83C408              <6>  add word sp, %1
  8279                              <4> 	__int32tofl cx, dx, cx, dx
  8280                              <5>  stkopen 0x08
  8281 000017DD 83EC08              <6>  sub word sp, %1
  8282 000017E0 54                  <6>  push sp
  8283 000017E1 5D                  <6>  pop bp
  8284 000017E2 894E00              <5>  mov word [bp+0],%1
  8285 000017E5 895602              <5>  mov word [bp+2],%2
  8286 000017E8 E8F6F4              <5>  call proc_int32tofl
  8287 000017EB 54                  <5>  push sp
  8288 000017EC 5D                  <5>  pop bp
  8289 000017ED 8B4E04              <5>  mov word %3,[bp+4]
  8290 000017F0 8B5606              <5>  mov word %4,[bp+6]
  8291                              <5>  stkclose 0x08
  8292 000017F3 83C408              <6>  add word sp, %1
  8293 000017F6 5D                  <4> 	pop bp
  8294                              <4> 		
  8295 000017F7 B8C940              <4> 	mov ax,0x40C9	; 2*PI (alta)
  8296 000017FA BBDB0F              <4> 	mov bx,0x0FDB	; 2*PI (baixa)
  8297 000017FD 55                  <4> 	push bp
  8298                              <4> 	__flmul ax, bx, cx, dx, cx, dx
  8299                              <5>  stkopen 0x0E
  8300 000017FE 83EC0E              <6>  sub word sp, %1
  8301 00001801 54                  <6>  push sp
  8302 00001802 5D                  <6>  pop bp
  8303 00001803 894600              <5>  mov word [bp+0],%1
  8304 00001806 895E02              <5>  mov word [bp+2],%2
  8305 00001809 894E04              <5>  mov word [bp+4],%3
  8306 0000180C 895606              <5>  mov word [bp+6],%4
  8307 0000180F E88FF7              <5>  call proc_flmul
  8308 00001812 54                  <5>  push sp
  8309 00001813 5D                  <5>  pop bp
  8310 00001814 8B4E08              <5>  mov word %5,[bp+8]
  8311 00001817 8B560A              <5>  mov word %6,[bp+0x0A]
  8312                              <5>  stkclose 0x0E
  8313 0000181A 83C40E              <6>  add word sp, %1
  8314 0000181D 5D                  <4> 	pop bp				
  8315                              <4> 		
  8316 0000181E 8B4602              <4> 	mov ax,[bp+2]
  8317 00001821 8B5E04              <4> 	mov bx,[bp+4]		
  8318 00001824 25FF7F              <4> 	and ax,0x7FFF		
  8319 00001827 55                  <4> 	push bp	
  8320                              <4> 	__flsub ax, bx, cx, dx, ax, bx
  8321                              <5>  stkopen 0x0E
  8322 00001828 83EC0E              <6>  sub word sp, %1
  8323 0000182B 54                  <6>  push sp
  8324 0000182C 5D                  <6>  pop bp
  8325 0000182D 894600              <5>  mov word [bp+0],%1
  8326 00001830 895E02              <5>  mov word [bp+2],%2
  8327 00001833 894E04              <5>  mov word [bp+4],%3
  8328 00001836 895606              <5>  mov word [bp+6],%4
  8329 00001839 C7460C0080          <5>  mov word [bp+0x0C],0x8000
  8330 0000183E E80CF9              <5>  call proc_fladdorsub
  8331 00001841 54                  <5>  push sp
  8332 00001842 5D                  <5>  pop bp
  8333 00001843 8B4608              <5>  mov word %5,[bp+8]
  8334 00001846 8B5E0A              <5>  mov word %6,[bp+0x0A]
  8335                              <5>  stkclose 0x0E
  8336 00001849 83C40E              <6>  add word sp, %1
  8337 0000184C 5D                  <4> 	pop bp	
  8338                              <4> 	
  8339 0000184D 8B4E02              <4> 	mov cx,[bp+2]
  8340 00001850 81E10080            <4> 	and cx,0x8000
  8341 00001854 83F900              <4> 	cmp cx,0
  8342 00001857 742C                <4> 	jz .endneg
  8343 00001859 B9C940              <4> 		mov cx,0x40C9	; 2*PI (alta)
  8344 0000185C BADB0F              <4> 		mov dx,0x0FDB	; 2*PI (baixa)
  8345 0000185F 55                  <4> 		push bp		
  8346                              <4> 		__flsub cx, dx, ax, bx, ax, bx		
  8347                              <5>  stkopen 0x0E
  8348 00001860 83EC0E              <6>  sub word sp, %1
  8349 00001863 54                  <6>  push sp
  8350 00001864 5D                  <6>  pop bp
  8351 00001865 894E00              <5>  mov word [bp+0],%1
  8352 00001868 895602              <5>  mov word [bp+2],%2
  8353 0000186B 894604              <5>  mov word [bp+4],%3
  8354 0000186E 895E06              <5>  mov word [bp+6],%4
  8355 00001871 C7460C0080          <5>  mov word [bp+0x0C],0x8000
  8356 00001876 E8D4F8              <5>  call proc_fladdorsub
  8357 00001879 54                  <5>  push sp
  8358 0000187A 5D                  <5>  pop bp
  8359 0000187B 8B4608              <5>  mov word %5,[bp+8]
  8360 0000187E 8B5E0A              <5>  mov word %6,[bp+0x0A]
  8361                              <5>  stkclose 0x0E
  8362 00001881 83C40E              <6>  add word sp, %1
  8363 00001884 5D                  <4> 		pop bp	
  8364                              <4> 	.endneg:	
  8365                              <4> 	
  8366 00001885 894606              <4> 	mov [bp+6],ax
  8367 00001888 895E08              <4> 	mov [bp+8],bx	
  8368                              <4> 							
  8369 0000188B C3                  <4> 	ret
  8370                              <4> 	
  8371                              <4> proc_toradians:
  8372 0000188C 89E0                <4> 	mov ax,sp
  8373 0000188E 89C5                <4> 	mov bp,ax
  8374                              <4> 	
  8375 00001890 8B4602              <4> 	mov ax,[bp+2]
  8376 00001893 8B5E04              <4> 	mov bx,[bp+4]		
  8377 00001896 B94940              <4> 	mov cx,0x4049
  8378 00001899 BADB0F              <4> 	mov dx,0x0FDB
  8379                              <4> 	__flmul ax, bx, cx, dx, ax, bx
  8380                              <5>  stkopen 0x0E
  8381 0000189C 83EC0E              <6>  sub word sp, %1
  8382 0000189F 54                  <6>  push sp
  8383 000018A0 5D                  <6>  pop bp
  8384 000018A1 894600              <5>  mov word [bp+0],%1
  8385 000018A4 895E02              <5>  mov word [bp+2],%2
  8386 000018A7 894E04              <5>  mov word [bp+4],%3
  8387 000018AA 895606              <5>  mov word [bp+6],%4
  8388 000018AD E8F1F6              <5>  call proc_flmul
  8389 000018B0 54                  <5>  push sp
  8390 000018B1 5D                  <5>  pop bp
  8391 000018B2 8B4608              <5>  mov word %5,[bp+8]
  8392 000018B5 8B5E0A              <5>  mov word %6,[bp+0x0A]
  8393                              <5>  stkclose 0x0E
  8394 000018B8 83C40E              <6>  add word sp, %1
  8395 000018BB B93443              <4> 	mov cx,0x4334
  8396 000018BE BA0000              <4> 	mov dx,0x0000	
  8397                              <4> 	__fldiv ax, bx, cx, cx, ax, bx
  8398                              <5>  stkopen 0x0E
  8399 000018C1 83EC0E              <6>  sub word sp, %1
  8400 000018C4 54                  <6>  push sp
  8401 000018C5 5D                  <6>  pop bp
  8402 000018C6 894600              <5>  mov word [bp+0],%1
  8403 000018C9 895E02              <5>  mov word [bp+2],%2
  8404 000018CC 894E04              <5>  mov word [bp+4],%3
  8405 000018CF 894E06              <5>  mov word [bp+6],%4
  8406 000018D2 E8ADF5              <5>  call proc_fldiv
  8407 000018D5 54                  <5>  push sp
  8408 000018D6 5D                  <5>  pop bp
  8409 000018D7 8B4608              <5>  mov word %5,[bp+8]
  8410 000018DA 8B5E0A              <5>  mov word %6,[bp+0x0A]
  8411                              <5>  stkclose 0x0E
  8412 000018DD 83C40E              <6>  add word sp, %1
  8413                              <4> 	
  8414 000018E0 89E1                <4> 	mov cx,sp
  8415 000018E2 89CD                <4> 	mov bp,cx
  8416 000018E4 894606              <4> 	mov [bp+6],ax
  8417 000018E7 895E08              <4> 	mov [bp+8],bx
  8418                              <4> 	
  8419 000018EA C3                  <4> 	ret
  8420                              <4> 	
  8421                              <4> proc_todegrees:
  8422 000018EB 89E0                <4> 	mov ax,sp
  8423 000018ED 89C5                <4> 	mov bp,ax
  8424                              <4> 	
  8425 000018EF 8B4602              <4> 	mov ax,[bp+2]
  8426 000018F2 8B5E04              <4> 	mov bx,[bp+4]		
  8427 000018F5 B93443              <4> 	mov cx,0x4334
  8428 000018F8 BA0000              <4> 	mov dx,0x0000
  8429                              <4> 	__flmul ax, bx, cx, dx, ax, bx		
  8430                              <5>  stkopen 0x0E
  8431 000018FB 83EC0E              <6>  sub word sp, %1
  8432 000018FE 54                  <6>  push sp
  8433 000018FF 5D                  <6>  pop bp
  8434 00001900 894600              <5>  mov word [bp+0],%1
  8435 00001903 895E02              <5>  mov word [bp+2],%2
  8436 00001906 894E04              <5>  mov word [bp+4],%3
  8437 00001909 895606              <5>  mov word [bp+6],%4
  8438 0000190C E892F6              <5>  call proc_flmul
  8439 0000190F 54                  <5>  push sp
  8440 00001910 5D                  <5>  pop bp
  8441 00001911 8B4608              <5>  mov word %5,[bp+8]
  8442 00001914 8B5E0A              <5>  mov word %6,[bp+0x0A]
  8443                              <5>  stkclose 0x0E
  8444 00001917 83C40E              <6>  add word sp, %1
  8445 0000191A B94940              <4> 	mov cx,0x4049
  8446 0000191D BADB0F              <4> 	mov dx,0x0FDB	
  8447                              <4> 	__fldiv ax, bx, cx, cx, ax, bx
  8448                              <5>  stkopen 0x0E
  8449 00001920 83EC0E              <6>  sub word sp, %1
  8450 00001923 54                  <6>  push sp
  8451 00001924 5D                  <6>  pop bp
  8452 00001925 894600              <5>  mov word [bp+0],%1
  8453 00001928 895E02              <5>  mov word [bp+2],%2
  8454 0000192B 894E04              <5>  mov word [bp+4],%3
  8455 0000192E 894E06              <5>  mov word [bp+6],%4
  8456 00001931 E84EF5              <5>  call proc_fldiv
  8457 00001934 54                  <5>  push sp
  8458 00001935 5D                  <5>  pop bp
  8459 00001936 8B4608              <5>  mov word %5,[bp+8]
  8460 00001939 8B5E0A              <5>  mov word %6,[bp+0x0A]
  8461                              <5>  stkclose 0x0E
  8462 0000193C 83C40E              <6>  add word sp, %1
  8463                              <4> 	
  8464 0000193F 89E1                <4> 	mov cx,sp
  8465 00001941 89CD                <4> 	mov bp,cx
  8466 00001943 894606              <4> 	mov [bp+6],ax
  8467 00001946 895E08              <4> 	mov [bp+8],bx
  8468                              <4> 	
  8469 00001949 C3                  <4> 	ret
  8470                              <4> 
  8471                              <4> proc_sinorcos:
  8472 0000194A 89E0                <4> 	mov ax,sp
  8473 0000194C 89C5                <4> 	mov bp,ax
  8474                              <4> 	
  8475 0000194E 8B4602              <4> 	mov ax,[bp+2]
  8476 00001951 8B5E04              <4> 	mov bx,[bp+4]
  8477 00001954 807E0A00            <4> 	cmp byte [bp+0x0A],0
  8478 00001958 741E                <4> 	jz .normcos
  8479                              <4> 		__sinnorm ax, bx, cx
  8480                              <5>  stkopen 0x06
  8481 0000195A 83EC06              <6>  sub word sp, %1
  8482 0000195D 54                  <6>  push sp
  8483 0000195E 5D                  <6>  pop bp
  8484 0000195F 894600              <5>  mov word [bp+0],%1
  8485 00001962 895E02              <5>  mov word [bp+2],%2
  8486 00001965 E82303              <5>  call proc__sinnorm
  8487 00001968 54                  <5>  push sp
  8488 00001969 5D                  <5>  pop bp
  8489 0000196A 8B4600              <5>  mov word %1,[bp+0]
  8490 0000196D 8B5E02              <5>  mov word %2,[bp+2]
  8491 00001970 8B4E04              <5>  mov word %3,[bp+4]
  8492                              <5>  stkclose 0x06
  8493 00001973 83C406              <6>  add word sp, %1
  8494 00001976 EB1C                <4> 		jmp .endnorm
  8495                              <4> 	.normcos:
  8496                              <4> 		__cosnorm ax, bx, cx	
  8497                              <5>  stkopen 0x06
  8498 00001978 83EC06              <6>  sub word sp, %1
  8499 0000197B 54                  <6>  push sp
  8500 0000197C 5D                  <6>  pop bp
  8501 0000197D 894600              <5>  mov word [bp+0],%1
  8502 00001980 895E02              <5>  mov word [bp+2],%2
  8503 00001983 E8AB03              <5>  call proc__cosnorm
  8504 00001986 54                  <5>  push sp
  8505 00001987 5D                  <5>  pop bp
  8506 00001988 8B4600              <5>  mov word %1,[bp+0]
  8507 0000198B 8B5E02              <5>  mov word %2,[bp+2]
  8508 0000198E 8B4E04              <5>  mov word %3,[bp+4]
  8509                              <5>  stkclose 0x06
  8510 00001991 83C406              <6>  add word sp, %1
  8511                              <4> 	.endnorm:
  8512                              <4> 	
  8513 00001994 51                  <4> 	push cx
  8514                              <4> 	
  8515 00001995 89E1                <4> 	mov cx,sp
  8516 00001997 89CD                <4> 	mov bp,cx
  8517 00001999 83C502              <4> 	add bp,2
  8518 0000199C 8A4E0A              <4> 	mov cl,[bp+0x0A]	
  8519                              <4> 	__sinorcos0x90 ax, bx, ax, bx, cl
  8520                              <5>  stkopen 0x09
  8521 0000199F 83EC09              <6>  sub word sp, %1
  8522 000019A2 54                  <6>  push sp
  8523 000019A3 5D                  <6>  pop bp
  8524 000019A4 894600              <5>  mov word [bp+0],%1
  8525 000019A7 895E02              <5>  mov word [bp+2],%2
  8526 000019AA 884E08              <5>  mov byte [bp+8],%5
  8527 000019AD E82C00              <5>  call proc_sinorcos0x90
  8528 000019B0 54                  <5>  push sp
  8529 000019B1 5D                  <5>  pop bp
  8530 000019B2 8B4604              <5>  mov word %3,[bp+4]
  8531 000019B5 8B5E06              <5>  mov word %4,[bp+6]
  8532                              <5>  stkclose 0x09
  8533 000019B8 83C409              <6>  add word sp, %1
  8534 000019BB 89E1                <4> 	mov cx,sp
  8535 000019BD 89CD                <4> 	mov bp,cx
  8536 000019BF 83C502              <4> 	add bp,2	
  8537 000019C2 894606              <4> 	mov [bp+6],ax
  8538 000019C5 895E08              <4> 	mov [bp+8],bx
  8539                              <4> 			
  8540 000019C8 59                  <4> 	pop cx
  8541                              <4> 		
  8542 000019C9 89E2                <4> 	mov dx,sp
  8543 000019CB 89D5                <4> 	mov bp,dx
  8544                              <4> 		
  8545 000019CD 81F90080            <4> 	cmp cx,0x8000
  8546 000019D1 7405                <4> 	je .one
  8547 000019D3 214E06              <4> 		and word [bp+6],cx
  8548 000019D6 EB03                <4> 		jmp .endcmp
  8549                              <4> 	.one:
  8550 000019D8 094E06              <4> 		or word [bp+6],cx	
  8551                              <4> 	.endcmp:
  8552                              <4> 	
  8553 000019DB C3                  <4> 	ret
  8554                              <4> 	
  8555                              <4> proc_sinorcos0x90:
  8556 000019DC 89E1                <4> 	mov cx,sp
  8557 000019DE 89CD                <4> 	mov bp,cx
  8558                              <4> 
  8559 000019E0 C746060000          <4> 	mov word [bp+6],0
  8560 000019E5 C746080000          <4> 	mov word [bp+8],0		
  8561                              <4> 	
  8562 000019EA B90000              <4> 	mov cx,0
  8563                              <4> 	.l1:
  8564 000019ED 83F903              <4> 		cmp cx,0x03
  8565 000019F0 0F877301            <4> 		ja .l2		
  8566 000019F4 51                  <4> 		push cx
  8567                              <4> 		
  8568 000019F5 83E101              <4> 		and cx,0x0001
  8569 000019F8 83F900              <4> 		cmp cx,0
  8570 000019FB 7505                <4> 		jnz .neg
  8571 000019FD B80100              <4> 			mov ax,0x0001
  8572 00001A00 EB03                <4> 			jmp .endneg
  8573                              <4> 		.neg:
  8574 00001A02 B8FFFF              <4> 			mov ax,0xFFFF
  8575                              <4> 		.endneg:
  8576                              <4> 				
  8577 00001A05 59                  <4> 		pop cx
  8578 00001A06 51                  <4> 		push cx
  8579 00001A07 50                  <4> 		push ax
  8580                              <4> 		
  8581 00001A08 BA0000              <4> 		mov dx,0
  8582 00001A0B B80200              <4> 		mov ax,2
  8583 00001A0E F7E1                <4> 		mul cx
  8584                              <4> 		
  8585 00001A10 89E2                <4> 		mov dx,sp
  8586 00001A12 89D5                <4> 		mov bp,dx
  8587 00001A14 83C504              <4> 		add bp,4		
  8588 00001A17 807E0A00            <4> 		cmp byte [bp+0x0A],0
  8589 00001A1B 7401                <4> 		jz .incremented
  8590 00001A1D 40                  <4> 			inc ax
  8591                              <4> 		.incremented:
  8592                              <4> 						
  8593                              <4> 		__fat16 ax, dx
  8594                              <5>  stkopen 0x04
  8595 00001A1E 83EC04              <6>  sub word sp, %1
  8596 00001A21 54                  <6>  push sp
  8597 00001A22 5D                  <6>  pop bp
  8598 00001A23 894600              <5>  mov word [bp+0],%1
  8599 00001A26 E82302              <5>  call proc__fat16
  8600 00001A29 54                  <5>  push sp
  8601 00001A2A 5D                  <5>  pop bp
  8602 00001A2B 8B5602              <5>  mov word %2, [bp+2]
  8603                              <5>  stkclose 0x04
  8604 00001A2E 83C404              <6>  add word sp, %1
  8605                              <4> 						
  8606 00001A31 58                  <4> 		pop ax
  8607 00001A32 52                  <4> 		push dx	
  8608                              <4> 		__int16to32 ax, cx, dx						
  8609                              <5>  stkopen 0x06
  8610 00001A33 83EC06              <6>  sub word sp, %1
  8611 00001A36 54                  <6>  push sp
  8612 00001A37 5D                  <6>  pop bp
  8613 00001A38 894600              <5>  mov word [bp+0],%1
  8614 00001A3B E82BEB              <5>  call proc_int16to32
  8615 00001A3E 54                  <5>  push sp
  8616 00001A3F 5D                  <5>  pop bp
  8617 00001A40 8B4E02              <5>  mov word %2, [bp+2]
  8618 00001A43 8B5604              <5>  mov word %3, [bp+4]
  8619                              <5>  stkclose 0x06
  8620 00001A46 83C406              <6>  add word sp, %1
  8621                              <4> 		__int32tofl cx, dx, ax, bx
  8622                              <5>  stkopen 0x08
  8623 00001A49 83EC08              <6>  sub word sp, %1
  8624 00001A4C 54                  <6>  push sp
  8625 00001A4D 5D                  <6>  pop bp
  8626 00001A4E 894E00              <5>  mov word [bp+0],%1
  8627 00001A51 895602              <5>  mov word [bp+2],%2
  8628 00001A54 E88AF2              <5>  call proc_int32tofl
  8629 00001A57 54                  <5>  push sp
  8630 00001A58 5D                  <5>  pop bp
  8631 00001A59 8B4604              <5>  mov word %3,[bp+4]
  8632 00001A5C 8B5E06              <5>  mov word %4,[bp+6]
  8633                              <5>  stkclose 0x08
  8634 00001A5F 83C408              <6>  add word sp, %1
  8635                              <4> 		
  8636 00001A62 59                  <4> 		pop cx
  8637 00001A63 50                  <4> 		push ax
  8638 00001A64 53                  <4> 		push bx		
  8639                              <4> 		__int16to32 cx, ax, bx
  8640                              <5>  stkopen 0x06
  8641 00001A65 83EC06              <6>  sub word sp, %1
  8642 00001A68 54                  <6>  push sp
  8643 00001A69 5D                  <6>  pop bp
  8644 00001A6A 894E00              <5>  mov word [bp+0],%1
  8645 00001A6D E8F9EA              <5>  call proc_int16to32
  8646 00001A70 54                  <5>  push sp
  8647 00001A71 5D                  <5>  pop bp
  8648 00001A72 8B4602              <5>  mov word %2, [bp+2]
  8649 00001A75 8B5E04              <5>  mov word %3, [bp+4]
  8650                              <5>  stkclose 0x06
  8651 00001A78 83C406              <6>  add word sp, %1
  8652                              <4> 		__int32tofl ax, bx, cx, dx
  8653                              <5>  stkopen 0x08
  8654 00001A7B 83EC08              <6>  sub word sp, %1
  8655 00001A7E 54                  <6>  push sp
  8656 00001A7F 5D                  <6>  pop bp
  8657 00001A80 894600              <5>  mov word [bp+0],%1
  8658 00001A83 895E02              <5>  mov word [bp+2],%2
  8659 00001A86 E858F2              <5>  call proc_int32tofl
  8660 00001A89 54                  <5>  push sp
  8661 00001A8A 5D                  <5>  pop bp
  8662 00001A8B 8B4E04              <5>  mov word %3,[bp+4]
  8663 00001A8E 8B5606              <5>  mov word %4,[bp+6]
  8664                              <5>  stkclose 0x08
  8665 00001A91 83C408              <6>  add word sp, %1
  8666                              <4> 		
  8667 00001A94 5B                  <4> 		pop bx
  8668 00001A95 58                  <4> 		pop ax
  8669                              <4> 		
  8670                              <4> 		__fldiv ax, bx, cx, dx, ax, bx
  8671                              <5>  stkopen 0x0E
  8672 00001A96 83EC0E              <6>  sub word sp, %1
  8673 00001A99 54                  <6>  push sp
  8674 00001A9A 5D                  <6>  pop bp
  8675 00001A9B 894600              <5>  mov word [bp+0],%1
  8676 00001A9E 895E02              <5>  mov word [bp+2],%2
  8677 00001AA1 894E04              <5>  mov word [bp+4],%3
  8678 00001AA4 895606              <5>  mov word [bp+6],%4
  8679 00001AA7 E8D8F3              <5>  call proc_fldiv
  8680 00001AAA 54                  <5>  push sp
  8681 00001AAB 5D                  <5>  pop bp
  8682 00001AAC 8B4608              <5>  mov word %5,[bp+8]
  8683 00001AAF 8B5E0A              <5>  mov word %6,[bp+0x0A]
  8684                              <5>  stkclose 0x0E
  8685 00001AB2 83C40E              <6>  add word sp, %1
  8686                              <4> 						
  8687 00001AB5 59                  <4> 		pop cx
  8688 00001AB6 51                  <4> 		push cx
  8689 00001AB7 50                  <4> 		push ax
  8690 00001AB8 53                  <4> 		push bx
  8691                              <4> 		
  8692 00001AB9 89E0                <4> 		mov ax,sp
  8693 00001ABB 89C5                <4> 		mov bp,ax
  8694 00001ABD 83C506              <4> 		add bp,6
  8695                              <4> 		
  8696 00001AC0 BA0000              <4> 		mov dx,0
  8697 00001AC3 B80200              <4> 		mov ax,2
  8698 00001AC6 F7E1                <4> 		mul cx
  8699                              <4> 				
  8700 00001AC8 807E0A00            <4> 		cmp byte [bp+0x0A],0
  8701 00001ACC 7401                <4> 		jz .incremented2
  8702 00001ACE 40                  <4> 			inc ax
  8703                              <4> 		.incremented2:
  8704                              <4> 				
  8705 00001ACF 89C1                <4> 		mov cx,ax														
  8706                              <4> 		
  8707 00001AD1 B8803F              <4> 		mov ax,0x3F80
  8708 00001AD4 BB0000              <4> 		mov bx,0
  8709                              <4> 		
  8710                              <4> 		.l1.1:
  8711 00001AD7 83F900              <4> 			cmp cx,0
  8712 00001ADA 742C                <4> 			jz .l1.2
  8713 00001ADC 51                  <4> 			push cx
  8714                              <4> 			
  8715 00001ADD 8B4E02              <4> 			mov cx,[bp+2]
  8716 00001AE0 8B5604              <4> 			mov dx,[bp+4]
  8717 00001AE3 55                  <4> 			push bp	
  8718                              <4> 			__flmul ax, bx, cx, dx, ax, bx
  8719                              <5>  stkopen 0x0E
  8720 00001AE4 83EC0E              <6>  sub word sp, %1
  8721 00001AE7 54                  <6>  push sp
  8722 00001AE8 5D                  <6>  pop bp
  8723 00001AE9 894600              <5>  mov word [bp+0],%1
  8724 00001AEC 895E02              <5>  mov word [bp+2],%2
  8725 00001AEF 894E04              <5>  mov word [bp+4],%3
  8726 00001AF2 895606              <5>  mov word [bp+6],%4
  8727 00001AF5 E8A9F4              <5>  call proc_flmul
  8728 00001AF8 54                  <5>  push sp
  8729 00001AF9 5D                  <5>  pop bp
  8730 00001AFA 8B4608              <5>  mov word %5,[bp+8]
  8731 00001AFD 8B5E0A              <5>  mov word %6,[bp+0x0A]
  8732                              <5>  stkclose 0x0E
  8733 00001B00 83C40E              <6>  add word sp, %1
  8734 00001B03 5D                  <4> 			pop bp	
  8735                              <4> 							
  8736 00001B04 59                  <4> 			pop cx
  8737 00001B05 49                  <4> 			dec cx
  8738 00001B06 EBCF                <4> 			jmp .l1.1
  8739                              <4> 		.l1.2: 
  8740                              <4> 					
  8741 00001B08 5A                  <4> 		pop dx
  8742 00001B09 59                  <4> 		pop cx
  8743                              <4> 		
  8744                              <4> 		__flmul ax, bx, cx, dx, ax, bx
  8745                              <5>  stkopen 0x0E
  8746 00001B0A 83EC0E              <6>  sub word sp, %1
  8747 00001B0D 54                  <6>  push sp
  8748 00001B0E 5D                  <6>  pop bp
  8749 00001B0F 894600              <5>  mov word [bp+0],%1
  8750 00001B12 895E02              <5>  mov word [bp+2],%2
  8751 00001B15 894E04              <5>  mov word [bp+4],%3
  8752 00001B18 895606              <5>  mov word [bp+6],%4
  8753 00001B1B E883F4              <5>  call proc_flmul
  8754 00001B1E 54                  <5>  push sp
  8755 00001B1F 5D                  <5>  pop bp
  8756 00001B20 8B4608              <5>  mov word %5,[bp+8]
  8757 00001B23 8B5E0A              <5>  mov word %6,[bp+0x0A]
  8758                              <5>  stkclose 0x0E
  8759 00001B26 83C40E              <6>  add word sp, %1
  8760                              <4> 						
  8761 00001B29 89E1                <4> 		mov cx,sp
  8762 00001B2B 89CD                <4> 		mov bp,cx
  8763 00001B2D 83C502              <4> 		add bp,2
  8764                              <4> 		
  8765 00001B30 8B4E06              <4> 		mov cx,[bp+6]
  8766 00001B33 8B5608              <4> 		mov dx,[bp+8]
  8767 00001B36 55                  <4> 		push bp
  8768                              <4> 		__fladd ax, bx, cx, dx, ax, bx		
  8769                              <5>  stkopen 0x0E
  8770 00001B37 83EC0E              <6>  sub word sp, %1
  8771 00001B3A 54                  <6>  push sp
  8772 00001B3B 5D                  <6>  pop bp
  8773 00001B3C 894600              <5>  mov word [bp+0],%1
  8774 00001B3F 895E02              <5>  mov word [bp+2],%2
  8775 00001B42 894E04              <5>  mov word [bp+4],%3
  8776 00001B45 895606              <5>  mov word [bp+6],%4
  8777 00001B48 C7460C0000          <5>  mov word [bp+0x0C],0
  8778 00001B4D E8FDF5              <5>  call proc_fladdorsub
  8779 00001B50 54                  <5>  push sp
  8780 00001B51 5D                  <5>  pop bp
  8781 00001B52 8B4608              <5>  mov word %5,[bp+8]
  8782 00001B55 8B5E0A              <5>  mov word %6,[bp+0x0A]
  8783                              <5>  stkclose 0x0E
  8784 00001B58 83C40E              <6>  add word sp, %1
  8785 00001B5B 5D                  <4> 		pop bp			
  8786 00001B5C 894606              <4> 		mov [bp+6],ax
  8787 00001B5F 895E08              <4> 		mov [bp+8],bx
  8788                              <4> 				
  8789 00001B62 59                  <4> 		pop cx
  8790 00001B63 41                  <4> 		inc cx
  8791 00001B64 E986FE              <4> 		jmp .l1
  8792                              <4> 	.l2:			
  8793                              <4> 	
  8794 00001B67 C3                  <4> 	ret
  8795                              <4> 	
  8796                              <4> 
  8797                              <4> proc_atan:
  8798 00001B68 89E0                <4> 	mov ax,sp
  8799 00001B6A 89C5                <4> 	mov bp,ax 
  8800                              <4> 
  8801 00001B6C C746060000          <4> 	mov word [bp+6],0
  8802 00001B71 C746080000          <4> 	mov word [bp+8],0		
  8803                              <4> 	
  8804 00001B76 B90000              <4> 	mov cx,0
  8805                              <4> 	.l1:
  8806 00001B79 83F903              <4> 		cmp cx,0x03
  8807 00001B7C 0F87CB00            <4> 		ja .l2		
  8808 00001B80 51                  <4> 		push cx
  8809                              <4> 		
  8810 00001B81 D1E1                <4> 		shl cx,1
  8811 00001B83 41                  <4> 		inc cx
  8812 00001B84 51                  <4> 		push cx
  8813                              <4> 								
  8814 00001B85 B8803F              <4> 		mov ax,0x3F80	; 1.0 (alta)
  8815 00001B88 BB0000              <4> 		mov bx,0x0000	; 1.0 (baixa)				
  8816                              <4> 		.l1.1:
  8817 00001B8B 83F900              <4> 			cmp cx,0
  8818 00001B8E 742C                <4> 			jz .l1.2
  8819 00001B90 51                  <4> 			push cx
  8820                              <4> 			
  8821 00001B91 8B4E02              <4> 			mov cx,[bp+2]
  8822 00001B94 8B5604              <4> 			mov dx,[bp+4]
  8823 00001B97 55                  <4> 			push bp	
  8824                              <4> 			__flmul ax, bx, cx, dx, ax, bx
  8825                              <5>  stkopen 0x0E
  8826 00001B98 83EC0E              <6>  sub word sp, %1
  8827 00001B9B 54                  <6>  push sp
  8828 00001B9C 5D                  <6>  pop bp
  8829 00001B9D 894600              <5>  mov word [bp+0],%1
  8830 00001BA0 895E02              <5>  mov word [bp+2],%2
  8831 00001BA3 894E04              <5>  mov word [bp+4],%3
  8832 00001BA6 895606              <5>  mov word [bp+6],%4
  8833 00001BA9 E8F5F3              <5>  call proc_flmul
  8834 00001BAC 54                  <5>  push sp
  8835 00001BAD 5D                  <5>  pop bp
  8836 00001BAE 8B4608              <5>  mov word %5,[bp+8]
  8837 00001BB1 8B5E0A              <5>  mov word %6,[bp+0x0A]
  8838                              <5>  stkclose 0x0E
  8839 00001BB4 83C40E              <6>  add word sp, %1
  8840 00001BB7 5D                  <4> 			pop bp	
  8841                              <4> 							
  8842 00001BB8 59                  <4> 			pop cx
  8843 00001BB9 49                  <4> 			dec cx
  8844 00001BBA EBCF                <4> 			jmp .l1.1
  8845                              <4> 		.l1.2:			
  8846                              <4> 		
  8847 00001BBC 59                  <4> 		pop cx	
  8848 00001BBD 50                  <4> 		push ax
  8849 00001BBE 53                  <4> 		push bx
  8850                              <4> 				
  8851 00001BBF 55                  <4> 		push bp
  8852                              <4> 		__int16tofl cx, cx, dx
  8853                              <5>  stkopen 0x06
  8854 00001BC0 83EC06              <6>  sub word sp, %1
  8855 00001BC3 54                  <6>  push sp
  8856 00001BC4 5D                  <6>  pop bp
  8857 00001BC5 894E00              <5>  mov word [bp+0],%1
  8858 00001BC8 E876EF              <5>  call proc_int16tofl
  8859 00001BCB 54                  <5>  push sp
  8860 00001BCC 5D                  <5>  pop bp
  8861 00001BCD 8B4E02              <5>  mov word %2,[bp+2]
  8862 00001BD0 8B5604              <5>  mov word %3,[bp+4]
  8863                              <5>  stkclose 0x06
  8864 00001BD3 83C406              <6>  add word sp, %1
  8865 00001BD6 5D                  <4> 		pop bp
  8866                              <4> 		
  8867 00001BD7 5B                  <4> 		pop bx
  8868 00001BD8 58                  <4> 		pop ax
  8869                              <4> 		
  8870 00001BD9 55                  <4> 		push bp	
  8871                              <4> 		__fldiv ax, bx, cx, dx, ax, bx
  8872                              <5>  stkopen 0x0E
  8873 00001BDA 83EC0E              <6>  sub word sp, %1
  8874 00001BDD 54                  <6>  push sp
  8875 00001BDE 5D                  <6>  pop bp
  8876 00001BDF 894600              <5>  mov word [bp+0],%1
  8877 00001BE2 895E02              <5>  mov word [bp+2],%2
  8878 00001BE5 894E04              <5>  mov word [bp+4],%3
  8879 00001BE8 895606              <5>  mov word [bp+6],%4
  8880 00001BEB E894F2              <5>  call proc_fldiv
  8881 00001BEE 54                  <5>  push sp
  8882 00001BEF 5D                  <5>  pop bp
  8883 00001BF0 8B4608              <5>  mov word %5,[bp+8]
  8884 00001BF3 8B5E0A              <5>  mov word %6,[bp+0x0A]
  8885                              <5>  stkclose 0x0E
  8886 00001BF6 83C40E              <6>  add word sp, %1
  8887 00001BF9 5D                  <4> 		pop bp
  8888                              <4> 				
  8889 00001BFA 59                  <4> 		pop cx
  8890 00001BFB 51                  <4> 		push cx		
  8891 00001BFC 83E101              <4> 		and cx,0x0001
  8892 00001BFF 83F900              <4> 		cmp cx,0
  8893 00001C02 7410                <4> 		jz .endneg
  8894 00001C04 89C1                <4> 			mov cx,ax	
  8895 00001C06 83C900              <4> 			or cx, 0x0000
  8896 00001C09 F7D1                <4> 			not cx
  8897 00001C0B 81E10080            <4> 			and cx,0x8000								
  8898 00001C0F 25FF7F              <4> 			and ax,0x7FFF			
  8899 00001C12 01C8                <4> 			add ax,cx
  8900                              <4> 		.endneg:
  8901                              <4> 				
  8902 00001C14 8B4E06              <4> 		mov cx,[bp+6]
  8903 00001C17 8B5608              <4> 		mov dx,[bp+8]
  8904 00001C1A 55                  <4> 		push bp		
  8905                              <4> 		__fladd ax, bx, cx, dx, ax, bx
  8906                              <5>  stkopen 0x0E
  8907 00001C1B 83EC0E              <6>  sub word sp, %1
  8908 00001C1E 54                  <6>  push sp
  8909 00001C1F 5D                  <6>  pop bp
  8910 00001C20 894600              <5>  mov word [bp+0],%1
  8911 00001C23 895E02              <5>  mov word [bp+2],%2
  8912 00001C26 894E04              <5>  mov word [bp+4],%3
  8913 00001C29 895606              <5>  mov word [bp+6],%4
  8914 00001C2C C7460C0000          <5>  mov word [bp+0x0C],0
  8915 00001C31 E819F5              <5>  call proc_fladdorsub
  8916 00001C34 54                  <5>  push sp
  8917 00001C35 5D                  <5>  pop bp
  8918 00001C36 8B4608              <5>  mov word %5,[bp+8]
  8919 00001C39 8B5E0A              <5>  mov word %6,[bp+0x0A]
  8920                              <5>  stkclose 0x0E
  8921 00001C3C 83C40E              <6>  add word sp, %1
  8922 00001C3F 5D                  <4> 		pop bp
  8923 00001C40 894606              <4> 		mov [bp+6], ax
  8924 00001C43 895E08              <4> 		mov [bp+8], bx
  8925                              <4> 				
  8926 00001C46 59                  <4> 		pop cx
  8927 00001C47 41                  <4> 		inc cx
  8928 00001C48 E92EFF              <4> 		jmp .l1
  8929                              <4> 	.l2:
  8930                              <4> 		
  8931 00001C4B C3                  <4> 	ret
  8932                              <4> 	
  8933                              <4> proc__fat16:
  8934 00001C4C 89E0                <4> 	mov ax,sp
  8935 00001C4E 89C5                <4> 	mov bp,ax
  8936                              <4> 	
  8937 00001C50 B90100              <4> 	mov cx,1
  8938 00001C53 C746040100          <4> 	mov word [bp+4], 1
  8939                              <4> 	.l1:
  8940 00001C58 3B4E02              <4> 		cmp word cx,[bp+2]
  8941 00001C5B 770D                <4> 		ja .l2
  8942                              <4> 		
  8943 00001C5D 31D2                <4> 		xor dx,dx
  8944 00001C5F 8B4604              <4> 		mov ax,[bp+4]
  8945 00001C62 F7E9                <4> 		imul cx
  8946                              <4> 		
  8947 00001C64 894604              <4> 		mov [bp+4],ax
  8948                              <4> 		
  8949 00001C67 41                  <4> 		inc cx
  8950 00001C68 EBEE                <4> 		jmp .l1
  8951                              <4> 	.l2:
  8952                              <4> 	
  8953 00001C6A C3                  <4> 	ret
  8954                              <4> 		
  8955                              <4> proc__pow16:
  8956 00001C6B 89E0                <4> 	mov ax,sp
  8957 00001C6D 89C5                <4> 	mov bp,ax
  8958                              <4> 	
  8959 00001C6F 8B4E04              <4> 	mov cx,[bp+4]
  8960 00001C72 C746060100          <4> 	mov word [bp+6], 1	
  8961                              <4> 	.l1:
  8962 00001C77 83F900              <4> 		cmp cx,0
  8963 00001C7A 740E                <4> 		jz .l2
  8964                              <4> 		
  8965 00001C7C 31D2                <4> 		xor dx,dx
  8966 00001C7E 8B4602              <4> 		mov ax,[bp+2]
  8967 00001C81 F76E06              <4> 		imul word [bp+6]
  8968                              <4> 		
  8969 00001C84 894606              <4> 		mov [bp+6],ax
  8970                              <4> 		
  8971 00001C87 49                  <4> 		dec cx
  8972 00001C88 EBED                <4> 		jmp .l1
  8973                              <4> 	.l2:
  8974                              <4> 		
  8975 00001C8A C3                  <4> 	ret
  8976                              <4> 	
  8977                              <4> proc__sinnorm:
  8978 00001C8B 89E0                <4> 	mov ax,sp
  8979 00001C8D 89C5                <4> 	mov bp,ax
  8980                              <4> 	
  8981 00001C8F 8B4602              <4> 	mov ax,[bp+2]
  8982 00001C92 8B5E04              <4> 	mov bx,[bp+4]
  8983                              <4> 	
  8984                              <4> 	__norm_factors ax, bx, ax, bx, cx
  8985                              <5>  stkopen 0x0A
  8986 00001C95 83EC0A              <6>  sub word sp, %1
  8987 00001C98 54                  <6>  push sp
  8988 00001C99 5D                  <6>  pop bp
  8989 00001C9A 894600              <5>  mov word [bp+0],%1
  8990 00001C9D 895E02              <5>  mov word [bp+2],%2
  8991 00001CA0 E83601              <5>  call proc__norm_factors
  8992 00001CA3 54                  <5>  push sp
  8993 00001CA4 5D                  <5>  pop bp
  8994 00001CA5 8B4604              <5>  mov word %3,[bp+4]
  8995 00001CA8 8B5E06              <5>  mov word %4,[bp+6]
  8996 00001CAB 8B4E08              <5>  mov word %5,[bp+8]
  8997                              <5>  stkclose 0x0A
  8998 00001CAE 83C40A              <6>  add word sp, %1
  8999                              <4> 
  9000 00001CB1 51                  <4> 	push cx	; factor (phi/PI)
  9001                              <4> 		
  9002 00001CB2 B9C93F              <4> 	mov cx,0x3FC9 ; PI/2 (high)
  9003 00001CB5 BADB0F              <4> 	mov dx,0x0FDB ; PI/2 (low)
  9004                              <4> 	
  9005 00001CB8 50                  <4> 	push ax
  9006 00001CB9 53                  <4> 	push bx
  9007                              <4> 	__cmp32 ax, bx, cx, dx, cl
  9008                              <5>  stkopen 9
  9009 00001CBA 83EC09              <6>  sub word sp, %1
  9010 00001CBD 54                  <6>  push sp
  9011 00001CBE 5D                  <6>  pop bp
  9012 00001CBF 894600              <5>  mov word [bp+0], %1
  9013 00001CC2 895E02              <5>  mov word [bp+2], %2
  9014 00001CC5 894E04              <5>  mov word [bp+4], %3
  9015 00001CC8 895606              <5>  mov word [bp+6], %4
  9016 00001CCB E88BEB              <5>  call proc_cmp32
  9017 00001CCE 54                  <5>  push sp
  9018 00001CCF 5D                  <5>  pop bp
  9019 00001CD0 8A4E08              <5>  mov byte %5, [bp+8]
  9020                              <5>  stkclose 9
  9021 00001CD3 83C409              <6>  add word sp, %1
  9022 00001CD6 5B                  <4> 	pop bx
  9023 00001CD7 58                  <4> 	pop ax
  9024 00001CD8 80F900              <4> 	cmp cl,0
  9025 00001CDB 7E2A                <4> 	jle .l1
  9026 00001CDD B94940              <4> 		mov cx,0x4049 ; PI (high)
  9027 00001CE0 BADB0F              <4> 		mov dx,0x0FDB ; PI (low)
  9028                              <4> 		__flsub cx, dx, ax, bx, ax, bx				
  9029                              <5>  stkopen 0x0E
  9030 00001CE3 83EC0E              <6>  sub word sp, %1
  9031 00001CE6 54                  <6>  push sp
  9032 00001CE7 5D                  <6>  pop bp
  9033 00001CE8 894E00              <5>  mov word [bp+0],%1
  9034 00001CEB 895602              <5>  mov word [bp+2],%2
  9035 00001CEE 894604              <5>  mov word [bp+4],%3
  9036 00001CF1 895E06              <5>  mov word [bp+6],%4
  9037 00001CF4 C7460C0080          <5>  mov word [bp+0x0C],0x8000
  9038 00001CF9 E851F4              <5>  call proc_fladdorsub
  9039 00001CFC 54                  <5>  push sp
  9040 00001CFD 5D                  <5>  pop bp
  9041 00001CFE 8B4608              <5>  mov word %5,[bp+8]
  9042 00001D01 8B5E0A              <5>  mov word %6,[bp+0x0A]
  9043                              <5>  stkclose 0x0E
  9044 00001D04 83C40E              <6>  add word sp, %1
  9045                              <4> 	.l1:
  9046                              <4> 				
  9047 00001D07 59                  <4> 	pop cx
  9048                              <4> 
  9049 00001D08 89E2                <4> 	mov dx,sp
  9050 00001D0A 89D5                <4> 	mov bp,dx
  9051 00001D0C 8B5602              <4> 	mov dx,[bp+2]
  9052 00001D0F 81E20080            <4> 	and dx,0x8000
  9053                              <4> 		
  9054 00001D13 83FA00              <4> 	cmp dx,0
  9055 00001D16 7D01                <4> 	jge .l2
  9056 00001D18 41                  <4> 		inc cx		
  9057                              <4> 	.l2:	
  9058                              <4> 			
  9059 00001D19 BAFF7F              <4> 	mov dx,0x7FFF
  9060 00001D1C 83E101              <4> 	and cx,0x0001
  9061 00001D1F 83F900              <4> 	cmp cx,0
  9062 00001D22 7403                <4> 	jz .l3
  9063 00001D24 BA0080              <4> 		mov dx,0x8000
  9064                              <4> 	.l3:
  9065                              <4> 					
  9066 00001D27 894602              <4> 	mov [bp+2],ax
  9067 00001D2A 895E04              <4> 	mov [bp+4],bx
  9068 00001D2D 895606              <4> 	mov [bp+6],dx
  9069                              <4> 	
  9070 00001D30 C3                  <4> 	ret	
  9071                              <4> 	
  9072                              <4> proc__cosnorm:
  9073 00001D31 89E0                <4> 	mov ax,sp
  9074 00001D33 89C5                <4> 	mov bp,ax
  9075                              <4> 	
  9076 00001D35 8B4602              <4> 	mov ax,[bp+2]
  9077 00001D38 8B5E04              <4> 	mov bx,[bp+4]
  9078                              <4> 	
  9079                              <4> 	__norm_factors ax, bx, ax, bx, cx
  9080                              <5>  stkopen 0x0A
  9081 00001D3B 83EC0A              <6>  sub word sp, %1
  9082 00001D3E 54                  <6>  push sp
  9083 00001D3F 5D                  <6>  pop bp
  9084 00001D40 894600              <5>  mov word [bp+0],%1
  9085 00001D43 895E02              <5>  mov word [bp+2],%2
  9086 00001D46 E89000              <5>  call proc__norm_factors
  9087 00001D49 54                  <5>  push sp
  9088 00001D4A 5D                  <5>  pop bp
  9089 00001D4B 8B4604              <5>  mov word %3,[bp+4]
  9090 00001D4E 8B5E06              <5>  mov word %4,[bp+6]
  9091 00001D51 8B4E08              <5>  mov word %5,[bp+8]
  9092                              <5>  stkclose 0x0A
  9093 00001D54 83C40A              <6>  add word sp, %1
  9094                              <4> 
  9095 00001D57 51                  <4> 	push cx		; fator2 (phi/PI)
  9096                              <4> 	
  9097 00001D58 B9C93F              <4> 	mov cx,0x3FC9 ; PI/2 (high)
  9098 00001D5B BADB0F              <4> 	mov dx,0x0FDB ; PI/2 (low)
  9099                              <4> 		
  9100 00001D5E 50                  <4> 	push ax
  9101 00001D5F 53                  <4> 	push bx
  9102                              <4> 	__cmp32 ax, bx, cx, dx, cl
  9103                              <5>  stkopen 9
  9104 00001D60 83EC09              <6>  sub word sp, %1
  9105 00001D63 54                  <6>  push sp
  9106 00001D64 5D                  <6>  pop bp
  9107 00001D65 894600              <5>  mov word [bp+0], %1
  9108 00001D68 895E02              <5>  mov word [bp+2], %2
  9109 00001D6B 894E04              <5>  mov word [bp+4], %3
  9110 00001D6E 895606              <5>  mov word [bp+6], %4
  9111 00001D71 E8E5EA              <5>  call proc_cmp32
  9112 00001D74 54                  <5>  push sp
  9113 00001D75 5D                  <5>  pop bp
  9114 00001D76 8A4E08              <5>  mov byte %5, [bp+8]
  9115                              <5>  stkclose 9
  9116 00001D79 83C409              <6>  add word sp, %1
  9117 00001D7C 5B                  <4> 	pop bx
  9118 00001D7D 58                  <4> 	pop ax
  9119                              <4> 		
  9120 00001D7E 51                  <4> 	push cx
  9121 00001D7F 80F900              <4> 	cmp cl,0
  9122 00001D82 7E2A                <4> 	jle .l1
  9123 00001D84 B94940              <4> 		mov cx,0x4049 ; PI (high)
  9124 00001D87 BADB0F              <4> 		mov dx,0x0FDB ; PI (low)
  9125                              <4> 		__flsub cx, dx, ax, bx, ax, bx	
  9126                              <5>  stkopen 0x0E
  9127 00001D8A 83EC0E              <6>  sub word sp, %1
  9128 00001D8D 54                  <6>  push sp
  9129 00001D8E 5D                  <6>  pop bp
  9130 00001D8F 894E00              <5>  mov word [bp+0],%1
  9131 00001D92 895602              <5>  mov word [bp+2],%2
  9132 00001D95 894604              <5>  mov word [bp+4],%3
  9133 00001D98 895E06              <5>  mov word [bp+6],%4
  9134 00001D9B C7460C0080          <5>  mov word [bp+0x0C],0x8000
  9135 00001DA0 E8AAF3              <5>  call proc_fladdorsub
  9136 00001DA3 54                  <5>  push sp
  9137 00001DA4 5D                  <5>  pop bp
  9138 00001DA5 8B4608              <5>  mov word %5,[bp+8]
  9139 00001DA8 8B5E0A              <5>  mov word %6,[bp+0x0A]
  9140                              <5>  stkclose 0x0E
  9141 00001DAB 83C40E              <6>  add word sp, %1
  9142                              <4> 	.l1:
  9143                              <4> 						
  9144 00001DAE 59                  <4> 	pop cx	; quadrante2 (true, false)
  9145 00001DAF 5A                  <4> 	pop dx	; fator2 (phi/PI)
  9146                              <4> 
  9147 00001DB0 54                  <4> 	push sp
  9148 00001DB1 5D                  <4> 	pop bp		
  9149 00001DB2 894602              <4> 	mov [bp+2],ax	
  9150 00001DB5 895E04              <4> 	mov [bp+4],bx
  9151                              <4> 	
  9152 00001DB8 B8FF7F              <4> 	mov ax,0x7FFF
  9153                              <4> 	
  9154 00001DBB 83E201              <4> 	and dx,0x0001
  9155 00001DBE 83FA00              <4> 	cmp dx,0
  9156 00001DC1 750A                <4> 	jnz .fimpar
  9157 00001DC3 80F900              <4> 		cmp cl,0
  9158 00001DC6 7C0D                <4> 		jl .endf		
  9159 00001DC8 B80080              <4> 			mov ax,0x8000			
  9160 00001DCB EB08                <4> 		jmp .endf
  9161                              <4> 	.fimpar:		
  9162 00001DCD 80F900              <4> 		cmp cl,0
  9163 00001DD0 7D03                <4> 		jge .endf
  9164 00001DD2 B80080              <4> 			mov ax,0x8000
  9165                              <4> 	.endf:		
  9166                              <4> 						
  9167 00001DD5 894606              <4> 	mov word [bp+6],ax
  9168                              <4> 	
  9169 00001DD8 C3                  <4> 	ret
  9170                              <4> 	
  9171                              <4> proc__norm_factors: ; f1=(phi%PI) --> float 32bits, f2=(phi/PI) --> int 16bits
  9172 00001DD9 89E0                <4> 	mov ax,sp
  9173 00001DDB 89C5                <4> 	mov bp,ax
  9174                              <4> 	
  9175 00001DDD 8B4602              <4> 	mov ax,[bp+2]
  9176 00001DE0 8B5E04              <4> 	mov bx,[bp+4]	
  9177 00001DE3 25FF7F              <4> 	and ax,0x7FFF
  9178                              <4> 		
  9179 00001DE6 B94940              <4> 	mov cx,0x4049 ; PI (high)
  9180 00001DE9 BADB0F              <4> 	mov dx,0x0FDB ; PI (low)
  9181                              <4> 
  9182 00001DEC 55                  <4> 	push bp
  9183                              <4> 	__fldiv ax, bx, cx, dx, ax, bx		
  9184                              <5>  stkopen 0x0E
  9185 00001DED 83EC0E              <6>  sub word sp, %1
  9186 00001DF0 54                  <6>  push sp
  9187 00001DF1 5D                  <6>  pop bp
  9188 00001DF2 894600              <5>  mov word [bp+0],%1
  9189 00001DF5 895E02              <5>  mov word [bp+2],%2
  9190 00001DF8 894E04              <5>  mov word [bp+4],%3
  9191 00001DFB 895606              <5>  mov word [bp+6],%4
  9192 00001DFE E881F0              <5>  call proc_fldiv
  9193 00001E01 54                  <5>  push sp
  9194 00001E02 5D                  <5>  pop bp
  9195 00001E03 8B4608              <5>  mov word %5,[bp+8]
  9196 00001E06 8B5E0A              <5>  mov word %6,[bp+0x0A]
  9197                              <5>  stkclose 0x0E
  9198 00001E09 83C40E              <6>  add word sp, %1
  9199                              <4> 	__fltoint16 ax, bx, ax
  9200                              <5>  stkopen 0x06
  9201 00001E0C 83EC06              <6>  sub word sp, %1
  9202 00001E0F 54                  <6>  push sp
  9203 00001E10 5D                  <6>  pop bp
  9204 00001E11 894600              <5>  mov word [bp+0],%1
  9205 00001E14 895E02              <5>  mov word [bp+2],%2
  9206 00001E17 E8A5EC              <5>  call proc_fltoint16
  9207 00001E1A 54                  <5>  push sp
  9208 00001E1B 5D                  <5>  pop bp
  9209 00001E1C 8B4604              <5>  mov word %3,[bp+4]
  9210                              <5>  stkclose 0x06
  9211 00001E1F 83C406              <6>  add word sp, %1
  9212 00001E22 5D                  <4> 	pop bp
  9213                              <4> 		
  9214 00001E23 50                  <4> 	push ax		; fator
  9215                              <4> 		
  9216 00001E24 55                  <4> 	push bp
  9217                              <4> 	__int16tofl	ax, ax, bx	
  9218                              <5>  stkopen 0x06
  9219 00001E25 83EC06              <6>  sub word sp, %1
  9220 00001E28 54                  <6>  push sp
  9221 00001E29 5D                  <6>  pop bp
  9222 00001E2A 894600              <5>  mov word [bp+0],%1
  9223 00001E2D E811ED              <5>  call proc_int16tofl
  9224 00001E30 54                  <5>  push sp
  9225 00001E31 5D                  <5>  pop bp
  9226 00001E32 8B4602              <5>  mov word %2,[bp+2]
  9227 00001E35 8B5E04              <5>  mov word %3,[bp+4]
  9228                              <5>  stkclose 0x06
  9229 00001E38 83C406              <6>  add word sp, %1
  9230                              <4> 	
  9231 00001E3B B94940              <4> 	mov cx,0x4049 ; PI (high)
  9232 00001E3E BADB0F              <4> 	mov dx,0x0FDB ; PI (low)
  9233                              <4> 	__flmul ax, bx, cx, dx, ax, bx		
  9234                              <5>  stkopen 0x0E
  9235 00001E41 83EC0E              <6>  sub word sp, %1
  9236 00001E44 54                  <6>  push sp
  9237 00001E45 5D                  <6>  pop bp
  9238 00001E46 894600              <5>  mov word [bp+0],%1
  9239 00001E49 895E02              <5>  mov word [bp+2],%2
  9240 00001E4C 894E04              <5>  mov word [bp+4],%3
  9241 00001E4F 895606              <5>  mov word [bp+6],%4
  9242 00001E52 E84CF1              <5>  call proc_flmul
  9243 00001E55 54                  <5>  push sp
  9244 00001E56 5D                  <5>  pop bp
  9245 00001E57 8B4608              <5>  mov word %5,[bp+8]
  9246 00001E5A 8B5E0A              <5>  mov word %6,[bp+0x0A]
  9247                              <5>  stkclose 0x0E
  9248 00001E5D 83C40E              <6>  add word sp, %1
  9249 00001E60 5D                  <4> 	pop bp
  9250                              <4> 	
  9251 00001E61 8B4E02              <4> 	mov cx,[bp+2]
  9252 00001E64 8B5604              <4> 	mov dx,[bp+4]
  9253 00001E67 81E1FF7F            <4> 	and cx,0x7FFF
  9254                              <4> 		
  9255                              <4> 	__flsub cx, dx, ax, bx, ax, bx 			; theta -> ax bx
  9256                              <5>  stkopen 0x0E
  9257 00001E6B 83EC0E              <6>  sub word sp, %1
  9258 00001E6E 54                  <6>  push sp
  9259 00001E6F 5D                  <6>  pop bp
  9260 00001E70 894E00              <5>  mov word [bp+0],%1
  9261 00001E73 895602              <5>  mov word [bp+2],%2
  9262 00001E76 894604              <5>  mov word [bp+4],%3
  9263 00001E79 895E06              <5>  mov word [bp+6],%4
  9264 00001E7C C7460C0080          <5>  mov word [bp+0x0C],0x8000
  9265 00001E81 E8C9F2              <5>  call proc_fladdorsub
  9266 00001E84 54                  <5>  push sp
  9267 00001E85 5D                  <5>  pop bp
  9268 00001E86 8B4608              <5>  mov word %5,[bp+8]
  9269 00001E89 8B5E0A              <5>  mov word %6,[bp+0x0A]
  9270                              <5>  stkclose 0x0E
  9271 00001E8C 83C40E              <6>  add word sp, %1
  9272                              <4> 	
  9273 00001E8F 59                  <4> 	pop cx				
  9274                              <4> 		
  9275 00001E90 89E2                <4> 	mov dx,sp
  9276 00001E92 89D5                <4> 	mov bp,dx	
  9277 00001E94 894606              <4> 	mov [bp+6],ax
  9278 00001E97 895E08              <4> 	mov [bp+8],bx
  9279 00001E9A 894E0A              <4> 	mov [bp+0x0A],cx
  9280                              <4> 		
  9281 00001E9D C3                  <4> 	ret
  9282                              <4> 	
  9283                              <4> %endif
  9284                              <3> 	
  9285                              <3> %macro to0x360 1
  9286                              <3> 	to0x360 %1, %1
  9287                              <3> %endmacro
  9288                              <3> 
  9289                              <3> %macro to0x360 2
  9290                              <3> 	to0x360 cs, %1, cs, %2
  9291                              <3> %endmacro
  9292                              <3> 
  9293                              <3> %macro toradians 1
  9294                              <3> 	toradians %1, %1
  9295                              <3> %endmacro
  9296                              <3> 
  9297                              <3> %macro todegrees 1
  9298                              <3> 	todegrees %1, %1
  9299                              <3> %endmacro
  9300                              <3> 
  9301                              <3> %macro toradians 2
  9302                              <3> 	toradians cs, %1, cs, %2
  9303                              <3> %endmacro
  9304                              <3> 	
  9305                              <3> %macro todegrees 2
  9306                              <3> 	todegrees cs, %1, cs, %2
  9307                              <3> %endmacro	
  9308                              <3> 	
  9309                              <3> %macro atan 1
  9310                              <3> 	atan %1, %1
  9311                              <3> %endmacro	
  9312                              <3> 	
  9313                              <3> %macro atan 2
  9314                              <3> 	atan cs, %1, cs, %2
  9315                              <3> %endmacro	
  9316                              <3> 	
  9317                              <3> %macro sin 1
  9318                              <3> 	sin %1, %1
  9319                              <3> %endmacro	
  9320                              <3> 	
  9321                              <3> %macro sin 2
  9322                              <3> 	sin cs, %1, cs, %2
  9323                              <3> %endmacro
  9324                              <3> 
  9325                              <3> %macro cos 1
  9326                              <3> 	cos %1, %1
  9327                              <3> %endmacro	
  9328                              <3> 	
  9329                              <3> %macro cos 2
  9330                              <3> 	cos cs, %1, cs, %2
  9331                              <3> %endmacro		
  9332                              <3> 	
  9333                              <3> %macro sin 4
  9334                              <3> 	sinorcos %1, %2, %3, %4, 1
  9335                              <3> %endmacro
  9336                              <3> 
  9337                              <3> %macro cos 4
  9338                              <3> 	sinorcos %1, %2, %3, %4, 0
  9339                              <3> %endmacro
  9340                              <3> 
  9341                              <3> %macro to0x360 4
  9342                              <3> 	stkopen 0x08
  9343                              <3> 	mov ax,%1
  9344                              <3> 	mov ds,ax
  9345                              <3> 	mov ax,[%2+2]
  9346                              <3> 	mov [bp+0],ax
  9347                              <3> 	mov ax,[%2]
  9348                              <3> 	mov [bp+2],ax
  9349                              <3> 	call proc_to0x360
  9350                              <3> 	mov ax,sp
  9351                              <3> 	mov bp,ax
  9352                              <3> 	mov ax,%3
  9353                              <3> 	mov ds,ax
  9354                              <3> 	mov ax,[bp+4]
  9355                              <3> 	mov [%4+2],ax
  9356                              <3> 	mov ax,[bp+6]
  9357                              <3> 	mov [%4],ax
  9358                              <3> 	stkclose 0x08
  9359                              <3> %endmacro	
  9360                              <3> 
  9361                              <3> %macro toradians 4
  9362                              <3> 	stkopen 0x08
  9363                              <3> 	mov ax,%1
  9364                              <3> 	mov ds,ax
  9365                              <3> 	mov ax,[%2+2]
  9366                              <3> 	mov [bp+0],ax
  9367                              <3> 	mov ax,[%2]
  9368                              <3> 	mov [bp+2],ax
  9369                              <3> 	call proc_toradians
  9370                              <3> 	mov ax,sp
  9371                              <3> 	mov bp,ax
  9372                              <3> 	mov ax,%3
  9373                              <3> 	mov ds,ax
  9374                              <3> 	mov ax,[bp+4]
  9375                              <3> 	mov [%4+2],ax
  9376                              <3> 	mov ax,[bp+6]
  9377                              <3> 	mov [%4],ax
  9378                              <3> 	stkclose 0x08
  9379                              <3> %endmacro	
  9380                              <3> 
  9381                              <3> %macro todegrees 4
  9382                              <3> 	stkopen 0x08
  9383                              <3> 	mov ax,%1
  9384                              <3> 	mov ds,ax
  9385                              <3> 	mov ax,[%2+2]
  9386                              <3> 	mov [bp+0],ax
  9387                              <3> 	mov ax,[%2]
  9388                              <3> 	mov [bp+2],ax
  9389                              <3> 	call proc_todegrees
  9390                              <3> 	mov ax,sp
  9391                              <3> 	mov bp,ax
  9392                              <3> 	mov ax,%3
  9393                              <3> 	mov ds,ax
  9394                              <3> 	mov ax,[bp+4]
  9395                              <3> 	mov [%4+2],ax
  9396                              <3> 	mov ax,[bp+6]
  9397                              <3> 	mov [%4],ax
  9398                              <3> 	stkclose 0x08
  9399                              <3> %endmacro	
  9400                              <3> 
  9401                              <3> %macro atan 4
  9402                              <3> 	stkopen 0x08
  9403                              <3> 	mov ax,%1
  9404                              <3> 	mov ds,ax
  9405                              <3> 	mov ax,[%2+2]
  9406                              <3> 	mov [bp+0],ax
  9407                              <3> 	mov ax,[%2]
  9408                              <3> 	mov [bp+2],ax
  9409                              <3> 	call proc_atan
  9410                              <3> 	mov ax,sp
  9411                              <3> 	mov bp,ax
  9412                              <3> 	mov ax,%3
  9413                              <3> 	mov ds,ax
  9414                              <3> 	mov ax,[bp+4]
  9415                              <3> 	mov [%4+2],ax
  9416                              <3> 	mov ax,[bp+6]
  9417                              <3> 	mov [%4],ax
  9418                              <3> 	stkclose 0x08
  9419                              <3> %endmacro
  9420                              <3> 	
  9421                              <3> %macro sinorcos 5
  9422                              <3> 	stkopen 0x09
  9423                              <3> 	mov ax,%1
  9424                              <3> 	mov ds,ax
  9425                              <3> 	mov ax,[%2+2]
  9426                              <3> 	mov [bp+0],ax
  9427                              <3> 	mov ax,[%2]
  9428                              <3> 	mov [bp+2],ax
  9429                              <3> 	mov byte [bp+8],%5	
  9430                              <3> 	call proc_sinorcos
  9431                              <3> 	mov ax,sp
  9432                              <3> 	mov bp,ax
  9433                              <3> 	mov ax,%3
  9434                              <3> 	mov ds,ax
  9435                              <3> 	mov ax,[bp+4]
  9436                              <3> 	mov [%4+2],ax
  9437                              <3> 	mov ax,[bp+6]
  9438                              <3> 	mov [%4],ax
  9439                              <3> 	stkclose 0x09
  9440                              <3> %endmacro
  9441                              <3> 	
  9442                              <3> %endif
  9443                              <2> 	
  9444                              <2> 	; depende da macro __setpx ( g0x*.mac )
  9445                              <2> 		
  9446                              <2> %macro __drawstring 4
  9447                              <2> 	__drawstring cs, %1, %2, %3, %4
  9448                              <2> %endmacro
  9449                              <2> 
  9450                              <2> %macro __drawstring 5
  9451                              <2> 	stkopen 0x07
  9452                              <2> 	mov word [bp+0],%1
  9453                              <2> 	mov word [bp+2],%2
  9454                              <2> 	mov byte [bp+4],%3
  9455                              <2> 	mov byte [bp+5],%4
  9456                              <2> 	mov byte [bp+6],%5
  9457                              <2> 	call proc_drawstring
  9458                              <2> 	stkclose 0x07
  9459                              <2> %endmacro		
  9460                              <2> 		
  9461                              <2> %macro __drawarc 10
  9462                              <2> 	stkopen 0x0A
  9463                              <2> 	mov word [bp+0],%1
  9464                              <2> 	mov word [bp+2],%2
  9465                              <2> 	mov word [bp+4],%3
  9466                              <2> 	mov word [bp+6],%4	
  9467                              <2> 	mov byte [bp+8],%5
  9468                              <2> 	mov byte [bp+9],%6
  9469                              <2> 	call proc_drawarc
  9470                              <2> 	stkclose 0x0A
  9471                              <2> %endmacro	
  9472                              <2> 
  9473                              <2> %macro __fillrect 5
  9474                              <2> 	stkopen 0x09
  9475                              <2> 	mov word [bp+0],%1
  9476                              <2> 	mov word [bp+2],%2
  9477                              <2> 	mov word [bp+4],%3
  9478                              <2> 	mov word [bp+6],%4
  9479                              <2> 	mov byte [bp+8],%5
  9480                              <2> 	call proc_fillrect
  9481                              <2> 	stkclose 0x09
  9482                              <2> %endmacro	
  9483                              <2> 
  9484                              <2> %macro __drawrect 5
  9485                              <2> 	stkopen 0x09
  9486                              <2> 	mov word [bp+0],%1
  9487                              <2> 	mov word [bp+2],%2
  9488                              <2> 	mov word [bp+4],%3
  9489                              <2> 	mov word [bp+6],%4
  9490                              <2> 	mov byte [bp+8],%5
  9491                              <2> 	call proc_drawrect
  9492                              <2> 	stkclose 0x09
  9493                              <2> %endmacro	
  9494                              <2> 
  9495                              <2> %macro __drawlineh 4
  9496                              <2> 	stkopen 0x07
  9497                              <2> 	mov word [bp+0],%1
  9498                              <2> 	mov word [bp+2],%2
  9499                              <2> 	mov word [bp+4],%3
  9500                              <2> 	mov byte [bp+6],%4
  9501                              <2> 	call proc_drawlineh	
  9502                              <2> 	stkclose 0x07
  9503                              <2> %endmacro
  9504                              <2> 
  9505                              <2> %macro __drawlinev 4
  9506                              <2> 	stkopen 0x07
  9507                              <2> 	mov word [bp+0],%1
  9508                              <2> 	mov word [bp+2],%2
  9509                              <2> 	mov word [bp+4],%3
  9510                              <2> 	mov byte [bp+6],%4
  9511                              <2> 	call proc_drawlinev	
  9512                              <2> 	stkclose 0x07
  9513                              <2> %endmacro
  9514                              <2> 
  9515                              <2> %macro __arc_quadcoords 8
  9516                              <2> 	stkopen 0x10
  9517                              <2> 	mov word [bp+0],%1
  9518                              <2> 	mov word [bp+2],%2
  9519                              <2> 	mov word [bp+4],%3
  9520                              <2> 	mov word [bp+6],%4
  9521                              <2> 	call proc__arc_quadcoords
  9522                              <2> 	push sp
  9523                              <2> 	pop bp
  9524                              <2> 	mov word %5, [bp+8]
  9525                              <2> 	mov word %6, [bp+0x0A]
  9526                              <2> 	mov word %7, [bp+0x0C]
  9527                              <2> 	mov word %8, [bp+0x0E]	
  9528                              <2> 	stkclose 0x10
  9529                              <2> %endmacro
  9530                              <2> 
  9531                              <2> %macro __x2dcoord 6
  9532                              <2> 	stkopen 0x0C
  9533                              <2> 	mov word [bp+0],%1
  9534                              <2> 	mov word [bp+2],%2
  9535                              <2> 	mov word [bp+4],%3
  9536                              <2> 	mov word [bp+6],%4
  9537                              <2> 	call proc__x2dcoord
  9538                              <2> 	push sp
  9539                              <2> 	pop bp
  9540                              <2> 	mov word %5,[bp+8]
  9541                              <2> 	mov word %6,[bp+0x0A]
  9542                              <2> 	stkclose 0x0C
  9543                              <2> %endmacro
  9544                              <2> 
  9545                              <2> %macro __y2dcoord 6
  9546                              <2> 	stkopen 0x0C
  9547                              <2> 	mov word [bp+0],%1
  9548                              <2> 	mov word [bp+2],%2
  9549                              <2> 	mov word [bp+4],%3
  9550                              <2> 	mov word [bp+6],%4
  9551                              <2> 	call proc__y2dcoord
  9552                              <2> 	push sp
  9553                              <2> 	pop bp
  9554                              <2> 	mov word %5,[bp+8]
  9555                              <2> 	mov word %6,[bp+0x0A]
  9556                              <2> 	stkclose 0x0C
  9557                              <2> %endmacro
  9558                              <2> 
  9559                              <2> %macro __arc_inc 4
  9560                              <2> 	stkopen 0x0C
  9561                              <2> 	mov word [bp+0],%1
  9562                              <2> 	mov word [bp+2],%2
  9563                              <2> 	call proc__arc_inc
  9564                              <2> 	push sp
  9565                              <2> 	pop bp
  9566                              <2> 	mov word %3,[bp+4]
  9567                              <2> 	mov word %4,[bp+6]
  9568                              <2> 	stkclose 0x0C
  9569                              <2> %endmacro
  9570                              <2> 		
  9571                              <2> section .data
  9572                              <2> 
  9573                              <2> proc_drawstring:		
  9574 00001E9E 89E0                <2> 	mov ax,sp
  9575 00001EA0 89C5                <2> 	mov bp,ax
  9576                              <2> 	
  9577 00001EA2 8B4602              <2> 	mov ax,[bp+2]
  9578 00001EA5 8ED8                <2> 	mov ds,ax
  9579 00001EA7 8B7604              <2> 	mov si,[bp+4]			
  9580                              <2> 
  9581 00001EAA 8A7607              <2> 	mov dh,[bp+7]
  9582 00001EAD 8A5606              <2> 	mov dl,[bp+6]
  9583 00001EB0 B402                <2> 	mov ah,02h
  9584 00001EB2 B700                <2> 	mov bh,0
  9585 00001EB4 CD10                <2> 	int 10h
  9586                              <2> 		
  9587                              <2> 	.l1:
  9588 00001EB6 AC                  <2> 		lodsb
  9589 00001EB7 3C00                <2> 		cmp al,0
  9590 00001EB9 740B                <2> 		jz .l2
  9591                              <2> 				
  9592 00001EBB B40E                <2> 		mov ah,0Eh
  9593 00001EBD B700                <2> 		mov bh,0
  9594 00001EBF 8A5E08              <2> 		mov bl,[bp+8]	
  9595 00001EC2 CD10                <2> 		int 10h	
  9596                              <2> 	
  9597 00001EC4 EBF0                <2> 		jmp .l1
  9598                              <2> 	.l2:	
  9599                              <2> 		
  9600 00001EC6 C3                  <2> 	ret
  9601                              <2> 
  9602                              <2> proc_drawlineh:
  9603 00001EC7 89E0                <2> 	mov ax,sp
  9604 00001EC9 89C5                <2> 	mov bp,ax
  9605                              <2> 	
  9606 00001ECB 8B4602              <2> 	mov ax,[bp+2]
  9607 00001ECE 8B5E04              <2> 	mov bx,[bp+4]
  9608 00001ED1 8B4E06              <2> 	mov cx,[bp+6]
  9609 00001ED4 8A5608              <2> 	mov dl,[bp+8]
  9610                              <2> 	
  9611                              <2> 	.l1:
  9612 00001ED7 39C8                <2> 		cmp ax,cx
  9613 00001ED9 771F                <2> 		ja .l2
  9614 00001EDB 50                  <2> 		push ax
  9615 00001EDC 53                  <2> 		push bx
  9616 00001EDD 51                  <2> 		push cx
  9617 00001EDE 52                  <2> 		push dx
  9618                              <2> 		
  9619                              <2> 		__setpx ax, bx, dl
  9620                              <3>  stkopen 0x05
  9621 00001EDF 83EC05              <4>  sub word sp, %1
  9622 00001EE2 54                  <4>  push sp
  9623 00001EE3 5D                  <4>  pop bp
  9624 00001EE4 894600              <3>  mov word [bp+0],%1
  9625 00001EE7 895E02              <3>  mov word [bp+2],%2
  9626 00001EEA 885604              <3>  mov byte [bp+4],%3
  9627 00001EED E8F9E5              <3>  call proc_setpx
  9628                              <3>  stkclose 0x05
  9629 00001EF0 83C405              <4>  add word sp, %1
  9630                              <2> 				
  9631 00001EF3 5A                  <2> 		pop dx		
  9632 00001EF4 59                  <2> 		pop cx
  9633 00001EF5 5B                  <2> 		pop bx
  9634 00001EF6 58                  <2> 		pop ax
  9635 00001EF7 40                  <2> 		inc ax
  9636 00001EF8 EBDD                <2> 		jmp .l1
  9637                              <2> 	.l2:
  9638                              <2> 	
  9639 00001EFA C3                  <2> 	ret
  9640                              <2> 	
  9641                              <2> 
  9642                              <2> proc_drawlinev:
  9643 00001EFB 89E0                <2> 	mov ax,sp
  9644 00001EFD 89C5                <2> 	mov bp,ax
  9645                              <2> 	
  9646 00001EFF 8B4602              <2> 	mov ax,[bp+2]
  9647 00001F02 8B5E04              <2> 	mov bx,[bp+4]
  9648 00001F05 8B4E06              <2> 	mov cx,[bp+6]
  9649 00001F08 8A5608              <2> 	mov dl,[bp+8]
  9650                              <2> 	
  9651                              <2> 	.l1:
  9652 00001F0B 39CB                <2> 		cmp bx,cx
  9653 00001F0D 771F                <2> 		ja .l2
  9654 00001F0F 50                  <2> 		push ax
  9655 00001F10 53                  <2> 		push bx
  9656 00001F11 51                  <2> 		push cx
  9657 00001F12 52                  <2> 		push dx
  9658                              <2> 		
  9659                              <2> 		__setpx ax, bx, dl
  9660                              <3>  stkopen 0x05
  9661 00001F13 83EC05              <4>  sub word sp, %1
  9662 00001F16 54                  <4>  push sp
  9663 00001F17 5D                  <4>  pop bp
  9664 00001F18 894600              <3>  mov word [bp+0],%1
  9665 00001F1B 895E02              <3>  mov word [bp+2],%2
  9666 00001F1E 885604              <3>  mov byte [bp+4],%3
  9667 00001F21 E8C5E5              <3>  call proc_setpx
  9668                              <3>  stkclose 0x05
  9669 00001F24 83C405              <4>  add word sp, %1
  9670                              <2> 				
  9671 00001F27 5A                  <2> 		pop dx		
  9672 00001F28 59                  <2> 		pop cx
  9673 00001F29 5B                  <2> 		pop bx
  9674 00001F2A 58                  <2> 		pop ax
  9675 00001F2B 43                  <2> 		inc bx
  9676 00001F2C EBDD                <2> 		jmp .l1
  9677                              <2> 	.l2:
  9678                              <2> 	
  9679 00001F2E C3                  <2> 	ret
  9680                              <2> 
  9681                              <2> proc_drawrect:
  9682 00001F2F 89E0                <2> 	mov ax,sp
  9683 00001F31 89C5                <2> 	mov bp,ax		
  9684 00001F33 8B4602              <2> 	mov ax,[bp+2]
  9685 00001F36 8B5E04              <2> 	mov bx,[bp+4]	
  9686 00001F39 8B4E06              <2> 	mov cx,[bp+6]
  9687 00001F3C 8A560A              <2> 	mov dl,[bp+0x0A]
  9688                              <2> 	__drawlineh ax, bx, cx, dl
  9689                              <3>  stkopen 0x07
  9690 00001F3F 83EC07              <4>  sub word sp, %1
  9691 00001F42 54                  <4>  push sp
  9692 00001F43 5D                  <4>  pop bp
  9693 00001F44 894600              <3>  mov word [bp+0],%1
  9694 00001F47 895E02              <3>  mov word [bp+2],%2
  9695 00001F4A 894E04              <3>  mov word [bp+4],%3
  9696 00001F4D 885606              <3>  mov byte [bp+6],%4
  9697 00001F50 E874FF              <3>  call proc_drawlineh
  9698                              <3>  stkclose 0x07
  9699 00001F53 83C407              <4>  add word sp, %1
  9700                              <2> 	
  9701 00001F56 89E0                <2> 	mov ax,sp
  9702 00001F58 89C5                <2> 	mov bp,ax		
  9703 00001F5A 8B4602              <2> 	mov ax,[bp+2]
  9704 00001F5D 8B5E08              <2> 	mov bx,[bp+8]	
  9705 00001F60 8B4E06              <2> 	mov cx,[bp+6]
  9706 00001F63 8A560A              <2> 	mov dl,[bp+0x0A]
  9707                              <2> 	__drawlineh ax, bx, cx, dl
  9708                              <3>  stkopen 0x07
  9709 00001F66 83EC07              <4>  sub word sp, %1
  9710 00001F69 54                  <4>  push sp
  9711 00001F6A 5D                  <4>  pop bp
  9712 00001F6B 894600              <3>  mov word [bp+0],%1
  9713 00001F6E 895E02              <3>  mov word [bp+2],%2
  9714 00001F71 894E04              <3>  mov word [bp+4],%3
  9715 00001F74 885606              <3>  mov byte [bp+6],%4
  9716 00001F77 E84DFF              <3>  call proc_drawlineh
  9717                              <3>  stkclose 0x07
  9718 00001F7A 83C407              <4>  add word sp, %1
  9719                              <2> 	
  9720 00001F7D 89E0                <2> 	mov ax,sp
  9721 00001F7F 89C5                <2> 	mov bp,ax		
  9722 00001F81 8B4602              <2> 	mov ax,[bp+2]
  9723 00001F84 8B5E04              <2> 	mov bx,[bp+4]	
  9724 00001F87 8B4E08              <2> 	mov cx,[bp+8]
  9725 00001F8A 8A560A              <2> 	mov dl,[bp+0x0A]
  9726                              <2> 	__drawlinev ax, bx, cx, dl
  9727                              <3>  stkopen 0x07
  9728 00001F8D 83EC07              <4>  sub word sp, %1
  9729 00001F90 54                  <4>  push sp
  9730 00001F91 5D                  <4>  pop bp
  9731 00001F92 894600              <3>  mov word [bp+0],%1
  9732 00001F95 895E02              <3>  mov word [bp+2],%2
  9733 00001F98 894E04              <3>  mov word [bp+4],%3
  9734 00001F9B 885606              <3>  mov byte [bp+6],%4
  9735 00001F9E E85AFF              <3>  call proc_drawlinev
  9736                              <3>  stkclose 0x07
  9737 00001FA1 83C407              <4>  add word sp, %1
  9738                              <2> 	
  9739 00001FA4 89E0                <2> 	mov ax,sp
  9740 00001FA6 89C5                <2> 	mov bp,ax		
  9741 00001FA8 8B4606              <2> 	mov ax,[bp+6]
  9742 00001FAB 8B5E04              <2> 	mov bx,[bp+4]	
  9743 00001FAE 8B4E08              <2> 	mov cx,[bp+8]
  9744 00001FB1 8A560A              <2> 	mov dl,[bp+0x0A]
  9745                              <2> 	__drawlinev ax, bx, cx, dl
  9746                              <3>  stkopen 0x07
  9747 00001FB4 83EC07              <4>  sub word sp, %1
  9748 00001FB7 54                  <4>  push sp
  9749 00001FB8 5D                  <4>  pop bp
  9750 00001FB9 894600              <3>  mov word [bp+0],%1
  9751 00001FBC 895E02              <3>  mov word [bp+2],%2
  9752 00001FBF 894E04              <3>  mov word [bp+4],%3
  9753 00001FC2 885606              <3>  mov byte [bp+6],%4
  9754 00001FC5 E833FF              <3>  call proc_drawlinev
  9755                              <3>  stkclose 0x07
  9756 00001FC8 83C407              <4>  add word sp, %1
  9757                              <2> 	
  9758 00001FCB C3                  <2> 	ret
  9759                              <2> 
  9760                              <2> proc_fillrect:
  9761 00001FCC 89E0                <2> 	mov ax,sp
  9762 00001FCE 89C5                <2> 	mov bp,ax	
  9763                              <2> 	
  9764 00001FD0 8B4602              <2> 	mov ax,[bp+2]
  9765 00001FD3 8B5E04              <2> 	mov bx,[bp+4]	
  9766 00001FD6 8B4E06              <2> 	mov cx,[bp+6]
  9767 00001FD9 8B5608              <2> 	mov dx,[bp+8]
  9768                              <2> 			
  9769                              <2> 	.l1:			
  9770 00001FDC 39D3                <2> 		cmp bx,dx
  9771 00001FDE 7727                <2> 		ja .l2
  9772                              <2> 		stkpush ax, bx, cx, dx, bp
  9773                              <3>  %rep %0
  9774                              <3>  push %1
  9775                              <3>  %rotate 1
  9776                              <3>  %endrep
  9777 00001FE0 50                  <4>  push %1
  9778                              <4>  %rotate 1
  9779 00001FE1 53                  <4>  push %1
  9780                              <4>  %rotate 1
  9781 00001FE2 51                  <4>  push %1
  9782                              <4>  %rotate 1
  9783 00001FE3 52                  <4>  push %1
  9784                              <4>  %rotate 1
  9785 00001FE4 55                  <4>  push %1
  9786                              <4>  %rotate 1
  9787                              <2> 		
  9788 00001FE5 8A560A              <2> 		mov dl,[bp+0x0A]
  9789                              <2> 		__drawlineh ax, bx, cx, dl
  9790                              <3>  stkopen 0x07
  9791 00001FE8 83EC07              <4>  sub word sp, %1
  9792 00001FEB 54                  <4>  push sp
  9793 00001FEC 5D                  <4>  pop bp
  9794 00001FED 894600              <3>  mov word [bp+0],%1
  9795 00001FF0 895E02              <3>  mov word [bp+2],%2
  9796 00001FF3 894E04              <3>  mov word [bp+4],%3
  9797 00001FF6 885606              <3>  mov byte [bp+6],%4
  9798 00001FF9 E8CBFE              <3>  call proc_drawlineh
  9799                              <3>  stkclose 0x07
  9800 00001FFC 83C407              <4>  add word sp, %1
  9801                              <2> 		
  9802                              <2> 		stkpop ax, bx, cx, dx, bp		
  9803                              <3>  %rep %0
  9804                              <3>  %rotate -1
  9805                              <3>  pop %1
  9806                              <3>  %endrep
  9807                              <4>  %rotate -1
  9808 00001FFF 5D                  <4>  pop %1
  9809                              <4>  %rotate -1
  9810 00002000 5A                  <4>  pop %1
  9811                              <4>  %rotate -1
  9812 00002001 59                  <4>  pop %1
  9813                              <4>  %rotate -1
  9814 00002002 5B                  <4>  pop %1
  9815                              <4>  %rotate -1
  9816 00002003 58                  <4>  pop %1
  9817 00002004 43                  <2> 		inc bx				
  9818 00002005 EBD5                <2> 		jmp .l1	
  9819                              <2> 	.l2:
  9820                              <2> 		
  9821 00002007 C3                  <2> 	ret
  9822                              <2> 
  9823                              <2> proc_drawarc:	
  9824 00002008 89E0                <2> 	mov ax,sp
  9825 0000200A 89C5                <2> 	mov bp,ax
  9826                              <2> 		
  9827 0000200C 8B4606              <2> 	mov ax,[bp+6]
  9828                              <2> 	__int16tofl ax, ax, bx
  9829                              <3>  stkopen 0x06
  9830 0000200F 83EC06              <4>  sub word sp, %1
  9831 00002012 54                  <4>  push sp
  9832 00002013 5D                  <4>  pop bp
  9833 00002014 894600              <3>  mov word [bp+0],%1
  9834 00002017 E827EB              <3>  call proc_int16tofl
  9835 0000201A 54                  <3>  push sp
  9836 0000201B 5D                  <3>  pop bp
  9837 0000201C 8B4602              <3>  mov word %2,[bp+2]
  9838 0000201F 8B5E04              <3>  mov word %3,[bp+4]
  9839                              <3>  stkclose 0x06
  9840 00002022 83C406              <4>  add word sp, %1
  9841                              <2> 	__arc_inc ax, bx, ax, bx
  9842                              <3>  stkopen 0x0C
  9843 00002025 83EC0C              <4>  sub word sp, %1
  9844 00002028 54                  <4>  push sp
  9845 00002029 5D                  <4>  pop bp
  9846 0000202A 894600              <3>  mov word [bp+0],%1
  9847 0000202D 895E02              <3>  mov word [bp+2],%2
  9848 00002030 E80D03              <3>  call proc__arc_inc
  9849 00002033 54                  <3>  push sp
  9850 00002034 5D                  <3>  pop bp
  9851 00002035 8B4604              <3>  mov word %3,[bp+4]
  9852 00002038 8B5E06              <3>  mov word %4,[bp+6]
  9853                              <3>  stkclose 0x0C
  9854 0000203B 83C40C              <4>  add word sp, %1
  9855 0000203E 50                  <2> 	push ax
  9856 0000203F 53                  <2> 	push bx
  9857                              <2> 	
  9858 00002040 B90000              <2> 	mov cx,0	; angulo (alta)
  9859 00002043 BA0000              <2> 	mov dx,0	; angulo (baixa)		
  9860 00002046 51                  <2> 	push cx
  9861 00002047 52                  <2> 	push dx
  9862                              <2> 	.l1:					
  9863 00002048 B8C93F              <2> 		mov ax,0x3FC9	; PI/2 (alta)
  9864 0000204B BBDB0F              <2> 		mov bx,0x0FDB	; PI/2 (baixa)	
  9865                              <2> 		__flcmp cx, dx, ax, bx, cl
  9866                              <3>  stkopen 0x09
  9867 0000204E 83EC09              <4>  sub word sp, %1
  9868 00002051 54                  <4>  push sp
  9869 00002052 5D                  <4>  pop bp
  9870 00002053 894E00              <3>  mov word [bp+0],%1
  9871 00002056 895602              <3>  mov word [bp+2],%2
  9872 00002059 894604              <3>  mov word [bp+4],%3
  9873 0000205C 895E06              <3>  mov word [bp+6],%4
  9874 0000205F E856ED              <3>  call proc_flcmp
  9875 00002062 54                  <3>  push sp
  9876 00002063 5D                  <3>  pop bp
  9877 00002064 8A4E08              <3>  mov byte %5, [bp+8]
  9878                              <3>  stkclose 0x09
  9879 00002067 83C409              <4>  add word sp, %1
  9880 0000206A 80F900              <2> 		cmp cl,0
  9881 0000206D 0F8FE301            <2> 		jg .l2
  9882                              <2> 		
  9883 00002071 89E0                <2> 		mov ax,sp
  9884 00002073 89C5                <2> 		mov bp,ax
  9885 00002075 83C508              <2> 		add bp,8
  9886                              <2> 		
  9887 00002078 55                  <2> 		push bp				
  9888 00002079 8B4608              <2> 		mov ax,[bp+8]			; raio (int16)		
  9889                              <2> 		__int16tofl ax, ax, bx	; raio (float)
  9890                              <3>  stkopen 0x06
  9891 0000207C 83EC06              <4>  sub word sp, %1
  9892 0000207F 54                  <4>  push sp
  9893 00002080 5D                  <4>  pop bp
  9894 00002081 894600              <3>  mov word [bp+0],%1
  9895 00002084 E8BAEA              <3>  call proc_int16tofl
  9896 00002087 54                  <3>  push sp
  9897 00002088 5D                  <3>  pop bp
  9898 00002089 8B4602              <3>  mov word %2,[bp+2]
  9899 0000208C 8B5E04              <3>  mov word %3,[bp+4]
  9900                              <3>  stkclose 0x06
  9901 0000208F 83C406              <4>  add word sp, %1
  9902 00002092 5D                  <2> 		pop bp		
  9903                              <2> 		
  9904 00002093 5A                  <2> 		pop dx
  9905 00002094 59                  <2> 		pop cx
  9906 00002095 51                  <2> 		push cx
  9907 00002096 52                  <2> 		push dx
  9908 00002097 55                  <2> 		push bp		
  9909                              <2> 		__y2dcoord ax, bx, cx, dx, ax, bx				
  9910                              <3>  stkopen 0x0C
  9911 00002098 83EC0C              <4>  sub word sp, %1
  9912 0000209B 54                  <4>  push sp
  9913 0000209C 5D                  <4>  pop bp
  9914 0000209D 894600              <3>  mov word [bp+0],%1
  9915 000020A0 895E02              <3>  mov word [bp+2],%2
  9916 000020A3 894E04              <3>  mov word [bp+4],%3
  9917 000020A6 895606              <3>  mov word [bp+6],%4
  9918 000020A9 E83902              <3>  call proc__y2dcoord
  9919 000020AC 54                  <3>  push sp
  9920 000020AD 5D                  <3>  pop bp
  9921 000020AE 8B4608              <3>  mov word %5,[bp+8]
  9922 000020B1 8B5E0A              <3>  mov word %6,[bp+0x0A]
  9923                              <3>  stkclose 0x0C
  9924 000020B4 83C40C              <4>  add word sp, %1
  9925                              <2> 		__fltoint16 ax, bx, ax	; y (int160)
  9926                              <3>  stkopen 0x06
  9927 000020B7 83EC06              <4>  sub word sp, %1
  9928 000020BA 54                  <4>  push sp
  9929 000020BB 5D                  <4>  pop bp
  9930 000020BC 894600              <3>  mov word [bp+0],%1
  9931 000020BF 895E02              <3>  mov word [bp+2],%2
  9932 000020C2 E8FAE9              <3>  call proc_fltoint16
  9933 000020C5 54                  <3>  push sp
  9934 000020C6 5D                  <3>  pop bp
  9935 000020C7 8B4604              <3>  mov word %3,[bp+4]
  9936                              <3>  stkclose 0x06
  9937 000020CA 83C406              <4>  add word sp, %1
  9938 000020CD 5D                  <2> 		pop bp
  9939                              <2> 		
  9940 000020CE 5A                  <2> 		pop dx
  9941 000020CF 59                  <2> 		pop cx	
  9942 000020D0 51                  <2> 		push cx
  9943 000020D1 52                  <2> 		push dx	
  9944 000020D2 50                  <2> 		push ax
  9945 000020D3 55                  <2> 		push bp
  9946 000020D4 51                  <2> 		push cx
  9947 000020D5 52                  <2> 		push dx
  9948                              <2> 		
  9949 000020D6 8B4606              <2> 		mov ax,[bp+6]			; raio (int16)
  9950                              <2> 		__int16tofl ax, ax, bx	; raio (float)
  9951                              <3>  stkopen 0x06
  9952 000020D9 83EC06              <4>  sub word sp, %1
  9953 000020DC 54                  <4>  push sp
  9954 000020DD 5D                  <4>  pop bp
  9955 000020DE 894600              <3>  mov word [bp+0],%1
  9956 000020E1 E85DEA              <3>  call proc_int16tofl
  9957 000020E4 54                  <3>  push sp
  9958 000020E5 5D                  <3>  pop bp
  9959 000020E6 8B4602              <3>  mov word %2,[bp+2]
  9960 000020E9 8B5E04              <3>  mov word %3,[bp+4]
  9961                              <3>  stkclose 0x06
  9962 000020EC 83C406              <4>  add word sp, %1
  9963 000020EF 5A                  <2> 		pop dx
  9964 000020F0 59                  <2> 		pop cx		
  9965                              <2> 		__x2dcoord ax, bx, cx, dx, ax, bx				
  9966                              <3>  stkopen 0x0C
  9967 000020F1 83EC0C              <4>  sub word sp, %1
  9968 000020F4 54                  <4>  push sp
  9969 000020F5 5D                  <4>  pop bp
  9970 000020F6 894600              <3>  mov word [bp+0],%1
  9971 000020F9 895E02              <3>  mov word [bp+2],%2
  9972 000020FC 894E04              <3>  mov word [bp+4],%3
  9973 000020FF 895606              <3>  mov word [bp+6],%4
  9974 00002102 E88501              <3>  call proc__x2dcoord
  9975 00002105 54                  <3>  push sp
  9976 00002106 5D                  <3>  pop bp
  9977 00002107 8B4608              <3>  mov word %5,[bp+8]
  9978 0000210A 8B5E0A              <3>  mov word %6,[bp+0x0A]
  9979                              <3>  stkclose 0x0C
  9980 0000210D 83C40C              <4>  add word sp, %1
  9981                              <2> 		__fltoint16 ax, bx, cx	; x (int16)
  9982                              <3>  stkopen 0x06
  9983 00002110 83EC06              <4>  sub word sp, %1
  9984 00002113 54                  <4>  push sp
  9985 00002114 5D                  <4>  pop bp
  9986 00002115 894600              <3>  mov word [bp+0],%1
  9987 00002118 895E02              <3>  mov word [bp+2],%2
  9988 0000211B E8A1E9              <3>  call proc_fltoint16
  9989 0000211E 54                  <3>  push sp
  9990 0000211F 5D                  <3>  pop bp
  9991 00002120 8B4E04              <3>  mov word %3,[bp+4]
  9992                              <3>  stkclose 0x06
  9993 00002123 83C406              <4>  add word sp, %1
  9994 00002126 5D                  <2> 		pop bp
  9995                              <2> 		
  9996 00002127 5A                  <2> 		pop dx
  9997 00002128 8B4602              <2> 		mov ax,[bp+2]
  9998 0000212B 8B4E04              <2> 		mov cx,[bp+4]
  9999                              <2> 			
 10000 0000212E 55                  <2> 		push bp				
 10001                              <2> 		__arc_quadcoords ax, bx, cx, dx, ax, bx, cx, dx
 10002                              <3>  stkopen 0x10
 10003 0000212F 83EC10              <4>  sub word sp, %1
 10004 00002132 54                  <4>  push sp
 10005 00002133 5D                  <4>  pop bp
 10006 00002134 894600              <3>  mov word [bp+0],%1
 10007 00002137 895E02              <3>  mov word [bp+2],%2
 10008 0000213A 894E04              <3>  mov word [bp+4],%3
 10009 0000213D 895606              <3>  mov word [bp+6],%4
 10010 00002140 E81601              <3>  call proc__arc_quadcoords
 10011 00002143 54                  <3>  push sp
 10012 00002144 5D                  <3>  pop bp
 10013 00002145 8B4608              <3>  mov word %5, [bp+8]
 10014 00002148 8B5E0A              <3>  mov word %6, [bp+0x0A]
 10015 0000214B 8B4E0C              <3>  mov word %7, [bp+0x0C]
 10016 0000214E 8B560E              <3>  mov word %8, [bp+0x0E]
 10017                              <3>  stkclose 0x10
 10018 00002151 83C410              <4>  add word sp, %1
 10019 00002154 5D                  <2> 		pop bp
 10020                              <2> 		
 10021                              <2> 		stkpush ax, bx, cx, dx, bp
 10022                              <3>  %rep %0
 10023                              <3>  push %1
 10024                              <3>  %rotate 1
 10025                              <3>  %endrep
 10026 00002155 50                  <4>  push %1
 10027                              <4>  %rotate 1
 10028 00002156 53                  <4>  push %1
 10029                              <4>  %rotate 1
 10030 00002157 51                  <4>  push %1
 10031                              <4>  %rotate 1
 10032 00002158 52                  <4>  push %1
 10033                              <4>  %rotate 1
 10034 00002159 55                  <4>  push %1
 10035                              <4>  %rotate 1
 10036                              <2> 		
 10037 0000215A 8A560A              <2> 		mov dl,[bp+0x0A]				
 10038 0000215D 807E0B00            <2> 		cmp byte [bp+0x0B],0
 10039 00002161 7530                <2> 		jnz .fill1
 10040 00002163 53                  <2> 			push bx
 10041 00002164 51                  <2> 			push cx
 10042 00002165 52                  <2> 			push dx			
 10043                              <2> 			__setpx ax, bx, dl
 10044                              <3>  stkopen 0x05
 10045 00002166 83EC05              <4>  sub word sp, %1
 10046 00002169 54                  <4>  push sp
 10047 0000216A 5D                  <4>  pop bp
 10048 0000216B 894600              <3>  mov word [bp+0],%1
 10049 0000216E 895E02              <3>  mov word [bp+2],%2
 10050 00002171 885604              <3>  mov byte [bp+4],%3
 10051 00002174 E872E3              <3>  call proc_setpx
 10052                              <3>  stkclose 0x05
 10053 00002177 83C405              <4>  add word sp, %1
 10054 0000217A 5A                  <2> 			pop dx
 10055 0000217B 59                  <2> 			pop cx
 10056 0000217C 5B                  <2> 			pop bx
 10057                              <2> 			__setpx cx, bx, dl
 10058                              <3>  stkopen 0x05
 10059 0000217D 83EC05              <4>  sub word sp, %1
 10060 00002180 54                  <4>  push sp
 10061 00002181 5D                  <4>  pop bp
 10062 00002182 894E00              <3>  mov word [bp+0],%1
 10063 00002185 895E02              <3>  mov word [bp+2],%2
 10064 00002188 885604              <3>  mov byte [bp+4],%3
 10065 0000218B E85BE3              <3>  call proc_setpx
 10066                              <3>  stkclose 0x05
 10067 0000218E 83C405              <4>  add word sp, %1
 10068 00002191 EB23                <2> 			jmp .endfill1
 10069                              <2> 		.fill1:
 10070 00002193 39C8                <2> 			cmp ax,cx
 10071 00002195 731F                <2> 			jae .endfill1	
 10072                              <2> 			stkpush ax, bx, cx, dx
 10073                              <3>  %rep %0
 10074                              <3>  push %1
 10075                              <3>  %rotate 1
 10076                              <3>  %endrep
 10077 00002197 50                  <4>  push %1
 10078                              <4>  %rotate 1
 10079 00002198 53                  <4>  push %1
 10080                              <4>  %rotate 1
 10081 00002199 51                  <4>  push %1
 10082                              <4>  %rotate 1
 10083 0000219A 52                  <4>  push %1
 10084                              <4>  %rotate 1
 10085                              <2> 			__setpx ax, bx, dl
 10086                              <3>  stkopen 0x05
 10087 0000219B 83EC05              <4>  sub word sp, %1
 10088 0000219E 54                  <4>  push sp
 10089 0000219F 5D                  <4>  pop bp
 10090 000021A0 894600              <3>  mov word [bp+0],%1
 10091 000021A3 895E02              <3>  mov word [bp+2],%2
 10092 000021A6 885604              <3>  mov byte [bp+4],%3
 10093 000021A9 E83DE3              <3>  call proc_setpx
 10094                              <3>  stkclose 0x05
 10095 000021AC 83C405              <4>  add word sp, %1
 10096                              <2> 			stkpop ax, bx, cx, dx			
 10097                              <3>  %rep %0
 10098                              <3>  %rotate -1
 10099                              <3>  pop %1
 10100                              <3>  %endrep
 10101                              <4>  %rotate -1
 10102 000021AF 5A                  <4>  pop %1
 10103                              <4>  %rotate -1
 10104 000021B0 59                  <4>  pop %1
 10105                              <4>  %rotate -1
 10106 000021B1 5B                  <4>  pop %1
 10107                              <4>  %rotate -1
 10108 000021B2 58                  <4>  pop %1
 10109 000021B3 40                  <2> 			inc ax
 10110 000021B4 EBDD                <2> 			jmp .fill1
 10111                              <2> 		.endfill1:
 10112                              <2> 		
 10113                              <2> 		stkload ax, bx, cx, dx, bp
 10114                              <3>  %rep %0
 10115                              <3>  %rotate -1
 10116                              <3>  pop %1
 10117                              <3>  %endrep
 10118                              <4>  %rotate -1
 10119 000021B6 5D                  <4>  pop %1
 10120                              <4>  %rotate -1
 10121 000021B7 5A                  <4>  pop %1
 10122                              <4>  %rotate -1
 10123 000021B8 59                  <4>  pop %1
 10124                              <4>  %rotate -1
 10125 000021B9 5B                  <4>  pop %1
 10126                              <4>  %rotate -1
 10127 000021BA 58                  <4>  pop %1
 10128                              <3>  %rep %0
 10129                              <3>  push %1
 10130                              <3>  %rotate 1
 10131                              <3>  %endrep
 10132 000021BB 50                  <4>  push %1
 10133                              <4>  %rotate 1
 10134 000021BC 53                  <4>  push %1
 10135                              <4>  %rotate 1
 10136 000021BD 51                  <4>  push %1
 10137                              <4>  %rotate 1
 10138 000021BE 52                  <4>  push %1
 10139                              <4>  %rotate 1
 10140 000021BF 55                  <4>  push %1
 10141                              <4>  %rotate 1
 10142                              <2> 		
 10143 000021C0 8A5E0A              <2> 		mov bl,[bp+0x0A]				
 10144 000021C3 807E0B00            <2> 		cmp byte [bp+0x0B],0
 10145 000021C7 7530                <2> 		jnz .fill2
 10146 000021C9 53                  <2> 			push bx
 10147 000021CA 51                  <2> 			push cx
 10148 000021CB 52                  <2> 			push dx			
 10149                              <2> 			__setpx ax, dx, bl
 10150                              <3>  stkopen 0x05
 10151 000021CC 83EC05              <4>  sub word sp, %1
 10152 000021CF 54                  <4>  push sp
 10153 000021D0 5D                  <4>  pop bp
 10154 000021D1 894600              <3>  mov word [bp+0],%1
 10155 000021D4 895602              <3>  mov word [bp+2],%2
 10156 000021D7 885E04              <3>  mov byte [bp+4],%3
 10157 000021DA E80CE3              <3>  call proc_setpx
 10158                              <3>  stkclose 0x05
 10159 000021DD 83C405              <4>  add word sp, %1
 10160 000021E0 5A                  <2> 			pop dx
 10161 000021E1 59                  <2> 			pop cx
 10162 000021E2 5B                  <2> 			pop bx
 10163                              <2> 			__setpx cx, dx, bl
 10164                              <3>  stkopen 0x05
 10165 000021E3 83EC05              <4>  sub word sp, %1
 10166 000021E6 54                  <4>  push sp
 10167 000021E7 5D                  <4>  pop bp
 10168 000021E8 894E00              <3>  mov word [bp+0],%1
 10169 000021EB 895602              <3>  mov word [bp+2],%2
 10170 000021EE 885E04              <3>  mov byte [bp+4],%3
 10171 000021F1 E8F5E2              <3>  call proc_setpx
 10172                              <3>  stkclose 0x05
 10173 000021F4 83C405              <4>  add word sp, %1
 10174 000021F7 EB23                <2> 			jmp .endfill2
 10175                              <2> 		.fill2:
 10176 000021F9 39C8                <2> 			cmp ax,cx
 10177 000021FB 731F                <2> 			jae .endfill2	
 10178                              <2> 			stkpush ax, bx, cx, dx
 10179                              <3>  %rep %0
 10180                              <3>  push %1
 10181                              <3>  %rotate 1
 10182                              <3>  %endrep
 10183 000021FD 50                  <4>  push %1
 10184                              <4>  %rotate 1
 10185 000021FE 53                  <4>  push %1
 10186                              <4>  %rotate 1
 10187 000021FF 51                  <4>  push %1
 10188                              <4>  %rotate 1
 10189 00002200 52                  <4>  push %1
 10190                              <4>  %rotate 1
 10191                              <2> 			__setpx ax, dx, bl
 10192                              <3>  stkopen 0x05
 10193 00002201 83EC05              <4>  sub word sp, %1
 10194 00002204 54                  <4>  push sp
 10195 00002205 5D                  <4>  pop bp
 10196 00002206 894600              <3>  mov word [bp+0],%1
 10197 00002209 895602              <3>  mov word [bp+2],%2
 10198 0000220C 885E04              <3>  mov byte [bp+4],%3
 10199 0000220F E8D7E2              <3>  call proc_setpx
 10200                              <3>  stkclose 0x05
 10201 00002212 83C405              <4>  add word sp, %1
 10202                              <2> 			stkpop ax, bx, cx, dx			
 10203                              <3>  %rep %0
 10204                              <3>  %rotate -1
 10205                              <3>  pop %1
 10206                              <3>  %endrep
 10207                              <4>  %rotate -1
 10208 00002215 5A                  <4>  pop %1
 10209                              <4>  %rotate -1
 10210 00002216 59                  <4>  pop %1
 10211                              <4>  %rotate -1
 10212 00002217 5B                  <4>  pop %1
 10213                              <4>  %rotate -1
 10214 00002218 58                  <4>  pop %1
 10215 00002219 40                  <2> 			inc ax
 10216 0000221A EBDD                <2> 			jmp .fill2
 10217                              <2> 		.endfill2:
 10218                              <2> 		
 10219                              <2> 		stkpop ax, bx, cx, dx, bp 		
 10220                              <3>  %rep %0
 10221                              <3>  %rotate -1
 10222                              <3>  pop %1
 10223                              <3>  %endrep
 10224                              <4>  %rotate -1
 10225 0000221C 5D                  <4>  pop %1
 10226                              <4>  %rotate -1
 10227 0000221D 5A                  <4>  pop %1
 10228                              <4>  %rotate -1
 10229 0000221E 59                  <4>  pop %1
 10230                              <4>  %rotate -1
 10231 0000221F 5B                  <4>  pop %1
 10232                              <4>  %rotate -1
 10233 00002220 58                  <4>  pop %1
 10234                              <2> 																		
 10235 00002221 5A                  <2> 		pop dx
 10236 00002222 59                  <2> 		pop cx
 10237 00002223 5B                  <2> 		pop bx
 10238 00002224 58                  <2> 		pop ax
 10239 00002225 50                  <2> 		push ax
 10240 00002226 53                  <2> 		push bx
 10241                              <2> 		__fladd cx, dx, ax, bx, cx, dx
 10242                              <3>  stkopen 0x0E
 10243 00002227 83EC0E              <4>  sub word sp, %1
 10244 0000222A 54                  <4>  push sp
 10245 0000222B 5D                  <4>  pop bp
 10246 0000222C 894E00              <3>  mov word [bp+0],%1
 10247 0000222F 895602              <3>  mov word [bp+2],%2
 10248 00002232 894604              <3>  mov word [bp+4],%3
 10249 00002235 895E06              <3>  mov word [bp+6],%4
 10250 00002238 C7460C0000          <3>  mov word [bp+0x0C],0
 10251 0000223D E80DEF              <3>  call proc_fladdorsub
 10252 00002240 54                  <3>  push sp
 10253 00002241 5D                  <3>  pop bp
 10254 00002242 8B4E08              <3>  mov word %5,[bp+8]
 10255 00002245 8B560A              <3>  mov word %6,[bp+0x0A]
 10256                              <3>  stkclose 0x0E
 10257 00002248 83C40E              <4>  add word sp, %1
 10258 0000224B 5B                  <2> 		pop bx
 10259 0000224C 58                  <2> 		pop ax
 10260 0000224D 50                  <2> 		push ax
 10261 0000224E 53                  <2> 		push bx
 10262 0000224F 51                  <2> 		push cx
 10263 00002250 52                  <2> 		push dx					
 10264                              <2> 		
 10265 00002251 E9F4FD              <2> 		jmp .l1
 10266                              <2> 	.l2:
 10267                              <2> 														
 10268 00002254 5A                  <2> 	pop dx
 10269 00002255 59                  <2> 	pop cx
 10270 00002256 5B                  <2> 	pop bx
 10271 00002257 58                  <2> 	pop ax
 10272                              <2> 	
 10273 00002258 C3                  <2> 	ret
 10274                              <2> 		
 10275                              <2> proc__arc_quadcoords:
 10276 00002259 89E0                <2> 	mov ax,sp
 10277 0000225B 89C5                <2> 	mov bp,ax
 10278                              <2> 	
 10279 0000225D B8FFFF              <2> 	mov ax,0xFFFF
 10280 00002260 2B4604              <2> 	sub ax,[bp+4]
 10281 00002263 40                  <2> 	inc ax
 10282 00002264 034602              <2> 	add ax,[bp+2]	
 10283 00002267 89460A              <2> 	mov [bp+0x0A], ax
 10284                              <2> 	
 10285 0000226A 8B4608              <2> 	mov ax,[bp+8]
 10286 0000226D 034606              <2> 	add ax,[bp+6]
 10287 00002270 89460C              <2> 	mov [bp+0x0C], ax
 10288                              <2> 	
 10289 00002273 8B4604              <2> 	mov ax,[bp+4]
 10290 00002276 034602              <2> 	add ax,[bp+2]
 10291 00002279 89460E              <2> 	mov [bp+0x0E], ax
 10292                              <2> 	
 10293 0000227C B8FFFF              <2> 	mov ax,0xFFFF
 10294 0000227F 2B4608              <2> 	sub ax,[bp+8]
 10295 00002282 40                  <2> 	inc ax
 10296 00002283 034606              <2> 	add ax,[bp+6]
 10297 00002286 894610              <2> 	mov [bp+0x10], ax
 10298                              <2> 	
 10299 00002289 C3                  <2> 	ret
 10300                              <2> 		
 10301                              <2> proc__x2dcoord:
 10302 0000228A 89E0                <2> 	mov ax,sp
 10303 0000228C 89C5                <2> 	mov bp,ax
 10304                              <2> 	
 10305 0000228E 8B4606              <2> 	mov ax,[bp+6]	; angulo (alta)
 10306 00002291 8B5E08              <2> 	mov bx,[bp+8]	; angulo (baixa)
 10307                              <2> 	
 10308                              <2> 	__cos0x90 ax,bx,ax,bx
 10309                              <3>  __sinorcos0x90 %1, %2, %3, %4, 0
 10310                              <4>  stkopen 0x09
 10311 00002294 83EC09              <5>  sub word sp, %1
 10312 00002297 54                  <5>  push sp
 10313 00002298 5D                  <5>  pop bp
 10314 00002299 894600              <4>  mov word [bp+0],%1
 10315 0000229C 895E02              <4>  mov word [bp+2],%2
 10316 0000229F C6460800            <4>  mov byte [bp+8],%5
 10317 000022A3 E836F7              <4>  call proc_sinorcos0x90
 10318 000022A6 54                  <4>  push sp
 10319 000022A7 5D                  <4>  pop bp
 10320 000022A8 8B4604              <4>  mov word %3,[bp+4]
 10321 000022AB 8B5E06              <4>  mov word %4,[bp+6]
 10322                              <4>  stkclose 0x09
 10323 000022AE 83C409              <5>  add word sp, %1
 10324                              <2> 	
 10325 000022B1 89E1                <2> 	mov cx,sp
 10326 000022B3 89CD                <2> 	mov bp,cx
 10327 000022B5 8B4E02              <2> 	mov cx,[bp+2]	; raio (alta)
 10328 000022B8 8B5604              <2> 	mov dx,[bp+4]	; raio (baixa)
 10329                              <2> 	
 10330                              <2> 	__flmul ax, bx, cx, dx, ax, bx
 10331                              <3>  stkopen 0x0E
 10332 000022BB 83EC0E              <4>  sub word sp, %1
 10333 000022BE 54                  <4>  push sp
 10334 000022BF 5D                  <4>  pop bp
 10335 000022C0 894600              <3>  mov word [bp+0],%1
 10336 000022C3 895E02              <3>  mov word [bp+2],%2
 10337 000022C6 894E04              <3>  mov word [bp+4],%3
 10338 000022C9 895606              <3>  mov word [bp+6],%4
 10339 000022CC E8D2EC              <3>  call proc_flmul
 10340 000022CF 54                  <3>  push sp
 10341 000022D0 5D                  <3>  pop bp
 10342 000022D1 8B4608              <3>  mov word %5,[bp+8]
 10343 000022D4 8B5E0A              <3>  mov word %6,[bp+0x0A]
 10344                              <3>  stkclose 0x0E
 10345 000022D7 83C40E              <4>  add word sp, %1
 10346                              <2> 	
 10347 000022DA 89E1                <2> 	mov cx,sp
 10348 000022DC 89CD                <2> 	mov bp,cx
 10349 000022DE 89460A              <2> 	mov [bp+0x0A],ax
 10350 000022E1 895E0C              <2> 	mov [bp+0x0C],bx
 10351                              <2> 			
 10352 000022E4 C3                  <2> 	ret
 10353                              <2> 	
 10354                              <2> proc__y2dcoord:
 10355 000022E5 89E0                <2> 	mov ax,sp
 10356 000022E7 89C5                <2> 	mov bp,ax
 10357                              <2> 	
 10358 000022E9 8B4606              <2> 	mov ax,[bp+6]	; angulo (alta)
 10359 000022EC 8B5E08              <2> 	mov bx,[bp+8]	; angulo (baixa)
 10360                              <2> 	
 10361                              <2> 	__sin0x90 ax,bx,ax,bx
 10362                              <3>  __sinorcos0x90 %1, %2, %3, %4, 1
 10363                              <4>  stkopen 0x09
 10364 000022EF 83EC09              <5>  sub word sp, %1
 10365 000022F2 54                  <5>  push sp
 10366 000022F3 5D                  <5>  pop bp
 10367 000022F4 894600              <4>  mov word [bp+0],%1
 10368 000022F7 895E02              <4>  mov word [bp+2],%2
 10369 000022FA C6460801            <4>  mov byte [bp+8],%5
 10370 000022FE E8DBF6              <4>  call proc_sinorcos0x90
 10371 00002301 54                  <4>  push sp
 10372 00002302 5D                  <4>  pop bp
 10373 00002303 8B4604              <4>  mov word %3,[bp+4]
 10374 00002306 8B5E06              <4>  mov word %4,[bp+6]
 10375                              <4>  stkclose 0x09
 10376 00002309 83C409              <5>  add word sp, %1
 10377                              <2> 	
 10378 0000230C 89E1                <2> 	mov cx,sp
 10379 0000230E 89CD                <2> 	mov bp,cx
 10380 00002310 8B4E02              <2> 	mov cx,[bp+2]	; raio (alta)
 10381 00002313 8B5604              <2> 	mov dx,[bp+4]	; raio (baixa)
 10382                              <2> 	
 10383                              <2> 	__flmul ax, bx, cx, dx, ax, bx
 10384                              <3>  stkopen 0x0E
 10385 00002316 83EC0E              <4>  sub word sp, %1
 10386 00002319 54                  <4>  push sp
 10387 0000231A 5D                  <4>  pop bp
 10388 0000231B 894600              <3>  mov word [bp+0],%1
 10389 0000231E 895E02              <3>  mov word [bp+2],%2
 10390 00002321 894E04              <3>  mov word [bp+4],%3
 10391 00002324 895606              <3>  mov word [bp+6],%4
 10392 00002327 E877EC              <3>  call proc_flmul
 10393 0000232A 54                  <3>  push sp
 10394 0000232B 5D                  <3>  pop bp
 10395 0000232C 8B4608              <3>  mov word %5,[bp+8]
 10396 0000232F 8B5E0A              <3>  mov word %6,[bp+0x0A]
 10397                              <3>  stkclose 0x0E
 10398 00002332 83C40E              <4>  add word sp, %1
 10399                              <2> 	
 10400 00002335 89E1                <2> 	mov cx,sp
 10401 00002337 89CD                <2> 	mov bp,cx
 10402 00002339 89460A              <2> 	mov [bp+0x0A],ax
 10403 0000233C 895E0C              <2> 	mov [bp+0x0C],bx
 10404                              <2> 			
 10405 0000233F C3                  <2> 	ret
 10406                              <2> 	
 10407                              <2> proc__arc_inc:
 10408 00002340 89E0                <2> 	mov ax,sp
 10409 00002342 89C5                <2> 	mov bp,ax
 10410                              <2> 			
 10411 00002344 8B4602              <2> 	mov ax,[bp+2]
 10412 00002347 8B5E04              <2> 	mov bx,[bp+4]
 10413 0000234A 55                  <2> 	push bp
 10414                              <2> 	__flshr ax,1	; divide por 2
 10415                              <3>  stkopen 0x03
 10416 0000234B 83EC03              <4>  sub word sp, %1
 10417 0000234E 54                  <4>  push sp
 10418 0000234F 5D                  <4>  pop bp
 10419 00002350 894600              <3>  mov word [bp+0],%1
 10420 00002353 C6460201            <3>  mov byte [bp+2],%2
 10421 00002357 E80AEB              <3>  call proc_flshr
 10422 0000235A 54                  <3>  push sp
 10423 0000235B 5D                  <3>  pop bp
 10424 0000235C 8B4600              <3>  mov word %1,[bp+0]
 10425                              <3>  stkclose 0x03
 10426 0000235F 83C403              <4>  add word sp, %1
 10427 00002362 5D                  <2> 	pop bp
 10428                              <2> 	
 10429 00002363 B94940              <2> 	mov cx,0x4049	; PI (alta)
 10430 00002366 BADB0F              <2> 	mov dx,0x0FDB	; PI (baixa)
 10431                              <2> 	
 10432 00002369 55                  <2> 	push bp
 10433                              <2> 	__flmul ax, bx, cx, dx, ax, bx
 10434                              <3>  stkopen 0x0E
 10435 0000236A 83EC0E              <4>  sub word sp, %1
 10436 0000236D 54                  <4>  push sp
 10437 0000236E 5D                  <4>  pop bp
 10438 0000236F 894600              <3>  mov word [bp+0],%1
 10439 00002372 895E02              <3>  mov word [bp+2],%2
 10440 00002375 894E04              <3>  mov word [bp+4],%3
 10441 00002378 895606              <3>  mov word [bp+6],%4
 10442 0000237B E823EC              <3>  call proc_flmul
 10443 0000237E 54                  <3>  push sp
 10444 0000237F 5D                  <3>  pop bp
 10445 00002380 8B4608              <3>  mov word %5,[bp+8]
 10446 00002383 8B5E0A              <3>  mov word %6,[bp+0x0A]
 10447                              <3>  stkclose 0x0E
 10448 00002386 83C40E              <4>  add word sp, %1
 10449 00002389 5D                  <2> 	pop bp
 10450                              <2> 	
 10451 0000238A B9C93F              <2> 	mov cx,0x3FC9
 10452 0000238D BADB0F              <2> 	mov dx,0x0FDB
 10453                              <2> 	
 10454 00002390 55                  <2> 	push bp
 10455                              <2> 	__fldiv cx, dx, ax, bx, ax, bx
 10456                              <3>  stkopen 0x0E
 10457 00002391 83EC0E              <4>  sub word sp, %1
 10458 00002394 54                  <4>  push sp
 10459 00002395 5D                  <4>  pop bp
 10460 00002396 894E00              <3>  mov word [bp+0],%1
 10461 00002399 895602              <3>  mov word [bp+2],%2
 10462 0000239C 894604              <3>  mov word [bp+4],%3
 10463 0000239F 895E06              <3>  mov word [bp+6],%4
 10464 000023A2 E8DDEA              <3>  call proc_fldiv
 10465 000023A5 54                  <3>  push sp
 10466 000023A6 5D                  <3>  pop bp
 10467 000023A7 8B4608              <3>  mov word %5,[bp+8]
 10468 000023AA 8B5E0A              <3>  mov word %6,[bp+0x0A]
 10469                              <3>  stkclose 0x0E
 10470 000023AD 83C40E              <4>  add word sp, %1
 10471 000023B0 5D                  <2> 	pop bp
 10472                              <2> 	
 10473 000023B1 894606              <2> 	mov [bp+6], ax
 10474 000023B4 895E08              <2> 	mov [bp+8], bx
 10475                              <2> 	
 10476 000023B7 C3                  <2> 	ret
 10477                              <2> 	
 10478                              <2> %endif
 10479                              <1> 			
 10480                              <1> %macro drawstring 4
 10481                              <1> 	drawstring cs, %1, cs, %2, cs, %3, cs, %4
 10482                              <1> %endmacro
 10483                              <1> 			
 10484                              <1> %macro drawlineh 4
 10485                              <1> 	drawlineh cs, %1, cs, %2, cs, %3, cs, %4
 10486                              <1> %endmacro			
 10487                              <1> 
 10488                              <1> %macro drawlinev 4
 10489                              <1> 	drawlinev cs, %1, cs, %2, cs, %3, cs, %4
 10490                              <1> %endmacro			
 10491                              <1> 			
 10492                              <1> %macro drawrect 5
 10493                              <1> 	drawrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 10494                              <1> %endmacro
 10495                              <1> 
 10496                              <1> %macro fillrect 5
 10497                              <1> 	fillrect cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 10498                              <1> %endmacro	
 10499                              <1> 
 10500                              <1> %macro drawarc 5
 10501                              <1> 	drawarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 10502                              <1> %endmacro
 10503                              <1> 
 10504                              <1> %macro fillarc 5
 10505                              <1> 	fillarc cs, %1, cs, %2, cs, %3, cs, %4, cs, %5
 10506                              <1> %endmacro			
 10507                              <1> 
 10508                              <1> %macro repaint 1
 10509                              <1> 	repaint cs, %1
 10510                              <1> %endmacro
 10511                              <1> 
 10512                              <1> %macro drawstring 8	
 10513                              <1> 	stkopen 0x07	
 10514                              <1> 	mov word [bp+0],%1
 10515                              <1> 	mov word [bp+2],%2	
 10516                              <1> 	mov ax,%3
 10517                              <1> 	mov ds,ax
 10518                              <1> 	mov al,[%4]
 10519                              <1> 	mov [bp+4],al	
 10520                              <1> 	mov ax,%5
 10521                              <1> 	mov ds,ax
 10522                              <1> 	mov al,[%6]
 10523                              <1> 	mov [bp+6],al
 10524                              <1> 	mov ax,%7	
 10525                              <1> 	mov ds,ax
 10526                              <1> 	mov al,[%8]
 10527                              <1> 	mov [bp+8],al			
 10528                              <1> 	call proc_drawstring
 10529                              <1> 	stkclose 0x07
 10530                              <1> %endmacro
 10531                              <1> 
 10532                              <1> %macro drawlineh 8
 10533                              <1> 	stkopen 0x07
 10534                              <1> 	mov ax,%1
 10535                              <1> 	mov ds,ax
 10536                              <1> 	mov ax,[%2]
 10537                              <1> 	mov [bp+0],ax	
 10538                              <1> 	mov ax,%3
 10539                              <1> 	mov ds,ax
 10540                              <1> 	mov ax,[%4]
 10541                              <1> 	mov [bp+2],ax	
 10542                              <1> 	mov ax,%5
 10543                              <1> 	mov ds,ax
 10544                              <1> 	mov ax,[%6]
 10545                              <1> 	mov [bp+4],ax		
 10546                              <1> 	mov ax,%7
 10547                              <1> 	mov ds,ax
 10548                              <1> 	mov al,[%8]
 10549                              <1> 	mov [bp+6],al
 10550                              <1> 	call proc_drawlineh	
 10551                              <1> 	stkclose 0x07
 10552                              <1> %endmacro
 10553                              <1> 
 10554                              <1> %macro drawlinev 8
 10555                              <1> 	stkopen 0x07
 10556                              <1> 	mov ax,%1
 10557                              <1> 	mov ds,ax
 10558                              <1> 	mov ax,[%2]
 10559                              <1> 	mov [bp+0],ax	
 10560                              <1> 	mov ax,%3
 10561                              <1> 	mov ds,ax
 10562                              <1> 	mov ax,[%4]
 10563                              <1> 	mov [bp+2],ax	
 10564                              <1> 	mov ax,%5
 10565                              <1> 	mov ds,ax
 10566                              <1> 	mov ax,[%6]
 10567                              <1> 	mov [bp+4],ax		
 10568                              <1> 	mov ax,%7
 10569                              <1> 	mov ds,ax
 10570                              <1> 	mov al,[%8]
 10571                              <1> 	mov [bp+6],al
 10572                              <1> 	call proc_drawlinev	
 10573                              <1> 	stkclose 0x07
 10574                              <1> %endmacro
 10575                              <1> 
 10576                              <1> %macro drawrect 10
 10577                              <1> 	stkopen 0x09	
 10578                              <1> 	mov ax,%1
 10579                              <1> 	mov ds,ax
 10580                              <1> 	mov ax,[%2]
 10581                              <1> 	mov [bp+0],ax	
 10582                              <1> 	mov ax,%3
 10583                              <1> 	mov ds,ax
 10584                              <1> 	mov ax,[%4]
 10585                              <1> 	mov [bp+2],ax	
 10586                              <1> 	mov ax,%5
 10587                              <1> 	mov ds,ax
 10588                              <1> 	mov ax,[%6]
 10589                              <1> 	mov [bp+4],ax	
 10590                              <1> 	mov ax,%7
 10591                              <1> 	mov ds,ax
 10592                              <1> 	mov ax,[%8]
 10593                              <1> 	mov [bp+6],ax	
 10594                              <1> 	mov ax,%9
 10595                              <1> 	mov ds,ax
 10596                              <1> 	mov al,[%10]
 10597                              <1> 	mov [bp+8],al	
 10598                              <1> 	call proc_drawrect	
 10599                              <1> 	stkclose 0x09
 10600                              <1> %endmacro
 10601                              <1> 
 10602                              <1> %macro fillrect 10
 10603                              <1> 	stkopen 0x09	
 10604                              <1> 	mov ax,%1
 10605                              <1> 	mov ds,ax
 10606                              <1> 	mov ax,[%2]
 10607                              <1> 	mov [bp+0],ax	
 10608                              <1> 	mov ax,%3
 10609                              <1> 	mov ds,ax
 10610                              <1> 	mov ax,[%4]
 10611                              <1> 	mov [bp+2],ax	
 10612                              <1> 	mov ax,%5
 10613                              <1> 	mov ds,ax
 10614                              <1> 	mov ax,[%6]
 10615                              <1> 	mov [bp+4],ax	
 10616                              <1> 	mov ax,%7
 10617                              <1> 	mov ds,ax
 10618                              <1> 	mov ax,[%8]
 10619                              <1> 	mov [bp+6],ax	
 10620                              <1> 	mov ax,%9
 10621                              <1> 	mov ds,ax
 10622                              <1> 	mov al,[%10]
 10623                              <1> 	mov [bp+8],al	
 10624                              <1> 	call proc_fillrect	
 10625                              <1> 	stkclose 0x09
 10626                              <1> %endmacro
 10627                              <1> 
 10628                              <1> %macro drawarc 10
 10629                              <1> 	drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 0
 10630                              <1> %endmacro
 10631                              <1> 
 10632                              <1> %macro fillarc 10
 10633                              <1> 	drawarc %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, 1
 10634                              <1> %endmacro
 10635                              <1> 		
 10636                              <1> %macro drawarc 11
 10637                              <1> 	stkopen 0x0A
 10638                              <1> 	mov ax,%1
 10639                              <1> 	mov ds,ax
 10640                              <1> 	mov ax,[%2]
 10641                              <1> 	mov [bp+0],ax	
 10642                              <1> 	mov ax,%3
 10643                              <1> 	mov ds,ax
 10644                              <1> 	mov ax,[%4]
 10645                              <1> 	mov [bp+2],ax	
 10646                              <1> 	mov ax,%5
 10647                              <1> 	mov ds,ax
 10648                              <1> 	mov ax,[%6]
 10649                              <1> 	mov [bp+4],ax	
 10650                              <1> 	mov ax,%7
 10651                              <1> 	mov ds,ax
 10652                              <1> 	mov ax,[%8]
 10653                              <1> 	mov [bp+6],ax	
 10654                              <1> 	mov ax,%9
 10655                              <1> 	mov ds,ax
 10656                              <1> 	mov al,[%10]
 10657                              <1> 	mov byte [bp+8],al		
 10658                              <1> 	mov byte [bp+9],%11	
 10659                              <1> 	call proc_drawarc	
 10660                              <1> 	stkclose 0x0A
 10661                              <1> %endmacro
 10662                              <1> 		
 10663                              <1> 		
 10664                              <1> %endif
 10665                                  
 10666                                  section .text
 10667                                  	global _start
 10668                                  	
 10669                                  _start:	
 10670                                  	initgraph
 10671 00000000 E8(6B04)            <1>  call proc_initgraph
 10672                              <1>  setbgcolor 0
 10673 00000003 B40B                <2>  mov ah,0Bh
 10674 00000005 B700                <2>  mov bh,00h
 10675 00000007 B300                <2>  mov bl,%1
 10676 00000009 CD10                <2>  int 10h
 10677                              <1>  setpallete 1
 10678 0000000B B40B                <2>  mov ah,0Bh
 10679 0000000D B701                <2>  mov bh,01h
 10680 0000000F B301                <2>  mov bl,%1
 10681 00000011 CD10                <2>  int 10h
 10682                                  		
 10683 00000013 B80090                  	mov ax,0x9000
 10684 00000016 8ED8                    	mov ds,ax
 10685                                  	
 10686 00000018 BEC800                  	mov si,200	
 10687 0000001B C60480                  	mov byte [si+0],0x80
 10688 0000001E C6440180                	mov byte [si+1],0x80
 10689 00000022 C6440280                	mov byte [si+2],0x80
 10690 00000026 C6440380                	mov byte [si+3],0x80	
 10691                                  	 	
 10692                                  	__fillrect 10, 10, 50, 50, 01h 	
 10693                              <1>  stkopen 0x09
 10694 0000002A 83EC09              <2>  sub word sp, %1
 10695 0000002D 54                  <2>  push sp
 10696 0000002E 5D                  <2>  pop bp
 10697 0000002F C746000A00          <1>  mov word [bp+0],%1
 10698 00000034 C746020A00          <1>  mov word [bp+2],%2
 10699 00000039 C746043200          <1>  mov word [bp+4],%3
 10700 0000003E C746063200          <1>  mov word [bp+6],%4
 10701 00000043 C6460801            <1>  mov byte [bp+8],%5
 10702 00000047 E8(CC1F)            <1>  call proc_fillrect
 10703                              <1>  stkclose 0x09
 10704 0000004A 83C409              <2>  add word sp, %1
 10705                                  	__fillrect 50, 10, 100, 50, 02h 	
 10706                              <1>  stkopen 0x09
 10707 0000004D 83EC09              <2>  sub word sp, %1
 10708 00000050 54                  <2>  push sp
 10709 00000051 5D                  <2>  pop bp
 10710 00000052 C746003200          <1>  mov word [bp+0],%1
 10711 00000057 C746020A00          <1>  mov word [bp+2],%2
 10712 0000005C C746046400          <1>  mov word [bp+4],%3
 10713 00000061 C746063200          <1>  mov word [bp+6],%4
 10714 00000066 C6460802            <1>  mov byte [bp+8],%5
 10715 0000006A E8(CC1F)            <1>  call proc_fillrect
 10716                              <1>  stkclose 0x09
 10717 0000006D 83C409              <2>  add word sp, %1
 10718                                  	__fillrect 100, 10, 150, 50, 03h 	
 10719                              <1>  stkopen 0x09
 10720 00000070 83EC09              <2>  sub word sp, %1
 10721 00000073 54                  <2>  push sp
 10722 00000074 5D                  <2>  pop bp
 10723 00000075 C746006400          <1>  mov word [bp+0],%1
 10724 0000007A C746020A00          <1>  mov word [bp+2],%2
 10725 0000007F C746049600          <1>  mov word [bp+4],%3
 10726 00000084 C746063200          <1>  mov word [bp+6],%4
 10727 00000089 C6460803            <1>  mov byte [bp+8],%5
 10728 0000008D E8(CC1F)            <1>  call proc_fillrect
 10729                              <1>  stkclose 0x09
 10730 00000090 83C409              <2>  add word sp, %1
 10731                                  	__fillrect 150, 10, 200, 50, 04h 	
 10732                              <1>  stkopen 0x09
 10733 00000093 83EC09              <2>  sub word sp, %1
 10734 00000096 54                  <2>  push sp
 10735 00000097 5D                  <2>  pop bp
 10736 00000098 C746009600          <1>  mov word [bp+0],%1
 10737 0000009D C746020A00          <1>  mov word [bp+2],%2
 10738 000000A2 C74604C800          <1>  mov word [bp+4],%3
 10739 000000A7 C746063200          <1>  mov word [bp+6],%4
 10740 000000AC C6460804            <1>  mov byte [bp+8],%5
 10741 000000B0 E8(CC1F)            <1>  call proc_fillrect
 10742                              <1>  stkclose 0x09
 10743 000000B3 83C409              <2>  add word sp, %1
 10744                                  	__fillrect 200, 10, 250, 50, 05h 	
 10745                              <1>  stkopen 0x09
 10746 000000B6 83EC09              <2>  sub word sp, %1
 10747 000000B9 54                  <2>  push sp
 10748 000000BA 5D                  <2>  pop bp
 10749 000000BB C74600C800          <1>  mov word [bp+0],%1
 10750 000000C0 C746020A00          <1>  mov word [bp+2],%2
 10751 000000C5 C74604FA00          <1>  mov word [bp+4],%3
 10752 000000CA C746063200          <1>  mov word [bp+6],%4
 10753 000000CF C6460805            <1>  mov byte [bp+8],%5
 10754 000000D3 E8(CC1F)            <1>  call proc_fillrect
 10755                              <1>  stkclose 0x09
 10756 000000D6 83C409              <2>  add word sp, %1
 10757                                  	__fillrect 250, 10, 300, 50, 06h 	
 10758                              <1>  stkopen 0x09
 10759 000000D9 83EC09              <2>  sub word sp, %1
 10760 000000DC 54                  <2>  push sp
 10761 000000DD 5D                  <2>  pop bp
 10762 000000DE C74600FA00          <1>  mov word [bp+0],%1
 10763 000000E3 C746020A00          <1>  mov word [bp+2],%2
 10764 000000E8 C746042C01          <1>  mov word [bp+4],%3
 10765 000000ED C746063200          <1>  mov word [bp+6],%4
 10766 000000F2 C6460806            <1>  mov byte [bp+8],%5
 10767 000000F6 E8(CC1F)            <1>  call proc_fillrect
 10768                              <1>  stkclose 0x09
 10769 000000F9 83C409              <2>  add word sp, %1
 10770                                  	__fillrect 10, 50, 50, 90, 07h 	
 10771                              <1>  stkopen 0x09
 10772 000000FC 83EC09              <2>  sub word sp, %1
 10773 000000FF 54                  <2>  push sp
 10774 00000100 5D                  <2>  pop bp
 10775 00000101 C746000A00          <1>  mov word [bp+0],%1
 10776 00000106 C746023200          <1>  mov word [bp+2],%2
 10777 0000010B C746043200          <1>  mov word [bp+4],%3
 10778 00000110 C746065A00          <1>  mov word [bp+6],%4
 10779 00000115 C6460807            <1>  mov byte [bp+8],%5
 10780 00000119 E8(CC1F)            <1>  call proc_fillrect
 10781                              <1>  stkclose 0x09
 10782 0000011C 83C409              <2>  add word sp, %1
 10783                                  	__fillrect 50, 50, 100, 90, 08h 	
 10784                              <1>  stkopen 0x09
 10785 0000011F 83EC09              <2>  sub word sp, %1
 10786 00000122 54                  <2>  push sp
 10787 00000123 5D                  <2>  pop bp
 10788 00000124 C746003200          <1>  mov word [bp+0],%1
 10789 00000129 C746023200          <1>  mov word [bp+2],%2
 10790 0000012E C746046400          <1>  mov word [bp+4],%3
 10791 00000133 C746065A00          <1>  mov word [bp+6],%4
 10792 00000138 C6460808            <1>  mov byte [bp+8],%5
 10793 0000013C E8(CC1F)            <1>  call proc_fillrect
 10794                              <1>  stkclose 0x09
 10795 0000013F 83C409              <2>  add word sp, %1
 10796                                  	__fillrect 100, 50, 150, 90, 09h 	
 10797                              <1>  stkopen 0x09
 10798 00000142 83EC09              <2>  sub word sp, %1
 10799 00000145 54                  <2>  push sp
 10800 00000146 5D                  <2>  pop bp
 10801 00000147 C746006400          <1>  mov word [bp+0],%1
 10802 0000014C C746023200          <1>  mov word [bp+2],%2
 10803 00000151 C746049600          <1>  mov word [bp+4],%3
 10804 00000156 C746065A00          <1>  mov word [bp+6],%4
 10805 0000015B C6460809            <1>  mov byte [bp+8],%5
 10806 0000015F E8(CC1F)            <1>  call proc_fillrect
 10807                              <1>  stkclose 0x09
 10808 00000162 83C409              <2>  add word sp, %1
 10809                                  	__fillrect 150, 50, 200, 90, 0Ah 	
 10810                              <1>  stkopen 0x09
 10811 00000165 83EC09              <2>  sub word sp, %1
 10812 00000168 54                  <2>  push sp
 10813 00000169 5D                  <2>  pop bp
 10814 0000016A C746009600          <1>  mov word [bp+0],%1
 10815 0000016F C746023200          <1>  mov word [bp+2],%2
 10816 00000174 C74604C800          <1>  mov word [bp+4],%3
 10817 00000179 C746065A00          <1>  mov word [bp+6],%4
 10818 0000017E C646080A            <1>  mov byte [bp+8],%5
 10819 00000182 E8(CC1F)            <1>  call proc_fillrect
 10820                              <1>  stkclose 0x09
 10821 00000185 83C409              <2>  add word sp, %1
 10822                                  	__fillrect 200, 50, 250, 90, 0Bh 	
 10823                              <1>  stkopen 0x09
 10824 00000188 83EC09              <2>  sub word sp, %1
 10825 0000018B 54                  <2>  push sp
 10826 0000018C 5D                  <2>  pop bp
 10827 0000018D C74600C800          <1>  mov word [bp+0],%1
 10828 00000192 C746023200          <1>  mov word [bp+2],%2
 10829 00000197 C74604FA00          <1>  mov word [bp+4],%3
 10830 0000019C C746065A00          <1>  mov word [bp+6],%4
 10831 000001A1 C646080B            <1>  mov byte [bp+8],%5
 10832 000001A5 E8(CC1F)            <1>  call proc_fillrect
 10833                              <1>  stkclose 0x09
 10834 000001A8 83C409              <2>  add word sp, %1
 10835                                  	__fillrect 250, 50, 300, 90, 0Ch 	
 10836                              <1>  stkopen 0x09
 10837 000001AB 83EC09              <2>  sub word sp, %1
 10838 000001AE 54                  <2>  push sp
 10839 000001AF 5D                  <2>  pop bp
 10840 000001B0 C74600FA00          <1>  mov word [bp+0],%1
 10841 000001B5 C746023200          <1>  mov word [bp+2],%2
 10842 000001BA C746042C01          <1>  mov word [bp+4],%3
 10843 000001BF C746065A00          <1>  mov word [bp+6],%4
 10844 000001C4 C646080C            <1>  mov byte [bp+8],%5
 10845 000001C8 E8(CC1F)            <1>  call proc_fillrect
 10846                              <1>  stkclose 0x09
 10847 000001CB 83C409              <2>  add word sp, %1
 10848                                  	__fillrect 50, 90, 100, 140, 0Dh 	
 10849                              <1>  stkopen 0x09
 10850 000001CE 83EC09              <2>  sub word sp, %1
 10851 000001D1 54                  <2>  push sp
 10852 000001D2 5D                  <2>  pop bp
 10853 000001D3 C746003200          <1>  mov word [bp+0],%1
 10854 000001D8 C746025A00          <1>  mov word [bp+2],%2
 10855 000001DD C746046400          <1>  mov word [bp+4],%3
 10856 000001E2 C746068C00          <1>  mov word [bp+6],%4
 10857 000001E7 C646080D            <1>  mov byte [bp+8],%5
 10858 000001EB E8(CC1F)            <1>  call proc_fillrect
 10859                              <1>  stkclose 0x09
 10860 000001EE 83C409              <2>  add word sp, %1
 10861                                  	__fillrect 100, 90, 150, 140, 0Eh 	
 10862                              <1>  stkopen 0x09
 10863 000001F1 83EC09              <2>  sub word sp, %1
 10864 000001F4 54                  <2>  push sp
 10865 000001F5 5D                  <2>  pop bp
 10866 000001F6 C746006400          <1>  mov word [bp+0],%1
 10867 000001FB C746025A00          <1>  mov word [bp+2],%2
 10868 00000200 C746049600          <1>  mov word [bp+4],%3
 10869 00000205 C746068C00          <1>  mov word [bp+6],%4
 10870 0000020A C646080E            <1>  mov byte [bp+8],%5
 10871 0000020E E8(CC1F)            <1>  call proc_fillrect
 10872                              <1>  stkclose 0x09
 10873 00000211 83C409              <2>  add word sp, %1
 10874                                  	__fillrect 150, 90, 200, 140, 0Fh 	
 10875                              <1>  stkopen 0x09
 10876 00000214 83EC09              <2>  sub word sp, %1
 10877 00000217 54                  <2>  push sp
 10878 00000218 5D                  <2>  pop bp
 10879 00000219 C746009600          <1>  mov word [bp+0],%1
 10880 0000021E C746025A00          <1>  mov word [bp+2],%2
 10881 00000223 C74604C800          <1>  mov word [bp+4],%3
 10882 00000228 C746068C00          <1>  mov word [bp+6],%4
 10883 0000022D C646080F            <1>  mov byte [bp+8],%5
 10884 00000231 E8(CC1F)            <1>  call proc_fillrect
 10885                              <1>  stkclose 0x09
 10886 00000234 83C409              <2>  add word sp, %1
 10887                                  	
 10888                                  	 	
 10889                                  	repaint
 10890 00000237 E8(8D04)            <1>  call proc_repaint
 10891                                  	
 10892 0000023A EBFE                    	jmp $

%ifndef TRAY_MAC
	%define TRAY_MAC
			
	%include "lib/system.mac"
	%include "lib/math.mac"

	%include "src/lib/constants.asm"

section .data
	__SQUARE_COUNT: dw 40
	__SQUARE_XCOUNT: dw 10
	__SQUARE_YCOUNT: dw 4
	__SQUARE_COUNT_DEC: dw 8
	__SQUAREMAP: db 1, 0, 1, 0, 1, 1, 0, 1, 0, 1
				  db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
				  db 1, 1, 0, 1, 0, 0, 1, 0, 1, 1
				  db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1	
				 
		
	__squaremap: times 40 db 0
	 	
	__tray_x1: dw 10
	__tray_y1: dw 10
	__tray_x2: dw 310
	__tray_y2: dw 190

	__square_x: dw 0
	__square_y: dw 0		
	__square_x2: dw 0
	__square_y2: dw 0
	__square_w: dw 30
	__square_h: dw 10	
					
	__square_count: dw 0	
	__square_xcount: dw 0
	__square_ycount: dw 0	
		
				 
%macro tray_initialize 0
	mov16 __square_count, __SQUARE_COUNT
	mov16 __square_xcount, __SQUARE_XCOUNT
	mov16 __square_ycount, __SQUARE_YCOUNT

	mov ax,cs
	mov ds,ax
	mov es,ax
	mov si, __SQUAREMAP
	mov di, __squaremap

	mov cx,[__square_count]	
	%%l1:
		cmp cx,0
		jz %%l2
		
		lodsb
		stosb
		
		dec cx
		jmp %%l1
	%%l2:
	
	sub16 __square_count, __SQUARE_COUNT_DEC
%endmacro
	
%macro tray_throw_colision 0
section .data
	%%rb: dd 0
	%%aux: dw 0
section .text
	fltoint16 __ball_radial, %%rb

	fltoint16 __ball_x, %%aux
	sub16 %%aux, %%rb
	cmp16 %%aux, __tray_x1, cl
	cmp cl,0
	jg %%endsidex1
		ball_xinvdirection		
	%%endsidex1:
	
	fltoint16 __ball_x, %%aux
	add16 %%aux, %%rb
	cmp16 %%aux, __tray_x2, cl
	cmp cl,0
	jl %%endsidex2
		ball_xinvdirection	
	%%endsidex2:
		
	fltoint16 __ball_y, %%aux
	sub16 %%aux, %%rb
	cmp16 %%aux, __tray_y1, cl
	cmp cl,0
	jg %%endsidey1
		ball_yinvdirection	
	%%endsidey1:
	
	fltoint16 __ball_y, %%aux
	add16 %%aux, %%rb
	cmp16 %%aux, __tray_y2, cl
	cmp cl,0
	jl %%endsidey2
		mov16 __lose, __ONE
	%%endsidey2:	
		
%endmacro	
	
%macro tray_throw_square_colision 0
section .data
	%%x: dw 0
	%%y: dw 0
	%%r: dw 0
	%%xaux: dw 0
	%%yaux: dw 0
	%%xinc: dw 0
section .text
	fltoint16 __ball_x, %%xaux
	fltoint16 __ball_y, %%yaux
	fltoint16 __ball_radial, %%r
	
	mov16 %%x, %%xaux
	mov16 %%y, %%yaux
	sub16 %%x, __tray_x1
	sub16 %%y, __tray_y1
	
	flgetsig __ball_xinc, ax	
	cmp ax,0
	jz %%xpos
	jmp %%xneg
	%%xpos:
		add16 %%x, %%r		
		jmp %%xpos_or_neg
	%%xneg:
		sub16 %%x, %%r				
	%%xpos_or_neg:		
		__tray_has_square_colision %%x, %%y, cl
		cmp cl,0
		jz %%endx
			squaremap_remove %%x, %%y
			ball_xinvdirection
	%%endx:	
	
	mov16 %%x, %%xaux
	mov16 %%y, %%yaux
	sub16 %%x, __tray_x1
	sub16 %%y, __tray_y1
		
	flgetsig __ball_yinc, ax	
	cmp ax,0
	jz %%ypos
	jmp %%yneg
	%%ypos:
		add16 %%y, %%r		
		jmp %%ypos_or_neg
	%%yneg:
		sub16 %%y, %%r				
	%%ypos_or_neg:		
		__tray_has_square_colision %%x, %%y, cl
		cmp cl,0
		jz %%endy
			squaremap_remove %%x, %%y
			ball_yinvdirection			
	%%endy:
			
%endmacro

%macro __tray_has_square_colision 3	
	div16 %1, __square_w		
	cmp16 %1, __square_xcount, cl
	cmp cl,0
	jg %%ncol
	jl %%xbound
		dec16 %1
	%%xbound:

	div16 %2, __square_h			
	cmp16 %2, __square_ycount, cl
	cmp cl,0
	jge %%ncol
	jl %%ybound
		dec16 %2
	%%ybound:	
		
	squaremap_get %1, %2, cl
	cmp cl,0
	jz %%ncol
		
		mov byte %3,1		
		jmp %%end
	%%ncol:		
		mov byte %3,0
	%%end:
%endmacro	
	
%macro squaremap_get 3
section .data
	%%aux: dd 0
section .text
	mov16 %%aux, %2
	mul16 %%aux, __square_xcount
	add16 %%aux, %1
	
	int16toreg %%aux, ax		
	
	vlodsb __squaremap, ax, %3		
%endmacro

%macro squaremap_set 3
section .data
	%%aux: dd 0
section .text
	mov16 %%aux, %2
	mul16 %%aux, __square_xcount
	add16 %%aux, %1
	
	int16toreg %%aux, ax			
	vstosb __squaremap, ax, %3		
%endmacro

%macro squaremap_remove 2
	squaremap_set %1, %2, 0
	dec16 __square_count	
%endmacro

%endif

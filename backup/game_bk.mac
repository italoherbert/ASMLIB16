%ifndef GAME_MAC
	%define GAME_MAC
			
	%include "lib/system.mac"
	%include "lib/math.mac"
	%include "lib/float.mac"
	%include "lib/trigon.mac"
	%include "lib/graph.mac"
	%include "lib/stdio.mac"

	%include "src/lib/structs.asm"

; Macros - JOGO

%macro game_initialize 0	
	mov16 __lose, __LOSE	
	
	mov16 __ball_x, __BALL_X
	mov16 __ball_y, __BALL_Y
	mov32 __ball_rinc, __BALL_RINC
		
	mov16 __racket_x, __RACKET_X
	mov16 __square_count, __SQUARE_COUNT
	mov16 __square_xcount, __SQUARE_XCOUNT
	mov16 __square_ycount, __SQUARE_YCOUNT

	toradians __BALL_ANGLE, __ball_angle
	
	mov cx,0
	%%l1:
		push cx
		int16toreg __square_count, dx
		pop cx
		cmp cx,dx
		jae %%l2
		push cx
		
		mov si, __squaremap
		add si,cx
		mov16 si, __ONE 
		
		pop cx
		inc cx
		jmp %%l1
	%%l2:

	add16 __ball_x, __tray_x1
	add16 __ball_y, __tray_y1
	
	add16 __racket_x, __tray_x1	
	mov16 __racket_y, __tray_y2
	sub16 __racket_y, __racket_h			
		
	ball_updateangle	
	
	game_hide_win_message
	game_hide_lose_message
	game_hide_pause_message
%endmacro

%macro game_status 1
	cmp16 __lose, __ONE, cl
	cmp cl,0
	jz %%lose
	
	cmp16 __square_count, __ZERO, cl
	cmp cl,0
	jz %%win
	
	%%playering:
		mov byte %1, 0
		jmp %%end
	%%win:
		mov byte %1, 1
		jmp %%end
	%%lose:
		mov byte %1, 2
	%%end:
%endmacro

%macro game_moveball 0
	game_throw_tray_colision
	game_throw_racket_colision	
	game_throw_square_colision
		
	ball_move	
%endmacro

%macro game_backmoveracket 0
section .data
	%%x: dw 0
section .text
	mov16 %%x, __racket_x
	sub16 %%x, __racket_inc
	racket_move %%x
%endmacro

%macro game_frontmoveracket 0
section .data
	%%x: dw 0
section .text
	mov16 %%x, __racket_x
	add16 %%x, __racket_inc
	racket_move %%x
%endmacro

%macro game_throw_tray_colision 0
section .data
	%%aux: dw 0
section .text
	mov16 %%aux, __ball_x
	sub16 %%aux, __ball_radial
	cmp16 %%aux, __tray_x1, cl
	cmp cl,0
	jg %%endsidex1
		chgsig __ball_xinc		
	%%endsidex1:
	
	mov16 %%aux, __ball_x
	add16 %%aux, __ball_radial
	cmp16 %%aux, __tray_x2, cl
	cmp cl,0
	jl %%endsidex2
		chgsig __ball_xinc
	%%endsidex2:
		
	mov16 %%aux, __ball_y
	sub16 %%aux, __ball_radial
	cmp16 %%aux, __tray_y1, cl
	cmp cl,0
	jg %%endsidey1
		chgsig __ball_yinc
	%%endsidey1:
	
	mov16 %%aux, __ball_y
	add16 %%aux, __ball_radial
	cmp16 %%aux, __tray_y2, cl
	cmp cl,0
	jl %%endsidey2
		mov16 __lose, __ONE
	%%endsidey2:	
		
%endmacro

%macro game_throw_racket_colision 0
section .data
	%%x: dw 0
	%%y: dw 0
	%%racket_x: dw 0
	%%racket_x2: dw 0
	%%racket_px2: dw 0
section .text
	cmp16 __lose, __ONE, cl
	cmp cl,0
	je %%end
	
	int16toreg __ball_yinc, ax	
	cmp ax,0
	jl %%end	 

	mov16 %%y, __ball_y
	add16 %%y, __ball_radial
			
	cmp16 %%y, __racket_y, cl
	cmp cl,0
	jl %%end	
		mov16 %%racket_x, __racket_x	
		mov16 %%racket_x2, __racket_x
		add16 %%racket_x2, __racket_w
		
		mov16 %%x, __ball_x
		add16 %%x, __ball_radial
				
		cmp16 %%x, %%racket_x, cl
		cmp cl,0
		jl %%end

		mov16 %%racket_px2, %%racket_x
		add16 %%racket_px2, __racket_pw
		cmp16 %%x, %%racket_px2, cl
		cmp cl,0
		jl %%left
		
										
		mov16 %%x, __ball_x
		sub16 %%x, __ball_radial		
		cmp16 %%x, %%racket_x2, cl		
		cmp cl,0		
		jg %%end
				
		mov16 %%racket_px2, %%racket_x2
		sub16 %%racket_px2, __racket_pw
		cmp16 %%x, %%racket_px2, cl
		cmp cl,0
		jg %%right
				
		jmp %%center
							
		%%left:			
			chgsig __ball_yinc
			game_leftangle
			jmp %%end	
		%%right:
			chgsig __ball_yinc	
			game_rightangle	
			jmp %%end		
		%%center:
			chgsig __ball_yinc					
	%%end:
%endmacro

%macro game_throw_square_colision 0
section .data
	%%x: dw 0
	%%y: dw 0
section .text
	mov16 %%x, __ball_x
	mov16 %%y, __ball_y
	sub16 %%x, __tray_x1
	sub16 %%y, __tray_y1
	
	int16toreg __ball_xinc, ax	
	cmp ax,0
	jg %%xpos
	jmp %%xneg
	%%xpos:
		add16 %%x, __ball_radial		
		jmp %%xpos_or_neg
	%%xneg:
		sub16 %%x, __ball_radial				
	%%xpos_or_neg:		
		throw_square_colision %%x, %%y, __ball_xinc
	%%endx:	
	
	mov16 %%x, __ball_x
	mov16 %%y, __ball_y
	sub16 %%x, __tray_x1
	sub16 %%y, __tray_y1
		
	int16toreg __ball_yinc, ax	
	cmp ax,0
	jg %%ypos
	jmp %%yneg
	%%ypos:
		add16 %%y, __ball_radial		
		jmp %%ypos_or_neg
	%%yneg:
		sub16 %%y, __ball_radial				
	%%ypos_or_neg:		
		throw_square_colision %%x, %%y, __ball_yinc
	%%endy:
			
%endmacro

%macro throw_square_colision 3	
	div16 %1, __square_w		
	cmp16 %1, __square_xcount, cl
	cmp cl,0
	jg %%end
	jl %%xbound
		dec16 %1
	%%xbound:

	div16 %2, __square_h			
	cmp16 %2, __square_ycount, cl
	cmp cl,0
	jge %%end
	jl %%ybound
		dec16 %2
	%%ybound:	
		
	squaremap_get %1, %2, cl
	cmp cl,0
	jz %%end
		squaremap_remove %1, %2		
		chgsig %3		
	%%end:
%endmacro

%macro game_show_init_message 0
	mov16 __show_init_message, __ONE
%endmacro

%macro game_hide_init_message 0
	mov16 __show_init_message, __ZERO
%endmacro

%macro game_show_win_message 0
	mov16 __show_win_message, __ONE
%endmacro

%macro game_hide_win_message 0
	mov16 __show_win_message, __ZERO
%endmacro

%macro game_show_lose_message 0
	mov16 __show_lose_message, __ONE
%endmacro

%macro game_hide_lose_message 0
	mov16 __show_lose_message, __ZERO
%endmacro

%macro game_show_pause_message 0
	mov16 __show_pause_message, __ONE
%endmacro

%macro game_hide_pause_message 0
	mov16 __show_pause_message, __ZERO
%endmacro


; Macros - BOLA

%macro ball_move 0
	cmp16 __ball_y, __tray_y2, cl
	cmp cl,0
	jge %%end
		add16 __ball_x, __ball_xinc
		add16 __ball_y, __ball_yinc
	%%end:
%endmacro

%macro game_leftangle 0
section .data
	%%xinc: dd 0
	%%yinc: dd 0
	%%cang: dd 0
	%%ang: dd 0	
section .text
	int16tofl __ball_xinc, %%xinc
	int16tofl __ball_yinc, %%yinc
	fldiv %%yinc, %%xinc, %%cang	
	atan %%cang, %%ang
	
	flsub %%ang, __BALL_VAR_ANGLE, __ball_angle
	ball_updateangle
%endmacro

%macro game_rightangle 0
%%xinc: dd 0
	%%yinc: dd 0
	%%cang: dd 0
	%%ang: dd 0	
section .text
	int16tofl __ball_xinc, %%xinc
	int16tofl __ball_yinc, %%yinc
	fldiv %%yinc, %%xinc, %%cang	
	atan %%cang, %%ang	
	
	fladd %%ang, __BALL_VAR_ANGLE, __ball_angle
	ball_updateangle
%endmacro

%macro ball_updateangle 0
section .data
	%%aux1: dd 0
	%%aux2: dd 0
section .text
	cos __ball_angle, %%aux1	
	sin __ball_angle, %%aux2
	flmul %%aux1, __ball_rinc, %%aux1
	flmul %%aux2, __ball_rinc, %%aux2
	fltoint16 %%aux1, __ball_xinc
	fltoint16 %%aux2, __ball_yinc
	
	int16toreg __ball_xinc, ax
	prthex16 ax
	int16toreg __ball_yinc, ax
	prthex16 ax
	mov ah,0
	int 16h	
%endmacro
	
%macro squaremap_get 3
section .data
	%%aux: dd 0
section .text
	mov16 %%aux, %2
	mul16 %%aux, __square_xcount
	add16 %%aux, %1
	
	int16toreg %%aux, ax		
	
	vlodsb __squaremap, ax, %3		
%endmacro

%macro squaremap_set 3
section .data
	%%aux: dd 0
section .text
	mov16 %%aux, %2
	mul16 %%aux, __square_xcount
	add16 %%aux, %1
	
	int16toreg %%aux, ax			
	vstosb __squaremap, ax, %3		
%endmacro

%macro squaremap_remove 2
	squaremap_set %1, %2, 0
	dec16 __square_count
%endmacro

%macro racket_move 1
section .data
	%%max_x2: dw 0
section .text	
	cmp16 %1, __tray_x1, cl
	cmp cl,0
	jl %%movesidex1
	
	mov16 %%max_x2, __tray_x2
	sub16 %%max_x2, __racket_w
	cmp16 %1, %%max_x2, cl
	cmp cl,0
	jg %%movesidex2
	
	mov16 __racket_x, %1
	jmp %%end
	
	%%movesidex1:
		mov16 __racket_x, __tray_x1
		jmp %%end
	%%movesidex2:	
		mov16 __racket_x, %%max_x2
	%%end:	
%endmacro	

%macro game_paint 0
	paintbg
	painttray
	paintball
	paintracket
	repaint
	
	cmp16 __show_init_message, __ZERO, cl
	cmp cl,0
	je %%init_message_painted
		show_message 'Pressione alguma tecla..', 8, 13, 07h		
	%%init_message_painted:
		
	cmp16 __show_pause_message, __ZERO, cl
	cmp cl,0
	je %%pause_message_painted		
		show_message 'Pausa...', 16, 14, 07h
	%%pause_message_painted:	
		
	cmp16 __show_win_message, __ZERO, cl
	cmp cl,0
	je %%win_message_painted
		show_message 'Ganhou...', 12, 13, 01h
		show_message 'Parabens !!!', 12, 14, 09h
	%%win_message_painted:
						
	cmp16 __show_lose_message, __ZERO, cl
	cmp cl,0
	je %%lose_message_painted	
		show_message 'Perdeu...', 11, 13, 04h
		show_message 'Tente novamente !', 11, 14, 09h
	%%lose_message_painted:	
%endmacro

%macro paintbg 0
	mov ax, 0
	mov bx, 0
	mov cx, 320
	mov dx, 200
	__fillrect ax, bx, cx, dx, 0 	
%endmacro

%macro show_message 4
	section .data
	%%str: db %1,0
section .text
	__drawstring %%str, %2, %3, %4
%endmacro
	
%macro painttray 0
section .data
	%%color: dw 1
section .text
	mov ax,20
	regtoint16 ax, %%color

	fillrect __tray_x1, __tray_y1, __tray_x2, __tray_y2, __tray_color
	drawlineh __tray_x1, __tray_y1, __tray_x2, __tray_bordercolor			
	drawlinev __tray_x1, __tray_y1, __tray_y2, __tray_bordercolor			
	drawlinev __tray_x2, __tray_y1, __tray_y2, __tray_bordercolor			
	
	mov16 __square_y, __tray_y1
	mov16 __square_y2, __square_y	
	add16 __square_y2, __square_h
	mov cl,0
	%%l1:
		push cx
		int16toreg __square_ycount, dx
		pop cx
		cmp cl,dl
		jae %%l2
		push cx
		
		mov16 __square_x, __tray_x1		
		mov16 __square_x2, __square_x
		add16 __square_x2, __square_w
		
		mov cl,0 
		%%l1.1:
			push cx
			int16toreg __square_xcount, dx
			pop cx
			cmp cl,dl
			jae %%l1.2									
			push cx
						
			int16toreg __square_xcount, ax
			pop cx
			pop bx
			push bx
			push cx
						
			mul bx
			add ax,cx
												
			vlodsb __squaremap, ax, cl
			cmp cl,0
			jz %%painted 														
				fillrect __square_x, __square_y, __square_x2, __square_y2, %%color
				drawrect __square_x, __square_y, __square_x2, __square_y2, __square_bordercolor
			%%painted:													

			add16 __square_x, __square_w
			add16 __square_x2, __square_w				
			inc16 %%color
			
			pop cx
			inc cl
			jmp %%l1.1
		%%l1.2:	
		
		add16 __square_y, __square_h		
		add16 __square_y2, __square_h		
								
		pop cx
		inc cl
		jmp %%l1	
	%%l2:
%endmacro		

%macro paintball 0
	fillarc __ball_x, __ball_y, __ball_radial, __ball_radial, __ball_color
	drawarc __ball_x, __ball_y, __ball_radial, __ball_radial, __ball_bordercolor
%endmacro

%macro paintracket 0
section .data
	%%x2: dw 0
	%%y2: dw 0
section .text
	mov16 %%x2, __racket_x
	mov16 %%y2, __racket_y
	add16 %%x2, __racket_w
	add16 %%y2, __racket_h
	fillrect __racket_x, __racket_y, %%x2, %%y2, __racket_color
	drawrect __racket_x, __racket_y, %%x2, %%y2, __racket_bordercolor
%endmacro				
	
%endif

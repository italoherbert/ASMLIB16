
%ifndef FLOAT_MAC
	%define FLOAT_MAC
	
	%include "lib/bits.mac"
	%include "lib/math.mac"
	%include "lib/stdio.mac"
	%include "lib/integer.mac"

%macro printIEEE 1
	printbin %1, 4, TRUE	
%endmacro

%macro printfloat 1-2 24
	section .bss
		%%n: resd 1
		%%e: resb 1
	section .text
		movbs %%n, %1, 4
		loadexp %%e, %%n
		
		mov byte al, [%%e]
		cmp al, 0x7F
		ja %%above
		jb %%below
		jmp %%endcmp
		%%above:
			sub byte al, 0x7F
			
			mov dl,0						
			jmp %%endcmp
		%%below:
			mov bl,al
			mov al,0x7F
			sub al,bl
			
			mov dl,1
		%%endcmp:				
				
		cmp al, %2
		jb %%nof
		jmp %%of
		%%of:
			push ax
			push dx
		
			setexp %%n, 01111111B
			
			pusha
			printbin %%n, 4, TRUE
			newline
			popa
			
			printfsig %%n
			printf "0,"
			printfdec %%n
			printf "E"
			
			pop dx
			cmp dl,0
			jz %%endez
				writechar '-'				
			%%endez:
			
			pop ax
			mov byte [%%e], al
			printint [%%e], 1
			
			jmp %%endof			
		%%nof:
			printfsig %%n
			printfint %%n
			printf ","
			printfdec %%n
		%%endof:		
%endmacro

%macro printfsig 1
	push ax
	mov ax,sp
	mov bp,ax
	loadsignal bp, %1
	mov ax,sp
	mov bp,ax
	cmp byte [bp], 0
	jz %%endneg
		printf "-"
	%%endneg:
	pop ax	
%endmacro	

%macro printfint 1
	section .bss
		%%int: resb 3
		%%aux: resb 4
	section .text
		loadfint %%int, %1
		  
		setbs %%aux, 4, 0
		movbs %%aux, %%int, 3				
		printint %%aux, 4
%endmacro

%macro printfdec 1
	section .bss
		%%dec: resb 3
		%%aux: resb 4
		%%lzeros: resb 1
	section .text
		loadfdec %%dec, %%lzeros, %1
		
		mov byte cl, [%%lzeros]		
		%%l3:
			cmp cl,0
			jz %%l4
			
			push ax
			writechar 30h
			pop ax
			
			dec cl
			jmp %%l3
		%%l4:
		
		setbs %%aux, 4, 0
		movbs %%aux, %%dec, 3		
		printint %%aux, 4
%endmacro
	
%macro stosfloat 2
	section .data
		%%real: dd %2 
	section .text		
		floatmov %1, %%real		
%endmacro

%macro floatmov 2
	push ds
	
	mov ax,ds
	mov es,ax
	mov ax,cs
	mov ds,ax
	mov si,%2
	mov di,%1

	mov cl,4
	%%l1:
		cmp cl,0
		jz %%l2
		
		lodsb
		stosb
		
		dec cl
		jmp %%l1
	%%l2:
	
	pop ds	
%endmacro	

%macro floatadd 2
	floataddorsub %1, %2, 0
%endmacro

%macro floatsub 2
	floataddorsub %1, %2, 1
%endmacro
	
%macro floataddorsub 3	
	section .bss
		%%s: resb 1
		%%e: resb 1
		%%m: resb 3
		%%s2: resb 1
		%%e2: resb 1
		%%m2: resb 3
		
		%%aux: resw 1		
	section .text				
		loadsignal %%s, %1
		loadexp %%e, %1
		loadmant %%m, %1
		
		loadsignal %%s2, %2
		loadexp %%e2, %2
		loadmant %%m2, %2
		
		mov byte al, %3
		xor byte al, [%%s2]
						
		mov bl,al
		xor byte bl, [%%s]
			
		push ax
		push bx	
		
		cmp byte [%%e], 00000000b
		je %%zero1
		cmp byte [%%e], 11111111b
		je %%end
		cmp byte [%%e2], 00000000b
		je %%end
		cmp byte [%%e2], 11111111b
		je %%infinity2
		
		jmp %%endvalidation
		%%zero1:
			shl al,7
			shl byte [%2],1
			shr byte [%2],1
			add byte [%2], al
			movbs %1, %2, 4
			jmp %%end			
		%%infinity2:		
			movbs %1, %2, 4
			jmp %%end				
		%%endvalidation:
				
		;__floataddorsub_print1 %%s, %%e, %%m, %%s2, %%e2, %%m2
				
		add byte [%%m +2], 10000000b
		add byte [%%m2+2], 10000000b
		
		mov byte ah, [%%e]
		mov byte al, [%%e2]
		cmp ah,al
		ja %%above
		jb %%below			
		jmp %%endcmp		
		%%above:
			sub ah, al
			mov byte [%%e2], ah															
			shrbs %%m2, 3, [%%e2]
			jmp %%endcmp
		%%below:
			mov byte ah, [%%e2]
			mov byte al, [%%e]
			mov byte [%%e], ah
			sub ah, al
			mov byte [%%e2], ah			
			shrbs %%m, 3, [%%e2]
		%%endcmp:
		
		;__floataddorsub_print2 %%e2, %%m, %%m2												
		
		cmpbs %%m, %%m2, 3
		pop bx
		pop ax									
		
		cmp byte al, 0
		jz %%xnor							
		
		mov byte [%%s], bl				
		
		jmp %%endxnor
		%%xnor:
			cmp byte [BITS_CMP], 0
			jl %%less
			jmp %%endless
			%%less:
				mov	byte [%%s], al 
			%%endless:
		%%endxnor: 
		
		cmp byte bl, 0
		jz %%sum
						
		cmp byte [BITS_CMP], 0
		jl %%less2
		jmp %%elseless2
		%%less2:
			subbs %%m2, %%m, 3
			movbs %%m, %%m2, 3
			jmp %%endless2
		%%elseless2:
			subbs %%m, %%m2, 3
		%%endless2:
		
		jmp %%endsum		
		%%sum:
			addbs %%m, %%m2, 3			
		%%endsum:
				
		;__floataddorsub_print3 %%m		
								
		cmp byte [BITS_OF], TRUE
		je %%overflow
		jmp %%notoverflow		
		%%overflow:
			add byte [%%e],1
			jmp %%endoverflow
		%%notoverflow:
			mov si, %%m
			mov cx,0
			mov al,0
			%%l1:
				cmp cx,3
				jae %%l2
				
				add si,cx
								
				mov byte bh, [si]				
				
				mov ah,bh				
				shl ah,1
				add ah,al
				mov byte [si], ah
				
				shr bh,7
				mov al,bh
				
				sub si,cx				
				
				inc cx
				jmp %%l1
			%%l2:
		%%endoverflow:
		
		;__floataddorsub_print4 %%m		
		
		floatformat %1, %%s, %%e, %%m
					
		%%end:						
%endmacro

%macro floatformat 4
	mov byte ah, [%2]
	shl ah,7
	mov byte al, [%3]
	shr al,1
	add ah,al		
	mov byte [%1+3], ah
	
	mov byte ah, [%3]
	shl ah,7
	mov byte al, [%4+2]
	shr al,1
	add ah,al
	mov byte [%1+2], ah
	
	mov byte ah, [%4+2]
	shl ah,7
	mov byte al, [%4+1]
	shr al,1
	add ah,al
	mov byte [%1+1], ah
	
	mov byte ah, [%4+1]
	shl ah,7
	mov byte al, [%4]
	shr al,1
	add ah,al
	mov byte [%1], ah
%endmacro

%macro __floataddorsub_print1 6
	printf "Sinal(1): "
	printbin %1,1		
	newline
	printf "Expoente(1): "			
	printbin %2,1			
	newline
	printf "Mantissa(1): "
	printbin %3,3
	newline
	newline		
	printf "Sinal(2): "
	printbin %4,1		
	newline
	printf "Expoente(2): "			
	printbin %5,1			
	newline
	printf "Mantissa(2): "
	printbin %6,3
	newline
	newline
%endmacro

%macro __floataddorsub_print2 3
	newline
	printf "Deslocamento: "		
	printbin %1,1
	newline
	printf "Mantissa(1): "
	printbin %2,3
	newline
	printf "Mantissa(2): "
	printbin %3,3
	newline
%endmacro

%macro __floataddorsub_print3 1
	newline
	printf "Depois da soma: "
	newline
	printf "Mantissa(1): "
	printbin %1,3
	newline
%endmacro

%macro __floataddorsub_print4 1
	newline
	printf "Deslocamento 2: "
	newline
	printf "Mantissa(1): "
	printbin %1,3
	newline
%endmacro

%macro setsig 2
	mov byte al, [%1+3]
	
	shl al,1
	shr al,1		

	mov byte bl, %2
	cmp bl, 0
	jz %%zero
		add al, 10000000b
	%%zero:
	
	mov byte [%1+3], al	
%endmacro

%macro setexp 2
	mov byte ah, [%1+3]
	mov byte al, [%1+2]
	
	mov bh, ah
	shr bh,7
	shl bh,7
	
	shl ax,1
	
	mov ah, %2
	shr ax,1
	
	add ah, bh	
	
	mov byte [%1+3], ah
	mov byte [%1+2], al
%endmacro

%macro loadsignal 2
	mov byte al, [%2+3]
	shr al,7
	mov byte [%1],al
%endmacro

%macro loadexp 2
	mov word ax, [%2+2]
	shl ax,1
	mov byte [%1],ah
%endmacro

%macro loadmant 2
	movbs %1, %2, 3	
	mov byte al, [%1+2]
	shl al,1
	shr al,1
	mov byte [%1+2], al
%endmacro

%macro loadfint 2
	section .bss
		%%e: resb 1
		%%aux: resb 4
	section .text	
		loadmant %1, %2
		add byte [%1+2], 10000000b
				
		loadexp %%e, %2
						
		xor ah,ah
		cmp byte [%%e], 0x7F
		ja %%above
		jb %%below
		jmp %%endcmp
		%%above:
			mov byte al, [%%e]
			sub al, 0x7F
			inc al
			
			xor bh, bh
			mov bl, 0x18
			sub bl, al
									
			push bx		
			mov ax, sp
			mov bp, ax								
			shrbs %1, 3, [bp]
			pop bx
									
			jmp %%endcmp
		%%below:			
			setbs %1, 3, 0
		%%endcmp:		
%endmacro

%macro loadfdec 3-4 8
	section .bss
		%%e: resb 1
		%%dec: resb 3
		%%factor: resb 3
		%%factor2: resb 3		
		%%q: resb 3
		%%r: resb 3
		%%bit: resb 1
	section .text		
		loadmant %%dec, %3
		add byte [%%dec+2], 10000000b
				
		loadexp %%e, %3
						
		xor ah,ah
		cmp byte [%%e], 0x7F
		ja %%above
		jb %%below
		jmp %%endcmp
		%%above:
			mov byte al, [%%e]
			sub al, 0x7F
			mov byte [%%e], al
			inc al
						
			push ax		
			mov ax, sp
			mov bp, ax															
			shlbs %%dec, 3, [bp]
			pop ax
									
			jmp %%endcmp
		%%below:
			mov al, 0x7F
			sub byte al, [%%e]			
			
			push ax									
			mov ax, sp
			mov bp, ax					
			shrbs %%dec, 3, [bp]			 
			pop ax  	
		%%endcmp:

		lzeroscountbs %2, %%dec, 3
		xor ah,ah
		mov byte al, [%2]
		mov bl, 4
		div bl	
		mul bl
		mov byte [%2], al		
		shlbs %%dec, 3, byte [%2]
		
		xor ah,ah
		mov byte al, [%2]
		mov bl, 4
		div bl
		mov byte [%2], al
						
		movbsb %%factor, 3, 0Ah
		mov byte cl, %4
		push cx
		mov ax,sp
		mov bp,ax
		powbs %%factor, 3, [bp] 
		pop cx
		
		setbs %1, 3, 0				
					
		mov cl, 0
		%%l1:
			cmp cl, %4
			jae %%l2
		
			push cx
			mov ax,sp
			mov bp,ax
			loadbitbs %%bit, %%dec, 3, [bp]
						
			cmp byte [%%bit],0 	
			jz %%endone
				movbsb %%factor2, 3, 2
							
				pop cx
				push cx
								
				mov bl,cl
				inc bl
				
				push bx
				mov ax,sp
				mov bp,ax
				powbs %%factor2, 3, [bp]
						
				pop bx	
				
				divbs %%q, %%r, %%factor, %%factor2, 3
				addbs %1, %%q, 3
				addbs %1, %%r, 3									
			%%endone:
		
			pop cx
			
			inc cl
			jmp %%l1
		%%l2:	
		
%endmacro

%endif